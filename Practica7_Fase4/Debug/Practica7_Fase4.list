
Practica7_Fase4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e224  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  0800e3b4  0800e3b4  0001e3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e580  0800e580  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800e580  0800e580  0001e580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e588  0800e588  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e588  0800e588  0001e588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e58c  0800e58c  0001e58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000148  20000000  0800e590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ddd8  20000148  0800e6d8  00020148  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000df20  0800e6d8  0002df20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002d6a8  00000000  00000000  000201bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006032  00000000  00000000  0004d863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002880  00000000  00000000  00053898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001f65  00000000  00000000  00056118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000086a3  00000000  00000000  0005807d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030547  00000000  00000000  00060720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010c6c3  00000000  00000000  00090c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000ae9c  00000000  00000000  0019d32c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001a81c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000148 	.word	0x20000148
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e39c 	.word	0x0800e39c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000014c 	.word	0x2000014c
 80001cc:	0800e39c 	.word	0x0800e39c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b970 	b.w	8000d04 <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9e08      	ldr	r6, [sp, #32]
 8000a42:	460d      	mov	r5, r1
 8000a44:	4604      	mov	r4, r0
 8000a46:	460f      	mov	r7, r1
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d14a      	bne.n	8000ae2 <__udivmoddi4+0xa6>
 8000a4c:	428a      	cmp	r2, r1
 8000a4e:	4694      	mov	ip, r2
 8000a50:	d965      	bls.n	8000b1e <__udivmoddi4+0xe2>
 8000a52:	fab2 f382 	clz	r3, r2
 8000a56:	b143      	cbz	r3, 8000a6a <__udivmoddi4+0x2e>
 8000a58:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a5c:	f1c3 0220 	rsb	r2, r3, #32
 8000a60:	409f      	lsls	r7, r3
 8000a62:	fa20 f202 	lsr.w	r2, r0, r2
 8000a66:	4317      	orrs	r7, r2
 8000a68:	409c      	lsls	r4, r3
 8000a6a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a6e:	fa1f f58c 	uxth.w	r5, ip
 8000a72:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a76:	0c22      	lsrs	r2, r4, #16
 8000a78:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a7c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a80:	fb01 f005 	mul.w	r0, r1, r5
 8000a84:	4290      	cmp	r0, r2
 8000a86:	d90a      	bls.n	8000a9e <__udivmoddi4+0x62>
 8000a88:	eb1c 0202 	adds.w	r2, ip, r2
 8000a8c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a90:	f080 811c 	bcs.w	8000ccc <__udivmoddi4+0x290>
 8000a94:	4290      	cmp	r0, r2
 8000a96:	f240 8119 	bls.w	8000ccc <__udivmoddi4+0x290>
 8000a9a:	3902      	subs	r1, #2
 8000a9c:	4462      	add	r2, ip
 8000a9e:	1a12      	subs	r2, r2, r0
 8000aa0:	b2a4      	uxth	r4, r4
 8000aa2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000aa6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000aaa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000aae:	fb00 f505 	mul.w	r5, r0, r5
 8000ab2:	42a5      	cmp	r5, r4
 8000ab4:	d90a      	bls.n	8000acc <__udivmoddi4+0x90>
 8000ab6:	eb1c 0404 	adds.w	r4, ip, r4
 8000aba:	f100 32ff 	add.w	r2, r0, #4294967295
 8000abe:	f080 8107 	bcs.w	8000cd0 <__udivmoddi4+0x294>
 8000ac2:	42a5      	cmp	r5, r4
 8000ac4:	f240 8104 	bls.w	8000cd0 <__udivmoddi4+0x294>
 8000ac8:	4464      	add	r4, ip
 8000aca:	3802      	subs	r0, #2
 8000acc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ad0:	1b64      	subs	r4, r4, r5
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	b11e      	cbz	r6, 8000ade <__udivmoddi4+0xa2>
 8000ad6:	40dc      	lsrs	r4, r3
 8000ad8:	2300      	movs	r3, #0
 8000ada:	e9c6 4300 	strd	r4, r3, [r6]
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d908      	bls.n	8000af8 <__udivmoddi4+0xbc>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	f000 80ed 	beq.w	8000cc6 <__udivmoddi4+0x28a>
 8000aec:	2100      	movs	r1, #0
 8000aee:	e9c6 0500 	strd	r0, r5, [r6]
 8000af2:	4608      	mov	r0, r1
 8000af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af8:	fab3 f183 	clz	r1, r3
 8000afc:	2900      	cmp	r1, #0
 8000afe:	d149      	bne.n	8000b94 <__udivmoddi4+0x158>
 8000b00:	42ab      	cmp	r3, r5
 8000b02:	d302      	bcc.n	8000b0a <__udivmoddi4+0xce>
 8000b04:	4282      	cmp	r2, r0
 8000b06:	f200 80f8 	bhi.w	8000cfa <__udivmoddi4+0x2be>
 8000b0a:	1a84      	subs	r4, r0, r2
 8000b0c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b10:	2001      	movs	r0, #1
 8000b12:	4617      	mov	r7, r2
 8000b14:	2e00      	cmp	r6, #0
 8000b16:	d0e2      	beq.n	8000ade <__udivmoddi4+0xa2>
 8000b18:	e9c6 4700 	strd	r4, r7, [r6]
 8000b1c:	e7df      	b.n	8000ade <__udivmoddi4+0xa2>
 8000b1e:	b902      	cbnz	r2, 8000b22 <__udivmoddi4+0xe6>
 8000b20:	deff      	udf	#255	; 0xff
 8000b22:	fab2 f382 	clz	r3, r2
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	f040 8090 	bne.w	8000c4c <__udivmoddi4+0x210>
 8000b2c:	1a8a      	subs	r2, r1, r2
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2101      	movs	r1, #1
 8000b38:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b3c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b40:	0c22      	lsrs	r2, r4, #16
 8000b42:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b46:	fb0e f005 	mul.w	r0, lr, r5
 8000b4a:	4290      	cmp	r0, r2
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x124>
 8000b4e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b52:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x122>
 8000b58:	4290      	cmp	r0, r2
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2b8>
 8000b5e:	4645      	mov	r5, r8
 8000b60:	1a12      	subs	r2, r2, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b68:	fb07 2210 	mls	r2, r7, r0, r2
 8000b6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x14e>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x14c>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2c2>
 8000b88:	4610      	mov	r0, r2
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b92:	e79f      	b.n	8000ad4 <__udivmoddi4+0x98>
 8000b94:	f1c1 0720 	rsb	r7, r1, #32
 8000b98:	408b      	lsls	r3, r1
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ba6:	fa20 f307 	lsr.w	r3, r0, r7
 8000baa:	40fd      	lsrs	r5, r7
 8000bac:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb0:	4323      	orrs	r3, r4
 8000bb2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000bb6:	fa1f fe8c 	uxth.w	lr, ip
 8000bba:	fb09 5518 	mls	r5, r9, r8, r5
 8000bbe:	0c1c      	lsrs	r4, r3, #16
 8000bc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000bc4:	fb08 f50e 	mul.w	r5, r8, lr
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	fa02 f201 	lsl.w	r2, r2, r1
 8000bce:	fa00 f001 	lsl.w	r0, r0, r1
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b0>
 8000bd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be0:	42a5      	cmp	r5, r4
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2b4>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4464      	add	r4, ip
 8000bec:	1b64      	subs	r4, r4, r5
 8000bee:	b29d      	uxth	r5, r3
 8000bf0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bf4:	fb09 4413 	mls	r4, r9, r3, r4
 8000bf8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bfc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c00:	45a6      	cmp	lr, r4
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1da>
 8000c04:	eb1c 0404 	adds.w	r4, ip, r4
 8000c08:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c0e:	45a6      	cmp	lr, r4
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2ac>
 8000c12:	3b02      	subs	r3, #2
 8000c14:	4464      	add	r4, ip
 8000c16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c1e:	eba4 040e 	sub.w	r4, r4, lr
 8000c22:	42ac      	cmp	r4, r5
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46ae      	mov	lr, r5
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x29c>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x298>
 8000c2c:	b156      	cbz	r6, 8000c44 <__udivmoddi4+0x208>
 8000c2e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c32:	eb64 040e 	sbc.w	r4, r4, lr
 8000c36:	fa04 f707 	lsl.w	r7, r4, r7
 8000c3a:	40ca      	lsrs	r2, r1
 8000c3c:	40cc      	lsrs	r4, r1
 8000c3e:	4317      	orrs	r7, r2
 8000c40:	e9c6 7400 	strd	r7, r4, [r6]
 8000c44:	4618      	mov	r0, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	f1c3 0120 	rsb	r1, r3, #32
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	fa20 f201 	lsr.w	r2, r0, r1
 8000c58:	fa25 f101 	lsr.w	r1, r5, r1
 8000c5c:	409d      	lsls	r5, r3
 8000c5e:	432a      	orrs	r2, r5
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c6c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c70:	0c11      	lsrs	r1, r2, #16
 8000c72:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c76:	fb00 f50e 	mul.w	r5, r0, lr
 8000c7a:	428d      	cmp	r5, r1
 8000c7c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x258>
 8000c82:	eb1c 0101 	adds.w	r1, ip, r1
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000c8c:	428d      	cmp	r5, r1
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4461      	add	r1, ip
 8000c94:	1b49      	subs	r1, r1, r5
 8000c96:	b292      	uxth	r2, r2
 8000c98:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c9c:	fb07 1115 	mls	r1, r7, r5, r1
 8000ca0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ca4:	fb05 f10e 	mul.w	r1, r5, lr
 8000ca8:	4291      	cmp	r1, r2
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x282>
 8000cac:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cb6:	4291      	cmp	r1, r2
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2a8>
 8000cba:	3d02      	subs	r5, #2
 8000cbc:	4462      	add	r2, ip
 8000cbe:	1a52      	subs	r2, r2, r1
 8000cc0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0xfc>
 8000cc6:	4631      	mov	r1, r6
 8000cc8:	4630      	mov	r0, r6
 8000cca:	e708      	b.n	8000ade <__udivmoddi4+0xa2>
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e6e6      	b.n	8000a9e <__udivmoddi4+0x62>
 8000cd0:	4610      	mov	r0, r2
 8000cd2:	e6fb      	b.n	8000acc <__udivmoddi4+0x90>
 8000cd4:	4548      	cmp	r0, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f0>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ce0:	3b01      	subs	r3, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f0>
 8000ce4:	4645      	mov	r5, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x282>
 8000ce8:	462b      	mov	r3, r5
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1da>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x258>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b0>
 8000cf4:	3d02      	subs	r5, #2
 8000cf6:	4462      	add	r2, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x124>
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	e70a      	b.n	8000b14 <__udivmoddi4+0xd8>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x14e>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
    // Pulse clock
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 1);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d16:	f002 f93f 	bl	8002f98 <HAL_GPIO_WritePin>

	osDelay(1);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f009 fb4f 	bl	800a3be <osDelay>
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2a:	f002 f935 	bl	8002f98 <HAL_GPIO_WritePin>
    osDelay(1);
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f009 fb45 	bl	800a3be <osDelay>
}
 8000d34:	bf00      	nop
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <lcd_reset>:

void lcd_reset(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2104      	movs	r1, #4
 8000d40:	4820      	ldr	r0, [pc, #128]	; (8000dc4 <lcd_reset+0x8c>)
 8000d42:	f002 f929 	bl	8002f98 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8000d46:	2200      	movs	r2, #0
 8000d48:	2110      	movs	r1, #16
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4e:	f002 f923 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2108      	movs	r1, #8
 8000d56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5a:	f002 f91d 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2110      	movs	r1, #16
 8000d62:	4818      	ldr	r0, [pc, #96]	; (8000dc4 <lcd_reset+0x8c>)
 8000d64:	f002 f918 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	4815      	ldr	r0, [pc, #84]	; (8000dc4 <lcd_reset+0x8c>)
 8000d6e:	f002 f913 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7c:	f002 f90c 	bl	8002f98 <HAL_GPIO_WritePin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8000d80:	2201      	movs	r2, #1
 8000d82:	2108      	movs	r1, #8
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f002 f906 	bl	8002f98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	2110      	movs	r1, #16
 8000d90:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <lcd_reset+0x8c>)
 8000d92:	f002 f901 	bl	8002f98 <HAL_GPIO_WritePin>
    lcd_clock();
 8000d96:	f7ff ffb7 	bl	8000d08 <lcd_clock>
    lcd_clock();
 8000d9a:	f7ff ffb5 	bl	8000d08 <lcd_clock>
    lcd_clock();
 8000d9e:	f7ff ffb3 	bl	8000d08 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2108      	movs	r1, #8
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f002 f8f5 	bl	8002f98 <HAL_GPIO_WritePin>
    lcd_clock();
 8000dae:	f7ff ffab 	bl	8000d08 <lcd_clock>

    HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 8000db2:	2201      	movs	r2, #1
 8000db4:	2104      	movs	r1, #4
 8000db6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dba:	f002 f8ed 	bl	8002f98 <HAL_GPIO_WritePin>
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	48000400 	.word	0x48000400

08000dc8 <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	71fb      	strb	r3, [r7, #7]
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	091b      	lsrs	r3, r3, #4
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <lcd_write+0x2c>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8000de6:	2201      	movs	r2, #1
 8000de8:	2108      	movs	r1, #8
 8000dea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dee:	f002 f8d3 	bl	8002f98 <HAL_GPIO_WritePin>
 8000df2:	e005      	b.n	8000e00 <lcd_write+0x38>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2108      	movs	r1, #8
 8000df8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dfc:	f002 f8cc 	bl	8002f98 <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d005      	beq.n	8000e1a <lcd_write+0x52>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	2110      	movs	r1, #16
 8000e12:	4847      	ldr	r0, [pc, #284]	; (8000f30 <lcd_write+0x168>)
 8000e14:	f002 f8c0 	bl	8002f98 <HAL_GPIO_WritePin>
 8000e18:	e004      	b.n	8000e24 <lcd_write+0x5c>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2110      	movs	r1, #16
 8000e1e:	4844      	ldr	r0, [pc, #272]	; (8000f30 <lcd_write+0x168>)
 8000e20:	f002 f8ba 	bl	8002f98 <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	099b      	lsrs	r3, r3, #6
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d005      	beq.n	8000e3e <lcd_write+0x76>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 8000e32:	2201      	movs	r2, #1
 8000e34:	2102      	movs	r1, #2
 8000e36:	483e      	ldr	r0, [pc, #248]	; (8000f30 <lcd_write+0x168>)
 8000e38:	f002 f8ae 	bl	8002f98 <HAL_GPIO_WritePin>
 8000e3c:	e004      	b.n	8000e48 <lcd_write+0x80>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2102      	movs	r1, #2
 8000e42:	483b      	ldr	r0, [pc, #236]	; (8000f30 <lcd_write+0x168>)
 8000e44:	f002 f8a8 	bl	8002f98 <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	09db      	lsrs	r3, r3, #7
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d006      	beq.n	8000e64 <lcd_write+0x9c>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 8000e56:	2201      	movs	r2, #1
 8000e58:	2110      	movs	r1, #16
 8000e5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5e:	f002 f89b 	bl	8002f98 <HAL_GPIO_WritePin>
 8000e62:	e005      	b.n	8000e70 <lcd_write+0xa8>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2110      	movs	r1, #16
 8000e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6c:	f002 f894 	bl	8002f98 <HAL_GPIO_WritePin>

    if(rs)
 8000e70:	79bb      	ldrb	r3, [r7, #6]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d005      	beq.n	8000e82 <lcd_write+0xba>
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 1);
 8000e76:	2201      	movs	r2, #1
 8000e78:	2104      	movs	r1, #4
 8000e7a:	482d      	ldr	r0, [pc, #180]	; (8000f30 <lcd_write+0x168>)
 8000e7c:	f002 f88c 	bl	8002f98 <HAL_GPIO_WritePin>
 8000e80:	e004      	b.n	8000e8c <lcd_write+0xc4>
    else
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 8000e82:	2200      	movs	r2, #0
 8000e84:	2104      	movs	r1, #4
 8000e86:	482a      	ldr	r0, [pc, #168]	; (8000f30 <lcd_write+0x168>)
 8000e88:	f002 f886 	bl	8002f98 <HAL_GPIO_WritePin>

    lcd_clock();
 8000e8c:	f7ff ff3c 	bl	8000d08 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	f003 0301 	and.w	r3, r3, #1
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d006      	beq.n	8000ea8 <lcd_write+0xe0>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2108      	movs	r1, #8
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f002 f879 	bl	8002f98 <HAL_GPIO_WritePin>
 8000ea6:	e005      	b.n	8000eb4 <lcd_write+0xec>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	2108      	movs	r1, #8
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f002 f872 	bl	8002f98 <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	085b      	lsrs	r3, r3, #1
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d005      	beq.n	8000ece <lcd_write+0x106>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2110      	movs	r1, #16
 8000ec6:	481a      	ldr	r0, [pc, #104]	; (8000f30 <lcd_write+0x168>)
 8000ec8:	f002 f866 	bl	8002f98 <HAL_GPIO_WritePin>
 8000ecc:	e004      	b.n	8000ed8 <lcd_write+0x110>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2110      	movs	r1, #16
 8000ed2:	4817      	ldr	r0, [pc, #92]	; (8000f30 <lcd_write+0x168>)
 8000ed4:	f002 f860 	bl	8002f98 <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	b2db      	uxtb	r3, r3
 8000ede:	f003 0301 	and.w	r3, r3, #1
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d005      	beq.n	8000ef2 <lcd_write+0x12a>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2102      	movs	r1, #2
 8000eea:	4811      	ldr	r0, [pc, #68]	; (8000f30 <lcd_write+0x168>)
 8000eec:	f002 f854 	bl	8002f98 <HAL_GPIO_WritePin>
 8000ef0:	e004      	b.n	8000efc <lcd_write+0x134>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2102      	movs	r1, #2
 8000ef6:	480e      	ldr	r0, [pc, #56]	; (8000f30 <lcd_write+0x168>)
 8000ef8:	f002 f84e 	bl	8002f98 <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	08db      	lsrs	r3, r3, #3
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d006      	beq.n	8000f18 <lcd_write+0x150>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f12:	f002 f841 	bl	8002f98 <HAL_GPIO_WritePin>
 8000f16:	e005      	b.n	8000f24 <lcd_write+0x15c>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f002 f83a 	bl	8002f98 <HAL_GPIO_WritePin>

    lcd_clock();
 8000f24:	f7ff fef0 	bl	8000d08 <lcd_clock>
}
 8000f28:	bf00      	nop
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	48000400 	.word	0x48000400

08000f34 <lcd_clear>:

void lcd_clear(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff ff44 	bl	8000dc8 <lcd_write>
    _lcd_char = 0;
 8000f40:	4b03      	ldr	r3, [pc, #12]	; (8000f50 <lcd_clear+0x1c>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 8000f46:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <lcd_clear+0x20>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	701a      	strb	r2, [r3, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000016c 	.word	0x2000016c
 8000f54:	2000016d 	.word	0x2000016d

08000f58 <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	71fb      	strb	r3, [r7, #7]
 8000f62:	460b      	mov	r3, r1
 8000f64:	71bb      	strb	r3, [r7, #6]
 8000f66:	4613      	mov	r3, r2
 8000f68:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	b25b      	sxtb	r3, r3
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	b25a      	sxtb	r2, r3
 8000f76:	79bb      	ldrb	r3, [r7, #6]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	b25b      	sxtb	r3, r3
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	b25a      	sxtb	r2, r3
 8000f80:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b25b      	sxtb	r3, r3
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff ff1b 	bl	8000dc8 <lcd_write>
}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	b082      	sub	sp, #8
 8000f9e:	af00      	add	r7, sp, #0
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2100      	movs	r1, #0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff0a 	bl	8000dc8 <lcd_write>
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <lcd_print>:
{
	lcd_write(0b01000000 | address, 0);
}

void lcd_print(char string[])
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	e055      	b.n	8001076 <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 8000fca:	4b30      	ldr	r3, [pc, #192]	; (800108c <lcd_print+0xd0>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d01c      	beq.n	800100c <lcd_print+0x50>
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	2b0a      	cmp	r3, #10
 8000fdc:	d116      	bne.n	800100c <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 8000fde:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <lcd_print+0xd4>)
 8000fe0:	781a      	ldrb	r2, [r3, #0]
 8000fe2:	4b2a      	ldr	r3, [pc, #168]	; (800108c <lcd_print+0xd0>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d242      	bcs.n	8001070 <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <lcd_print+0xd8>)
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	4b28      	ldr	r3, [pc, #160]	; (8001090 <lcd_print+0xd4>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	1c59      	adds	r1, r3, #1
 8000ff4:	b2c8      	uxtb	r0, r1
 8000ff6:	4926      	ldr	r1, [pc, #152]	; (8001090 <lcd_print+0xd4>)
 8000ff8:	7008      	strb	r0, [r1, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff ffcb 	bl	8000f9a <lcd_display_address>
                _lcd_char = 0;
 8001004:	4b24      	ldr	r3, [pc, #144]	; (8001098 <lcd_print+0xdc>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 800100a:	e031      	b.n	8001070 <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <lcd_print+0xe0>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d01b      	beq.n	800104c <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 8001014:	4b20      	ldr	r3, [pc, #128]	; (8001098 <lcd_print+0xdc>)
 8001016:	781a      	ldrb	r2, [r3, #0]
 8001018:	4b20      	ldr	r3, [pc, #128]	; (800109c <lcd_print+0xe0>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	429a      	cmp	r2, r3
 800101e:	d115      	bne.n	800104c <lcd_print+0x90>
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <lcd_print+0xd4>)
 8001022:	781a      	ldrb	r2, [r3, #0]
 8001024:	4b19      	ldr	r3, [pc, #100]	; (800108c <lcd_print+0xd0>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d20f      	bcs.n	800104c <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 800102c:	4b19      	ldr	r3, [pc, #100]	; (8001094 <lcd_print+0xd8>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b17      	ldr	r3, [pc, #92]	; (8001090 <lcd_print+0xd4>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	1c59      	adds	r1, r3, #1
 8001036:	b2c8      	uxtb	r0, r1
 8001038:	4915      	ldr	r1, [pc, #84]	; (8001090 <lcd_print+0xd4>)
 800103a:	7008      	strb	r0, [r1, #0]
 800103c:	4413      	add	r3, r2
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff ffaa 	bl	8000f9a <lcd_display_address>
                    _lcd_char = 0;
 8001046:	4b14      	ldr	r3, [pc, #80]	; (8001098 <lcd_print+0xdc>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	4413      	add	r3, r2
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff feb6 	bl	8000dc8 <lcd_write>
            if(lcd_chars) _lcd_char++;
 800105c:	4b0f      	ldr	r3, [pc, #60]	; (800109c <lcd_print+0xe0>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d005      	beq.n	8001070 <lcd_print+0xb4>
 8001064:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <lcd_print+0xdc>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	3301      	adds	r3, #1
 800106a:	b2da      	uxtb	r2, r3
 800106c:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <lcd_print+0xdc>)
 800106e:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	3301      	adds	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1a3      	bne.n	8000fca <lcd_print+0xe>
        }
    }
}
 8001082:	bf00      	nop
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000165 	.word	0x20000165
 8001090:	2000016d 	.word	0x2000016d
 8001094:	20000168 	.word	0x20000168
 8001098:	2000016c 	.word	0x2000016c
 800109c:	20000164 	.word	0x20000164

080010a0 <writeIntegerToLCD>:

void writeIntegerToLCD(int integer)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	//	Break down the original number into the thousands, hundreds, tens,
	//	and ones places and then immediately write that value to the LCD
	unsigned char thousands = integer / 1000;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a32      	ldr	r2, [pc, #200]	; (8001174 <writeIntegerToLCD+0xd4>)
 80010ac:	fb82 1203 	smull	r1, r2, r2, r3
 80010b0:	1192      	asrs	r2, r2, #6
 80010b2:	17db      	asrs	r3, r3, #31
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	73fb      	strb	r3, [r7, #15]
	lcd_write( thousands + 0x30,1);
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	3330      	adds	r3, #48	; 0x30
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2101      	movs	r1, #1
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fe81 	bl	8000dc8 <lcd_write>

	unsigned char hundreds = (integer - thousands*1000) / 100;
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	4a2b      	ldr	r2, [pc, #172]	; (8001178 <writeIntegerToLCD+0xd8>)
 80010ca:	fb03 f202 	mul.w	r2, r3, r2
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4413      	add	r3, r2
 80010d2:	4a2a      	ldr	r2, [pc, #168]	; (800117c <writeIntegerToLCD+0xdc>)
 80010d4:	fb82 1203 	smull	r1, r2, r2, r3
 80010d8:	1152      	asrs	r2, r2, #5
 80010da:	17db      	asrs	r3, r3, #31
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	73bb      	strb	r3, [r7, #14]
	lcd_write( hundreds + 0x30,1);
 80010e0:	7bbb      	ldrb	r3, [r7, #14]
 80010e2:	3330      	adds	r3, #48	; 0x30
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2101      	movs	r1, #1
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fe6d 	bl	8000dc8 <lcd_write>

	unsigned char tens = (integer - thousands*1000 - hundreds*100 ) / 10;
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	4a21      	ldr	r2, [pc, #132]	; (8001178 <writeIntegerToLCD+0xd8>)
 80010f2:	fb03 f202 	mul.w	r2, r3, r2
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	441a      	add	r2, r3
 80010fa:	7bbb      	ldrb	r3, [r7, #14]
 80010fc:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001100:	fb01 f303 	mul.w	r3, r1, r3
 8001104:	4413      	add	r3, r2
 8001106:	4a1e      	ldr	r2, [pc, #120]	; (8001180 <writeIntegerToLCD+0xe0>)
 8001108:	fb82 1203 	smull	r1, r2, r2, r3
 800110c:	1092      	asrs	r2, r2, #2
 800110e:	17db      	asrs	r3, r3, #31
 8001110:	1ad3      	subs	r3, r2, r3
 8001112:	737b      	strb	r3, [r7, #13]
	lcd_write( tens + 0x30,1);
 8001114:	7b7b      	ldrb	r3, [r7, #13]
 8001116:	3330      	adds	r3, #48	; 0x30
 8001118:	b2db      	uxtb	r3, r3
 800111a:	2101      	movs	r1, #1
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fe53 	bl	8000dc8 <lcd_write>

	unsigned char ones = (integer - thousands*1000 - hundreds*100 - tens*10);
 8001122:	7bfb      	ldrb	r3, [r7, #15]
 8001124:	461a      	mov	r2, r3
 8001126:	0052      	lsls	r2, r2, #1
 8001128:	4413      	add	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	b2da      	uxtb	r2, r3
 800112e:	7bbb      	ldrb	r3, [r7, #14]
 8001130:	4619      	mov	r1, r3
 8001132:	0089      	lsls	r1, r1, #2
 8001134:	4419      	add	r1, r3
 8001136:	00c9      	lsls	r1, r1, #3
 8001138:	1acb      	subs	r3, r1, r3
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4413      	add	r3, r2
 8001140:	b2da      	uxtb	r2, r3
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	4413      	add	r3, r2
 8001148:	b2da      	uxtb	r2, r3
 800114a:	7b7b      	ldrb	r3, [r7, #13]
 800114c:	4619      	mov	r1, r3
 800114e:	0149      	lsls	r1, r1, #5
 8001150:	1ac9      	subs	r1, r1, r3
 8001152:	0089      	lsls	r1, r1, #2
 8001154:	1acb      	subs	r3, r1, r3
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4413      	add	r3, r2
 800115c:	733b      	strb	r3, [r7, #12]
	lcd_write( ones + 0x30,1);
 800115e:	7b3b      	ldrb	r3, [r7, #12]
 8001160:	3330      	adds	r3, #48	; 0x30
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2101      	movs	r1, #1
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fe2e 	bl	8000dc8 <lcd_write>
}
 800116c:	bf00      	nop
 800116e:	3710      	adds	r7, #16
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	10624dd3 	.word	0x10624dd3
 8001178:	fffffc18 	.word	0xfffffc18
 800117c:	51eb851f 	.word	0x51eb851f
 8001180:	66666667 	.word	0x66666667

08001184 <moveToXY>:

void moveToXY(unsigned char row, unsigned char column)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	4603      	mov	r3, r0
 800118c:	460a      	mov	r2, r1
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	4613      	mov	r3, r2
 8001192:	71bb      	strb	r3, [r7, #6]
	//	Determine the new position
	int position = (row * 16) + column;
 8001194:	79fb      	ldrb	r3, [r7, #7]
 8001196:	011a      	lsls	r2, r3, #4
 8001198:	79bb      	ldrb	r3, [r7, #6]
 800119a:	4413      	add	r3, r2
 800119c:	60fb      	str	r3, [r7, #12]

	//	Send the correct commands to the command register of the LCD
	if(position < 16)
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	dc0a      	bgt.n	80011ba <moveToXY+0x36>
		lcd_write( 0x80 | position,0);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2100      	movs	r1, #0
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fe08 	bl	8000dc8 <lcd_write>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
	else if(position >= 41 && position < 60)
		lcd_write( 0x80 | (position % 40 + 0x14),0);
	else if(position >= 20 && position < 40)
		lcd_write( 0x80 | (position % 60 + 0x54),0);
}
 80011b8:	e059      	b.n	800126e <moveToXY+0xea>
	else if(position >= 16 && position < 32)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	dd17      	ble.n	80011f0 <moveToXY+0x6c>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2b1f      	cmp	r3, #31
 80011c4:	dc14      	bgt.n	80011f0 <moveToXY+0x6c>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	425a      	negs	r2, r3
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	f002 020f 	and.w	r2, r2, #15
 80011d2:	bf58      	it	pl
 80011d4:	4253      	negpl	r3, r2
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	3340      	adds	r3, #64	; 0x40
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	b25b      	sxtb	r3, r3
 80011de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2100      	movs	r1, #0
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fded 	bl	8000dc8 <lcd_write>
 80011ee:	e03e      	b.n	800126e <moveToXY+0xea>
	else if(position >= 41 && position < 60)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b28      	cmp	r3, #40	; 0x28
 80011f4:	dd1b      	ble.n	800122e <moveToXY+0xaa>
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2b3b      	cmp	r3, #59	; 0x3b
 80011fa:	dc18      	bgt.n	800122e <moveToXY+0xaa>
		lcd_write( 0x80 | (position % 40 + 0x14),0);
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <moveToXY+0xf4>)
 8001200:	fb83 1302 	smull	r1, r3, r3, r2
 8001204:	1119      	asrs	r1, r3, #4
 8001206:	17d3      	asrs	r3, r2, #31
 8001208:	1ac9      	subs	r1, r1, r3
 800120a:	460b      	mov	r3, r1
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	1ad1      	subs	r1, r2, r3
 8001214:	b2cb      	uxtb	r3, r1
 8001216:	3314      	adds	r3, #20
 8001218:	b2db      	uxtb	r3, r3
 800121a:	b25b      	sxtb	r3, r3
 800121c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001220:	b25b      	sxtb	r3, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff fdce 	bl	8000dc8 <lcd_write>
 800122c:	e01f      	b.n	800126e <moveToXY+0xea>
	else if(position >= 20 && position < 40)
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2b13      	cmp	r3, #19
 8001232:	dd1c      	ble.n	800126e <moveToXY+0xea>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b27      	cmp	r3, #39	; 0x27
 8001238:	dc19      	bgt.n	800126e <moveToXY+0xea>
		lcd_write( 0x80 | (position % 60 + 0x54),0);
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	4b0f      	ldr	r3, [pc, #60]	; (800127c <moveToXY+0xf8>)
 800123e:	fb83 1302 	smull	r1, r3, r3, r2
 8001242:	4413      	add	r3, r2
 8001244:	1159      	asrs	r1, r3, #5
 8001246:	17d3      	asrs	r3, r2, #31
 8001248:	1ac9      	subs	r1, r1, r3
 800124a:	460b      	mov	r3, r1
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	1a5b      	subs	r3, r3, r1
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	1ad1      	subs	r1, r2, r3
 8001254:	b2cb      	uxtb	r3, r1
 8001256:	3354      	adds	r3, #84	; 0x54
 8001258:	b2db      	uxtb	r3, r3
 800125a:	b25b      	sxtb	r3, r3
 800125c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001260:	b25b      	sxtb	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff fdae 	bl	8000dc8 <lcd_write>
}
 800126c:	e7ff      	b.n	800126e <moveToXY+0xea>
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	66666667 	.word	0x66666667
 800127c:	88888889 	.word	0x88888889

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001284:	f001 f86d 	bl	8002362 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001288:	f000 f874 	bl	8001374 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128c:	f000 fa78 	bl	8001780 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001290:	f000 f904 	bl	800149c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001294:	f000 f93a 	bl	800150c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001298:	f000 f978 	bl	800158c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800129c:	f000 f99c 	bl	80015d8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80012a0:	f000 fa0e 	bl	80016c0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80012a4:	f000 fa3c 	bl	8001720 <MX_USART3_UART_Init>
  MX_DAC1_Init();
 80012a8:	f000 f8c6 	bl	8001438 <MX_DAC1_Init>
  MX_TIM7_Init();
 80012ac:	f000 f9d2 	bl	8001654 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80012b0:	2110      	movs	r1, #16
 80012b2:	481d      	ldr	r0, [pc, #116]	; (8001328 <main+0xa8>)
 80012b4:	f001 fa21 	bl	80026fa <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim7);
 80012b8:	481c      	ldr	r0, [pc, #112]	; (800132c <main+0xac>)
 80012ba:	f004 fe6f 	bl	8005f9c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012be:	f008 ff8d 	bl	800a1dc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of AccesoLCD */
  AccesoLCDHandle = osSemaphoreNew(1, 1, &AccesoLCD_attributes);
 80012c2:	4a1b      	ldr	r2, [pc, #108]	; (8001330 <main+0xb0>)
 80012c4:	2101      	movs	r1, #1
 80012c6:	2001      	movs	r0, #1
 80012c8:	f009 f894 	bl	800a3f4 <osSemaphoreNew>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4a19      	ldr	r2, [pc, #100]	; (8001334 <main+0xb4>)
 80012d0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012d2:	4a19      	ldr	r2, [pc, #100]	; (8001338 <main+0xb8>)
 80012d4:	2100      	movs	r1, #0
 80012d6:	4819      	ldr	r0, [pc, #100]	; (800133c <main+0xbc>)
 80012d8:	f008 ffdf 	bl	800a29a <osThreadNew>
 80012dc:	4603      	mov	r3, r0
 80012de:	4a18      	ldr	r2, [pc, #96]	; (8001340 <main+0xc0>)
 80012e0:	6013      	str	r3, [r2, #0]

  /* creation of led_verde */
  led_verdeHandle = osThreadNew(Start_led_verde, NULL, &led_verde_attributes);
 80012e2:	4a18      	ldr	r2, [pc, #96]	; (8001344 <main+0xc4>)
 80012e4:	2100      	movs	r1, #0
 80012e6:	4818      	ldr	r0, [pc, #96]	; (8001348 <main+0xc8>)
 80012e8:	f008 ffd7 	bl	800a29a <osThreadNew>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a17      	ldr	r2, [pc, #92]	; (800134c <main+0xcc>)
 80012f0:	6013      	str	r3, [r2, #0]

  /* creation of led_amarillo */
  led_amarilloHandle = osThreadNew(Start_led_amarillo, NULL, &led_amarillo_attributes);
 80012f2:	4a17      	ldr	r2, [pc, #92]	; (8001350 <main+0xd0>)
 80012f4:	2100      	movs	r1, #0
 80012f6:	4817      	ldr	r0, [pc, #92]	; (8001354 <main+0xd4>)
 80012f8:	f008 ffcf 	bl	800a29a <osThreadNew>
 80012fc:	4603      	mov	r3, r0
 80012fe:	4a16      	ldr	r2, [pc, #88]	; (8001358 <main+0xd8>)
 8001300:	6013      	str	r3, [r2, #0]

  /* creation of LCDTareaA */
  LCDTareaAHandle = osThreadNew(StartLCD_TareaA, NULL, &LCDTareaA_attributes);
 8001302:	4a16      	ldr	r2, [pc, #88]	; (800135c <main+0xdc>)
 8001304:	2100      	movs	r1, #0
 8001306:	4816      	ldr	r0, [pc, #88]	; (8001360 <main+0xe0>)
 8001308:	f008 ffc7 	bl	800a29a <osThreadNew>
 800130c:	4603      	mov	r3, r0
 800130e:	4a15      	ldr	r2, [pc, #84]	; (8001364 <main+0xe4>)
 8001310:	6013      	str	r3, [r2, #0]

  /* creation of LCDtareaB */
  LCDtareaBHandle = osThreadNew(StartTareaB, NULL, &LCDtareaB_attributes);
 8001312:	4a15      	ldr	r2, [pc, #84]	; (8001368 <main+0xe8>)
 8001314:	2100      	movs	r1, #0
 8001316:	4815      	ldr	r0, [pc, #84]	; (800136c <main+0xec>)
 8001318:	f008 ffbf 	bl	800a29a <osThreadNew>
 800131c:	4603      	mov	r3, r0
 800131e:	4a14      	ldr	r2, [pc, #80]	; (8001370 <main+0xf0>)
 8001320:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001322:	f008 ff7f 	bl	800a224 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001326:	e7fe      	b.n	8001326 <main+0xa6>
 8001328:	20000170 	.word	0x20000170
 800132c:	200002b8 	.word	0x200002b8
 8001330:	0800e528 	.word	0x0800e528
 8001334:	20000428 	.word	0x20000428
 8001338:	0800e474 	.word	0x0800e474
 800133c:	08001a89 	.word	0x08001a89
 8001340:	20000414 	.word	0x20000414
 8001344:	0800e498 	.word	0x0800e498
 8001348:	08001a9d 	.word	0x08001a9d
 800134c:	20000418 	.word	0x20000418
 8001350:	0800e4bc 	.word	0x0800e4bc
 8001354:	08001ad5 	.word	0x08001ad5
 8001358:	2000041c 	.word	0x2000041c
 800135c:	0800e4e0 	.word	0x0800e4e0
 8001360:	08001b0d 	.word	0x08001b0d
 8001364:	20000420 	.word	0x20000420
 8001368:	0800e504 	.word	0x0800e504
 800136c:	08001b79 	.word	0x08001b79
 8001370:	20000424 	.word	0x20000424

08001374 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b096      	sub	sp, #88	; 0x58
 8001378:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800137a:	f107 0314 	add.w	r3, r7, #20
 800137e:	2244      	movs	r2, #68	; 0x44
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f00c ffd0 	bl	800e328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001388:	463b      	mov	r3, r7
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001396:	f44f 7000 	mov.w	r0, #512	; 0x200
 800139a:	f003 f917 	bl	80045cc <HAL_PWREx_ControlVoltageScaling>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013a4:	f000 fc18 	bl	8001bd8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013a8:	f003 f8f2 	bl	8004590 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013ac:	4b21      	ldr	r3, [pc, #132]	; (8001434 <SystemClock_Config+0xc0>)
 80013ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b2:	4a20      	ldr	r2, [pc, #128]	; (8001434 <SystemClock_Config+0xc0>)
 80013b4:	f023 0318 	bic.w	r3, r3, #24
 80013b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80013bc:	2314      	movs	r3, #20
 80013be:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013c4:	2301      	movs	r3, #1
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013cc:	2360      	movs	r3, #96	; 0x60
 80013ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d0:	2302      	movs	r3, #2
 80013d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013d4:	2301      	movs	r3, #1
 80013d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013d8:	2301      	movs	r3, #1
 80013da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013dc:	2328      	movs	r3, #40	; 0x28
 80013de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013e0:	2307      	movs	r3, #7
 80013e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013e4:	2302      	movs	r3, #2
 80013e6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013e8:	2302      	movs	r3, #2
 80013ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 fa0d 	bl	8004810 <HAL_RCC_OscConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80013fc:	f000 fbec 	bl	8001bd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001400:	230f      	movs	r3, #15
 8001402:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001404:	2303      	movs	r3, #3
 8001406:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	2104      	movs	r1, #4
 8001418:	4618      	mov	r0, r3
 800141a:	f003 fdd5 	bl	8004fc8 <HAL_RCC_ClockConfig>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001424:	f000 fbd8 	bl	8001bd8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001428:	f004 fadc 	bl	80059e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 800142c:	bf00      	nop
 800142e:	3758      	adds	r7, #88	; 0x58
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000

08001438 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800143e:	1d3b      	adds	r3, r7, #4
 8001440:	2224      	movs	r2, #36	; 0x24
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f00c ff6f 	bl	800e328 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800144a:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_DAC1_Init+0x5c>)
 800144c:	4a12      	ldr	r2, [pc, #72]	; (8001498 <MX_DAC1_Init+0x60>)
 800144e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001450:	4810      	ldr	r0, [pc, #64]	; (8001494 <MX_DAC1_Init+0x5c>)
 8001452:	f001 f930 	bl	80026b6 <HAL_DAC_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 800145c:	f000 fbbc 	bl	8001bd8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001464:	2300      	movs	r3, #0
 8001466:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001470:	2300      	movs	r3, #0
 8001472:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2210      	movs	r2, #16
 8001478:	4619      	mov	r1, r3
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <MX_DAC1_Init+0x5c>)
 800147c:	f001 f9af 	bl	80027de <HAL_DAC_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001486:	f000 fba7 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000170 	.word	0x20000170
 8001498:	40007400 	.word	0x40007400

0800149c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80014a0:	4b18      	ldr	r3, [pc, #96]	; (8001504 <MX_DFSDM1_Init+0x68>)
 80014a2:	4a19      	ldr	r2, [pc, #100]	; (8001508 <MX_DFSDM1_Init+0x6c>)
 80014a4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <MX_DFSDM1_Init+0x68>)
 80014a8:	2201      	movs	r2, #1
 80014aa:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <MX_DFSDM1_Init+0x68>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <MX_DFSDM1_Init+0x68>)
 80014b4:	2202      	movs	r2, #2
 80014b6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_DFSDM1_Init+0x68>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_DFSDM1_Init+0x68>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_DFSDM1_Init+0x68>)
 80014c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ca:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_DFSDM1_Init+0x68>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <MX_DFSDM1_Init+0x68>)
 80014d4:	2204      	movs	r2, #4
 80014d6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80014d8:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <MX_DFSDM1_Init+0x68>)
 80014da:	2200      	movs	r2, #0
 80014dc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80014de:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_DFSDM1_Init+0x68>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <MX_DFSDM1_Init+0x68>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_DFSDM1_Init+0x68>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <MX_DFSDM1_Init+0x68>)
 80014f2:	f001 fa9b 	bl	8002a2c <HAL_DFSDM_ChannelInit>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80014fc:	f000 fb6c 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000184 	.word	0x20000184
 8001508:	40016020 	.word	0x40016020

0800150c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001510:	4b1b      	ldr	r3, [pc, #108]	; (8001580 <MX_I2C2_Init+0x74>)
 8001512:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <MX_I2C2_Init+0x78>)
 8001514:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001516:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <MX_I2C2_Init+0x74>)
 8001518:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <MX_I2C2_Init+0x7c>)
 800151a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <MX_I2C2_Init+0x74>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001522:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MX_I2C2_Init+0x74>)
 8001524:	2201      	movs	r2, #1
 8001526:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <MX_I2C2_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_I2C2_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_I2C2_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_I2C2_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_I2C2_Init+0x74>)
 8001542:	2200      	movs	r2, #0
 8001544:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001546:	480e      	ldr	r0, [pc, #56]	; (8001580 <MX_I2C2_Init+0x74>)
 8001548:	f001 fd61 	bl	800300e <HAL_I2C_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001552:	f000 fb41 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001556:	2100      	movs	r1, #0
 8001558:	4809      	ldr	r0, [pc, #36]	; (8001580 <MX_I2C2_Init+0x74>)
 800155a:	f001 fdf3 	bl	8003144 <HAL_I2CEx_ConfigAnalogFilter>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001564:	f000 fb38 	bl	8001bd8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001568:	2100      	movs	r1, #0
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_I2C2_Init+0x74>)
 800156c:	f001 fe35 	bl	80031da <HAL_I2CEx_ConfigDigitalFilter>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001576:	f000 fb2f 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200001bc 	.word	0x200001bc
 8001584:	40005800 	.word	0x40005800
 8001588:	10909cec 	.word	0x10909cec

0800158c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_QUADSPI_Init+0x44>)
 8001592:	4a10      	ldr	r2, [pc, #64]	; (80015d4 <MX_QUADSPI_Init+0x48>)
 8001594:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8001596:	4b0e      	ldr	r3, [pc, #56]	; (80015d0 <MX_QUADSPI_Init+0x44>)
 8001598:	2202      	movs	r2, #2
 800159a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_QUADSPI_Init+0x44>)
 800159e:	2204      	movs	r2, #4
 80015a0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <MX_QUADSPI_Init+0x44>)
 80015a4:	2210      	movs	r2, #16
 80015a6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_QUADSPI_Init+0x44>)
 80015aa:	2217      	movs	r2, #23
 80015ac:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <MX_QUADSPI_Init+0x44>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_QUADSPI_Init+0x44>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <MX_QUADSPI_Init+0x44>)
 80015bc:	f003 f86c 	bl	8004698 <HAL_QSPI_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80015c6:	f000 fb07 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	20000210 	.word	0x20000210
 80015d4:	a0001000 	.word	0xa0001000

080015d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <MX_SPI3_Init+0x74>)
 80015de:	4a1c      	ldr	r2, [pc, #112]	; (8001650 <MX_SPI3_Init+0x78>)
 80015e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80015e2:	4b1a      	ldr	r3, [pc, #104]	; (800164c <MX_SPI3_Init+0x74>)
 80015e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80015ea:	4b18      	ldr	r3, [pc, #96]	; (800164c <MX_SPI3_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80015f0:	4b16      	ldr	r3, [pc, #88]	; (800164c <MX_SPI3_Init+0x74>)
 80015f2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80015f6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <MX_SPI3_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015fe:	4b13      	ldr	r3, [pc, #76]	; (800164c <MX_SPI3_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <MX_SPI3_Init+0x74>)
 8001606:	f44f 7200 	mov.w	r2, #512	; 0x200
 800160a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800160c:	4b0f      	ldr	r3, [pc, #60]	; (800164c <MX_SPI3_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <MX_SPI3_Init+0x74>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001618:	4b0c      	ldr	r3, [pc, #48]	; (800164c <MX_SPI3_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <MX_SPI3_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001624:	4b09      	ldr	r3, [pc, #36]	; (800164c <MX_SPI3_Init+0x74>)
 8001626:	2207      	movs	r2, #7
 8001628:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <MX_SPI3_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001630:	4b06      	ldr	r3, [pc, #24]	; (800164c <MX_SPI3_Init+0x74>)
 8001632:	2208      	movs	r2, #8
 8001634:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001636:	4805      	ldr	r0, [pc, #20]	; (800164c <MX_SPI3_Init+0x74>)
 8001638:	f004 fbb6 	bl	8005da8 <HAL_SPI_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001642:	f000 fac9 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000254 	.word	0x20000254
 8001650:	40003c00 	.word	0x40003c00

08001654 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <MX_TIM7_Init+0x64>)
 8001666:	4a15      	ldr	r2, [pc, #84]	; (80016bc <MX_TIM7_Init+0x68>)
 8001668:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800166a:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <MX_TIM7_Init+0x64>)
 800166c:	2200      	movs	r2, #0
 800166e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_TIM7_Init+0x64>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 3320;
 8001676:	4b10      	ldr	r3, [pc, #64]	; (80016b8 <MX_TIM7_Init+0x64>)
 8001678:	f640 42f8 	movw	r2, #3320	; 0xcf8
 800167c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_TIM7_Init+0x64>)
 8001680:	2200      	movs	r2, #0
 8001682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001684:	480c      	ldr	r0, [pc, #48]	; (80016b8 <MX_TIM7_Init+0x64>)
 8001686:	f004 fc32 	bl	8005eee <HAL_TIM_Base_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001690:	f000 faa2 	bl	8001bd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001694:	2300      	movs	r3, #0
 8001696:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4805      	ldr	r0, [pc, #20]	; (80016b8 <MX_TIM7_Init+0x64>)
 80016a2:	f004 feb9 	bl	8006418 <HAL_TIMEx_MasterConfigSynchronization>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80016ac:	f000 fa94 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200002b8 	.word	0x200002b8
 80016bc:	40001400 	.word	0x40001400

080016c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016c6:	4a15      	ldr	r2, [pc, #84]	; (800171c <MX_USART1_UART_Init+0x5c>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016e6:	220c      	movs	r2, #12
 80016e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <MX_USART1_UART_Init+0x58>)
 80016fe:	2200      	movs	r2, #0
 8001700:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <MX_USART1_UART_Init+0x58>)
 8001704:	f004 ff2e 	bl	8006564 <HAL_UART_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800170e:	f000 fa63 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000304 	.word	0x20000304
 800171c:	40013800 	.word	0x40013800

08001720 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_USART3_UART_Init+0x58>)
 8001726:	4a15      	ldr	r2, [pc, #84]	; (800177c <MX_USART3_UART_Init+0x5c>)
 8001728:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <MX_USART3_UART_Init+0x58>)
 800172c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001730:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_USART3_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_USART3_UART_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_USART3_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_USART3_UART_Init+0x58>)
 8001746:	220c      	movs	r2, #12
 8001748:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_USART3_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART3_UART_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <MX_USART3_UART_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_USART3_UART_Init+0x58>)
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_USART3_UART_Init+0x58>)
 8001764:	f004 fefe 	bl	8006564 <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800176e:	f000 fa33 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	2000038c 	.word	0x2000038c
 800177c:	40004800 	.word	0x40004800

08001780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08a      	sub	sp, #40	; 0x28
 8001784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001796:	4bb7      	ldr	r3, [pc, #732]	; (8001a74 <MX_GPIO_Init+0x2f4>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	4ab6      	ldr	r2, [pc, #728]	; (8001a74 <MX_GPIO_Init+0x2f4>)
 800179c:	f043 0310 	orr.w	r3, r3, #16
 80017a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a2:	4bb4      	ldr	r3, [pc, #720]	; (8001a74 <MX_GPIO_Init+0x2f4>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ae:	4bb1      	ldr	r3, [pc, #708]	; (8001a74 <MX_GPIO_Init+0x2f4>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	4ab0      	ldr	r2, [pc, #704]	; (8001a74 <MX_GPIO_Init+0x2f4>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ba:	4bae      	ldr	r3, [pc, #696]	; (8001a74 <MX_GPIO_Init+0x2f4>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	4bab      	ldr	r3, [pc, #684]	; (8001a74 <MX_GPIO_Init+0x2f4>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	4aaa      	ldr	r2, [pc, #680]	; (8001a74 <MX_GPIO_Init+0x2f4>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017d2:	4ba8      	ldr	r3, [pc, #672]	; (8001a74 <MX_GPIO_Init+0x2f4>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017de:	4ba5      	ldr	r3, [pc, #660]	; (8001a74 <MX_GPIO_Init+0x2f4>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	4aa4      	ldr	r2, [pc, #656]	; (8001a74 <MX_GPIO_Init+0x2f4>)
 80017e4:	f043 0302 	orr.w	r3, r3, #2
 80017e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ea:	4ba2      	ldr	r3, [pc, #648]	; (8001a74 <MX_GPIO_Init+0x2f4>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f6:	4b9f      	ldr	r3, [pc, #636]	; (8001a74 <MX_GPIO_Init+0x2f4>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	4a9e      	ldr	r2, [pc, #632]	; (8001a74 <MX_GPIO_Init+0x2f4>)
 80017fc:	f043 0308 	orr.w	r3, r3, #8
 8001800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001802:	4b9c      	ldr	r3, [pc, #624]	; (8001a74 <MX_GPIO_Init+0x2f4>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	f003 0308 	and.w	r3, r3, #8
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001814:	4898      	ldr	r0, [pc, #608]	; (8001a78 <MX_GPIO_Init+0x2f8>)
 8001816:	f001 fbbf 	bl	8002f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 800181a:	2200      	movs	r2, #0
 800181c:	f248 111c 	movw	r1, #33052	; 0x811c
 8001820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001824:	f001 fbb8 	bl	8002f98 <HAL_GPIO_WritePin>
                          |E_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001828:	2200      	movs	r2, #0
 800182a:	f24f 0116 	movw	r1, #61462	; 0xf016
 800182e:	4893      	ldr	r0, [pc, #588]	; (8001a7c <MX_GPIO_Init+0x2fc>)
 8001830:	f001 fbb2 	bl	8002f98 <HAL_GPIO_WritePin>
                          |verde_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001834:	2200      	movs	r2, #0
 8001836:	f241 0181 	movw	r1, #4225	; 0x1081
 800183a:	4891      	ldr	r0, [pc, #580]	; (8001a80 <MX_GPIO_Init+0x300>)
 800183c:	f001 fbac 	bl	8002f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001840:	2201      	movs	r2, #1
 8001842:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001846:	488e      	ldr	r0, [pc, #568]	; (8001a80 <MX_GPIO_Init+0x300>)
 8001848:	f001 fba6 	bl	8002f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|amarillo_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001852:	488c      	ldr	r0, [pc, #560]	; (8001a84 <MX_GPIO_Init+0x304>)
 8001854:	f001 fba0 	bl	8002f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2120      	movs	r1, #32
 800185c:	4887      	ldr	r0, [pc, #540]	; (8001a7c <MX_GPIO_Init+0x2fc>)
 800185e:	f001 fb9b 	bl	8002f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001862:	2201      	movs	r2, #1
 8001864:	2101      	movs	r1, #1
 8001866:	4884      	ldr	r0, [pc, #528]	; (8001a78 <MX_GPIO_Init+0x2f8>)
 8001868:	f001 fb96 	bl	8002f98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800186c:	f240 1315 	movw	r3, #277	; 0x115
 8001870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	487c      	ldr	r0, [pc, #496]	; (8001a78 <MX_GPIO_Init+0x2f8>)
 8001886:	f001 f9dd 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800188a:	236a      	movs	r3, #106	; 0x6a
 800188c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800188e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	4876      	ldr	r0, [pc, #472]	; (8001a78 <MX_GPIO_Init+0x2f8>)
 80018a0:	f001 f9d0 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80018a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018aa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80018ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 0314 	add.w	r3, r7, #20
 80018b8:	4619      	mov	r1, r3
 80018ba:	4872      	ldr	r0, [pc, #456]	; (8001a84 <MX_GPIO_Init+0x304>)
 80018bc:	f001 f9c2 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80018c0:	233f      	movs	r3, #63	; 0x3f
 80018c2:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80018c4:	230b      	movs	r3, #11
 80018c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	486c      	ldr	r0, [pc, #432]	; (8001a84 <MX_GPIO_Init+0x304>)
 80018d4:	f001 f9b6 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80018d8:	2303      	movs	r3, #3
 80018da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80018e8:	2308      	movs	r3, #8
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018f6:	f001 f9a5 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin SPBTLE_RF_RST_Pin
                           E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 80018fa:	f248 131c 	movw	r3, #33052	; 0x811c
 80018fe:	617b      	str	r3, [r7, #20]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001900:	2301      	movs	r3, #1
 8001902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001916:	f001 f995 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 800191a:	23c0      	movs	r3, #192	; 0xc0
 800191c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191e:	2302      	movs	r3, #2
 8001920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001926:	2303      	movs	r3, #3
 8001928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800192a:	2305      	movs	r3, #5
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800192e:	f107 0314 	add.w	r3, r7, #20
 8001932:	4619      	mov	r1, r3
 8001934:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001938:	f001 f984 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800193c:	2301      	movs	r3, #1
 800193e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001940:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800194a:	f107 0314 	add.w	r3, r7, #20
 800194e:	4619      	mov	r1, r3
 8001950:	484a      	ldr	r0, [pc, #296]	; (8001a7c <MX_GPIO_Init+0x2fc>)
 8001952:	f001 f977 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           verde_Pin SPSGRF_915_SDN_Pin D5_LCD_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001956:	f24f 0336 	movw	r3, #61494	; 0xf036
 800195a:	617b      	str	r3, [r7, #20]
                          |verde_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195c:	2301      	movs	r3, #1
 800195e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	4619      	mov	r1, r3
 800196e:	4843      	ldr	r0, [pc, #268]	; (8001a7c <MX_GPIO_Init+0x2fc>)
 8001970:	f001 f968 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001974:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001978:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800197e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	483d      	ldr	r0, [pc, #244]	; (8001a80 <MX_GPIO_Init+0x300>)
 800198c:	f001 f95a 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001990:	f243 0381 	movw	r3, #12417	; 0x3081
 8001994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a2:	f107 0314 	add.w	r3, r7, #20
 80019a6:	4619      	mov	r1, r3
 80019a8:	4835      	ldr	r0, [pc, #212]	; (8001a80 <MX_GPIO_Init+0x300>)
 80019aa:	f001 f94b 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin amarillo_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|amarillo_Pin;
 80019ae:	f44f 7310 	mov.w	r3, #576	; 0x240
 80019b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c0:	f107 0314 	add.w	r3, r7, #20
 80019c4:	4619      	mov	r1, r3
 80019c6:	482f      	ldr	r0, [pc, #188]	; (8001a84 <MX_GPIO_Init+0x304>)
 80019c8:	f001 f93c 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80019cc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80019d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019dc:	f107 0314 	add.w	r3, r7, #20
 80019e0:	4619      	mov	r1, r3
 80019e2:	4828      	ldr	r0, [pc, #160]	; (8001a84 <MX_GPIO_Init+0x304>)
 80019e4:	f001 f92e 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80019e8:	2302      	movs	r3, #2
 80019ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019f8:	2305      	movs	r3, #5
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4619      	mov	r1, r3
 8001a02:	481f      	ldr	r0, [pc, #124]	; (8001a80 <MX_GPIO_Init+0x300>)
 8001a04:	f001 f91e 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001a08:	2378      	movs	r3, #120	; 0x78
 8001a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a14:	2303      	movs	r3, #3
 8001a16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	4817      	ldr	r0, [pc, #92]	; (8001a80 <MX_GPIO_Init+0x300>)
 8001a24:	f001 f90e 	bl	8002c44 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001a28:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2e:	2312      	movs	r3, #18
 8001a30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a36:	2303      	movs	r3, #3
 8001a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	480d      	ldr	r0, [pc, #52]	; (8001a7c <MX_GPIO_Init+0x2fc>)
 8001a46:	f001 f8fd 	bl	8002c44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2105      	movs	r1, #5
 8001a4e:	2017      	movs	r0, #23
 8001a50:	f000 fdfb 	bl	800264a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a54:	2017      	movs	r0, #23
 8001a56:	f000 fe14 	bl	8002682 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2105      	movs	r1, #5
 8001a5e:	2028      	movs	r0, #40	; 0x28
 8001a60:	f000 fdf3 	bl	800264a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a64:	2028      	movs	r0, #40	; 0x28
 8001a66:	f000 fe0c 	bl	8002682 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a6a:	bf00      	nop
 8001a6c:	3728      	adds	r7, #40	; 0x28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	48001000 	.word	0x48001000
 8001a7c:	48000400 	.word	0x48000400
 8001a80:	48000c00 	.word	0x48000c00
 8001a84:	48000800 	.word	0x48000800

08001a88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001a90:	f00b fe5c 	bl	800d74c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001a94:	2001      	movs	r0, #1
 8001a96:	f008 fc92 	bl	800a3be <osDelay>
 8001a9a:	e7fb      	b.n	8001a94 <StartDefaultTask+0xc>

08001a9c <Start_led_verde>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_led_verde */
void Start_led_verde(void *argument)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_led_verde */
  /* Infinite loop */
  for(;;)
  {HAL_GPIO_WritePin(verde_GPIO_Port, verde_Pin,1);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aaa:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <Start_led_verde+0x34>)
 8001aac:	f001 fa74 	bl	8002f98 <HAL_GPIO_WritePin>
    osDelay(300);
 8001ab0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ab4:	f008 fc83 	bl	800a3be <osDelay>
    HAL_GPIO_WritePin(verde_GPIO_Port, verde_Pin,0);
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001abe:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <Start_led_verde+0x34>)
 8001ac0:	f001 fa6a 	bl	8002f98 <HAL_GPIO_WritePin>
        osDelay(300);
 8001ac4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ac8:	f008 fc79 	bl	800a3be <osDelay>
  {HAL_GPIO_WritePin(verde_GPIO_Port, verde_Pin,1);
 8001acc:	e7ea      	b.n	8001aa4 <Start_led_verde+0x8>
 8001ace:	bf00      	nop
 8001ad0:	48000400 	.word	0x48000400

08001ad4 <Start_led_amarillo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_led_amarillo */
void Start_led_amarillo(void *argument)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_led_amarillo */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(amarillo_GPIO_Port, amarillo_Pin, 1);
 8001adc:	2201      	movs	r2, #1
 8001ade:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ae2:	4809      	ldr	r0, [pc, #36]	; (8001b08 <Start_led_amarillo+0x34>)
 8001ae4:	f001 fa58 	bl	8002f98 <HAL_GPIO_WritePin>
	      osDelay(300);
 8001ae8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001aec:	f008 fc67 	bl	800a3be <osDelay>
	      HAL_GPIO_WritePin(amarillo_GPIO_Port,amarillo_Pin,0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001af6:	4804      	ldr	r0, [pc, #16]	; (8001b08 <Start_led_amarillo+0x34>)
 8001af8:	f001 fa4e 	bl	8002f98 <HAL_GPIO_WritePin>
	          osDelay(300);
 8001afc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001b00:	f008 fc5d 	bl	800a3be <osDelay>
	  HAL_GPIO_WritePin(amarillo_GPIO_Port, amarillo_Pin, 1);
 8001b04:	e7ea      	b.n	8001adc <Start_led_amarillo+0x8>
 8001b06:	bf00      	nop
 8001b08:	48000800 	.word	0x48000800

08001b0c <StartLCD_TareaA>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLCD_TareaA */
void StartLCD_TareaA(void *argument)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD_TareaA */
  /* Infinite loop */
	int contador = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
	lcd_reset();
 8001b18:	f7ff f90e 	bl	8000d38 <lcd_reset>
	lcd_display_settings(1,0,0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2001      	movs	r0, #1
 8001b22:	f7ff fa19 	bl	8000f58 <lcd_display_settings>
	lcd_clear();
 8001b26:	f7ff fa05 	bl	8000f34 <lcd_clear>
	uint32_t tickA;
	tickA = osKernelGetTickCount();
 8001b2a:	f008 fba1 	bl	800a270 <osKernelGetTickCount>
 8001b2e:	60b8      	str	r0, [r7, #8]
  for(;;)
  {	  tickA+=200;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	33c8      	adds	r3, #200	; 0xc8
 8001b34:	60bb      	str	r3, [r7, #8]
   osDelay(tickA);
 8001b36:	68b8      	ldr	r0, [r7, #8]
 8001b38:	f008 fc41 	bl	800a3be <osDelay>
	  osSemaphoreAcquire(AccesoLCDHandle, 0xFFFFfFFF);
 8001b3c:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <StartLCD_TareaA+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	4618      	mov	r0, r3
 8001b46:	f008 fcdf 	bl	800a508 <osSemaphoreAcquire>
  //le damos un time out enorme
	  moveToXY(0, 0);
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff fb19 	bl	8001184 <moveToXY>
	  lcd_print("Tarea A: ");
 8001b52:	4808      	ldr	r0, [pc, #32]	; (8001b74 <StartLCD_TareaA+0x68>)
 8001b54:	f7ff fa32 	bl	8000fbc <lcd_print>
	  contador++;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	60fb      	str	r3, [r7, #12]
	  writeIntegerToLCD(contador);
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff fa9e 	bl	80010a0 <writeIntegerToLCD>
	//  tickA+=200;
osSemaphoreRelease(AccesoLCDHandle);
 8001b64:	4b02      	ldr	r3, [pc, #8]	; (8001b70 <StartLCD_TareaA+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f008 fd1f 	bl	800a5ac <osSemaphoreRelease>
  {	  tickA+=200;
 8001b6e:	e7df      	b.n	8001b30 <StartLCD_TareaA+0x24>
 8001b70:	20000428 	.word	0x20000428
 8001b74:	0800e400 	.word	0x0800e400

08001b78 <StartTareaB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTareaB */
void StartTareaB(void *argument)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTareaB */
  /* Infinite loop */
	//esta se supone que la debemos retrasar un poco
int contador2 =0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	60fb      	str	r3, [r7, #12]
osDelay(16);
 8001b84:	2010      	movs	r0, #16
 8001b86:	f008 fc1a 	bl	800a3be <osDelay>
uint32_t tickB;
tickB = osKernelGetTickCount();
 8001b8a:	f008 fb71 	bl	800a270 <osKernelGetTickCount>
 8001b8e:	60b8      	str	r0, [r7, #8]
  for(;;)
  {   tickB+=100;
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	3364      	adds	r3, #100	; 0x64
 8001b94:	60bb      	str	r3, [r7, #8]
	  osDelay(tickB);
 8001b96:	68b8      	ldr	r0, [r7, #8]
 8001b98:	f008 fc11 	bl	800a3be <osDelay>

	 osSemaphoreAcquire(AccesoLCDHandle, 0xFFFFfFFF);
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <StartTareaB+0x58>)
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f008 fcaf 	bl	800a508 <osSemaphoreAcquire>
	moveToXY(1, 0);
 8001baa:	2100      	movs	r1, #0
 8001bac:	2001      	movs	r0, #1
 8001bae:	f7ff fae9 	bl	8001184 <moveToXY>
	lcd_print("Tarea B");
 8001bb2:	4808      	ldr	r0, [pc, #32]	; (8001bd4 <StartTareaB+0x5c>)
 8001bb4:	f7ff fa02 	bl	8000fbc <lcd_print>
	contador2++;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	60fb      	str	r3, [r7, #12]
	writeIntegerToLCD(contador2);
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7ff fa6e 	bl	80010a0 <writeIntegerToLCD>

	osSemaphoreRelease(AccesoLCDHandle);
 8001bc4:	4b02      	ldr	r3, [pc, #8]	; (8001bd0 <StartTareaB+0x58>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f008 fcef 	bl	800a5ac <osSemaphoreRelease>
  {   tickB+=100;
 8001bce:	e7df      	b.n	8001b90 <StartTareaB+0x18>
 8001bd0:	20000428 	.word	0x20000428
 8001bd4:	0800e40c 	.word	0x0800e40c

08001bd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bdc:	b672      	cpsid	i
}
 8001bde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <Error_Handler+0x8>
	...

08001be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_MspInit+0x4c>)
 8001bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bee:	4a10      	ldr	r2, [pc, #64]	; (8001c30 <HAL_MspInit+0x4c>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6613      	str	r3, [r2, #96]	; 0x60
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <HAL_MspInit+0x4c>)
 8001bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_MspInit+0x4c>)
 8001c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c06:	4a0a      	ldr	r2, [pc, #40]	; (8001c30 <HAL_MspInit+0x4c>)
 8001c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <HAL_MspInit+0x4c>)
 8001c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	210f      	movs	r1, #15
 8001c1e:	f06f 0001 	mvn.w	r0, #1
 8001c22:	f000 fd12 	bl	800264a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c26:	bf00      	nop
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000

08001c34 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b08a      	sub	sp, #40	; 0x28
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3c:	f107 0314 	add.w	r3, r7, #20
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a15      	ldr	r2, [pc, #84]	; (8001ca8 <HAL_DAC_MspInit+0x74>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d124      	bne.n	8001ca0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_DAC_MspInit+0x78>)
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	4a14      	ldr	r2, [pc, #80]	; (8001cac <HAL_DAC_MspInit+0x78>)
 8001c5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001c60:	6593      	str	r3, [r2, #88]	; 0x58
 8001c62:	4b12      	ldr	r3, [pc, #72]	; (8001cac <HAL_DAC_MspInit+0x78>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c6a:	613b      	str	r3, [r7, #16]
 8001c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6e:	4b0f      	ldr	r3, [pc, #60]	; (8001cac <HAL_DAC_MspInit+0x78>)
 8001c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c72:	4a0e      	ldr	r2, [pc, #56]	; (8001cac <HAL_DAC_MspInit+0x78>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <HAL_DAC_MspInit+0x78>)
 8001c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c86:	2320      	movs	r3, #32
 8001c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c9c:	f000 ffd2 	bl	8002c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001ca0:	bf00      	nop
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40007400 	.word	0x40007400
 8001cac:	40021000 	.word	0x40021000

08001cb0 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b0ac      	sub	sp, #176	; 0xb0
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2288      	movs	r2, #136	; 0x88
 8001cce:	2100      	movs	r1, #0
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f00c fb29 	bl	800e328 <memset>
  if(DFSDM1_Init == 0)
 8001cd6:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d142      	bne.n	8001d64 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001cde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ce2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cea:	f107 0314 	add.w	r3, r7, #20
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 fb8e 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001cfa:	f7ff ff6d 	bl	8001bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d02:	4a1b      	ldr	r2, [pc, #108]	; (8001d70 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d08:	6613      	str	r3, [r2, #96]	; 0x60
 8001d0a:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d16:	4b16      	ldr	r3, [pc, #88]	; (8001d70 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1a:	4a15      	ldr	r2, [pc, #84]	; (8001d70 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d1c:	f043 0310 	orr.w	r3, r3, #16
 8001d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d22:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	f003 0310 	and.w	r3, r3, #16
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001d2e:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001d32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001d48:	2306      	movs	r3, #6
 8001d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d4e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d52:	4619      	mov	r1, r3
 8001d54:	4807      	ldr	r0, [pc, #28]	; (8001d74 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001d56:	f000 ff75 	bl	8002c44 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001d5a:	4b04      	ldr	r3, [pc, #16]	; (8001d6c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	4a02      	ldr	r2, [pc, #8]	; (8001d6c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001d62:	6013      	str	r3, [r2, #0]
  }

}
 8001d64:	bf00      	nop
 8001d66:	37b0      	adds	r7, #176	; 0xb0
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	2000042c 	.word	0x2000042c
 8001d70:	40021000 	.word	0x40021000
 8001d74:	48001000 	.word	0x48001000

08001d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b0ac      	sub	sp, #176	; 0xb0
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	2288      	movs	r2, #136	; 0x88
 8001d96:	2100      	movs	r1, #0
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f00c fac5 	bl	800e328 <memset>
  if(hi2c->Instance==I2C2)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a21      	ldr	r2, [pc, #132]	; (8001e28 <HAL_I2C_MspInit+0xb0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d13b      	bne.n	8001e20 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001dac:	2300      	movs	r3, #0
 8001dae:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 fb2b 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001dc0:	f7ff ff0a 	bl	8001bd8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_I2C_MspInit+0xb4>)
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc8:	4a18      	ldr	r2, [pc, #96]	; (8001e2c <HAL_I2C_MspInit+0xb4>)
 8001dca:	f043 0302 	orr.w	r3, r3, #2
 8001dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd0:	4b16      	ldr	r3, [pc, #88]	; (8001e2c <HAL_I2C_MspInit+0xb4>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001ddc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001de0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de4:	2312      	movs	r3, #18
 8001de6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dea:	2301      	movs	r3, #1
 8001dec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001df6:	2304      	movs	r3, #4
 8001df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e00:	4619      	mov	r1, r3
 8001e02:	480b      	ldr	r0, [pc, #44]	; (8001e30 <HAL_I2C_MspInit+0xb8>)
 8001e04:	f000 ff1e 	bl	8002c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_I2C_MspInit+0xb4>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0c:	4a07      	ldr	r2, [pc, #28]	; (8001e2c <HAL_I2C_MspInit+0xb4>)
 8001e0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e12:	6593      	str	r3, [r2, #88]	; 0x58
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <HAL_I2C_MspInit+0xb4>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e20:	bf00      	nop
 8001e22:	37b0      	adds	r7, #176	; 0xb0
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40005800 	.word	0x40005800
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	48000400 	.word	0x48000400

08001e34 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08a      	sub	sp, #40	; 0x28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3c:	f107 0314 	add.w	r3, r7, #20
 8001e40:	2200      	movs	r2, #0
 8001e42:	601a      	str	r2, [r3, #0]
 8001e44:	605a      	str	r2, [r3, #4]
 8001e46:	609a      	str	r2, [r3, #8]
 8001e48:	60da      	str	r2, [r3, #12]
 8001e4a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <HAL_QSPI_MspInit+0x7c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d128      	bne.n	8001ea8 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <HAL_QSPI_MspInit+0x80>)
 8001e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5a:	4a16      	ldr	r2, [pc, #88]	; (8001eb4 <HAL_QSPI_MspInit+0x80>)
 8001e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e60:	6513      	str	r3, [r2, #80]	; 0x50
 8001e62:	4b14      	ldr	r3, [pc, #80]	; (8001eb4 <HAL_QSPI_MspInit+0x80>)
 8001e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6a:	613b      	str	r3, [r7, #16]
 8001e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e6e:	4b11      	ldr	r3, [pc, #68]	; (8001eb4 <HAL_QSPI_MspInit+0x80>)
 8001e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e72:	4a10      	ldr	r2, [pc, #64]	; (8001eb4 <HAL_QSPI_MspInit+0x80>)
 8001e74:	f043 0310 	orr.w	r3, r3, #16
 8001e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_QSPI_MspInit+0x80>)
 8001e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e7e:	f003 0310 	and.w	r3, r3, #16
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001e86:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001e8a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e94:	2303      	movs	r3, #3
 8001e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001e98:	230a      	movs	r3, #10
 8001e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e9c:	f107 0314 	add.w	r3, r7, #20
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	4805      	ldr	r0, [pc, #20]	; (8001eb8 <HAL_QSPI_MspInit+0x84>)
 8001ea4:	f000 fece 	bl	8002c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001ea8:	bf00      	nop
 8001eaa:	3728      	adds	r7, #40	; 0x28
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	a0001000 	.word	0xa0001000
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	48001000 	.word	0x48001000

08001ebc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08a      	sub	sp, #40	; 0x28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	2200      	movs	r2, #0
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	605a      	str	r2, [r3, #4]
 8001ece:	609a      	str	r2, [r3, #8]
 8001ed0:	60da      	str	r2, [r3, #12]
 8001ed2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a17      	ldr	r2, [pc, #92]	; (8001f38 <HAL_SPI_MspInit+0x7c>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d128      	bne.n	8001f30 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ede:	4b17      	ldr	r3, [pc, #92]	; (8001f3c <HAL_SPI_MspInit+0x80>)
 8001ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee2:	4a16      	ldr	r2, [pc, #88]	; (8001f3c <HAL_SPI_MspInit+0x80>)
 8001ee4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eea:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_SPI_MspInit+0x80>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef6:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <HAL_SPI_MspInit+0x80>)
 8001ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efa:	4a10      	ldr	r2, [pc, #64]	; (8001f3c <HAL_SPI_MspInit+0x80>)
 8001efc:	f043 0304 	orr.w	r3, r3, #4
 8001f00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_SPI_MspInit+0x80>)
 8001f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001f0e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f14:	2302      	movs	r3, #2
 8001f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f20:	2306      	movs	r3, #6
 8001f22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <HAL_SPI_MspInit+0x84>)
 8001f2c:	f000 fe8a 	bl	8002c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f30:	bf00      	nop
 8001f32:	3728      	adds	r7, #40	; 0x28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40003c00 	.word	0x40003c00
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	48000800 	.word	0x48000800

08001f44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a0d      	ldr	r2, [pc, #52]	; (8001f88 <HAL_TIM_Base_MspInit+0x44>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d113      	bne.n	8001f7e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001f56:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_TIM_Base_MspInit+0x48>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	4a0c      	ldr	r2, [pc, #48]	; (8001f8c <HAL_TIM_Base_MspInit+0x48>)
 8001f5c:	f043 0320 	orr.w	r3, r3, #32
 8001f60:	6593      	str	r3, [r2, #88]	; 0x58
 8001f62:	4b0a      	ldr	r3, [pc, #40]	; (8001f8c <HAL_TIM_Base_MspInit+0x48>)
 8001f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2105      	movs	r1, #5
 8001f72:	2037      	movs	r0, #55	; 0x37
 8001f74:	f000 fb69 	bl	800264a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001f78:	2037      	movs	r0, #55	; 0x37
 8001f7a:	f000 fb82 	bl	8002682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001f7e:	bf00      	nop
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40001400 	.word	0x40001400
 8001f8c:	40021000 	.word	0x40021000

08001f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b0ae      	sub	sp, #184	; 0xb8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	605a      	str	r2, [r3, #4]
 8001fa2:	609a      	str	r2, [r3, #8]
 8001fa4:	60da      	str	r2, [r3, #12]
 8001fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fa8:	f107 031c 	add.w	r3, r7, #28
 8001fac:	2288      	movs	r2, #136	; 0x88
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f00c f9b9 	bl	800e328 <memset>
  if(huart->Instance==USART1)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a42      	ldr	r2, [pc, #264]	; (80020c4 <HAL_UART_MspInit+0x134>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d13b      	bne.n	8002038 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 fa1f 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fd8:	f7ff fdfe 	bl	8001bd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fdc:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <HAL_UART_MspInit+0x138>)
 8001fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fe0:	4a39      	ldr	r2, [pc, #228]	; (80020c8 <HAL_UART_MspInit+0x138>)
 8001fe2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe6:	6613      	str	r3, [r2, #96]	; 0x60
 8001fe8:	4b37      	ldr	r3, [pc, #220]	; (80020c8 <HAL_UART_MspInit+0x138>)
 8001fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff0:	61bb      	str	r3, [r7, #24]
 8001ff2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff4:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <HAL_UART_MspInit+0x138>)
 8001ff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff8:	4a33      	ldr	r2, [pc, #204]	; (80020c8 <HAL_UART_MspInit+0x138>)
 8001ffa:	f043 0302 	orr.w	r3, r3, #2
 8001ffe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002000:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_UART_MspInit+0x138>)
 8002002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	617b      	str	r3, [r7, #20]
 800200a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800200c:	23c0      	movs	r3, #192	; 0xc0
 800200e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002012:	2302      	movs	r3, #2
 8002014:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201e:	2303      	movs	r3, #3
 8002020:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002024:	2307      	movs	r3, #7
 8002026:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800202a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800202e:	4619      	mov	r1, r3
 8002030:	4826      	ldr	r0, [pc, #152]	; (80020cc <HAL_UART_MspInit+0x13c>)
 8002032:	f000 fe07 	bl	8002c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002036:	e040      	b.n	80020ba <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a24      	ldr	r2, [pc, #144]	; (80020d0 <HAL_UART_MspInit+0x140>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d13b      	bne.n	80020ba <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002042:	2304      	movs	r3, #4
 8002044:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002046:	2300      	movs	r3, #0
 8002048:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800204a:	f107 031c 	add.w	r3, r7, #28
 800204e:	4618      	mov	r0, r3
 8002050:	f003 f9de 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800205a:	f7ff fdbd 	bl	8001bd8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800205e:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_UART_MspInit+0x138>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	4a19      	ldr	r2, [pc, #100]	; (80020c8 <HAL_UART_MspInit+0x138>)
 8002064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002068:	6593      	str	r3, [r2, #88]	; 0x58
 800206a:	4b17      	ldr	r3, [pc, #92]	; (80020c8 <HAL_UART_MspInit+0x138>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002076:	4b14      	ldr	r3, [pc, #80]	; (80020c8 <HAL_UART_MspInit+0x138>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800207a:	4a13      	ldr	r2, [pc, #76]	; (80020c8 <HAL_UART_MspInit+0x138>)
 800207c:	f043 0308 	orr.w	r3, r3, #8
 8002080:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <HAL_UART_MspInit+0x138>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002086:	f003 0308 	and.w	r3, r3, #8
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800208e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002092:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002096:	2302      	movs	r3, #2
 8002098:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2300      	movs	r3, #0
 800209e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020a8:	2307      	movs	r3, #7
 80020aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80020b2:	4619      	mov	r1, r3
 80020b4:	4807      	ldr	r0, [pc, #28]	; (80020d4 <HAL_UART_MspInit+0x144>)
 80020b6:	f000 fdc5 	bl	8002c44 <HAL_GPIO_Init>
}
 80020ba:	bf00      	nop
 80020bc:	37b8      	adds	r7, #184	; 0xb8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40013800 	.word	0x40013800
 80020c8:	40021000 	.word	0x40021000
 80020cc:	48000400 	.word	0x48000400
 80020d0:	40004800 	.word	0x40004800
 80020d4:	48000c00 	.word	0x48000c00

080020d8 <NMI_Handler>:
/*           Cortex-M4 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 80020dc:	e7fe      	b.n	80020dc <NMI_Handler+0x4>

080020de <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 80020e2:	e7fe      	b.n	80020e2 <HardFault_Handler+0x4>

080020e4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 80020e8:	e7fe      	b.n	80020e8 <MemManage_Handler+0x4>

080020ea <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 80020ee:	e7fe      	b.n	80020ee <BusFault_Handler+0x4>

080020f0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 80020f4:	e7fe      	b.n	80020f4 <UsageFault_Handler+0x4>

080020f6 <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8002108:	f000 f980 	bl	800240c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
	if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800210c:	f00a f9b8 	bl	800c480 <xTaskGetSchedulerState>
 8002110:	4603      	mov	r3, r0
 8002112:	2b01      	cmp	r3, #1
 8002114:	d001      	beq.n	800211a <SysTick_Handler+0x16>
#endif /* INCLUDE_xTaskGetSchedulerState */
		xPortSysTickHandler();
 8002116:	f00b f89f 	bl	800d258 <xPortSysTickHandler>
	}
#endif /* INCLUDE_xTaskGetSchedulerState */
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}

0800211e <EXTI9_5_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles EXTI line[9:5] interrupts.
 */
void EXTI9_5_IRQHandler(void) {
 800211e:	b580      	push	{r7, lr}
 8002120:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI9_5_IRQn 0 */

	/* USER CODE END EXTI9_5_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002122:	2020      	movs	r0, #32
 8002124:	f000 ff50 	bl	8002fc8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002128:	2040      	movs	r0, #64	; 0x40
 800212a:	f000 ff4d 	bl	8002fc8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800212e:	2080      	movs	r0, #128	; 0x80
 8002130:	f000 ff4a 	bl	8002fc8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002134:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002138:	f000 ff46 	bl	8002fc8 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI9_5_IRQn 1 */

	/* USER CODE END EXTI9_5_IRQn 1 */
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}

08002140 <EXTI15_10_IRQHandler>:

/**
 * @brief This function handles EXTI line[15:10] interrupts.
 */
void EXTI15_10_IRQHandler(void) {
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN EXTI15_10_IRQn 0 */

	/* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8002144:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002148:	f000 ff3e 	bl	8002fc8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800214c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002150:	f000 ff3a 	bl	8002fc8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002154:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002158:	f000 ff36 	bl	8002fc8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800215c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002160:	f000 ff32 	bl	8002fc8 <HAL_GPIO_EXTI_IRQHandler>
	HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002164:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002168:	f000 ff2e 	bl	8002fc8 <HAL_GPIO_EXTI_IRQHandler>
	/* USER CODE BEGIN EXTI15_10_IRQn 1 */

	/* USER CODE END EXTI15_10_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}

08002170 <TIM7_IRQHandler>:

/**
 * @brief This function handles TIM7 global interrupt.
 */
void TIM7_IRQHandler(void) {
 8002170:	b580      	push	{r7, lr}
 8002172:	b082      	sub	sp, #8
 8002174:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM7_IRQn 0 */

	/* USER CODE END TIM7_IRQn 0 */
	HAL_TIM_IRQHandler(&htim7);
 8002176:	484c      	ldr	r0, [pc, #304]	; (80022a8 <TIM7_IRQHandler+0x138>)
 8002178:	f003 ff80 	bl	800607c <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM7_IRQn 1 */
	static int i = 0;
	float dato;
	if (disponible == 1) {
 800217c:	4b4b      	ldr	r3, [pc, #300]	; (80022ac <TIM7_IRQHandler+0x13c>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b01      	cmp	r3, #1
 8002182:	f040 8088 	bne.w	8002296 <TIM7_IRQHandler+0x126>
		dato = ((float) audiobuf[i]
 8002186:	4b4a      	ldr	r3, [pc, #296]	; (80022b0 <TIM7_IRQHandler+0x140>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4b4a      	ldr	r3, [pc, #296]	; (80022b4 <TIM7_IRQHandler+0x144>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	4413      	add	r3, r2
 8002192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
				+ (float) (ganancia * mibuf[(unsigned char) (jj - efecto)][i])
 800219e:	4b46      	ldr	r3, [pc, #280]	; (80022b8 <TIM7_IRQHandler+0x148>)
 80021a0:	781a      	ldrb	r2, [r3, #0]
 80021a2:	4b46      	ldr	r3, [pc, #280]	; (80022bc <TIM7_IRQHandler+0x14c>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	4618      	mov	r0, r3
 80021ac:	4b41      	ldr	r3, [pc, #260]	; (80022b4 <TIM7_IRQHandler+0x144>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	4943      	ldr	r1, [pc, #268]	; (80022c0 <TIM7_IRQHandler+0x150>)
 80021b2:	4603      	mov	r3, r0
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	4403      	add	r3, r0
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80021c0:	ee07 3a90 	vmov	s15, r3
 80021c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80021c8:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <TIM7_IRQHandler+0x154>)
 80021ca:	edd3 7a00 	vldr	s15, [r3]
 80021ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021d2:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (float) (ganancia
						* mibuf[(unsigned char) (jj - efecto - 1)][i])) / 3;
 80021d6:	4b38      	ldr	r3, [pc, #224]	; (80022b8 <TIM7_IRQHandler+0x148>)
 80021d8:	781a      	ldrb	r2, [r3, #0]
 80021da:	4b38      	ldr	r3, [pc, #224]	; (80022bc <TIM7_IRQHandler+0x14c>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	4b32      	ldr	r3, [pc, #200]	; (80022b4 <TIM7_IRQHandler+0x144>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4934      	ldr	r1, [pc, #208]	; (80022c0 <TIM7_IRQHandler+0x150>)
 80021ee:	4603      	mov	r3, r0
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4403      	add	r3, r0
 80021f4:	00db      	lsls	r3, r3, #3
 80021f6:	4413      	add	r3, r2
 80021f8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
				+ (float) (ganancia
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002204:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <TIM7_IRQHandler+0x154>)
 8002206:	edd3 7a00 	vldr	s15, [r3]
 800220a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800220e:	ee37 7a27 	vadd.f32	s14, s14, s15
		dato = ((float) audiobuf[i]
 8002212:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800221a:	edc7 7a01 	vstr	s15, [r7, #4]
		dato = dato * 2048.0 / 32768; //escalado de 16 bits del PC a 12
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f7fe f93a 	bl	8000498 <__aeabi_f2d>
 8002224:	f04f 0200 	mov.w	r2, #0
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <TIM7_IRQHandler+0x158>)
 800222a:	f7fe f98d 	bl	8000548 <__aeabi_dmul>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <TIM7_IRQHandler+0x15c>)
 800223c:	f7fe faae 	bl	800079c <__aeabi_ddiv>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	f7fe fb90 	bl	800096c <__aeabi_d2f>
 800224c:	4603      	mov	r3, r0
 800224e:	607b      	str	r3, [r7, #4]
		dato = dato + 2048; //centrado positivo DAC
 8002250:	edd7 7a01 	vldr	s15, [r7, #4]
 8002254:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80022d0 <TIM7_IRQHandler+0x160>
 8002258:	ee77 7a87 	vadd.f32	s15, s15, s14
 800225c:	edc7 7a01 	vstr	s15, [r7, #4]
		i++;
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <TIM7_IRQHandler+0x144>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	3301      	adds	r3, #1
 8002266:	4a13      	ldr	r2, [pc, #76]	; (80022b4 <TIM7_IRQHandler+0x144>)
 8002268:	6013      	str	r3, [r2, #0]
		if (i >= 24) {
 800226a:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <TIM7_IRQHandler+0x144>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b17      	cmp	r3, #23
 8002270:	dd05      	ble.n	800227e <TIM7_IRQHandler+0x10e>
			i = 0;
 8002272:	4b10      	ldr	r3, [pc, #64]	; (80022b4 <TIM7_IRQHandler+0x144>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
			disponible = 0;
 8002278:	4b0c      	ldr	r3, [pc, #48]	; (80022ac <TIM7_IRQHandler+0x13c>)
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
		}
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R,
				(unsigned short int) dato);
 800227e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002286:	ee17 3a90 	vmov	r3, s15
 800228a:	b29b      	uxth	r3, r3
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R,
 800228c:	2200      	movs	r2, #0
 800228e:	2110      	movs	r1, #16
 8002290:	4810      	ldr	r0, [pc, #64]	; (80022d4 <TIM7_IRQHandler+0x164>)
 8002292:	f000 fa7f 	bl	8002794 <HAL_DAC_SetValue>
	}
	__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8002296:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <TIM7_IRQHandler+0x138>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f06f 0201 	mvn.w	r2, #1
 800229e:	611a      	str	r2, [r3, #16]
	/* USER CODE END TIM7_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	200002b8 	.word	0x200002b8
 80022ac:	2000045c 	.word	0x2000045c
 80022b0:	20000460 	.word	0x20000460
 80022b4:	20000430 	.word	0x20000430
 80022b8:	20003464 	.word	0x20003464
 80022bc:	20000004 	.word	0x20000004
 80022c0:	20000464 	.word	0x20000464
 80022c4:	20000000 	.word	0x20000000
 80022c8:	40a00000 	.word	0x40a00000
 80022cc:	40e00000 	.word	0x40e00000
 80022d0:	45000000 	.word	0x45000000
 80022d4:	20000170 	.word	0x20000170

080022d8 <OTG_FS_IRQHandler>:

/**
 * @brief This function handles USB OTG FS global interrupt.
 */
void OTG_FS_IRQHandler(void) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN OTG_FS_IRQn 0 */

	/* USER CODE END OTG_FS_IRQn 0 */
	HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <OTG_FS_IRQHandler+0x10>)
 80022de:	f001 f91b 	bl	8003518 <HAL_PCD_IRQHandler>
	/* USER CODE BEGIN OTG_FS_IRQn 1 */

	/* USER CODE END OTG_FS_IRQn 1 */
}
 80022e2:	bf00      	nop
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	2000bbc4 	.word	0x2000bbc4

080022ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80022f0:	4b06      	ldr	r3, [pc, #24]	; (800230c <SystemInit+0x20>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	4a05      	ldr	r2, [pc, #20]	; (800230c <SystemInit+0x20>)
 80022f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002310:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002348 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002314:	f7ff ffea 	bl	80022ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002318:	480c      	ldr	r0, [pc, #48]	; (800234c <LoopForever+0x6>)
  ldr r1, =_edata
 800231a:	490d      	ldr	r1, [pc, #52]	; (8002350 <LoopForever+0xa>)
  ldr r2, =_sidata
 800231c:	4a0d      	ldr	r2, [pc, #52]	; (8002354 <LoopForever+0xe>)
  movs r3, #0
 800231e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002320:	e002      	b.n	8002328 <LoopCopyDataInit>

08002322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002326:	3304      	adds	r3, #4

08002328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800232c:	d3f9      	bcc.n	8002322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800232e:	4a0a      	ldr	r2, [pc, #40]	; (8002358 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002330:	4c0a      	ldr	r4, [pc, #40]	; (800235c <LoopForever+0x16>)
  movs r3, #0
 8002332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002334:	e001      	b.n	800233a <LoopFillZerobss>

08002336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002338:	3204      	adds	r2, #4

0800233a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800233c:	d3fb      	bcc.n	8002336 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800233e:	f00b fffb 	bl	800e338 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002342:	f7fe ff9d 	bl	8001280 <main>

08002346 <LoopForever>:

LoopForever:
    b LoopForever
 8002346:	e7fe      	b.n	8002346 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002348:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800234c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002350:	20000148 	.word	0x20000148
  ldr r2, =_sidata
 8002354:	0800e590 	.word	0x0800e590
  ldr r2, =_sbss
 8002358:	20000148 	.word	0x20000148
  ldr r4, =_ebss
 800235c:	2000df20 	.word	0x2000df20

08002360 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002360:	e7fe      	b.n	8002360 <ADC1_2_IRQHandler>

08002362 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002368:	2300      	movs	r3, #0
 800236a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236c:	2003      	movs	r0, #3
 800236e:	f000 f961 	bl	8002634 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002372:	200f      	movs	r0, #15
 8002374:	f000 f80e 	bl	8002394 <HAL_InitTick>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d002      	beq.n	8002384 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	71fb      	strb	r3, [r7, #7]
 8002382:	e001      	b.n	8002388 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002384:	f7ff fc2e 	bl	8001be4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002388:	79fb      	ldrb	r3, [r7, #7]
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800239c:	2300      	movs	r3, #0
 800239e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023a0:	4b17      	ldr	r3, [pc, #92]	; (8002400 <HAL_InitTick+0x6c>)
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d023      	beq.n	80023f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023a8:	4b16      	ldr	r3, [pc, #88]	; (8002404 <HAL_InitTick+0x70>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_InitTick+0x6c>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4619      	mov	r1, r3
 80023b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80023ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80023be:	4618      	mov	r0, r3
 80023c0:	f000 f96d 	bl	800269e <HAL_SYSTICK_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10f      	bne.n	80023ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b0f      	cmp	r3, #15
 80023ce:	d809      	bhi.n	80023e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023d0:	2200      	movs	r2, #0
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295
 80023d8:	f000 f937 	bl	800264a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80023dc:	4a0a      	ldr	r2, [pc, #40]	; (8002408 <HAL_InitTick+0x74>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e007      	b.n	80023f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
 80023e8:	e004      	b.n	80023f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
 80023ee:	e001      	b.n	80023f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000010 	.word	0x20000010
 8002404:	20000008 	.word	0x20000008
 8002408:	2000000c 	.word	0x2000000c

0800240c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_IncTick+0x20>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_IncTick+0x24>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4413      	add	r3, r2
 800241c:	4a04      	ldr	r2, [pc, #16]	; (8002430 <HAL_IncTick+0x24>)
 800241e:	6013      	str	r3, [r2, #0]
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	20000010 	.word	0x20000010
 8002430:	20000434 	.word	0x20000434

08002434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return uwTick;
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <HAL_GetTick+0x14>)
 800243a:	681b      	ldr	r3, [r3, #0]
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000434 	.word	0x20000434

0800244c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002454:	f7ff ffee 	bl	8002434 <HAL_GetTick>
 8002458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002464:	d005      	beq.n	8002472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002466:	4b0a      	ldr	r3, [pc, #40]	; (8002490 <HAL_Delay+0x44>)
 8002468:	781b      	ldrb	r3, [r3, #0]
 800246a:	461a      	mov	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4413      	add	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002472:	bf00      	nop
 8002474:	f7ff ffde 	bl	8002434 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	429a      	cmp	r2, r3
 8002482:	d8f7      	bhi.n	8002474 <HAL_Delay+0x28>
  {
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000010 	.word	0x20000010

08002494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024aa:	68ba      	ldr	r2, [r7, #8]
 80024ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b0:	4013      	ands	r3, r2
 80024b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024c6:	4a04      	ldr	r2, [pc, #16]	; (80024d8 <__NVIC_SetPriorityGrouping+0x44>)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	60d3      	str	r3, [r2, #12]
}
 80024cc:	bf00      	nop
 80024ce:	3714      	adds	r7, #20
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <__NVIC_GetPriorityGrouping+0x18>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	0a1b      	lsrs	r3, r3, #8
 80024e6:	f003 0307 	and.w	r3, r3, #7
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	2b00      	cmp	r3, #0
 8002508:	db0b      	blt.n	8002522 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	f003 021f 	and.w	r2, r3, #31
 8002510:	4907      	ldr	r1, [pc, #28]	; (8002530 <__NVIC_EnableIRQ+0x38>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	095b      	lsrs	r3, r3, #5
 8002518:	2001      	movs	r0, #1
 800251a:	fa00 f202 	lsl.w	r2, r0, r2
 800251e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002522:	bf00      	nop
 8002524:	370c      	adds	r7, #12
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000e100 	.word	0xe000e100

08002534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	6039      	str	r1, [r7, #0]
 800253e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002544:	2b00      	cmp	r3, #0
 8002546:	db0a      	blt.n	800255e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	490c      	ldr	r1, [pc, #48]	; (8002580 <__NVIC_SetPriority+0x4c>)
 800254e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002552:	0112      	lsls	r2, r2, #4
 8002554:	b2d2      	uxtb	r2, r2
 8002556:	440b      	add	r3, r1
 8002558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800255c:	e00a      	b.n	8002574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	b2da      	uxtb	r2, r3
 8002562:	4908      	ldr	r1, [pc, #32]	; (8002584 <__NVIC_SetPriority+0x50>)
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	f003 030f 	and.w	r3, r3, #15
 800256a:	3b04      	subs	r3, #4
 800256c:	0112      	lsls	r2, r2, #4
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	440b      	add	r3, r1
 8002572:	761a      	strb	r2, [r3, #24]
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000e100 	.word	0xe000e100
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002588:	b480      	push	{r7}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	bf28      	it	cs
 80025a6:	2304      	movcs	r3, #4
 80025a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3304      	adds	r3, #4
 80025ae:	2b06      	cmp	r3, #6
 80025b0:	d902      	bls.n	80025b8 <NVIC_EncodePriority+0x30>
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	3b03      	subs	r3, #3
 80025b6:	e000      	b.n	80025ba <NVIC_EncodePriority+0x32>
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	43da      	mvns	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	401a      	ands	r2, r3
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d0:	f04f 31ff 	mov.w	r1, #4294967295
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	fa01 f303 	lsl.w	r3, r1, r3
 80025da:	43d9      	mvns	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e0:	4313      	orrs	r3, r2
         );
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3724      	adds	r7, #36	; 0x24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
	...

080025f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002600:	d301      	bcc.n	8002606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002602:	2301      	movs	r3, #1
 8002604:	e00f      	b.n	8002626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <SysTick_Config+0x40>)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800260e:	210f      	movs	r1, #15
 8002610:	f04f 30ff 	mov.w	r0, #4294967295
 8002614:	f7ff ff8e 	bl	8002534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <SysTick_Config+0x40>)
 800261a:	2200      	movs	r2, #0
 800261c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800261e:	4b04      	ldr	r3, [pc, #16]	; (8002630 <SysTick_Config+0x40>)
 8002620:	2207      	movs	r2, #7
 8002622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3708      	adds	r7, #8
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	e000e010 	.word	0xe000e010

08002634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b082      	sub	sp, #8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f7ff ff29 	bl	8002494 <__NVIC_SetPriorityGrouping>
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	4603      	mov	r3, r0
 8002652:	60b9      	str	r1, [r7, #8]
 8002654:	607a      	str	r2, [r7, #4]
 8002656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800265c:	f7ff ff3e 	bl	80024dc <__NVIC_GetPriorityGrouping>
 8002660:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	6978      	ldr	r0, [r7, #20]
 8002668:	f7ff ff8e 	bl	8002588 <NVIC_EncodePriority>
 800266c:	4602      	mov	r2, r0
 800266e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff5d 	bl	8002534 <__NVIC_SetPriority>
}
 800267a:	bf00      	nop
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	4603      	mov	r3, r0
 800268a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff31 	bl	80024f8 <__NVIC_EnableIRQ>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ffa2 	bl	80025f0 <SysTick_Config>
 80026ac:	4603      	mov	r3, r0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e014      	b.n	80026f2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	791b      	ldrb	r3, [r3, #4]
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d105      	bne.n	80026de <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff faab 	bl	8001c34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2202      	movs	r2, #2
 80026e2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2201      	movs	r2, #1
 80026ee:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80026fa:	b480      	push	{r7}
 80026fc:	b083      	sub	sp, #12
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	795b      	ldrb	r3, [r3, #5]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d101      	bne.n	8002710 <HAL_DAC_Start+0x16>
 800270c:	2302      	movs	r3, #2
 800270e:	e03b      	b.n	8002788 <HAL_DAC_Start+0x8e>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2202      	movs	r2, #2
 800271a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6819      	ldr	r1, [r3, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2201      	movs	r2, #1
 800272a:	409a      	lsls	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d10f      	bne.n	800275a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8002744:	2b04      	cmp	r3, #4
 8002746:	d118      	bne.n	800277a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f042 0201 	orr.w	r2, r2, #1
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	e00f      	b.n	800277a <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002764:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002768:	d107      	bne.n	800277a <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f042 0202 	orr.w	r2, r2, #2
 8002778:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002786:	2300      	movs	r3, #0
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
 80027a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d105      	bne.n	80027be <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4413      	add	r3, r2
 80027b8:	3308      	adds	r3, #8
 80027ba:	617b      	str	r3, [r7, #20]
 80027bc:	e004      	b.n	80027c8 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4413      	add	r3, r2
 80027c4:	3314      	adds	r3, #20
 80027c6:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	461a      	mov	r2, r3
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	371c      	adds	r7, #28
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr

080027de <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b088      	sub	sp, #32
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	795b      	ldrb	r3, [r3, #5]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d101      	bne.n	80027fa <HAL_DAC_ConfigChannel+0x1c>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e114      	b.n	8002a24 <HAL_DAC_ConfigChannel+0x246>
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2201      	movs	r2, #1
 80027fe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2202      	movs	r2, #2
 8002804:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2b04      	cmp	r3, #4
 800280c:	f040 8081 	bne.w	8002912 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002810:	f7ff fe10 	bl	8002434 <HAL_GetTick>
 8002814:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d140      	bne.n	800289e <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800281c:	e018      	b.n	8002850 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800281e:	f7ff fe09 	bl	8002434 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d911      	bls.n	8002850 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002832:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f043 0208 	orr.w	r2, r3, #8
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2203      	movs	r2, #3
 800284a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e0e9      	b.n	8002a24 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1df      	bne.n	800281e <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800285e:	2001      	movs	r0, #1
 8002860:	f7ff fdf4 	bl	800244c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	6992      	ldr	r2, [r2, #24]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
 800286e:	e023      	b.n	80028b8 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002870:	f7ff fde0 	bl	8002434 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b01      	cmp	r3, #1
 800287c:	d90f      	bls.n	800289e <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	2b00      	cmp	r3, #0
 8002886:	da0a      	bge.n	800289e <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f043 0208 	orr.w	r2, r3, #8
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	2203      	movs	r2, #3
 8002898:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e0c2      	b.n	8002a24 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	dbe3      	blt.n	8002870 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80028a8:	2001      	movs	r0, #1
 80028aa:	f7ff fdcf 	bl	800244c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	6992      	ldr	r2, [r2, #24]
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f003 0310 	and.w	r3, r3, #16
 80028c4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80028c8:	fa01 f303 	lsl.w	r3, r1, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	ea02 0103 	and.w	r1, r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	69da      	ldr	r2, [r3, #28]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	409a      	lsls	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f003 0310 	and.w	r3, r3, #16
 80028f2:	21ff      	movs	r1, #255	; 0xff
 80028f4:	fa01 f303 	lsl.w	r3, r1, r3
 80028f8:	43db      	mvns	r3, r3
 80028fa:	ea02 0103 	and.w	r1, r2, r3
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	6a1a      	ldr	r2, [r3, #32]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	409a      	lsls	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d11d      	bne.n	8002956 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	221f      	movs	r2, #31
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43db      	mvns	r3, r3
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	4013      	ands	r3, r2
 8002934:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	fa02 f303 	lsl.w	r3, r2, r3
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	4313      	orrs	r3, r2
 800294c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800295c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2207      	movs	r2, #7
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43db      	mvns	r3, r3
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	4013      	ands	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	431a      	orrs	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f003 0310 	and.w	r3, r3, #16
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6819      	ldr	r1, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	43da      	mvns	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	400a      	ands	r2, r1
 80029ba:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	f640 72fc 	movw	r2, #4092	; 0xffc
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6819      	ldr	r1, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	22c0      	movs	r2, #192	; 0xc0
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43da      	mvns	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	400a      	ands	r2, r1
 8002a14:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3720      	adds	r7, #32
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d101      	bne.n	8002a3e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0ac      	b.n	8002b98 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f000 f8b2 	bl	8002bac <DFSDM_GetChannelFromInstance>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4a55      	ldr	r2, [pc, #340]	; (8002ba0 <HAL_DFSDM_ChannelInit+0x174>)
 8002a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e09f      	b.n	8002b98 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff f929 	bl	8001cb0 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8002a5e:	4b51      	ldr	r3, [pc, #324]	; (8002ba4 <HAL_DFSDM_ChannelInit+0x178>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	4a4f      	ldr	r2, [pc, #316]	; (8002ba4 <HAL_DFSDM_ChannelInit+0x178>)
 8002a66:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002a68:	4b4e      	ldr	r3, [pc, #312]	; (8002ba4 <HAL_DFSDM_ChannelInit+0x178>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d125      	bne.n	8002abc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8002a70:	4b4d      	ldr	r3, [pc, #308]	; (8002ba8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a4c      	ldr	r2, [pc, #304]	; (8002ba8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002a7a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002a7c:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	4948      	ldr	r1, [pc, #288]	; (8002ba8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002a8a:	4b47      	ldr	r3, [pc, #284]	; (8002ba8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a46      	ldr	r2, [pc, #280]	; (8002ba8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a90:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002a94:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	791b      	ldrb	r3, [r3, #4]
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d108      	bne.n	8002ab0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002a9e:	4b42      	ldr	r3, [pc, #264]	; (8002ba8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	041b      	lsls	r3, r3, #16
 8002aaa:	493f      	ldr	r1, [pc, #252]	; (8002ba8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002ab0:	4b3d      	ldr	r3, [pc, #244]	; (8002ba8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a3c      	ldr	r2, [pc, #240]	; (8002ba8 <HAL_DFSDM_ChannelInit+0x17c>)
 8002ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002aba:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002aca:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	6819      	ldr	r1, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ada:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002ae0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f022 020f 	bic.w	r2, r2, #15
 8002af8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	6819      	ldr	r1, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002b20:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6899      	ldr	r1, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b30:	3b01      	subs	r3, #1
 8002b32:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002b34:	431a      	orrs	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f002 0207 	and.w	r2, r2, #7
 8002b4c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	6859      	ldr	r1, [r3, #4]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b5e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002b60:	431a      	orrs	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b78:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 f810 	bl	8002bac <DFSDM_GetChannelFromInstance>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4904      	ldr	r1, [pc, #16]	; (8002ba0 <HAL_DFSDM_ChannelInit+0x174>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	2000043c 	.word	0x2000043c
 8002ba4:	20000438 	.word	0x20000438
 8002ba8:	40016000 	.word	0x40016000

08002bac <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a1c      	ldr	r2, [pc, #112]	; (8002c28 <DFSDM_GetChannelFromInstance+0x7c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d102      	bne.n	8002bc2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	e02b      	b.n	8002c1a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <DFSDM_GetChannelFromInstance+0x80>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d102      	bne.n	8002bd0 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	e024      	b.n	8002c1a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <DFSDM_GetChannelFromInstance+0x84>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d102      	bne.n	8002bde <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	60fb      	str	r3, [r7, #12]
 8002bdc:	e01d      	b.n	8002c1a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a14      	ldr	r2, [pc, #80]	; (8002c34 <DFSDM_GetChannelFromInstance+0x88>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d102      	bne.n	8002bec <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002be6:	2304      	movs	r3, #4
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	e016      	b.n	8002c1a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <DFSDM_GetChannelFromInstance+0x8c>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d102      	bne.n	8002bfa <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002bf4:	2305      	movs	r3, #5
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	e00f      	b.n	8002c1a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a0f      	ldr	r2, [pc, #60]	; (8002c3c <DFSDM_GetChannelFromInstance+0x90>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d102      	bne.n	8002c08 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002c02:	2306      	movs	r3, #6
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	e008      	b.n	8002c1a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a0d      	ldr	r2, [pc, #52]	; (8002c40 <DFSDM_GetChannelFromInstance+0x94>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d102      	bne.n	8002c16 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002c10:	2307      	movs	r3, #7
 8002c12:	60fb      	str	r3, [r7, #12]
 8002c14:	e001      	b.n	8002c1a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002c16:	2303      	movs	r3, #3
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	40016000 	.word	0x40016000
 8002c2c:	40016020 	.word	0x40016020
 8002c30:	40016040 	.word	0x40016040
 8002c34:	40016080 	.word	0x40016080
 8002c38:	400160a0 	.word	0x400160a0
 8002c3c:	400160c0 	.word	0x400160c0
 8002c40:	400160e0 	.word	0x400160e0

08002c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b087      	sub	sp, #28
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c52:	e17f      	b.n	8002f54 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	2101      	movs	r1, #1
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c60:	4013      	ands	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 8171 	beq.w	8002f4e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 0303 	and.w	r3, r3, #3
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d005      	beq.n	8002c84 <HAL_GPIO_Init+0x40>
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d130      	bne.n	8002ce6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	2203      	movs	r2, #3
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	43db      	mvns	r3, r3
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	4013      	ands	r3, r2
 8002c9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	693a      	ldr	r2, [r7, #16]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cba:	2201      	movs	r2, #1
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	f003 0201 	and.w	r2, r3, #1
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d118      	bne.n	8002d24 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	4013      	ands	r3, r2
 8002d06:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	08db      	lsrs	r3, r3, #3
 8002d0e:	f003 0201 	and.w	r2, r3, #1
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d017      	beq.n	8002d60 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	693a      	ldr	r2, [r7, #16]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f003 0303 	and.w	r3, r3, #3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d123      	bne.n	8002db4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	08da      	lsrs	r2, r3, #3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3208      	adds	r2, #8
 8002d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d78:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	220f      	movs	r2, #15
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	693a      	ldr	r2, [r7, #16]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	691a      	ldr	r2, [r3, #16]
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	08da      	lsrs	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3208      	adds	r2, #8
 8002dae:	6939      	ldr	r1, [r7, #16]
 8002db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	2203      	movs	r2, #3
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f003 0203 	and.w	r2, r3, #3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	693a      	ldr	r2, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 80ac 	beq.w	8002f4e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002df6:	4b5f      	ldr	r3, [pc, #380]	; (8002f74 <HAL_GPIO_Init+0x330>)
 8002df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dfa:	4a5e      	ldr	r2, [pc, #376]	; (8002f74 <HAL_GPIO_Init+0x330>)
 8002dfc:	f043 0301 	orr.w	r3, r3, #1
 8002e00:	6613      	str	r3, [r2, #96]	; 0x60
 8002e02:	4b5c      	ldr	r3, [pc, #368]	; (8002f74 <HAL_GPIO_Init+0x330>)
 8002e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	60bb      	str	r3, [r7, #8]
 8002e0c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e0e:	4a5a      	ldr	r2, [pc, #360]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	089b      	lsrs	r3, r3, #2
 8002e14:	3302      	adds	r3, #2
 8002e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f003 0303 	and.w	r3, r3, #3
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	220f      	movs	r2, #15
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e38:	d025      	beq.n	8002e86 <HAL_GPIO_Init+0x242>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4f      	ldr	r2, [pc, #316]	; (8002f7c <HAL_GPIO_Init+0x338>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d01f      	beq.n	8002e82 <HAL_GPIO_Init+0x23e>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4e      	ldr	r2, [pc, #312]	; (8002f80 <HAL_GPIO_Init+0x33c>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d019      	beq.n	8002e7e <HAL_GPIO_Init+0x23a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4d      	ldr	r2, [pc, #308]	; (8002f84 <HAL_GPIO_Init+0x340>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d013      	beq.n	8002e7a <HAL_GPIO_Init+0x236>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4c      	ldr	r2, [pc, #304]	; (8002f88 <HAL_GPIO_Init+0x344>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00d      	beq.n	8002e76 <HAL_GPIO_Init+0x232>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a4b      	ldr	r2, [pc, #300]	; (8002f8c <HAL_GPIO_Init+0x348>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <HAL_GPIO_Init+0x22e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a4a      	ldr	r2, [pc, #296]	; (8002f90 <HAL_GPIO_Init+0x34c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d101      	bne.n	8002e6e <HAL_GPIO_Init+0x22a>
 8002e6a:	2306      	movs	r3, #6
 8002e6c:	e00c      	b.n	8002e88 <HAL_GPIO_Init+0x244>
 8002e6e:	2307      	movs	r3, #7
 8002e70:	e00a      	b.n	8002e88 <HAL_GPIO_Init+0x244>
 8002e72:	2305      	movs	r3, #5
 8002e74:	e008      	b.n	8002e88 <HAL_GPIO_Init+0x244>
 8002e76:	2304      	movs	r3, #4
 8002e78:	e006      	b.n	8002e88 <HAL_GPIO_Init+0x244>
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e004      	b.n	8002e88 <HAL_GPIO_Init+0x244>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e002      	b.n	8002e88 <HAL_GPIO_Init+0x244>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_GPIO_Init+0x244>
 8002e86:	2300      	movs	r3, #0
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	f002 0203 	and.w	r2, r2, #3
 8002e8e:	0092      	lsls	r2, r2, #2
 8002e90:	4093      	lsls	r3, r2
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e98:	4937      	ldr	r1, [pc, #220]	; (8002f78 <HAL_GPIO_Init+0x334>)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	089b      	lsrs	r3, r3, #2
 8002e9e:	3302      	adds	r3, #2
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ea6:	4b3b      	ldr	r3, [pc, #236]	; (8002f94 <HAL_GPIO_Init+0x350>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	43db      	mvns	r3, r3
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002eca:	4a32      	ldr	r2, [pc, #200]	; (8002f94 <HAL_GPIO_Init+0x350>)
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ed0:	4b30      	ldr	r3, [pc, #192]	; (8002f94 <HAL_GPIO_Init+0x350>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	4013      	ands	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ef4:	4a27      	ldr	r2, [pc, #156]	; (8002f94 <HAL_GPIO_Init+0x350>)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002efa:	4b26      	ldr	r3, [pc, #152]	; (8002f94 <HAL_GPIO_Init+0x350>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	43db      	mvns	r3, r3
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	4013      	ands	r3, r2
 8002f08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d003      	beq.n	8002f1e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f1e:	4a1d      	ldr	r2, [pc, #116]	; (8002f94 <HAL_GPIO_Init+0x350>)
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f24:	4b1b      	ldr	r3, [pc, #108]	; (8002f94 <HAL_GPIO_Init+0x350>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d003      	beq.n	8002f48 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f48:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <HAL_GPIO_Init+0x350>)
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	3301      	adds	r3, #1
 8002f52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f47f ae78 	bne.w	8002c54 <HAL_GPIO_Init+0x10>
  }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	371c      	adds	r7, #28
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f70:	4770      	bx	lr
 8002f72:	bf00      	nop
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40010000 	.word	0x40010000
 8002f7c:	48000400 	.word	0x48000400
 8002f80:	48000800 	.word	0x48000800
 8002f84:	48000c00 	.word	0x48000c00
 8002f88:	48001000 	.word	0x48001000
 8002f8c:	48001400 	.word	0x48001400
 8002f90:	48001800 	.word	0x48001800
 8002f94:	40010400 	.word	0x40010400

08002f98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	807b      	strh	r3, [r7, #2]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fa8:	787b      	ldrb	r3, [r7, #1]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fae:	887a      	ldrh	r2, [r7, #2]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fb4:	e002      	b.n	8002fbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fb6:	887a      	ldrh	r2, [r7, #2]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002fd2:	4b08      	ldr	r3, [pc, #32]	; (8002ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d006      	beq.n	8002fec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fde:	4a05      	ldr	r2, [pc, #20]	; (8002ff4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fe0:	88fb      	ldrh	r3, [r7, #6]
 8002fe2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fe4:	88fb      	ldrh	r3, [r7, #6]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 f806 	bl	8002ff8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40010400 	.word	0x40010400

08002ff8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800300e:	b580      	push	{r7, lr}
 8003010:	b082      	sub	sp, #8
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e08d      	b.n	800313c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d106      	bne.n	800303a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7fe fe9f 	bl	8001d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2224      	movs	r2, #36	; 0x24
 800303e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0201 	bic.w	r2, r2, #1
 8003050:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800305e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800306e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d107      	bne.n	8003088 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003084:	609a      	str	r2, [r3, #8]
 8003086:	e006      	b.n	8003096 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003094:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d108      	bne.n	80030b0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ac:	605a      	str	r2, [r3, #4]
 80030ae:	e007      	b.n	80030c0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80030d2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	69d9      	ldr	r1, [r3, #28]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a1a      	ldr	r2, [r3, #32]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	430a      	orrs	r2, r1
 800310c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800313a:	2300      	movs	r3, #0
}
 800313c:	4618      	mov	r0, r3
 800313e:	3708      	adds	r7, #8
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b20      	cmp	r3, #32
 8003158:	d138      	bne.n	80031cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003164:	2302      	movs	r3, #2
 8003166:	e032      	b.n	80031ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2224      	movs	r2, #36	; 0x24
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003196:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6819      	ldr	r1, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	683a      	ldr	r2, [r7, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	e000      	b.n	80031ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031cc:	2302      	movs	r3, #2
  }
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031da:	b480      	push	{r7}
 80031dc:	b085      	sub	sp, #20
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
 80031e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	d139      	bne.n	8003264 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e033      	b.n	8003266 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2224      	movs	r2, #36	; 0x24
 800320a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800322c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	021b      	lsls	r3, r3, #8
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2220      	movs	r2, #32
 8003254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003260:	2300      	movs	r3, #0
 8003262:	e000      	b.n	8003266 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003264:	2302      	movs	r3, #2
  }
}
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003272:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003274:	b08f      	sub	sp, #60	; 0x3c
 8003276:	af0a      	add	r7, sp, #40	; 0x28
 8003278:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d101      	bne.n	8003284 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e116      	b.n	80034b2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d106      	bne.n	80032a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f00a fc00 	bl	800daa4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2203      	movs	r2, #3
 80032a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f003 ff43 	bl	800714e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	603b      	str	r3, [r7, #0]
 80032ce:	687e      	ldr	r6, [r7, #4]
 80032d0:	466d      	mov	r5, sp
 80032d2:	f106 0410 	add.w	r4, r6, #16
 80032d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80032e6:	1d33      	adds	r3, r6, #4
 80032e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032ea:	6838      	ldr	r0, [r7, #0]
 80032ec:	f003 fe55 	bl	8006f9a <USB_CoreInit>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2202      	movs	r2, #2
 80032fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0d7      	b.n	80034b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f003 ff31 	bl	8007170 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
 8003312:	e04a      	b.n	80033aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003314:	7bfa      	ldrb	r2, [r7, #15]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	333d      	adds	r3, #61	; 0x3d
 8003324:	2201      	movs	r2, #1
 8003326:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003328:	7bfa      	ldrb	r2, [r7, #15]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	333c      	adds	r3, #60	; 0x3c
 8003338:	7bfa      	ldrb	r2, [r7, #15]
 800333a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	b298      	uxth	r0, r3
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4413      	add	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	3356      	adds	r3, #86	; 0x56
 8003350:	4602      	mov	r2, r0
 8003352:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	6879      	ldr	r1, [r7, #4]
 8003358:	4613      	mov	r3, r2
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	4413      	add	r3, r2
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	3340      	adds	r3, #64	; 0x40
 8003364:	2200      	movs	r2, #0
 8003366:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003368:	7bfa      	ldrb	r2, [r7, #15]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	00db      	lsls	r3, r3, #3
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	3344      	adds	r3, #68	; 0x44
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800337c:	7bfa      	ldrb	r2, [r7, #15]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	00db      	lsls	r3, r3, #3
 8003384:	4413      	add	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	3348      	adds	r3, #72	; 0x48
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003390:	7bfa      	ldrb	r2, [r7, #15]
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4413      	add	r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	334c      	adds	r3, #76	; 0x4c
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	3301      	adds	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
 80033aa:	7bfa      	ldrb	r2, [r7, #15]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d3af      	bcc.n	8003314 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b4:	2300      	movs	r3, #0
 80033b6:	73fb      	strb	r3, [r7, #15]
 80033b8:	e044      	b.n	8003444 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80033ba:	7bfa      	ldrb	r2, [r7, #15]
 80033bc:	6879      	ldr	r1, [r7, #4]
 80033be:	4613      	mov	r3, r2
 80033c0:	00db      	lsls	r3, r3, #3
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80033cc:	2200      	movs	r2, #0
 80033ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80033d0:	7bfa      	ldrb	r2, [r7, #15]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	00db      	lsls	r3, r3, #3
 80033d8:	4413      	add	r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80033e2:	7bfa      	ldrb	r2, [r7, #15]
 80033e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80033e6:	7bfa      	ldrb	r2, [r7, #15]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80033fc:	7bfa      	ldrb	r2, [r7, #15]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003412:	7bfa      	ldrb	r2, [r7, #15]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003428:	7bfa      	ldrb	r2, [r7, #15]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800343e:	7bfb      	ldrb	r3, [r7, #15]
 8003440:	3301      	adds	r3, #1
 8003442:	73fb      	strb	r3, [r7, #15]
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	429a      	cmp	r2, r3
 800344c:	d3b5      	bcc.n	80033ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	687e      	ldr	r6, [r7, #4]
 8003456:	466d      	mov	r5, sp
 8003458:	f106 0410 	add.w	r4, r6, #16
 800345c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800345e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003462:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003464:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003468:	e885 0003 	stmia.w	r5, {r0, r1}
 800346c:	1d33      	adds	r3, r6, #4
 800346e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003470:	6838      	ldr	r0, [r7, #0]
 8003472:	f003 fec9 	bl	8007208 <USB_DevInit>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2202      	movs	r2, #2
 8003480:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e014      	b.n	80034b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	2b01      	cmp	r3, #1
 800349e:	d102      	bne.n	80034a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f001 f851 	bl	8004548 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4618      	mov	r0, r3
 80034ac:	f004 fe77 	bl	800819e <USB_DevDisconnect>

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_PCD_Start+0x1c>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e01c      	b.n	8003510 <HAL_PCD_Start+0x56>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d105      	bne.n	80034f2 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f003 fe18 	bl	800712c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f004 fe2b 	bl	800815c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b08d      	sub	sp, #52	; 0x34
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f004 fee9 	bl	8008306 <USB_GetMode>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	f040 847e 	bne.w	8003e38 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f004 fe4d 	bl	80081e0 <USB_ReadInterrupts>
 8003546:	4603      	mov	r3, r0
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 8474 	beq.w	8003e36 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f004 fe3a 	bl	80081e0 <USB_ReadInterrupts>
 800356c:	4603      	mov	r3, r0
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b02      	cmp	r3, #2
 8003574:	d107      	bne.n	8003586 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	695a      	ldr	r2, [r3, #20]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f002 0202 	and.w	r2, r2, #2
 8003584:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f004 fe28 	bl	80081e0 <USB_ReadInterrupts>
 8003590:	4603      	mov	r3, r0
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	2b10      	cmp	r3, #16
 8003598:	d161      	bne.n	800365e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699a      	ldr	r2, [r3, #24]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0210 	bic.w	r2, r2, #16
 80035a8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80035aa:	6a3b      	ldr	r3, [r7, #32]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f003 020f 	and.w	r2, r3, #15
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	4413      	add	r3, r2
 80035c6:	3304      	adds	r3, #4
 80035c8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	0c5b      	lsrs	r3, r3, #17
 80035ce:	f003 030f 	and.w	r3, r3, #15
 80035d2:	2b02      	cmp	r3, #2
 80035d4:	d124      	bne.n	8003620 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80035dc:	4013      	ands	r3, r2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d035      	beq.n	800364e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80035ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	461a      	mov	r2, r3
 80035f4:	6a38      	ldr	r0, [r7, #32]
 80035f6:	f004 fc5f 	bl	8007eb8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	68da      	ldr	r2, [r3, #12]
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003606:	441a      	add	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	695a      	ldr	r2, [r3, #20]
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003618:	441a      	add	r2, r3
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	615a      	str	r2, [r3, #20]
 800361e:	e016      	b.n	800364e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	0c5b      	lsrs	r3, r3, #17
 8003624:	f003 030f 	and.w	r3, r3, #15
 8003628:	2b06      	cmp	r3, #6
 800362a:	d110      	bne.n	800364e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003632:	2208      	movs	r2, #8
 8003634:	4619      	mov	r1, r3
 8003636:	6a38      	ldr	r0, [r7, #32]
 8003638:	f004 fc3e 	bl	8007eb8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	695a      	ldr	r2, [r3, #20]
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003648:	441a      	add	r2, r3
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0210 	orr.w	r2, r2, #16
 800365c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4618      	mov	r0, r3
 8003664:	f004 fdbc 	bl	80081e0 <USB_ReadInterrupts>
 8003668:	4603      	mov	r3, r0
 800366a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800366e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003672:	f040 80a7 	bne.w	80037c4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003676:	2300      	movs	r3, #0
 8003678:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f004 fdc1 	bl	8008206 <USB_ReadDevAllOutEpInterrupt>
 8003684:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003686:	e099      	b.n	80037bc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 808e 	beq.w	80037b0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369a:	b2d2      	uxtb	r2, r2
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f004 fde5 	bl	800826e <USB_ReadDevOutEPInterrupt>
 80036a4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00c      	beq.n	80036ca <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036bc:	461a      	mov	r2, r3
 80036be:	2301      	movs	r3, #1
 80036c0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80036c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fe65 	bl	8004394 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f003 0308 	and.w	r3, r3, #8
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00c      	beq.n	80036ee <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e0:	461a      	mov	r2, r3
 80036e2:	2308      	movs	r3, #8
 80036e4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80036e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 fea1 	bl	8004430 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f003 0310 	and.w	r3, r3, #16
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80036f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003704:	461a      	mov	r2, r3
 8003706:	2310      	movs	r3, #16
 8003708:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d030      	beq.n	8003776 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800371c:	2b80      	cmp	r3, #128	; 0x80
 800371e:	d109      	bne.n	8003734 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	69fa      	ldr	r2, [r7, #28]
 800372a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800372e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003732:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003734:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003736:	4613      	mov	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	4413      	add	r3, r2
 8003746:	3304      	adds	r3, #4
 8003748:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	78db      	ldrb	r3, [r3, #3]
 800374e:	2b01      	cmp	r3, #1
 8003750:	d108      	bne.n	8003764 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	2200      	movs	r2, #0
 8003756:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	b2db      	uxtb	r3, r3
 800375c:	4619      	mov	r1, r3
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f00a fb06 	bl	800dd70 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003770:	461a      	mov	r2, r3
 8003772:	2302      	movs	r3, #2
 8003774:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	4413      	add	r3, r2
 8003788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800378c:	461a      	mov	r2, r3
 800378e:	2320      	movs	r3, #32
 8003790:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d009      	beq.n	80037b0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800379c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379e:	015a      	lsls	r2, r3, #5
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	4413      	add	r3, r2
 80037a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a8:	461a      	mov	r2, r3
 80037aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037ae:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	3301      	adds	r3, #1
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b8:	085b      	lsrs	r3, r3, #1
 80037ba:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f47f af62 	bne.w	8003688 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4618      	mov	r0, r3
 80037ca:	f004 fd09 	bl	80081e0 <USB_ReadInterrupts>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037d8:	f040 80a4 	bne.w	8003924 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4618      	mov	r0, r3
 80037e2:	f004 fd2a 	bl	800823a <USB_ReadDevAllInEpInterrupt>
 80037e6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80037e8:	2300      	movs	r3, #0
 80037ea:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80037ec:	e096      	b.n	800391c <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80037ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	f000 808b 	beq.w	8003910 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	4611      	mov	r1, r2
 8003804:	4618      	mov	r0, r3
 8003806:	f004 fd50 	bl	80082aa <USB_ReadDevInEPInterrupt>
 800380a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d020      	beq.n	8003858 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	2201      	movs	r2, #1
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	43db      	mvns	r3, r3
 8003830:	69f9      	ldr	r1, [r7, #28]
 8003832:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003836:	4013      	ands	r3, r2
 8003838:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800383a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	4413      	add	r3, r2
 8003842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003846:	461a      	mov	r2, r3
 8003848:	2301      	movs	r3, #1
 800384a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	b2db      	uxtb	r3, r3
 8003850:	4619      	mov	r1, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f00a f9f7 	bl	800dc46 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f003 0308 	and.w	r3, r3, #8
 800385e:	2b00      	cmp	r3, #0
 8003860:	d008      	beq.n	8003874 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800386e:	461a      	mov	r2, r3
 8003870:	2308      	movs	r3, #8
 8003872:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	2b00      	cmp	r3, #0
 800387c:	d008      	beq.n	8003890 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800387e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388a:	461a      	mov	r2, r3
 800388c:	2310      	movs	r3, #16
 800388e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d008      	beq.n	80038ac <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	69fb      	ldr	r3, [r7, #28]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a6:	461a      	mov	r2, r3
 80038a8:	2340      	movs	r3, #64	; 0x40
 80038aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d023      	beq.n	80038fe <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80038b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038b8:	6a38      	ldr	r0, [r7, #32]
 80038ba:	f003 fde7 	bl	800748c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80038be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	3338      	adds	r3, #56	; 0x38
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	4413      	add	r3, r2
 80038ce:	3304      	adds	r3, #4
 80038d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	78db      	ldrb	r3, [r3, #3]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d108      	bne.n	80038ec <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2200      	movs	r2, #0
 80038de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	4619      	mov	r1, r3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f00a fa54 	bl	800dd94 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80038ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ee:	015a      	lsls	r2, r3, #5
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	4413      	add	r3, r2
 80038f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038f8:	461a      	mov	r2, r3
 80038fa:	2302      	movs	r3, #2
 80038fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b00      	cmp	r3, #0
 8003906:	d003      	beq.n	8003910 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 fcba 	bl	8004284 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	3301      	adds	r3, #1
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003918:	085b      	lsrs	r3, r3, #1
 800391a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800391c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800391e:	2b00      	cmp	r3, #0
 8003920:	f47f af65 	bne.w	80037ee <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4618      	mov	r0, r3
 800392a:	f004 fc59 	bl	80081e0 <USB_ReadInterrupts>
 800392e:	4603      	mov	r3, r0
 8003930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003938:	d122      	bne.n	8003980 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003954:	2b01      	cmp	r3, #1
 8003956:	d108      	bne.n	800396a <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003960:	2100      	movs	r1, #0
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f00a fc74 	bl	800e250 <HAL_PCDEx_LPM_Callback>
 8003968:	e002      	b.n	8003970 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f00a f9d8 	bl	800dd20 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695a      	ldr	r2, [r3, #20]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800397e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4618      	mov	r0, r3
 8003986:	f004 fc2b 	bl	80081e0 <USB_ReadInterrupts>
 800398a:	4603      	mov	r3, r0
 800398c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003994:	d112      	bne.n	80039bc <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d102      	bne.n	80039ac <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f00a f994 	bl	800dcd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	695a      	ldr	r2, [r3, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80039ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4618      	mov	r0, r3
 80039c2:	f004 fc0d 	bl	80081e0 <USB_ReadInterrupts>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039d0:	d121      	bne.n	8003a16 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695a      	ldr	r2, [r3, #20]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80039e0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d111      	bne.n	8003a10 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	089b      	lsrs	r3, r3, #2
 80039fc:	f003 020f 	and.w	r2, r3, #15
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a06:	2101      	movs	r1, #1
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f00a fc21 	bl	800e250 <HAL_PCDEx_LPM_Callback>
 8003a0e:	e002      	b.n	8003a16 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f00a f95f 	bl	800dcd4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f004 fbe0 	bl	80081e0 <USB_ReadInterrupts>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2a:	f040 80b5 	bne.w	8003b98 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a3c:	f023 0301 	bic.w	r3, r3, #1
 8003a40:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2110      	movs	r1, #16
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f003 fd1f 	bl	800748c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a52:	e046      	b.n	8003ae2 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a60:	461a      	mov	r2, r3
 8003a62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a66:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a78:	0151      	lsls	r1, r2, #5
 8003a7a:	69fa      	ldr	r2, [r7, #28]
 8003a7c:	440a      	add	r2, r1
 8003a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a86:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a94:	461a      	mov	r2, r3
 8003a96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a9a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aac:	0151      	lsls	r1, r2, #5
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ab6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003aba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003abe:	015a      	lsls	r2, r3, #5
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003acc:	0151      	lsls	r1, r2, #5
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	440a      	add	r2, r1
 8003ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ad6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ada:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ade:	3301      	adds	r3, #1
 8003ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d3b3      	bcc.n	8003a54 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003afa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003afe:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d016      	beq.n	8003b36 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b18:	f043 030b 	orr.w	r3, r3, #11
 8003b1c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b2e:	f043 030b 	orr.w	r3, r3, #11
 8003b32:	6453      	str	r3, [r2, #68]	; 0x44
 8003b34:	e015      	b.n	8003b62 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b48:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003b4c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	69fa      	ldr	r2, [r7, #28]
 8003b58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b5c:	f043 030b 	orr.w	r3, r3, #11
 8003b60:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b70:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003b74:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b80:	4619      	mov	r1, r3
 8003b82:	4610      	mov	r0, r2
 8003b84:	f004 fbf0 	bl	8008368 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	695a      	ldr	r2, [r3, #20]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003b96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f004 fb1f 	bl	80081e0 <USB_ReadInterrupts>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ba8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bac:	d124      	bne.n	8003bf8 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f004 fbb5 	bl	8008322 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f003 fce2 	bl	8007586 <USB_GetDevSpeed>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681c      	ldr	r4, [r3, #0]
 8003bce:	f001 fb87 	bl	80052e0 <HAL_RCC_GetHCLKFreq>
 8003bd2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	461a      	mov	r2, r3
 8003bdc:	4620      	mov	r0, r4
 8003bde:	f003 fa09 	bl	8006ff4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f00a f857 	bl	800dc96 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695a      	ldr	r2, [r3, #20]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003bf6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f004 faef 	bl	80081e0 <USB_ReadInterrupts>
 8003c02:	4603      	mov	r3, r0
 8003c04:	f003 0308 	and.w	r3, r3, #8
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d10a      	bne.n	8003c22 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f00a f834 	bl	800dc7a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695a      	ldr	r2, [r3, #20]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f002 0208 	and.w	r2, r2, #8
 8003c20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f004 fada 	bl	80081e0 <USB_ReadInterrupts>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c32:	2b80      	cmp	r3, #128	; 0x80
 8003c34:	d122      	bne.n	8003c7c <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003c36:	6a3b      	ldr	r3, [r7, #32]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c3e:	6a3b      	ldr	r3, [r7, #32]
 8003c40:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c42:	2301      	movs	r3, #1
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
 8003c46:	e014      	b.n	8003c72 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d105      	bne.n	8003c6c <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	4619      	mov	r1, r3
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fadb 	bl	8004222 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6e:	3301      	adds	r3, #1
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d3e5      	bcc.n	8003c48 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f004 faad 	bl	80081e0 <USB_ReadInterrupts>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c90:	d13b      	bne.n	8003d0a <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c92:	2301      	movs	r3, #1
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
 8003c96:	e02b      	b.n	8003cf0 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3340      	adds	r3, #64	; 0x40
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d115      	bne.n	8003cea <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003cbe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	da12      	bge.n	8003cea <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc8:	4613      	mov	r3, r2
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	333f      	adds	r3, #63	; 0x3f
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 fa9c 	bl	8004222 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cec:	3301      	adds	r3, #1
 8003cee:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d3ce      	bcc.n	8003c98 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003d08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f004 fa66 	bl	80081e0 <USB_ReadInterrupts>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d1e:	d155      	bne.n	8003dcc <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d20:	2301      	movs	r3, #1
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
 8003d24:	e045      	b.n	8003db2 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	00db      	lsls	r3, r3, #3
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d12e      	bne.n	8003dac <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d4e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	da2b      	bge.n	8003dac <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003d60:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d121      	bne.n	8003dac <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003d68:	6879      	ldr	r1, [r7, #4]
 8003d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	4413      	add	r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	695b      	ldr	r3, [r3, #20]
 8003d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	69fa      	ldr	r2, [r7, #28]
 8003da0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003da4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003da8:	6053      	str	r3, [r2, #4]
            break;
 8003daa:	e007      	b.n	8003dbc <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	3301      	adds	r3, #1
 8003db0:	627b      	str	r3, [r7, #36]	; 0x24
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d3b4      	bcc.n	8003d26 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003dca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f004 fa05 	bl	80081e0 <USB_ReadInterrupts>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003de0:	d10a      	bne.n	8003df8 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f009 ffe8 	bl	800ddb8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003df6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f004 f9ef 	bl	80081e0 <USB_ReadInterrupts>
 8003e02:	4603      	mov	r3, r0
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b04      	cmp	r3, #4
 8003e0a:	d115      	bne.n	8003e38 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f009 ffd8 	bl	800ddd4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6859      	ldr	r1, [r3, #4]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	69ba      	ldr	r2, [r7, #24]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	605a      	str	r2, [r3, #4]
 8003e34:	e000      	b.n	8003e38 <HAL_PCD_IRQHandler+0x920>
      return;
 8003e36:	bf00      	nop
    }
  }
}
 8003e38:	3734      	adds	r7, #52	; 0x34
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd90      	pop	{r4, r7, pc}

08003e3e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003e3e:	b580      	push	{r7, lr}
 8003e40:	b082      	sub	sp, #8
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	6078      	str	r0, [r7, #4]
 8003e46:	460b      	mov	r3, r1
 8003e48:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_PCD_SetAddress+0x1a>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e013      	b.n	8003e80 <HAL_PCD_SetAddress+0x42>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	4611      	mov	r1, r2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f004 f94d 	bl	8008110 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	4608      	mov	r0, r1
 8003e92:	4611      	mov	r1, r2
 8003e94:	461a      	mov	r2, r3
 8003e96:	4603      	mov	r3, r0
 8003e98:	70fb      	strb	r3, [r7, #3]
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	803b      	strh	r3, [r7, #0]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ea6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	da0f      	bge.n	8003ece <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003eae:	78fb      	ldrb	r3, [r7, #3]
 8003eb0:	f003 020f 	and.w	r2, r3, #15
 8003eb4:	4613      	mov	r3, r2
 8003eb6:	00db      	lsls	r3, r3, #3
 8003eb8:	4413      	add	r3, r2
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	3338      	adds	r3, #56	; 0x38
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	3304      	adds	r3, #4
 8003ec4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	705a      	strb	r2, [r3, #1]
 8003ecc:	e00f      	b.n	8003eee <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	f003 020f 	and.w	r2, r3, #15
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	4413      	add	r3, r2
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003eee:	78fb      	ldrb	r3, [r7, #3]
 8003ef0:	f003 030f 	and.w	r3, r3, #15
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003efa:	883a      	ldrh	r2, [r7, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	78ba      	ldrb	r2, [r7, #2]
 8003f04:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	785b      	ldrb	r3, [r3, #1]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d004      	beq.n	8003f18 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003f18:	78bb      	ldrb	r3, [r7, #2]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d102      	bne.n	8003f24 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_PCD_EP_Open+0xaa>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e00e      	b.n	8003f50 <HAL_PCD_EP_Open+0xc8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68f9      	ldr	r1, [r7, #12]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f003 fb3f 	bl	80075c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003f4e:	7afb      	ldrb	r3, [r7, #11]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	da0f      	bge.n	8003f8c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f6c:	78fb      	ldrb	r3, [r7, #3]
 8003f6e:	f003 020f 	and.w	r2, r3, #15
 8003f72:	4613      	mov	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	3338      	adds	r3, #56	; 0x38
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	4413      	add	r3, r2
 8003f80:	3304      	adds	r3, #4
 8003f82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	705a      	strb	r2, [r3, #1]
 8003f8a:	e00f      	b.n	8003fac <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f8c:	78fb      	ldrb	r3, [r7, #3]
 8003f8e:	f003 020f 	and.w	r2, r3, #15
 8003f92:	4613      	mov	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	4413      	add	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	3304      	adds	r3, #4
 8003fa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fac:	78fb      	ldrb	r3, [r7, #3]
 8003fae:	f003 030f 	and.w	r3, r3, #15
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_PCD_EP_Close+0x6e>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e00e      	b.n	8003fe4 <HAL_PCD_EP_Close+0x8c>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	68f9      	ldr	r1, [r7, #12]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f003 fb7d 	bl	80076d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ffc:	7afb      	ldrb	r3, [r7, #11]
 8003ffe:	f003 020f 	and.w	r2, r3, #15
 8004002:	4613      	mov	r3, r2
 8004004:	00db      	lsls	r3, r3, #3
 8004006:	4413      	add	r3, r2
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4413      	add	r3, r2
 8004012:	3304      	adds	r3, #4
 8004014:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	2200      	movs	r2, #0
 8004026:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	2200      	movs	r2, #0
 800402c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800402e:	7afb      	ldrb	r3, [r7, #11]
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	b2da      	uxtb	r2, r3
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6979      	ldr	r1, [r7, #20]
 8004040:	4618      	mov	r0, r3
 8004042:	f003 fc23 	bl	800788c <USB_EPStartXfer>

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b086      	sub	sp, #24
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	607a      	str	r2, [r7, #4]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	460b      	mov	r3, r1
 800405e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004060:	7afb      	ldrb	r3, [r7, #11]
 8004062:	f003 020f 	and.w	r2, r3, #15
 8004066:	4613      	mov	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	3338      	adds	r3, #56	; 0x38
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	4413      	add	r3, r2
 8004074:	3304      	adds	r3, #4
 8004076:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2200      	movs	r2, #0
 8004088:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	2201      	movs	r2, #1
 800408e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004090:	7afb      	ldrb	r3, [r7, #11]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	b2da      	uxtb	r2, r3
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6979      	ldr	r1, [r7, #20]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f003 fbf2 	bl	800788c <USB_EPStartXfer>

  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	f003 020f 	and.w	r2, r3, #15
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d901      	bls.n	80040d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e04e      	b.n	800416e <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	da0f      	bge.n	80040f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040d8:	78fb      	ldrb	r3, [r7, #3]
 80040da:	f003 020f 	and.w	r2, r3, #15
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	3338      	adds	r3, #56	; 0x38
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	4413      	add	r3, r2
 80040ec:	3304      	adds	r3, #4
 80040ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2201      	movs	r2, #1
 80040f4:	705a      	strb	r2, [r3, #1]
 80040f6:	e00d      	b.n	8004114 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040f8:	78fa      	ldrb	r2, [r7, #3]
 80040fa:	4613      	mov	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4413      	add	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	4413      	add	r3, r2
 800410a:	3304      	adds	r3, #4
 800410c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800411a:	78fb      	ldrb	r3, [r7, #3]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	b2da      	uxtb	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800412c:	2b01      	cmp	r3, #1
 800412e:	d101      	bne.n	8004134 <HAL_PCD_EP_SetStall+0x82>
 8004130:	2302      	movs	r3, #2
 8004132:	e01c      	b.n	800416e <HAL_PCD_EP_SetStall+0xbc>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68f9      	ldr	r1, [r7, #12]
 8004142:	4618      	mov	r0, r3
 8004144:	f003 ff10 	bl	8007f68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004148:	78fb      	ldrb	r3, [r7, #3]
 800414a:	f003 030f 	and.w	r3, r3, #15
 800414e:	2b00      	cmp	r3, #0
 8004150:	d108      	bne.n	8004164 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800415c:	4619      	mov	r1, r3
 800415e:	4610      	mov	r0, r2
 8004160:	f004 f902 	bl	8008368 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}

08004176 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b084      	sub	sp, #16
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
 800417e:	460b      	mov	r3, r1
 8004180:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004182:	78fb      	ldrb	r3, [r7, #3]
 8004184:	f003 020f 	and.w	r2, r3, #15
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	429a      	cmp	r2, r3
 800418e:	d901      	bls.n	8004194 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e042      	b.n	800421a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004194:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004198:	2b00      	cmp	r3, #0
 800419a:	da0f      	bge.n	80041bc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800419c:	78fb      	ldrb	r3, [r7, #3]
 800419e:	f003 020f 	and.w	r2, r3, #15
 80041a2:	4613      	mov	r3, r2
 80041a4:	00db      	lsls	r3, r3, #3
 80041a6:	4413      	add	r3, r2
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	3338      	adds	r3, #56	; 0x38
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	4413      	add	r3, r2
 80041b0:	3304      	adds	r3, #4
 80041b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	705a      	strb	r2, [r3, #1]
 80041ba:	e00f      	b.n	80041dc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041bc:	78fb      	ldrb	r3, [r7, #3]
 80041be:	f003 020f 	and.w	r2, r3, #15
 80041c2:	4613      	mov	r3, r2
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	4413      	add	r3, r2
 80041d2:	3304      	adds	r3, #4
 80041d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2200      	movs	r2, #0
 80041da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041e2:	78fb      	ldrb	r3, [r7, #3]
 80041e4:	f003 030f 	and.w	r3, r3, #15
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d101      	bne.n	80041fc <HAL_PCD_EP_ClrStall+0x86>
 80041f8:	2302      	movs	r3, #2
 80041fa:	e00e      	b.n	800421a <HAL_PCD_EP_ClrStall+0xa4>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68f9      	ldr	r1, [r7, #12]
 800420a:	4618      	mov	r0, r3
 800420c:	f003 ff1a 	bl	8008044 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b084      	sub	sp, #16
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
 800422a:	460b      	mov	r3, r1
 800422c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800422e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004232:	2b00      	cmp	r3, #0
 8004234:	da0c      	bge.n	8004250 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004236:	78fb      	ldrb	r3, [r7, #3]
 8004238:	f003 020f 	and.w	r2, r3, #15
 800423c:	4613      	mov	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	3338      	adds	r3, #56	; 0x38
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	4413      	add	r3, r2
 800424a:	3304      	adds	r3, #4
 800424c:	60fb      	str	r3, [r7, #12]
 800424e:	e00c      	b.n	800426a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004250:	78fb      	ldrb	r3, [r7, #3]
 8004252:	f003 020f 	and.w	r2, r3, #15
 8004256:	4613      	mov	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	4413      	add	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	4413      	add	r3, r2
 8004266:	3304      	adds	r3, #4
 8004268:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68f9      	ldr	r1, [r7, #12]
 8004270:	4618      	mov	r0, r3
 8004272:	f003 fd3d 	bl	8007cf0 <USB_EPStopXfer>
 8004276:	4603      	mov	r3, r0
 8004278:	72fb      	strb	r3, [r7, #11]

  return ret;
 800427a:	7afb      	ldrb	r3, [r7, #11]
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	4613      	mov	r3, r2
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	3338      	adds	r3, #56	; 0x38
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	4413      	add	r3, r2
 80042a8:	3304      	adds	r3, #4
 80042aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	695a      	ldr	r2, [r3, #20]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d901      	bls.n	80042bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e067      	b.n	800438c <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	691a      	ldr	r2, [r3, #16]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d902      	bls.n	80042d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	3303      	adds	r3, #3
 80042dc:	089b      	lsrs	r3, r3, #2
 80042de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042e0:	e026      	b.n	8004330 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	691a      	ldr	r2, [r3, #16]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d902      	bls.n	80042fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	3303      	adds	r3, #3
 8004302:	089b      	lsrs	r3, r3, #2
 8004304:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	68d9      	ldr	r1, [r3, #12]
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	b29b      	uxth	r3, r3
 8004312:	6978      	ldr	r0, [r7, #20]
 8004314:	f003 fd96 	bl	8007e44 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	441a      	add	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	695a      	ldr	r2, [r3, #20]
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	441a      	add	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	015a      	lsls	r2, r3, #5
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	4413      	add	r3, r2
 8004338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800433c:	699b      	ldr	r3, [r3, #24]
 800433e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	429a      	cmp	r2, r3
 8004344:	d809      	bhi.n	800435a <PCD_WriteEmptyTxFifo+0xd6>
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	695a      	ldr	r2, [r3, #20]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800434e:	429a      	cmp	r2, r3
 8004350:	d203      	bcs.n	800435a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1c3      	bne.n	80042e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	691a      	ldr	r2, [r3, #16]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	429a      	cmp	r2, r3
 8004364:	d811      	bhi.n	800438a <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	2201      	movs	r2, #1
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800437a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	43db      	mvns	r3, r3
 8004380:	6939      	ldr	r1, [r7, #16]
 8004382:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004386:	4013      	ands	r3, r2
 8004388:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3720      	adds	r7, #32
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	333c      	adds	r3, #60	; 0x3c
 80043ac:	3304      	adds	r3, #4
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	015a      	lsls	r2, r3, #5
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	4413      	add	r3, r2
 80043ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4a19      	ldr	r2, [pc, #100]	; (800442c <PCD_EP_OutXfrComplete_int+0x98>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d124      	bne.n	8004414 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00a      	beq.n	80043ea <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	015a      	lsls	r2, r3, #5
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	4413      	add	r3, r2
 80043dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e0:	461a      	mov	r2, r3
 80043e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043e6:	6093      	str	r3, [r2, #8]
 80043e8:	e01a      	b.n	8004420 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	015a      	lsls	r2, r3, #5
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	4413      	add	r3, r2
 80043fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004400:	461a      	mov	r2, r3
 8004402:	2320      	movs	r3, #32
 8004404:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	4619      	mov	r1, r3
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f009 fbff 	bl	800dc10 <HAL_PCD_DataOutStageCallback>
 8004412:	e005      	b.n	8004420 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f009 fbf8 	bl	800dc10 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	4f54310a 	.word	0x4f54310a

08004430 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b086      	sub	sp, #24
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	333c      	adds	r3, #60	; 0x3c
 8004448:	3304      	adds	r3, #4
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	4a0c      	ldr	r2, [pc, #48]	; (8004494 <PCD_EP_OutSetupPacket_int+0x64>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d90e      	bls.n	8004484 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800446c:	2b00      	cmp	r3, #0
 800446e:	d009      	beq.n	8004484 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	015a      	lsls	r2, r3, #5
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	4413      	add	r3, r2
 8004478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447c:	461a      	mov	r2, r3
 800447e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004482:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004484:	6878      	ldr	r0, [r7, #4]
 8004486:	f009 fbb1 	bl	800dbec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	4f54300a 	.word	0x4f54300a

08004498 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	70fb      	strb	r3, [r7, #3]
 80044a4:	4613      	mov	r3, r2
 80044a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80044b0:	78fb      	ldrb	r3, [r7, #3]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d107      	bne.n	80044c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80044b6:	883b      	ldrh	r3, [r7, #0]
 80044b8:	0419      	lsls	r1, r3, #16
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	629a      	str	r2, [r3, #40]	; 0x28
 80044c4:	e028      	b.n	8004518 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044cc:	0c1b      	lsrs	r3, r3, #16
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	4413      	add	r3, r2
 80044d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044d4:	2300      	movs	r3, #0
 80044d6:	73fb      	strb	r3, [r7, #15]
 80044d8:	e00d      	b.n	80044f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	7bfb      	ldrb	r3, [r7, #15]
 80044e0:	3340      	adds	r3, #64	; 0x40
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4413      	add	r3, r2
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	0c1b      	lsrs	r3, r3, #16
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	4413      	add	r3, r2
 80044ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	3301      	adds	r3, #1
 80044f4:	73fb      	strb	r3, [r7, #15]
 80044f6:	7bfa      	ldrb	r2, [r7, #15]
 80044f8:	78fb      	ldrb	r3, [r7, #3]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d3ec      	bcc.n	80044da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004500:	883b      	ldrh	r3, [r7, #0]
 8004502:	0418      	lsls	r0, r3, #16
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6819      	ldr	r1, [r3, #0]
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	3b01      	subs	r3, #1
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	4302      	orrs	r2, r0
 8004510:	3340      	adds	r3, #64	; 0x40
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004526:	b480      	push	{r7}
 8004528:	b083      	sub	sp, #12
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	460b      	mov	r3, r1
 8004530:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	887a      	ldrh	r2, [r7, #2]
 8004538:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004548:	b480      	push	{r7}
 800454a:	b085      	sub	sp, #20
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2201      	movs	r2, #1
 800455a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457a:	f043 0303 	orr.w	r3, r3, #3
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004594:	4b05      	ldr	r3, [pc, #20]	; (80045ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a04      	ldr	r2, [pc, #16]	; (80045ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800459a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800459e:	6013      	str	r3, [r2, #0]
}
 80045a0:	bf00      	nop
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr
 80045aa:	bf00      	nop
 80045ac:	40007000 	.word	0x40007000

080045b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045b0:	b480      	push	{r7}
 80045b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80045b4:	4b04      	ldr	r3, [pc, #16]	; (80045c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80045bc:	4618      	mov	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40007000 	.word	0x40007000

080045cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045da:	d130      	bne.n	800463e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80045dc:	4b23      	ldr	r3, [pc, #140]	; (800466c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045e8:	d038      	beq.n	800465c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80045ea:	4b20      	ldr	r3, [pc, #128]	; (800466c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80045f2:	4a1e      	ldr	r2, [pc, #120]	; (800466c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80045f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80045fa:	4b1d      	ldr	r3, [pc, #116]	; (8004670 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	2232      	movs	r2, #50	; 0x32
 8004600:	fb02 f303 	mul.w	r3, r2, r3
 8004604:	4a1b      	ldr	r2, [pc, #108]	; (8004674 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004606:	fba2 2303 	umull	r2, r3, r2, r3
 800460a:	0c9b      	lsrs	r3, r3, #18
 800460c:	3301      	adds	r3, #1
 800460e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004610:	e002      	b.n	8004618 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	3b01      	subs	r3, #1
 8004616:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004618:	4b14      	ldr	r3, [pc, #80]	; (800466c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004624:	d102      	bne.n	800462c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1f2      	bne.n	8004612 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800462c:	4b0f      	ldr	r3, [pc, #60]	; (800466c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004638:	d110      	bne.n	800465c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800463a:	2303      	movs	r3, #3
 800463c:	e00f      	b.n	800465e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800463e:	4b0b      	ldr	r3, [pc, #44]	; (800466c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464a:	d007      	beq.n	800465c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800464c:	4b07      	ldr	r3, [pc, #28]	; (800466c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004654:	4a05      	ldr	r2, [pc, #20]	; (800466c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800465a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
 800466a:	bf00      	nop
 800466c:	40007000 	.word	0x40007000
 8004670:	20000008 	.word	0x20000008
 8004674:	431bde83 	.word	0x431bde83

08004678 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800467c:	4b05      	ldr	r3, [pc, #20]	; (8004694 <HAL_PWREx_EnableVddUSB+0x1c>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	4a04      	ldr	r2, [pc, #16]	; (8004694 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004686:	6053      	str	r3, [r2, #4]
}
 8004688:	bf00      	nop
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40007000 	.word	0x40007000

08004698 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b086      	sub	sp, #24
 800469c:	af02      	add	r7, sp, #8
 800469e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80046a0:	f7fd fec8 	bl	8002434 <HAL_GetTick>
 80046a4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d101      	bne.n	80046b0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e063      	b.n	8004778 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10b      	bne.n	80046d4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f7fd fbb5 	bl	8001e34 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80046ca:	f241 3188 	movw	r1, #5000	; 0x1388
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f858 	bl	8004784 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	3b01      	subs	r3, #1
 80046e4:	021a      	lsls	r2, r3, #8
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	2120      	movs	r1, #32
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f850 	bl	80047a0 <QSPI_WaitFlagStateUntilTimeout>
 8004700:	4603      	mov	r3, r0
 8004702:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004704:	7afb      	ldrb	r3, [r7, #11]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d131      	bne.n	800476e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004714:	f023 0310 	bic.w	r3, r3, #16
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	6852      	ldr	r2, [r2, #4]
 800471c:	0611      	lsls	r1, r2, #24
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	68d2      	ldr	r2, [r2, #12]
 8004722:	4311      	orrs	r1, r2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6812      	ldr	r2, [r2, #0]
 8004728:	430b      	orrs	r3, r1
 800472a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	4b13      	ldr	r3, [pc, #76]	; (8004780 <HAL_QSPI_Init+0xe8>)
 8004734:	4013      	ands	r3, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	6912      	ldr	r2, [r2, #16]
 800473a:	0411      	lsls	r1, r2, #16
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6952      	ldr	r2, [r2, #20]
 8004740:	4311      	orrs	r1, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6992      	ldr	r2, [r2, #24]
 8004746:	4311      	orrs	r1, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	430b      	orrs	r3, r1
 800474e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0201 	orr.w	r2, r2, #1
 800475e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004776:	7afb      	ldrb	r3, [r7, #11]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	ffe0f8fe 	.word	0xffe0f8fe

08004784 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80047b0:	e01a      	b.n	80047e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d016      	beq.n	80047e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ba:	f7fd fe3b 	bl	8002434 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	69ba      	ldr	r2, [r7, #24]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d302      	bcc.n	80047d0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10b      	bne.n	80047e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2204      	movs	r2, #4
 80047d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047dc:	f043 0201 	orr.w	r2, r3, #1
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e00e      	b.n	8004806 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689a      	ldr	r2, [r3, #8]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4013      	ands	r3, r2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	bf14      	ite	ne
 80047f6:	2301      	movne	r3, #1
 80047f8:	2300      	moveq	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	461a      	mov	r2, r3
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	429a      	cmp	r2, r3
 8004802:	d1d6      	bne.n	80047b2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
	...

08004810 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b088      	sub	sp, #32
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e3ca      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004822:	4b97      	ldr	r3, [pc, #604]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800482c:	4b94      	ldr	r3, [pc, #592]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f003 0303 	and.w	r3, r3, #3
 8004834:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0310 	and.w	r3, r3, #16
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 80e4 	beq.w	8004a0c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <HAL_RCC_OscConfig+0x4a>
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	2b0c      	cmp	r3, #12
 800484e:	f040 808b 	bne.w	8004968 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	2b01      	cmp	r3, #1
 8004856:	f040 8087 	bne.w	8004968 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800485a:	4b89      	ldr	r3, [pc, #548]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d005      	beq.n	8004872 <HAL_RCC_OscConfig+0x62>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d101      	bne.n	8004872 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e3a2      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1a      	ldr	r2, [r3, #32]
 8004876:	4b82      	ldr	r3, [pc, #520]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0308 	and.w	r3, r3, #8
 800487e:	2b00      	cmp	r3, #0
 8004880:	d004      	beq.n	800488c <HAL_RCC_OscConfig+0x7c>
 8004882:	4b7f      	ldr	r3, [pc, #508]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800488a:	e005      	b.n	8004898 <HAL_RCC_OscConfig+0x88>
 800488c:	4b7c      	ldr	r3, [pc, #496]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 800488e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004892:	091b      	lsrs	r3, r3, #4
 8004894:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004898:	4293      	cmp	r3, r2
 800489a:	d223      	bcs.n	80048e4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fd55 	bl	8005350 <RCC_SetFlashLatencyFromMSIRange>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e383      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048b0:	4b73      	ldr	r3, [pc, #460]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a72      	ldr	r2, [pc, #456]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048b6:	f043 0308 	orr.w	r3, r3, #8
 80048ba:	6013      	str	r3, [r2, #0]
 80048bc:	4b70      	ldr	r3, [pc, #448]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	496d      	ldr	r1, [pc, #436]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048ce:	4b6c      	ldr	r3, [pc, #432]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	4968      	ldr	r1, [pc, #416]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	604b      	str	r3, [r1, #4]
 80048e2:	e025      	b.n	8004930 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048e4:	4b66      	ldr	r3, [pc, #408]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a65      	ldr	r2, [pc, #404]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048ea:	f043 0308 	orr.w	r3, r3, #8
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	4b63      	ldr	r3, [pc, #396]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	4960      	ldr	r1, [pc, #384]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004902:	4b5f      	ldr	r3, [pc, #380]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	021b      	lsls	r3, r3, #8
 8004910:	495b      	ldr	r1, [pc, #364]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004912:	4313      	orrs	r3, r2
 8004914:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d109      	bne.n	8004930 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fd15 	bl	8005350 <RCC_SetFlashLatencyFromMSIRange>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e343      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004930:	f000 fc4a 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 8004934:	4602      	mov	r2, r0
 8004936:	4b52      	ldr	r3, [pc, #328]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	091b      	lsrs	r3, r3, #4
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	4950      	ldr	r1, [pc, #320]	; (8004a84 <HAL_RCC_OscConfig+0x274>)
 8004942:	5ccb      	ldrb	r3, [r1, r3]
 8004944:	f003 031f 	and.w	r3, r3, #31
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
 800494c:	4a4e      	ldr	r2, [pc, #312]	; (8004a88 <HAL_RCC_OscConfig+0x278>)
 800494e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004950:	4b4e      	ldr	r3, [pc, #312]	; (8004a8c <HAL_RCC_OscConfig+0x27c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4618      	mov	r0, r3
 8004956:	f7fd fd1d 	bl	8002394 <HAL_InitTick>
 800495a:	4603      	mov	r3, r0
 800495c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800495e:	7bfb      	ldrb	r3, [r7, #15]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d052      	beq.n	8004a0a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004964:	7bfb      	ldrb	r3, [r7, #15]
 8004966:	e327      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d032      	beq.n	80049d6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004970:	4b43      	ldr	r3, [pc, #268]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a42      	ldr	r2, [pc, #264]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800497c:	f7fd fd5a 	bl	8002434 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004984:	f7fd fd56 	bl	8002434 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e310      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004996:	4b3a      	ldr	r3, [pc, #232]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0302 	and.w	r3, r3, #2
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d0f0      	beq.n	8004984 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80049a2:	4b37      	ldr	r3, [pc, #220]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a36      	ldr	r2, [pc, #216]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049a8:	f043 0308 	orr.w	r3, r3, #8
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	4b34      	ldr	r3, [pc, #208]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	4931      	ldr	r1, [pc, #196]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049c0:	4b2f      	ldr	r3, [pc, #188]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	021b      	lsls	r3, r3, #8
 80049ce:	492c      	ldr	r1, [pc, #176]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	604b      	str	r3, [r1, #4]
 80049d4:	e01a      	b.n	8004a0c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049d6:	4b2a      	ldr	r3, [pc, #168]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a29      	ldr	r2, [pc, #164]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049dc:	f023 0301 	bic.w	r3, r3, #1
 80049e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049e2:	f7fd fd27 	bl	8002434 <HAL_GetTick>
 80049e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049ea:	f7fd fd23 	bl	8002434 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e2dd      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049fc:	4b20      	ldr	r3, [pc, #128]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f0      	bne.n	80049ea <HAL_RCC_OscConfig+0x1da>
 8004a08:	e000      	b.n	8004a0c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a0a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d074      	beq.n	8004b02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	2b08      	cmp	r3, #8
 8004a1c:	d005      	beq.n	8004a2a <HAL_RCC_OscConfig+0x21a>
 8004a1e:	69bb      	ldr	r3, [r7, #24]
 8004a20:	2b0c      	cmp	r3, #12
 8004a22:	d10e      	bne.n	8004a42 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	2b03      	cmp	r3, #3
 8004a28:	d10b      	bne.n	8004a42 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a2a:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d064      	beq.n	8004b00 <HAL_RCC_OscConfig+0x2f0>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d160      	bne.n	8004b00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e2ba      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a4a:	d106      	bne.n	8004a5a <HAL_RCC_OscConfig+0x24a>
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a0b      	ldr	r2, [pc, #44]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	e026      	b.n	8004aa8 <HAL_RCC_OscConfig+0x298>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a62:	d115      	bne.n	8004a90 <HAL_RCC_OscConfig+0x280>
 8004a64:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a05      	ldr	r2, [pc, #20]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004a6a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a6e:	6013      	str	r3, [r2, #0]
 8004a70:	4b03      	ldr	r3, [pc, #12]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a02      	ldr	r2, [pc, #8]	; (8004a80 <HAL_RCC_OscConfig+0x270>)
 8004a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a7a:	6013      	str	r3, [r2, #0]
 8004a7c:	e014      	b.n	8004aa8 <HAL_RCC_OscConfig+0x298>
 8004a7e:	bf00      	nop
 8004a80:	40021000 	.word	0x40021000
 8004a84:	0800e538 	.word	0x0800e538
 8004a88:	20000008 	.word	0x20000008
 8004a8c:	2000000c 	.word	0x2000000c
 8004a90:	4ba0      	ldr	r3, [pc, #640]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a9f      	ldr	r2, [pc, #636]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004a96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a9a:	6013      	str	r3, [r2, #0]
 8004a9c:	4b9d      	ldr	r3, [pc, #628]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a9c      	ldr	r2, [pc, #624]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004aa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004aa6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	685b      	ldr	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d013      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab0:	f7fd fcc0 	bl	8002434 <HAL_GetTick>
 8004ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ab6:	e008      	b.n	8004aca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ab8:	f7fd fcbc 	bl	8002434 <HAL_GetTick>
 8004abc:	4602      	mov	r2, r0
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	1ad3      	subs	r3, r2, r3
 8004ac2:	2b64      	cmp	r3, #100	; 0x64
 8004ac4:	d901      	bls.n	8004aca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e276      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aca:	4b92      	ldr	r3, [pc, #584]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d0f0      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x2a8>
 8004ad6:	e014      	b.n	8004b02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad8:	f7fd fcac 	bl	8002434 <HAL_GetTick>
 8004adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ade:	e008      	b.n	8004af2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae0:	f7fd fca8 	bl	8002434 <HAL_GetTick>
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	2b64      	cmp	r3, #100	; 0x64
 8004aec:	d901      	bls.n	8004af2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004aee:	2303      	movs	r3, #3
 8004af0:	e262      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004af2:	4b88      	ldr	r3, [pc, #544]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d1f0      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x2d0>
 8004afe:	e000      	b.n	8004b02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d060      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d005      	beq.n	8004b20 <HAL_RCC_OscConfig+0x310>
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	2b0c      	cmp	r3, #12
 8004b18:	d119      	bne.n	8004b4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d116      	bne.n	8004b4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b20:	4b7c      	ldr	r3, [pc, #496]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d005      	beq.n	8004b38 <HAL_RCC_OscConfig+0x328>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e23f      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b38:	4b76      	ldr	r3, [pc, #472]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	061b      	lsls	r3, r3, #24
 8004b46:	4973      	ldr	r1, [pc, #460]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b4c:	e040      	b.n	8004bd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d023      	beq.n	8004b9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b56:	4b6f      	ldr	r3, [pc, #444]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a6e      	ldr	r2, [pc, #440]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b62:	f7fd fc67 	bl	8002434 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b6a:	f7fd fc63 	bl	8002434 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e21d      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b7c:	4b65      	ldr	r3, [pc, #404]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b88:	4b62      	ldr	r3, [pc, #392]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	495f      	ldr	r1, [pc, #380]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	604b      	str	r3, [r1, #4]
 8004b9c:	e018      	b.n	8004bd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b9e:	4b5d      	ldr	r3, [pc, #372]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a5c      	ldr	r2, [pc, #368]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004baa:	f7fd fc43 	bl	8002434 <HAL_GetTick>
 8004bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bb0:	e008      	b.n	8004bc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bb2:	f7fd fc3f 	bl	8002434 <HAL_GetTick>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	2b02      	cmp	r3, #2
 8004bbe:	d901      	bls.n	8004bc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e1f9      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bc4:	4b53      	ldr	r3, [pc, #332]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d1f0      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d03c      	beq.n	8004c56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01c      	beq.n	8004c1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004be4:	4b4b      	ldr	r3, [pc, #300]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bea:	4a4a      	ldr	r2, [pc, #296]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004bec:	f043 0301 	orr.w	r3, r3, #1
 8004bf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf4:	f7fd fc1e 	bl	8002434 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bfc:	f7fd fc1a 	bl	8002434 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e1d4      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c0e:	4b41      	ldr	r3, [pc, #260]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0ef      	beq.n	8004bfc <HAL_RCC_OscConfig+0x3ec>
 8004c1c:	e01b      	b.n	8004c56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c1e:	4b3d      	ldr	r3, [pc, #244]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c24:	4a3b      	ldr	r2, [pc, #236]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004c26:	f023 0301 	bic.w	r3, r3, #1
 8004c2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2e:	f7fd fc01 	bl	8002434 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c36:	f7fd fbfd 	bl	8002434 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e1b7      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c48:	4b32      	ldr	r3, [pc, #200]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1ef      	bne.n	8004c36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0304 	and.w	r3, r3, #4
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f000 80a6 	beq.w	8004db0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c64:	2300      	movs	r3, #0
 8004c66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c68:	4b2a      	ldr	r3, [pc, #168]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10d      	bne.n	8004c90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c74:	4b27      	ldr	r3, [pc, #156]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c78:	4a26      	ldr	r2, [pc, #152]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c7e:	6593      	str	r3, [r2, #88]	; 0x58
 8004c80:	4b24      	ldr	r3, [pc, #144]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c88:	60bb      	str	r3, [r7, #8]
 8004c8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c90:	4b21      	ldr	r3, [pc, #132]	; (8004d18 <HAL_RCC_OscConfig+0x508>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d118      	bne.n	8004cce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c9c:	4b1e      	ldr	r3, [pc, #120]	; (8004d18 <HAL_RCC_OscConfig+0x508>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1d      	ldr	r2, [pc, #116]	; (8004d18 <HAL_RCC_OscConfig+0x508>)
 8004ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ca6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ca8:	f7fd fbc4 	bl	8002434 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cb0:	f7fd fbc0 	bl	8002434 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e17a      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cc2:	4b15      	ldr	r3, [pc, #84]	; (8004d18 <HAL_RCC_OscConfig+0x508>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d108      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x4d8>
 8004cd6:	4b0f      	ldr	r3, [pc, #60]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cdc:	4a0d      	ldr	r2, [pc, #52]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004cde:	f043 0301 	orr.w	r3, r3, #1
 8004ce2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ce6:	e029      	b.n	8004d3c <HAL_RCC_OscConfig+0x52c>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b05      	cmp	r3, #5
 8004cee:	d115      	bne.n	8004d1c <HAL_RCC_OscConfig+0x50c>
 8004cf0:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf6:	4a07      	ldr	r2, [pc, #28]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004cf8:	f043 0304 	orr.w	r3, r3, #4
 8004cfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d00:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d06:	4a03      	ldr	r2, [pc, #12]	; (8004d14 <HAL_RCC_OscConfig+0x504>)
 8004d08:	f043 0301 	orr.w	r3, r3, #1
 8004d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d10:	e014      	b.n	8004d3c <HAL_RCC_OscConfig+0x52c>
 8004d12:	bf00      	nop
 8004d14:	40021000 	.word	0x40021000
 8004d18:	40007000 	.word	0x40007000
 8004d1c:	4b9c      	ldr	r3, [pc, #624]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d22:	4a9b      	ldr	r2, [pc, #620]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d2c:	4b98      	ldr	r3, [pc, #608]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d32:	4a97      	ldr	r2, [pc, #604]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004d34:	f023 0304 	bic.w	r3, r3, #4
 8004d38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d016      	beq.n	8004d72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d44:	f7fd fb76 	bl	8002434 <HAL_GetTick>
 8004d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d4a:	e00a      	b.n	8004d62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4c:	f7fd fb72 	bl	8002434 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e12a      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d62:	4b8b      	ldr	r3, [pc, #556]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ed      	beq.n	8004d4c <HAL_RCC_OscConfig+0x53c>
 8004d70:	e015      	b.n	8004d9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d72:	f7fd fb5f 	bl	8002434 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d78:	e00a      	b.n	8004d90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d7a:	f7fd fb5b 	bl	8002434 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e113      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d90:	4b7f      	ldr	r3, [pc, #508]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1ed      	bne.n	8004d7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d9e:	7ffb      	ldrb	r3, [r7, #31]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	d105      	bne.n	8004db0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004da4:	4b7a      	ldr	r3, [pc, #488]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da8:	4a79      	ldr	r2, [pc, #484]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dae:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	f000 80fe 	beq.w	8004fb6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	2b02      	cmp	r3, #2
 8004dc0:	f040 80d0 	bne.w	8004f64 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004dc4:	4b72      	ldr	r3, [pc, #456]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f003 0203 	and.w	r2, r3, #3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d130      	bne.n	8004e3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	3b01      	subs	r3, #1
 8004de4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d127      	bne.n	8004e3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d11f      	bne.n	8004e3a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e04:	2a07      	cmp	r2, #7
 8004e06:	bf14      	ite	ne
 8004e08:	2201      	movne	r2, #1
 8004e0a:	2200      	moveq	r2, #0
 8004e0c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d113      	bne.n	8004e3a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1c:	085b      	lsrs	r3, r3, #1
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d109      	bne.n	8004e3a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e30:	085b      	lsrs	r3, r3, #1
 8004e32:	3b01      	subs	r3, #1
 8004e34:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d06e      	beq.n	8004f18 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b0c      	cmp	r3, #12
 8004e3e:	d069      	beq.n	8004f14 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004e40:	4b53      	ldr	r3, [pc, #332]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d105      	bne.n	8004e58 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004e4c:	4b50      	ldr	r3, [pc, #320]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d001      	beq.n	8004e5c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0ad      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004e5c:	4b4c      	ldr	r3, [pc, #304]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a4b      	ldr	r2, [pc, #300]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e66:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004e68:	f7fd fae4 	bl	8002434 <HAL_GetTick>
 8004e6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e6e:	e008      	b.n	8004e82 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e70:	f7fd fae0 	bl	8002434 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e09a      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e82:	4b43      	ldr	r3, [pc, #268]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f0      	bne.n	8004e70 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e8e:	4b40      	ldr	r3, [pc, #256]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004e90:	68da      	ldr	r2, [r3, #12]
 8004e92:	4b40      	ldr	r3, [pc, #256]	; (8004f94 <HAL_RCC_OscConfig+0x784>)
 8004e94:	4013      	ands	r3, r2
 8004e96:	687a      	ldr	r2, [r7, #4]
 8004e98:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e9e:	3a01      	subs	r2, #1
 8004ea0:	0112      	lsls	r2, r2, #4
 8004ea2:	4311      	orrs	r1, r2
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004ea8:	0212      	lsls	r2, r2, #8
 8004eaa:	4311      	orrs	r1, r2
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004eb0:	0852      	lsrs	r2, r2, #1
 8004eb2:	3a01      	subs	r2, #1
 8004eb4:	0552      	lsls	r2, r2, #21
 8004eb6:	4311      	orrs	r1, r2
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ebc:	0852      	lsrs	r2, r2, #1
 8004ebe:	3a01      	subs	r2, #1
 8004ec0:	0652      	lsls	r2, r2, #25
 8004ec2:	4311      	orrs	r1, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ec8:	0912      	lsrs	r2, r2, #4
 8004eca:	0452      	lsls	r2, r2, #17
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	4930      	ldr	r1, [pc, #192]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004ed4:	4b2e      	ldr	r3, [pc, #184]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a2d      	ldr	r2, [pc, #180]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004eda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ede:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004ee0:	4b2b      	ldr	r3, [pc, #172]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4a2a      	ldr	r2, [pc, #168]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004eec:	f7fd faa2 	bl	8002434 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef4:	f7fd fa9e 	bl	8002434 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e058      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f06:	4b22      	ldr	r3, [pc, #136]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f0      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f12:	e050      	b.n	8004fb6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e04f      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f18:	4b1d      	ldr	r3, [pc, #116]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d148      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f24:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a19      	ldr	r2, [pc, #100]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f30:	4b17      	ldr	r3, [pc, #92]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	4a16      	ldr	r2, [pc, #88]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004f3c:	f7fd fa7a 	bl	8002434 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f44:	f7fd fa76 	bl	8002434 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e030      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f56:	4b0e      	ldr	r3, [pc, #56]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0x734>
 8004f62:	e028      	b.n	8004fb6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b0c      	cmp	r3, #12
 8004f68:	d023      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6a:	4b09      	ldr	r3, [pc, #36]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a08      	ldr	r2, [pc, #32]	; (8004f90 <HAL_RCC_OscConfig+0x780>)
 8004f70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f76:	f7fd fa5d 	bl	8002434 <HAL_GetTick>
 8004f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f7c:	e00c      	b.n	8004f98 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f7e:	f7fd fa59 	bl	8002434 <HAL_GetTick>
 8004f82:	4602      	mov	r2, r0
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	2b02      	cmp	r3, #2
 8004f8a:	d905      	bls.n	8004f98 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004f8c:	2303      	movs	r3, #3
 8004f8e:	e013      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
 8004f90:	40021000 	.word	0x40021000
 8004f94:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f98:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <HAL_RCC_OscConfig+0x7b0>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d1ec      	bne.n	8004f7e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004fa4:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <HAL_RCC_OscConfig+0x7b0>)
 8004fa6:	68da      	ldr	r2, [r3, #12]
 8004fa8:	4905      	ldr	r1, [pc, #20]	; (8004fc0 <HAL_RCC_OscConfig+0x7b0>)
 8004faa:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <HAL_RCC_OscConfig+0x7b4>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	60cb      	str	r3, [r1, #12]
 8004fb0:	e001      	b.n	8004fb6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e000      	b.n	8004fb8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3720      	adds	r7, #32
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}
 8004fc0:	40021000 	.word	0x40021000
 8004fc4:	feeefffc 	.word	0xfeeefffc

08004fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0e7      	b.n	80051ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fdc:	4b75      	ldr	r3, [pc, #468]	; (80051b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0307 	and.w	r3, r3, #7
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d910      	bls.n	800500c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fea:	4b72      	ldr	r3, [pc, #456]	; (80051b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f023 0207 	bic.w	r2, r3, #7
 8004ff2:	4970      	ldr	r1, [pc, #448]	; (80051b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffa:	4b6e      	ldr	r3, [pc, #440]	; (80051b4 <HAL_RCC_ClockConfig+0x1ec>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0307 	and.w	r3, r3, #7
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d001      	beq.n	800500c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e0cf      	b.n	80051ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d010      	beq.n	800503a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	4b66      	ldr	r3, [pc, #408]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005024:	429a      	cmp	r2, r3
 8005026:	d908      	bls.n	800503a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005028:	4b63      	ldr	r3, [pc, #396]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	4960      	ldr	r1, [pc, #384]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005036:	4313      	orrs	r3, r2
 8005038:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d04c      	beq.n	80050e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b03      	cmp	r3, #3
 800504c:	d107      	bne.n	800505e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800504e:	4b5a      	ldr	r3, [pc, #360]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d121      	bne.n	800509e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e0a6      	b.n	80051ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b02      	cmp	r3, #2
 8005064:	d107      	bne.n	8005076 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005066:	4b54      	ldr	r3, [pc, #336]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d115      	bne.n	800509e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e09a      	b.n	80051ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d107      	bne.n	800508e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800507e:	4b4e      	ldr	r3, [pc, #312]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d109      	bne.n	800509e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e08e      	b.n	80051ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800508e:	4b4a      	ldr	r3, [pc, #296]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e086      	b.n	80051ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800509e:	4b46      	ldr	r3, [pc, #280]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f023 0203 	bic.w	r2, r3, #3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	4943      	ldr	r1, [pc, #268]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b0:	f7fd f9c0 	bl	8002434 <HAL_GetTick>
 80050b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050b6:	e00a      	b.n	80050ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050b8:	f7fd f9bc 	bl	8002434 <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e06e      	b.n	80051ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ce:	4b3a      	ldr	r3, [pc, #232]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 020c 	and.w	r2, r3, #12
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	429a      	cmp	r2, r3
 80050de:	d1eb      	bne.n	80050b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0302 	and.w	r3, r3, #2
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d010      	beq.n	800510e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	4b31      	ldr	r3, [pc, #196]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d208      	bcs.n	800510e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050fc:	4b2e      	ldr	r3, [pc, #184]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	492b      	ldr	r1, [pc, #172]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 800510a:	4313      	orrs	r3, r2
 800510c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800510e:	4b29      	ldr	r3, [pc, #164]	; (80051b4 <HAL_RCC_ClockConfig+0x1ec>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0307 	and.w	r3, r3, #7
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	429a      	cmp	r2, r3
 800511a:	d210      	bcs.n	800513e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511c:	4b25      	ldr	r3, [pc, #148]	; (80051b4 <HAL_RCC_ClockConfig+0x1ec>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f023 0207 	bic.w	r2, r3, #7
 8005124:	4923      	ldr	r1, [pc, #140]	; (80051b4 <HAL_RCC_ClockConfig+0x1ec>)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	4313      	orrs	r3, r2
 800512a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800512c:	4b21      	ldr	r3, [pc, #132]	; (80051b4 <HAL_RCC_ClockConfig+0x1ec>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	429a      	cmp	r2, r3
 8005138:	d001      	beq.n	800513e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e036      	b.n	80051ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0304 	and.w	r3, r3, #4
 8005146:	2b00      	cmp	r3, #0
 8005148:	d008      	beq.n	800515c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800514a:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	4918      	ldr	r1, [pc, #96]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005158:	4313      	orrs	r3, r2
 800515a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	d009      	beq.n	800517c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005168:	4b13      	ldr	r3, [pc, #76]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	00db      	lsls	r3, r3, #3
 8005176:	4910      	ldr	r1, [pc, #64]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005178:	4313      	orrs	r3, r2
 800517a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800517c:	f000 f824 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 8005180:	4602      	mov	r2, r0
 8005182:	4b0d      	ldr	r3, [pc, #52]	; (80051b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005184:	689b      	ldr	r3, [r3, #8]
 8005186:	091b      	lsrs	r3, r3, #4
 8005188:	f003 030f 	and.w	r3, r3, #15
 800518c:	490b      	ldr	r1, [pc, #44]	; (80051bc <HAL_RCC_ClockConfig+0x1f4>)
 800518e:	5ccb      	ldrb	r3, [r1, r3]
 8005190:	f003 031f 	and.w	r3, r3, #31
 8005194:	fa22 f303 	lsr.w	r3, r2, r3
 8005198:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <HAL_RCC_ClockConfig+0x1f8>)
 800519a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800519c:	4b09      	ldr	r3, [pc, #36]	; (80051c4 <HAL_RCC_ClockConfig+0x1fc>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4618      	mov	r0, r3
 80051a2:	f7fd f8f7 	bl	8002394 <HAL_InitTick>
 80051a6:	4603      	mov	r3, r0
 80051a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80051aa:	7afb      	ldrb	r3, [r7, #11]
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40022000 	.word	0x40022000
 80051b8:	40021000 	.word	0x40021000
 80051bc:	0800e538 	.word	0x0800e538
 80051c0:	20000008 	.word	0x20000008
 80051c4:	2000000c 	.word	0x2000000c

080051c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b089      	sub	sp, #36	; 0x24
 80051cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80051ce:	2300      	movs	r3, #0
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	2300      	movs	r3, #0
 80051d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d6:	4b3e      	ldr	r3, [pc, #248]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 030c 	and.w	r3, r3, #12
 80051de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051e0:	4b3b      	ldr	r3, [pc, #236]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	f003 0303 	and.w	r3, r3, #3
 80051e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <HAL_RCC_GetSysClockFreq+0x34>
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	2b0c      	cmp	r3, #12
 80051f4:	d121      	bne.n	800523a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d11e      	bne.n	800523a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80051fc:	4b34      	ldr	r3, [pc, #208]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0308 	and.w	r3, r3, #8
 8005204:	2b00      	cmp	r3, #0
 8005206:	d107      	bne.n	8005218 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005208:	4b31      	ldr	r3, [pc, #196]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800520a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800520e:	0a1b      	lsrs	r3, r3, #8
 8005210:	f003 030f 	and.w	r3, r3, #15
 8005214:	61fb      	str	r3, [r7, #28]
 8005216:	e005      	b.n	8005224 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005218:	4b2d      	ldr	r3, [pc, #180]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	091b      	lsrs	r3, r3, #4
 800521e:	f003 030f 	and.w	r3, r3, #15
 8005222:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005224:	4a2b      	ldr	r2, [pc, #172]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800522c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d10d      	bne.n	8005250 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005238:	e00a      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	2b04      	cmp	r3, #4
 800523e:	d102      	bne.n	8005246 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005240:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005242:	61bb      	str	r3, [r7, #24]
 8005244:	e004      	b.n	8005250 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	2b08      	cmp	r3, #8
 800524a:	d101      	bne.n	8005250 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800524c:	4b23      	ldr	r3, [pc, #140]	; (80052dc <HAL_RCC_GetSysClockFreq+0x114>)
 800524e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	2b0c      	cmp	r3, #12
 8005254:	d134      	bne.n	80052c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005256:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	f003 0303 	and.w	r3, r3, #3
 800525e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	2b02      	cmp	r3, #2
 8005264:	d003      	beq.n	800526e <HAL_RCC_GetSysClockFreq+0xa6>
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b03      	cmp	r3, #3
 800526a:	d003      	beq.n	8005274 <HAL_RCC_GetSysClockFreq+0xac>
 800526c:	e005      	b.n	800527a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800526e:	4b1a      	ldr	r3, [pc, #104]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8005270:	617b      	str	r3, [r7, #20]
      break;
 8005272:	e005      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005274:	4b19      	ldr	r3, [pc, #100]	; (80052dc <HAL_RCC_GetSysClockFreq+0x114>)
 8005276:	617b      	str	r3, [r7, #20]
      break;
 8005278:	e002      	b.n	8005280 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	617b      	str	r3, [r7, #20]
      break;
 800527e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005280:	4b13      	ldr	r3, [pc, #76]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	3301      	adds	r3, #1
 800528c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800528e:	4b10      	ldr	r3, [pc, #64]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	0a1b      	lsrs	r3, r3, #8
 8005294:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005298:	697a      	ldr	r2, [r7, #20]
 800529a:	fb03 f202 	mul.w	r2, r3, r2
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80052a6:	4b0a      	ldr	r3, [pc, #40]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	0e5b      	lsrs	r3, r3, #25
 80052ac:	f003 0303 	and.w	r3, r3, #3
 80052b0:	3301      	adds	r3, #1
 80052b2:	005b      	lsls	r3, r3, #1
 80052b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80052be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80052c0:	69bb      	ldr	r3, [r7, #24]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3724      	adds	r7, #36	; 0x24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	40021000 	.word	0x40021000
 80052d4:	0800e550 	.word	0x0800e550
 80052d8:	00f42400 	.word	0x00f42400
 80052dc:	007a1200 	.word	0x007a1200

080052e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e4:	4b03      	ldr	r3, [pc, #12]	; (80052f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80052e6:	681b      	ldr	r3, [r3, #0]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	46bd      	mov	sp, r7
 80052ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	20000008 	.word	0x20000008

080052f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80052fc:	f7ff fff0 	bl	80052e0 <HAL_RCC_GetHCLKFreq>
 8005300:	4602      	mov	r2, r0
 8005302:	4b06      	ldr	r3, [pc, #24]	; (800531c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	f003 0307 	and.w	r3, r3, #7
 800530c:	4904      	ldr	r1, [pc, #16]	; (8005320 <HAL_RCC_GetPCLK1Freq+0x28>)
 800530e:	5ccb      	ldrb	r3, [r1, r3]
 8005310:	f003 031f 	and.w	r3, r3, #31
 8005314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005318:	4618      	mov	r0, r3
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40021000 	.word	0x40021000
 8005320:	0800e548 	.word	0x0800e548

08005324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005328:	f7ff ffda 	bl	80052e0 <HAL_RCC_GetHCLKFreq>
 800532c:	4602      	mov	r2, r0
 800532e:	4b06      	ldr	r3, [pc, #24]	; (8005348 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	0adb      	lsrs	r3, r3, #11
 8005334:	f003 0307 	and.w	r3, r3, #7
 8005338:	4904      	ldr	r1, [pc, #16]	; (800534c <HAL_RCC_GetPCLK2Freq+0x28>)
 800533a:	5ccb      	ldrb	r3, [r1, r3]
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005344:	4618      	mov	r0, r3
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40021000 	.word	0x40021000
 800534c:	0800e548 	.word	0x0800e548

08005350 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005358:	2300      	movs	r3, #0
 800535a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800535c:	4b2a      	ldr	r3, [pc, #168]	; (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800535e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005368:	f7ff f922 	bl	80045b0 <HAL_PWREx_GetVoltageRange>
 800536c:	6178      	str	r0, [r7, #20]
 800536e:	e014      	b.n	800539a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005370:	4b25      	ldr	r3, [pc, #148]	; (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005374:	4a24      	ldr	r2, [pc, #144]	; (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005376:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800537a:	6593      	str	r3, [r2, #88]	; 0x58
 800537c:	4b22      	ldr	r3, [pc, #136]	; (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800537e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005380:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005388:	f7ff f912 	bl	80045b0 <HAL_PWREx_GetVoltageRange>
 800538c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800538e:	4b1e      	ldr	r3, [pc, #120]	; (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005392:	4a1d      	ldr	r2, [pc, #116]	; (8005408 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005398:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053a0:	d10b      	bne.n	80053ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b80      	cmp	r3, #128	; 0x80
 80053a6:	d919      	bls.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2ba0      	cmp	r3, #160	; 0xa0
 80053ac:	d902      	bls.n	80053b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053ae:	2302      	movs	r3, #2
 80053b0:	613b      	str	r3, [r7, #16]
 80053b2:	e013      	b.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053b4:	2301      	movs	r3, #1
 80053b6:	613b      	str	r3, [r7, #16]
 80053b8:	e010      	b.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b80      	cmp	r3, #128	; 0x80
 80053be:	d902      	bls.n	80053c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80053c0:	2303      	movs	r3, #3
 80053c2:	613b      	str	r3, [r7, #16]
 80053c4:	e00a      	b.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b80      	cmp	r3, #128	; 0x80
 80053ca:	d102      	bne.n	80053d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80053cc:	2302      	movs	r3, #2
 80053ce:	613b      	str	r3, [r7, #16]
 80053d0:	e004      	b.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b70      	cmp	r3, #112	; 0x70
 80053d6:	d101      	bne.n	80053dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80053d8:	2301      	movs	r3, #1
 80053da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80053dc:	4b0b      	ldr	r3, [pc, #44]	; (800540c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f023 0207 	bic.w	r2, r3, #7
 80053e4:	4909      	ldr	r1, [pc, #36]	; (800540c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80053ec:	4b07      	ldr	r3, [pc, #28]	; (800540c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0307 	and.w	r3, r3, #7
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d001      	beq.n	80053fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e000      	b.n	8005400 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80053fe:	2300      	movs	r3, #0
}
 8005400:	4618      	mov	r0, r3
 8005402:	3718      	adds	r7, #24
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40021000 	.word	0x40021000
 800540c:	40022000 	.word	0x40022000

08005410 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005418:	2300      	movs	r3, #0
 800541a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800541c:	2300      	movs	r3, #0
 800541e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005428:	2b00      	cmp	r3, #0
 800542a:	d041      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005430:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005434:	d02a      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005436:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800543a:	d824      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800543c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005440:	d008      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005442:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005446:	d81e      	bhi.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800544c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005450:	d010      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005452:	e018      	b.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005454:	4b86      	ldr	r3, [pc, #536]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	4a85      	ldr	r2, [pc, #532]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800545a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800545e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005460:	e015      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3304      	adds	r3, #4
 8005466:	2100      	movs	r1, #0
 8005468:	4618      	mov	r0, r3
 800546a:	f000 facb 	bl	8005a04 <RCCEx_PLLSAI1_Config>
 800546e:	4603      	mov	r3, r0
 8005470:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005472:	e00c      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3320      	adds	r3, #32
 8005478:	2100      	movs	r1, #0
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fbb6 	bl	8005bec <RCCEx_PLLSAI2_Config>
 8005480:	4603      	mov	r3, r0
 8005482:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005484:	e003      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	74fb      	strb	r3, [r7, #19]
      break;
 800548a:	e000      	b.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800548c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800548e:	7cfb      	ldrb	r3, [r7, #19]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d10b      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005494:	4b76      	ldr	r3, [pc, #472]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054a2:	4973      	ldr	r1, [pc, #460]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80054aa:	e001      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ac:	7cfb      	ldrb	r3, [r7, #19]
 80054ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d041      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054c4:	d02a      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80054c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80054ca:	d824      	bhi.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054d0:	d008      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80054d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054d6:	d81e      	bhi.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00a      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80054dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054e0:	d010      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80054e2:	e018      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054e4:	4b62      	ldr	r3, [pc, #392]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	4a61      	ldr	r2, [pc, #388]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80054f0:	e015      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	3304      	adds	r3, #4
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f000 fa83 	bl	8005a04 <RCCEx_PLLSAI1_Config>
 80054fe:	4603      	mov	r3, r0
 8005500:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005502:	e00c      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3320      	adds	r3, #32
 8005508:	2100      	movs	r1, #0
 800550a:	4618      	mov	r0, r3
 800550c:	f000 fb6e 	bl	8005bec <RCCEx_PLLSAI2_Config>
 8005510:	4603      	mov	r3, r0
 8005512:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005514:	e003      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	74fb      	strb	r3, [r7, #19]
      break;
 800551a:	e000      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800551c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800551e:	7cfb      	ldrb	r3, [r7, #19]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10b      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005524:	4b52      	ldr	r3, [pc, #328]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005532:	494f      	ldr	r1, [pc, #316]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800553a:	e001      	b.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800553c:	7cfb      	ldrb	r3, [r7, #19]
 800553e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 80a0 	beq.w	800568e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800554e:	2300      	movs	r3, #0
 8005550:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005552:	4b47      	ldr	r3, [pc, #284]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800555e:	2301      	movs	r3, #1
 8005560:	e000      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005562:	2300      	movs	r3, #0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d00d      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005568:	4b41      	ldr	r3, [pc, #260]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800556a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556c:	4a40      	ldr	r2, [pc, #256]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800556e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005572:	6593      	str	r3, [r2, #88]	; 0x58
 8005574:	4b3e      	ldr	r3, [pc, #248]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005578:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800557c:	60bb      	str	r3, [r7, #8]
 800557e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005580:	2301      	movs	r3, #1
 8005582:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005584:	4b3b      	ldr	r3, [pc, #236]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a3a      	ldr	r2, [pc, #232]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800558a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800558e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005590:	f7fc ff50 	bl	8002434 <HAL_GetTick>
 8005594:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005596:	e009      	b.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005598:	f7fc ff4c 	bl	8002434 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d902      	bls.n	80055ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	74fb      	strb	r3, [r7, #19]
        break;
 80055aa:	e005      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80055ac:	4b31      	ldr	r3, [pc, #196]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0ef      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80055b8:	7cfb      	ldrb	r3, [r7, #19]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d15c      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055be:	4b2c      	ldr	r3, [pc, #176]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01f      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d019      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055dc:	4b24      	ldr	r3, [pc, #144]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055e8:	4b21      	ldr	r3, [pc, #132]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ee:	4a20      	ldr	r2, [pc, #128]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055f8:	4b1d      	ldr	r3, [pc, #116]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055fe:	4a1c      	ldr	r2, [pc, #112]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005600:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005608:	4a19      	ldr	r2, [pc, #100]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d016      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800561a:	f7fc ff0b 	bl	8002434 <HAL_GetTick>
 800561e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005620:	e00b      	b.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005622:	f7fc ff07 	bl	8002434 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005630:	4293      	cmp	r3, r2
 8005632:	d902      	bls.n	800563a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	74fb      	strb	r3, [r7, #19]
            break;
 8005638:	e006      	b.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800563a:	4b0d      	ldr	r3, [pc, #52]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800563c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0ec      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005648:	7cfb      	ldrb	r3, [r7, #19]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10c      	bne.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800564e:	4b08      	ldr	r3, [pc, #32]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800565e:	4904      	ldr	r1, [pc, #16]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005666:	e009      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005668:	7cfb      	ldrb	r3, [r7, #19]
 800566a:	74bb      	strb	r3, [r7, #18]
 800566c:	e006      	b.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800566e:	bf00      	nop
 8005670:	40021000 	.word	0x40021000
 8005674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005678:	7cfb      	ldrb	r3, [r7, #19]
 800567a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800567c:	7c7b      	ldrb	r3, [r7, #17]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d105      	bne.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005682:	4b9e      	ldr	r3, [pc, #632]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005686:	4a9d      	ldr	r2, [pc, #628]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800568c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800569a:	4b98      	ldr	r3, [pc, #608]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a0:	f023 0203 	bic.w	r2, r3, #3
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a8:	4994      	ldr	r1, [pc, #592]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d00a      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056bc:	4b8f      	ldr	r3, [pc, #572]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c2:	f023 020c 	bic.w	r2, r3, #12
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056ca:	498c      	ldr	r1, [pc, #560]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0304 	and.w	r3, r3, #4
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056de:	4b87      	ldr	r3, [pc, #540]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	4983      	ldr	r1, [pc, #524]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0308 	and.w	r3, r3, #8
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00a      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005700:	4b7e      	ldr	r3, [pc, #504]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005706:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800570e:	497b      	ldr	r1, [pc, #492]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005710:	4313      	orrs	r3, r2
 8005712:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 0310 	and.w	r3, r3, #16
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00a      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005722:	4b76      	ldr	r3, [pc, #472]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005728:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005730:	4972      	ldr	r1, [pc, #456]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0320 	and.w	r3, r3, #32
 8005740:	2b00      	cmp	r3, #0
 8005742:	d00a      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005744:	4b6d      	ldr	r3, [pc, #436]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005752:	496a      	ldr	r1, [pc, #424]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005754:	4313      	orrs	r3, r2
 8005756:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00a      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005766:	4b65      	ldr	r3, [pc, #404]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005774:	4961      	ldr	r1, [pc, #388]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005784:	2b00      	cmp	r3, #0
 8005786:	d00a      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005788:	4b5c      	ldr	r3, [pc, #368]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800578a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800578e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005796:	4959      	ldr	r1, [pc, #356]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005798:	4313      	orrs	r3, r2
 800579a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00a      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80057aa:	4b54      	ldr	r3, [pc, #336]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b8:	4950      	ldr	r1, [pc, #320]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d00a      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80057cc:	4b4b      	ldr	r3, [pc, #300]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057da:	4948      	ldr	r1, [pc, #288]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00a      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80057ee:	4b43      	ldr	r3, [pc, #268]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fc:	493f      	ldr	r1, [pc, #252]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800580c:	2b00      	cmp	r3, #0
 800580e:	d028      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005810:	4b3a      	ldr	r3, [pc, #232]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005816:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800581e:	4937      	ldr	r1, [pc, #220]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005820:	4313      	orrs	r3, r2
 8005822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800582a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800582e:	d106      	bne.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005830:	4b32      	ldr	r3, [pc, #200]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	4a31      	ldr	r2, [pc, #196]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800583a:	60d3      	str	r3, [r2, #12]
 800583c:	e011      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005842:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005846:	d10c      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	3304      	adds	r3, #4
 800584c:	2101      	movs	r1, #1
 800584e:	4618      	mov	r0, r3
 8005850:	f000 f8d8 	bl	8005a04 <RCCEx_PLLSAI1_Config>
 8005854:	4603      	mov	r3, r0
 8005856:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005858:	7cfb      	ldrb	r3, [r7, #19]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d001      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800585e:	7cfb      	ldrb	r3, [r7, #19]
 8005860:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d028      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800586e:	4b23      	ldr	r3, [pc, #140]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005874:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800587c:	491f      	ldr	r1, [pc, #124]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800587e:	4313      	orrs	r3, r2
 8005880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005888:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800588c:	d106      	bne.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800588e:	4b1b      	ldr	r3, [pc, #108]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	4a1a      	ldr	r2, [pc, #104]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005894:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005898:	60d3      	str	r3, [r2, #12]
 800589a:	e011      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80058a4:	d10c      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3304      	adds	r3, #4
 80058aa:	2101      	movs	r1, #1
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 f8a9 	bl	8005a04 <RCCEx_PLLSAI1_Config>
 80058b2:	4603      	mov	r3, r0
 80058b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80058b6:	7cfb      	ldrb	r3, [r7, #19]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80058bc:	7cfb      	ldrb	r3, [r7, #19]
 80058be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d02b      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058cc:	4b0b      	ldr	r3, [pc, #44]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058da:	4908      	ldr	r1, [pc, #32]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058ea:	d109      	bne.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058ec:	4b03      	ldr	r3, [pc, #12]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	4a02      	ldr	r2, [pc, #8]	; (80058fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058f6:	60d3      	str	r3, [r2, #12]
 80058f8:	e014      	b.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80058fa:	bf00      	nop
 80058fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005904:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005908:	d10c      	bne.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3304      	adds	r3, #4
 800590e:	2101      	movs	r1, #1
 8005910:	4618      	mov	r0, r3
 8005912:	f000 f877 	bl	8005a04 <RCCEx_PLLSAI1_Config>
 8005916:	4603      	mov	r3, r0
 8005918:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800591a:	7cfb      	ldrb	r3, [r7, #19]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005920:	7cfb      	ldrb	r3, [r7, #19]
 8005922:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d02f      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005930:	4b2b      	ldr	r3, [pc, #172]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005936:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800593e:	4928      	ldr	r1, [pc, #160]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800594a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800594e:	d10d      	bne.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	3304      	adds	r3, #4
 8005954:	2102      	movs	r1, #2
 8005956:	4618      	mov	r0, r3
 8005958:	f000 f854 	bl	8005a04 <RCCEx_PLLSAI1_Config>
 800595c:	4603      	mov	r3, r0
 800595e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005960:	7cfb      	ldrb	r3, [r7, #19]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d014      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005966:	7cfb      	ldrb	r3, [r7, #19]
 8005968:	74bb      	strb	r3, [r7, #18]
 800596a:	e011      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005970:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005974:	d10c      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	3320      	adds	r3, #32
 800597a:	2102      	movs	r1, #2
 800597c:	4618      	mov	r0, r3
 800597e:	f000 f935 	bl	8005bec <RCCEx_PLLSAI2_Config>
 8005982:	4603      	mov	r3, r0
 8005984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005986:	7cfb      	ldrb	r3, [r7, #19]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800598c:	7cfb      	ldrb	r3, [r7, #19]
 800598e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800599c:	4b10      	ldr	r3, [pc, #64]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059aa:	490d      	ldr	r1, [pc, #52]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d00b      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80059be:	4b08      	ldr	r3, [pc, #32]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059ce:	4904      	ldr	r1, [pc, #16]	; (80059e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80059d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	40021000 	.word	0x40021000

080059e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80059e4:	b480      	push	{r7}
 80059e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80059e8:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a04      	ldr	r2, [pc, #16]	; (8005a00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80059ee:	f043 0304 	orr.w	r3, r3, #4
 80059f2:	6013      	str	r3, [r2, #0]
}
 80059f4:	bf00      	nop
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40021000 	.word	0x40021000

08005a04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a12:	4b75      	ldr	r3, [pc, #468]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	f003 0303 	and.w	r3, r3, #3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d018      	beq.n	8005a50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005a1e:	4b72      	ldr	r3, [pc, #456]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a20:	68db      	ldr	r3, [r3, #12]
 8005a22:	f003 0203 	and.w	r2, r3, #3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d10d      	bne.n	8005a4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
       ||
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d009      	beq.n	8005a4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005a36:	4b6c      	ldr	r3, [pc, #432]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	091b      	lsrs	r3, r3, #4
 8005a3c:	f003 0307 	and.w	r3, r3, #7
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
       ||
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d047      	beq.n	8005ada <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	73fb      	strb	r3, [r7, #15]
 8005a4e:	e044      	b.n	8005ada <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b03      	cmp	r3, #3
 8005a56:	d018      	beq.n	8005a8a <RCCEx_PLLSAI1_Config+0x86>
 8005a58:	2b03      	cmp	r3, #3
 8005a5a:	d825      	bhi.n	8005aa8 <RCCEx_PLLSAI1_Config+0xa4>
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d002      	beq.n	8005a66 <RCCEx_PLLSAI1_Config+0x62>
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d009      	beq.n	8005a78 <RCCEx_PLLSAI1_Config+0x74>
 8005a64:	e020      	b.n	8005aa8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005a66:	4b60      	ldr	r3, [pc, #384]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0302 	and.w	r3, r3, #2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d11d      	bne.n	8005aae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a76:	e01a      	b.n	8005aae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005a78:	4b5b      	ldr	r3, [pc, #364]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d116      	bne.n	8005ab2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a88:	e013      	b.n	8005ab2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005a8a:	4b57      	ldr	r3, [pc, #348]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10f      	bne.n	8005ab6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a96:	4b54      	ldr	r3, [pc, #336]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005aa6:	e006      	b.n	8005ab6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8005aac:	e004      	b.n	8005ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005aae:	bf00      	nop
 8005ab0:	e002      	b.n	8005ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ab2:	bf00      	nop
 8005ab4:	e000      	b.n	8005ab8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005ab6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d10d      	bne.n	8005ada <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005abe:	4b4a      	ldr	r3, [pc, #296]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6819      	ldr	r1, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	3b01      	subs	r3, #1
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	430b      	orrs	r3, r1
 8005ad4:	4944      	ldr	r1, [pc, #272]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d17d      	bne.n	8005bdc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ae0:	4b41      	ldr	r3, [pc, #260]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a40      	ldr	r2, [pc, #256]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ae6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005aea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005aec:	f7fc fca2 	bl	8002434 <HAL_GetTick>
 8005af0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005af2:	e009      	b.n	8005b08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005af4:	f7fc fc9e 	bl	8002434 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	2b02      	cmp	r3, #2
 8005b00:	d902      	bls.n	8005b08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b02:	2303      	movs	r3, #3
 8005b04:	73fb      	strb	r3, [r7, #15]
        break;
 8005b06:	e005      	b.n	8005b14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005b08:	4b37      	ldr	r3, [pc, #220]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1ef      	bne.n	8005af4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d160      	bne.n	8005bdc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d111      	bne.n	8005b44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b20:	4b31      	ldr	r3, [pc, #196]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6892      	ldr	r2, [r2, #8]
 8005b30:	0211      	lsls	r1, r2, #8
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	68d2      	ldr	r2, [r2, #12]
 8005b36:	0912      	lsrs	r2, r2, #4
 8005b38:	0452      	lsls	r2, r2, #17
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	492a      	ldr	r1, [pc, #168]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	610b      	str	r3, [r1, #16]
 8005b42:	e027      	b.n	8005b94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d112      	bne.n	8005b70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b4a:	4b27      	ldr	r3, [pc, #156]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005b52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b56:	687a      	ldr	r2, [r7, #4]
 8005b58:	6892      	ldr	r2, [r2, #8]
 8005b5a:	0211      	lsls	r1, r2, #8
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	6912      	ldr	r2, [r2, #16]
 8005b60:	0852      	lsrs	r2, r2, #1
 8005b62:	3a01      	subs	r2, #1
 8005b64:	0552      	lsls	r2, r2, #21
 8005b66:	430a      	orrs	r2, r1
 8005b68:	491f      	ldr	r1, [pc, #124]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	610b      	str	r3, [r1, #16]
 8005b6e:	e011      	b.n	8005b94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005b70:	4b1d      	ldr	r3, [pc, #116]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005b78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6892      	ldr	r2, [r2, #8]
 8005b80:	0211      	lsls	r1, r2, #8
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	6952      	ldr	r2, [r2, #20]
 8005b86:	0852      	lsrs	r2, r2, #1
 8005b88:	3a01      	subs	r2, #1
 8005b8a:	0652      	lsls	r2, r2, #25
 8005b8c:	430a      	orrs	r2, r1
 8005b8e:	4916      	ldr	r1, [pc, #88]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b90:	4313      	orrs	r3, r2
 8005b92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005b94:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a13      	ldr	r2, [pc, #76]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005b9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba0:	f7fc fc48 	bl	8002434 <HAL_GetTick>
 8005ba4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ba6:	e009      	b.n	8005bbc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ba8:	f7fc fc44 	bl	8002434 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d902      	bls.n	8005bbc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	73fb      	strb	r3, [r7, #15]
          break;
 8005bba:	e005      	b.n	8005bc8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005bbc:	4b0a      	ldr	r3, [pc, #40]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d0ef      	beq.n	8005ba8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d106      	bne.n	8005bdc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005bce:	4b06      	ldr	r3, [pc, #24]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bd0:	691a      	ldr	r2, [r3, #16]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	4904      	ldr	r1, [pc, #16]	; (8005be8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3710      	adds	r7, #16
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	40021000 	.word	0x40021000

08005bec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bfa:	4b6a      	ldr	r3, [pc, #424]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d018      	beq.n	8005c38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005c06:	4b67      	ldr	r3, [pc, #412]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	f003 0203 	and.w	r2, r3, #3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d10d      	bne.n	8005c32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
       ||
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005c1e:	4b61      	ldr	r3, [pc, #388]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	091b      	lsrs	r3, r3, #4
 8005c24:	f003 0307 	and.w	r3, r3, #7
 8005c28:	1c5a      	adds	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
       ||
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d047      	beq.n	8005cc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	73fb      	strb	r3, [r7, #15]
 8005c36:	e044      	b.n	8005cc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2b03      	cmp	r3, #3
 8005c3e:	d018      	beq.n	8005c72 <RCCEx_PLLSAI2_Config+0x86>
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d825      	bhi.n	8005c90 <RCCEx_PLLSAI2_Config+0xa4>
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d002      	beq.n	8005c4e <RCCEx_PLLSAI2_Config+0x62>
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d009      	beq.n	8005c60 <RCCEx_PLLSAI2_Config+0x74>
 8005c4c:	e020      	b.n	8005c90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c4e:	4b55      	ldr	r3, [pc, #340]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d11d      	bne.n	8005c96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c5e:	e01a      	b.n	8005c96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c60:	4b50      	ldr	r3, [pc, #320]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d116      	bne.n	8005c9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c70:	e013      	b.n	8005c9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c72:	4b4c      	ldr	r3, [pc, #304]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10f      	bne.n	8005c9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c7e:	4b49      	ldr	r3, [pc, #292]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d109      	bne.n	8005c9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c8e:	e006      	b.n	8005c9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
      break;
 8005c94:	e004      	b.n	8005ca0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c96:	bf00      	nop
 8005c98:	e002      	b.n	8005ca0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c9a:	bf00      	nop
 8005c9c:	e000      	b.n	8005ca0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005c9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005ca0:	7bfb      	ldrb	r3, [r7, #15]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10d      	bne.n	8005cc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005ca6:	4b3f      	ldr	r3, [pc, #252]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6819      	ldr	r1, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	430b      	orrs	r3, r1
 8005cbc:	4939      	ldr	r1, [pc, #228]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005cc2:	7bfb      	ldrb	r3, [r7, #15]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d167      	bne.n	8005d98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005cc8:	4b36      	ldr	r3, [pc, #216]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a35      	ldr	r2, [pc, #212]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd4:	f7fc fbae 	bl	8002434 <HAL_GetTick>
 8005cd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cda:	e009      	b.n	8005cf0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005cdc:	f7fc fbaa 	bl	8002434 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d902      	bls.n	8005cf0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	73fb      	strb	r3, [r7, #15]
        break;
 8005cee:	e005      	b.n	8005cfc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005cf0:	4b2c      	ldr	r3, [pc, #176]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1ef      	bne.n	8005cdc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d14a      	bne.n	8005d98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d111      	bne.n	8005d2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d08:	4b26      	ldr	r3, [pc, #152]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005d10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6892      	ldr	r2, [r2, #8]
 8005d18:	0211      	lsls	r1, r2, #8
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	68d2      	ldr	r2, [r2, #12]
 8005d1e:	0912      	lsrs	r2, r2, #4
 8005d20:	0452      	lsls	r2, r2, #17
 8005d22:	430a      	orrs	r2, r1
 8005d24:	491f      	ldr	r1, [pc, #124]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	614b      	str	r3, [r1, #20]
 8005d2a:	e011      	b.n	8005d50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005d2c:	4b1d      	ldr	r3, [pc, #116]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d34:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	6892      	ldr	r2, [r2, #8]
 8005d3c:	0211      	lsls	r1, r2, #8
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6912      	ldr	r2, [r2, #16]
 8005d42:	0852      	lsrs	r2, r2, #1
 8005d44:	3a01      	subs	r2, #1
 8005d46:	0652      	lsls	r2, r2, #25
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	4916      	ldr	r1, [pc, #88]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005d50:	4b14      	ldr	r3, [pc, #80]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a13      	ldr	r2, [pc, #76]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5c:	f7fc fb6a 	bl	8002434 <HAL_GetTick>
 8005d60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d62:	e009      	b.n	8005d78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005d64:	f7fc fb66 	bl	8002434 <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d902      	bls.n	8005d78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	73fb      	strb	r3, [r7, #15]
          break;
 8005d76:	e005      	b.n	8005d84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d0ef      	beq.n	8005d64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005d8a:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d8c:	695a      	ldr	r2, [r3, #20]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	4904      	ldr	r1, [pc, #16]	; (8005da4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
 8005da2:	bf00      	nop
 8005da4:	40021000 	.word	0x40021000

08005da8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e095      	b.n	8005ee6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d108      	bne.n	8005dd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dca:	d009      	beq.n	8005de0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	61da      	str	r2, [r3, #28]
 8005dd2:	e005      	b.n	8005de0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dec:	b2db      	uxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f7fc f85e 	bl	8001ebc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2202      	movs	r2, #2
 8005e04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e20:	d902      	bls.n	8005e28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005e22:	2300      	movs	r3, #0
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	e002      	b.n	8005e2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005e36:	d007      	beq.n	8005e48 <HAL_SPI_Init+0xa0>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e40:	d002      	beq.n	8005e48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005e58:	431a      	orrs	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	695b      	ldr	r3, [r3, #20]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	431a      	orrs	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e76:	431a      	orrs	r2, r3
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	69db      	ldr	r3, [r3, #28]
 8005e7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e80:	431a      	orrs	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8a:	ea42 0103 	orr.w	r1, r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	0c1b      	lsrs	r3, r3, #16
 8005ea4:	f003 0204 	and.w	r2, r3, #4
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	f003 0310 	and.w	r3, r3, #16
 8005eb0:	431a      	orrs	r2, r3
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005ec4:	ea42 0103 	orr.w	r1, r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	430a      	orrs	r2, r1
 8005ed4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b082      	sub	sp, #8
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d101      	bne.n	8005f00 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	e049      	b.n	8005f94 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d106      	bne.n	8005f1a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7fc f815 	bl	8001f44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	3304      	adds	r3, #4
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	f000 f9d9 	bl	80062e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2201      	movs	r2, #1
 8005f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2201      	movs	r2, #1
 8005f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d001      	beq.n	8005fb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e04f      	b.n	8006054 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f042 0201 	orr.w	r2, r2, #1
 8005fca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a23      	ldr	r2, [pc, #140]	; (8006060 <HAL_TIM_Base_Start_IT+0xc4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d01d      	beq.n	8006012 <HAL_TIM_Base_Start_IT+0x76>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fde:	d018      	beq.n	8006012 <HAL_TIM_Base_Start_IT+0x76>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1f      	ldr	r2, [pc, #124]	; (8006064 <HAL_TIM_Base_Start_IT+0xc8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d013      	beq.n	8006012 <HAL_TIM_Base_Start_IT+0x76>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1e      	ldr	r2, [pc, #120]	; (8006068 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00e      	beq.n	8006012 <HAL_TIM_Base_Start_IT+0x76>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1c      	ldr	r2, [pc, #112]	; (800606c <HAL_TIM_Base_Start_IT+0xd0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d009      	beq.n	8006012 <HAL_TIM_Base_Start_IT+0x76>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1b      	ldr	r2, [pc, #108]	; (8006070 <HAL_TIM_Base_Start_IT+0xd4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d004      	beq.n	8006012 <HAL_TIM_Base_Start_IT+0x76>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a19      	ldr	r2, [pc, #100]	; (8006074 <HAL_TIM_Base_Start_IT+0xd8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d115      	bne.n	800603e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	4b17      	ldr	r3, [pc, #92]	; (8006078 <HAL_TIM_Base_Start_IT+0xdc>)
 800601a:	4013      	ands	r3, r2
 800601c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b06      	cmp	r3, #6
 8006022:	d015      	beq.n	8006050 <HAL_TIM_Base_Start_IT+0xb4>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800602a:	d011      	beq.n	8006050 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603c:	e008      	b.n	8006050 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f042 0201 	orr.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	e000      	b.n	8006052 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006050:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3714      	adds	r7, #20
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	40012c00 	.word	0x40012c00
 8006064:	40000400 	.word	0x40000400
 8006068:	40000800 	.word	0x40000800
 800606c:	40000c00 	.word	0x40000c00
 8006070:	40013400 	.word	0x40013400
 8006074:	40014000 	.word	0x40014000
 8006078:	00010007 	.word	0x00010007

0800607c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b084      	sub	sp, #16
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68db      	ldr	r3, [r3, #12]
 800608a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f003 0302 	and.w	r3, r3, #2
 800609a:	2b00      	cmp	r3, #0
 800609c:	d020      	beq.n	80060e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d01b      	beq.n	80060e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f06f 0202 	mvn.w	r2, #2
 80060b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f8ee 	bl	80062a8 <HAL_TIM_IC_CaptureCallback>
 80060cc:	e005      	b.n	80060da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f8e0 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f8f1 	bl	80062bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2200      	movs	r2, #0
 80060de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f003 0304 	and.w	r3, r3, #4
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d020      	beq.n	800612c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d01b      	beq.n	800612c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0204 	mvn.w	r2, #4
 80060fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2202      	movs	r2, #2
 8006102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f8c8 	bl	80062a8 <HAL_TIM_IC_CaptureCallback>
 8006118:	e005      	b.n	8006126 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f8ba 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f8cb 	bl	80062bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d020      	beq.n	8006178 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f003 0308 	and.w	r3, r3, #8
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01b      	beq.n	8006178 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f06f 0208 	mvn.w	r2, #8
 8006148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2204      	movs	r2, #4
 800614e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	69db      	ldr	r3, [r3, #28]
 8006156:	f003 0303 	and.w	r3, r3, #3
 800615a:	2b00      	cmp	r3, #0
 800615c:	d003      	beq.n	8006166 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f8a2 	bl	80062a8 <HAL_TIM_IC_CaptureCallback>
 8006164:	e005      	b.n	8006172 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f894 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f8a5 	bl	80062bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	f003 0310 	and.w	r3, r3, #16
 800617e:	2b00      	cmp	r3, #0
 8006180:	d020      	beq.n	80061c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	2b00      	cmp	r3, #0
 800618a:	d01b      	beq.n	80061c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f06f 0210 	mvn.w	r2, #16
 8006194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2208      	movs	r2, #8
 800619a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f87c 	bl	80062a8 <HAL_TIM_IC_CaptureCallback>
 80061b0:	e005      	b.n	80061be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f86e 	bl	8006294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f87f 	bl	80062bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00c      	beq.n	80061e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f003 0301 	and.w	r3, r3, #1
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f06f 0201 	mvn.w	r2, #1
 80061e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f84c 	bl	8006280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00c      	beq.n	800620c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d007      	beq.n	800620c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f998 	bl	800653c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00c      	beq.n	8006230 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800621c:	2b00      	cmp	r3, #0
 800621e:	d007      	beq.n	8006230 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f990 	bl	8006550 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00c      	beq.n	8006254 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006240:	2b00      	cmp	r3, #0
 8006242:	d007      	beq.n	8006254 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800624c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f83e 	bl	80062d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00c      	beq.n	8006278 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	f003 0320 	and.w	r3, r3, #32
 8006264:	2b00      	cmp	r3, #0
 8006266:	d007      	beq.n	8006278 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f06f 0220 	mvn.w	r2, #32
 8006270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f958 	bl	8006528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006278:	bf00      	nop
 800627a:	3710      	adds	r7, #16
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b083      	sub	sp, #12
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062b0:	bf00      	nop
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a40      	ldr	r2, [pc, #256]	; (80063f8 <TIM_Base_SetConfig+0x114>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006302:	d00f      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a3d      	ldr	r2, [pc, #244]	; (80063fc <TIM_Base_SetConfig+0x118>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d00b      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a3c      	ldr	r2, [pc, #240]	; (8006400 <TIM_Base_SetConfig+0x11c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d007      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a3b      	ldr	r2, [pc, #236]	; (8006404 <TIM_Base_SetConfig+0x120>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d003      	beq.n	8006324 <TIM_Base_SetConfig+0x40>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a3a      	ldr	r2, [pc, #232]	; (8006408 <TIM_Base_SetConfig+0x124>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d108      	bne.n	8006336 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800632a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	4313      	orrs	r3, r2
 8006334:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a2f      	ldr	r2, [pc, #188]	; (80063f8 <TIM_Base_SetConfig+0x114>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d01f      	beq.n	800637e <TIM_Base_SetConfig+0x9a>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006344:	d01b      	beq.n	800637e <TIM_Base_SetConfig+0x9a>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a2c      	ldr	r2, [pc, #176]	; (80063fc <TIM_Base_SetConfig+0x118>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d017      	beq.n	800637e <TIM_Base_SetConfig+0x9a>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a2b      	ldr	r2, [pc, #172]	; (8006400 <TIM_Base_SetConfig+0x11c>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d013      	beq.n	800637e <TIM_Base_SetConfig+0x9a>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	4a2a      	ldr	r2, [pc, #168]	; (8006404 <TIM_Base_SetConfig+0x120>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d00f      	beq.n	800637e <TIM_Base_SetConfig+0x9a>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	4a29      	ldr	r2, [pc, #164]	; (8006408 <TIM_Base_SetConfig+0x124>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00b      	beq.n	800637e <TIM_Base_SetConfig+0x9a>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	4a28      	ldr	r2, [pc, #160]	; (800640c <TIM_Base_SetConfig+0x128>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d007      	beq.n	800637e <TIM_Base_SetConfig+0x9a>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a27      	ldr	r2, [pc, #156]	; (8006410 <TIM_Base_SetConfig+0x12c>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d003      	beq.n	800637e <TIM_Base_SetConfig+0x9a>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a26      	ldr	r2, [pc, #152]	; (8006414 <TIM_Base_SetConfig+0x130>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d108      	bne.n	8006390 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006384:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	695b      	ldr	r3, [r3, #20]
 800639a:	4313      	orrs	r3, r2
 800639c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a10      	ldr	r2, [pc, #64]	; (80063f8 <TIM_Base_SetConfig+0x114>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d00f      	beq.n	80063dc <TIM_Base_SetConfig+0xf8>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	4a12      	ldr	r2, [pc, #72]	; (8006408 <TIM_Base_SetConfig+0x124>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d00b      	beq.n	80063dc <TIM_Base_SetConfig+0xf8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a11      	ldr	r2, [pc, #68]	; (800640c <TIM_Base_SetConfig+0x128>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d007      	beq.n	80063dc <TIM_Base_SetConfig+0xf8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a10      	ldr	r2, [pc, #64]	; (8006410 <TIM_Base_SetConfig+0x12c>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d003      	beq.n	80063dc <TIM_Base_SetConfig+0xf8>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	4a0f      	ldr	r2, [pc, #60]	; (8006414 <TIM_Base_SetConfig+0x130>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d103      	bne.n	80063e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	615a      	str	r2, [r3, #20]
}
 80063ea:	bf00      	nop
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	40012c00 	.word	0x40012c00
 80063fc:	40000400 	.word	0x40000400
 8006400:	40000800 	.word	0x40000800
 8006404:	40000c00 	.word	0x40000c00
 8006408:	40013400 	.word	0x40013400
 800640c:	40014000 	.word	0x40014000
 8006410:	40014400 	.word	0x40014400
 8006414:	40014800 	.word	0x40014800

08006418 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006418:	b480      	push	{r7}
 800641a:	b085      	sub	sp, #20
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
 8006420:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006428:	2b01      	cmp	r3, #1
 800642a:	d101      	bne.n	8006430 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800642c:	2302      	movs	r3, #2
 800642e:	e068      	b.n	8006502 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2202      	movs	r2, #2
 800643c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a2e      	ldr	r2, [pc, #184]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d004      	beq.n	8006464 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a2d      	ldr	r2, [pc, #180]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d108      	bne.n	8006476 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800646a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800647c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	4313      	orrs	r3, r2
 8006486:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a1e      	ldr	r2, [pc, #120]	; (8006510 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d01d      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064a2:	d018      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1b      	ldr	r2, [pc, #108]	; (8006518 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d013      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1a      	ldr	r2, [pc, #104]	; (800651c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d00e      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a18      	ldr	r2, [pc, #96]	; (8006520 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d009      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a13      	ldr	r2, [pc, #76]	; (8006514 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d004      	beq.n	80064d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a14      	ldr	r2, [pc, #80]	; (8006524 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d10c      	bne.n	80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	40012c00 	.word	0x40012c00
 8006514:	40013400 	.word	0x40013400
 8006518:	40000400 	.word	0x40000400
 800651c:	40000800 	.word	0x40000800
 8006520:	40000c00 	.word	0x40000c00
 8006524:	40014000 	.word	0x40014000

08006528 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006530:	bf00      	nop
 8006532:	370c      	adds	r7, #12
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006544:	bf00      	nop
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006550:	b480      	push	{r7}
 8006552:	b083      	sub	sp, #12
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e040      	b.n	80065f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800657a:	2b00      	cmp	r3, #0
 800657c:	d106      	bne.n	800658c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7fb fd02 	bl	8001f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2224      	movs	r2, #36	; 0x24
 8006590:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f022 0201 	bic.w	r2, r2, #1
 80065a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d002      	beq.n	80065b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 fae0 	bl	8006b70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f825 	bl	8006600 <UART_SetConfig>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e01b      	b.n	80065f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689a      	ldr	r2, [r3, #8]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0201 	orr.w	r2, r2, #1
 80065ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 fb5f 	bl	8006cb4 <UART_CheckIdleState>
 80065f6:	4603      	mov	r3, r0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006604:	b08a      	sub	sp, #40	; 0x28
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	689a      	ldr	r2, [r3, #8]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	431a      	orrs	r2, r3
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	431a      	orrs	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	69db      	ldr	r3, [r3, #28]
 8006624:	4313      	orrs	r3, r2
 8006626:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	4ba4      	ldr	r3, [pc, #656]	; (80068c0 <UART_SetConfig+0x2c0>)
 8006630:	4013      	ands	r3, r2
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	6812      	ldr	r2, [r2, #0]
 8006636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006638:	430b      	orrs	r3, r1
 800663a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	68da      	ldr	r2, [r3, #12]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a99      	ldr	r2, [pc, #612]	; (80068c4 <UART_SetConfig+0x2c4>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d004      	beq.n	800666c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006668:	4313      	orrs	r3, r2
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	689b      	ldr	r3, [r3, #8]
 8006672:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800667c:	430a      	orrs	r2, r1
 800667e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a90      	ldr	r2, [pc, #576]	; (80068c8 <UART_SetConfig+0x2c8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d126      	bne.n	80066d8 <UART_SetConfig+0xd8>
 800668a:	4b90      	ldr	r3, [pc, #576]	; (80068cc <UART_SetConfig+0x2cc>)
 800668c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006690:	f003 0303 	and.w	r3, r3, #3
 8006694:	2b03      	cmp	r3, #3
 8006696:	d81b      	bhi.n	80066d0 <UART_SetConfig+0xd0>
 8006698:	a201      	add	r2, pc, #4	; (adr r2, 80066a0 <UART_SetConfig+0xa0>)
 800669a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669e:	bf00      	nop
 80066a0:	080066b1 	.word	0x080066b1
 80066a4:	080066c1 	.word	0x080066c1
 80066a8:	080066b9 	.word	0x080066b9
 80066ac:	080066c9 	.word	0x080066c9
 80066b0:	2301      	movs	r3, #1
 80066b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066b6:	e116      	b.n	80068e6 <UART_SetConfig+0x2e6>
 80066b8:	2302      	movs	r3, #2
 80066ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066be:	e112      	b.n	80068e6 <UART_SetConfig+0x2e6>
 80066c0:	2304      	movs	r3, #4
 80066c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c6:	e10e      	b.n	80068e6 <UART_SetConfig+0x2e6>
 80066c8:	2308      	movs	r3, #8
 80066ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ce:	e10a      	b.n	80068e6 <UART_SetConfig+0x2e6>
 80066d0:	2310      	movs	r3, #16
 80066d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d6:	e106      	b.n	80068e6 <UART_SetConfig+0x2e6>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a7c      	ldr	r2, [pc, #496]	; (80068d0 <UART_SetConfig+0x2d0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d138      	bne.n	8006754 <UART_SetConfig+0x154>
 80066e2:	4b7a      	ldr	r3, [pc, #488]	; (80068cc <UART_SetConfig+0x2cc>)
 80066e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e8:	f003 030c 	and.w	r3, r3, #12
 80066ec:	2b0c      	cmp	r3, #12
 80066ee:	d82d      	bhi.n	800674c <UART_SetConfig+0x14c>
 80066f0:	a201      	add	r2, pc, #4	; (adr r2, 80066f8 <UART_SetConfig+0xf8>)
 80066f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f6:	bf00      	nop
 80066f8:	0800672d 	.word	0x0800672d
 80066fc:	0800674d 	.word	0x0800674d
 8006700:	0800674d 	.word	0x0800674d
 8006704:	0800674d 	.word	0x0800674d
 8006708:	0800673d 	.word	0x0800673d
 800670c:	0800674d 	.word	0x0800674d
 8006710:	0800674d 	.word	0x0800674d
 8006714:	0800674d 	.word	0x0800674d
 8006718:	08006735 	.word	0x08006735
 800671c:	0800674d 	.word	0x0800674d
 8006720:	0800674d 	.word	0x0800674d
 8006724:	0800674d 	.word	0x0800674d
 8006728:	08006745 	.word	0x08006745
 800672c:	2300      	movs	r3, #0
 800672e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006732:	e0d8      	b.n	80068e6 <UART_SetConfig+0x2e6>
 8006734:	2302      	movs	r3, #2
 8006736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673a:	e0d4      	b.n	80068e6 <UART_SetConfig+0x2e6>
 800673c:	2304      	movs	r3, #4
 800673e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006742:	e0d0      	b.n	80068e6 <UART_SetConfig+0x2e6>
 8006744:	2308      	movs	r3, #8
 8006746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800674a:	e0cc      	b.n	80068e6 <UART_SetConfig+0x2e6>
 800674c:	2310      	movs	r3, #16
 800674e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006752:	e0c8      	b.n	80068e6 <UART_SetConfig+0x2e6>
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a5e      	ldr	r2, [pc, #376]	; (80068d4 <UART_SetConfig+0x2d4>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d125      	bne.n	80067aa <UART_SetConfig+0x1aa>
 800675e:	4b5b      	ldr	r3, [pc, #364]	; (80068cc <UART_SetConfig+0x2cc>)
 8006760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006764:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006768:	2b30      	cmp	r3, #48	; 0x30
 800676a:	d016      	beq.n	800679a <UART_SetConfig+0x19a>
 800676c:	2b30      	cmp	r3, #48	; 0x30
 800676e:	d818      	bhi.n	80067a2 <UART_SetConfig+0x1a2>
 8006770:	2b20      	cmp	r3, #32
 8006772:	d00a      	beq.n	800678a <UART_SetConfig+0x18a>
 8006774:	2b20      	cmp	r3, #32
 8006776:	d814      	bhi.n	80067a2 <UART_SetConfig+0x1a2>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <UART_SetConfig+0x182>
 800677c:	2b10      	cmp	r3, #16
 800677e:	d008      	beq.n	8006792 <UART_SetConfig+0x192>
 8006780:	e00f      	b.n	80067a2 <UART_SetConfig+0x1a2>
 8006782:	2300      	movs	r3, #0
 8006784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006788:	e0ad      	b.n	80068e6 <UART_SetConfig+0x2e6>
 800678a:	2302      	movs	r3, #2
 800678c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006790:	e0a9      	b.n	80068e6 <UART_SetConfig+0x2e6>
 8006792:	2304      	movs	r3, #4
 8006794:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006798:	e0a5      	b.n	80068e6 <UART_SetConfig+0x2e6>
 800679a:	2308      	movs	r3, #8
 800679c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067a0:	e0a1      	b.n	80068e6 <UART_SetConfig+0x2e6>
 80067a2:	2310      	movs	r3, #16
 80067a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067a8:	e09d      	b.n	80068e6 <UART_SetConfig+0x2e6>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a4a      	ldr	r2, [pc, #296]	; (80068d8 <UART_SetConfig+0x2d8>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d125      	bne.n	8006800 <UART_SetConfig+0x200>
 80067b4:	4b45      	ldr	r3, [pc, #276]	; (80068cc <UART_SetConfig+0x2cc>)
 80067b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067be:	2bc0      	cmp	r3, #192	; 0xc0
 80067c0:	d016      	beq.n	80067f0 <UART_SetConfig+0x1f0>
 80067c2:	2bc0      	cmp	r3, #192	; 0xc0
 80067c4:	d818      	bhi.n	80067f8 <UART_SetConfig+0x1f8>
 80067c6:	2b80      	cmp	r3, #128	; 0x80
 80067c8:	d00a      	beq.n	80067e0 <UART_SetConfig+0x1e0>
 80067ca:	2b80      	cmp	r3, #128	; 0x80
 80067cc:	d814      	bhi.n	80067f8 <UART_SetConfig+0x1f8>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <UART_SetConfig+0x1d8>
 80067d2:	2b40      	cmp	r3, #64	; 0x40
 80067d4:	d008      	beq.n	80067e8 <UART_SetConfig+0x1e8>
 80067d6:	e00f      	b.n	80067f8 <UART_SetConfig+0x1f8>
 80067d8:	2300      	movs	r3, #0
 80067da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067de:	e082      	b.n	80068e6 <UART_SetConfig+0x2e6>
 80067e0:	2302      	movs	r3, #2
 80067e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e6:	e07e      	b.n	80068e6 <UART_SetConfig+0x2e6>
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ee:	e07a      	b.n	80068e6 <UART_SetConfig+0x2e6>
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f6:	e076      	b.n	80068e6 <UART_SetConfig+0x2e6>
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fe:	e072      	b.n	80068e6 <UART_SetConfig+0x2e6>
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a35      	ldr	r2, [pc, #212]	; (80068dc <UART_SetConfig+0x2dc>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d12a      	bne.n	8006860 <UART_SetConfig+0x260>
 800680a:	4b30      	ldr	r3, [pc, #192]	; (80068cc <UART_SetConfig+0x2cc>)
 800680c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006814:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006818:	d01a      	beq.n	8006850 <UART_SetConfig+0x250>
 800681a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800681e:	d81b      	bhi.n	8006858 <UART_SetConfig+0x258>
 8006820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006824:	d00c      	beq.n	8006840 <UART_SetConfig+0x240>
 8006826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800682a:	d815      	bhi.n	8006858 <UART_SetConfig+0x258>
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <UART_SetConfig+0x238>
 8006830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006834:	d008      	beq.n	8006848 <UART_SetConfig+0x248>
 8006836:	e00f      	b.n	8006858 <UART_SetConfig+0x258>
 8006838:	2300      	movs	r3, #0
 800683a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800683e:	e052      	b.n	80068e6 <UART_SetConfig+0x2e6>
 8006840:	2302      	movs	r3, #2
 8006842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006846:	e04e      	b.n	80068e6 <UART_SetConfig+0x2e6>
 8006848:	2304      	movs	r3, #4
 800684a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684e:	e04a      	b.n	80068e6 <UART_SetConfig+0x2e6>
 8006850:	2308      	movs	r3, #8
 8006852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006856:	e046      	b.n	80068e6 <UART_SetConfig+0x2e6>
 8006858:	2310      	movs	r3, #16
 800685a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800685e:	e042      	b.n	80068e6 <UART_SetConfig+0x2e6>
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a17      	ldr	r2, [pc, #92]	; (80068c4 <UART_SetConfig+0x2c4>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d13a      	bne.n	80068e0 <UART_SetConfig+0x2e0>
 800686a:	4b18      	ldr	r3, [pc, #96]	; (80068cc <UART_SetConfig+0x2cc>)
 800686c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006870:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006874:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006878:	d01a      	beq.n	80068b0 <UART_SetConfig+0x2b0>
 800687a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800687e:	d81b      	bhi.n	80068b8 <UART_SetConfig+0x2b8>
 8006880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006884:	d00c      	beq.n	80068a0 <UART_SetConfig+0x2a0>
 8006886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800688a:	d815      	bhi.n	80068b8 <UART_SetConfig+0x2b8>
 800688c:	2b00      	cmp	r3, #0
 800688e:	d003      	beq.n	8006898 <UART_SetConfig+0x298>
 8006890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006894:	d008      	beq.n	80068a8 <UART_SetConfig+0x2a8>
 8006896:	e00f      	b.n	80068b8 <UART_SetConfig+0x2b8>
 8006898:	2300      	movs	r3, #0
 800689a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800689e:	e022      	b.n	80068e6 <UART_SetConfig+0x2e6>
 80068a0:	2302      	movs	r3, #2
 80068a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a6:	e01e      	b.n	80068e6 <UART_SetConfig+0x2e6>
 80068a8:	2304      	movs	r3, #4
 80068aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ae:	e01a      	b.n	80068e6 <UART_SetConfig+0x2e6>
 80068b0:	2308      	movs	r3, #8
 80068b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068b6:	e016      	b.n	80068e6 <UART_SetConfig+0x2e6>
 80068b8:	2310      	movs	r3, #16
 80068ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068be:	e012      	b.n	80068e6 <UART_SetConfig+0x2e6>
 80068c0:	efff69f3 	.word	0xefff69f3
 80068c4:	40008000 	.word	0x40008000
 80068c8:	40013800 	.word	0x40013800
 80068cc:	40021000 	.word	0x40021000
 80068d0:	40004400 	.word	0x40004400
 80068d4:	40004800 	.word	0x40004800
 80068d8:	40004c00 	.word	0x40004c00
 80068dc:	40005000 	.word	0x40005000
 80068e0:	2310      	movs	r3, #16
 80068e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a9f      	ldr	r2, [pc, #636]	; (8006b68 <UART_SetConfig+0x568>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d17a      	bne.n	80069e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d824      	bhi.n	8006942 <UART_SetConfig+0x342>
 80068f8:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <UART_SetConfig+0x300>)
 80068fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fe:	bf00      	nop
 8006900:	08006925 	.word	0x08006925
 8006904:	08006943 	.word	0x08006943
 8006908:	0800692d 	.word	0x0800692d
 800690c:	08006943 	.word	0x08006943
 8006910:	08006933 	.word	0x08006933
 8006914:	08006943 	.word	0x08006943
 8006918:	08006943 	.word	0x08006943
 800691c:	08006943 	.word	0x08006943
 8006920:	0800693b 	.word	0x0800693b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006924:	f7fe fce8 	bl	80052f8 <HAL_RCC_GetPCLK1Freq>
 8006928:	61f8      	str	r0, [r7, #28]
        break;
 800692a:	e010      	b.n	800694e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800692c:	4b8f      	ldr	r3, [pc, #572]	; (8006b6c <UART_SetConfig+0x56c>)
 800692e:	61fb      	str	r3, [r7, #28]
        break;
 8006930:	e00d      	b.n	800694e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006932:	f7fe fc49 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 8006936:	61f8      	str	r0, [r7, #28]
        break;
 8006938:	e009      	b.n	800694e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800693a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800693e:	61fb      	str	r3, [r7, #28]
        break;
 8006940:	e005      	b.n	800694e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006942:	2300      	movs	r3, #0
 8006944:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800694c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 80fb 	beq.w	8006b4c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	685a      	ldr	r2, [r3, #4]
 800695a:	4613      	mov	r3, r2
 800695c:	005b      	lsls	r3, r3, #1
 800695e:	4413      	add	r3, r2
 8006960:	69fa      	ldr	r2, [r7, #28]
 8006962:	429a      	cmp	r2, r3
 8006964:	d305      	bcc.n	8006972 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	429a      	cmp	r2, r3
 8006970:	d903      	bls.n	800697a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006978:	e0e8      	b.n	8006b4c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	2200      	movs	r2, #0
 800697e:	461c      	mov	r4, r3
 8006980:	4615      	mov	r5, r2
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	022b      	lsls	r3, r5, #8
 800698c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006990:	0222      	lsls	r2, r4, #8
 8006992:	68f9      	ldr	r1, [r7, #12]
 8006994:	6849      	ldr	r1, [r1, #4]
 8006996:	0849      	lsrs	r1, r1, #1
 8006998:	2000      	movs	r0, #0
 800699a:	4688      	mov	r8, r1
 800699c:	4681      	mov	r9, r0
 800699e:	eb12 0a08 	adds.w	sl, r2, r8
 80069a2:	eb43 0b09 	adc.w	fp, r3, r9
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	603b      	str	r3, [r7, #0]
 80069ae:	607a      	str	r2, [r7, #4]
 80069b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069b4:	4650      	mov	r0, sl
 80069b6:	4659      	mov	r1, fp
 80069b8:	f7fa f828 	bl	8000a0c <__aeabi_uldivmod>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4613      	mov	r3, r2
 80069c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069ca:	d308      	bcc.n	80069de <UART_SetConfig+0x3de>
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069d2:	d204      	bcs.n	80069de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	60da      	str	r2, [r3, #12]
 80069dc:	e0b6      	b.n	8006b4c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069e4:	e0b2      	b.n	8006b4c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ee:	d15e      	bne.n	8006aae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80069f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069f4:	2b08      	cmp	r3, #8
 80069f6:	d828      	bhi.n	8006a4a <UART_SetConfig+0x44a>
 80069f8:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <UART_SetConfig+0x400>)
 80069fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fe:	bf00      	nop
 8006a00:	08006a25 	.word	0x08006a25
 8006a04:	08006a2d 	.word	0x08006a2d
 8006a08:	08006a35 	.word	0x08006a35
 8006a0c:	08006a4b 	.word	0x08006a4b
 8006a10:	08006a3b 	.word	0x08006a3b
 8006a14:	08006a4b 	.word	0x08006a4b
 8006a18:	08006a4b 	.word	0x08006a4b
 8006a1c:	08006a4b 	.word	0x08006a4b
 8006a20:	08006a43 	.word	0x08006a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a24:	f7fe fc68 	bl	80052f8 <HAL_RCC_GetPCLK1Freq>
 8006a28:	61f8      	str	r0, [r7, #28]
        break;
 8006a2a:	e014      	b.n	8006a56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a2c:	f7fe fc7a 	bl	8005324 <HAL_RCC_GetPCLK2Freq>
 8006a30:	61f8      	str	r0, [r7, #28]
        break;
 8006a32:	e010      	b.n	8006a56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a34:	4b4d      	ldr	r3, [pc, #308]	; (8006b6c <UART_SetConfig+0x56c>)
 8006a36:	61fb      	str	r3, [r7, #28]
        break;
 8006a38:	e00d      	b.n	8006a56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a3a:	f7fe fbc5 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 8006a3e:	61f8      	str	r0, [r7, #28]
        break;
 8006a40:	e009      	b.n	8006a56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a46:	61fb      	str	r3, [r7, #28]
        break;
 8006a48:	e005      	b.n	8006a56 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d077      	beq.n	8006b4c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	005a      	lsls	r2, r3, #1
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	085b      	lsrs	r3, r3, #1
 8006a66:	441a      	add	r2, r3
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	2b0f      	cmp	r3, #15
 8006a76:	d916      	bls.n	8006aa6 <UART_SetConfig+0x4a6>
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a7e:	d212      	bcs.n	8006aa6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	f023 030f 	bic.w	r3, r3, #15
 8006a88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	085b      	lsrs	r3, r3, #1
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f003 0307 	and.w	r3, r3, #7
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	8afb      	ldrh	r3, [r7, #22]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	8afa      	ldrh	r2, [r7, #22]
 8006aa2:	60da      	str	r2, [r3, #12]
 8006aa4:	e052      	b.n	8006b4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006aac:	e04e      	b.n	8006b4c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d827      	bhi.n	8006b06 <UART_SetConfig+0x506>
 8006ab6:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <UART_SetConfig+0x4bc>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006ae1 	.word	0x08006ae1
 8006ac0:	08006ae9 	.word	0x08006ae9
 8006ac4:	08006af1 	.word	0x08006af1
 8006ac8:	08006b07 	.word	0x08006b07
 8006acc:	08006af7 	.word	0x08006af7
 8006ad0:	08006b07 	.word	0x08006b07
 8006ad4:	08006b07 	.word	0x08006b07
 8006ad8:	08006b07 	.word	0x08006b07
 8006adc:	08006aff 	.word	0x08006aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ae0:	f7fe fc0a 	bl	80052f8 <HAL_RCC_GetPCLK1Freq>
 8006ae4:	61f8      	str	r0, [r7, #28]
        break;
 8006ae6:	e014      	b.n	8006b12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ae8:	f7fe fc1c 	bl	8005324 <HAL_RCC_GetPCLK2Freq>
 8006aec:	61f8      	str	r0, [r7, #28]
        break;
 8006aee:	e010      	b.n	8006b12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006af0:	4b1e      	ldr	r3, [pc, #120]	; (8006b6c <UART_SetConfig+0x56c>)
 8006af2:	61fb      	str	r3, [r7, #28]
        break;
 8006af4:	e00d      	b.n	8006b12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006af6:	f7fe fb67 	bl	80051c8 <HAL_RCC_GetSysClockFreq>
 8006afa:	61f8      	str	r0, [r7, #28]
        break;
 8006afc:	e009      	b.n	8006b12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b02:	61fb      	str	r3, [r7, #28]
        break;
 8006b04:	e005      	b.n	8006b12 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b06:	2300      	movs	r3, #0
 8006b08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b10:	bf00      	nop
    }

    if (pclk != 0U)
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d019      	beq.n	8006b4c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	085a      	lsrs	r2, r3, #1
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	441a      	add	r2, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	2b0f      	cmp	r3, #15
 8006b30:	d909      	bls.n	8006b46 <UART_SetConfig+0x546>
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b38:	d205      	bcs.n	8006b46 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	b29a      	uxth	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	60da      	str	r2, [r3, #12]
 8006b44:	e002      	b.n	8006b4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2200      	movs	r2, #0
 8006b56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3728      	adds	r7, #40	; 0x28
 8006b60:	46bd      	mov	sp, r7
 8006b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b66:	bf00      	nop
 8006b68:	40008000 	.word	0x40008000
 8006b6c:	00f42400 	.word	0x00f42400

08006b70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7c:	f003 0308 	and.w	r3, r3, #8
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00a      	beq.n	8006b9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00a      	beq.n	8006bde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	f003 0304 	and.w	r3, r3, #4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	f003 0310 	and.w	r3, r3, #16
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00a      	beq.n	8006c22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d01a      	beq.n	8006c86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c6e:	d10a      	bne.n	8006c86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	430a      	orrs	r2, r1
 8006c84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00a      	beq.n	8006ca8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	605a      	str	r2, [r3, #4]
  }
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b098      	sub	sp, #96	; 0x60
 8006cb8:	af02      	add	r7, sp, #8
 8006cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cc4:	f7fb fbb6 	bl	8002434 <HAL_GetTick>
 8006cc8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0308 	and.w	r3, r3, #8
 8006cd4:	2b08      	cmp	r3, #8
 8006cd6:	d12e      	bne.n	8006d36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cdc:	9300      	str	r3, [sp, #0]
 8006cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f88c 	bl	8006e04 <UART_WaitOnFlagUntilTimeout>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d021      	beq.n	8006d36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cfa:	e853 3f00 	ldrex	r3, [r3]
 8006cfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d06:	653b      	str	r3, [r7, #80]	; 0x50
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d10:	647b      	str	r3, [r7, #68]	; 0x44
 8006d12:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d18:	e841 2300 	strex	r3, r2, [r1]
 8006d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d1e6      	bne.n	8006cf2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2220      	movs	r2, #32
 8006d28:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e062      	b.n	8006dfc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0304 	and.w	r3, r3, #4
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d149      	bne.n	8006dd8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f856 	bl	8006e04 <UART_WaitOnFlagUntilTimeout>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d03c      	beq.n	8006dd8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	e853 3f00 	ldrex	r3, [r3]
 8006d6a:	623b      	str	r3, [r7, #32]
   return(result);
 8006d6c:	6a3b      	ldr	r3, [r7, #32]
 8006d6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d84:	e841 2300 	strex	r3, r2, [r1]
 8006d88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e6      	bne.n	8006d5e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3308      	adds	r3, #8
 8006d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	e853 3f00 	ldrex	r3, [r3]
 8006d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f023 0301 	bic.w	r3, r3, #1
 8006da6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	3308      	adds	r3, #8
 8006dae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006db0:	61fa      	str	r2, [r7, #28]
 8006db2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db4:	69b9      	ldr	r1, [r7, #24]
 8006db6:	69fa      	ldr	r2, [r7, #28]
 8006db8:	e841 2300 	strex	r3, r2, [r1]
 8006dbc:	617b      	str	r3, [r7, #20]
   return(result);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d1e5      	bne.n	8006d90 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2220      	movs	r2, #32
 8006dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e011      	b.n	8006dfc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3758      	adds	r7, #88	; 0x58
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	603b      	str	r3, [r7, #0]
 8006e10:	4613      	mov	r3, r2
 8006e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e14:	e049      	b.n	8006eaa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1c:	d045      	beq.n	8006eaa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e1e:	f7fb fb09 	bl	8002434 <HAL_GetTick>
 8006e22:	4602      	mov	r2, r0
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	69ba      	ldr	r2, [r7, #24]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d302      	bcc.n	8006e34 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d101      	bne.n	8006e38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e34:	2303      	movs	r3, #3
 8006e36:	e048      	b.n	8006eca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0304 	and.w	r3, r3, #4
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d031      	beq.n	8006eaa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	f003 0308 	and.w	r3, r3, #8
 8006e50:	2b08      	cmp	r3, #8
 8006e52:	d110      	bne.n	8006e76 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2208      	movs	r2, #8
 8006e5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e5c:	68f8      	ldr	r0, [r7, #12]
 8006e5e:	f000 f838 	bl	8006ed2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2208      	movs	r2, #8
 8006e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006e72:	2301      	movs	r3, #1
 8006e74:	e029      	b.n	8006eca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	69db      	ldr	r3, [r3, #28]
 8006e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e84:	d111      	bne.n	8006eaa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 f81e 	bl	8006ed2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e00f      	b.n	8006eca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	69da      	ldr	r2, [r3, #28]
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	68ba      	ldr	r2, [r7, #8]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	bf0c      	ite	eq
 8006eba:	2301      	moveq	r3, #1
 8006ebc:	2300      	movne	r3, #0
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d0a6      	beq.n	8006e16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b095      	sub	sp, #84	; 0x54
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ee2:	e853 3f00 	ldrex	r3, [r3]
 8006ee6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8006efa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006efc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006efe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f00:	e841 2300 	strex	r3, r2, [r1]
 8006f04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d1e6      	bne.n	8006eda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3308      	adds	r3, #8
 8006f12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	6a3b      	ldr	r3, [r7, #32]
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	f023 0301 	bic.w	r3, r3, #1
 8006f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3308      	adds	r3, #8
 8006f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e5      	bne.n	8006f0c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d118      	bne.n	8006f7a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	f023 0310 	bic.w	r3, r3, #16
 8006f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f66:	61bb      	str	r3, [r7, #24]
 8006f68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	6979      	ldr	r1, [r7, #20]
 8006f6c:	69ba      	ldr	r2, [r7, #24]
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	613b      	str	r3, [r7, #16]
   return(result);
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e6      	bne.n	8006f48 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2220      	movs	r2, #32
 8006f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f8e:	bf00      	nop
 8006f90:	3754      	adds	r7, #84	; 0x54
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr

08006f9a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	f107 001c 	add.w	r0, r7, #28
 8006fa8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f001 fa1d 	bl	80083f8 <USB_CoreReset>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006fc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d106      	bne.n	8006fd6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fcc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	639a      	str	r2, [r3, #56]	; 0x38
 8006fd4:	e005      	b.n	8006fe2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fee:	b004      	add	sp, #16
 8006ff0:	4770      	bx	lr
	...

08006ff4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	4613      	mov	r3, r2
 8007000:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007002:	79fb      	ldrb	r3, [r7, #7]
 8007004:	2b02      	cmp	r3, #2
 8007006:	d165      	bne.n	80070d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	4a3e      	ldr	r2, [pc, #248]	; (8007104 <USB_SetTurnaroundTime+0x110>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d906      	bls.n	800701e <USB_SetTurnaroundTime+0x2a>
 8007010:	68bb      	ldr	r3, [r7, #8]
 8007012:	4a3d      	ldr	r2, [pc, #244]	; (8007108 <USB_SetTurnaroundTime+0x114>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d202      	bcs.n	800701e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007018:	230f      	movs	r3, #15
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	e05c      	b.n	80070d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	4a39      	ldr	r2, [pc, #228]	; (8007108 <USB_SetTurnaroundTime+0x114>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d306      	bcc.n	8007034 <USB_SetTurnaroundTime+0x40>
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	4a38      	ldr	r2, [pc, #224]	; (800710c <USB_SetTurnaroundTime+0x118>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d202      	bcs.n	8007034 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800702e:	230e      	movs	r3, #14
 8007030:	617b      	str	r3, [r7, #20]
 8007032:	e051      	b.n	80070d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	4a35      	ldr	r2, [pc, #212]	; (800710c <USB_SetTurnaroundTime+0x118>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d306      	bcc.n	800704a <USB_SetTurnaroundTime+0x56>
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	4a34      	ldr	r2, [pc, #208]	; (8007110 <USB_SetTurnaroundTime+0x11c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d202      	bcs.n	800704a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007044:	230d      	movs	r3, #13
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	e046      	b.n	80070d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	4a30      	ldr	r2, [pc, #192]	; (8007110 <USB_SetTurnaroundTime+0x11c>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d306      	bcc.n	8007060 <USB_SetTurnaroundTime+0x6c>
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	4a2f      	ldr	r2, [pc, #188]	; (8007114 <USB_SetTurnaroundTime+0x120>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d802      	bhi.n	8007060 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800705a:	230c      	movs	r3, #12
 800705c:	617b      	str	r3, [r7, #20]
 800705e:	e03b      	b.n	80070d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	4a2c      	ldr	r2, [pc, #176]	; (8007114 <USB_SetTurnaroundTime+0x120>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d906      	bls.n	8007076 <USB_SetTurnaroundTime+0x82>
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	4a2b      	ldr	r2, [pc, #172]	; (8007118 <USB_SetTurnaroundTime+0x124>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d802      	bhi.n	8007076 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007070:	230b      	movs	r3, #11
 8007072:	617b      	str	r3, [r7, #20]
 8007074:	e030      	b.n	80070d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	4a27      	ldr	r2, [pc, #156]	; (8007118 <USB_SetTurnaroundTime+0x124>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d906      	bls.n	800708c <USB_SetTurnaroundTime+0x98>
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	4a26      	ldr	r2, [pc, #152]	; (800711c <USB_SetTurnaroundTime+0x128>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d802      	bhi.n	800708c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007086:	230a      	movs	r3, #10
 8007088:	617b      	str	r3, [r7, #20]
 800708a:	e025      	b.n	80070d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	4a23      	ldr	r2, [pc, #140]	; (800711c <USB_SetTurnaroundTime+0x128>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d906      	bls.n	80070a2 <USB_SetTurnaroundTime+0xae>
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	4a22      	ldr	r2, [pc, #136]	; (8007120 <USB_SetTurnaroundTime+0x12c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d202      	bcs.n	80070a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800709c:	2309      	movs	r3, #9
 800709e:	617b      	str	r3, [r7, #20]
 80070a0:	e01a      	b.n	80070d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	4a1e      	ldr	r2, [pc, #120]	; (8007120 <USB_SetTurnaroundTime+0x12c>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d306      	bcc.n	80070b8 <USB_SetTurnaroundTime+0xc4>
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	4a1d      	ldr	r2, [pc, #116]	; (8007124 <USB_SetTurnaroundTime+0x130>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d802      	bhi.n	80070b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80070b2:	2308      	movs	r3, #8
 80070b4:	617b      	str	r3, [r7, #20]
 80070b6:	e00f      	b.n	80070d8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4a1a      	ldr	r2, [pc, #104]	; (8007124 <USB_SetTurnaroundTime+0x130>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d906      	bls.n	80070ce <USB_SetTurnaroundTime+0xda>
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	4a19      	ldr	r2, [pc, #100]	; (8007128 <USB_SetTurnaroundTime+0x134>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d202      	bcs.n	80070ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80070c8:	2307      	movs	r3, #7
 80070ca:	617b      	str	r3, [r7, #20]
 80070cc:	e004      	b.n	80070d8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80070ce:	2306      	movs	r3, #6
 80070d0:	617b      	str	r3, [r7, #20]
 80070d2:	e001      	b.n	80070d8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80070d4:	2309      	movs	r3, #9
 80070d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	68da      	ldr	r2, [r3, #12]
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	029b      	lsls	r3, r3, #10
 80070ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80070f0:	431a      	orrs	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	371c      	adds	r7, #28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	00d8acbf 	.word	0x00d8acbf
 8007108:	00e4e1c0 	.word	0x00e4e1c0
 800710c:	00f42400 	.word	0x00f42400
 8007110:	01067380 	.word	0x01067380
 8007114:	011a499f 	.word	0x011a499f
 8007118:	01312cff 	.word	0x01312cff
 800711c:	014ca43f 	.word	0x014ca43f
 8007120:	016e3600 	.word	0x016e3600
 8007124:	01a6ab1f 	.word	0x01a6ab1f
 8007128:	01e84800 	.word	0x01e84800

0800712c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800712c:	b480      	push	{r7}
 800712e:	b083      	sub	sp, #12
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f043 0201 	orr.w	r2, r3, #1
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800714e:	b480      	push	{r7}
 8007150:	b083      	sub	sp, #12
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f023 0201 	bic.w	r2, r3, #1
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800718c:	78fb      	ldrb	r3, [r7, #3]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d115      	bne.n	80071be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800719e:	2001      	movs	r0, #1
 80071a0:	f7fb f954 	bl	800244c <HAL_Delay>
      ms++;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	3301      	adds	r3, #1
 80071a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f001 f8ab 	bl	8008306 <USB_GetMode>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d01e      	beq.n	80071f4 <USB_SetCurrentMode+0x84>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2b31      	cmp	r3, #49	; 0x31
 80071ba:	d9f0      	bls.n	800719e <USB_SetCurrentMode+0x2e>
 80071bc:	e01a      	b.n	80071f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d115      	bne.n	80071f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80071d0:	2001      	movs	r0, #1
 80071d2:	f7fb f93b 	bl	800244c <HAL_Delay>
      ms++;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	3301      	adds	r3, #1
 80071da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f001 f892 	bl	8008306 <USB_GetMode>
 80071e2:	4603      	mov	r3, r0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d005      	beq.n	80071f4 <USB_SetCurrentMode+0x84>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2b31      	cmp	r3, #49	; 0x31
 80071ec:	d9f0      	bls.n	80071d0 <USB_SetCurrentMode+0x60>
 80071ee:	e001      	b.n	80071f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e005      	b.n	8007200 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b32      	cmp	r3, #50	; 0x32
 80071f8:	d101      	bne.n	80071fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e000      	b.n	8007200 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3710      	adds	r7, #16
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007208:	b084      	sub	sp, #16
 800720a:	b580      	push	{r7, lr}
 800720c:	b086      	sub	sp, #24
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
 8007212:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007216:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800721a:	2300      	movs	r3, #0
 800721c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007222:	2300      	movs	r3, #0
 8007224:	613b      	str	r3, [r7, #16]
 8007226:	e009      	b.n	800723c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	3340      	adds	r3, #64	; 0x40
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	4413      	add	r3, r2
 8007232:	2200      	movs	r2, #0
 8007234:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	3301      	adds	r3, #1
 800723a:	613b      	str	r3, [r7, #16]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	2b0e      	cmp	r3, #14
 8007240:	d9f2      	bls.n	8007228 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007244:	2b00      	cmp	r3, #0
 8007246:	d11c      	bne.n	8007282 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007256:	f043 0302 	orr.w	r3, r3, #2
 800725a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007260:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	601a      	str	r2, [r3, #0]
 8007280:	e005      	b.n	800728e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007286:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007294:	461a      	mov	r2, r3
 8007296:	2300      	movs	r3, #0
 8007298:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800729a:	2103      	movs	r1, #3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f959 	bl	8007554 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80072a2:	2110      	movs	r1, #16
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f8f1 	bl	800748c <USB_FlushTxFifo>
 80072aa:	4603      	mov	r3, r0
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d001      	beq.n	80072b4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80072b0:	2301      	movs	r3, #1
 80072b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f91d 	bl	80074f4 <USB_FlushRxFifo>
 80072ba:	4603      	mov	r3, r0
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ca:	461a      	mov	r2, r3
 80072cc:	2300      	movs	r3, #0
 80072ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d6:	461a      	mov	r2, r3
 80072d8:	2300      	movs	r3, #0
 80072da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072e2:	461a      	mov	r2, r3
 80072e4:	2300      	movs	r3, #0
 80072e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072e8:	2300      	movs	r3, #0
 80072ea:	613b      	str	r3, [r7, #16]
 80072ec:	e043      	b.n	8007376 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007304:	d118      	bne.n	8007338 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d10a      	bne.n	8007322 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007318:	461a      	mov	r2, r3
 800731a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800731e:	6013      	str	r3, [r2, #0]
 8007320:	e013      	b.n	800734a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	015a      	lsls	r2, r3, #5
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	4413      	add	r3, r2
 800732a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732e:	461a      	mov	r2, r3
 8007330:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	e008      	b.n	800734a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	015a      	lsls	r2, r3, #5
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	4413      	add	r3, r2
 8007340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007344:	461a      	mov	r2, r3
 8007346:	2300      	movs	r3, #0
 8007348:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007356:	461a      	mov	r2, r3
 8007358:	2300      	movs	r3, #0
 800735a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007368:	461a      	mov	r2, r3
 800736a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800736e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	3301      	adds	r3, #1
 8007374:	613b      	str	r3, [r7, #16]
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	693a      	ldr	r2, [r7, #16]
 800737a:	429a      	cmp	r2, r3
 800737c:	d3b7      	bcc.n	80072ee <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800737e:	2300      	movs	r3, #0
 8007380:	613b      	str	r3, [r7, #16]
 8007382:	e043      	b.n	800740c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	4413      	add	r3, r2
 800738c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800739a:	d118      	bne.n	80073ce <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10a      	bne.n	80073b8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ae:	461a      	mov	r2, r3
 80073b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073b4:	6013      	str	r3, [r2, #0]
 80073b6:	e013      	b.n	80073e0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c4:	461a      	mov	r2, r3
 80073c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	e008      	b.n	80073e0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073da:	461a      	mov	r2, r3
 80073dc:	2300      	movs	r3, #0
 80073de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ec:	461a      	mov	r2, r3
 80073ee:	2300      	movs	r3, #0
 80073f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fe:	461a      	mov	r2, r3
 8007400:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007404:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	3301      	adds	r3, #1
 800740a:	613b      	str	r3, [r7, #16]
 800740c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	429a      	cmp	r2, r3
 8007412:	d3b7      	bcc.n	8007384 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800741a:	691b      	ldr	r3, [r3, #16]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007422:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007426:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007434:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	699b      	ldr	r3, [r3, #24]
 800743a:	f043 0210 	orr.w	r2, r3, #16
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699a      	ldr	r2, [r3, #24]
 8007446:	4b10      	ldr	r3, [pc, #64]	; (8007488 <USB_DevInit+0x280>)
 8007448:	4313      	orrs	r3, r2
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800744e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007450:	2b00      	cmp	r3, #0
 8007452:	d005      	beq.n	8007460 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	699b      	ldr	r3, [r3, #24]
 8007458:	f043 0208 	orr.w	r2, r3, #8
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007462:	2b01      	cmp	r3, #1
 8007464:	d107      	bne.n	8007476 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	699b      	ldr	r3, [r3, #24]
 800746a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800746e:	f043 0304 	orr.w	r3, r3, #4
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007476:	7dfb      	ldrb	r3, [r7, #23]
}
 8007478:	4618      	mov	r0, r3
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007482:	b004      	add	sp, #16
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	803c3800 	.word	0x803c3800

0800748c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800748c:	b480      	push	{r7}
 800748e:	b085      	sub	sp, #20
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007496:	2300      	movs	r3, #0
 8007498:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3301      	adds	r3, #1
 800749e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4a13      	ldr	r2, [pc, #76]	; (80074f0 <USB_FlushTxFifo+0x64>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d901      	bls.n	80074ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80074a8:	2303      	movs	r3, #3
 80074aa:	e01b      	b.n	80074e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	daf2      	bge.n	800749a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80074b4:	2300      	movs	r3, #0
 80074b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	019b      	lsls	r3, r3, #6
 80074bc:	f043 0220 	orr.w	r2, r3, #32
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3301      	adds	r3, #1
 80074c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	4a08      	ldr	r2, [pc, #32]	; (80074f0 <USB_FlushTxFifo+0x64>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d901      	bls.n	80074d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e006      	b.n	80074e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	f003 0320 	and.w	r3, r3, #32
 80074de:	2b20      	cmp	r3, #32
 80074e0:	d0f0      	beq.n	80074c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80074e2:	2300      	movs	r3, #0
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3714      	adds	r7, #20
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	00030d40 	.word	0x00030d40

080074f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074fc:	2300      	movs	r3, #0
 80074fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	3301      	adds	r3, #1
 8007504:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4a11      	ldr	r2, [pc, #68]	; (8007550 <USB_FlushRxFifo+0x5c>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d901      	bls.n	8007512 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e018      	b.n	8007544 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	2b00      	cmp	r3, #0
 8007518:	daf2      	bge.n	8007500 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800751a:	2300      	movs	r3, #0
 800751c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2210      	movs	r2, #16
 8007522:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	3301      	adds	r3, #1
 8007528:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	4a08      	ldr	r2, [pc, #32]	; (8007550 <USB_FlushRxFifo+0x5c>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d901      	bls.n	8007536 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007532:	2303      	movs	r3, #3
 8007534:	e006      	b.n	8007544 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f003 0310 	and.w	r3, r3, #16
 800753e:	2b10      	cmp	r3, #16
 8007540:	d0f0      	beq.n	8007524 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	00030d40 	.word	0x00030d40

08007554 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007554:	b480      	push	{r7}
 8007556:	b085      	sub	sp, #20
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	78fb      	ldrb	r3, [r7, #3]
 800756e:	68f9      	ldr	r1, [r7, #12]
 8007570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007574:	4313      	orrs	r3, r2
 8007576:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007586:	b480      	push	{r7}
 8007588:	b087      	sub	sp, #28
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007598:	689b      	ldr	r3, [r3, #8]
 800759a:	f003 0306 	and.w	r3, r3, #6
 800759e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d002      	beq.n	80075ac <USB_GetDevSpeed+0x26>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2b06      	cmp	r3, #6
 80075aa:	d102      	bne.n	80075b2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80075ac:	2302      	movs	r3, #2
 80075ae:	75fb      	strb	r3, [r7, #23]
 80075b0:	e001      	b.n	80075b6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80075b2:	230f      	movs	r3, #15
 80075b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	371c      	adds	r7, #28
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	785b      	ldrb	r3, [r3, #1]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d13a      	bne.n	8007656 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e6:	69da      	ldr	r2, [r3, #28]
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	f003 030f 	and.w	r3, r3, #15
 80075f0:	2101      	movs	r1, #1
 80075f2:	fa01 f303 	lsl.w	r3, r1, r3
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	68f9      	ldr	r1, [r7, #12]
 80075fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075fe:	4313      	orrs	r3, r2
 8007600:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d155      	bne.n	80076c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	791b      	ldrb	r3, [r3, #4]
 8007632:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007634:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	059b      	lsls	r3, r3, #22
 800763a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800763c:	4313      	orrs	r3, r2
 800763e:	68ba      	ldr	r2, [r7, #8]
 8007640:	0151      	lsls	r1, r2, #5
 8007642:	68fa      	ldr	r2, [r7, #12]
 8007644:	440a      	add	r2, r1
 8007646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800764a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800764e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007652:	6013      	str	r3, [r2, #0]
 8007654:	e036      	b.n	80076c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765c:	69da      	ldr	r2, [r3, #28]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	f003 030f 	and.w	r3, r3, #15
 8007666:	2101      	movs	r1, #1
 8007668:	fa01 f303 	lsl.w	r3, r1, r3
 800766c:	041b      	lsls	r3, r3, #16
 800766e:	68f9      	ldr	r1, [r7, #12]
 8007670:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007674:	4313      	orrs	r3, r2
 8007676:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	015a      	lsls	r2, r3, #5
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	4413      	add	r3, r2
 8007680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d11a      	bne.n	80076c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	791b      	ldrb	r3, [r3, #4]
 80076a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80076aa:	430b      	orrs	r3, r1
 80076ac:	4313      	orrs	r3, r2
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	0151      	lsls	r1, r2, #5
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	440a      	add	r2, r1
 80076b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3714      	adds	r7, #20
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
	...

080076d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	785b      	ldrb	r3, [r3, #1]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d161      	bne.n	80077b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007702:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007706:	d11f      	bne.n	8007748 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	0151      	lsls	r1, r2, #5
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	440a      	add	r2, r1
 800771e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007722:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007726:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	68ba      	ldr	r2, [r7, #8]
 8007738:	0151      	lsls	r1, r2, #5
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	440a      	add	r2, r1
 800773e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007742:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007746:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	f003 030f 	and.w	r3, r3, #15
 8007758:	2101      	movs	r1, #1
 800775a:	fa01 f303 	lsl.w	r3, r1, r3
 800775e:	b29b      	uxth	r3, r3
 8007760:	43db      	mvns	r3, r3
 8007762:	68f9      	ldr	r1, [r7, #12]
 8007764:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007768:	4013      	ands	r3, r2
 800776a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007772:	69da      	ldr	r2, [r3, #28]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	f003 030f 	and.w	r3, r3, #15
 800777c:	2101      	movs	r1, #1
 800777e:	fa01 f303 	lsl.w	r3, r1, r3
 8007782:	b29b      	uxth	r3, r3
 8007784:	43db      	mvns	r3, r3
 8007786:	68f9      	ldr	r1, [r7, #12]
 8007788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800778c:	4013      	ands	r3, r2
 800778e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	4413      	add	r3, r2
 8007798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	0159      	lsls	r1, r3, #5
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	440b      	add	r3, r1
 80077a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077aa:	4619      	mov	r1, r3
 80077ac:	4b35      	ldr	r3, [pc, #212]	; (8007884 <USB_DeactivateEndpoint+0x1b0>)
 80077ae:	4013      	ands	r3, r2
 80077b0:	600b      	str	r3, [r1, #0]
 80077b2:	e060      	b.n	8007876 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	015a      	lsls	r2, r3, #5
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ca:	d11f      	bne.n	800780c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	015a      	lsls	r2, r3, #5
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4413      	add	r3, r2
 80077d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	68ba      	ldr	r2, [r7, #8]
 80077dc:	0151      	lsls	r1, r2, #5
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	440a      	add	r2, r1
 80077e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	015a      	lsls	r2, r3, #5
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	4413      	add	r3, r2
 80077f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68ba      	ldr	r2, [r7, #8]
 80077fc:	0151      	lsls	r1, r2, #5
 80077fe:	68fa      	ldr	r2, [r7, #12]
 8007800:	440a      	add	r2, r1
 8007802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007806:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800780a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007812:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	f003 030f 	and.w	r3, r3, #15
 800781c:	2101      	movs	r1, #1
 800781e:	fa01 f303 	lsl.w	r3, r1, r3
 8007822:	041b      	lsls	r3, r3, #16
 8007824:	43db      	mvns	r3, r3
 8007826:	68f9      	ldr	r1, [r7, #12]
 8007828:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800782c:	4013      	ands	r3, r2
 800782e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007836:	69da      	ldr	r2, [r3, #28]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	f003 030f 	and.w	r3, r3, #15
 8007840:	2101      	movs	r1, #1
 8007842:	fa01 f303 	lsl.w	r3, r1, r3
 8007846:	041b      	lsls	r3, r3, #16
 8007848:	43db      	mvns	r3, r3
 800784a:	68f9      	ldr	r1, [r7, #12]
 800784c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007850:	4013      	ands	r3, r2
 8007852:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	0159      	lsls	r1, r3, #5
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	440b      	add	r3, r1
 800786a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786e:	4619      	mov	r1, r3
 8007870:	4b05      	ldr	r3, [pc, #20]	; (8007888 <USB_DeactivateEndpoint+0x1b4>)
 8007872:	4013      	ands	r3, r2
 8007874:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	ec337800 	.word	0xec337800
 8007888:	eff37800 	.word	0xeff37800

0800788c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	785b      	ldrb	r3, [r3, #1]
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	f040 8128 	bne.w	8007afa <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d132      	bne.n	8007918 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	015a      	lsls	r2, r3, #5
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	4413      	add	r3, r2
 80078ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	693a      	ldr	r2, [r7, #16]
 80078c2:	0151      	lsls	r1, r2, #5
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	440a      	add	r2, r1
 80078c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	693a      	ldr	r2, [r7, #16]
 80078e6:	0151      	lsls	r1, r2, #5
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	440a      	add	r2, r1
 80078ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	0151      	lsls	r1, r2, #5
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	440a      	add	r2, r1
 800790c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007910:	0cdb      	lsrs	r3, r3, #19
 8007912:	04db      	lsls	r3, r3, #19
 8007914:	6113      	str	r3, [r2, #16]
 8007916:	e092      	b.n	8007a3e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	693a      	ldr	r2, [r7, #16]
 8007928:	0151      	lsls	r1, r2, #5
 800792a:	697a      	ldr	r2, [r7, #20]
 800792c:	440a      	add	r2, r1
 800792e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007932:	0cdb      	lsrs	r3, r3, #19
 8007934:	04db      	lsls	r3, r3, #19
 8007936:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	4413      	add	r3, r2
 8007940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	693a      	ldr	r2, [r7, #16]
 8007948:	0151      	lsls	r1, r2, #5
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	440a      	add	r2, r1
 800794e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007952:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007956:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800795a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d11a      	bne.n	8007998 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	691a      	ldr	r2, [r3, #16]
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	429a      	cmp	r2, r3
 800796c:	d903      	bls.n	8007976 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	689a      	ldr	r2, [r3, #8]
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	015a      	lsls	r2, r3, #5
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	4413      	add	r3, r2
 800797e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	693a      	ldr	r2, [r7, #16]
 8007986:	0151      	lsls	r1, r2, #5
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	440a      	add	r2, r1
 800798c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007990:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007994:	6113      	str	r3, [r2, #16]
 8007996:	e01b      	b.n	80079d0 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007998:	693b      	ldr	r3, [r7, #16]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	6919      	ldr	r1, [r3, #16]
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	440b      	add	r3, r1
 80079b0:	1e59      	subs	r1, r3, #1
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80079ba:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80079bc:	4b8d      	ldr	r3, [pc, #564]	; (8007bf4 <USB_EPStartXfer+0x368>)
 80079be:	400b      	ands	r3, r1
 80079c0:	6939      	ldr	r1, [r7, #16]
 80079c2:	0148      	lsls	r0, r1, #5
 80079c4:	6979      	ldr	r1, [r7, #20]
 80079c6:	4401      	add	r1, r0
 80079c8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80079cc:	4313      	orrs	r3, r2
 80079ce:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079dc:	691a      	ldr	r2, [r3, #16]
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079e6:	6939      	ldr	r1, [r7, #16]
 80079e8:	0148      	lsls	r0, r1, #5
 80079ea:	6979      	ldr	r1, [r7, #20]
 80079ec:	4401      	add	r1, r0
 80079ee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80079f2:	4313      	orrs	r3, r2
 80079f4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	791b      	ldrb	r3, [r3, #4]
 80079fa:	2b01      	cmp	r3, #1
 80079fc:	d11f      	bne.n	8007a3e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0a:	691b      	ldr	r3, [r3, #16]
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	0151      	lsls	r1, r2, #5
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	440a      	add	r2, r1
 8007a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a18:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007a1c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	015a      	lsls	r2, r3, #5
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	4413      	add	r3, r2
 8007a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	693a      	ldr	r2, [r7, #16]
 8007a2e:	0151      	lsls	r1, r2, #5
 8007a30:	697a      	ldr	r2, [r7, #20]
 8007a32:	440a      	add	r2, r1
 8007a34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a38:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a3c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	693a      	ldr	r2, [r7, #16]
 8007a4e:	0151      	lsls	r1, r2, #5
 8007a50:	697a      	ldr	r2, [r7, #20]
 8007a52:	440a      	add	r2, r1
 8007a54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a5c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	791b      	ldrb	r3, [r3, #4]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d015      	beq.n	8007a92 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	691b      	ldr	r3, [r3, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 8139 	beq.w	8007ce2 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f003 030f 	and.w	r3, r3, #15
 8007a80:	2101      	movs	r1, #1
 8007a82:	fa01 f303 	lsl.w	r3, r1, r3
 8007a86:	6979      	ldr	r1, [r7, #20]
 8007a88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	634b      	str	r3, [r1, #52]	; 0x34
 8007a90:	e127      	b.n	8007ce2 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a98:	689b      	ldr	r3, [r3, #8]
 8007a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d110      	bne.n	8007ac4 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	015a      	lsls	r2, r3, #5
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	4413      	add	r3, r2
 8007aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	0151      	lsls	r1, r2, #5
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	440a      	add	r2, r1
 8007ab8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007abc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007ac0:	6013      	str	r3, [r2, #0]
 8007ac2:	e00f      	b.n	8007ae4 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	015a      	lsls	r2, r3, #5
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	4413      	add	r3, r2
 8007acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	693a      	ldr	r2, [r7, #16]
 8007ad4:	0151      	lsls	r1, r2, #5
 8007ad6:	697a      	ldr	r2, [r7, #20]
 8007ad8:	440a      	add	r2, r1
 8007ada:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ae2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	68d9      	ldr	r1, [r3, #12]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	781a      	ldrb	r2, [r3, #0]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	691b      	ldr	r3, [r3, #16]
 8007af0:	b29b      	uxth	r3, r3
 8007af2:	6878      	ldr	r0, [r7, #4]
 8007af4:	f000 f9a6 	bl	8007e44 <USB_WritePacket>
 8007af8:	e0f3      	b.n	8007ce2 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	693a      	ldr	r2, [r7, #16]
 8007b0a:	0151      	lsls	r1, r2, #5
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	440a      	add	r2, r1
 8007b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b14:	0cdb      	lsrs	r3, r3, #19
 8007b16:	04db      	lsls	r3, r3, #19
 8007b18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	0151      	lsls	r1, r2, #5
 8007b2c:	697a      	ldr	r2, [r7, #20]
 8007b2e:	440a      	add	r2, r1
 8007b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b3c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d12f      	bne.n	8007ba4 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	691b      	ldr	r3, [r3, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d003      	beq.n	8007b54 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	689a      	ldr	r2, [r3, #8]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b68:	691a      	ldr	r2, [r3, #16]
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b72:	6939      	ldr	r1, [r7, #16]
 8007b74:	0148      	lsls	r0, r1, #5
 8007b76:	6979      	ldr	r1, [r7, #20]
 8007b78:	4401      	add	r1, r0
 8007b7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	015a      	lsls	r2, r3, #5
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	4413      	add	r3, r2
 8007b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	0151      	lsls	r1, r2, #5
 8007b94:	697a      	ldr	r2, [r7, #20]
 8007b96:	440a      	add	r2, r1
 8007b98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007ba0:	6113      	str	r3, [r2, #16]
 8007ba2:	e061      	b.n	8007c68 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d125      	bne.n	8007bf8 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb8:	691a      	ldr	r2, [r3, #16]
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bc2:	6939      	ldr	r1, [r7, #16]
 8007bc4:	0148      	lsls	r0, r1, #5
 8007bc6:	6979      	ldr	r1, [r7, #20]
 8007bc8:	4401      	add	r1, r0
 8007bca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	015a      	lsls	r2, r3, #5
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	4413      	add	r3, r2
 8007bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	0151      	lsls	r1, r2, #5
 8007be4:	697a      	ldr	r2, [r7, #20]
 8007be6:	440a      	add	r2, r1
 8007be8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bf0:	6113      	str	r3, [r2, #16]
 8007bf2:	e039      	b.n	8007c68 <USB_EPStartXfer+0x3dc>
 8007bf4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	691a      	ldr	r2, [r3, #16]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	4413      	add	r3, r2
 8007c02:	1e5a      	subs	r2, r3, #1
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c0c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	89fa      	ldrh	r2, [r7, #14]
 8007c14:	fb03 f202 	mul.w	r2, r3, r2
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c28:	691a      	ldr	r2, [r3, #16]
 8007c2a:	89fb      	ldrh	r3, [r7, #14]
 8007c2c:	04d9      	lsls	r1, r3, #19
 8007c2e:	4b2f      	ldr	r3, [pc, #188]	; (8007cec <USB_EPStartXfer+0x460>)
 8007c30:	400b      	ands	r3, r1
 8007c32:	6939      	ldr	r1, [r7, #16]
 8007c34:	0148      	lsls	r0, r1, #5
 8007c36:	6979      	ldr	r1, [r7, #20]
 8007c38:	4401      	add	r1, r0
 8007c3a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	015a      	lsls	r2, r3, #5
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	4413      	add	r3, r2
 8007c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4e:	691a      	ldr	r2, [r3, #16]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	6a1b      	ldr	r3, [r3, #32]
 8007c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c58:	6939      	ldr	r1, [r7, #16]
 8007c5a:	0148      	lsls	r0, r1, #5
 8007c5c:	6979      	ldr	r1, [r7, #20]
 8007c5e:	4401      	add	r1, r0
 8007c60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c64:	4313      	orrs	r3, r2
 8007c66:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	791b      	ldrb	r3, [r3, #4]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d128      	bne.n	8007cc2 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c70:	697b      	ldr	r3, [r7, #20]
 8007c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d110      	bne.n	8007ca2 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	0151      	lsls	r1, r2, #5
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	440a      	add	r2, r1
 8007c96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c9e:	6013      	str	r3, [r2, #0]
 8007ca0:	e00f      	b.n	8007cc2 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	015a      	lsls	r2, r3, #5
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	4413      	add	r3, r2
 8007caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	0151      	lsls	r1, r2, #5
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	440a      	add	r2, r1
 8007cb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cc0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	0151      	lsls	r1, r2, #5
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	440a      	add	r2, r1
 8007cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007ce0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3718      	adds	r7, #24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	1ff80000 	.word	0x1ff80000

08007cf0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b087      	sub	sp, #28
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	785b      	ldrb	r3, [r3, #1]
 8007d0a:	2b01      	cmp	r3, #1
 8007d0c:	d14a      	bne.n	8007da4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d26:	f040 8086 	bne.w	8007e36 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	7812      	ldrb	r2, [r2, #0]
 8007d3e:	0151      	lsls	r1, r2, #5
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	440a      	add	r2, r1
 8007d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d48:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d4c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	015a      	lsls	r2, r3, #5
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	4413      	add	r3, r2
 8007d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	7812      	ldrb	r2, [r2, #0]
 8007d62:	0151      	lsls	r1, r2, #5
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	440a      	add	r2, r1
 8007d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d6c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d70:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	3301      	adds	r3, #1
 8007d76:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d902      	bls.n	8007d88 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d82:	2301      	movs	r3, #1
 8007d84:	75fb      	strb	r3, [r7, #23]
          break;
 8007d86:	e056      	b.n	8007e36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007da0:	d0e7      	beq.n	8007d72 <USB_EPStopXfer+0x82>
 8007da2:	e048      	b.n	8007e36 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007db8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007dbc:	d13b      	bne.n	8007e36 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	015a      	lsls	r2, r3, #5
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	4413      	add	r3, r2
 8007dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	7812      	ldrb	r2, [r2, #0]
 8007dd2:	0151      	lsls	r1, r2, #5
 8007dd4:	693a      	ldr	r2, [r7, #16]
 8007dd6:	440a      	add	r2, r1
 8007dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ddc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007de0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	015a      	lsls	r2, r3, #5
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	4413      	add	r3, r2
 8007dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	683a      	ldr	r2, [r7, #0]
 8007df4:	7812      	ldrb	r2, [r2, #0]
 8007df6:	0151      	lsls	r1, r2, #5
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	440a      	add	r2, r1
 8007dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e00:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e04:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d902      	bls.n	8007e1c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e16:	2301      	movs	r3, #1
 8007e18:	75fb      	strb	r3, [r7, #23]
          break;
 8007e1a:	e00c      	b.n	8007e36 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	015a      	lsls	r2, r3, #5
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	4413      	add	r3, r2
 8007e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e34:	d0e7      	beq.n	8007e06 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e38:	4618      	mov	r0, r3
 8007e3a:	371c      	adds	r7, #28
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e42:	4770      	bx	lr

08007e44 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b089      	sub	sp, #36	; 0x24
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	60b9      	str	r1, [r7, #8]
 8007e4e:	4611      	mov	r1, r2
 8007e50:	461a      	mov	r2, r3
 8007e52:	460b      	mov	r3, r1
 8007e54:	71fb      	strb	r3, [r7, #7]
 8007e56:	4613      	mov	r3, r2
 8007e58:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007e62:	88bb      	ldrh	r3, [r7, #4]
 8007e64:	3303      	adds	r3, #3
 8007e66:	089b      	lsrs	r3, r3, #2
 8007e68:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	61bb      	str	r3, [r7, #24]
 8007e6e:	e018      	b.n	8007ea2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	031a      	lsls	r2, r3, #12
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	69fb      	ldr	r3, [r7, #28]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007e84:	69fb      	ldr	r3, [r7, #28]
 8007e86:	3301      	adds	r3, #1
 8007e88:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	3301      	adds	r3, #1
 8007e94:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	61bb      	str	r3, [r7, #24]
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	429a      	cmp	r2, r3
 8007ea8:	d3e2      	bcc.n	8007e70 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3724      	adds	r7, #36	; 0x24
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b08b      	sub	sp, #44	; 0x2c
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	60f8      	str	r0, [r7, #12]
 8007ec0:	60b9      	str	r1, [r7, #8]
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007ece:	88fb      	ldrh	r3, [r7, #6]
 8007ed0:	089b      	lsrs	r3, r3, #2
 8007ed2:	b29b      	uxth	r3, r3
 8007ed4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ed6:	88fb      	ldrh	r3, [r7, #6]
 8007ed8:	f003 0303 	and.w	r3, r3, #3
 8007edc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007ede:	2300      	movs	r3, #0
 8007ee0:	623b      	str	r3, [r7, #32]
 8007ee2:	e014      	b.n	8007f0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	3301      	adds	r3, #1
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	3301      	adds	r3, #1
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	3301      	adds	r3, #1
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	623b      	str	r3, [r7, #32]
 8007f0e:	6a3a      	ldr	r2, [r7, #32]
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	429a      	cmp	r2, r3
 8007f14:	d3e6      	bcc.n	8007ee4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f16:	8bfb      	ldrh	r3, [r7, #30]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d01e      	beq.n	8007f5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f26:	461a      	mov	r2, r3
 8007f28:	f107 0310 	add.w	r3, r7, #16
 8007f2c:	6812      	ldr	r2, [r2, #0]
 8007f2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	6a3b      	ldr	r3, [r7, #32]
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	00db      	lsls	r3, r3, #3
 8007f38:	fa22 f303 	lsr.w	r3, r2, r3
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f40:	701a      	strb	r2, [r3, #0]
      i++;
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	3301      	adds	r3, #1
 8007f46:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4a:	3301      	adds	r3, #1
 8007f4c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007f4e:	8bfb      	ldrh	r3, [r7, #30]
 8007f50:	3b01      	subs	r3, #1
 8007f52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f54:	8bfb      	ldrh	r3, [r7, #30]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d1ea      	bne.n	8007f30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	372c      	adds	r7, #44	; 0x2c
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	785b      	ldrb	r3, [r3, #1]
 8007f80:	2b01      	cmp	r3, #1
 8007f82:	d12c      	bne.n	8007fde <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	db12      	blt.n	8007fbc <USB_EPSetStall+0x54>
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d00f      	beq.n	8007fbc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	015a      	lsls	r2, r3, #5
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	0151      	lsls	r1, r2, #5
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	440a      	add	r2, r1
 8007fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fb6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	0151      	lsls	r1, r2, #5
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	440a      	add	r2, r1
 8007fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	e02b      	b.n	8008036 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	015a      	lsls	r2, r3, #5
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	4413      	add	r3, r2
 8007fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	db12      	blt.n	8008016 <USB_EPSetStall+0xae>
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00f      	beq.n	8008016 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	015a      	lsls	r2, r3, #5
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4413      	add	r3, r2
 8007ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	68ba      	ldr	r2, [r7, #8]
 8008006:	0151      	lsls	r1, r2, #5
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	440a      	add	r2, r1
 800800c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008010:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008014:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	015a      	lsls	r2, r3, #5
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	4413      	add	r3, r2
 800801e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	68ba      	ldr	r2, [r7, #8]
 8008026:	0151      	lsls	r1, r2, #5
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	440a      	add	r2, r1
 800802c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008030:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008034:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008036:	2300      	movs	r3, #0
}
 8008038:	4618      	mov	r0, r3
 800803a:	3714      	adds	r7, #20
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008044:	b480      	push	{r7}
 8008046:	b085      	sub	sp, #20
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	785b      	ldrb	r3, [r3, #1]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d128      	bne.n	80080b2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	015a      	lsls	r2, r3, #5
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68ba      	ldr	r2, [r7, #8]
 8008070:	0151      	lsls	r1, r2, #5
 8008072:	68fa      	ldr	r2, [r7, #12]
 8008074:	440a      	add	r2, r1
 8008076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800807a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800807e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	791b      	ldrb	r3, [r3, #4]
 8008084:	2b03      	cmp	r3, #3
 8008086:	d003      	beq.n	8008090 <USB_EPClearStall+0x4c>
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	791b      	ldrb	r3, [r3, #4]
 800808c:	2b02      	cmp	r3, #2
 800808e:	d138      	bne.n	8008102 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	4413      	add	r3, r2
 8008098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68ba      	ldr	r2, [r7, #8]
 80080a0:	0151      	lsls	r1, r2, #5
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	440a      	add	r2, r1
 80080a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	e027      	b.n	8008102 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	015a      	lsls	r2, r3, #5
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	4413      	add	r3, r2
 80080ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	68ba      	ldr	r2, [r7, #8]
 80080c2:	0151      	lsls	r1, r2, #5
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	440a      	add	r2, r1
 80080c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080d0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	791b      	ldrb	r3, [r3, #4]
 80080d6:	2b03      	cmp	r3, #3
 80080d8:	d003      	beq.n	80080e2 <USB_EPClearStall+0x9e>
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	791b      	ldrb	r3, [r3, #4]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d10f      	bne.n	8008102 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	015a      	lsls	r2, r3, #5
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	4413      	add	r3, r2
 80080ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	68ba      	ldr	r2, [r7, #8]
 80080f2:	0151      	lsls	r1, r2, #5
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	440a      	add	r2, r1
 80080f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008100:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3714      	adds	r7, #20
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	68fa      	ldr	r2, [r7, #12]
 800812a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800812e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008132:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	78fb      	ldrb	r3, [r7, #3]
 800813e:	011b      	lsls	r3, r3, #4
 8008140:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008144:	68f9      	ldr	r1, [r7, #12]
 8008146:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800814a:	4313      	orrs	r3, r2
 800814c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008176:	f023 0303 	bic.w	r3, r3, #3
 800817a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800818a:	f023 0302 	bic.w	r3, r3, #2
 800818e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008190:	2300      	movs	r3, #0
}
 8008192:	4618      	mov	r0, r3
 8008194:	3714      	adds	r7, #20
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800819e:	b480      	push	{r7}
 80081a0:	b085      	sub	sp, #20
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081b8:	f023 0303 	bic.w	r3, r3, #3
 80081bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	68fa      	ldr	r2, [r7, #12]
 80081c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081cc:	f043 0302 	orr.w	r3, r3, #2
 80081d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081d2:	2300      	movs	r3, #0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3714      	adds	r7, #20
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	695b      	ldr	r3, [r3, #20]
 80081ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	699b      	ldr	r3, [r3, #24]
 80081f2:	68fa      	ldr	r2, [r7, #12]
 80081f4:	4013      	ands	r3, r2
 80081f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80081f8:	68fb      	ldr	r3, [r7, #12]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3714      	adds	r7, #20
 80081fe:	46bd      	mov	sp, r7
 8008200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008204:	4770      	bx	lr

08008206 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008206:	b480      	push	{r7}
 8008208:	b085      	sub	sp, #20
 800820a:	af00      	add	r7, sp, #0
 800820c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008218:	699b      	ldr	r3, [r3, #24]
 800821a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	4013      	ands	r3, r2
 8008228:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	0c1b      	lsrs	r3, r3, #16
}
 800822e:	4618      	mov	r0, r3
 8008230:	3714      	adds	r7, #20
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr

0800823a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800823a:	b480      	push	{r7}
 800823c:	b085      	sub	sp, #20
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	4013      	ands	r3, r2
 800825c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	b29b      	uxth	r3, r3
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr

0800826e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800826e:	b480      	push	{r7}
 8008270:	b085      	sub	sp, #20
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	460b      	mov	r3, r1
 8008278:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800827e:	78fb      	ldrb	r3, [r7, #3]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	4413      	add	r3, r2
 8008286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008294:	695b      	ldr	r3, [r3, #20]
 8008296:	68ba      	ldr	r2, [r7, #8]
 8008298:	4013      	ands	r3, r2
 800829a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800829c:	68bb      	ldr	r3, [r7, #8]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082aa:	b480      	push	{r7}
 80082ac:	b087      	sub	sp, #28
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	460b      	mov	r3, r1
 80082b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082c0:	691b      	ldr	r3, [r3, #16]
 80082c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80082c4:	697b      	ldr	r3, [r7, #20]
 80082c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80082ce:	78fb      	ldrb	r3, [r7, #3]
 80082d0:	f003 030f 	and.w	r3, r3, #15
 80082d4:	68fa      	ldr	r2, [r7, #12]
 80082d6:	fa22 f303 	lsr.w	r3, r2, r3
 80082da:	01db      	lsls	r3, r3, #7
 80082dc:	b2db      	uxtb	r3, r3
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80082e4:	78fb      	ldrb	r3, [r7, #3]
 80082e6:	015a      	lsls	r2, r3, #5
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	4413      	add	r3, r2
 80082ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	693a      	ldr	r2, [r7, #16]
 80082f4:	4013      	ands	r3, r2
 80082f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082f8:	68bb      	ldr	r3, [r7, #8]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	371c      	adds	r7, #28
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr

08008306 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008306:	b480      	push	{r7}
 8008308:	b083      	sub	sp, #12
 800830a:	af00      	add	r7, sp, #0
 800830c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	695b      	ldr	r3, [r3, #20]
 8008312:	f003 0301 	and.w	r3, r3, #1
}
 8008316:	4618      	mov	r0, r3
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr

08008322 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8008322:	b480      	push	{r7}
 8008324:	b085      	sub	sp, #20
 8008326:	af00      	add	r7, sp, #0
 8008328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800833c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008340:	f023 0307 	bic.w	r3, r3, #7
 8008344:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008358:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3714      	adds	r7, #20
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	333c      	adds	r3, #60	; 0x3c
 800837a:	3304      	adds	r3, #4
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4a1c      	ldr	r2, [pc, #112]	; (80083f4 <USB_EP0_OutStart+0x8c>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d90a      	bls.n	800839e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008394:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008398:	d101      	bne.n	800839e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800839a:	2300      	movs	r3, #0
 800839c:	e024      	b.n	80083e8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a4:	461a      	mov	r2, r3
 80083a6:	2300      	movs	r3, #0
 80083a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	68fa      	ldr	r2, [r7, #12]
 80083b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	68fa      	ldr	r2, [r7, #12]
 80083c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083cc:	f043 0318 	orr.w	r3, r3, #24
 80083d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d8:	691b      	ldr	r3, [r3, #16]
 80083da:	68fa      	ldr	r2, [r7, #12]
 80083dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80083e4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3714      	adds	r7, #20
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr
 80083f4:	4f54300a 	.word	0x4f54300a

080083f8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	3301      	adds	r3, #1
 8008408:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	4a13      	ldr	r2, [pc, #76]	; (800845c <USB_CoreReset+0x64>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d901      	bls.n	8008416 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e01b      	b.n	800844e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	2b00      	cmp	r3, #0
 800841c:	daf2      	bge.n	8008404 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800841e:	2300      	movs	r3, #0
 8008420:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	f043 0201 	orr.w	r2, r3, #1
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3301      	adds	r3, #1
 8008432:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	4a09      	ldr	r2, [pc, #36]	; (800845c <USB_CoreReset+0x64>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d901      	bls.n	8008440 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	e006      	b.n	800844e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	691b      	ldr	r3, [r3, #16]
 8008444:	f003 0301 	and.w	r3, r3, #1
 8008448:	2b01      	cmp	r3, #1
 800844a:	d0f0      	beq.n	800842e <USB_CoreReset+0x36>

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	00030d40 	.word	0x00030d40

08008460 <USBD_AUDIO_Init>:
 *         Initialize the AUDIO interface
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);
	USBD_AUDIO_HandleTypeDef *haudio;

	/* Allocate Audio structure */
	haudio = (USBD_AUDIO_HandleTypeDef*) USBD_malloc (
 800846c:	f641 6050 	movw	r0, #7760	; 0x1e50
 8008470:	f005 ff3c 	bl	800e2ec <USBD_static_malloc>
 8008474:	60f8      	str	r0, [r7, #12]
			sizeof(USBD_AUDIO_HandleTypeDef));

	if (haudio == NULL) {
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d109      	bne.n	8008490 <USBD_AUDIO_Init+0x30>
		pdev->pClassDataCmsit[pdev->classId] = NULL;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	32b0      	adds	r2, #176	; 0xb0
 8008486:	2100      	movs	r1, #0
 8008488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return (uint8_t) USBD_EMEM;
 800848c:	2302      	movs	r3, #2
 800848e:	e07e      	b.n	800858e <USBD_AUDIO_Init+0x12e>
	}

	pdev->pClassDataCmsit[pdev->classId] = (void*) haudio;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	32b0      	adds	r2, #176	; 0xb0
 800849a:	68f9      	ldr	r1, [r7, #12]
 800849c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	32b0      	adds	r2, #176	; 0xb0
 80084aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

	if (pdev->dev_speed == USBD_SPEED_HIGH) {
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	7c1b      	ldrb	r3, [r3, #16]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10e      	bne.n	80084da <USBD_AUDIO_Init+0x7a>
		pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 80084bc:	4b36      	ldr	r3, [pc, #216]	; (8008598 <USBD_AUDIO_Init+0x138>)
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	f003 020f 	and.w	r2, r3, #15
 80084c4:	6879      	ldr	r1, [r7, #4]
 80084c6:	4613      	mov	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	440b      	add	r3, r1
 80084d0:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80084d4:	2201      	movs	r2, #1
 80084d6:	801a      	strh	r2, [r3, #0]
 80084d8:	e00d      	b.n	80084f6 <USBD_AUDIO_Init+0x96>
	} else /* LOW and FULL-speed endpoints */
	{
		pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 80084da:	4b2f      	ldr	r3, [pc, #188]	; (8008598 <USBD_AUDIO_Init+0x138>)
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	f003 020f 	and.w	r2, r3, #15
 80084e2:	6879      	ldr	r1, [r7, #4]
 80084e4:	4613      	mov	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	440b      	add	r3, r1
 80084ee:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80084f2:	2201      	movs	r2, #1
 80084f4:	801a      	strh	r2, [r3, #0]
	}

	/* Open EP OUT */
	(void) USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC,
 80084f6:	4b28      	ldr	r3, [pc, #160]	; (8008598 <USBD_AUDIO_Init+0x138>)
 80084f8:	7819      	ldrb	r1, [r3, #0]
 80084fa:	2360      	movs	r3, #96	; 0x60
 80084fc:	2201      	movs	r2, #1
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f005 fcf4 	bl	800deec <USBD_LL_OpenEP>
			AUDIO_OUT_PACKET);
	pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 8008504:	4b24      	ldr	r3, [pc, #144]	; (8008598 <USBD_AUDIO_Init+0x138>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	f003 020f 	and.w	r2, r3, #15
 800850c:	6879      	ldr	r1, [r7, #4]
 800850e:	4613      	mov	r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	440b      	add	r3, r1
 8008518:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800851c:	2201      	movs	r2, #1
 800851e:	801a      	strh	r2, [r3, #0]

	haudio->alt_setting = 0U;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
	haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800852c:	2203      	movs	r2, #3
 800852e:	f883 2e04 	strb.w	r2, [r3, #3588]	; 0xe04
	haudio->wr_ptr = 0U;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008538:	2200      	movs	r2, #0
 800853a:	f8a3 2e08 	strh.w	r2, [r3, #3592]	; 0xe08
	haudio->rd_ptr = 0U;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008544:	2200      	movs	r2, #0
 8008546:	f8a3 2e06 	strh.w	r2, [r3, #3590]	; 0xe06
	haudio->rd_enable = 0U;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008550:	2200      	movs	r2, #0
 8008552:	f883 2e05 	strb.w	r2, [r3, #3589]	; 0xe05

	/* Initialize the Audio output Hardware layer */
	if (((USBD_AUDIO_ItfTypeDef*) pdev->pUserData[pdev->classId])->Init(
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	33b0      	adds	r3, #176	; 0xb0
 8008560:	009b      	lsls	r3, r3, #2
 8008562:	4413      	add	r3, r2
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2200      	movs	r2, #0
 800856a:	2146      	movs	r1, #70	; 0x46
 800856c:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 8008570:	4798      	blx	r3
 8008572:	4603      	mov	r3, r0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d001      	beq.n	800857c <USBD_AUDIO_Init+0x11c>
			USBD_AUDIO_FREQ,
			AUDIO_DEFAULT_VOLUME, 0U) != 0U) {
		return (uint8_t) USBD_FAIL;
 8008578:	2303      	movs	r3, #3
 800857a:	e008      	b.n	800858e <USBD_AUDIO_Init+0x12e>
	}

	/* Prepare Out endpoint to receive 1st packet */
	(void) USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 800857c:	4b06      	ldr	r3, [pc, #24]	; (8008598 <USBD_AUDIO_Init+0x138>)
 800857e:	7819      	ldrb	r1, [r3, #0]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	1d1a      	adds	r2, r3, #4
 8008584:	2360      	movs	r3, #96	; 0x60
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f005 fe2a 	bl	800e1e0 <USBD_LL_PrepareReceive>
	AUDIO_OUT_PACKET);

	return (uint8_t) USBD_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	200000c6 	.word	0x200000c6

0800859c <USBD_AUDIO_DeInit>:
 *         DeInitialize the AUDIO layer
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	460b      	mov	r3, r1
 80085a6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

	/* Open EP OUT */
	(void) USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 80085a8:	4b28      	ldr	r3, [pc, #160]	; (800864c <USBD_AUDIO_DeInit+0xb0>)
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f005 fcda 	bl	800df68 <USBD_LL_CloseEP>
	pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 80085b4:	4b25      	ldr	r3, [pc, #148]	; (800864c <USBD_AUDIO_DeInit+0xb0>)
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	f003 020f 	and.w	r2, r3, #15
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	4613      	mov	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4413      	add	r3, r2
 80085c4:	009b      	lsls	r3, r3, #2
 80085c6:	440b      	add	r3, r1
 80085c8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085cc:	2200      	movs	r2, #0
 80085ce:	801a      	strh	r2, [r3, #0]
	pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 80085d0:	4b1e      	ldr	r3, [pc, #120]	; (800864c <USBD_AUDIO_DeInit+0xb0>)
 80085d2:	781b      	ldrb	r3, [r3, #0]
 80085d4:	f003 020f 	and.w	r2, r3, #15
 80085d8:	6879      	ldr	r1, [r7, #4]
 80085da:	4613      	mov	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	4413      	add	r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	440b      	add	r3, r1
 80085e4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80085e8:	2200      	movs	r2, #0
 80085ea:	801a      	strh	r2, [r3, #0]

	/* DeInit  physical Interface components */
	if (pdev->pClassDataCmsit[pdev->classId] != NULL) {
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	32b0      	adds	r2, #176	; 0xb0
 80085f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d020      	beq.n	8008640 <USBD_AUDIO_DeInit+0xa4>
		((USBD_AUDIO_ItfTypeDef*) pdev->pUserData[pdev->classId])->DeInit(0U);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	33b0      	adds	r3, #176	; 0xb0
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	685b      	ldr	r3, [r3, #4]
 8008610:	2000      	movs	r0, #0
 8008612:	4798      	blx	r3
		(void) USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	32b0      	adds	r2, #176	; 0xb0
 800861e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008622:	4618      	mov	r0, r3
 8008624:	f005 fe70 	bl	800e308 <USBD_static_free>
		pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	32b0      	adds	r2, #176	; 0xb0
 8008632:	2100      	movs	r1, #0
 8008634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pdev->pClassData = NULL;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2200      	movs	r2, #0
 800863c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	}

	return (uint8_t) USBD_OK;
 8008640:	2300      	movs	r3, #0
}
 8008642:	4618      	mov	r0, r3
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	200000c6 	.word	0x200000c6

08008650 <USBD_AUDIO_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req) {
 8008650:	b580      	push	{r7, lr}
 8008652:	b086      	sub	sp, #24
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
	USBD_AUDIO_HandleTypeDef *haudio;
	uint16_t len;
	uint8_t *pbuf;
	uint16_t status_info = 0U;
 800865a:	2300      	movs	r3, #0
 800865c:	813b      	strh	r3, [r7, #8]
	USBD_StatusTypeDef ret = USBD_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	75fb      	strb	r3, [r7, #23]

	haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	32b0      	adds	r2, #176	; 0xb0
 800866c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008670:	613b      	str	r3, [r7, #16]

	if (haudio == NULL) {
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d101      	bne.n	800867c <USBD_AUDIO_Setup+0x2c>
		return (uint8_t) USBD_FAIL;
 8008678:	2303      	movs	r3, #3
 800867a:	e0c1      	b.n	8008800 <USBD_AUDIO_Setup+0x1b0>
	}

	switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008684:	2b00      	cmp	r3, #0
 8008686:	d01a      	beq.n	80086be <USBD_AUDIO_Setup+0x6e>
 8008688:	2b20      	cmp	r3, #32
 800868a:	f040 80b1 	bne.w	80087f0 <USBD_AUDIO_Setup+0x1a0>
	case USB_REQ_TYPE_CLASS:
		switch (req->bRequest) {
 800868e:	683b      	ldr	r3, [r7, #0]
 8008690:	785b      	ldrb	r3, [r3, #1]
 8008692:	2b01      	cmp	r3, #1
 8008694:	d006      	beq.n	80086a4 <USBD_AUDIO_Setup+0x54>
 8008696:	2b81      	cmp	r3, #129	; 0x81
 8008698:	d109      	bne.n	80086ae <USBD_AUDIO_Setup+0x5e>
		case AUDIO_REQ_GET_CUR:
			AUDIO_REQ_GetCurrent(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 f9b3 	bl	8008a08 <AUDIO_REQ_GetCurrent>
			break;
 80086a2:	e00b      	b.n	80086bc <USBD_AUDIO_Setup+0x6c>

		case AUDIO_REQ_SET_CUR:
			AUDIO_REQ_SetCurrent(pdev, req);
 80086a4:	6839      	ldr	r1, [r7, #0]
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f9da 	bl	8008a60 <AUDIO_REQ_SetCurrent>
			break;
 80086ac:	e006      	b.n	80086bc <USBD_AUDIO_Setup+0x6c>

		default:
			USBD_CtlError(pdev, req);
 80086ae:	6839      	ldr	r1, [r7, #0]
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f001 fc6e 	bl	8009f92 <USBD_CtlError>
			ret = USBD_FAIL;
 80086b6:	2303      	movs	r3, #3
 80086b8:	75fb      	strb	r3, [r7, #23]
			break;
 80086ba:	bf00      	nop
		}
		break;
 80086bc:	e09f      	b.n	80087fe <USBD_AUDIO_Setup+0x1ae>

	case USB_REQ_TYPE_STANDARD:
		switch (req->bRequest) {
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	785b      	ldrb	r3, [r3, #1]
 80086c2:	2b0b      	cmp	r3, #11
 80086c4:	f200 8089 	bhi.w	80087da <USBD_AUDIO_Setup+0x18a>
 80086c8:	a201      	add	r2, pc, #4	; (adr r2, 80086d0 <USBD_AUDIO_Setup+0x80>)
 80086ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ce:	bf00      	nop
 80086d0:	08008701 	.word	0x08008701
 80086d4:	080087e9 	.word	0x080087e9
 80086d8:	080087db 	.word	0x080087db
 80086dc:	080087db 	.word	0x080087db
 80086e0:	080087db 	.word	0x080087db
 80086e4:	080087db 	.word	0x080087db
 80086e8:	0800872b 	.word	0x0800872b
 80086ec:	080087db 	.word	0x080087db
 80086f0:	080087db 	.word	0x080087db
 80086f4:	080087db 	.word	0x080087db
 80086f8:	08008773 	.word	0x08008773
 80086fc:	0800879b 	.word	0x0800879b
		case USB_REQ_GET_STATUS:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008706:	b2db      	uxtb	r3, r3
 8008708:	2b03      	cmp	r3, #3
 800870a:	d107      	bne.n	800871c <USBD_AUDIO_Setup+0xcc>
				(void) USBD_CtlSendData(pdev, (uint8_t*) &status_info, 2U);
 800870c:	f107 0308 	add.w	r3, r7, #8
 8008710:	2202      	movs	r2, #2
 8008712:	4619      	mov	r1, r3
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f001 fcad 	bl	800a074 <USBD_CtlSendData>
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 800871a:	e068      	b.n	80087ee <USBD_AUDIO_Setup+0x19e>
				USBD_CtlError(pdev, req);
 800871c:	6839      	ldr	r1, [r7, #0]
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f001 fc37 	bl	8009f92 <USBD_CtlError>
				ret = USBD_FAIL;
 8008724:	2303      	movs	r3, #3
 8008726:	75fb      	strb	r3, [r7, #23]
			break;
 8008728:	e061      	b.n	80087ee <USBD_AUDIO_Setup+0x19e>

		case USB_REQ_GET_DESCRIPTOR:
			if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE) {
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	885b      	ldrh	r3, [r3, #2]
 800872e:	0a1b      	lsrs	r3, r3, #8
 8008730:	b29b      	uxth	r3, r3
 8008732:	2b21      	cmp	r3, #33	; 0x21
 8008734:	d15a      	bne.n	80087ec <USBD_AUDIO_Setup+0x19c>
				pbuf = (uint8_t*) USBD_AUDIO_GetAudioHeaderDesc(
						pdev->pConfDesc);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
				pbuf = (uint8_t*) USBD_AUDIO_GetAudioHeaderDesc(
 800873c:	4618      	mov	r0, r3
 800873e:	f000 f9fd 	bl	8008b3c <USBD_AUDIO_GetAudioHeaderDesc>
 8008742:	60f8      	str	r0, [r7, #12]
				if (pbuf != NULL) {
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d00c      	beq.n	8008764 <USBD_AUDIO_Setup+0x114>
					len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	88db      	ldrh	r3, [r3, #6]
 800874e:	2b09      	cmp	r3, #9
 8008750:	bf28      	it	cs
 8008752:	2309      	movcs	r3, #9
 8008754:	817b      	strh	r3, [r7, #10]
					(void) USBD_CtlSendData(pdev, pbuf, len);
 8008756:	897b      	ldrh	r3, [r7, #10]
 8008758:	461a      	mov	r2, r3
 800875a:	68f9      	ldr	r1, [r7, #12]
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f001 fc89 	bl	800a074 <USBD_CtlSendData>
				} else {
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
			}
			break;
 8008762:	e043      	b.n	80087ec <USBD_AUDIO_Setup+0x19c>
					USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 fc13 	bl	8009f92 <USBD_CtlError>
					ret = USBD_FAIL;
 800876c:	2303      	movs	r3, #3
 800876e:	75fb      	strb	r3, [r7, #23]
			break;
 8008770:	e03c      	b.n	80087ec <USBD_AUDIO_Setup+0x19c>

		case USB_REQ_GET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008778:	b2db      	uxtb	r3, r3
 800877a:	2b03      	cmp	r3, #3
 800877c:	d106      	bne.n	800878c <USBD_AUDIO_Setup+0x13c>
				(void) USBD_CtlSendData(pdev, (uint8_t*) &haudio->alt_setting,
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	2201      	movs	r2, #1
 8008782:	4619      	mov	r1, r3
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 fc75 	bl	800a074 <USBD_CtlSendData>
						1U);
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 800878a:	e030      	b.n	80087ee <USBD_AUDIO_Setup+0x19e>
				USBD_CtlError(pdev, req);
 800878c:	6839      	ldr	r1, [r7, #0]
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f001 fbff 	bl	8009f92 <USBD_CtlError>
				ret = USBD_FAIL;
 8008794:	2303      	movs	r3, #3
 8008796:	75fb      	strb	r3, [r7, #23]
			break;
 8008798:	e029      	b.n	80087ee <USBD_AUDIO_Setup+0x19e>

		case USB_REQ_SET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d112      	bne.n	80087cc <USBD_AUDIO_Setup+0x17c>
				if ((uint8_t) (req->wValue) <= USBD_MAX_NUM_INTERFACES) {
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	885b      	ldrh	r3, [r3, #2]
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d806      	bhi.n	80087be <USBD_AUDIO_Setup+0x16e>
					haudio->alt_setting = (uint8_t) (req->wValue);
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	885b      	ldrh	r3, [r3, #2]
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	461a      	mov	r2, r3
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	601a      	str	r2, [r3, #0]
				}
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 80087bc:	e017      	b.n	80087ee <USBD_AUDIO_Setup+0x19e>
					USBD_CtlError(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f001 fbe6 	bl	8009f92 <USBD_CtlError>
					ret = USBD_FAIL;
 80087c6:	2303      	movs	r3, #3
 80087c8:	75fb      	strb	r3, [r7, #23]
			break;
 80087ca:	e010      	b.n	80087ee <USBD_AUDIO_Setup+0x19e>
				USBD_CtlError(pdev, req);
 80087cc:	6839      	ldr	r1, [r7, #0]
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f001 fbdf 	bl	8009f92 <USBD_CtlError>
				ret = USBD_FAIL;
 80087d4:	2303      	movs	r3, #3
 80087d6:	75fb      	strb	r3, [r7, #23]
			break;
 80087d8:	e009      	b.n	80087ee <USBD_AUDIO_Setup+0x19e>

		case USB_REQ_CLEAR_FEATURE:
			break;

		default:
			USBD_CtlError(pdev, req);
 80087da:	6839      	ldr	r1, [r7, #0]
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f001 fbd8 	bl	8009f92 <USBD_CtlError>
			ret = USBD_FAIL;
 80087e2:	2303      	movs	r3, #3
 80087e4:	75fb      	strb	r3, [r7, #23]
			break;
 80087e6:	e002      	b.n	80087ee <USBD_AUDIO_Setup+0x19e>
			break;
 80087e8:	bf00      	nop
 80087ea:	e008      	b.n	80087fe <USBD_AUDIO_Setup+0x1ae>
			break;
 80087ec:	bf00      	nop
		}
		break;
 80087ee:	e006      	b.n	80087fe <USBD_AUDIO_Setup+0x1ae>
	default:
		USBD_CtlError(pdev, req);
 80087f0:	6839      	ldr	r1, [r7, #0]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f001 fbcd 	bl	8009f92 <USBD_CtlError>
		ret = USBD_FAIL;
 80087f8:	2303      	movs	r3, #3
 80087fa:	75fb      	strb	r3, [r7, #23]
		break;
 80087fc:	bf00      	nop
	}

	return (uint8_t) ret;
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008800:	4618      	mov	r0, r3
 8008802:	3718      	adds	r7, #24
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <USBD_AUDIO_GetCfgDesc>:
 * @brief  USBD_AUDIO_GetCfgDesc
 *         return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_AUDIO_GetCfgDesc(uint16_t *length) {
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
	*length = (uint16_t) sizeof(USBD_AUDIO_CfgDesc);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	226d      	movs	r2, #109	; 0x6d
 8008814:	801a      	strh	r2, [r3, #0]

	return USBD_AUDIO_CfgDesc;
 8008816:	4b03      	ldr	r3, [pc, #12]	; (8008824 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8008818:	4618      	mov	r0, r3
 800881a:	370c      	adds	r7, #12
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr
 8008824:	2000004c 	.word	0x2000004c

08008828 <USBD_AUDIO_DataIn>:
 *         handle data IN Stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	460b      	mov	r3, r1
 8008832:	70fb      	strb	r3, [r7, #3]
	UNUSED(pdev);
	UNUSED(epnum);

	/* Only OUT data are processed */
	return (uint8_t) USBD_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr

08008842 <USBD_AUDIO_EP0_RxReady>:
 * @brief  USBD_AUDIO_EP0_RxReady
 *         handle EP0 Rx Ready event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev) {
 8008842:	b580      	push	{r7, lr}
 8008844:	b084      	sub	sp, #16
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
	USBD_AUDIO_HandleTypeDef *haudio;
	haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	32b0      	adds	r2, #176	; 0xb0
 8008854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008858:	60fb      	str	r3, [r7, #12]

	if (haudio == NULL) {
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d101      	bne.n	8008864 <USBD_AUDIO_EP0_RxReady+0x22>
		return (uint8_t) USBD_FAIL;
 8008860:	2303      	movs	r3, #3
 8008862:	e02a      	b.n	80088ba <USBD_AUDIO_EP0_RxReady+0x78>
	}

	if (haudio->control.cmd == AUDIO_REQ_SET_CUR) {
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800886a:	f893 3e0a 	ldrb.w	r3, [r3, #3594]	; 0xe0a
 800886e:	2b01      	cmp	r3, #1
 8008870:	d122      	bne.n	80088b8 <USBD_AUDIO_EP0_RxReady+0x76>
		/* In this driver, to simplify code, only SET_CUR request is managed */

		if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL) {
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008878:	f893 3e4c 	ldrb.w	r3, [r3, #3660]	; 0xe4c
 800887c:	2b02      	cmp	r3, #2
 800887e:	d11b      	bne.n	80088b8 <USBD_AUDIO_EP0_RxReady+0x76>
			((USBD_AUDIO_ItfTypeDef*) pdev->pUserData[pdev->classId])->MuteCtl(
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	33b0      	adds	r3, #176	; 0xb0
 800888a:	009b      	lsls	r3, r3, #2
 800888c:	4413      	add	r3, r2
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008898:	f892 2e0b 	ldrb.w	r2, [r2, #3595]	; 0xe0b
 800889c:	4610      	mov	r0, r2
 800889e:	4798      	blx	r3
					haudio->control.data[0]);
			haudio->control.cmd = 0U;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088a6:	2200      	movs	r2, #0
 80088a8:	f883 2e0a 	strb.w	r2, [r3, #3594]	; 0xe0a
			haudio->control.len = 0U;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088b2:	2200      	movs	r2, #0
 80088b4:	f883 2e4b 	strb.w	r2, [r3, #3659]	; 0xe4b
		}
	}

	return (uint8_t) USBD_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3710      	adds	r7, #16
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <USBD_AUDIO_EP0_TxReady>:
 * @brief  USBD_AUDIO_EP0_TxReady
 *         handle EP0 TRx Ready event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev) {
 80088c2:	b480      	push	{r7}
 80088c4:	b083      	sub	sp, #12
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
	UNUSED(pdev);

	/* Only OUT control data are processed */
	return (uint8_t) USBD_OK;
 80088ca:	2300      	movs	r3, #0
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <USBD_AUDIO_SOF>:
 * @brief  USBD_AUDIO_SOF
 *         handle SOF event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev) {
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
	UNUSED(pdev);

	return (uint8_t) USBD_OK;
 80088e0:	2300      	movs	r3, #0
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <USBD_AUDIO_IsoINIncomplete>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev,
		uint8_t epnum) {
 80088ee:	b480      	push	{r7}
 80088f0:	b083      	sub	sp, #12
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	460b      	mov	r3, r1
 80088f8:	70fb      	strb	r3, [r7, #3]
	UNUSED(pdev);
	UNUSED(epnum);

	return (uint8_t) USBD_OK;
 80088fa:	2300      	movs	r3, #0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <USBD_AUDIO_IsoOutIncomplete>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev,
		uint8_t epnum) {
 8008908:	b480      	push	{r7}
 800890a:	b083      	sub	sp, #12
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	460b      	mov	r3, r1
 8008912:	70fb      	strb	r3, [r7, #3]
	UNUSED(pdev);
	UNUSED(epnum);

	return (uint8_t) USBD_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	370c      	adds	r7, #12
 800891a:	46bd      	mov	sp, r7
 800891c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008920:	4770      	bx	lr
	...

08008924 <USBD_AUDIO_DataOut>:
 *         handle data OUT Stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	70fb      	strb	r3, [r7, #3]
	USBD_AUDIO_HandleTypeDef *haudio;
	haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008936:	60bb      	str	r3, [r7, #8]
	int i;
	if (epnum == AUDIO_OUT_EP) {
 8008938:	78fb      	ldrb	r3, [r7, #3]
 800893a:	2b01      	cmp	r3, #1
 800893c:	d157      	bne.n	80089ee <USBD_AUDIO_DataOut+0xca>
		audiobuf = (int16_t*) &haudio->buffer[haudio->wr_ptr];
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008944:	f8b3 3e08 	ldrh.w	r3, [r3, #3592]	; 0xe08
 8008948:	461a      	mov	r2, r3
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	4413      	add	r3, r2
 800894e:	3304      	adds	r3, #4
 8008950:	4a29      	ldr	r2, [pc, #164]	; (80089f8 <USBD_AUDIO_DataOut+0xd4>)
 8008952:	6013      	str	r3, [r2, #0]
		for (i = 0; i < 24; i++)
 8008954:	2300      	movs	r3, #0
 8008956:	60fb      	str	r3, [r7, #12]
 8008958:	e015      	b.n	8008986 <USBD_AUDIO_DataOut+0x62>
			mibuf[jj][i] = audiobuf[i];
 800895a:	4b27      	ldr	r3, [pc, #156]	; (80089f8 <USBD_AUDIO_DataOut+0xd4>)
 800895c:	681a      	ldr	r2, [r3, #0]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	005b      	lsls	r3, r3, #1
 8008962:	4413      	add	r3, r2
 8008964:	4a25      	ldr	r2, [pc, #148]	; (80089fc <USBD_AUDIO_DataOut+0xd8>)
 8008966:	7812      	ldrb	r2, [r2, #0]
 8008968:	f9b3 0000 	ldrsh.w	r0, [r3]
 800896c:	4924      	ldr	r1, [pc, #144]	; (8008a00 <USBD_AUDIO_DataOut+0xdc>)
 800896e:	4613      	mov	r3, r2
 8008970:	005b      	lsls	r3, r3, #1
 8008972:	4413      	add	r3, r2
 8008974:	00db      	lsls	r3, r3, #3
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	4413      	add	r3, r2
 800897a:	4602      	mov	r2, r0
 800897c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (i = 0; i < 24; i++)
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	3301      	adds	r3, #1
 8008984:	60fb      	str	r3, [r7, #12]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	2b17      	cmp	r3, #23
 800898a:	dde6      	ble.n	800895a <USBD_AUDIO_DataOut+0x36>
		jj++;
 800898c:	4b1b      	ldr	r3, [pc, #108]	; (80089fc <USBD_AUDIO_DataOut+0xd8>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	3301      	adds	r3, #1
 8008992:	b2da      	uxtb	r2, r3
 8008994:	4b19      	ldr	r3, [pc, #100]	; (80089fc <USBD_AUDIO_DataOut+0xd8>)
 8008996:	701a      	strb	r2, [r3, #0]
		disponible = 1;
 8008998:	4b1a      	ldr	r3, [pc, #104]	; (8008a04 <USBD_AUDIO_DataOut+0xe0>)
 800899a:	2201      	movs	r2, #1
 800899c:	701a      	strb	r2, [r3, #0]
		/* Increment the Buffer pointer or roll it back when all buffers are full */
		haudio->wr_ptr += AUDIO_OUT_PACKET;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089a4:	f8b3 3e08 	ldrh.w	r3, [r3, #3592]	; 0xe08
 80089a8:	3360      	adds	r3, #96	; 0x60
 80089aa:	b29a      	uxth	r2, r3
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089b2:	f8a3 2e08 	strh.w	r2, [r3, #3592]	; 0xe08
		if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE) {
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089bc:	f8b3 3e08 	ldrh.w	r3, [r3, #3592]	; 0xe08
 80089c0:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80089c4:	d105      	bne.n	80089d2 <USBD_AUDIO_DataOut+0xae>
			/* All buffers are full: roll back */
			haudio->wr_ptr = 0U;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089cc:	2200      	movs	r2, #0
 80089ce:	f8a3 2e08 	strh.w	r2, [r3, #3592]	; 0xe08
		}
		/* Prepare Out endpoint to receive next audio packet */
		USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
				&haudio->buffer[haudio->wr_ptr],
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089d8:	f8b3 3e08 	ldrh.w	r3, [r3, #3592]	; 0xe08
 80089dc:	461a      	mov	r2, r3
		USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	4413      	add	r3, r2
 80089e2:	1d1a      	adds	r2, r3, #4
 80089e4:	2360      	movs	r3, #96	; 0x60
 80089e6:	2101      	movs	r1, #1
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f005 fbf9 	bl	800e1e0 <USBD_LL_PrepareReceive>
				AUDIO_OUT_PACKET);
	}
	return USBD_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3710      	adds	r7, #16
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	20000460 	.word	0x20000460
 80089fc:	20003464 	.word	0x20003464
 8008a00:	20000464 	.word	0x20000464
 8008a04:	2000045c 	.word	0x2000045c

08008a08 <AUDIO_REQ_GetCurrent>:
 * @param  pdev: device instance
 * @param  req: setup class request
 * @retval status
 */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req) {
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
	USBD_AUDIO_HandleTypeDef *haudio;
	haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	32b0      	adds	r2, #176	; 0xb0
 8008a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a20:	60fb      	str	r3, [r7, #12]

	if (haudio == NULL) {
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d017      	beq.n	8008a58 <AUDIO_REQ_GetCurrent+0x50>
		return;
	}

	(void) USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8008a2e:	330b      	adds	r3, #11
 8008a30:	2240      	movs	r2, #64	; 0x40
 8008a32:	2100      	movs	r1, #0
 8008a34:	4618      	mov	r0, r3
 8008a36:	f005 fc77 	bl	800e328 <memset>

	/* Send the current mute state */
	(void) USBD_CtlSendData(pdev, haudio->control.data,
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8008a40:	330b      	adds	r3, #11
			MIN(req->wLength, USB_MAX_EP0_SIZE));
 8008a42:	683a      	ldr	r2, [r7, #0]
 8008a44:	88d2      	ldrh	r2, [r2, #6]
 8008a46:	2a40      	cmp	r2, #64	; 0x40
 8008a48:	bf28      	it	cs
 8008a4a:	2240      	movcs	r2, #64	; 0x40
 8008a4c:	b292      	uxth	r2, r2
	(void) USBD_CtlSendData(pdev, haudio->control.data,
 8008a4e:	4619      	mov	r1, r3
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f001 fb0f 	bl	800a074 <USBD_CtlSendData>
 8008a56:	e000      	b.n	8008a5a <AUDIO_REQ_GetCurrent+0x52>
		return;
 8008a58:	bf00      	nop
}
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <AUDIO_REQ_SetCurrent>:
 * @param  pdev: device instance
 * @param  req: setup class request
 * @retval status
 */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req) {
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
 8008a68:	6039      	str	r1, [r7, #0]
	USBD_AUDIO_HandleTypeDef *haudio;
	haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	32b0      	adds	r2, #176	; 0xb0
 8008a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a78:	60fb      	str	r3, [r7, #12]

	if (haudio == NULL) {
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d02f      	beq.n	8008ae0 <AUDIO_REQ_SetCurrent+0x80>
		return;
	}

	if (req->wLength != 0U) {
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	88db      	ldrh	r3, [r3, #6]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d02c      	beq.n	8008ae2 <AUDIO_REQ_SetCurrent+0x82>
		haudio->control.cmd = AUDIO_REQ_SET_CUR; /* Set the request value */
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 2e0a 	strb.w	r2, [r3, #3594]	; 0xe0a
		haudio->control.len = (uint8_t) MIN(req->wLength, USB_MAX_EP0_SIZE); /* Set the request data length */
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	88db      	ldrh	r3, [r3, #6]
 8008a98:	2b3f      	cmp	r3, #63	; 0x3f
 8008a9a:	d803      	bhi.n	8008aa4 <AUDIO_REQ_SetCurrent+0x44>
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	88db      	ldrh	r3, [r3, #6]
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	e000      	b.n	8008aa6 <AUDIO_REQ_SetCurrent+0x46>
 8008aa4:	2240      	movs	r2, #64	; 0x40
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008aac:	f883 2e4b 	strb.w	r2, [r3, #3659]	; 0xe4b
		haudio->control.unit = HIBYTE(req->wIndex); /* Set the request target unit */
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	889b      	ldrh	r3, [r3, #4]
 8008ab4:	0a1b      	lsrs	r3, r3, #8
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ac0:	f883 2e4c 	strb.w	r2, [r3, #3660]	; 0xe4c

		/* Prepare the reception of the buffer over EP0 */
		(void) USBD_CtlPrepareRx(pdev, haudio->control.data,
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 8008aca:	330b      	adds	r3, #11
				haudio->control.len);
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008ad2:	f892 2e4b 	ldrb.w	r2, [r2, #3659]	; 0xe4b
		(void) USBD_CtlPrepareRx(pdev, haudio->control.data,
 8008ad6:	4619      	mov	r1, r3
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 faf7 	bl	800a0cc <USBD_CtlPrepareRx>
 8008ade:	e000      	b.n	8008ae2 <AUDIO_REQ_SetCurrent+0x82>
		return;
 8008ae0:	bf00      	nop
	}
}
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <USBD_AUDIO_GetDeviceQualifierDesc>:
 * @brief  DeviceQualifierDescriptor
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length) {
 8008ae8:	b480      	push	{r7}
 8008aea:	b083      	sub	sp, #12
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
	*length = (uint16_t) sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	220a      	movs	r2, #10
 8008af4:	801a      	strh	r2, [r3, #0]

	return USBD_AUDIO_DeviceQualifierDesc;
 8008af6:	4b03      	ldr	r3, [pc, #12]	; (8008b04 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	370c      	adds	r7, #12
 8008afc:	46bd      	mov	sp, r7
 8008afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b02:	4770      	bx	lr
 8008b04:	200000bc 	.word	0x200000bc

08008b08 <USBD_AUDIO_RegisterInterface>:
 * @param  pdev: device instance
 * @param  fops: Audio interface callback
 * @retval status
 */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
		USBD_AUDIO_ItfTypeDef *fops) {
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
 8008b10:	6039      	str	r1, [r7, #0]
	if (fops == NULL) {
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d101      	bne.n	8008b1c <USBD_AUDIO_RegisterInterface+0x14>
		return (uint8_t) USBD_FAIL;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e009      	b.n	8008b30 <USBD_AUDIO_RegisterInterface+0x28>
	}

	pdev->pUserData[pdev->classId] = fops;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	33b0      	adds	r3, #176	; 0xb0
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	4413      	add	r3, r2
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	605a      	str	r2, [r3, #4]

	return (uint8_t) USBD_OK;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <USBD_AUDIO_GetAudioHeaderDesc>:
 *         This function return the Audio descriptor
 * @param  pdev: device instance
 * @param  pConfDesc:  pointer to Bos descriptor
 * @retval pointer to the Audio AC Header descriptor
 */
static void* USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc) {
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b086      	sub	sp, #24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
	USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef*) (void*) pConfDesc;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	60fb      	str	r3, [r7, #12]
	USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef*) (void*) pConfDesc;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	617b      	str	r3, [r7, #20]
	uint8_t *pAudioDesc = NULL;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	613b      	str	r3, [r7, #16]
	uint16_t ptr;

	if (desc->wTotalLength > desc->bLength) {
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	885b      	ldrh	r3, [r3, #2]
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d91c      	bls.n	8008b9a <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
		ptr = desc->bLength;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	817b      	strh	r3, [r7, #10]

		while (ptr < desc->wTotalLength) {
 8008b68:	e011      	b.n	8008b8e <USBD_AUDIO_GetAudioHeaderDesc+0x52>
			pdesc = USBD_GetNextDesc((uint8_t*) pdesc, &ptr);
 8008b6a:	f107 030a 	add.w	r3, r7, #10
 8008b6e:	4619      	mov	r1, r3
 8008b70:	6978      	ldr	r0, [r7, #20]
 8008b72:	f000 fbe6 	bl	8009342 <USBD_GetNextDesc>
 8008b76:	6178      	str	r0, [r7, #20]
			if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE)
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	785b      	ldrb	r3, [r3, #1]
 8008b7c:	2b24      	cmp	r3, #36	; 0x24
 8008b7e:	d106      	bne.n	8008b8e <USBD_AUDIO_GetAudioHeaderDesc+0x52>
					&& (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER)) {
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	789b      	ldrb	r3, [r3, #2]
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d102      	bne.n	8008b8e <USBD_AUDIO_GetAudioHeaderDesc+0x52>
				pAudioDesc = (uint8_t*) pdesc;
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	613b      	str	r3, [r7, #16]
				break;
 8008b8c:	e005      	b.n	8008b9a <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
		while (ptr < desc->wTotalLength) {
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	885b      	ldrh	r3, [r3, #2]
 8008b92:	b29a      	uxth	r2, r3
 8008b94:	897b      	ldrh	r3, [r7, #10]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d8e7      	bhi.n	8008b6a <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
			}
		}
	}
	return pAudioDesc;
 8008b9a:	693b      	ldr	r3, [r7, #16]
}
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3718      	adds	r7, #24
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d101      	bne.n	8008bbc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008bb8:	2303      	movs	r3, #3
 8008bba:	e01f      	b.n	8008bfc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	68ba      	ldr	r2, [r7, #8]
 8008bde:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	79fa      	ldrb	r2, [r7, #7]
 8008bee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f005 f8fd 	bl	800ddf0 <USBD_LL_Init>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3718      	adds	r7, #24
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d101      	bne.n	8008c1c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	e025      	b.n	8008c68 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	683a      	ldr	r2, [r7, #0]
 8008c20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	32ae      	adds	r2, #174	; 0xae
 8008c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d00f      	beq.n	8008c58 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	32ae      	adds	r2, #174	; 0xae
 8008c42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c48:	f107 020e 	add.w	r2, r7, #14
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	4798      	blx	r3
 8008c50:	4602      	mov	r2, r0
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008c5e:	1c5a      	adds	r2, r3, #1
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3710      	adds	r7, #16
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}

08008c70 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f005 f905 	bl	800de88 <USBD_LL_Start>
 8008c7e:	4603      	mov	r3, r0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c90:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr

08008c9e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c9e:	b580      	push	{r7, lr}
 8008ca0:	b084      	sub	sp, #16
 8008ca2:	af00      	add	r7, sp, #0
 8008ca4:	6078      	str	r0, [r7, #4]
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008caa:	2300      	movs	r3, #0
 8008cac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d009      	beq.n	8008ccc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	78fa      	ldrb	r2, [r7, #3]
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	4798      	blx	r3
 8008cc8:	4603      	mov	r3, r0
 8008cca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cce:	4618      	mov	r0, r3
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}

08008cd6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cd6:	b580      	push	{r7, lr}
 8008cd8:	b084      	sub	sp, #16
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
 8008cde:	460b      	mov	r3, r1
 8008ce0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	78fa      	ldrb	r2, [r7, #3]
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	4798      	blx	r3
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d001      	beq.n	8008d00 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3710      	adds	r7, #16
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b084      	sub	sp, #16
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
 8008d12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d1a:	6839      	ldr	r1, [r7, #0]
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f001 f8fe 	bl	8009f1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	2201      	movs	r2, #1
 8008d26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008d30:	461a      	mov	r2, r3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d3e:	f003 031f 	and.w	r3, r3, #31
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d01a      	beq.n	8008d7c <USBD_LL_SetupStage+0x72>
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d822      	bhi.n	8008d90 <USBD_LL_SetupStage+0x86>
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d002      	beq.n	8008d54 <USBD_LL_SetupStage+0x4a>
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d00a      	beq.n	8008d68 <USBD_LL_SetupStage+0x5e>
 8008d52:	e01d      	b.n	8008d90 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fb2b 	bl	80093b8 <USBD_StdDevReq>
 8008d62:	4603      	mov	r3, r0
 8008d64:	73fb      	strb	r3, [r7, #15]
      break;
 8008d66:	e020      	b.n	8008daa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d6e:	4619      	mov	r1, r3
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f000 fb93 	bl	800949c <USBD_StdItfReq>
 8008d76:	4603      	mov	r3, r0
 8008d78:	73fb      	strb	r3, [r7, #15]
      break;
 8008d7a:	e016      	b.n	8008daa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fbf5 	bl	8009574 <USBD_StdEPReq>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d8e:	e00c      	b.n	8008daa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d9a:	b2db      	uxtb	r3, r3
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f005 f918 	bl	800dfd4 <USBD_LL_StallEP>
 8008da4:	4603      	mov	r3, r0
 8008da6:	73fb      	strb	r3, [r7, #15]
      break;
 8008da8:	bf00      	nop
  }

  return ret;
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b086      	sub	sp, #24
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	607a      	str	r2, [r7, #4]
 8008dc0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008dc6:	7afb      	ldrb	r3, [r7, #11]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d16e      	bne.n	8008eaa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008dd2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dda:	2b03      	cmp	r3, #3
 8008ddc:	f040 8098 	bne.w	8008f10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	689a      	ldr	r2, [r3, #8]
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	68db      	ldr	r3, [r3, #12]
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d913      	bls.n	8008e14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	689a      	ldr	r2, [r3, #8]
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	1ad2      	subs	r2, r2, r3
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	68da      	ldr	r2, [r3, #12]
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	4293      	cmp	r3, r2
 8008e04:	bf28      	it	cs
 8008e06:	4613      	movcs	r3, r2
 8008e08:	461a      	mov	r2, r3
 8008e0a:	6879      	ldr	r1, [r7, #4]
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f001 f97a 	bl	800a106 <USBD_CtlContinueRx>
 8008e12:	e07d      	b.n	8008f10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e1a:	f003 031f 	and.w	r3, r3, #31
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d014      	beq.n	8008e4c <USBD_LL_DataOutStage+0x98>
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d81d      	bhi.n	8008e62 <USBD_LL_DataOutStage+0xae>
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d002      	beq.n	8008e30 <USBD_LL_DataOutStage+0x7c>
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d003      	beq.n	8008e36 <USBD_LL_DataOutStage+0x82>
 8008e2e:	e018      	b.n	8008e62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	75bb      	strb	r3, [r7, #22]
            break;
 8008e34:	e018      	b.n	8008e68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	4619      	mov	r1, r3
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 fa64 	bl	800930e <USBD_CoreFindIF>
 8008e46:	4603      	mov	r3, r0
 8008e48:	75bb      	strb	r3, [r7, #22]
            break;
 8008e4a:	e00d      	b.n	8008e68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e52:	b2db      	uxtb	r3, r3
 8008e54:	4619      	mov	r1, r3
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f000 fa66 	bl	8009328 <USBD_CoreFindEP>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	75bb      	strb	r3, [r7, #22]
            break;
 8008e60:	e002      	b.n	8008e68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e62:	2300      	movs	r3, #0
 8008e64:	75bb      	strb	r3, [r7, #22]
            break;
 8008e66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008e68:	7dbb      	ldrb	r3, [r7, #22]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d119      	bne.n	8008ea2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	2b03      	cmp	r3, #3
 8008e78:	d113      	bne.n	8008ea2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008e7a:	7dba      	ldrb	r2, [r7, #22]
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	32ae      	adds	r2, #174	; 0xae
 8008e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00b      	beq.n	8008ea2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008e8a:	7dba      	ldrb	r2, [r7, #22]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008e92:	7dba      	ldrb	r2, [r7, #22]
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	32ae      	adds	r2, #174	; 0xae
 8008e98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e9c:	691b      	ldr	r3, [r3, #16]
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f001 f940 	bl	800a128 <USBD_CtlSendStatus>
 8008ea8:	e032      	b.n	8008f10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008eaa:	7afb      	ldrb	r3, [r7, #11]
 8008eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	4619      	mov	r1, r3
 8008eb4:	68f8      	ldr	r0, [r7, #12]
 8008eb6:	f000 fa37 	bl	8009328 <USBD_CoreFindEP>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ebe:	7dbb      	ldrb	r3, [r7, #22]
 8008ec0:	2bff      	cmp	r3, #255	; 0xff
 8008ec2:	d025      	beq.n	8008f10 <USBD_LL_DataOutStage+0x15c>
 8008ec4:	7dbb      	ldrb	r3, [r7, #22]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d122      	bne.n	8008f10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b03      	cmp	r3, #3
 8008ed4:	d117      	bne.n	8008f06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008ed6:	7dba      	ldrb	r2, [r7, #22]
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	32ae      	adds	r2, #174	; 0xae
 8008edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ee0:	699b      	ldr	r3, [r3, #24]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d00f      	beq.n	8008f06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008ee6:	7dba      	ldrb	r2, [r7, #22]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008eee:	7dba      	ldrb	r2, [r7, #22]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	32ae      	adds	r2, #174	; 0xae
 8008ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef8:	699b      	ldr	r3, [r3, #24]
 8008efa:	7afa      	ldrb	r2, [r7, #11]
 8008efc:	4611      	mov	r1, r2
 8008efe:	68f8      	ldr	r0, [r7, #12]
 8008f00:	4798      	blx	r3
 8008f02:	4603      	mov	r3, r0
 8008f04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008f06:	7dfb      	ldrb	r3, [r7, #23]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d001      	beq.n	8008f10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f0c:	7dfb      	ldrb	r3, [r7, #23]
 8008f0e:	e000      	b.n	8008f12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3718      	adds	r7, #24
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b086      	sub	sp, #24
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	60f8      	str	r0, [r7, #12]
 8008f22:	460b      	mov	r3, r1
 8008f24:	607a      	str	r2, [r7, #4]
 8008f26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f28:	7afb      	ldrb	r3, [r7, #11]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d16f      	bne.n	800900e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	3314      	adds	r3, #20
 8008f32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f3a:	2b02      	cmp	r3, #2
 8008f3c:	d15a      	bne.n	8008ff4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	689a      	ldr	r2, [r3, #8]
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	68db      	ldr	r3, [r3, #12]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d914      	bls.n	8008f74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	1ad2      	subs	r2, r2, r3
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	689b      	ldr	r3, [r3, #8]
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	6879      	ldr	r1, [r7, #4]
 8008f60:	68f8      	ldr	r0, [r7, #12]
 8008f62:	f001 f8a2 	bl	800a0aa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f66:	2300      	movs	r3, #0
 8008f68:	2200      	movs	r2, #0
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f005 f937 	bl	800e1e0 <USBD_LL_PrepareReceive>
 8008f72:	e03f      	b.n	8008ff4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	68da      	ldr	r2, [r3, #12]
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	689b      	ldr	r3, [r3, #8]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d11c      	bne.n	8008fba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	685a      	ldr	r2, [r3, #4]
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d316      	bcc.n	8008fba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d20f      	bcs.n	8008fba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	2100      	movs	r1, #0
 8008f9e:	68f8      	ldr	r0, [r7, #12]
 8008fa0:	f001 f883 	bl	800a0aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fac:	2300      	movs	r3, #0
 8008fae:	2200      	movs	r2, #0
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	68f8      	ldr	r0, [r7, #12]
 8008fb4:	f005 f914 	bl	800e1e0 <USBD_LL_PrepareReceive>
 8008fb8:	e01c      	b.n	8008ff4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	2b03      	cmp	r3, #3
 8008fc4:	d10f      	bne.n	8008fe6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d009      	beq.n	8008fe6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fe6:	2180      	movs	r1, #128	; 0x80
 8008fe8:	68f8      	ldr	r0, [r7, #12]
 8008fea:	f004 fff3 	bl	800dfd4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008fee:	68f8      	ldr	r0, [r7, #12]
 8008ff0:	f001 f8ad 	bl	800a14e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d03a      	beq.n	8009074 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f7ff fe42 	bl	8008c88 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	2200      	movs	r2, #0
 8009008:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800900c:	e032      	b.n	8009074 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800900e:	7afb      	ldrb	r3, [r7, #11]
 8009010:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009014:	b2db      	uxtb	r3, r3
 8009016:	4619      	mov	r1, r3
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	f000 f985 	bl	8009328 <USBD_CoreFindEP>
 800901e:	4603      	mov	r3, r0
 8009020:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009022:	7dfb      	ldrb	r3, [r7, #23]
 8009024:	2bff      	cmp	r3, #255	; 0xff
 8009026:	d025      	beq.n	8009074 <USBD_LL_DataInStage+0x15a>
 8009028:	7dfb      	ldrb	r3, [r7, #23]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d122      	bne.n	8009074 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b03      	cmp	r3, #3
 8009038:	d11c      	bne.n	8009074 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800903a:	7dfa      	ldrb	r2, [r7, #23]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	32ae      	adds	r2, #174	; 0xae
 8009040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009044:	695b      	ldr	r3, [r3, #20]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d014      	beq.n	8009074 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800904a:	7dfa      	ldrb	r2, [r7, #23]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009052:	7dfa      	ldrb	r2, [r7, #23]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	32ae      	adds	r2, #174	; 0xae
 8009058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905c:	695b      	ldr	r3, [r3, #20]
 800905e:	7afa      	ldrb	r2, [r7, #11]
 8009060:	4611      	mov	r1, r2
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	4798      	blx	r3
 8009066:	4603      	mov	r3, r0
 8009068:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800906a:	7dbb      	ldrb	r3, [r7, #22]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d001      	beq.n	8009074 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009070:	7dbb      	ldrb	r3, [r7, #22]
 8009072:	e000      	b.n	8009076 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3718      	adds	r7, #24
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b084      	sub	sp, #16
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009086:	2300      	movs	r3, #0
 8009088:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d014      	beq.n	80090e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d00e      	beq.n	80090e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	687a      	ldr	r2, [r7, #4]
 80090d0:	6852      	ldr	r2, [r2, #4]
 80090d2:	b2d2      	uxtb	r2, r2
 80090d4:	4611      	mov	r1, r2
 80090d6:	6878      	ldr	r0, [r7, #4]
 80090d8:	4798      	blx	r3
 80090da:	4603      	mov	r3, r0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d001      	beq.n	80090e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80090e0:	2303      	movs	r3, #3
 80090e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090e4:	2340      	movs	r3, #64	; 0x40
 80090e6:	2200      	movs	r2, #0
 80090e8:	2100      	movs	r1, #0
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f004 fefe 	bl	800deec <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2201      	movs	r2, #1
 80090f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2240      	movs	r2, #64	; 0x40
 80090fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009100:	2340      	movs	r3, #64	; 0x40
 8009102:	2200      	movs	r2, #0
 8009104:	2180      	movs	r1, #128	; 0x80
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f004 fef0 	bl	800deec <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2240      	movs	r2, #64	; 0x40
 8009116:	621a      	str	r2, [r3, #32]

  return ret;
 8009118:	7bfb      	ldrb	r3, [r7, #15]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009122:	b480      	push	{r7}
 8009124:	b083      	sub	sp, #12
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
 800912a:	460b      	mov	r3, r1
 800912c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	78fa      	ldrb	r2, [r7, #3]
 8009132:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009134:	2300      	movs	r3, #0
}
 8009136:	4618      	mov	r0, r3
 8009138:	370c      	adds	r7, #12
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009142:	b480      	push	{r7}
 8009144:	b083      	sub	sp, #12
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2b04      	cmp	r3, #4
 8009154:	d006      	beq.n	8009164 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915c:	b2da      	uxtb	r2, r3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2204      	movs	r2, #4
 8009168:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	370c      	adds	r7, #12
 8009172:	46bd      	mov	sp, r7
 8009174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009178:	4770      	bx	lr

0800917a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800917a:	b480      	push	{r7}
 800917c:	b083      	sub	sp, #12
 800917e:	af00      	add	r7, sp, #0
 8009180:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009188:	b2db      	uxtb	r3, r3
 800918a:	2b04      	cmp	r3, #4
 800918c:	d106      	bne.n	800919c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009194:	b2da      	uxtb	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800919c:	2300      	movs	r3, #0
}
 800919e:	4618      	mov	r0, r3
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b082      	sub	sp, #8
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b8:	b2db      	uxtb	r3, r3
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d110      	bne.n	80091e0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00b      	beq.n	80091e0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ce:	69db      	ldr	r3, [r3, #28]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d005      	beq.n	80091e0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091da:	69db      	ldr	r3, [r3, #28]
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b082      	sub	sp, #8
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	32ae      	adds	r2, #174	; 0xae
 8009200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d101      	bne.n	800920c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009208:	2303      	movs	r3, #3
 800920a:	e01c      	b.n	8009246 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009212:	b2db      	uxtb	r3, r3
 8009214:	2b03      	cmp	r3, #3
 8009216:	d115      	bne.n	8009244 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	32ae      	adds	r2, #174	; 0xae
 8009222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d00b      	beq.n	8009244 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	32ae      	adds	r2, #174	; 0xae
 8009236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800923a:	6a1b      	ldr	r3, [r3, #32]
 800923c:	78fa      	ldrb	r2, [r7, #3]
 800923e:	4611      	mov	r1, r2
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3708      	adds	r7, #8
 800924a:	46bd      	mov	sp, r7
 800924c:	bd80      	pop	{r7, pc}

0800924e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800924e:	b580      	push	{r7, lr}
 8009250:	b082      	sub	sp, #8
 8009252:	af00      	add	r7, sp, #0
 8009254:	6078      	str	r0, [r7, #4]
 8009256:	460b      	mov	r3, r1
 8009258:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	32ae      	adds	r2, #174	; 0xae
 8009264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d101      	bne.n	8009270 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800926c:	2303      	movs	r3, #3
 800926e:	e01c      	b.n	80092aa <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009276:	b2db      	uxtb	r3, r3
 8009278:	2b03      	cmp	r3, #3
 800927a:	d115      	bne.n	80092a8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	32ae      	adds	r2, #174	; 0xae
 8009286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800928a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00b      	beq.n	80092a8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	32ae      	adds	r2, #174	; 0xae
 800929a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800929e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a0:	78fa      	ldrb	r2, [r7, #3]
 80092a2:	4611      	mov	r1, r2
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80092b2:	b480      	push	{r7}
 80092b4:	b083      	sub	sp, #12
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80092d0:	2300      	movs	r3, #0
 80092d2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2201      	movs	r2, #1
 80092d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d00e      	beq.n	8009304 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	687a      	ldr	r2, [r7, #4]
 80092f0:	6852      	ldr	r2, [r2, #4]
 80092f2:	b2d2      	uxtb	r2, r2
 80092f4:	4611      	mov	r1, r2
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	4798      	blx	r3
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009300:	2303      	movs	r3, #3
 8009302:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009304:	7bfb      	ldrb	r3, [r7, #15]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800930e:	b480      	push	{r7}
 8009310:	b083      	sub	sp, #12
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	460b      	mov	r3, r1
 8009318:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800931a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800931c:	4618      	mov	r0, r3
 800931e:	370c      	adds	r7, #12
 8009320:	46bd      	mov	sp, r7
 8009322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009326:	4770      	bx	lr

08009328 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009328:	b480      	push	{r7}
 800932a:	b083      	sub	sp, #12
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]
 8009330:	460b      	mov	r3, r1
 8009332:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009334:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009336:	4618      	mov	r0, r3
 8009338:	370c      	adds	r7, #12
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr

08009342 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009342:	b480      	push	{r7}
 8009344:	b085      	sub	sp, #20
 8009346:	af00      	add	r7, sp, #0
 8009348:	6078      	str	r0, [r7, #4]
 800934a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	881a      	ldrh	r2, [r3, #0]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	b29b      	uxth	r3, r3
 800935a:	4413      	add	r3, r2
 800935c:	b29a      	uxth	r2, r3
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	461a      	mov	r2, r3
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4413      	add	r3, r2
 800936c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800936e:	68fb      	ldr	r3, [r7, #12]
}
 8009370:	4618      	mov	r0, r3
 8009372:	3714      	adds	r7, #20
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800937c:	b480      	push	{r7}
 800937e:	b087      	sub	sp, #28
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009388:	697b      	ldr	r3, [r7, #20]
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	3301      	adds	r3, #1
 8009392:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800939a:	8a3b      	ldrh	r3, [r7, #16]
 800939c:	021b      	lsls	r3, r3, #8
 800939e:	b21a      	sxth	r2, r3
 80093a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80093a4:	4313      	orrs	r3, r2
 80093a6:	b21b      	sxth	r3, r3
 80093a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80093aa:	89fb      	ldrh	r3, [r7, #14]
}
 80093ac:	4618      	mov	r0, r3
 80093ae:	371c      	adds	r7, #28
 80093b0:	46bd      	mov	sp, r7
 80093b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b6:	4770      	bx	lr

080093b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
 80093c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093c2:	2300      	movs	r3, #0
 80093c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	781b      	ldrb	r3, [r3, #0]
 80093ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80093ce:	2b40      	cmp	r3, #64	; 0x40
 80093d0:	d005      	beq.n	80093de <USBD_StdDevReq+0x26>
 80093d2:	2b40      	cmp	r3, #64	; 0x40
 80093d4:	d857      	bhi.n	8009486 <USBD_StdDevReq+0xce>
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00f      	beq.n	80093fa <USBD_StdDevReq+0x42>
 80093da:	2b20      	cmp	r3, #32
 80093dc:	d153      	bne.n	8009486 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	32ae      	adds	r2, #174	; 0xae
 80093e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	4798      	blx	r3
 80093f4:	4603      	mov	r3, r0
 80093f6:	73fb      	strb	r3, [r7, #15]
      break;
 80093f8:	e04a      	b.n	8009490 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	785b      	ldrb	r3, [r3, #1]
 80093fe:	2b09      	cmp	r3, #9
 8009400:	d83b      	bhi.n	800947a <USBD_StdDevReq+0xc2>
 8009402:	a201      	add	r2, pc, #4	; (adr r2, 8009408 <USBD_StdDevReq+0x50>)
 8009404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009408:	0800945d 	.word	0x0800945d
 800940c:	08009471 	.word	0x08009471
 8009410:	0800947b 	.word	0x0800947b
 8009414:	08009467 	.word	0x08009467
 8009418:	0800947b 	.word	0x0800947b
 800941c:	0800943b 	.word	0x0800943b
 8009420:	08009431 	.word	0x08009431
 8009424:	0800947b 	.word	0x0800947b
 8009428:	08009453 	.word	0x08009453
 800942c:	08009445 	.word	0x08009445
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009430:	6839      	ldr	r1, [r7, #0]
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 fa3c 	bl	80098b0 <USBD_GetDescriptor>
          break;
 8009438:	e024      	b.n	8009484 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 fbcb 	bl	8009bd8 <USBD_SetAddress>
          break;
 8009442:	e01f      	b.n	8009484 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fc0a 	bl	8009c60 <USBD_SetConfig>
 800944c:	4603      	mov	r3, r0
 800944e:	73fb      	strb	r3, [r7, #15]
          break;
 8009450:	e018      	b.n	8009484 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 fcad 	bl	8009db4 <USBD_GetConfig>
          break;
 800945a:	e013      	b.n	8009484 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800945c:	6839      	ldr	r1, [r7, #0]
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 fcde 	bl	8009e20 <USBD_GetStatus>
          break;
 8009464:	e00e      	b.n	8009484 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 fd0d 	bl	8009e88 <USBD_SetFeature>
          break;
 800946e:	e009      	b.n	8009484 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fd31 	bl	8009eda <USBD_ClrFeature>
          break;
 8009478:	e004      	b.n	8009484 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800947a:	6839      	ldr	r1, [r7, #0]
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f000 fd88 	bl	8009f92 <USBD_CtlError>
          break;
 8009482:	bf00      	nop
      }
      break;
 8009484:	e004      	b.n	8009490 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009486:	6839      	ldr	r1, [r7, #0]
 8009488:	6878      	ldr	r0, [r7, #4]
 800948a:	f000 fd82 	bl	8009f92 <USBD_CtlError>
      break;
 800948e:	bf00      	nop
  }

  return ret;
 8009490:	7bfb      	ldrb	r3, [r7, #15]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop

0800949c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80094a6:	2300      	movs	r3, #0
 80094a8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094b2:	2b40      	cmp	r3, #64	; 0x40
 80094b4:	d005      	beq.n	80094c2 <USBD_StdItfReq+0x26>
 80094b6:	2b40      	cmp	r3, #64	; 0x40
 80094b8:	d852      	bhi.n	8009560 <USBD_StdItfReq+0xc4>
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d001      	beq.n	80094c2 <USBD_StdItfReq+0x26>
 80094be:	2b20      	cmp	r3, #32
 80094c0:	d14e      	bne.n	8009560 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	3b01      	subs	r3, #1
 80094cc:	2b02      	cmp	r3, #2
 80094ce:	d840      	bhi.n	8009552 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	889b      	ldrh	r3, [r3, #4]
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d836      	bhi.n	8009548 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	889b      	ldrh	r3, [r3, #4]
 80094de:	b2db      	uxtb	r3, r3
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7ff ff13 	bl	800930e <USBD_CoreFindIF>
 80094e8:	4603      	mov	r3, r0
 80094ea:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80094ec:	7bbb      	ldrb	r3, [r7, #14]
 80094ee:	2bff      	cmp	r3, #255	; 0xff
 80094f0:	d01d      	beq.n	800952e <USBD_StdItfReq+0x92>
 80094f2:	7bbb      	ldrb	r3, [r7, #14]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d11a      	bne.n	800952e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80094f8:	7bba      	ldrb	r2, [r7, #14]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	32ae      	adds	r2, #174	; 0xae
 80094fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d00f      	beq.n	8009528 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009508:	7bba      	ldrb	r2, [r7, #14]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009510:	7bba      	ldrb	r2, [r7, #14]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	32ae      	adds	r2, #174	; 0xae
 8009516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	4798      	blx	r3
 8009522:	4603      	mov	r3, r0
 8009524:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009526:	e004      	b.n	8009532 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009528:	2303      	movs	r3, #3
 800952a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800952c:	e001      	b.n	8009532 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800952e:	2303      	movs	r3, #3
 8009530:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	88db      	ldrh	r3, [r3, #6]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d110      	bne.n	800955c <USBD_StdItfReq+0xc0>
 800953a:	7bfb      	ldrb	r3, [r7, #15]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d10d      	bne.n	800955c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 fdf1 	bl	800a128 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009546:	e009      	b.n	800955c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fd21 	bl	8009f92 <USBD_CtlError>
          break;
 8009550:	e004      	b.n	800955c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009552:	6839      	ldr	r1, [r7, #0]
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f000 fd1c 	bl	8009f92 <USBD_CtlError>
          break;
 800955a:	e000      	b.n	800955e <USBD_StdItfReq+0xc2>
          break;
 800955c:	bf00      	nop
      }
      break;
 800955e:	e004      	b.n	800956a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fd15 	bl	8009f92 <USBD_CtlError>
      break;
 8009568:	bf00      	nop
  }

  return ret;
 800956a:	7bfb      	ldrb	r3, [r7, #15]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b084      	sub	sp, #16
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800957e:	2300      	movs	r3, #0
 8009580:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	889b      	ldrh	r3, [r3, #4]
 8009586:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	781b      	ldrb	r3, [r3, #0]
 800958c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009590:	2b40      	cmp	r3, #64	; 0x40
 8009592:	d007      	beq.n	80095a4 <USBD_StdEPReq+0x30>
 8009594:	2b40      	cmp	r3, #64	; 0x40
 8009596:	f200 817f 	bhi.w	8009898 <USBD_StdEPReq+0x324>
 800959a:	2b00      	cmp	r3, #0
 800959c:	d02a      	beq.n	80095f4 <USBD_StdEPReq+0x80>
 800959e:	2b20      	cmp	r3, #32
 80095a0:	f040 817a 	bne.w	8009898 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80095a4:	7bbb      	ldrb	r3, [r7, #14]
 80095a6:	4619      	mov	r1, r3
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7ff febd 	bl	8009328 <USBD_CoreFindEP>
 80095ae:	4603      	mov	r3, r0
 80095b0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80095b2:	7b7b      	ldrb	r3, [r7, #13]
 80095b4:	2bff      	cmp	r3, #255	; 0xff
 80095b6:	f000 8174 	beq.w	80098a2 <USBD_StdEPReq+0x32e>
 80095ba:	7b7b      	ldrb	r3, [r7, #13]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f040 8170 	bne.w	80098a2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80095c2:	7b7a      	ldrb	r2, [r7, #13]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80095ca:	7b7a      	ldrb	r2, [r7, #13]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	32ae      	adds	r2, #174	; 0xae
 80095d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095d4:	689b      	ldr	r3, [r3, #8]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f000 8163 	beq.w	80098a2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80095dc:	7b7a      	ldrb	r2, [r7, #13]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	32ae      	adds	r2, #174	; 0xae
 80095e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	4798      	blx	r3
 80095ee:	4603      	mov	r3, r0
 80095f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80095f2:	e156      	b.n	80098a2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	785b      	ldrb	r3, [r3, #1]
 80095f8:	2b03      	cmp	r3, #3
 80095fa:	d008      	beq.n	800960e <USBD_StdEPReq+0x9a>
 80095fc:	2b03      	cmp	r3, #3
 80095fe:	f300 8145 	bgt.w	800988c <USBD_StdEPReq+0x318>
 8009602:	2b00      	cmp	r3, #0
 8009604:	f000 809b 	beq.w	800973e <USBD_StdEPReq+0x1ca>
 8009608:	2b01      	cmp	r3, #1
 800960a:	d03c      	beq.n	8009686 <USBD_StdEPReq+0x112>
 800960c:	e13e      	b.n	800988c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009614:	b2db      	uxtb	r3, r3
 8009616:	2b02      	cmp	r3, #2
 8009618:	d002      	beq.n	8009620 <USBD_StdEPReq+0xac>
 800961a:	2b03      	cmp	r3, #3
 800961c:	d016      	beq.n	800964c <USBD_StdEPReq+0xd8>
 800961e:	e02c      	b.n	800967a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009620:	7bbb      	ldrb	r3, [r7, #14]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00d      	beq.n	8009642 <USBD_StdEPReq+0xce>
 8009626:	7bbb      	ldrb	r3, [r7, #14]
 8009628:	2b80      	cmp	r3, #128	; 0x80
 800962a:	d00a      	beq.n	8009642 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800962c:	7bbb      	ldrb	r3, [r7, #14]
 800962e:	4619      	mov	r1, r3
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f004 fccf 	bl	800dfd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009636:	2180      	movs	r1, #128	; 0x80
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f004 fccb 	bl	800dfd4 <USBD_LL_StallEP>
 800963e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009640:	e020      	b.n	8009684 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009642:	6839      	ldr	r1, [r7, #0]
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 fca4 	bl	8009f92 <USBD_CtlError>
              break;
 800964a:	e01b      	b.n	8009684 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	885b      	ldrh	r3, [r3, #2]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d10e      	bne.n	8009672 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009654:	7bbb      	ldrb	r3, [r7, #14]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00b      	beq.n	8009672 <USBD_StdEPReq+0xfe>
 800965a:	7bbb      	ldrb	r3, [r7, #14]
 800965c:	2b80      	cmp	r3, #128	; 0x80
 800965e:	d008      	beq.n	8009672 <USBD_StdEPReq+0xfe>
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	88db      	ldrh	r3, [r3, #6]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d104      	bne.n	8009672 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009668:	7bbb      	ldrb	r3, [r7, #14]
 800966a:	4619      	mov	r1, r3
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f004 fcb1 	bl	800dfd4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f000 fd58 	bl	800a128 <USBD_CtlSendStatus>

              break;
 8009678:	e004      	b.n	8009684 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fc88 	bl	8009f92 <USBD_CtlError>
              break;
 8009682:	bf00      	nop
          }
          break;
 8009684:	e107      	b.n	8009896 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800968c:	b2db      	uxtb	r3, r3
 800968e:	2b02      	cmp	r3, #2
 8009690:	d002      	beq.n	8009698 <USBD_StdEPReq+0x124>
 8009692:	2b03      	cmp	r3, #3
 8009694:	d016      	beq.n	80096c4 <USBD_StdEPReq+0x150>
 8009696:	e04b      	b.n	8009730 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009698:	7bbb      	ldrb	r3, [r7, #14]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d00d      	beq.n	80096ba <USBD_StdEPReq+0x146>
 800969e:	7bbb      	ldrb	r3, [r7, #14]
 80096a0:	2b80      	cmp	r3, #128	; 0x80
 80096a2:	d00a      	beq.n	80096ba <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80096a4:	7bbb      	ldrb	r3, [r7, #14]
 80096a6:	4619      	mov	r1, r3
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f004 fc93 	bl	800dfd4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096ae:	2180      	movs	r1, #128	; 0x80
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f004 fc8f 	bl	800dfd4 <USBD_LL_StallEP>
 80096b6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096b8:	e040      	b.n	800973c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80096ba:	6839      	ldr	r1, [r7, #0]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 fc68 	bl	8009f92 <USBD_CtlError>
              break;
 80096c2:	e03b      	b.n	800973c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	885b      	ldrh	r3, [r3, #2]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d136      	bne.n	800973a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80096cc:	7bbb      	ldrb	r3, [r7, #14]
 80096ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d004      	beq.n	80096e0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80096d6:	7bbb      	ldrb	r3, [r7, #14]
 80096d8:	4619      	mov	r1, r3
 80096da:	6878      	ldr	r0, [r7, #4]
 80096dc:	f004 fcb0 	bl	800e040 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f000 fd21 	bl	800a128 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80096e6:	7bbb      	ldrb	r3, [r7, #14]
 80096e8:	4619      	mov	r1, r3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7ff fe1c 	bl	8009328 <USBD_CoreFindEP>
 80096f0:	4603      	mov	r3, r0
 80096f2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80096f4:	7b7b      	ldrb	r3, [r7, #13]
 80096f6:	2bff      	cmp	r3, #255	; 0xff
 80096f8:	d01f      	beq.n	800973a <USBD_StdEPReq+0x1c6>
 80096fa:	7b7b      	ldrb	r3, [r7, #13]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d11c      	bne.n	800973a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009700:	7b7a      	ldrb	r2, [r7, #13]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009708:	7b7a      	ldrb	r2, [r7, #13]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	32ae      	adds	r2, #174	; 0xae
 800970e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d010      	beq.n	800973a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009718:	7b7a      	ldrb	r2, [r7, #13]
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	32ae      	adds	r2, #174	; 0xae
 800971e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009722:	689b      	ldr	r3, [r3, #8]
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	4798      	blx	r3
 800972a:	4603      	mov	r3, r0
 800972c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800972e:	e004      	b.n	800973a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fc2d 	bl	8009f92 <USBD_CtlError>
              break;
 8009738:	e000      	b.n	800973c <USBD_StdEPReq+0x1c8>
              break;
 800973a:	bf00      	nop
          }
          break;
 800973c:	e0ab      	b.n	8009896 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009744:	b2db      	uxtb	r3, r3
 8009746:	2b02      	cmp	r3, #2
 8009748:	d002      	beq.n	8009750 <USBD_StdEPReq+0x1dc>
 800974a:	2b03      	cmp	r3, #3
 800974c:	d032      	beq.n	80097b4 <USBD_StdEPReq+0x240>
 800974e:	e097      	b.n	8009880 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009750:	7bbb      	ldrb	r3, [r7, #14]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d007      	beq.n	8009766 <USBD_StdEPReq+0x1f2>
 8009756:	7bbb      	ldrb	r3, [r7, #14]
 8009758:	2b80      	cmp	r3, #128	; 0x80
 800975a:	d004      	beq.n	8009766 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800975c:	6839      	ldr	r1, [r7, #0]
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 fc17 	bl	8009f92 <USBD_CtlError>
                break;
 8009764:	e091      	b.n	800988a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009766:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800976a:	2b00      	cmp	r3, #0
 800976c:	da0b      	bge.n	8009786 <USBD_StdEPReq+0x212>
 800976e:	7bbb      	ldrb	r3, [r7, #14]
 8009770:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009774:	4613      	mov	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4413      	add	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	3310      	adds	r3, #16
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	4413      	add	r3, r2
 8009782:	3304      	adds	r3, #4
 8009784:	e00b      	b.n	800979e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009786:	7bbb      	ldrb	r3, [r7, #14]
 8009788:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800978c:	4613      	mov	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	4413      	add	r3, r2
 800979c:	3304      	adds	r3, #4
 800979e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	2202      	movs	r2, #2
 80097aa:	4619      	mov	r1, r3
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f000 fc61 	bl	800a074 <USBD_CtlSendData>
              break;
 80097b2:	e06a      	b.n	800988a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80097b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	da11      	bge.n	80097e0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80097bc:	7bbb      	ldrb	r3, [r7, #14]
 80097be:	f003 020f 	and.w	r2, r3, #15
 80097c2:	6879      	ldr	r1, [r7, #4]
 80097c4:	4613      	mov	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	440b      	add	r3, r1
 80097ce:	3324      	adds	r3, #36	; 0x24
 80097d0:	881b      	ldrh	r3, [r3, #0]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d117      	bne.n	8009806 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097d6:	6839      	ldr	r1, [r7, #0]
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f000 fbda 	bl	8009f92 <USBD_CtlError>
                  break;
 80097de:	e054      	b.n	800988a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80097e0:	7bbb      	ldrb	r3, [r7, #14]
 80097e2:	f003 020f 	and.w	r2, r3, #15
 80097e6:	6879      	ldr	r1, [r7, #4]
 80097e8:	4613      	mov	r3, r2
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	4413      	add	r3, r2
 80097ee:	009b      	lsls	r3, r3, #2
 80097f0:	440b      	add	r3, r1
 80097f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80097f6:	881b      	ldrh	r3, [r3, #0]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d104      	bne.n	8009806 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80097fc:	6839      	ldr	r1, [r7, #0]
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fbc7 	bl	8009f92 <USBD_CtlError>
                  break;
 8009804:	e041      	b.n	800988a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009806:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800980a:	2b00      	cmp	r3, #0
 800980c:	da0b      	bge.n	8009826 <USBD_StdEPReq+0x2b2>
 800980e:	7bbb      	ldrb	r3, [r7, #14]
 8009810:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009814:	4613      	mov	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	4413      	add	r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	3310      	adds	r3, #16
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	4413      	add	r3, r2
 8009822:	3304      	adds	r3, #4
 8009824:	e00b      	b.n	800983e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009826:	7bbb      	ldrb	r3, [r7, #14]
 8009828:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800982c:	4613      	mov	r3, r2
 800982e:	009b      	lsls	r3, r3, #2
 8009830:	4413      	add	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	4413      	add	r3, r2
 800983c:	3304      	adds	r3, #4
 800983e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009840:	7bbb      	ldrb	r3, [r7, #14]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d002      	beq.n	800984c <USBD_StdEPReq+0x2d8>
 8009846:	7bbb      	ldrb	r3, [r7, #14]
 8009848:	2b80      	cmp	r3, #128	; 0x80
 800984a:	d103      	bne.n	8009854 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	2200      	movs	r2, #0
 8009850:	601a      	str	r2, [r3, #0]
 8009852:	e00e      	b.n	8009872 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009854:	7bbb      	ldrb	r3, [r7, #14]
 8009856:	4619      	mov	r1, r3
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f004 fc27 	bl	800e0ac <USBD_LL_IsStallEP>
 800985e:	4603      	mov	r3, r0
 8009860:	2b00      	cmp	r3, #0
 8009862:	d003      	beq.n	800986c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	2201      	movs	r2, #1
 8009868:	601a      	str	r2, [r3, #0]
 800986a:	e002      	b.n	8009872 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	2200      	movs	r2, #0
 8009870:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	2202      	movs	r2, #2
 8009876:	4619      	mov	r1, r3
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fbfb 	bl	800a074 <USBD_CtlSendData>
              break;
 800987e:	e004      	b.n	800988a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 fb85 	bl	8009f92 <USBD_CtlError>
              break;
 8009888:	bf00      	nop
          }
          break;
 800988a:	e004      	b.n	8009896 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800988c:	6839      	ldr	r1, [r7, #0]
 800988e:	6878      	ldr	r0, [r7, #4]
 8009890:	f000 fb7f 	bl	8009f92 <USBD_CtlError>
          break;
 8009894:	bf00      	nop
      }
      break;
 8009896:	e005      	b.n	80098a4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009898:	6839      	ldr	r1, [r7, #0]
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 fb79 	bl	8009f92 <USBD_CtlError>
      break;
 80098a0:	e000      	b.n	80098a4 <USBD_StdEPReq+0x330>
      break;
 80098a2:	bf00      	nop
  }

  return ret;
 80098a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	3710      	adds	r7, #16
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}
	...

080098b0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80098ba:	2300      	movs	r3, #0
 80098bc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80098be:	2300      	movs	r3, #0
 80098c0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80098c2:	2300      	movs	r3, #0
 80098c4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	885b      	ldrh	r3, [r3, #2]
 80098ca:	0a1b      	lsrs	r3, r3, #8
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	3b01      	subs	r3, #1
 80098d0:	2b0e      	cmp	r3, #14
 80098d2:	f200 8152 	bhi.w	8009b7a <USBD_GetDescriptor+0x2ca>
 80098d6:	a201      	add	r2, pc, #4	; (adr r2, 80098dc <USBD_GetDescriptor+0x2c>)
 80098d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098dc:	0800994d 	.word	0x0800994d
 80098e0:	08009965 	.word	0x08009965
 80098e4:	080099a5 	.word	0x080099a5
 80098e8:	08009b7b 	.word	0x08009b7b
 80098ec:	08009b7b 	.word	0x08009b7b
 80098f0:	08009b1b 	.word	0x08009b1b
 80098f4:	08009b47 	.word	0x08009b47
 80098f8:	08009b7b 	.word	0x08009b7b
 80098fc:	08009b7b 	.word	0x08009b7b
 8009900:	08009b7b 	.word	0x08009b7b
 8009904:	08009b7b 	.word	0x08009b7b
 8009908:	08009b7b 	.word	0x08009b7b
 800990c:	08009b7b 	.word	0x08009b7b
 8009910:	08009b7b 	.word	0x08009b7b
 8009914:	08009919 	.word	0x08009919
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800991e:	69db      	ldr	r3, [r3, #28]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d00b      	beq.n	800993c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800992a:	69db      	ldr	r3, [r3, #28]
 800992c:	687a      	ldr	r2, [r7, #4]
 800992e:	7c12      	ldrb	r2, [r2, #16]
 8009930:	f107 0108 	add.w	r1, r7, #8
 8009934:	4610      	mov	r0, r2
 8009936:	4798      	blx	r3
 8009938:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800993a:	e126      	b.n	8009b8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800993c:	6839      	ldr	r1, [r7, #0]
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 fb27 	bl	8009f92 <USBD_CtlError>
        err++;
 8009944:	7afb      	ldrb	r3, [r7, #11]
 8009946:	3301      	adds	r3, #1
 8009948:	72fb      	strb	r3, [r7, #11]
      break;
 800994a:	e11e      	b.n	8009b8a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	7c12      	ldrb	r2, [r2, #16]
 8009958:	f107 0108 	add.w	r1, r7, #8
 800995c:	4610      	mov	r0, r2
 800995e:	4798      	blx	r3
 8009960:	60f8      	str	r0, [r7, #12]
      break;
 8009962:	e112      	b.n	8009b8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	7c1b      	ldrb	r3, [r3, #16]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10d      	bne.n	8009988 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009974:	f107 0208 	add.w	r2, r7, #8
 8009978:	4610      	mov	r0, r2
 800997a:	4798      	blx	r3
 800997c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3301      	adds	r3, #1
 8009982:	2202      	movs	r2, #2
 8009984:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009986:	e100      	b.n	8009b8a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800998e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009990:	f107 0208 	add.w	r2, r7, #8
 8009994:	4610      	mov	r0, r2
 8009996:	4798      	blx	r3
 8009998:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	3301      	adds	r3, #1
 800999e:	2202      	movs	r2, #2
 80099a0:	701a      	strb	r2, [r3, #0]
      break;
 80099a2:	e0f2      	b.n	8009b8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	885b      	ldrh	r3, [r3, #2]
 80099a8:	b2db      	uxtb	r3, r3
 80099aa:	2b05      	cmp	r3, #5
 80099ac:	f200 80ac 	bhi.w	8009b08 <USBD_GetDescriptor+0x258>
 80099b0:	a201      	add	r2, pc, #4	; (adr r2, 80099b8 <USBD_GetDescriptor+0x108>)
 80099b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b6:	bf00      	nop
 80099b8:	080099d1 	.word	0x080099d1
 80099bc:	08009a05 	.word	0x08009a05
 80099c0:	08009a39 	.word	0x08009a39
 80099c4:	08009a6d 	.word	0x08009a6d
 80099c8:	08009aa1 	.word	0x08009aa1
 80099cc:	08009ad5 	.word	0x08009ad5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00b      	beq.n	80099f4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	7c12      	ldrb	r2, [r2, #16]
 80099e8:	f107 0108 	add.w	r1, r7, #8
 80099ec:	4610      	mov	r0, r2
 80099ee:	4798      	blx	r3
 80099f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099f2:	e091      	b.n	8009b18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80099f4:	6839      	ldr	r1, [r7, #0]
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f000 facb 	bl	8009f92 <USBD_CtlError>
            err++;
 80099fc:	7afb      	ldrb	r3, [r7, #11]
 80099fe:	3301      	adds	r3, #1
 8009a00:	72fb      	strb	r3, [r7, #11]
          break;
 8009a02:	e089      	b.n	8009b18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00b      	beq.n	8009a28 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	7c12      	ldrb	r2, [r2, #16]
 8009a1c:	f107 0108 	add.w	r1, r7, #8
 8009a20:	4610      	mov	r0, r2
 8009a22:	4798      	blx	r3
 8009a24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a26:	e077      	b.n	8009b18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a28:	6839      	ldr	r1, [r7, #0]
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f000 fab1 	bl	8009f92 <USBD_CtlError>
            err++;
 8009a30:	7afb      	ldrb	r3, [r7, #11]
 8009a32:	3301      	adds	r3, #1
 8009a34:	72fb      	strb	r3, [r7, #11]
          break;
 8009a36:	e06f      	b.n	8009b18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d00b      	beq.n	8009a5c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	7c12      	ldrb	r2, [r2, #16]
 8009a50:	f107 0108 	add.w	r1, r7, #8
 8009a54:	4610      	mov	r0, r2
 8009a56:	4798      	blx	r3
 8009a58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a5a:	e05d      	b.n	8009b18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a5c:	6839      	ldr	r1, [r7, #0]
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f000 fa97 	bl	8009f92 <USBD_CtlError>
            err++;
 8009a64:	7afb      	ldrb	r3, [r7, #11]
 8009a66:	3301      	adds	r3, #1
 8009a68:	72fb      	strb	r3, [r7, #11]
          break;
 8009a6a:	e055      	b.n	8009b18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a72:	691b      	ldr	r3, [r3, #16]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d00b      	beq.n	8009a90 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	7c12      	ldrb	r2, [r2, #16]
 8009a84:	f107 0108 	add.w	r1, r7, #8
 8009a88:	4610      	mov	r0, r2
 8009a8a:	4798      	blx	r3
 8009a8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a8e:	e043      	b.n	8009b18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a90:	6839      	ldr	r1, [r7, #0]
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 fa7d 	bl	8009f92 <USBD_CtlError>
            err++;
 8009a98:	7afb      	ldrb	r3, [r7, #11]
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a9e:	e03b      	b.n	8009b18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aa6:	695b      	ldr	r3, [r3, #20]
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00b      	beq.n	8009ac4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab2:	695b      	ldr	r3, [r3, #20]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	7c12      	ldrb	r2, [r2, #16]
 8009ab8:	f107 0108 	add.w	r1, r7, #8
 8009abc:	4610      	mov	r0, r2
 8009abe:	4798      	blx	r3
 8009ac0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ac2:	e029      	b.n	8009b18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fa63 	bl	8009f92 <USBD_CtlError>
            err++;
 8009acc:	7afb      	ldrb	r3, [r7, #11]
 8009ace:	3301      	adds	r3, #1
 8009ad0:	72fb      	strb	r3, [r7, #11]
          break;
 8009ad2:	e021      	b.n	8009b18 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d00b      	beq.n	8009af8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ae6:	699b      	ldr	r3, [r3, #24]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	7c12      	ldrb	r2, [r2, #16]
 8009aec:	f107 0108 	add.w	r1, r7, #8
 8009af0:	4610      	mov	r0, r2
 8009af2:	4798      	blx	r3
 8009af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009af6:	e00f      	b.n	8009b18 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009af8:	6839      	ldr	r1, [r7, #0]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 fa49 	bl	8009f92 <USBD_CtlError>
            err++;
 8009b00:	7afb      	ldrb	r3, [r7, #11]
 8009b02:	3301      	adds	r3, #1
 8009b04:	72fb      	strb	r3, [r7, #11]
          break;
 8009b06:	e007      	b.n	8009b18 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b08:	6839      	ldr	r1, [r7, #0]
 8009b0a:	6878      	ldr	r0, [r7, #4]
 8009b0c:	f000 fa41 	bl	8009f92 <USBD_CtlError>
          err++;
 8009b10:	7afb      	ldrb	r3, [r7, #11]
 8009b12:	3301      	adds	r3, #1
 8009b14:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b16:	bf00      	nop
      }
      break;
 8009b18:	e037      	b.n	8009b8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	7c1b      	ldrb	r3, [r3, #16]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d109      	bne.n	8009b36 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b2a:	f107 0208 	add.w	r2, r7, #8
 8009b2e:	4610      	mov	r0, r2
 8009b30:	4798      	blx	r3
 8009b32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b34:	e029      	b.n	8009b8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fa2a 	bl	8009f92 <USBD_CtlError>
        err++;
 8009b3e:	7afb      	ldrb	r3, [r7, #11]
 8009b40:	3301      	adds	r3, #1
 8009b42:	72fb      	strb	r3, [r7, #11]
      break;
 8009b44:	e021      	b.n	8009b8a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	7c1b      	ldrb	r3, [r3, #16]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d10d      	bne.n	8009b6a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b56:	f107 0208 	add.w	r2, r7, #8
 8009b5a:	4610      	mov	r0, r2
 8009b5c:	4798      	blx	r3
 8009b5e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	3301      	adds	r3, #1
 8009b64:	2207      	movs	r2, #7
 8009b66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009b68:	e00f      	b.n	8009b8a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009b6a:	6839      	ldr	r1, [r7, #0]
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fa10 	bl	8009f92 <USBD_CtlError>
        err++;
 8009b72:	7afb      	ldrb	r3, [r7, #11]
 8009b74:	3301      	adds	r3, #1
 8009b76:	72fb      	strb	r3, [r7, #11]
      break;
 8009b78:	e007      	b.n	8009b8a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fa08 	bl	8009f92 <USBD_CtlError>
      err++;
 8009b82:	7afb      	ldrb	r3, [r7, #11]
 8009b84:	3301      	adds	r3, #1
 8009b86:	72fb      	strb	r3, [r7, #11]
      break;
 8009b88:	bf00      	nop
  }

  if (err != 0U)
 8009b8a:	7afb      	ldrb	r3, [r7, #11]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d11e      	bne.n	8009bce <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	88db      	ldrh	r3, [r3, #6]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d016      	beq.n	8009bc6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009b98:	893b      	ldrh	r3, [r7, #8]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00e      	beq.n	8009bbc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	88da      	ldrh	r2, [r3, #6]
 8009ba2:	893b      	ldrh	r3, [r7, #8]
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	bf28      	it	cs
 8009ba8:	4613      	movcs	r3, r2
 8009baa:	b29b      	uxth	r3, r3
 8009bac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009bae:	893b      	ldrh	r3, [r7, #8]
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	68f9      	ldr	r1, [r7, #12]
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fa5d 	bl	800a074 <USBD_CtlSendData>
 8009bba:	e009      	b.n	8009bd0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009bbc:	6839      	ldr	r1, [r7, #0]
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f000 f9e7 	bl	8009f92 <USBD_CtlError>
 8009bc4:	e004      	b.n	8009bd0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 faae 	bl	800a128 <USBD_CtlSendStatus>
 8009bcc:	e000      	b.n	8009bd0 <USBD_GetDescriptor+0x320>
    return;
 8009bce:	bf00      	nop
  }
}
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
 8009bd6:	bf00      	nop

08009bd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	889b      	ldrh	r3, [r3, #4]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d131      	bne.n	8009c4e <USBD_SetAddress+0x76>
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	88db      	ldrh	r3, [r3, #6]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d12d      	bne.n	8009c4e <USBD_SetAddress+0x76>
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	885b      	ldrh	r3, [r3, #2]
 8009bf6:	2b7f      	cmp	r3, #127	; 0x7f
 8009bf8:	d829      	bhi.n	8009c4e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	885b      	ldrh	r3, [r3, #2]
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d104      	bne.n	8009c1c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c12:	6839      	ldr	r1, [r7, #0]
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f9bc 	bl	8009f92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c1a:	e01d      	b.n	8009c58 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	7bfa      	ldrb	r2, [r7, #15]
 8009c20:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
 8009c26:	4619      	mov	r1, r3
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f004 fa6b 	bl	800e104 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f000 fa7a 	bl	800a128 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009c34:	7bfb      	ldrb	r3, [r7, #15]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d004      	beq.n	8009c44 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c42:	e009      	b.n	8009c58 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2201      	movs	r2, #1
 8009c48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c4c:	e004      	b.n	8009c58 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009c4e:	6839      	ldr	r1, [r7, #0]
 8009c50:	6878      	ldr	r0, [r7, #4]
 8009c52:	f000 f99e 	bl	8009f92 <USBD_CtlError>
  }
}
 8009c56:	bf00      	nop
 8009c58:	bf00      	nop
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}

08009c60 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b084      	sub	sp, #16
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	885b      	ldrh	r3, [r3, #2]
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	4b4e      	ldr	r3, [pc, #312]	; (8009db0 <USBD_SetConfig+0x150>)
 8009c76:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009c78:	4b4d      	ldr	r3, [pc, #308]	; (8009db0 <USBD_SetConfig+0x150>)
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d905      	bls.n	8009c8c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009c80:	6839      	ldr	r1, [r7, #0]
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f985 	bl	8009f92 <USBD_CtlError>
    return USBD_FAIL;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	e08c      	b.n	8009da6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d002      	beq.n	8009c9e <USBD_SetConfig+0x3e>
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d029      	beq.n	8009cf0 <USBD_SetConfig+0x90>
 8009c9c:	e075      	b.n	8009d8a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009c9e:	4b44      	ldr	r3, [pc, #272]	; (8009db0 <USBD_SetConfig+0x150>)
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d020      	beq.n	8009ce8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009ca6:	4b42      	ldr	r3, [pc, #264]	; (8009db0 <USBD_SetConfig+0x150>)
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	461a      	mov	r2, r3
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009cb0:	4b3f      	ldr	r3, [pc, #252]	; (8009db0 <USBD_SetConfig+0x150>)
 8009cb2:	781b      	ldrb	r3, [r3, #0]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f7fe fff1 	bl	8008c9e <USBD_SetClassConfig>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d008      	beq.n	8009cd8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f962 	bl	8009f92 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2202      	movs	r2, #2
 8009cd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009cd6:	e065      	b.n	8009da4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fa25 	bl	800a128 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2203      	movs	r2, #3
 8009ce2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ce6:	e05d      	b.n	8009da4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 fa1d 	bl	800a128 <USBD_CtlSendStatus>
      break;
 8009cee:	e059      	b.n	8009da4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009cf0:	4b2f      	ldr	r3, [pc, #188]	; (8009db0 <USBD_SetConfig+0x150>)
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d112      	bne.n	8009d1e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2202      	movs	r2, #2
 8009cfc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009d00:	4b2b      	ldr	r3, [pc, #172]	; (8009db0 <USBD_SetConfig+0x150>)
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	461a      	mov	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d0a:	4b29      	ldr	r3, [pc, #164]	; (8009db0 <USBD_SetConfig+0x150>)
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f7fe ffe0 	bl	8008cd6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fa06 	bl	800a128 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d1c:	e042      	b.n	8009da4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009d1e:	4b24      	ldr	r3, [pc, #144]	; (8009db0 <USBD_SetConfig+0x150>)
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	461a      	mov	r2, r3
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d02a      	beq.n	8009d82 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	4619      	mov	r1, r3
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f7fe ffce 	bl	8008cd6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009d3a:	4b1d      	ldr	r3, [pc, #116]	; (8009db0 <USBD_SetConfig+0x150>)
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	461a      	mov	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d44:	4b1a      	ldr	r3, [pc, #104]	; (8009db0 <USBD_SetConfig+0x150>)
 8009d46:	781b      	ldrb	r3, [r3, #0]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7fe ffa7 	bl	8008c9e <USBD_SetClassConfig>
 8009d50:	4603      	mov	r3, r0
 8009d52:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009d54:	7bfb      	ldrb	r3, [r7, #15]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d00f      	beq.n	8009d7a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f918 	bl	8009f92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f7fe ffb3 	bl	8008cd6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2202      	movs	r2, #2
 8009d74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d78:	e014      	b.n	8009da4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 f9d4 	bl	800a128 <USBD_CtlSendStatus>
      break;
 8009d80:	e010      	b.n	8009da4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 f9d0 	bl	800a128 <USBD_CtlSendStatus>
      break;
 8009d88:	e00c      	b.n	8009da4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009d8a:	6839      	ldr	r1, [r7, #0]
 8009d8c:	6878      	ldr	r0, [r7, #4]
 8009d8e:	f000 f900 	bl	8009f92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d92:	4b07      	ldr	r3, [pc, #28]	; (8009db0 <USBD_SetConfig+0x150>)
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	4619      	mov	r1, r3
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f7fe ff9c 	bl	8008cd6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	73fb      	strb	r3, [r7, #15]
      break;
 8009da2:	bf00      	nop
  }

  return ret;
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
 8009dae:	bf00      	nop
 8009db0:	20003465 	.word	0x20003465

08009db4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	88db      	ldrh	r3, [r3, #6]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d004      	beq.n	8009dd0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f8e2 	bl	8009f92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009dce:	e023      	b.n	8009e18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	2b02      	cmp	r3, #2
 8009dda:	dc02      	bgt.n	8009de2 <USBD_GetConfig+0x2e>
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	dc03      	bgt.n	8009de8 <USBD_GetConfig+0x34>
 8009de0:	e015      	b.n	8009e0e <USBD_GetConfig+0x5a>
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d00b      	beq.n	8009dfe <USBD_GetConfig+0x4a>
 8009de6:	e012      	b.n	8009e0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2200      	movs	r2, #0
 8009dec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	3308      	adds	r3, #8
 8009df2:	2201      	movs	r2, #1
 8009df4:	4619      	mov	r1, r3
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 f93c 	bl	800a074 <USBD_CtlSendData>
        break;
 8009dfc:	e00c      	b.n	8009e18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	3304      	adds	r3, #4
 8009e02:	2201      	movs	r2, #1
 8009e04:	4619      	mov	r1, r3
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f934 	bl	800a074 <USBD_CtlSendData>
        break;
 8009e0c:	e004      	b.n	8009e18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 f8be 	bl	8009f92 <USBD_CtlError>
        break;
 8009e16:	bf00      	nop
}
 8009e18:	bf00      	nop
 8009e1a:	3708      	adds	r7, #8
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e30:	b2db      	uxtb	r3, r3
 8009e32:	3b01      	subs	r3, #1
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d81e      	bhi.n	8009e76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	88db      	ldrh	r3, [r3, #6]
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d004      	beq.n	8009e4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f8a5 	bl	8009f92 <USBD_CtlError>
        break;
 8009e48:	e01a      	b.n	8009e80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d005      	beq.n	8009e66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	f043 0202 	orr.w	r2, r3, #2
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	330c      	adds	r3, #12
 8009e6a:	2202      	movs	r2, #2
 8009e6c:	4619      	mov	r1, r3
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f000 f900 	bl	800a074 <USBD_CtlSendData>
      break;
 8009e74:	e004      	b.n	8009e80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009e76:	6839      	ldr	r1, [r7, #0]
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 f88a 	bl	8009f92 <USBD_CtlError>
      break;
 8009e7e:	bf00      	nop
  }
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b082      	sub	sp, #8
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	885b      	ldrh	r3, [r3, #2]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d107      	bne.n	8009eaa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f940 	bl	800a128 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009ea8:	e013      	b.n	8009ed2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	885b      	ldrh	r3, [r3, #2]
 8009eae:	2b02      	cmp	r3, #2
 8009eb0:	d10b      	bne.n	8009eca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	889b      	ldrh	r3, [r3, #4]
 8009eb6:	0a1b      	lsrs	r3, r3, #8
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	b2da      	uxtb	r2, r3
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 f930 	bl	800a128 <USBD_CtlSendStatus>
}
 8009ec8:	e003      	b.n	8009ed2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f860 	bl	8009f92 <USBD_CtlError>
}
 8009ed2:	bf00      	nop
 8009ed4:	3708      	adds	r7, #8
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b082      	sub	sp, #8
 8009ede:	af00      	add	r7, sp, #0
 8009ee0:	6078      	str	r0, [r7, #4]
 8009ee2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009eea:	b2db      	uxtb	r3, r3
 8009eec:	3b01      	subs	r3, #1
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d80b      	bhi.n	8009f0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	885b      	ldrh	r3, [r3, #2]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d10c      	bne.n	8009f14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 f910 	bl	800a128 <USBD_CtlSendStatus>
      }
      break;
 8009f08:	e004      	b.n	8009f14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f0a:	6839      	ldr	r1, [r7, #0]
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f840 	bl	8009f92 <USBD_CtlError>
      break;
 8009f12:	e000      	b.n	8009f16 <USBD_ClrFeature+0x3c>
      break;
 8009f14:	bf00      	nop
  }
}
 8009f16:	bf00      	nop
 8009f18:	3708      	adds	r7, #8
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}

08009f1e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f1e:	b580      	push	{r7, lr}
 8009f20:	b084      	sub	sp, #16
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
 8009f26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	781a      	ldrb	r2, [r3, #0]
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3301      	adds	r3, #1
 8009f38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	781a      	ldrb	r2, [r3, #0]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	3301      	adds	r3, #1
 8009f46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f7ff fa17 	bl	800937c <SWAPBYTE>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	461a      	mov	r2, r3
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	3301      	adds	r3, #1
 8009f60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f7ff fa0a 	bl	800937c <SWAPBYTE>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	461a      	mov	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	3301      	adds	r3, #1
 8009f74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3301      	adds	r3, #1
 8009f7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009f7c:	68f8      	ldr	r0, [r7, #12]
 8009f7e:	f7ff f9fd 	bl	800937c <SWAPBYTE>
 8009f82:	4603      	mov	r3, r0
 8009f84:	461a      	mov	r2, r3
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	80da      	strh	r2, [r3, #6]
}
 8009f8a:	bf00      	nop
 8009f8c:	3710      	adds	r7, #16
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}

08009f92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f92:	b580      	push	{r7, lr}
 8009f94:	b082      	sub	sp, #8
 8009f96:	af00      	add	r7, sp, #0
 8009f98:	6078      	str	r0, [r7, #4]
 8009f9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009f9c:	2180      	movs	r1, #128	; 0x80
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f004 f818 	bl	800dfd4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009fa4:	2100      	movs	r1, #0
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f004 f814 	bl	800dfd4 <USBD_LL_StallEP>
}
 8009fac:	bf00      	nop
 8009fae:	3708      	adds	r7, #8
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd80      	pop	{r7, pc}

08009fb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d036      	beq.n	800a038 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009fce:	6938      	ldr	r0, [r7, #16]
 8009fd0:	f000 f836 	bl	800a040 <USBD_GetLen>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	3301      	adds	r3, #1
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	005b      	lsls	r3, r3, #1
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009fe2:	7dfb      	ldrb	r3, [r7, #23]
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	7812      	ldrb	r2, [r2, #0]
 8009fec:	701a      	strb	r2, [r3, #0]
  idx++;
 8009fee:	7dfb      	ldrb	r3, [r7, #23]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009ff4:	7dfb      	ldrb	r3, [r7, #23]
 8009ff6:	68ba      	ldr	r2, [r7, #8]
 8009ff8:	4413      	add	r3, r2
 8009ffa:	2203      	movs	r2, #3
 8009ffc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ffe:	7dfb      	ldrb	r3, [r7, #23]
 800a000:	3301      	adds	r3, #1
 800a002:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a004:	e013      	b.n	800a02e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a006:	7dfb      	ldrb	r3, [r7, #23]
 800a008:	68ba      	ldr	r2, [r7, #8]
 800a00a:	4413      	add	r3, r2
 800a00c:	693a      	ldr	r2, [r7, #16]
 800a00e:	7812      	ldrb	r2, [r2, #0]
 800a010:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	3301      	adds	r3, #1
 800a016:	613b      	str	r3, [r7, #16]
    idx++;
 800a018:	7dfb      	ldrb	r3, [r7, #23]
 800a01a:	3301      	adds	r3, #1
 800a01c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a01e:	7dfb      	ldrb	r3, [r7, #23]
 800a020:	68ba      	ldr	r2, [r7, #8]
 800a022:	4413      	add	r3, r2
 800a024:	2200      	movs	r2, #0
 800a026:	701a      	strb	r2, [r3, #0]
    idx++;
 800a028:	7dfb      	ldrb	r3, [r7, #23]
 800a02a:	3301      	adds	r3, #1
 800a02c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d1e7      	bne.n	800a006 <USBD_GetString+0x52>
 800a036:	e000      	b.n	800a03a <USBD_GetString+0x86>
    return;
 800a038:	bf00      	nop
  }
}
 800a03a:	3718      	adds	r7, #24
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a040:	b480      	push	{r7}
 800a042:	b085      	sub	sp, #20
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a050:	e005      	b.n	800a05e <USBD_GetLen+0x1e>
  {
    len++;
 800a052:	7bfb      	ldrb	r3, [r7, #15]
 800a054:	3301      	adds	r3, #1
 800a056:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	3301      	adds	r3, #1
 800a05c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	781b      	ldrb	r3, [r3, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d1f5      	bne.n	800a052 <USBD_GetLen+0x12>
  }

  return len;
 800a066:	7bfb      	ldrb	r3, [r7, #15]
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3714      	adds	r7, #20
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr

0800a074 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	60f8      	str	r0, [r7, #12]
 800a07c:	60b9      	str	r1, [r7, #8]
 800a07e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	2202      	movs	r2, #2
 800a084:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	687a      	ldr	r2, [r7, #4]
 800a08c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	687a      	ldr	r2, [r7, #4]
 800a092:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	2100      	movs	r1, #0
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f004 f868 	bl	800e170 <USBD_LL_Transmit>

  return USBD_OK;
 800a0a0:	2300      	movs	r3, #0
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3710      	adds	r7, #16
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b084      	sub	sp, #16
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	60f8      	str	r0, [r7, #12]
 800a0b2:	60b9      	str	r1, [r7, #8]
 800a0b4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f004 f857 	bl	800e170 <USBD_LL_Transmit>

  return USBD_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	2203      	movs	r2, #3
 800a0dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	68ba      	ldr	r2, [r7, #8]
 800a0f4:	2100      	movs	r1, #0
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f004 f872 	bl	800e1e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b084      	sub	sp, #16
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	60f8      	str	r0, [r7, #12]
 800a10e:	60b9      	str	r1, [r7, #8]
 800a110:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	68ba      	ldr	r2, [r7, #8]
 800a116:	2100      	movs	r1, #0
 800a118:	68f8      	ldr	r0, [r7, #12]
 800a11a:	f004 f861 	bl	800e1e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a11e:	2300      	movs	r3, #0
}
 800a120:	4618      	mov	r0, r3
 800a122:	3710      	adds	r7, #16
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b082      	sub	sp, #8
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2204      	movs	r2, #4
 800a134:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a138:	2300      	movs	r3, #0
 800a13a:	2200      	movs	r2, #0
 800a13c:	2100      	movs	r1, #0
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f004 f816 	bl	800e170 <USBD_LL_Transmit>

  return USBD_OK;
 800a144:	2300      	movs	r3, #0
}
 800a146:	4618      	mov	r0, r3
 800a148:	3708      	adds	r7, #8
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b082      	sub	sp, #8
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2205      	movs	r2, #5
 800a15a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a15e:	2300      	movs	r3, #0
 800a160:	2200      	movs	r2, #0
 800a162:	2100      	movs	r1, #0
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f004 f83b 	bl	800e1e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a16a:	2300      	movs	r3, #0
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3708      	adds	r7, #8
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <__NVIC_SetPriority>:
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	4603      	mov	r3, r0
 800a17c:	6039      	str	r1, [r7, #0]
 800a17e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a184:	2b00      	cmp	r3, #0
 800a186:	db0a      	blt.n	800a19e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a188:	683b      	ldr	r3, [r7, #0]
 800a18a:	b2da      	uxtb	r2, r3
 800a18c:	490c      	ldr	r1, [pc, #48]	; (800a1c0 <__NVIC_SetPriority+0x4c>)
 800a18e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a192:	0112      	lsls	r2, r2, #4
 800a194:	b2d2      	uxtb	r2, r2
 800a196:	440b      	add	r3, r1
 800a198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a19c:	e00a      	b.n	800a1b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	b2da      	uxtb	r2, r3
 800a1a2:	4908      	ldr	r1, [pc, #32]	; (800a1c4 <__NVIC_SetPriority+0x50>)
 800a1a4:	79fb      	ldrb	r3, [r7, #7]
 800a1a6:	f003 030f 	and.w	r3, r3, #15
 800a1aa:	3b04      	subs	r3, #4
 800a1ac:	0112      	lsls	r2, r2, #4
 800a1ae:	b2d2      	uxtb	r2, r2
 800a1b0:	440b      	add	r3, r1
 800a1b2:	761a      	strb	r2, [r3, #24]
}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr
 800a1c0:	e000e100 	.word	0xe000e100
 800a1c4:	e000ed00 	.word	0xe000ed00

0800a1c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a1cc:	2100      	movs	r1, #0
 800a1ce:	f06f 0004 	mvn.w	r0, #4
 800a1d2:	f7ff ffcf 	bl	800a174 <__NVIC_SetPriority>
#endif
}
 800a1d6:	bf00      	nop
 800a1d8:	bd80      	pop	{r7, pc}
	...

0800a1dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a1dc:	b480      	push	{r7}
 800a1de:	b083      	sub	sp, #12
 800a1e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1e2:	f3ef 8305 	mrs	r3, IPSR
 800a1e6:	603b      	str	r3, [r7, #0]
  return(result);
 800a1e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d003      	beq.n	800a1f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a1ee:	f06f 0305 	mvn.w	r3, #5
 800a1f2:	607b      	str	r3, [r7, #4]
 800a1f4:	e00c      	b.n	800a210 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a1f6:	4b0a      	ldr	r3, [pc, #40]	; (800a220 <osKernelInitialize+0x44>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d105      	bne.n	800a20a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a1fe:	4b08      	ldr	r3, [pc, #32]	; (800a220 <osKernelInitialize+0x44>)
 800a200:	2201      	movs	r2, #1
 800a202:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a204:	2300      	movs	r3, #0
 800a206:	607b      	str	r3, [r7, #4]
 800a208:	e002      	b.n	800a210 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a20a:	f04f 33ff 	mov.w	r3, #4294967295
 800a20e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a210:	687b      	ldr	r3, [r7, #4]
}
 800a212:	4618      	mov	r0, r3
 800a214:	370c      	adds	r7, #12
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	20003468 	.word	0x20003468

0800a224 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a224:	b580      	push	{r7, lr}
 800a226:	b082      	sub	sp, #8
 800a228:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a22a:	f3ef 8305 	mrs	r3, IPSR
 800a22e:	603b      	str	r3, [r7, #0]
  return(result);
 800a230:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a232:	2b00      	cmp	r3, #0
 800a234:	d003      	beq.n	800a23e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a236:	f06f 0305 	mvn.w	r3, #5
 800a23a:	607b      	str	r3, [r7, #4]
 800a23c:	e010      	b.n	800a260 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a23e:	4b0b      	ldr	r3, [pc, #44]	; (800a26c <osKernelStart+0x48>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b01      	cmp	r3, #1
 800a244:	d109      	bne.n	800a25a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a246:	f7ff ffbf 	bl	800a1c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a24a:	4b08      	ldr	r3, [pc, #32]	; (800a26c <osKernelStart+0x48>)
 800a24c:	2202      	movs	r2, #2
 800a24e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a250:	f001 fcbc 	bl	800bbcc <vTaskStartScheduler>
      stat = osOK;
 800a254:	2300      	movs	r3, #0
 800a256:	607b      	str	r3, [r7, #4]
 800a258:	e002      	b.n	800a260 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a25a:	f04f 33ff 	mov.w	r3, #4294967295
 800a25e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a260:	687b      	ldr	r3, [r7, #4]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3708      	adds	r7, #8
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	20003468 	.word	0x20003468

0800a270 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a276:	f3ef 8305 	mrs	r3, IPSR
 800a27a:	603b      	str	r3, [r7, #0]
  return(result);
 800a27c:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d003      	beq.n	800a28a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a282:	f001 fdc5 	bl	800be10 <xTaskGetTickCountFromISR>
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	e002      	b.n	800a290 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a28a:	f001 fdb1 	bl	800bdf0 <xTaskGetTickCount>
 800a28e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a290:	687b      	ldr	r3, [r7, #4]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3708      	adds	r7, #8
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b08e      	sub	sp, #56	; 0x38
 800a29e:	af04      	add	r7, sp, #16
 800a2a0:	60f8      	str	r0, [r7, #12]
 800a2a2:	60b9      	str	r1, [r7, #8]
 800a2a4:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2aa:	f3ef 8305 	mrs	r3, IPSR
 800a2ae:	617b      	str	r3, [r7, #20]
  return(result);
 800a2b0:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d17e      	bne.n	800a3b4 <osThreadNew+0x11a>
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d07b      	beq.n	800a3b4 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a2bc:	2380      	movs	r3, #128	; 0x80
 800a2be:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a2c0:	2318      	movs	r3, #24
 800a2c2:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2cc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d045      	beq.n	800a360 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <osThreadNew+0x48>
        name = attr->name;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d002      	beq.n	800a2f0 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	699b      	ldr	r3, [r3, #24]
 800a2ee:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a2f0:	69fb      	ldr	r3, [r7, #28]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d008      	beq.n	800a308 <osThreadNew+0x6e>
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	2b38      	cmp	r3, #56	; 0x38
 800a2fa:	d805      	bhi.n	800a308 <osThreadNew+0x6e>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	685b      	ldr	r3, [r3, #4]
 800a300:	f003 0301 	and.w	r3, r3, #1
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <osThreadNew+0x72>
        return (NULL);
 800a308:	2300      	movs	r3, #0
 800a30a:	e054      	b.n	800a3b6 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	695b      	ldr	r3, [r3, #20]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d003      	beq.n	800a31c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	089b      	lsrs	r3, r3, #2
 800a31a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00e      	beq.n	800a342 <osThreadNew+0xa8>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	2b5b      	cmp	r3, #91	; 0x5b
 800a32a:	d90a      	bls.n	800a342 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a330:	2b00      	cmp	r3, #0
 800a332:	d006      	beq.n	800a342 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	695b      	ldr	r3, [r3, #20]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d002      	beq.n	800a342 <osThreadNew+0xa8>
        mem = 1;
 800a33c:	2301      	movs	r3, #1
 800a33e:	61bb      	str	r3, [r7, #24]
 800a340:	e010      	b.n	800a364 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10c      	bne.n	800a364 <osThreadNew+0xca>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d108      	bne.n	800a364 <osThreadNew+0xca>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d104      	bne.n	800a364 <osThreadNew+0xca>
          mem = 0;
 800a35a:	2300      	movs	r3, #0
 800a35c:	61bb      	str	r3, [r7, #24]
 800a35e:	e001      	b.n	800a364 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a360:	2300      	movs	r3, #0
 800a362:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d110      	bne.n	800a38c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a372:	9202      	str	r2, [sp, #8]
 800a374:	9301      	str	r3, [sp, #4]
 800a376:	69fb      	ldr	r3, [r7, #28]
 800a378:	9300      	str	r3, [sp, #0]
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	6a3a      	ldr	r2, [r7, #32]
 800a37e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f001 fa4d 	bl	800b820 <xTaskCreateStatic>
 800a386:	4603      	mov	r3, r0
 800a388:	613b      	str	r3, [r7, #16]
 800a38a:	e013      	b.n	800a3b4 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a38c:	69bb      	ldr	r3, [r7, #24]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d110      	bne.n	800a3b4 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a392:	6a3b      	ldr	r3, [r7, #32]
 800a394:	b29a      	uxth	r2, r3
 800a396:	f107 0310 	add.w	r3, r7, #16
 800a39a:	9301      	str	r3, [sp, #4]
 800a39c:	69fb      	ldr	r3, [r7, #28]
 800a39e:	9300      	str	r3, [sp, #0]
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a3a4:	68f8      	ldr	r0, [r7, #12]
 800a3a6:	f001 fa98 	bl	800b8da <xTaskCreate>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d001      	beq.n	800a3b4 <osThreadNew+0x11a>
            hTask = NULL;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a3b4:	693b      	ldr	r3, [r7, #16]
}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3728      	adds	r7, #40	; 0x28
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b084      	sub	sp, #16
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3c6:	f3ef 8305 	mrs	r3, IPSR
 800a3ca:	60bb      	str	r3, [r7, #8]
  return(result);
 800a3cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d003      	beq.n	800a3da <osDelay+0x1c>
    stat = osErrorISR;
 800a3d2:	f06f 0305 	mvn.w	r3, #5
 800a3d6:	60fb      	str	r3, [r7, #12]
 800a3d8:	e007      	b.n	800a3ea <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d002      	beq.n	800a3ea <osDelay+0x2c>
      vTaskDelay(ticks);
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f001 fbbd 	bl	800bb64 <vTaskDelay>
    }
  }

  return (stat);
 800a3ea:	68fb      	ldr	r3, [r7, #12]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3710      	adds	r7, #16
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b08a      	sub	sp, #40	; 0x28
 800a3f8:	af02      	add	r7, sp, #8
 800a3fa:	60f8      	str	r0, [r7, #12]
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a400:	2300      	movs	r3, #0
 800a402:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a404:	f3ef 8305 	mrs	r3, IPSR
 800a408:	613b      	str	r3, [r7, #16]
  return(result);
 800a40a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d175      	bne.n	800a4fc <osSemaphoreNew+0x108>
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d072      	beq.n	800a4fc <osSemaphoreNew+0x108>
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d86e      	bhi.n	800a4fc <osSemaphoreNew+0x108>
    mem = -1;
 800a41e:	f04f 33ff 	mov.w	r3, #4294967295
 800a422:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d015      	beq.n	800a456 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d006      	beq.n	800a440 <osSemaphoreNew+0x4c>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	2b4f      	cmp	r3, #79	; 0x4f
 800a438:	d902      	bls.n	800a440 <osSemaphoreNew+0x4c>
        mem = 1;
 800a43a:	2301      	movs	r3, #1
 800a43c:	61bb      	str	r3, [r7, #24]
 800a43e:	e00c      	b.n	800a45a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d108      	bne.n	800a45a <osSemaphoreNew+0x66>
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	68db      	ldr	r3, [r3, #12]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d104      	bne.n	800a45a <osSemaphoreNew+0x66>
          mem = 0;
 800a450:	2300      	movs	r3, #0
 800a452:	61bb      	str	r3, [r7, #24]
 800a454:	e001      	b.n	800a45a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a456:	2300      	movs	r3, #0
 800a458:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a460:	d04c      	beq.n	800a4fc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d128      	bne.n	800a4ba <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a468:	69bb      	ldr	r3, [r7, #24]
 800a46a:	2b01      	cmp	r3, #1
 800a46c:	d10a      	bne.n	800a484 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	2203      	movs	r2, #3
 800a474:	9200      	str	r2, [sp, #0]
 800a476:	2200      	movs	r2, #0
 800a478:	2100      	movs	r1, #0
 800a47a:	2001      	movs	r0, #1
 800a47c:	f000 fa2a 	bl	800a8d4 <xQueueGenericCreateStatic>
 800a480:	61f8      	str	r0, [r7, #28]
 800a482:	e005      	b.n	800a490 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a484:	2203      	movs	r2, #3
 800a486:	2100      	movs	r1, #0
 800a488:	2001      	movs	r0, #1
 800a48a:	f000 fa9b 	bl	800a9c4 <xQueueGenericCreate>
 800a48e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a490:	69fb      	ldr	r3, [r7, #28]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d022      	beq.n	800a4dc <osSemaphoreNew+0xe8>
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d01f      	beq.n	800a4dc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a49c:	2300      	movs	r3, #0
 800a49e:	2200      	movs	r2, #0
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	69f8      	ldr	r0, [r7, #28]
 800a4a4:	f000 fb56 	bl	800ab54 <xQueueGenericSend>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d016      	beq.n	800a4dc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800a4ae:	69f8      	ldr	r0, [r7, #28]
 800a4b0:	f000 ffe2 	bl	800b478 <vQueueDelete>
            hSemaphore = NULL;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	61fb      	str	r3, [r7, #28]
 800a4b8:	e010      	b.n	800a4dc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d108      	bne.n	800a4d2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	68b9      	ldr	r1, [r7, #8]
 800a4c8:	68f8      	ldr	r0, [r7, #12]
 800a4ca:	f000 fad8 	bl	800aa7e <xQueueCreateCountingSemaphoreStatic>
 800a4ce:	61f8      	str	r0, [r7, #28]
 800a4d0:	e004      	b.n	800a4dc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800a4d2:	68b9      	ldr	r1, [r7, #8]
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f000 fb09 	bl	800aaec <xQueueCreateCountingSemaphore>
 800a4da:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00c      	beq.n	800a4fc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d003      	beq.n	800a4f0 <osSemaphoreNew+0xfc>
          name = attr->name;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	617b      	str	r3, [r7, #20]
 800a4ee:	e001      	b.n	800a4f4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800a4f4:	6979      	ldr	r1, [r7, #20]
 800a4f6:	69f8      	ldr	r0, [r7, #28]
 800a4f8:	f001 f90a 	bl	800b710 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800a4fc:	69fb      	ldr	r3, [r7, #28]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3720      	adds	r7, #32
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
	...

0800a508 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800a508:	b580      	push	{r7, lr}
 800a50a:	b086      	sub	sp, #24
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	6078      	str	r0, [r7, #4]
 800a510:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a516:	2300      	movs	r3, #0
 800a518:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a51a:	693b      	ldr	r3, [r7, #16]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d103      	bne.n	800a528 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800a520:	f06f 0303 	mvn.w	r3, #3
 800a524:	617b      	str	r3, [r7, #20]
 800a526:	e039      	b.n	800a59c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a528:	f3ef 8305 	mrs	r3, IPSR
 800a52c:	60fb      	str	r3, [r7, #12]
  return(result);
 800a52e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a530:	2b00      	cmp	r3, #0
 800a532:	d022      	beq.n	800a57a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d003      	beq.n	800a542 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800a53a:	f06f 0303 	mvn.w	r3, #3
 800a53e:	617b      	str	r3, [r7, #20]
 800a540:	e02c      	b.n	800a59c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800a542:	2300      	movs	r3, #0
 800a544:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800a546:	f107 0308 	add.w	r3, r7, #8
 800a54a:	461a      	mov	r2, r3
 800a54c:	2100      	movs	r1, #0
 800a54e:	6938      	ldr	r0, [r7, #16]
 800a550:	f000 ff12 	bl	800b378 <xQueueReceiveFromISR>
 800a554:	4603      	mov	r3, r0
 800a556:	2b01      	cmp	r3, #1
 800a558:	d003      	beq.n	800a562 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800a55a:	f06f 0302 	mvn.w	r3, #2
 800a55e:	617b      	str	r3, [r7, #20]
 800a560:	e01c      	b.n	800a59c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d019      	beq.n	800a59c <osSemaphoreAcquire+0x94>
 800a568:	4b0f      	ldr	r3, [pc, #60]	; (800a5a8 <osSemaphoreAcquire+0xa0>)
 800a56a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a56e:	601a      	str	r2, [r3, #0]
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	e010      	b.n	800a59c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800a57a:	6839      	ldr	r1, [r7, #0]
 800a57c:	6938      	ldr	r0, [r7, #16]
 800a57e:	f000 fdef 	bl	800b160 <xQueueSemaphoreTake>
 800a582:	4603      	mov	r3, r0
 800a584:	2b01      	cmp	r3, #1
 800a586:	d009      	beq.n	800a59c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d003      	beq.n	800a596 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800a58e:	f06f 0301 	mvn.w	r3, #1
 800a592:	617b      	str	r3, [r7, #20]
 800a594:	e002      	b.n	800a59c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800a596:	f06f 0302 	mvn.w	r3, #2
 800a59a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a59c:	697b      	ldr	r3, [r7, #20]
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3718      	adds	r7, #24
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	e000ed04 	.word	0xe000ed04

0800a5ac <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b086      	sub	sp, #24
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d103      	bne.n	800a5ca <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800a5c2:	f06f 0303 	mvn.w	r3, #3
 800a5c6:	617b      	str	r3, [r7, #20]
 800a5c8:	e02c      	b.n	800a624 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5ca:	f3ef 8305 	mrs	r3, IPSR
 800a5ce:	60fb      	str	r3, [r7, #12]
  return(result);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d01a      	beq.n	800a60c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800a5da:	f107 0308 	add.w	r3, r7, #8
 800a5de:	4619      	mov	r1, r3
 800a5e0:	6938      	ldr	r0, [r7, #16]
 800a5e2:	f000 fc50 	bl	800ae86 <xQueueGiveFromISR>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d003      	beq.n	800a5f4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800a5ec:	f06f 0302 	mvn.w	r3, #2
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	e017      	b.n	800a624 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d014      	beq.n	800a624 <osSemaphoreRelease+0x78>
 800a5fa:	4b0d      	ldr	r3, [pc, #52]	; (800a630 <osSemaphoreRelease+0x84>)
 800a5fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a600:	601a      	str	r2, [r3, #0]
 800a602:	f3bf 8f4f 	dsb	sy
 800a606:	f3bf 8f6f 	isb	sy
 800a60a:	e00b      	b.n	800a624 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800a60c:	2300      	movs	r3, #0
 800a60e:	2200      	movs	r2, #0
 800a610:	2100      	movs	r1, #0
 800a612:	6938      	ldr	r0, [r7, #16]
 800a614:	f000 fa9e 	bl	800ab54 <xQueueGenericSend>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d002      	beq.n	800a624 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800a61e:	f06f 0302 	mvn.w	r3, #2
 800a622:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800a624:	697b      	ldr	r3, [r7, #20]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3718      	adds	r7, #24
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop
 800a630:	e000ed04 	.word	0xe000ed04

0800a634 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a634:	b480      	push	{r7}
 800a636:	b085      	sub	sp, #20
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	4a07      	ldr	r2, [pc, #28]	; (800a660 <vApplicationGetIdleTaskMemory+0x2c>)
 800a644:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	4a06      	ldr	r2, [pc, #24]	; (800a664 <vApplicationGetIdleTaskMemory+0x30>)
 800a64a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2280      	movs	r2, #128	; 0x80
 800a650:	601a      	str	r2, [r3, #0]
}
 800a652:	bf00      	nop
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr
 800a65e:	bf00      	nop
 800a660:	2000346c 	.word	0x2000346c
 800a664:	200034c8 	.word	0x200034c8

0800a668 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a668:	b480      	push	{r7}
 800a66a:	b085      	sub	sp, #20
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4a07      	ldr	r2, [pc, #28]	; (800a694 <vApplicationGetTimerTaskMemory+0x2c>)
 800a678:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	4a06      	ldr	r2, [pc, #24]	; (800a698 <vApplicationGetTimerTaskMemory+0x30>)
 800a67e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a686:	601a      	str	r2, [r3, #0]
}
 800a688:	bf00      	nop
 800a68a:	3714      	adds	r7, #20
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr
 800a694:	200036c8 	.word	0x200036c8
 800a698:	20003724 	.word	0x20003724

0800a69c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f103 0208 	add.w	r2, r3, #8
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f103 0208 	add.w	r2, r3, #8
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f103 0208 	add.w	r2, r3, #8
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6d0:	bf00      	nop
 800a6d2:	370c      	adds	r7, #12
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6ea:	bf00      	nop
 800a6ec:	370c      	adds	r7, #12
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr

0800a6f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6f6:	b480      	push	{r7}
 800a6f8:	b085      	sub	sp, #20
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
 800a6fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	689a      	ldr	r2, [r3, #8]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	683a      	ldr	r2, [r7, #0]
 800a71a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	1c5a      	adds	r2, r3, #1
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	601a      	str	r2, [r3, #0]
}
 800a732:	bf00      	nop
 800a734:	3714      	adds	r7, #20
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr

0800a73e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a73e:	b480      	push	{r7}
 800a740:	b085      	sub	sp, #20
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a754:	d103      	bne.n	800a75e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	691b      	ldr	r3, [r3, #16]
 800a75a:	60fb      	str	r3, [r7, #12]
 800a75c:	e00c      	b.n	800a778 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	3308      	adds	r3, #8
 800a762:	60fb      	str	r3, [r7, #12]
 800a764:	e002      	b.n	800a76c <vListInsert+0x2e>
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	685b      	ldr	r3, [r3, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	68ba      	ldr	r2, [r7, #8]
 800a774:	429a      	cmp	r2, r3
 800a776:	d2f6      	bcs.n	800a766 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	685a      	ldr	r2, [r3, #4]
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	683a      	ldr	r2, [r7, #0]
 800a786:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	68fa      	ldr	r2, [r7, #12]
 800a78c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	683a      	ldr	r2, [r7, #0]
 800a792:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	1c5a      	adds	r2, r3, #1
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	601a      	str	r2, [r3, #0]
}
 800a7a4:	bf00      	nop
 800a7a6:	3714      	adds	r7, #20
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	6892      	ldr	r2, [r2, #8]
 800a7c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	687a      	ldr	r2, [r7, #4]
 800a7ce:	6852      	ldr	r2, [r2, #4]
 800a7d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d103      	bne.n	800a7e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	689a      	ldr	r2, [r3, #8]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	1e5a      	subs	r2, r3, #1
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
}
 800a7f8:	4618      	mov	r0, r3
 800a7fa:	3714      	adds	r7, #20
 800a7fc:	46bd      	mov	sp, r7
 800a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a802:	4770      	bx	lr

0800a804 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b084      	sub	sp, #16
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d10a      	bne.n	800a82e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a81c:	f383 8811 	msr	BASEPRI, r3
 800a820:	f3bf 8f6f 	isb	sy
 800a824:	f3bf 8f4f 	dsb	sy
 800a828:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a82a:	bf00      	nop
 800a82c:	e7fe      	b.n	800a82c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a82e:	f002 fc81 	bl	800d134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681a      	ldr	r2, [r3, #0]
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a83a:	68f9      	ldr	r1, [r7, #12]
 800a83c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a83e:	fb01 f303 	mul.w	r3, r1, r3
 800a842:	441a      	add	r2, r3
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2200      	movs	r2, #0
 800a84c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681a      	ldr	r2, [r3, #0]
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a85e:	3b01      	subs	r3, #1
 800a860:	68f9      	ldr	r1, [r7, #12]
 800a862:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a864:	fb01 f303 	mul.w	r3, r1, r3
 800a868:	441a      	add	r2, r3
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	22ff      	movs	r2, #255	; 0xff
 800a872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	22ff      	movs	r2, #255	; 0xff
 800a87a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d114      	bne.n	800a8ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d01a      	beq.n	800a8c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	3310      	adds	r3, #16
 800a890:	4618      	mov	r0, r3
 800a892:	f001 fc37 	bl	800c104 <xTaskRemoveFromEventList>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d012      	beq.n	800a8c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a89c:	4b0c      	ldr	r3, [pc, #48]	; (800a8d0 <xQueueGenericReset+0xcc>)
 800a89e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	f3bf 8f6f 	isb	sy
 800a8ac:	e009      	b.n	800a8c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3310      	adds	r3, #16
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7ff fef2 	bl	800a69c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	3324      	adds	r3, #36	; 0x24
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f7ff feed 	bl	800a69c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a8c2:	f002 fc67 	bl	800d194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a8c6:	2301      	movs	r3, #1
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	e000ed04 	.word	0xe000ed04

0800a8d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b08e      	sub	sp, #56	; 0x38
 800a8d8:	af02      	add	r7, sp, #8
 800a8da:	60f8      	str	r0, [r7, #12]
 800a8dc:	60b9      	str	r1, [r7, #8]
 800a8de:	607a      	str	r2, [r7, #4]
 800a8e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d10a      	bne.n	800a8fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ec:	f383 8811 	msr	BASEPRI, r3
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a8fa:	bf00      	nop
 800a8fc:	e7fe      	b.n	800a8fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d10a      	bne.n	800a91a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a908:	f383 8811 	msr	BASEPRI, r3
 800a90c:	f3bf 8f6f 	isb	sy
 800a910:	f3bf 8f4f 	dsb	sy
 800a914:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a916:	bf00      	nop
 800a918:	e7fe      	b.n	800a918 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d002      	beq.n	800a926 <xQueueGenericCreateStatic+0x52>
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d001      	beq.n	800a92a <xQueueGenericCreateStatic+0x56>
 800a926:	2301      	movs	r3, #1
 800a928:	e000      	b.n	800a92c <xQueueGenericCreateStatic+0x58>
 800a92a:	2300      	movs	r3, #0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10a      	bne.n	800a946 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a934:	f383 8811 	msr	BASEPRI, r3
 800a938:	f3bf 8f6f 	isb	sy
 800a93c:	f3bf 8f4f 	dsb	sy
 800a940:	623b      	str	r3, [r7, #32]
}
 800a942:	bf00      	nop
 800a944:	e7fe      	b.n	800a944 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d102      	bne.n	800a952 <xQueueGenericCreateStatic+0x7e>
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d101      	bne.n	800a956 <xQueueGenericCreateStatic+0x82>
 800a952:	2301      	movs	r3, #1
 800a954:	e000      	b.n	800a958 <xQueueGenericCreateStatic+0x84>
 800a956:	2300      	movs	r3, #0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10a      	bne.n	800a972 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a960:	f383 8811 	msr	BASEPRI, r3
 800a964:	f3bf 8f6f 	isb	sy
 800a968:	f3bf 8f4f 	dsb	sy
 800a96c:	61fb      	str	r3, [r7, #28]
}
 800a96e:	bf00      	nop
 800a970:	e7fe      	b.n	800a970 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a972:	2350      	movs	r3, #80	; 0x50
 800a974:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	2b50      	cmp	r3, #80	; 0x50
 800a97a:	d00a      	beq.n	800a992 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a97c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a980:	f383 8811 	msr	BASEPRI, r3
 800a984:	f3bf 8f6f 	isb	sy
 800a988:	f3bf 8f4f 	dsb	sy
 800a98c:	61bb      	str	r3, [r7, #24]
}
 800a98e:	bf00      	nop
 800a990:	e7fe      	b.n	800a990 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a992:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d00d      	beq.n	800a9ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ac:	9300      	str	r3, [sp, #0]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	687a      	ldr	r2, [r7, #4]
 800a9b2:	68b9      	ldr	r1, [r7, #8]
 800a9b4:	68f8      	ldr	r0, [r7, #12]
 800a9b6:	f000 f83f 	bl	800aa38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a9ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	3730      	adds	r7, #48	; 0x30
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	bd80      	pop	{r7, pc}

0800a9c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b08a      	sub	sp, #40	; 0x28
 800a9c8:	af02      	add	r7, sp, #8
 800a9ca:	60f8      	str	r0, [r7, #12]
 800a9cc:	60b9      	str	r1, [r7, #8]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d10a      	bne.n	800a9ee <xQueueGenericCreate+0x2a>
	__asm volatile
 800a9d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9dc:	f383 8811 	msr	BASEPRI, r3
 800a9e0:	f3bf 8f6f 	isb	sy
 800a9e4:	f3bf 8f4f 	dsb	sy
 800a9e8:	613b      	str	r3, [r7, #16]
}
 800a9ea:	bf00      	nop
 800a9ec:	e7fe      	b.n	800a9ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	68ba      	ldr	r2, [r7, #8]
 800a9f2:	fb02 f303 	mul.w	r3, r2, r3
 800a9f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	3350      	adds	r3, #80	; 0x50
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f002 fcbb 	bl	800d378 <pvPortMalloc>
 800aa02:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aa04:	69bb      	ldr	r3, [r7, #24]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d011      	beq.n	800aa2e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	3350      	adds	r3, #80	; 0x50
 800aa12:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aa14:	69bb      	ldr	r3, [r7, #24]
 800aa16:	2200      	movs	r2, #0
 800aa18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa1c:	79fa      	ldrb	r2, [r7, #7]
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	4613      	mov	r3, r2
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	68b9      	ldr	r1, [r7, #8]
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	f000 f805 	bl	800aa38 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa2e:	69bb      	ldr	r3, [r7, #24]
	}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3720      	adds	r7, #32
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	60f8      	str	r0, [r7, #12]
 800aa40:	60b9      	str	r1, [r7, #8]
 800aa42:	607a      	str	r2, [r7, #4]
 800aa44:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d103      	bne.n	800aa54 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	69ba      	ldr	r2, [r7, #24]
 800aa50:	601a      	str	r2, [r3, #0]
 800aa52:	e002      	b.n	800aa5a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	68ba      	ldr	r2, [r7, #8]
 800aa64:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa66:	2101      	movs	r1, #1
 800aa68:	69b8      	ldr	r0, [r7, #24]
 800aa6a:	f7ff fecb 	bl	800a804 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aa6e:	69bb      	ldr	r3, [r7, #24]
 800aa70:	78fa      	ldrb	r2, [r7, #3]
 800aa72:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa76:	bf00      	nop
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b08a      	sub	sp, #40	; 0x28
 800aa82:	af02      	add	r7, sp, #8
 800aa84:	60f8      	str	r0, [r7, #12]
 800aa86:	60b9      	str	r1, [r7, #8]
 800aa88:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10a      	bne.n	800aaa6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800aa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa94:	f383 8811 	msr	BASEPRI, r3
 800aa98:	f3bf 8f6f 	isb	sy
 800aa9c:	f3bf 8f4f 	dsb	sy
 800aaa0:	61bb      	str	r3, [r7, #24]
}
 800aaa2:	bf00      	nop
 800aaa4:	e7fe      	b.n	800aaa4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	429a      	cmp	r2, r3
 800aaac:	d90a      	bls.n	800aac4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800aaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aab2:	f383 8811 	msr	BASEPRI, r3
 800aab6:	f3bf 8f6f 	isb	sy
 800aaba:	f3bf 8f4f 	dsb	sy
 800aabe:	617b      	str	r3, [r7, #20]
}
 800aac0:	bf00      	nop
 800aac2:	e7fe      	b.n	800aac2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800aac4:	2302      	movs	r3, #2
 800aac6:	9300      	str	r3, [sp, #0]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2200      	movs	r2, #0
 800aacc:	2100      	movs	r1, #0
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f7ff ff00 	bl	800a8d4 <xQueueGenericCreateStatic>
 800aad4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d002      	beq.n	800aae2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800aadc:	69fb      	ldr	r3, [r7, #28]
 800aade:	68ba      	ldr	r2, [r7, #8]
 800aae0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800aae2:	69fb      	ldr	r3, [r7, #28]
	}
 800aae4:	4618      	mov	r0, r3
 800aae6:	3720      	adds	r7, #32
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b086      	sub	sp, #24
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d10a      	bne.n	800ab12 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800aafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab00:	f383 8811 	msr	BASEPRI, r3
 800ab04:	f3bf 8f6f 	isb	sy
 800ab08:	f3bf 8f4f 	dsb	sy
 800ab0c:	613b      	str	r3, [r7, #16]
}
 800ab0e:	bf00      	nop
 800ab10:	e7fe      	b.n	800ab10 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ab12:	683a      	ldr	r2, [r7, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d90a      	bls.n	800ab30 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800ab1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab1e:	f383 8811 	msr	BASEPRI, r3
 800ab22:	f3bf 8f6f 	isb	sy
 800ab26:	f3bf 8f4f 	dsb	sy
 800ab2a:	60fb      	str	r3, [r7, #12]
}
 800ab2c:	bf00      	nop
 800ab2e:	e7fe      	b.n	800ab2e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ab30:	2202      	movs	r2, #2
 800ab32:	2100      	movs	r1, #0
 800ab34:	6878      	ldr	r0, [r7, #4]
 800ab36:	f7ff ff45 	bl	800a9c4 <xQueueGenericCreate>
 800ab3a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d002      	beq.n	800ab48 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	683a      	ldr	r2, [r7, #0]
 800ab46:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ab48:	697b      	ldr	r3, [r7, #20]
	}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3718      	adds	r7, #24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
	...

0800ab54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b08e      	sub	sp, #56	; 0x38
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	60f8      	str	r0, [r7, #12]
 800ab5c:	60b9      	str	r1, [r7, #8]
 800ab5e:	607a      	str	r2, [r7, #4]
 800ab60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ab62:	2300      	movs	r3, #0
 800ab64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d10a      	bne.n	800ab86 <xQueueGenericSend+0x32>
	__asm volatile
 800ab70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab74:	f383 8811 	msr	BASEPRI, r3
 800ab78:	f3bf 8f6f 	isb	sy
 800ab7c:	f3bf 8f4f 	dsb	sy
 800ab80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab82:	bf00      	nop
 800ab84:	e7fe      	b.n	800ab84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d103      	bne.n	800ab94 <xQueueGenericSend+0x40>
 800ab8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d101      	bne.n	800ab98 <xQueueGenericSend+0x44>
 800ab94:	2301      	movs	r3, #1
 800ab96:	e000      	b.n	800ab9a <xQueueGenericSend+0x46>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d10a      	bne.n	800abb4 <xQueueGenericSend+0x60>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	2b02      	cmp	r3, #2
 800abb8:	d103      	bne.n	800abc2 <xQueueGenericSend+0x6e>
 800abba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abbe:	2b01      	cmp	r3, #1
 800abc0:	d101      	bne.n	800abc6 <xQueueGenericSend+0x72>
 800abc2:	2301      	movs	r3, #1
 800abc4:	e000      	b.n	800abc8 <xQueueGenericSend+0x74>
 800abc6:	2300      	movs	r3, #0
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d10a      	bne.n	800abe2 <xQueueGenericSend+0x8e>
	__asm volatile
 800abcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd0:	f383 8811 	msr	BASEPRI, r3
 800abd4:	f3bf 8f6f 	isb	sy
 800abd8:	f3bf 8f4f 	dsb	sy
 800abdc:	623b      	str	r3, [r7, #32]
}
 800abde:	bf00      	nop
 800abe0:	e7fe      	b.n	800abe0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abe2:	f001 fc4d 	bl	800c480 <xTaskGetSchedulerState>
 800abe6:	4603      	mov	r3, r0
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d102      	bne.n	800abf2 <xQueueGenericSend+0x9e>
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d101      	bne.n	800abf6 <xQueueGenericSend+0xa2>
 800abf2:	2301      	movs	r3, #1
 800abf4:	e000      	b.n	800abf8 <xQueueGenericSend+0xa4>
 800abf6:	2300      	movs	r3, #0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d10a      	bne.n	800ac12 <xQueueGenericSend+0xbe>
	__asm volatile
 800abfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	61fb      	str	r3, [r7, #28]
}
 800ac0e:	bf00      	nop
 800ac10:	e7fe      	b.n	800ac10 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac12:	f002 fa8f 	bl	800d134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d302      	bcc.n	800ac28 <xQueueGenericSend+0xd4>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b02      	cmp	r3, #2
 800ac26:	d129      	bne.n	800ac7c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac28:	683a      	ldr	r2, [r7, #0]
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ac2e:	f000 fc5e 	bl	800b4ee <prvCopyDataToQueue>
 800ac32:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d010      	beq.n	800ac5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3e:	3324      	adds	r3, #36	; 0x24
 800ac40:	4618      	mov	r0, r3
 800ac42:	f001 fa5f 	bl	800c104 <xTaskRemoveFromEventList>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d013      	beq.n	800ac74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ac4c:	4b3f      	ldr	r3, [pc, #252]	; (800ad4c <xQueueGenericSend+0x1f8>)
 800ac4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac52:	601a      	str	r2, [r3, #0]
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	e00a      	b.n	800ac74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ac5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d007      	beq.n	800ac74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ac64:	4b39      	ldr	r3, [pc, #228]	; (800ad4c <xQueueGenericSend+0x1f8>)
 800ac66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac6a:	601a      	str	r2, [r3, #0]
 800ac6c:	f3bf 8f4f 	dsb	sy
 800ac70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ac74:	f002 fa8e 	bl	800d194 <vPortExitCritical>
				return pdPASS;
 800ac78:	2301      	movs	r3, #1
 800ac7a:	e063      	b.n	800ad44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d103      	bne.n	800ac8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac82:	f002 fa87 	bl	800d194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ac86:	2300      	movs	r3, #0
 800ac88:	e05c      	b.n	800ad44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d106      	bne.n	800ac9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac90:	f107 0314 	add.w	r3, r7, #20
 800ac94:	4618      	mov	r0, r3
 800ac96:	f001 fa99 	bl	800c1cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac9e:	f002 fa79 	bl	800d194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aca2:	f000 fff9 	bl	800bc98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aca6:	f002 fa45 	bl	800d134 <vPortEnterCritical>
 800acaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800acb0:	b25b      	sxtb	r3, r3
 800acb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acb6:	d103      	bne.n	800acc0 <xQueueGenericSend+0x16c>
 800acb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acba:	2200      	movs	r2, #0
 800acbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800acc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800acc6:	b25b      	sxtb	r3, r3
 800acc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800accc:	d103      	bne.n	800acd6 <xQueueGenericSend+0x182>
 800acce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acd0:	2200      	movs	r2, #0
 800acd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acd6:	f002 fa5d 	bl	800d194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acda:	1d3a      	adds	r2, r7, #4
 800acdc:	f107 0314 	add.w	r3, r7, #20
 800ace0:	4611      	mov	r1, r2
 800ace2:	4618      	mov	r0, r3
 800ace4:	f001 fa88 	bl	800c1f8 <xTaskCheckForTimeOut>
 800ace8:	4603      	mov	r3, r0
 800acea:	2b00      	cmp	r3, #0
 800acec:	d124      	bne.n	800ad38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800acee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acf0:	f000 fcf5 	bl	800b6de <prvIsQueueFull>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d018      	beq.n	800ad2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800acfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acfc:	3310      	adds	r3, #16
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	4611      	mov	r1, r2
 800ad02:	4618      	mov	r0, r3
 800ad04:	f001 f9ae 	bl	800c064 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ad08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad0a:	f000 fc80 	bl	800b60e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ad0e:	f000 ffd1 	bl	800bcb4 <xTaskResumeAll>
 800ad12:	4603      	mov	r3, r0
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	f47f af7c 	bne.w	800ac12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ad1a:	4b0c      	ldr	r3, [pc, #48]	; (800ad4c <xQueueGenericSend+0x1f8>)
 800ad1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad20:	601a      	str	r2, [r3, #0]
 800ad22:	f3bf 8f4f 	dsb	sy
 800ad26:	f3bf 8f6f 	isb	sy
 800ad2a:	e772      	b.n	800ac12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ad2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad2e:	f000 fc6e 	bl	800b60e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad32:	f000 ffbf 	bl	800bcb4 <xTaskResumeAll>
 800ad36:	e76c      	b.n	800ac12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ad38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ad3a:	f000 fc68 	bl	800b60e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad3e:	f000 ffb9 	bl	800bcb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ad42:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3738      	adds	r7, #56	; 0x38
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	e000ed04 	.word	0xe000ed04

0800ad50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b090      	sub	sp, #64	; 0x40
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
 800ad5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ad62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d10a      	bne.n	800ad7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ad68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad6c:	f383 8811 	msr	BASEPRI, r3
 800ad70:	f3bf 8f6f 	isb	sy
 800ad74:	f3bf 8f4f 	dsb	sy
 800ad78:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad7a:	bf00      	nop
 800ad7c:	e7fe      	b.n	800ad7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d103      	bne.n	800ad8c <xQueueGenericSendFromISR+0x3c>
 800ad84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d101      	bne.n	800ad90 <xQueueGenericSendFromISR+0x40>
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e000      	b.n	800ad92 <xQueueGenericSendFromISR+0x42>
 800ad90:	2300      	movs	r3, #0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d10a      	bne.n	800adac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ada8:	bf00      	nop
 800adaa:	e7fe      	b.n	800adaa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	2b02      	cmp	r3, #2
 800adb0:	d103      	bne.n	800adba <xQueueGenericSendFromISR+0x6a>
 800adb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d101      	bne.n	800adbe <xQueueGenericSendFromISR+0x6e>
 800adba:	2301      	movs	r3, #1
 800adbc:	e000      	b.n	800adc0 <xQueueGenericSendFromISR+0x70>
 800adbe:	2300      	movs	r3, #0
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d10a      	bne.n	800adda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800adc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc8:	f383 8811 	msr	BASEPRI, r3
 800adcc:	f3bf 8f6f 	isb	sy
 800add0:	f3bf 8f4f 	dsb	sy
 800add4:	623b      	str	r3, [r7, #32]
}
 800add6:	bf00      	nop
 800add8:	e7fe      	b.n	800add8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800adda:	f002 fa8d 	bl	800d2f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800adde:	f3ef 8211 	mrs	r2, BASEPRI
 800ade2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade6:	f383 8811 	msr	BASEPRI, r3
 800adea:	f3bf 8f6f 	isb	sy
 800adee:	f3bf 8f4f 	dsb	sy
 800adf2:	61fa      	str	r2, [r7, #28]
 800adf4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800adf6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800adf8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d302      	bcc.n	800ae0c <xQueueGenericSendFromISR+0xbc>
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d12f      	bne.n	800ae6c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ae0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae1c:	683a      	ldr	r2, [r7, #0]
 800ae1e:	68b9      	ldr	r1, [r7, #8]
 800ae20:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ae22:	f000 fb64 	bl	800b4ee <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ae26:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ae2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae2e:	d112      	bne.n	800ae56 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d016      	beq.n	800ae66 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae3a:	3324      	adds	r3, #36	; 0x24
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f001 f961 	bl	800c104 <xTaskRemoveFromEventList>
 800ae42:	4603      	mov	r3, r0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00e      	beq.n	800ae66 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d00b      	beq.n	800ae66 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2201      	movs	r2, #1
 800ae52:	601a      	str	r2, [r3, #0]
 800ae54:	e007      	b.n	800ae66 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ae56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	b25a      	sxtb	r2, r3
 800ae60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ae66:	2301      	movs	r3, #1
 800ae68:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ae6a:	e001      	b.n	800ae70 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae72:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ae7a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3740      	adds	r7, #64	; 0x40
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b08e      	sub	sp, #56	; 0x38
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ae94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d10a      	bne.n	800aeb0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ae9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae9e:	f383 8811 	msr	BASEPRI, r3
 800aea2:	f3bf 8f6f 	isb	sy
 800aea6:	f3bf 8f4f 	dsb	sy
 800aeaa:	623b      	str	r3, [r7, #32]
}
 800aeac:	bf00      	nop
 800aeae:	e7fe      	b.n	800aeae <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800aeb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00a      	beq.n	800aece <xQueueGiveFromISR+0x48>
	__asm volatile
 800aeb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebc:	f383 8811 	msr	BASEPRI, r3
 800aec0:	f3bf 8f6f 	isb	sy
 800aec4:	f3bf 8f4f 	dsb	sy
 800aec8:	61fb      	str	r3, [r7, #28]
}
 800aeca:	bf00      	nop
 800aecc:	e7fe      	b.n	800aecc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d103      	bne.n	800aede <xQueueGiveFromISR+0x58>
 800aed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed8:	689b      	ldr	r3, [r3, #8]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d101      	bne.n	800aee2 <xQueueGiveFromISR+0x5c>
 800aede:	2301      	movs	r3, #1
 800aee0:	e000      	b.n	800aee4 <xQueueGiveFromISR+0x5e>
 800aee2:	2300      	movs	r3, #0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d10a      	bne.n	800aefe <xQueueGiveFromISR+0x78>
	__asm volatile
 800aee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeec:	f383 8811 	msr	BASEPRI, r3
 800aef0:	f3bf 8f6f 	isb	sy
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	61bb      	str	r3, [r7, #24]
}
 800aefa:	bf00      	nop
 800aefc:	e7fe      	b.n	800aefc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aefe:	f002 f9fb 	bl	800d2f8 <vPortValidateInterruptPriority>
	__asm volatile
 800af02:	f3ef 8211 	mrs	r2, BASEPRI
 800af06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af0a:	f383 8811 	msr	BASEPRI, r3
 800af0e:	f3bf 8f6f 	isb	sy
 800af12:	f3bf 8f4f 	dsb	sy
 800af16:	617a      	str	r2, [r7, #20]
 800af18:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800af1a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800af24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d22b      	bcs.n	800af86 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800af38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af3a:	1c5a      	adds	r2, r3, #1
 800af3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800af40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af48:	d112      	bne.n	800af70 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d016      	beq.n	800af80 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af54:	3324      	adds	r3, #36	; 0x24
 800af56:	4618      	mov	r0, r3
 800af58:	f001 f8d4 	bl	800c104 <xTaskRemoveFromEventList>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d00e      	beq.n	800af80 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d00b      	beq.n	800af80 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	2201      	movs	r2, #1
 800af6c:	601a      	str	r2, [r3, #0]
 800af6e:	e007      	b.n	800af80 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af74:	3301      	adds	r3, #1
 800af76:	b2db      	uxtb	r3, r3
 800af78:	b25a      	sxtb	r2, r3
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800af80:	2301      	movs	r3, #1
 800af82:	637b      	str	r3, [r7, #52]	; 0x34
 800af84:	e001      	b.n	800af8a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af86:	2300      	movs	r3, #0
 800af88:	637b      	str	r3, [r7, #52]	; 0x34
 800af8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af8c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	f383 8811 	msr	BASEPRI, r3
}
 800af94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3738      	adds	r7, #56	; 0x38
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b08c      	sub	sp, #48	; 0x30
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	60f8      	str	r0, [r7, #12]
 800afa8:	60b9      	str	r1, [r7, #8]
 800afaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800afac:	2300      	movs	r3, #0
 800afae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800afb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d10a      	bne.n	800afd0 <xQueueReceive+0x30>
	__asm volatile
 800afba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afbe:	f383 8811 	msr	BASEPRI, r3
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	623b      	str	r3, [r7, #32]
}
 800afcc:	bf00      	nop
 800afce:	e7fe      	b.n	800afce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d103      	bne.n	800afde <xQueueReceive+0x3e>
 800afd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d101      	bne.n	800afe2 <xQueueReceive+0x42>
 800afde:	2301      	movs	r3, #1
 800afe0:	e000      	b.n	800afe4 <xQueueReceive+0x44>
 800afe2:	2300      	movs	r3, #0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10a      	bne.n	800affe <xQueueReceive+0x5e>
	__asm volatile
 800afe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afec:	f383 8811 	msr	BASEPRI, r3
 800aff0:	f3bf 8f6f 	isb	sy
 800aff4:	f3bf 8f4f 	dsb	sy
 800aff8:	61fb      	str	r3, [r7, #28]
}
 800affa:	bf00      	nop
 800affc:	e7fe      	b.n	800affc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800affe:	f001 fa3f 	bl	800c480 <xTaskGetSchedulerState>
 800b002:	4603      	mov	r3, r0
 800b004:	2b00      	cmp	r3, #0
 800b006:	d102      	bne.n	800b00e <xQueueReceive+0x6e>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d101      	bne.n	800b012 <xQueueReceive+0x72>
 800b00e:	2301      	movs	r3, #1
 800b010:	e000      	b.n	800b014 <xQueueReceive+0x74>
 800b012:	2300      	movs	r3, #0
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10a      	bne.n	800b02e <xQueueReceive+0x8e>
	__asm volatile
 800b018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b01c:	f383 8811 	msr	BASEPRI, r3
 800b020:	f3bf 8f6f 	isb	sy
 800b024:	f3bf 8f4f 	dsb	sy
 800b028:	61bb      	str	r3, [r7, #24]
}
 800b02a:	bf00      	nop
 800b02c:	e7fe      	b.n	800b02c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b02e:	f002 f881 	bl	800d134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b036:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d01f      	beq.n	800b07e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b03e:	68b9      	ldr	r1, [r7, #8]
 800b040:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b042:	f000 fabe 	bl	800b5c2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b048:	1e5a      	subs	r2, r3, #1
 800b04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b04c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d00f      	beq.n	800b076 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b058:	3310      	adds	r3, #16
 800b05a:	4618      	mov	r0, r3
 800b05c:	f001 f852 	bl	800c104 <xTaskRemoveFromEventList>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d007      	beq.n	800b076 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b066:	4b3d      	ldr	r3, [pc, #244]	; (800b15c <xQueueReceive+0x1bc>)
 800b068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b06c:	601a      	str	r2, [r3, #0]
 800b06e:	f3bf 8f4f 	dsb	sy
 800b072:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b076:	f002 f88d 	bl	800d194 <vPortExitCritical>
				return pdPASS;
 800b07a:	2301      	movs	r3, #1
 800b07c:	e069      	b.n	800b152 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d103      	bne.n	800b08c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b084:	f002 f886 	bl	800d194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b088:	2300      	movs	r3, #0
 800b08a:	e062      	b.n	800b152 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d106      	bne.n	800b0a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b092:	f107 0310 	add.w	r3, r7, #16
 800b096:	4618      	mov	r0, r3
 800b098:	f001 f898 	bl	800c1cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b09c:	2301      	movs	r3, #1
 800b09e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b0a0:	f002 f878 	bl	800d194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b0a4:	f000 fdf8 	bl	800bc98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b0a8:	f002 f844 	bl	800d134 <vPortEnterCritical>
 800b0ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b0b2:	b25b      	sxtb	r3, r3
 800b0b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b8:	d103      	bne.n	800b0c2 <xQueueReceive+0x122>
 800b0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b0c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0c8:	b25b      	sxtb	r3, r3
 800b0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ce:	d103      	bne.n	800b0d8 <xQueueReceive+0x138>
 800b0d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d2:	2200      	movs	r2, #0
 800b0d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b0d8:	f002 f85c 	bl	800d194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0dc:	1d3a      	adds	r2, r7, #4
 800b0de:	f107 0310 	add.w	r3, r7, #16
 800b0e2:	4611      	mov	r1, r2
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f001 f887 	bl	800c1f8 <xTaskCheckForTimeOut>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d123      	bne.n	800b138 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0f2:	f000 fade 	bl	800b6b2 <prvIsQueueEmpty>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d017      	beq.n	800b12c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0fe:	3324      	adds	r3, #36	; 0x24
 800b100:	687a      	ldr	r2, [r7, #4]
 800b102:	4611      	mov	r1, r2
 800b104:	4618      	mov	r0, r3
 800b106:	f000 ffad 	bl	800c064 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b10a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b10c:	f000 fa7f 	bl	800b60e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b110:	f000 fdd0 	bl	800bcb4 <xTaskResumeAll>
 800b114:	4603      	mov	r3, r0
 800b116:	2b00      	cmp	r3, #0
 800b118:	d189      	bne.n	800b02e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b11a:	4b10      	ldr	r3, [pc, #64]	; (800b15c <xQueueReceive+0x1bc>)
 800b11c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b120:	601a      	str	r2, [r3, #0]
 800b122:	f3bf 8f4f 	dsb	sy
 800b126:	f3bf 8f6f 	isb	sy
 800b12a:	e780      	b.n	800b02e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b12c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b12e:	f000 fa6e 	bl	800b60e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b132:	f000 fdbf 	bl	800bcb4 <xTaskResumeAll>
 800b136:	e77a      	b.n	800b02e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b13a:	f000 fa68 	bl	800b60e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b13e:	f000 fdb9 	bl	800bcb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b144:	f000 fab5 	bl	800b6b2 <prvIsQueueEmpty>
 800b148:	4603      	mov	r3, r0
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	f43f af6f 	beq.w	800b02e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b150:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b152:	4618      	mov	r0, r3
 800b154:	3730      	adds	r7, #48	; 0x30
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	e000ed04 	.word	0xe000ed04

0800b160 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b08e      	sub	sp, #56	; 0x38
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b16a:	2300      	movs	r3, #0
 800b16c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b172:	2300      	movs	r3, #0
 800b174:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d10a      	bne.n	800b192 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b180:	f383 8811 	msr	BASEPRI, r3
 800b184:	f3bf 8f6f 	isb	sy
 800b188:	f3bf 8f4f 	dsb	sy
 800b18c:	623b      	str	r3, [r7, #32]
}
 800b18e:	bf00      	nop
 800b190:	e7fe      	b.n	800b190 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00a      	beq.n	800b1b0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b19a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b19e:	f383 8811 	msr	BASEPRI, r3
 800b1a2:	f3bf 8f6f 	isb	sy
 800b1a6:	f3bf 8f4f 	dsb	sy
 800b1aa:	61fb      	str	r3, [r7, #28]
}
 800b1ac:	bf00      	nop
 800b1ae:	e7fe      	b.n	800b1ae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1b0:	f001 f966 	bl	800c480 <xTaskGetSchedulerState>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d102      	bne.n	800b1c0 <xQueueSemaphoreTake+0x60>
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d101      	bne.n	800b1c4 <xQueueSemaphoreTake+0x64>
 800b1c0:	2301      	movs	r3, #1
 800b1c2:	e000      	b.n	800b1c6 <xQueueSemaphoreTake+0x66>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d10a      	bne.n	800b1e0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b1ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1ce:	f383 8811 	msr	BASEPRI, r3
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	f3bf 8f4f 	dsb	sy
 800b1da:	61bb      	str	r3, [r7, #24]
}
 800b1dc:	bf00      	nop
 800b1de:	e7fe      	b.n	800b1de <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1e0:	f001 ffa8 	bl	800d134 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d024      	beq.n	800b23a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f2:	1e5a      	subs	r2, r3, #1
 800b1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1f6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d104      	bne.n	800b20a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b200:	f001 fab4 	bl	800c76c <pvTaskIncrementMutexHeldCount>
 800b204:	4602      	mov	r2, r0
 800b206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b208:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d00f      	beq.n	800b232 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b214:	3310      	adds	r3, #16
 800b216:	4618      	mov	r0, r3
 800b218:	f000 ff74 	bl	800c104 <xTaskRemoveFromEventList>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d007      	beq.n	800b232 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b222:	4b54      	ldr	r3, [pc, #336]	; (800b374 <xQueueSemaphoreTake+0x214>)
 800b224:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b228:	601a      	str	r2, [r3, #0]
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b232:	f001 ffaf 	bl	800d194 <vPortExitCritical>
				return pdPASS;
 800b236:	2301      	movs	r3, #1
 800b238:	e097      	b.n	800b36a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d111      	bne.n	800b264 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b242:	2b00      	cmp	r3, #0
 800b244:	d00a      	beq.n	800b25c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24a:	f383 8811 	msr	BASEPRI, r3
 800b24e:	f3bf 8f6f 	isb	sy
 800b252:	f3bf 8f4f 	dsb	sy
 800b256:	617b      	str	r3, [r7, #20]
}
 800b258:	bf00      	nop
 800b25a:	e7fe      	b.n	800b25a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b25c:	f001 ff9a 	bl	800d194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b260:	2300      	movs	r3, #0
 800b262:	e082      	b.n	800b36a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b266:	2b00      	cmp	r3, #0
 800b268:	d106      	bne.n	800b278 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b26a:	f107 030c 	add.w	r3, r7, #12
 800b26e:	4618      	mov	r0, r3
 800b270:	f000 ffac 	bl	800c1cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b274:	2301      	movs	r3, #1
 800b276:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b278:	f001 ff8c 	bl	800d194 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b27c:	f000 fd0c 	bl	800bc98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b280:	f001 ff58 	bl	800d134 <vPortEnterCritical>
 800b284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b28a:	b25b      	sxtb	r3, r3
 800b28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b290:	d103      	bne.n	800b29a <xQueueSemaphoreTake+0x13a>
 800b292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b294:	2200      	movs	r2, #0
 800b296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b29a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2a0:	b25b      	sxtb	r3, r3
 800b2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a6:	d103      	bne.n	800b2b0 <xQueueSemaphoreTake+0x150>
 800b2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2b0:	f001 ff70 	bl	800d194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2b4:	463a      	mov	r2, r7
 800b2b6:	f107 030c 	add.w	r3, r7, #12
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f000 ff9b 	bl	800c1f8 <xTaskCheckForTimeOut>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d132      	bne.n	800b32e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2ca:	f000 f9f2 	bl	800b6b2 <prvIsQueueEmpty>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d026      	beq.n	800b322 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b2d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d109      	bne.n	800b2f0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b2dc:	f001 ff2a 	bl	800d134 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b2e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	f001 f8e9 	bl	800c4bc <xTaskPriorityInherit>
 800b2ea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b2ec:	f001 ff52 	bl	800d194 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2f2:	3324      	adds	r3, #36	; 0x24
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	4611      	mov	r1, r2
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f000 feb3 	bl	800c064 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b300:	f000 f985 	bl	800b60e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b304:	f000 fcd6 	bl	800bcb4 <xTaskResumeAll>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	f47f af68 	bne.w	800b1e0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b310:	4b18      	ldr	r3, [pc, #96]	; (800b374 <xQueueSemaphoreTake+0x214>)
 800b312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b316:	601a      	str	r2, [r3, #0]
 800b318:	f3bf 8f4f 	dsb	sy
 800b31c:	f3bf 8f6f 	isb	sy
 800b320:	e75e      	b.n	800b1e0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b322:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b324:	f000 f973 	bl	800b60e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b328:	f000 fcc4 	bl	800bcb4 <xTaskResumeAll>
 800b32c:	e758      	b.n	800b1e0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b32e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b330:	f000 f96d 	bl	800b60e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b334:	f000 fcbe 	bl	800bcb4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b33a:	f000 f9ba 	bl	800b6b2 <prvIsQueueEmpty>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	f43f af4d 	beq.w	800b1e0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00d      	beq.n	800b368 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b34c:	f001 fef2 	bl	800d134 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b350:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b352:	f000 f8b4 	bl	800b4be <prvGetDisinheritPriorityAfterTimeout>
 800b356:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b35e:	4618      	mov	r0, r3
 800b360:	f001 f982 	bl	800c668 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b364:	f001 ff16 	bl	800d194 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b368:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3738      	adds	r7, #56	; 0x38
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	e000ed04 	.word	0xe000ed04

0800b378 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	b08e      	sub	sp, #56	; 0x38
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d10a      	bne.n	800b3a4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b392:	f383 8811 	msr	BASEPRI, r3
 800b396:	f3bf 8f6f 	isb	sy
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	623b      	str	r3, [r7, #32]
}
 800b3a0:	bf00      	nop
 800b3a2:	e7fe      	b.n	800b3a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d103      	bne.n	800b3b2 <xQueueReceiveFromISR+0x3a>
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d101      	bne.n	800b3b6 <xQueueReceiveFromISR+0x3e>
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e000      	b.n	800b3b8 <xQueueReceiveFromISR+0x40>
 800b3b6:	2300      	movs	r3, #0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d10a      	bne.n	800b3d2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c0:	f383 8811 	msr	BASEPRI, r3
 800b3c4:	f3bf 8f6f 	isb	sy
 800b3c8:	f3bf 8f4f 	dsb	sy
 800b3cc:	61fb      	str	r3, [r7, #28]
}
 800b3ce:	bf00      	nop
 800b3d0:	e7fe      	b.n	800b3d0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b3d2:	f001 ff91 	bl	800d2f8 <vPortValidateInterruptPriority>
	__asm volatile
 800b3d6:	f3ef 8211 	mrs	r2, BASEPRI
 800b3da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	61ba      	str	r2, [r7, #24]
 800b3ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b3ee:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d02f      	beq.n	800b45e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b404:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b408:	68b9      	ldr	r1, [r7, #8]
 800b40a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b40c:	f000 f8d9 	bl	800b5c2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b412:	1e5a      	subs	r2, r3, #1
 800b414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b416:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b418:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b420:	d112      	bne.n	800b448 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b424:	691b      	ldr	r3, [r3, #16]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d016      	beq.n	800b458 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b42c:	3310      	adds	r3, #16
 800b42e:	4618      	mov	r0, r3
 800b430:	f000 fe68 	bl	800c104 <xTaskRemoveFromEventList>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00e      	beq.n	800b458 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d00b      	beq.n	800b458 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	601a      	str	r2, [r3, #0]
 800b446:	e007      	b.n	800b458 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b44c:	3301      	adds	r3, #1
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	b25a      	sxtb	r2, r3
 800b452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b454:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b458:	2301      	movs	r3, #1
 800b45a:	637b      	str	r3, [r7, #52]	; 0x34
 800b45c:	e001      	b.n	800b462 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b45e:	2300      	movs	r3, #0
 800b460:	637b      	str	r3, [r7, #52]	; 0x34
 800b462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b464:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b466:	693b      	ldr	r3, [r7, #16]
 800b468:	f383 8811 	msr	BASEPRI, r3
}
 800b46c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b470:	4618      	mov	r0, r3
 800b472:	3738      	adds	r7, #56	; 0x38
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10a      	bne.n	800b4a0 <vQueueDelete+0x28>
	__asm volatile
 800b48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	60bb      	str	r3, [r7, #8]
}
 800b49c:	bf00      	nop
 800b49e:	e7fe      	b.n	800b49e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b4a0:	68f8      	ldr	r0, [r7, #12]
 800b4a2:	f000 f95f 	bl	800b764 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d102      	bne.n	800b4b6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f002 f82d 	bl	800d510 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b4b6:	bf00      	nop
 800b4b8:	3710      	adds	r7, #16
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	bd80      	pop	{r7, pc}

0800b4be <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b4be:	b480      	push	{r7}
 800b4c0:	b085      	sub	sp, #20
 800b4c2:	af00      	add	r7, sp, #0
 800b4c4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d006      	beq.n	800b4dc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b4d8:	60fb      	str	r3, [r7, #12]
 800b4da:	e001      	b.n	800b4e0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
	}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3714      	adds	r7, #20
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b086      	sub	sp, #24
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	60f8      	str	r0, [r7, #12]
 800b4f6:	60b9      	str	r1, [r7, #8]
 800b4f8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b502:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10d      	bne.n	800b528 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d14d      	bne.n	800b5b0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	4618      	mov	r0, r3
 800b51a:	f001 f837 	bl	800c58c <xTaskPriorityDisinherit>
 800b51e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	609a      	str	r2, [r3, #8]
 800b526:	e043      	b.n	800b5b0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d119      	bne.n	800b562 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6858      	ldr	r0, [r3, #4]
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b536:	461a      	mov	r2, r3
 800b538:	68b9      	ldr	r1, [r7, #8]
 800b53a:	f002 ff21 	bl	800e380 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	685a      	ldr	r2, [r3, #4]
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b546:	441a      	add	r2, r3
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	685a      	ldr	r2, [r3, #4]
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	429a      	cmp	r2, r3
 800b556:	d32b      	bcc.n	800b5b0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	605a      	str	r2, [r3, #4]
 800b560:	e026      	b.n	800b5b0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	68d8      	ldr	r0, [r3, #12]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56a:	461a      	mov	r2, r3
 800b56c:	68b9      	ldr	r1, [r7, #8]
 800b56e:	f002 ff07 	bl	800e380 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	68da      	ldr	r2, [r3, #12]
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b57a:	425b      	negs	r3, r3
 800b57c:	441a      	add	r2, r3
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	68da      	ldr	r2, [r3, #12]
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	429a      	cmp	r2, r3
 800b58c:	d207      	bcs.n	800b59e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	689a      	ldr	r2, [r3, #8]
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b596:	425b      	negs	r3, r3
 800b598:	441a      	add	r2, r3
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2b02      	cmp	r3, #2
 800b5a2:	d105      	bne.n	800b5b0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d002      	beq.n	800b5b0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	1c5a      	adds	r2, r3, #1
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b5b8:	697b      	ldr	r3, [r7, #20]
}
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	3718      	adds	r7, #24
 800b5be:	46bd      	mov	sp, r7
 800b5c0:	bd80      	pop	{r7, pc}

0800b5c2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b5c2:	b580      	push	{r7, lr}
 800b5c4:	b082      	sub	sp, #8
 800b5c6:	af00      	add	r7, sp, #0
 800b5c8:	6078      	str	r0, [r7, #4]
 800b5ca:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d018      	beq.n	800b606 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	68da      	ldr	r2, [r3, #12]
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5dc:	441a      	add	r2, r3
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68da      	ldr	r2, [r3, #12]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	429a      	cmp	r2, r3
 800b5ec:	d303      	bcc.n	800b5f6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	68d9      	ldr	r1, [r3, #12]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fe:	461a      	mov	r2, r3
 800b600:	6838      	ldr	r0, [r7, #0]
 800b602:	f002 febd 	bl	800e380 <memcpy>
	}
}
 800b606:	bf00      	nop
 800b608:	3708      	adds	r7, #8
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b60e:	b580      	push	{r7, lr}
 800b610:	b084      	sub	sp, #16
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b616:	f001 fd8d 	bl	800d134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b620:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b622:	e011      	b.n	800b648 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d012      	beq.n	800b652 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	3324      	adds	r3, #36	; 0x24
 800b630:	4618      	mov	r0, r3
 800b632:	f000 fd67 	bl	800c104 <xTaskRemoveFromEventList>
 800b636:	4603      	mov	r3, r0
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d001      	beq.n	800b640 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b63c:	f000 fe3e 	bl	800c2bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b640:	7bfb      	ldrb	r3, [r7, #15]
 800b642:	3b01      	subs	r3, #1
 800b644:	b2db      	uxtb	r3, r3
 800b646:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b648:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	dce9      	bgt.n	800b624 <prvUnlockQueue+0x16>
 800b650:	e000      	b.n	800b654 <prvUnlockQueue+0x46>
					break;
 800b652:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	22ff      	movs	r2, #255	; 0xff
 800b658:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b65c:	f001 fd9a 	bl	800d194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b660:	f001 fd68 	bl	800d134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b66a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b66c:	e011      	b.n	800b692 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d012      	beq.n	800b69c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	3310      	adds	r3, #16
 800b67a:	4618      	mov	r0, r3
 800b67c:	f000 fd42 	bl	800c104 <xTaskRemoveFromEventList>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d001      	beq.n	800b68a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b686:	f000 fe19 	bl	800c2bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b68a:	7bbb      	ldrb	r3, [r7, #14]
 800b68c:	3b01      	subs	r3, #1
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b692:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b696:	2b00      	cmp	r3, #0
 800b698:	dce9      	bgt.n	800b66e <prvUnlockQueue+0x60>
 800b69a:	e000      	b.n	800b69e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b69c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	22ff      	movs	r2, #255	; 0xff
 800b6a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b6a6:	f001 fd75 	bl	800d194 <vPortExitCritical>
}
 800b6aa:	bf00      	nop
 800b6ac:	3710      	adds	r7, #16
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b084      	sub	sp, #16
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6ba:	f001 fd3b 	bl	800d134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d102      	bne.n	800b6cc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	60fb      	str	r3, [r7, #12]
 800b6ca:	e001      	b.n	800b6d0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b6d0:	f001 fd60 	bl	800d194 <vPortExitCritical>

	return xReturn;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b6de:	b580      	push	{r7, lr}
 800b6e0:	b084      	sub	sp, #16
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6e6:	f001 fd25 	bl	800d134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	d102      	bne.n	800b6fc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	60fb      	str	r3, [r7, #12]
 800b6fa:	e001      	b.n	800b700 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b700:	f001 fd48 	bl	800d194 <vPortExitCritical>

	return xReturn;
 800b704:	68fb      	ldr	r3, [r7, #12]
}
 800b706:	4618      	mov	r0, r3
 800b708:	3710      	adds	r7, #16
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
	...

0800b710 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b710:	b480      	push	{r7}
 800b712:	b085      	sub	sp, #20
 800b714:	af00      	add	r7, sp, #0
 800b716:	6078      	str	r0, [r7, #4]
 800b718:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b71a:	2300      	movs	r3, #0
 800b71c:	60fb      	str	r3, [r7, #12]
 800b71e:	e014      	b.n	800b74a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b720:	4a0f      	ldr	r2, [pc, #60]	; (800b760 <vQueueAddToRegistry+0x50>)
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10b      	bne.n	800b744 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b72c:	490c      	ldr	r1, [pc, #48]	; (800b760 <vQueueAddToRegistry+0x50>)
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	683a      	ldr	r2, [r7, #0]
 800b732:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b736:	4a0a      	ldr	r2, [pc, #40]	; (800b760 <vQueueAddToRegistry+0x50>)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	00db      	lsls	r3, r3, #3
 800b73c:	4413      	add	r3, r2
 800b73e:	687a      	ldr	r2, [r7, #4]
 800b740:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b742:	e006      	b.n	800b752 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	3301      	adds	r3, #1
 800b748:	60fb      	str	r3, [r7, #12]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2b07      	cmp	r3, #7
 800b74e:	d9e7      	bls.n	800b720 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b750:	bf00      	nop
 800b752:	bf00      	nop
 800b754:	3714      	adds	r7, #20
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop
 800b760:	20003b24 	.word	0x20003b24

0800b764 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b764:	b480      	push	{r7}
 800b766:	b085      	sub	sp, #20
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b76c:	2300      	movs	r3, #0
 800b76e:	60fb      	str	r3, [r7, #12]
 800b770:	e016      	b.n	800b7a0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b772:	4a10      	ldr	r2, [pc, #64]	; (800b7b4 <vQueueUnregisterQueue+0x50>)
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	00db      	lsls	r3, r3, #3
 800b778:	4413      	add	r3, r2
 800b77a:	685b      	ldr	r3, [r3, #4]
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	429a      	cmp	r2, r3
 800b780:	d10b      	bne.n	800b79a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b782:	4a0c      	ldr	r2, [pc, #48]	; (800b7b4 <vQueueUnregisterQueue+0x50>)
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	2100      	movs	r1, #0
 800b788:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b78c:	4a09      	ldr	r2, [pc, #36]	; (800b7b4 <vQueueUnregisterQueue+0x50>)
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	00db      	lsls	r3, r3, #3
 800b792:	4413      	add	r3, r2
 800b794:	2200      	movs	r2, #0
 800b796:	605a      	str	r2, [r3, #4]
				break;
 800b798:	e006      	b.n	800b7a8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	3301      	adds	r3, #1
 800b79e:	60fb      	str	r3, [r7, #12]
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2b07      	cmp	r3, #7
 800b7a4:	d9e5      	bls.n	800b772 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b7a6:	bf00      	nop
 800b7a8:	bf00      	nop
 800b7aa:	3714      	adds	r7, #20
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr
 800b7b4:	20003b24 	.word	0x20003b24

0800b7b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b7c8:	f001 fcb4 	bl	800d134 <vPortEnterCritical>
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b7d2:	b25b      	sxtb	r3, r3
 800b7d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d8:	d103      	bne.n	800b7e2 <vQueueWaitForMessageRestricted+0x2a>
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	2200      	movs	r2, #0
 800b7de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b7e2:	697b      	ldr	r3, [r7, #20]
 800b7e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b7e8:	b25b      	sxtb	r3, r3
 800b7ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7ee:	d103      	bne.n	800b7f8 <vQueueWaitForMessageRestricted+0x40>
 800b7f0:	697b      	ldr	r3, [r7, #20]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b7f8:	f001 fccc 	bl	800d194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b800:	2b00      	cmp	r3, #0
 800b802:	d106      	bne.n	800b812 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	3324      	adds	r3, #36	; 0x24
 800b808:	687a      	ldr	r2, [r7, #4]
 800b80a:	68b9      	ldr	r1, [r7, #8]
 800b80c:	4618      	mov	r0, r3
 800b80e:	f000 fc4d 	bl	800c0ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b812:	6978      	ldr	r0, [r7, #20]
 800b814:	f7ff fefb 	bl	800b60e <prvUnlockQueue>
	}
 800b818:	bf00      	nop
 800b81a:	3718      	adds	r7, #24
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b820:	b580      	push	{r7, lr}
 800b822:	b08e      	sub	sp, #56	; 0x38
 800b824:	af04      	add	r7, sp, #16
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
 800b82c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b830:	2b00      	cmp	r3, #0
 800b832:	d10a      	bne.n	800b84a <xTaskCreateStatic+0x2a>
	__asm volatile
 800b834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b838:	f383 8811 	msr	BASEPRI, r3
 800b83c:	f3bf 8f6f 	isb	sy
 800b840:	f3bf 8f4f 	dsb	sy
 800b844:	623b      	str	r3, [r7, #32]
}
 800b846:	bf00      	nop
 800b848:	e7fe      	b.n	800b848 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10a      	bne.n	800b866 <xTaskCreateStatic+0x46>
	__asm volatile
 800b850:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b854:	f383 8811 	msr	BASEPRI, r3
 800b858:	f3bf 8f6f 	isb	sy
 800b85c:	f3bf 8f4f 	dsb	sy
 800b860:	61fb      	str	r3, [r7, #28]
}
 800b862:	bf00      	nop
 800b864:	e7fe      	b.n	800b864 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b866:	235c      	movs	r3, #92	; 0x5c
 800b868:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b86a:	693b      	ldr	r3, [r7, #16]
 800b86c:	2b5c      	cmp	r3, #92	; 0x5c
 800b86e:	d00a      	beq.n	800b886 <xTaskCreateStatic+0x66>
	__asm volatile
 800b870:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b874:	f383 8811 	msr	BASEPRI, r3
 800b878:	f3bf 8f6f 	isb	sy
 800b87c:	f3bf 8f4f 	dsb	sy
 800b880:	61bb      	str	r3, [r7, #24]
}
 800b882:	bf00      	nop
 800b884:	e7fe      	b.n	800b884 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b886:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d01e      	beq.n	800b8cc <xTaskCreateStatic+0xac>
 800b88e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b890:	2b00      	cmp	r3, #0
 800b892:	d01b      	beq.n	800b8cc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b896:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b89a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b89c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a0:	2202      	movs	r2, #2
 800b8a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	9303      	str	r3, [sp, #12]
 800b8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ac:	9302      	str	r3, [sp, #8]
 800b8ae:	f107 0314 	add.w	r3, r7, #20
 800b8b2:	9301      	str	r3, [sp, #4]
 800b8b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b6:	9300      	str	r3, [sp, #0]
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	687a      	ldr	r2, [r7, #4]
 800b8bc:	68b9      	ldr	r1, [r7, #8]
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f000 f850 	bl	800b964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8c6:	f000 f8dd 	bl	800ba84 <prvAddNewTaskToReadyList>
 800b8ca:	e001      	b.n	800b8d0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b8d0:	697b      	ldr	r3, [r7, #20]
	}
 800b8d2:	4618      	mov	r0, r3
 800b8d4:	3728      	adds	r7, #40	; 0x28
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b08c      	sub	sp, #48	; 0x30
 800b8de:	af04      	add	r7, sp, #16
 800b8e0:	60f8      	str	r0, [r7, #12]
 800b8e2:	60b9      	str	r1, [r7, #8]
 800b8e4:	603b      	str	r3, [r7, #0]
 800b8e6:	4613      	mov	r3, r2
 800b8e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b8ea:	88fb      	ldrh	r3, [r7, #6]
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f001 fd42 	bl	800d378 <pvPortMalloc>
 800b8f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d00e      	beq.n	800b91a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b8fc:	205c      	movs	r0, #92	; 0x5c
 800b8fe:	f001 fd3b 	bl	800d378 <pvPortMalloc>
 800b902:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d003      	beq.n	800b912 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b90a:	69fb      	ldr	r3, [r7, #28]
 800b90c:	697a      	ldr	r2, [r7, #20]
 800b90e:	631a      	str	r2, [r3, #48]	; 0x30
 800b910:	e005      	b.n	800b91e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b912:	6978      	ldr	r0, [r7, #20]
 800b914:	f001 fdfc 	bl	800d510 <vPortFree>
 800b918:	e001      	b.n	800b91e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b91a:	2300      	movs	r3, #0
 800b91c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	2b00      	cmp	r3, #0
 800b922:	d017      	beq.n	800b954 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b924:	69fb      	ldr	r3, [r7, #28]
 800b926:	2200      	movs	r2, #0
 800b928:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b92c:	88fa      	ldrh	r2, [r7, #6]
 800b92e:	2300      	movs	r3, #0
 800b930:	9303      	str	r3, [sp, #12]
 800b932:	69fb      	ldr	r3, [r7, #28]
 800b934:	9302      	str	r3, [sp, #8]
 800b936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b938:	9301      	str	r3, [sp, #4]
 800b93a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b93c:	9300      	str	r3, [sp, #0]
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	68b9      	ldr	r1, [r7, #8]
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f000 f80e 	bl	800b964 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b948:	69f8      	ldr	r0, [r7, #28]
 800b94a:	f000 f89b 	bl	800ba84 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b94e:	2301      	movs	r3, #1
 800b950:	61bb      	str	r3, [r7, #24]
 800b952:	e002      	b.n	800b95a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b954:	f04f 33ff 	mov.w	r3, #4294967295
 800b958:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b95a:	69bb      	ldr	r3, [r7, #24]
	}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3720      	adds	r7, #32
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b088      	sub	sp, #32
 800b968:	af00      	add	r7, sp, #0
 800b96a:	60f8      	str	r0, [r7, #12]
 800b96c:	60b9      	str	r1, [r7, #8]
 800b96e:	607a      	str	r2, [r7, #4]
 800b970:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	461a      	mov	r2, r3
 800b97c:	21a5      	movs	r1, #165	; 0xa5
 800b97e:	f002 fcd3 	bl	800e328 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b984:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b98c:	3b01      	subs	r3, #1
 800b98e:	009b      	lsls	r3, r3, #2
 800b990:	4413      	add	r3, r2
 800b992:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	f023 0307 	bic.w	r3, r3, #7
 800b99a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	f003 0307 	and.w	r3, r3, #7
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00a      	beq.n	800b9bc <prvInitialiseNewTask+0x58>
	__asm volatile
 800b9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9aa:	f383 8811 	msr	BASEPRI, r3
 800b9ae:	f3bf 8f6f 	isb	sy
 800b9b2:	f3bf 8f4f 	dsb	sy
 800b9b6:	617b      	str	r3, [r7, #20]
}
 800b9b8:	bf00      	nop
 800b9ba:	e7fe      	b.n	800b9ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d01f      	beq.n	800ba02 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	61fb      	str	r3, [r7, #28]
 800b9c6:	e012      	b.n	800b9ee <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b9c8:	68ba      	ldr	r2, [r7, #8]
 800b9ca:	69fb      	ldr	r3, [r7, #28]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	7819      	ldrb	r1, [r3, #0]
 800b9d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9d2:	69fb      	ldr	r3, [r7, #28]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	3334      	adds	r3, #52	; 0x34
 800b9d8:	460a      	mov	r2, r1
 800b9da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	69fb      	ldr	r3, [r7, #28]
 800b9e0:	4413      	add	r3, r2
 800b9e2:	781b      	ldrb	r3, [r3, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d006      	beq.n	800b9f6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b9e8:	69fb      	ldr	r3, [r7, #28]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	61fb      	str	r3, [r7, #28]
 800b9ee:	69fb      	ldr	r3, [r7, #28]
 800b9f0:	2b0f      	cmp	r3, #15
 800b9f2:	d9e9      	bls.n	800b9c8 <prvInitialiseNewTask+0x64>
 800b9f4:	e000      	b.n	800b9f8 <prvInitialiseNewTask+0x94>
			{
				break;
 800b9f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fa:	2200      	movs	r2, #0
 800b9fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ba00:	e003      	b.n	800ba0a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ba02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba04:	2200      	movs	r2, #0
 800ba06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ba0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba0c:	2b37      	cmp	r3, #55	; 0x37
 800ba0e:	d901      	bls.n	800ba14 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ba10:	2337      	movs	r3, #55	; 0x37
 800ba12:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ba14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba18:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ba1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba1e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ba20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba22:	2200      	movs	r2, #0
 800ba24:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ba26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba28:	3304      	adds	r3, #4
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7fe fe56 	bl	800a6dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ba30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba32:	3318      	adds	r3, #24
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7fe fe51 	bl	800a6dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ba3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba3e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ba46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba48:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ba4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba4e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ba50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba52:	2200      	movs	r2, #0
 800ba54:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ba56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba58:	2200      	movs	r2, #0
 800ba5a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	68f9      	ldr	r1, [r7, #12]
 800ba62:	69b8      	ldr	r0, [r7, #24]
 800ba64:	f001 fa38 	bl	800ced8 <pxPortInitialiseStack>
 800ba68:	4602      	mov	r2, r0
 800ba6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ba6c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ba6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d002      	beq.n	800ba7a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba7a:	bf00      	nop
 800ba7c:	3720      	adds	r7, #32
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
	...

0800ba84 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba8c:	f001 fb52 	bl	800d134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba90:	4b2d      	ldr	r3, [pc, #180]	; (800bb48 <prvAddNewTaskToReadyList+0xc4>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	3301      	adds	r3, #1
 800ba96:	4a2c      	ldr	r2, [pc, #176]	; (800bb48 <prvAddNewTaskToReadyList+0xc4>)
 800ba98:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba9a:	4b2c      	ldr	r3, [pc, #176]	; (800bb4c <prvAddNewTaskToReadyList+0xc8>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d109      	bne.n	800bab6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800baa2:	4a2a      	ldr	r2, [pc, #168]	; (800bb4c <prvAddNewTaskToReadyList+0xc8>)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800baa8:	4b27      	ldr	r3, [pc, #156]	; (800bb48 <prvAddNewTaskToReadyList+0xc4>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b01      	cmp	r3, #1
 800baae:	d110      	bne.n	800bad2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bab0:	f000 fc28 	bl	800c304 <prvInitialiseTaskLists>
 800bab4:	e00d      	b.n	800bad2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bab6:	4b26      	ldr	r3, [pc, #152]	; (800bb50 <prvAddNewTaskToReadyList+0xcc>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	2b00      	cmp	r3, #0
 800babc:	d109      	bne.n	800bad2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800babe:	4b23      	ldr	r3, [pc, #140]	; (800bb4c <prvAddNewTaskToReadyList+0xc8>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bac8:	429a      	cmp	r2, r3
 800baca:	d802      	bhi.n	800bad2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bacc:	4a1f      	ldr	r2, [pc, #124]	; (800bb4c <prvAddNewTaskToReadyList+0xc8>)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bad2:	4b20      	ldr	r3, [pc, #128]	; (800bb54 <prvAddNewTaskToReadyList+0xd0>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	3301      	adds	r3, #1
 800bad8:	4a1e      	ldr	r2, [pc, #120]	; (800bb54 <prvAddNewTaskToReadyList+0xd0>)
 800bada:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800badc:	4b1d      	ldr	r3, [pc, #116]	; (800bb54 <prvAddNewTaskToReadyList+0xd0>)
 800bade:	681a      	ldr	r2, [r3, #0]
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bae8:	4b1b      	ldr	r3, [pc, #108]	; (800bb58 <prvAddNewTaskToReadyList+0xd4>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	429a      	cmp	r2, r3
 800baee:	d903      	bls.n	800baf8 <prvAddNewTaskToReadyList+0x74>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800baf4:	4a18      	ldr	r2, [pc, #96]	; (800bb58 <prvAddNewTaskToReadyList+0xd4>)
 800baf6:	6013      	str	r3, [r2, #0]
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bafc:	4613      	mov	r3, r2
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	4413      	add	r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	4a15      	ldr	r2, [pc, #84]	; (800bb5c <prvAddNewTaskToReadyList+0xd8>)
 800bb06:	441a      	add	r2, r3
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	4619      	mov	r1, r3
 800bb0e:	4610      	mov	r0, r2
 800bb10:	f7fe fdf1 	bl	800a6f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bb14:	f001 fb3e 	bl	800d194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bb18:	4b0d      	ldr	r3, [pc, #52]	; (800bb50 <prvAddNewTaskToReadyList+0xcc>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d00e      	beq.n	800bb3e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bb20:	4b0a      	ldr	r3, [pc, #40]	; (800bb4c <prvAddNewTaskToReadyList+0xc8>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb2a:	429a      	cmp	r2, r3
 800bb2c:	d207      	bcs.n	800bb3e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bb2e:	4b0c      	ldr	r3, [pc, #48]	; (800bb60 <prvAddNewTaskToReadyList+0xdc>)
 800bb30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb34:	601a      	str	r2, [r3, #0]
 800bb36:	f3bf 8f4f 	dsb	sy
 800bb3a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb3e:	bf00      	nop
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	20004038 	.word	0x20004038
 800bb4c:	20003b64 	.word	0x20003b64
 800bb50:	20004044 	.word	0x20004044
 800bb54:	20004054 	.word	0x20004054
 800bb58:	20004040 	.word	0x20004040
 800bb5c:	20003b68 	.word	0x20003b68
 800bb60:	e000ed04 	.word	0xe000ed04

0800bb64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d017      	beq.n	800bba6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb76:	4b13      	ldr	r3, [pc, #76]	; (800bbc4 <vTaskDelay+0x60>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d00a      	beq.n	800bb94 <vTaskDelay+0x30>
	__asm volatile
 800bb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb82:	f383 8811 	msr	BASEPRI, r3
 800bb86:	f3bf 8f6f 	isb	sy
 800bb8a:	f3bf 8f4f 	dsb	sy
 800bb8e:	60bb      	str	r3, [r7, #8]
}
 800bb90:	bf00      	nop
 800bb92:	e7fe      	b.n	800bb92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb94:	f000 f880 	bl	800bc98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb98:	2100      	movs	r1, #0
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f000 fdfa 	bl	800c794 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bba0:	f000 f888 	bl	800bcb4 <xTaskResumeAll>
 800bba4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d107      	bne.n	800bbbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bbac:	4b06      	ldr	r3, [pc, #24]	; (800bbc8 <vTaskDelay+0x64>)
 800bbae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbb2:	601a      	str	r2, [r3, #0]
 800bbb4:	f3bf 8f4f 	dsb	sy
 800bbb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbbc:	bf00      	nop
 800bbbe:	3710      	adds	r7, #16
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	bd80      	pop	{r7, pc}
 800bbc4:	20004060 	.word	0x20004060
 800bbc8:	e000ed04 	.word	0xe000ed04

0800bbcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b08a      	sub	sp, #40	; 0x28
 800bbd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bbda:	463a      	mov	r2, r7
 800bbdc:	1d39      	adds	r1, r7, #4
 800bbde:	f107 0308 	add.w	r3, r7, #8
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f7fe fd26 	bl	800a634 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bbe8:	6839      	ldr	r1, [r7, #0]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	68ba      	ldr	r2, [r7, #8]
 800bbee:	9202      	str	r2, [sp, #8]
 800bbf0:	9301      	str	r3, [sp, #4]
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	9300      	str	r3, [sp, #0]
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	460a      	mov	r2, r1
 800bbfa:	4921      	ldr	r1, [pc, #132]	; (800bc80 <vTaskStartScheduler+0xb4>)
 800bbfc:	4821      	ldr	r0, [pc, #132]	; (800bc84 <vTaskStartScheduler+0xb8>)
 800bbfe:	f7ff fe0f 	bl	800b820 <xTaskCreateStatic>
 800bc02:	4603      	mov	r3, r0
 800bc04:	4a20      	ldr	r2, [pc, #128]	; (800bc88 <vTaskStartScheduler+0xbc>)
 800bc06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bc08:	4b1f      	ldr	r3, [pc, #124]	; (800bc88 <vTaskStartScheduler+0xbc>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d002      	beq.n	800bc16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bc10:	2301      	movs	r3, #1
 800bc12:	617b      	str	r3, [r7, #20]
 800bc14:	e001      	b.n	800bc1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bc16:	2300      	movs	r3, #0
 800bc18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	2b01      	cmp	r3, #1
 800bc1e:	d102      	bne.n	800bc26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800bc20:	f000 fe0c 	bl	800c83c <xTimerCreateTimerTask>
 800bc24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	2b01      	cmp	r3, #1
 800bc2a:	d116      	bne.n	800bc5a <vTaskStartScheduler+0x8e>
	__asm volatile
 800bc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc30:	f383 8811 	msr	BASEPRI, r3
 800bc34:	f3bf 8f6f 	isb	sy
 800bc38:	f3bf 8f4f 	dsb	sy
 800bc3c:	613b      	str	r3, [r7, #16]
}
 800bc3e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bc40:	4b12      	ldr	r3, [pc, #72]	; (800bc8c <vTaskStartScheduler+0xc0>)
 800bc42:	f04f 32ff 	mov.w	r2, #4294967295
 800bc46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bc48:	4b11      	ldr	r3, [pc, #68]	; (800bc90 <vTaskStartScheduler+0xc4>)
 800bc4a:	2201      	movs	r2, #1
 800bc4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bc4e:	4b11      	ldr	r3, [pc, #68]	; (800bc94 <vTaskStartScheduler+0xc8>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bc54:	f001 f9cc 	bl	800cff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bc58:	e00e      	b.n	800bc78 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bc5a:	697b      	ldr	r3, [r7, #20]
 800bc5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc60:	d10a      	bne.n	800bc78 <vTaskStartScheduler+0xac>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	60fb      	str	r3, [r7, #12]
}
 800bc74:	bf00      	nop
 800bc76:	e7fe      	b.n	800bc76 <vTaskStartScheduler+0xaa>
}
 800bc78:	bf00      	nop
 800bc7a:	3718      	adds	r7, #24
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}
 800bc80:	0800e414 	.word	0x0800e414
 800bc84:	0800c2d5 	.word	0x0800c2d5
 800bc88:	2000405c 	.word	0x2000405c
 800bc8c:	20004058 	.word	0x20004058
 800bc90:	20004044 	.word	0x20004044
 800bc94:	2000403c 	.word	0x2000403c

0800bc98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc98:	b480      	push	{r7}
 800bc9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bc9c:	4b04      	ldr	r3, [pc, #16]	; (800bcb0 <vTaskSuspendAll+0x18>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	3301      	adds	r3, #1
 800bca2:	4a03      	ldr	r2, [pc, #12]	; (800bcb0 <vTaskSuspendAll+0x18>)
 800bca4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bca6:	bf00      	nop
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	20004060 	.word	0x20004060

0800bcb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bcc2:	4b42      	ldr	r3, [pc, #264]	; (800bdcc <xTaskResumeAll+0x118>)
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d10a      	bne.n	800bce0 <xTaskResumeAll+0x2c>
	__asm volatile
 800bcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcce:	f383 8811 	msr	BASEPRI, r3
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	603b      	str	r3, [r7, #0]
}
 800bcdc:	bf00      	nop
 800bcde:	e7fe      	b.n	800bcde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bce0:	f001 fa28 	bl	800d134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bce4:	4b39      	ldr	r3, [pc, #228]	; (800bdcc <xTaskResumeAll+0x118>)
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	3b01      	subs	r3, #1
 800bcea:	4a38      	ldr	r2, [pc, #224]	; (800bdcc <xTaskResumeAll+0x118>)
 800bcec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcee:	4b37      	ldr	r3, [pc, #220]	; (800bdcc <xTaskResumeAll+0x118>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d162      	bne.n	800bdbc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bcf6:	4b36      	ldr	r3, [pc, #216]	; (800bdd0 <xTaskResumeAll+0x11c>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d05e      	beq.n	800bdbc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcfe:	e02f      	b.n	800bd60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd00:	4b34      	ldr	r3, [pc, #208]	; (800bdd4 <xTaskResumeAll+0x120>)
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	68db      	ldr	r3, [r3, #12]
 800bd06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	3318      	adds	r3, #24
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fe fd4f 	bl	800a7b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	3304      	adds	r3, #4
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7fe fd4a 	bl	800a7b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd20:	4b2d      	ldr	r3, [pc, #180]	; (800bdd8 <xTaskResumeAll+0x124>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	429a      	cmp	r2, r3
 800bd26:	d903      	bls.n	800bd30 <xTaskResumeAll+0x7c>
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd2c:	4a2a      	ldr	r2, [pc, #168]	; (800bdd8 <xTaskResumeAll+0x124>)
 800bd2e:	6013      	str	r3, [r2, #0]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd34:	4613      	mov	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	4413      	add	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4a27      	ldr	r2, [pc, #156]	; (800bddc <xTaskResumeAll+0x128>)
 800bd3e:	441a      	add	r2, r3
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	3304      	adds	r3, #4
 800bd44:	4619      	mov	r1, r3
 800bd46:	4610      	mov	r0, r2
 800bd48:	f7fe fcd5 	bl	800a6f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd50:	4b23      	ldr	r3, [pc, #140]	; (800bde0 <xTaskResumeAll+0x12c>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d302      	bcc.n	800bd60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bd5a:	4b22      	ldr	r3, [pc, #136]	; (800bde4 <xTaskResumeAll+0x130>)
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bd60:	4b1c      	ldr	r3, [pc, #112]	; (800bdd4 <xTaskResumeAll+0x120>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d1cb      	bne.n	800bd00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d001      	beq.n	800bd72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd6e:	f000 fb67 	bl	800c440 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd72:	4b1d      	ldr	r3, [pc, #116]	; (800bde8 <xTaskResumeAll+0x134>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d010      	beq.n	800bda0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd7e:	f000 f859 	bl	800be34 <xTaskIncrementTick>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d002      	beq.n	800bd8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bd88:	4b16      	ldr	r3, [pc, #88]	; (800bde4 <xTaskResumeAll+0x130>)
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	3b01      	subs	r3, #1
 800bd92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d1f1      	bne.n	800bd7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bd9a:	4b13      	ldr	r3, [pc, #76]	; (800bde8 <xTaskResumeAll+0x134>)
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bda0:	4b10      	ldr	r3, [pc, #64]	; (800bde4 <xTaskResumeAll+0x130>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d009      	beq.n	800bdbc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bda8:	2301      	movs	r3, #1
 800bdaa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bdac:	4b0f      	ldr	r3, [pc, #60]	; (800bdec <xTaskResumeAll+0x138>)
 800bdae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdb2:	601a      	str	r2, [r3, #0]
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bdbc:	f001 f9ea 	bl	800d194 <vPortExitCritical>

	return xAlreadyYielded;
 800bdc0:	68bb      	ldr	r3, [r7, #8]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
 800bdca:	bf00      	nop
 800bdcc:	20004060 	.word	0x20004060
 800bdd0:	20004038 	.word	0x20004038
 800bdd4:	20003ff8 	.word	0x20003ff8
 800bdd8:	20004040 	.word	0x20004040
 800bddc:	20003b68 	.word	0x20003b68
 800bde0:	20003b64 	.word	0x20003b64
 800bde4:	2000404c 	.word	0x2000404c
 800bde8:	20004048 	.word	0x20004048
 800bdec:	e000ed04 	.word	0xe000ed04

0800bdf0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bdf6:	4b05      	ldr	r3, [pc, #20]	; (800be0c <xTaskGetTickCount+0x1c>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bdfc:	687b      	ldr	r3, [r7, #4]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	370c      	adds	r7, #12
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr
 800be0a:	bf00      	nop
 800be0c:	2000403c 	.word	0x2000403c

0800be10 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b082      	sub	sp, #8
 800be14:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be16:	f001 fa6f 	bl	800d2f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800be1a:	2300      	movs	r3, #0
 800be1c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800be1e:	4b04      	ldr	r3, [pc, #16]	; (800be30 <xTaskGetTickCountFromISR+0x20>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800be24:	683b      	ldr	r3, [r7, #0]
}
 800be26:	4618      	mov	r0, r3
 800be28:	3708      	adds	r7, #8
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	2000403c 	.word	0x2000403c

0800be34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b086      	sub	sp, #24
 800be38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800be3a:	2300      	movs	r3, #0
 800be3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800be3e:	4b4f      	ldr	r3, [pc, #316]	; (800bf7c <xTaskIncrementTick+0x148>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	f040 808f 	bne.w	800bf66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800be48:	4b4d      	ldr	r3, [pc, #308]	; (800bf80 <xTaskIncrementTick+0x14c>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	3301      	adds	r3, #1
 800be4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800be50:	4a4b      	ldr	r2, [pc, #300]	; (800bf80 <xTaskIncrementTick+0x14c>)
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d120      	bne.n	800be9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800be5c:	4b49      	ldr	r3, [pc, #292]	; (800bf84 <xTaskIncrementTick+0x150>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d00a      	beq.n	800be7c <xTaskIncrementTick+0x48>
	__asm volatile
 800be66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6a:	f383 8811 	msr	BASEPRI, r3
 800be6e:	f3bf 8f6f 	isb	sy
 800be72:	f3bf 8f4f 	dsb	sy
 800be76:	603b      	str	r3, [r7, #0]
}
 800be78:	bf00      	nop
 800be7a:	e7fe      	b.n	800be7a <xTaskIncrementTick+0x46>
 800be7c:	4b41      	ldr	r3, [pc, #260]	; (800bf84 <xTaskIncrementTick+0x150>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	60fb      	str	r3, [r7, #12]
 800be82:	4b41      	ldr	r3, [pc, #260]	; (800bf88 <xTaskIncrementTick+0x154>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a3f      	ldr	r2, [pc, #252]	; (800bf84 <xTaskIncrementTick+0x150>)
 800be88:	6013      	str	r3, [r2, #0]
 800be8a:	4a3f      	ldr	r2, [pc, #252]	; (800bf88 <xTaskIncrementTick+0x154>)
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	6013      	str	r3, [r2, #0]
 800be90:	4b3e      	ldr	r3, [pc, #248]	; (800bf8c <xTaskIncrementTick+0x158>)
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	3301      	adds	r3, #1
 800be96:	4a3d      	ldr	r2, [pc, #244]	; (800bf8c <xTaskIncrementTick+0x158>)
 800be98:	6013      	str	r3, [r2, #0]
 800be9a:	f000 fad1 	bl	800c440 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be9e:	4b3c      	ldr	r3, [pc, #240]	; (800bf90 <xTaskIncrementTick+0x15c>)
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	693a      	ldr	r2, [r7, #16]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d349      	bcc.n	800bf3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bea8:	4b36      	ldr	r3, [pc, #216]	; (800bf84 <xTaskIncrementTick+0x150>)
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d104      	bne.n	800bebc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800beb2:	4b37      	ldr	r3, [pc, #220]	; (800bf90 <xTaskIncrementTick+0x15c>)
 800beb4:	f04f 32ff 	mov.w	r2, #4294967295
 800beb8:	601a      	str	r2, [r3, #0]
					break;
 800beba:	e03f      	b.n	800bf3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bebc:	4b31      	ldr	r3, [pc, #196]	; (800bf84 <xTaskIncrementTick+0x150>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	68db      	ldr	r3, [r3, #12]
 800bec4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800becc:	693a      	ldr	r2, [r7, #16]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d203      	bcs.n	800bedc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bed4:	4a2e      	ldr	r2, [pc, #184]	; (800bf90 <xTaskIncrementTick+0x15c>)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800beda:	e02f      	b.n	800bf3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	3304      	adds	r3, #4
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7fe fc65 	bl	800a7b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beea:	2b00      	cmp	r3, #0
 800beec:	d004      	beq.n	800bef8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	3318      	adds	r3, #24
 800bef2:	4618      	mov	r0, r3
 800bef4:	f7fe fc5c 	bl	800a7b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800befc:	4b25      	ldr	r3, [pc, #148]	; (800bf94 <xTaskIncrementTick+0x160>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	429a      	cmp	r2, r3
 800bf02:	d903      	bls.n	800bf0c <xTaskIncrementTick+0xd8>
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf08:	4a22      	ldr	r2, [pc, #136]	; (800bf94 <xTaskIncrementTick+0x160>)
 800bf0a:	6013      	str	r3, [r2, #0]
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf10:	4613      	mov	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4413      	add	r3, r2
 800bf16:	009b      	lsls	r3, r3, #2
 800bf18:	4a1f      	ldr	r2, [pc, #124]	; (800bf98 <xTaskIncrementTick+0x164>)
 800bf1a:	441a      	add	r2, r3
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	3304      	adds	r3, #4
 800bf20:	4619      	mov	r1, r3
 800bf22:	4610      	mov	r0, r2
 800bf24:	f7fe fbe7 	bl	800a6f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf2c:	4b1b      	ldr	r3, [pc, #108]	; (800bf9c <xTaskIncrementTick+0x168>)
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf32:	429a      	cmp	r2, r3
 800bf34:	d3b8      	bcc.n	800bea8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bf36:	2301      	movs	r3, #1
 800bf38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf3a:	e7b5      	b.n	800bea8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bf3c:	4b17      	ldr	r3, [pc, #92]	; (800bf9c <xTaskIncrementTick+0x168>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf42:	4915      	ldr	r1, [pc, #84]	; (800bf98 <xTaskIncrementTick+0x164>)
 800bf44:	4613      	mov	r3, r2
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	4413      	add	r3, r2
 800bf4a:	009b      	lsls	r3, r3, #2
 800bf4c:	440b      	add	r3, r1
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b01      	cmp	r3, #1
 800bf52:	d901      	bls.n	800bf58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bf54:	2301      	movs	r3, #1
 800bf56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bf58:	4b11      	ldr	r3, [pc, #68]	; (800bfa0 <xTaskIncrementTick+0x16c>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d007      	beq.n	800bf70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bf60:	2301      	movs	r3, #1
 800bf62:	617b      	str	r3, [r7, #20]
 800bf64:	e004      	b.n	800bf70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bf66:	4b0f      	ldr	r3, [pc, #60]	; (800bfa4 <xTaskIncrementTick+0x170>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	3301      	adds	r3, #1
 800bf6c:	4a0d      	ldr	r2, [pc, #52]	; (800bfa4 <xTaskIncrementTick+0x170>)
 800bf6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bf70:	697b      	ldr	r3, [r7, #20]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3718      	adds	r7, #24
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	20004060 	.word	0x20004060
 800bf80:	2000403c 	.word	0x2000403c
 800bf84:	20003ff0 	.word	0x20003ff0
 800bf88:	20003ff4 	.word	0x20003ff4
 800bf8c:	20004050 	.word	0x20004050
 800bf90:	20004058 	.word	0x20004058
 800bf94:	20004040 	.word	0x20004040
 800bf98:	20003b68 	.word	0x20003b68
 800bf9c:	20003b64 	.word	0x20003b64
 800bfa0:	2000404c 	.word	0x2000404c
 800bfa4:	20004048 	.word	0x20004048

0800bfa8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b085      	sub	sp, #20
 800bfac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bfae:	4b28      	ldr	r3, [pc, #160]	; (800c050 <vTaskSwitchContext+0xa8>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d003      	beq.n	800bfbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bfb6:	4b27      	ldr	r3, [pc, #156]	; (800c054 <vTaskSwitchContext+0xac>)
 800bfb8:	2201      	movs	r2, #1
 800bfba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bfbc:	e041      	b.n	800c042 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800bfbe:	4b25      	ldr	r3, [pc, #148]	; (800c054 <vTaskSwitchContext+0xac>)
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfc4:	4b24      	ldr	r3, [pc, #144]	; (800c058 <vTaskSwitchContext+0xb0>)
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	60fb      	str	r3, [r7, #12]
 800bfca:	e010      	b.n	800bfee <vTaskSwitchContext+0x46>
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d10a      	bne.n	800bfe8 <vTaskSwitchContext+0x40>
	__asm volatile
 800bfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfd6:	f383 8811 	msr	BASEPRI, r3
 800bfda:	f3bf 8f6f 	isb	sy
 800bfde:	f3bf 8f4f 	dsb	sy
 800bfe2:	607b      	str	r3, [r7, #4]
}
 800bfe4:	bf00      	nop
 800bfe6:	e7fe      	b.n	800bfe6 <vTaskSwitchContext+0x3e>
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	3b01      	subs	r3, #1
 800bfec:	60fb      	str	r3, [r7, #12]
 800bfee:	491b      	ldr	r1, [pc, #108]	; (800c05c <vTaskSwitchContext+0xb4>)
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	4613      	mov	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	4413      	add	r3, r2
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	440b      	add	r3, r1
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d0e4      	beq.n	800bfcc <vTaskSwitchContext+0x24>
 800c002:	68fa      	ldr	r2, [r7, #12]
 800c004:	4613      	mov	r3, r2
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	4413      	add	r3, r2
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	4a13      	ldr	r2, [pc, #76]	; (800c05c <vTaskSwitchContext+0xb4>)
 800c00e:	4413      	add	r3, r2
 800c010:	60bb      	str	r3, [r7, #8]
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	685a      	ldr	r2, [r3, #4]
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	605a      	str	r2, [r3, #4]
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	685a      	ldr	r2, [r3, #4]
 800c020:	68bb      	ldr	r3, [r7, #8]
 800c022:	3308      	adds	r3, #8
 800c024:	429a      	cmp	r2, r3
 800c026:	d104      	bne.n	800c032 <vTaskSwitchContext+0x8a>
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	685b      	ldr	r3, [r3, #4]
 800c02c:	685a      	ldr	r2, [r3, #4]
 800c02e:	68bb      	ldr	r3, [r7, #8]
 800c030:	605a      	str	r2, [r3, #4]
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	4a09      	ldr	r2, [pc, #36]	; (800c060 <vTaskSwitchContext+0xb8>)
 800c03a:	6013      	str	r3, [r2, #0]
 800c03c:	4a06      	ldr	r2, [pc, #24]	; (800c058 <vTaskSwitchContext+0xb0>)
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6013      	str	r3, [r2, #0]
}
 800c042:	bf00      	nop
 800c044:	3714      	adds	r7, #20
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop
 800c050:	20004060 	.word	0x20004060
 800c054:	2000404c 	.word	0x2000404c
 800c058:	20004040 	.word	0x20004040
 800c05c:	20003b68 	.word	0x20003b68
 800c060:	20003b64 	.word	0x20003b64

0800c064 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10a      	bne.n	800c08a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c078:	f383 8811 	msr	BASEPRI, r3
 800c07c:	f3bf 8f6f 	isb	sy
 800c080:	f3bf 8f4f 	dsb	sy
 800c084:	60fb      	str	r3, [r7, #12]
}
 800c086:	bf00      	nop
 800c088:	e7fe      	b.n	800c088 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c08a:	4b07      	ldr	r3, [pc, #28]	; (800c0a8 <vTaskPlaceOnEventList+0x44>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	3318      	adds	r3, #24
 800c090:	4619      	mov	r1, r3
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f7fe fb53 	bl	800a73e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c098:	2101      	movs	r1, #1
 800c09a:	6838      	ldr	r0, [r7, #0]
 800c09c:	f000 fb7a 	bl	800c794 <prvAddCurrentTaskToDelayedList>
}
 800c0a0:	bf00      	nop
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	20003b64 	.word	0x20003b64

0800c0ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b086      	sub	sp, #24
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	60f8      	str	r0, [r7, #12]
 800c0b4:	60b9      	str	r1, [r7, #8]
 800c0b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d10a      	bne.n	800c0d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800c0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0c2:	f383 8811 	msr	BASEPRI, r3
 800c0c6:	f3bf 8f6f 	isb	sy
 800c0ca:	f3bf 8f4f 	dsb	sy
 800c0ce:	617b      	str	r3, [r7, #20]
}
 800c0d0:	bf00      	nop
 800c0d2:	e7fe      	b.n	800c0d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c0d4:	4b0a      	ldr	r3, [pc, #40]	; (800c100 <vTaskPlaceOnEventListRestricted+0x54>)
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	3318      	adds	r3, #24
 800c0da:	4619      	mov	r1, r3
 800c0dc:	68f8      	ldr	r0, [r7, #12]
 800c0de:	f7fe fb0a 	bl	800a6f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800c0e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c0ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c0ee:	6879      	ldr	r1, [r7, #4]
 800c0f0:	68b8      	ldr	r0, [r7, #8]
 800c0f2:	f000 fb4f 	bl	800c794 <prvAddCurrentTaskToDelayedList>
	}
 800c0f6:	bf00      	nop
 800c0f8:	3718      	adds	r7, #24
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
 800c0fe:	bf00      	nop
 800c100:	20003b64 	.word	0x20003b64

0800c104 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b086      	sub	sp, #24
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	68db      	ldr	r3, [r3, #12]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10a      	bne.n	800c130 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c11e:	f383 8811 	msr	BASEPRI, r3
 800c122:	f3bf 8f6f 	isb	sy
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	60fb      	str	r3, [r7, #12]
}
 800c12c:	bf00      	nop
 800c12e:	e7fe      	b.n	800c12e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c130:	693b      	ldr	r3, [r7, #16]
 800c132:	3318      	adds	r3, #24
 800c134:	4618      	mov	r0, r3
 800c136:	f7fe fb3b 	bl	800a7b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c13a:	4b1e      	ldr	r3, [pc, #120]	; (800c1b4 <xTaskRemoveFromEventList+0xb0>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d11d      	bne.n	800c17e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	3304      	adds	r3, #4
 800c146:	4618      	mov	r0, r3
 800c148:	f7fe fb32 	bl	800a7b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c150:	4b19      	ldr	r3, [pc, #100]	; (800c1b8 <xTaskRemoveFromEventList+0xb4>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	429a      	cmp	r2, r3
 800c156:	d903      	bls.n	800c160 <xTaskRemoveFromEventList+0x5c>
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c15c:	4a16      	ldr	r2, [pc, #88]	; (800c1b8 <xTaskRemoveFromEventList+0xb4>)
 800c15e:	6013      	str	r3, [r2, #0]
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c164:	4613      	mov	r3, r2
 800c166:	009b      	lsls	r3, r3, #2
 800c168:	4413      	add	r3, r2
 800c16a:	009b      	lsls	r3, r3, #2
 800c16c:	4a13      	ldr	r2, [pc, #76]	; (800c1bc <xTaskRemoveFromEventList+0xb8>)
 800c16e:	441a      	add	r2, r3
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	3304      	adds	r3, #4
 800c174:	4619      	mov	r1, r3
 800c176:	4610      	mov	r0, r2
 800c178:	f7fe fabd 	bl	800a6f6 <vListInsertEnd>
 800c17c:	e005      	b.n	800c18a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	3318      	adds	r3, #24
 800c182:	4619      	mov	r1, r3
 800c184:	480e      	ldr	r0, [pc, #56]	; (800c1c0 <xTaskRemoveFromEventList+0xbc>)
 800c186:	f7fe fab6 	bl	800a6f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c18e:	4b0d      	ldr	r3, [pc, #52]	; (800c1c4 <xTaskRemoveFromEventList+0xc0>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c194:	429a      	cmp	r2, r3
 800c196:	d905      	bls.n	800c1a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c198:	2301      	movs	r3, #1
 800c19a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c19c:	4b0a      	ldr	r3, [pc, #40]	; (800c1c8 <xTaskRemoveFromEventList+0xc4>)
 800c19e:	2201      	movs	r2, #1
 800c1a0:	601a      	str	r2, [r3, #0]
 800c1a2:	e001      	b.n	800c1a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c1a8:	697b      	ldr	r3, [r7, #20]
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3718      	adds	r7, #24
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}
 800c1b2:	bf00      	nop
 800c1b4:	20004060 	.word	0x20004060
 800c1b8:	20004040 	.word	0x20004040
 800c1bc:	20003b68 	.word	0x20003b68
 800c1c0:	20003ff8 	.word	0x20003ff8
 800c1c4:	20003b64 	.word	0x20003b64
 800c1c8:	2000404c 	.word	0x2000404c

0800c1cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c1d4:	4b06      	ldr	r3, [pc, #24]	; (800c1f0 <vTaskInternalSetTimeOutState+0x24>)
 800c1d6:	681a      	ldr	r2, [r3, #0]
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c1dc:	4b05      	ldr	r3, [pc, #20]	; (800c1f4 <vTaskInternalSetTimeOutState+0x28>)
 800c1de:	681a      	ldr	r2, [r3, #0]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	605a      	str	r2, [r3, #4]
}
 800c1e4:	bf00      	nop
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr
 800c1f0:	20004050 	.word	0x20004050
 800c1f4:	2000403c 	.word	0x2000403c

0800c1f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b088      	sub	sp, #32
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d10a      	bne.n	800c21e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c20c:	f383 8811 	msr	BASEPRI, r3
 800c210:	f3bf 8f6f 	isb	sy
 800c214:	f3bf 8f4f 	dsb	sy
 800c218:	613b      	str	r3, [r7, #16]
}
 800c21a:	bf00      	nop
 800c21c:	e7fe      	b.n	800c21c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d10a      	bne.n	800c23a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c228:	f383 8811 	msr	BASEPRI, r3
 800c22c:	f3bf 8f6f 	isb	sy
 800c230:	f3bf 8f4f 	dsb	sy
 800c234:	60fb      	str	r3, [r7, #12]
}
 800c236:	bf00      	nop
 800c238:	e7fe      	b.n	800c238 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c23a:	f000 ff7b 	bl	800d134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c23e:	4b1d      	ldr	r3, [pc, #116]	; (800c2b4 <xTaskCheckForTimeOut+0xbc>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	69ba      	ldr	r2, [r7, #24]
 800c24a:	1ad3      	subs	r3, r2, r3
 800c24c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c256:	d102      	bne.n	800c25e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c258:	2300      	movs	r3, #0
 800c25a:	61fb      	str	r3, [r7, #28]
 800c25c:	e023      	b.n	800c2a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	4b15      	ldr	r3, [pc, #84]	; (800c2b8 <xTaskCheckForTimeOut+0xc0>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	429a      	cmp	r2, r3
 800c268:	d007      	beq.n	800c27a <xTaskCheckForTimeOut+0x82>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	685b      	ldr	r3, [r3, #4]
 800c26e:	69ba      	ldr	r2, [r7, #24]
 800c270:	429a      	cmp	r2, r3
 800c272:	d302      	bcc.n	800c27a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c274:	2301      	movs	r3, #1
 800c276:	61fb      	str	r3, [r7, #28]
 800c278:	e015      	b.n	800c2a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	697a      	ldr	r2, [r7, #20]
 800c280:	429a      	cmp	r2, r3
 800c282:	d20b      	bcs.n	800c29c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	681a      	ldr	r2, [r3, #0]
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	1ad2      	subs	r2, r2, r3
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c290:	6878      	ldr	r0, [r7, #4]
 800c292:	f7ff ff9b 	bl	800c1cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c296:	2300      	movs	r3, #0
 800c298:	61fb      	str	r3, [r7, #28]
 800c29a:	e004      	b.n	800c2a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c2a6:	f000 ff75 	bl	800d194 <vPortExitCritical>

	return xReturn;
 800c2aa:	69fb      	ldr	r3, [r7, #28]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3720      	adds	r7, #32
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	2000403c 	.word	0x2000403c
 800c2b8:	20004050 	.word	0x20004050

0800c2bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c2bc:	b480      	push	{r7}
 800c2be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c2c0:	4b03      	ldr	r3, [pc, #12]	; (800c2d0 <vTaskMissedYield+0x14>)
 800c2c2:	2201      	movs	r2, #1
 800c2c4:	601a      	str	r2, [r3, #0]
}
 800c2c6:	bf00      	nop
 800c2c8:	46bd      	mov	sp, r7
 800c2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ce:	4770      	bx	lr
 800c2d0:	2000404c 	.word	0x2000404c

0800c2d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c2dc:	f000 f852 	bl	800c384 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c2e0:	4b06      	ldr	r3, [pc, #24]	; (800c2fc <prvIdleTask+0x28>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d9f9      	bls.n	800c2dc <prvIdleTask+0x8>
			{
				taskYIELD();
 800c2e8:	4b05      	ldr	r3, [pc, #20]	; (800c300 <prvIdleTask+0x2c>)
 800c2ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2ee:	601a      	str	r2, [r3, #0]
 800c2f0:	f3bf 8f4f 	dsb	sy
 800c2f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c2f8:	e7f0      	b.n	800c2dc <prvIdleTask+0x8>
 800c2fa:	bf00      	nop
 800c2fc:	20003b68 	.word	0x20003b68
 800c300:	e000ed04 	.word	0xe000ed04

0800c304 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c30a:	2300      	movs	r3, #0
 800c30c:	607b      	str	r3, [r7, #4]
 800c30e:	e00c      	b.n	800c32a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c310:	687a      	ldr	r2, [r7, #4]
 800c312:	4613      	mov	r3, r2
 800c314:	009b      	lsls	r3, r3, #2
 800c316:	4413      	add	r3, r2
 800c318:	009b      	lsls	r3, r3, #2
 800c31a:	4a12      	ldr	r2, [pc, #72]	; (800c364 <prvInitialiseTaskLists+0x60>)
 800c31c:	4413      	add	r3, r2
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fe f9bc 	bl	800a69c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	3301      	adds	r3, #1
 800c328:	607b      	str	r3, [r7, #4]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2b37      	cmp	r3, #55	; 0x37
 800c32e:	d9ef      	bls.n	800c310 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c330:	480d      	ldr	r0, [pc, #52]	; (800c368 <prvInitialiseTaskLists+0x64>)
 800c332:	f7fe f9b3 	bl	800a69c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c336:	480d      	ldr	r0, [pc, #52]	; (800c36c <prvInitialiseTaskLists+0x68>)
 800c338:	f7fe f9b0 	bl	800a69c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c33c:	480c      	ldr	r0, [pc, #48]	; (800c370 <prvInitialiseTaskLists+0x6c>)
 800c33e:	f7fe f9ad 	bl	800a69c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c342:	480c      	ldr	r0, [pc, #48]	; (800c374 <prvInitialiseTaskLists+0x70>)
 800c344:	f7fe f9aa 	bl	800a69c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c348:	480b      	ldr	r0, [pc, #44]	; (800c378 <prvInitialiseTaskLists+0x74>)
 800c34a:	f7fe f9a7 	bl	800a69c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c34e:	4b0b      	ldr	r3, [pc, #44]	; (800c37c <prvInitialiseTaskLists+0x78>)
 800c350:	4a05      	ldr	r2, [pc, #20]	; (800c368 <prvInitialiseTaskLists+0x64>)
 800c352:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c354:	4b0a      	ldr	r3, [pc, #40]	; (800c380 <prvInitialiseTaskLists+0x7c>)
 800c356:	4a05      	ldr	r2, [pc, #20]	; (800c36c <prvInitialiseTaskLists+0x68>)
 800c358:	601a      	str	r2, [r3, #0]
}
 800c35a:	bf00      	nop
 800c35c:	3708      	adds	r7, #8
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}
 800c362:	bf00      	nop
 800c364:	20003b68 	.word	0x20003b68
 800c368:	20003fc8 	.word	0x20003fc8
 800c36c:	20003fdc 	.word	0x20003fdc
 800c370:	20003ff8 	.word	0x20003ff8
 800c374:	2000400c 	.word	0x2000400c
 800c378:	20004024 	.word	0x20004024
 800c37c:	20003ff0 	.word	0x20003ff0
 800c380:	20003ff4 	.word	0x20003ff4

0800c384 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c38a:	e019      	b.n	800c3c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c38c:	f000 fed2 	bl	800d134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c390:	4b10      	ldr	r3, [pc, #64]	; (800c3d4 <prvCheckTasksWaitingTermination+0x50>)
 800c392:	68db      	ldr	r3, [r3, #12]
 800c394:	68db      	ldr	r3, [r3, #12]
 800c396:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	3304      	adds	r3, #4
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7fe fa07 	bl	800a7b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c3a2:	4b0d      	ldr	r3, [pc, #52]	; (800c3d8 <prvCheckTasksWaitingTermination+0x54>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	3b01      	subs	r3, #1
 800c3a8:	4a0b      	ldr	r2, [pc, #44]	; (800c3d8 <prvCheckTasksWaitingTermination+0x54>)
 800c3aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c3ac:	4b0b      	ldr	r3, [pc, #44]	; (800c3dc <prvCheckTasksWaitingTermination+0x58>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	3b01      	subs	r3, #1
 800c3b2:	4a0a      	ldr	r2, [pc, #40]	; (800c3dc <prvCheckTasksWaitingTermination+0x58>)
 800c3b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c3b6:	f000 feed 	bl	800d194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c3ba:	6878      	ldr	r0, [r7, #4]
 800c3bc:	f000 f810 	bl	800c3e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3c0:	4b06      	ldr	r3, [pc, #24]	; (800c3dc <prvCheckTasksWaitingTermination+0x58>)
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d1e1      	bne.n	800c38c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c3c8:	bf00      	nop
 800c3ca:	bf00      	nop
 800c3cc:	3708      	adds	r7, #8
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	2000400c 	.word	0x2000400c
 800c3d8:	20004038 	.word	0x20004038
 800c3dc:	20004020 	.word	0x20004020

0800c3e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b084      	sub	sp, #16
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d108      	bne.n	800c404 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f001 f88a 	bl	800d510 <vPortFree>
				vPortFree( pxTCB );
 800c3fc:	6878      	ldr	r0, [r7, #4]
 800c3fe:	f001 f887 	bl	800d510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c402:	e018      	b.n	800c436 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c40a:	2b01      	cmp	r3, #1
 800c40c:	d103      	bne.n	800c416 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f001 f87e 	bl	800d510 <vPortFree>
	}
 800c414:	e00f      	b.n	800c436 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c41c:	2b02      	cmp	r3, #2
 800c41e:	d00a      	beq.n	800c436 <prvDeleteTCB+0x56>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	60fb      	str	r3, [r7, #12]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <prvDeleteTCB+0x54>
	}
 800c436:	bf00      	nop
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
	...

0800c440 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c440:	b480      	push	{r7}
 800c442:	b083      	sub	sp, #12
 800c444:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c446:	4b0c      	ldr	r3, [pc, #48]	; (800c478 <prvResetNextTaskUnblockTime+0x38>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d104      	bne.n	800c45a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c450:	4b0a      	ldr	r3, [pc, #40]	; (800c47c <prvResetNextTaskUnblockTime+0x3c>)
 800c452:	f04f 32ff 	mov.w	r2, #4294967295
 800c456:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c458:	e008      	b.n	800c46c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c45a:	4b07      	ldr	r3, [pc, #28]	; (800c478 <prvResetNextTaskUnblockTime+0x38>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	685b      	ldr	r3, [r3, #4]
 800c468:	4a04      	ldr	r2, [pc, #16]	; (800c47c <prvResetNextTaskUnblockTime+0x3c>)
 800c46a:	6013      	str	r3, [r2, #0]
}
 800c46c:	bf00      	nop
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr
 800c478:	20003ff0 	.word	0x20003ff0
 800c47c:	20004058 	.word	0x20004058

0800c480 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c486:	4b0b      	ldr	r3, [pc, #44]	; (800c4b4 <xTaskGetSchedulerState+0x34>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d102      	bne.n	800c494 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c48e:	2301      	movs	r3, #1
 800c490:	607b      	str	r3, [r7, #4]
 800c492:	e008      	b.n	800c4a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c494:	4b08      	ldr	r3, [pc, #32]	; (800c4b8 <xTaskGetSchedulerState+0x38>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d102      	bne.n	800c4a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c49c:	2302      	movs	r3, #2
 800c49e:	607b      	str	r3, [r7, #4]
 800c4a0:	e001      	b.n	800c4a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c4a6:	687b      	ldr	r3, [r7, #4]
	}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr
 800c4b4:	20004044 	.word	0x20004044
 800c4b8:	20004060 	.word	0x20004060

0800c4bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b084      	sub	sp, #16
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d051      	beq.n	800c576 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d6:	4b2a      	ldr	r3, [pc, #168]	; (800c580 <xTaskPriorityInherit+0xc4>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d241      	bcs.n	800c564 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	699b      	ldr	r3, [r3, #24]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	db06      	blt.n	800c4f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c4e8:	4b25      	ldr	r3, [pc, #148]	; (800c580 <xTaskPriorityInherit+0xc4>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c4f2:	68bb      	ldr	r3, [r7, #8]
 800c4f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	6959      	ldr	r1, [r3, #20]
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4fe:	4613      	mov	r3, r2
 800c500:	009b      	lsls	r3, r3, #2
 800c502:	4413      	add	r3, r2
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	4a1f      	ldr	r2, [pc, #124]	; (800c584 <xTaskPriorityInherit+0xc8>)
 800c508:	4413      	add	r3, r2
 800c50a:	4299      	cmp	r1, r3
 800c50c:	d122      	bne.n	800c554 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	3304      	adds	r3, #4
 800c512:	4618      	mov	r0, r3
 800c514:	f7fe f94c 	bl	800a7b0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c518:	4b19      	ldr	r3, [pc, #100]	; (800c580 <xTaskPriorityInherit+0xc4>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c51e:	68bb      	ldr	r3, [r7, #8]
 800c520:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c522:	68bb      	ldr	r3, [r7, #8]
 800c524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c526:	4b18      	ldr	r3, [pc, #96]	; (800c588 <xTaskPriorityInherit+0xcc>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	429a      	cmp	r2, r3
 800c52c:	d903      	bls.n	800c536 <xTaskPriorityInherit+0x7a>
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c532:	4a15      	ldr	r2, [pc, #84]	; (800c588 <xTaskPriorityInherit+0xcc>)
 800c534:	6013      	str	r3, [r2, #0]
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53a:	4613      	mov	r3, r2
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	4413      	add	r3, r2
 800c540:	009b      	lsls	r3, r3, #2
 800c542:	4a10      	ldr	r2, [pc, #64]	; (800c584 <xTaskPriorityInherit+0xc8>)
 800c544:	441a      	add	r2, r3
 800c546:	68bb      	ldr	r3, [r7, #8]
 800c548:	3304      	adds	r3, #4
 800c54a:	4619      	mov	r1, r3
 800c54c:	4610      	mov	r0, r2
 800c54e:	f7fe f8d2 	bl	800a6f6 <vListInsertEnd>
 800c552:	e004      	b.n	800c55e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c554:	4b0a      	ldr	r3, [pc, #40]	; (800c580 <xTaskPriorityInherit+0xc4>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c55e:	2301      	movs	r3, #1
 800c560:	60fb      	str	r3, [r7, #12]
 800c562:	e008      	b.n	800c576 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c568:	4b05      	ldr	r3, [pc, #20]	; (800c580 <xTaskPriorityInherit+0xc4>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c56e:	429a      	cmp	r2, r3
 800c570:	d201      	bcs.n	800c576 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c572:	2301      	movs	r3, #1
 800c574:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c576:	68fb      	ldr	r3, [r7, #12]
	}
 800c578:	4618      	mov	r0, r3
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}
 800c580:	20003b64 	.word	0x20003b64
 800c584:	20003b68 	.word	0x20003b68
 800c588:	20004040 	.word	0x20004040

0800c58c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b086      	sub	sp, #24
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c598:	2300      	movs	r3, #0
 800c59a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d056      	beq.n	800c650 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c5a2:	4b2e      	ldr	r3, [pc, #184]	; (800c65c <xTaskPriorityDisinherit+0xd0>)
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	693a      	ldr	r2, [r7, #16]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d00a      	beq.n	800c5c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	60fb      	str	r3, [r7, #12]
}
 800c5be:	bf00      	nop
 800c5c0:	e7fe      	b.n	800c5c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d10a      	bne.n	800c5e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ce:	f383 8811 	msr	BASEPRI, r3
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	f3bf 8f4f 	dsb	sy
 800c5da:	60bb      	str	r3, [r7, #8]
}
 800c5dc:	bf00      	nop
 800c5de:	e7fe      	b.n	800c5de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c5e0:	693b      	ldr	r3, [r7, #16]
 800c5e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5e4:	1e5a      	subs	r2, r3, #1
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5f2:	429a      	cmp	r2, r3
 800c5f4:	d02c      	beq.n	800c650 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d128      	bne.n	800c650 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	3304      	adds	r3, #4
 800c602:	4618      	mov	r0, r3
 800c604:	f7fe f8d4 	bl	800a7b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c614:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c620:	4b0f      	ldr	r3, [pc, #60]	; (800c660 <xTaskPriorityDisinherit+0xd4>)
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	429a      	cmp	r2, r3
 800c626:	d903      	bls.n	800c630 <xTaskPriorityDisinherit+0xa4>
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62c:	4a0c      	ldr	r2, [pc, #48]	; (800c660 <xTaskPriorityDisinherit+0xd4>)
 800c62e:	6013      	str	r3, [r2, #0]
 800c630:	693b      	ldr	r3, [r7, #16]
 800c632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c634:	4613      	mov	r3, r2
 800c636:	009b      	lsls	r3, r3, #2
 800c638:	4413      	add	r3, r2
 800c63a:	009b      	lsls	r3, r3, #2
 800c63c:	4a09      	ldr	r2, [pc, #36]	; (800c664 <xTaskPriorityDisinherit+0xd8>)
 800c63e:	441a      	add	r2, r3
 800c640:	693b      	ldr	r3, [r7, #16]
 800c642:	3304      	adds	r3, #4
 800c644:	4619      	mov	r1, r3
 800c646:	4610      	mov	r0, r2
 800c648:	f7fe f855 	bl	800a6f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c64c:	2301      	movs	r3, #1
 800c64e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c650:	697b      	ldr	r3, [r7, #20]
	}
 800c652:	4618      	mov	r0, r3
 800c654:	3718      	adds	r7, #24
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}
 800c65a:	bf00      	nop
 800c65c:	20003b64 	.word	0x20003b64
 800c660:	20004040 	.word	0x20004040
 800c664:	20003b68 	.word	0x20003b68

0800c668 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b088      	sub	sp, #32
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
 800c670:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c676:	2301      	movs	r3, #1
 800c678:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d06a      	beq.n	800c756 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c684:	2b00      	cmp	r3, #0
 800c686:	d10a      	bne.n	800c69e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c68c:	f383 8811 	msr	BASEPRI, r3
 800c690:	f3bf 8f6f 	isb	sy
 800c694:	f3bf 8f4f 	dsb	sy
 800c698:	60fb      	str	r3, [r7, #12]
}
 800c69a:	bf00      	nop
 800c69c:	e7fe      	b.n	800c69c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c69e:	69bb      	ldr	r3, [r7, #24]
 800c6a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6a2:	683a      	ldr	r2, [r7, #0]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d902      	bls.n	800c6ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	61fb      	str	r3, [r7, #28]
 800c6ac:	e002      	b.n	800c6b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c6b4:	69bb      	ldr	r3, [r7, #24]
 800c6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6b8:	69fa      	ldr	r2, [r7, #28]
 800c6ba:	429a      	cmp	r2, r3
 800c6bc:	d04b      	beq.n	800c756 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c6be:	69bb      	ldr	r3, [r7, #24]
 800c6c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c6c2:	697a      	ldr	r2, [r7, #20]
 800c6c4:	429a      	cmp	r2, r3
 800c6c6:	d146      	bne.n	800c756 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c6c8:	4b25      	ldr	r3, [pc, #148]	; (800c760 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	69ba      	ldr	r2, [r7, #24]
 800c6ce:	429a      	cmp	r2, r3
 800c6d0:	d10a      	bne.n	800c6e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c6d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6d6:	f383 8811 	msr	BASEPRI, r3
 800c6da:	f3bf 8f6f 	isb	sy
 800c6de:	f3bf 8f4f 	dsb	sy
 800c6e2:	60bb      	str	r3, [r7, #8]
}
 800c6e4:	bf00      	nop
 800c6e6:	e7fe      	b.n	800c6e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c6ee:	69bb      	ldr	r3, [r7, #24]
 800c6f0:	69fa      	ldr	r2, [r7, #28]
 800c6f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	699b      	ldr	r3, [r3, #24]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	db04      	blt.n	800c706 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c706:	69bb      	ldr	r3, [r7, #24]
 800c708:	6959      	ldr	r1, [r3, #20]
 800c70a:	693a      	ldr	r2, [r7, #16]
 800c70c:	4613      	mov	r3, r2
 800c70e:	009b      	lsls	r3, r3, #2
 800c710:	4413      	add	r3, r2
 800c712:	009b      	lsls	r3, r3, #2
 800c714:	4a13      	ldr	r2, [pc, #76]	; (800c764 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c716:	4413      	add	r3, r2
 800c718:	4299      	cmp	r1, r3
 800c71a:	d11c      	bne.n	800c756 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c71c:	69bb      	ldr	r3, [r7, #24]
 800c71e:	3304      	adds	r3, #4
 800c720:	4618      	mov	r0, r3
 800c722:	f7fe f845 	bl	800a7b0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c726:	69bb      	ldr	r3, [r7, #24]
 800c728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c72a:	4b0f      	ldr	r3, [pc, #60]	; (800c768 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	429a      	cmp	r2, r3
 800c730:	d903      	bls.n	800c73a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c736:	4a0c      	ldr	r2, [pc, #48]	; (800c768 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c738:	6013      	str	r3, [r2, #0]
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c73e:	4613      	mov	r3, r2
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	4413      	add	r3, r2
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	4a07      	ldr	r2, [pc, #28]	; (800c764 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c748:	441a      	add	r2, r3
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	3304      	adds	r3, #4
 800c74e:	4619      	mov	r1, r3
 800c750:	4610      	mov	r0, r2
 800c752:	f7fd ffd0 	bl	800a6f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c756:	bf00      	nop
 800c758:	3720      	adds	r7, #32
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	20003b64 	.word	0x20003b64
 800c764:	20003b68 	.word	0x20003b68
 800c768:	20004040 	.word	0x20004040

0800c76c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c76c:	b480      	push	{r7}
 800c76e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c770:	4b07      	ldr	r3, [pc, #28]	; (800c790 <pvTaskIncrementMutexHeldCount+0x24>)
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d004      	beq.n	800c782 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c778:	4b05      	ldr	r3, [pc, #20]	; (800c790 <pvTaskIncrementMutexHeldCount+0x24>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c77e:	3201      	adds	r2, #1
 800c780:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c782:	4b03      	ldr	r3, [pc, #12]	; (800c790 <pvTaskIncrementMutexHeldCount+0x24>)
 800c784:	681b      	ldr	r3, [r3, #0]
	}
 800c786:	4618      	mov	r0, r3
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr
 800c790:	20003b64 	.word	0x20003b64

0800c794 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b084      	sub	sp, #16
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
 800c79c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c79e:	4b21      	ldr	r3, [pc, #132]	; (800c824 <prvAddCurrentTaskToDelayedList+0x90>)
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c7a4:	4b20      	ldr	r3, [pc, #128]	; (800c828 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	3304      	adds	r3, #4
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	f7fe f800 	bl	800a7b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7b6:	d10a      	bne.n	800c7ce <prvAddCurrentTaskToDelayedList+0x3a>
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d007      	beq.n	800c7ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7be:	4b1a      	ldr	r3, [pc, #104]	; (800c828 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	3304      	adds	r3, #4
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	4819      	ldr	r0, [pc, #100]	; (800c82c <prvAddCurrentTaskToDelayedList+0x98>)
 800c7c8:	f7fd ff95 	bl	800a6f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c7cc:	e026      	b.n	800c81c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c7ce:	68fa      	ldr	r2, [r7, #12]
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c7d6:	4b14      	ldr	r3, [pc, #80]	; (800c828 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	68ba      	ldr	r2, [r7, #8]
 800c7dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c7de:	68ba      	ldr	r2, [r7, #8]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	429a      	cmp	r2, r3
 800c7e4:	d209      	bcs.n	800c7fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7e6:	4b12      	ldr	r3, [pc, #72]	; (800c830 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c7e8:	681a      	ldr	r2, [r3, #0]
 800c7ea:	4b0f      	ldr	r3, [pc, #60]	; (800c828 <prvAddCurrentTaskToDelayedList+0x94>)
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	3304      	adds	r3, #4
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	4610      	mov	r0, r2
 800c7f4:	f7fd ffa3 	bl	800a73e <vListInsert>
}
 800c7f8:	e010      	b.n	800c81c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7fa:	4b0e      	ldr	r3, [pc, #56]	; (800c834 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c7fc:	681a      	ldr	r2, [r3, #0]
 800c7fe:	4b0a      	ldr	r3, [pc, #40]	; (800c828 <prvAddCurrentTaskToDelayedList+0x94>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	3304      	adds	r3, #4
 800c804:	4619      	mov	r1, r3
 800c806:	4610      	mov	r0, r2
 800c808:	f7fd ff99 	bl	800a73e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c80c:	4b0a      	ldr	r3, [pc, #40]	; (800c838 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	68ba      	ldr	r2, [r7, #8]
 800c812:	429a      	cmp	r2, r3
 800c814:	d202      	bcs.n	800c81c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c816:	4a08      	ldr	r2, [pc, #32]	; (800c838 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	6013      	str	r3, [r2, #0]
}
 800c81c:	bf00      	nop
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	2000403c 	.word	0x2000403c
 800c828:	20003b64 	.word	0x20003b64
 800c82c:	20004024 	.word	0x20004024
 800c830:	20003ff4 	.word	0x20003ff4
 800c834:	20003ff0 	.word	0x20003ff0
 800c838:	20004058 	.word	0x20004058

0800c83c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08a      	sub	sp, #40	; 0x28
 800c840:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c842:	2300      	movs	r3, #0
 800c844:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c846:	f000 fb07 	bl	800ce58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c84a:	4b1c      	ldr	r3, [pc, #112]	; (800c8bc <xTimerCreateTimerTask+0x80>)
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d021      	beq.n	800c896 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c852:	2300      	movs	r3, #0
 800c854:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c856:	2300      	movs	r3, #0
 800c858:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c85a:	1d3a      	adds	r2, r7, #4
 800c85c:	f107 0108 	add.w	r1, r7, #8
 800c860:	f107 030c 	add.w	r3, r7, #12
 800c864:	4618      	mov	r0, r3
 800c866:	f7fd feff 	bl	800a668 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c86a:	6879      	ldr	r1, [r7, #4]
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	68fa      	ldr	r2, [r7, #12]
 800c870:	9202      	str	r2, [sp, #8]
 800c872:	9301      	str	r3, [sp, #4]
 800c874:	2302      	movs	r3, #2
 800c876:	9300      	str	r3, [sp, #0]
 800c878:	2300      	movs	r3, #0
 800c87a:	460a      	mov	r2, r1
 800c87c:	4910      	ldr	r1, [pc, #64]	; (800c8c0 <xTimerCreateTimerTask+0x84>)
 800c87e:	4811      	ldr	r0, [pc, #68]	; (800c8c4 <xTimerCreateTimerTask+0x88>)
 800c880:	f7fe ffce 	bl	800b820 <xTaskCreateStatic>
 800c884:	4603      	mov	r3, r0
 800c886:	4a10      	ldr	r2, [pc, #64]	; (800c8c8 <xTimerCreateTimerTask+0x8c>)
 800c888:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c88a:	4b0f      	ldr	r3, [pc, #60]	; (800c8c8 <xTimerCreateTimerTask+0x8c>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d001      	beq.n	800c896 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c892:	2301      	movs	r3, #1
 800c894:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c896:	697b      	ldr	r3, [r7, #20]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d10a      	bne.n	800c8b2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c89c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a0:	f383 8811 	msr	BASEPRI, r3
 800c8a4:	f3bf 8f6f 	isb	sy
 800c8a8:	f3bf 8f4f 	dsb	sy
 800c8ac:	613b      	str	r3, [r7, #16]
}
 800c8ae:	bf00      	nop
 800c8b0:	e7fe      	b.n	800c8b0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c8b2:	697b      	ldr	r3, [r7, #20]
}
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	3718      	adds	r7, #24
 800c8b8:	46bd      	mov	sp, r7
 800c8ba:	bd80      	pop	{r7, pc}
 800c8bc:	20004094 	.word	0x20004094
 800c8c0:	0800e41c 	.word	0x0800e41c
 800c8c4:	0800ca01 	.word	0x0800ca01
 800c8c8:	20004098 	.word	0x20004098

0800c8cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b08a      	sub	sp, #40	; 0x28
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
 800c8d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d10a      	bne.n	800c8fa <xTimerGenericCommand+0x2e>
	__asm volatile
 800c8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e8:	f383 8811 	msr	BASEPRI, r3
 800c8ec:	f3bf 8f6f 	isb	sy
 800c8f0:	f3bf 8f4f 	dsb	sy
 800c8f4:	623b      	str	r3, [r7, #32]
}
 800c8f6:	bf00      	nop
 800c8f8:	e7fe      	b.n	800c8f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c8fa:	4b1a      	ldr	r3, [pc, #104]	; (800c964 <xTimerGenericCommand+0x98>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d02a      	beq.n	800c958 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c902:	68bb      	ldr	r3, [r7, #8]
 800c904:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c90e:	68bb      	ldr	r3, [r7, #8]
 800c910:	2b05      	cmp	r3, #5
 800c912:	dc18      	bgt.n	800c946 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c914:	f7ff fdb4 	bl	800c480 <xTaskGetSchedulerState>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b02      	cmp	r3, #2
 800c91c:	d109      	bne.n	800c932 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c91e:	4b11      	ldr	r3, [pc, #68]	; (800c964 <xTimerGenericCommand+0x98>)
 800c920:	6818      	ldr	r0, [r3, #0]
 800c922:	f107 0110 	add.w	r1, r7, #16
 800c926:	2300      	movs	r3, #0
 800c928:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c92a:	f7fe f913 	bl	800ab54 <xQueueGenericSend>
 800c92e:	6278      	str	r0, [r7, #36]	; 0x24
 800c930:	e012      	b.n	800c958 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c932:	4b0c      	ldr	r3, [pc, #48]	; (800c964 <xTimerGenericCommand+0x98>)
 800c934:	6818      	ldr	r0, [r3, #0]
 800c936:	f107 0110 	add.w	r1, r7, #16
 800c93a:	2300      	movs	r3, #0
 800c93c:	2200      	movs	r2, #0
 800c93e:	f7fe f909 	bl	800ab54 <xQueueGenericSend>
 800c942:	6278      	str	r0, [r7, #36]	; 0x24
 800c944:	e008      	b.n	800c958 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c946:	4b07      	ldr	r3, [pc, #28]	; (800c964 <xTimerGenericCommand+0x98>)
 800c948:	6818      	ldr	r0, [r3, #0]
 800c94a:	f107 0110 	add.w	r1, r7, #16
 800c94e:	2300      	movs	r3, #0
 800c950:	683a      	ldr	r2, [r7, #0]
 800c952:	f7fe f9fd 	bl	800ad50 <xQueueGenericSendFromISR>
 800c956:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	3728      	adds	r7, #40	; 0x28
 800c95e:	46bd      	mov	sp, r7
 800c960:	bd80      	pop	{r7, pc}
 800c962:	bf00      	nop
 800c964:	20004094 	.word	0x20004094

0800c968 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b088      	sub	sp, #32
 800c96c:	af02      	add	r7, sp, #8
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c972:	4b22      	ldr	r3, [pc, #136]	; (800c9fc <prvProcessExpiredTimer+0x94>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	68db      	ldr	r3, [r3, #12]
 800c97a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	3304      	adds	r3, #4
 800c980:	4618      	mov	r0, r3
 800c982:	f7fd ff15 	bl	800a7b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c98c:	f003 0304 	and.w	r3, r3, #4
 800c990:	2b00      	cmp	r3, #0
 800c992:	d022      	beq.n	800c9da <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	699a      	ldr	r2, [r3, #24]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	18d1      	adds	r1, r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	683a      	ldr	r2, [r7, #0]
 800c9a0:	6978      	ldr	r0, [r7, #20]
 800c9a2:	f000 f8d1 	bl	800cb48 <prvInsertTimerInActiveList>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d01f      	beq.n	800c9ec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	9300      	str	r3, [sp, #0]
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	687a      	ldr	r2, [r7, #4]
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	6978      	ldr	r0, [r7, #20]
 800c9b8:	f7ff ff88 	bl	800c8cc <xTimerGenericCommand>
 800c9bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d113      	bne.n	800c9ec <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c9c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c8:	f383 8811 	msr	BASEPRI, r3
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	60fb      	str	r3, [r7, #12]
}
 800c9d6:	bf00      	nop
 800c9d8:	e7fe      	b.n	800c9d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9da:	697b      	ldr	r3, [r7, #20]
 800c9dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9e0:	f023 0301 	bic.w	r3, r3, #1
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	6a1b      	ldr	r3, [r3, #32]
 800c9f0:	6978      	ldr	r0, [r7, #20]
 800c9f2:	4798      	blx	r3
}
 800c9f4:	bf00      	nop
 800c9f6:	3718      	adds	r7, #24
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	2000408c 	.word	0x2000408c

0800ca00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca08:	f107 0308 	add.w	r3, r7, #8
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	f000 f857 	bl	800cac0 <prvGetNextExpireTime>
 800ca12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	4619      	mov	r1, r3
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f000 f803 	bl	800ca24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ca1e:	f000 f8d5 	bl	800cbcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ca22:	e7f1      	b.n	800ca08 <prvTimerTask+0x8>

0800ca24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ca2e:	f7ff f933 	bl	800bc98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ca32:	f107 0308 	add.w	r3, r7, #8
 800ca36:	4618      	mov	r0, r3
 800ca38:	f000 f866 	bl	800cb08 <prvSampleTimeNow>
 800ca3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d130      	bne.n	800caa6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10a      	bne.n	800ca60 <prvProcessTimerOrBlockTask+0x3c>
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	429a      	cmp	r2, r3
 800ca50:	d806      	bhi.n	800ca60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ca52:	f7ff f92f 	bl	800bcb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ca56:	68f9      	ldr	r1, [r7, #12]
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f7ff ff85 	bl	800c968 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ca5e:	e024      	b.n	800caaa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ca60:	683b      	ldr	r3, [r7, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d008      	beq.n	800ca78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ca66:	4b13      	ldr	r3, [pc, #76]	; (800cab4 <prvProcessTimerOrBlockTask+0x90>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d101      	bne.n	800ca74 <prvProcessTimerOrBlockTask+0x50>
 800ca70:	2301      	movs	r3, #1
 800ca72:	e000      	b.n	800ca76 <prvProcessTimerOrBlockTask+0x52>
 800ca74:	2300      	movs	r3, #0
 800ca76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ca78:	4b0f      	ldr	r3, [pc, #60]	; (800cab8 <prvProcessTimerOrBlockTask+0x94>)
 800ca7a:	6818      	ldr	r0, [r3, #0]
 800ca7c:	687a      	ldr	r2, [r7, #4]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	1ad3      	subs	r3, r2, r3
 800ca82:	683a      	ldr	r2, [r7, #0]
 800ca84:	4619      	mov	r1, r3
 800ca86:	f7fe fe97 	bl	800b7b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ca8a:	f7ff f913 	bl	800bcb4 <xTaskResumeAll>
 800ca8e:	4603      	mov	r3, r0
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d10a      	bne.n	800caaa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ca94:	4b09      	ldr	r3, [pc, #36]	; (800cabc <prvProcessTimerOrBlockTask+0x98>)
 800ca96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca9a:	601a      	str	r2, [r3, #0]
 800ca9c:	f3bf 8f4f 	dsb	sy
 800caa0:	f3bf 8f6f 	isb	sy
}
 800caa4:	e001      	b.n	800caaa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800caa6:	f7ff f905 	bl	800bcb4 <xTaskResumeAll>
}
 800caaa:	bf00      	nop
 800caac:	3710      	adds	r7, #16
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	20004090 	.word	0x20004090
 800cab8:	20004094 	.word	0x20004094
 800cabc:	e000ed04 	.word	0xe000ed04

0800cac0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cac0:	b480      	push	{r7}
 800cac2:	b085      	sub	sp, #20
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cac8:	4b0e      	ldr	r3, [pc, #56]	; (800cb04 <prvGetNextExpireTime+0x44>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d101      	bne.n	800cad6 <prvGetNextExpireTime+0x16>
 800cad2:	2201      	movs	r2, #1
 800cad4:	e000      	b.n	800cad8 <prvGetNextExpireTime+0x18>
 800cad6:	2200      	movs	r2, #0
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d105      	bne.n	800caf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cae4:	4b07      	ldr	r3, [pc, #28]	; (800cb04 <prvGetNextExpireTime+0x44>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	60fb      	str	r3, [r7, #12]
 800caee:	e001      	b.n	800caf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800caf0:	2300      	movs	r3, #0
 800caf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800caf4:	68fb      	ldr	r3, [r7, #12]
}
 800caf6:	4618      	mov	r0, r3
 800caf8:	3714      	adds	r7, #20
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr
 800cb02:	bf00      	nop
 800cb04:	2000408c 	.word	0x2000408c

0800cb08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cb10:	f7ff f96e 	bl	800bdf0 <xTaskGetTickCount>
 800cb14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cb16:	4b0b      	ldr	r3, [pc, #44]	; (800cb44 <prvSampleTimeNow+0x3c>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	429a      	cmp	r2, r3
 800cb1e:	d205      	bcs.n	800cb2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cb20:	f000 f936 	bl	800cd90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2201      	movs	r2, #1
 800cb28:	601a      	str	r2, [r3, #0]
 800cb2a:	e002      	b.n	800cb32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cb32:	4a04      	ldr	r2, [pc, #16]	; (800cb44 <prvSampleTimeNow+0x3c>)
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cb38:	68fb      	ldr	r3, [r7, #12]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3710      	adds	r7, #16
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	2000409c 	.word	0x2000409c

0800cb48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b086      	sub	sp, #24
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
 800cb54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cb56:	2300      	movs	r3, #0
 800cb58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	68ba      	ldr	r2, [r7, #8]
 800cb5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	68fa      	ldr	r2, [r7, #12]
 800cb64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cb66:	68ba      	ldr	r2, [r7, #8]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	429a      	cmp	r2, r3
 800cb6c:	d812      	bhi.n	800cb94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	683b      	ldr	r3, [r7, #0]
 800cb72:	1ad2      	subs	r2, r2, r3
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	699b      	ldr	r3, [r3, #24]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d302      	bcc.n	800cb82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800cb7c:	2301      	movs	r3, #1
 800cb7e:	617b      	str	r3, [r7, #20]
 800cb80:	e01b      	b.n	800cbba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800cb82:	4b10      	ldr	r3, [pc, #64]	; (800cbc4 <prvInsertTimerInActiveList+0x7c>)
 800cb84:	681a      	ldr	r2, [r3, #0]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	3304      	adds	r3, #4
 800cb8a:	4619      	mov	r1, r3
 800cb8c:	4610      	mov	r0, r2
 800cb8e:	f7fd fdd6 	bl	800a73e <vListInsert>
 800cb92:	e012      	b.n	800cbba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	d206      	bcs.n	800cbaa <prvInsertTimerInActiveList+0x62>
 800cb9c:	68ba      	ldr	r2, [r7, #8]
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	429a      	cmp	r2, r3
 800cba2:	d302      	bcc.n	800cbaa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800cba4:	2301      	movs	r3, #1
 800cba6:	617b      	str	r3, [r7, #20]
 800cba8:	e007      	b.n	800cbba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cbaa:	4b07      	ldr	r3, [pc, #28]	; (800cbc8 <prvInsertTimerInActiveList+0x80>)
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	3304      	adds	r3, #4
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	4610      	mov	r0, r2
 800cbb6:	f7fd fdc2 	bl	800a73e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800cbba:	697b      	ldr	r3, [r7, #20]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3718      	adds	r7, #24
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	20004090 	.word	0x20004090
 800cbc8:	2000408c 	.word	0x2000408c

0800cbcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b08e      	sub	sp, #56	; 0x38
 800cbd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cbd2:	e0ca      	b.n	800cd6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	da18      	bge.n	800cc0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800cbda:	1d3b      	adds	r3, r7, #4
 800cbdc:	3304      	adds	r3, #4
 800cbde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800cbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d10a      	bne.n	800cbfc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800cbe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbea:	f383 8811 	msr	BASEPRI, r3
 800cbee:	f3bf 8f6f 	isb	sy
 800cbf2:	f3bf 8f4f 	dsb	sy
 800cbf6:	61fb      	str	r3, [r7, #28]
}
 800cbf8:	bf00      	nop
 800cbfa:	e7fe      	b.n	800cbfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800cbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc02:	6850      	ldr	r0, [r2, #4]
 800cc04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc06:	6892      	ldr	r2, [r2, #8]
 800cc08:	4611      	mov	r1, r2
 800cc0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	f2c0 80ab 	blt.w	800cd6a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1a:	695b      	ldr	r3, [r3, #20]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d004      	beq.n	800cc2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc22:	3304      	adds	r3, #4
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7fd fdc3 	bl	800a7b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cc2a:	463b      	mov	r3, r7
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7ff ff6b 	bl	800cb08 <prvSampleTimeNow>
 800cc32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b09      	cmp	r3, #9
 800cc38:	f200 8096 	bhi.w	800cd68 <prvProcessReceivedCommands+0x19c>
 800cc3c:	a201      	add	r2, pc, #4	; (adr r2, 800cc44 <prvProcessReceivedCommands+0x78>)
 800cc3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc42:	bf00      	nop
 800cc44:	0800cc6d 	.word	0x0800cc6d
 800cc48:	0800cc6d 	.word	0x0800cc6d
 800cc4c:	0800cc6d 	.word	0x0800cc6d
 800cc50:	0800cce1 	.word	0x0800cce1
 800cc54:	0800ccf5 	.word	0x0800ccf5
 800cc58:	0800cd3f 	.word	0x0800cd3f
 800cc5c:	0800cc6d 	.word	0x0800cc6d
 800cc60:	0800cc6d 	.word	0x0800cc6d
 800cc64:	0800cce1 	.word	0x0800cce1
 800cc68:	0800ccf5 	.word	0x0800ccf5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc72:	f043 0301 	orr.w	r3, r3, #1
 800cc76:	b2da      	uxtb	r2, r3
 800cc78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cc7e:	68ba      	ldr	r2, [r7, #8]
 800cc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc82:	699b      	ldr	r3, [r3, #24]
 800cc84:	18d1      	adds	r1, r2, r3
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc8c:	f7ff ff5c 	bl	800cb48 <prvInsertTimerInActiveList>
 800cc90:	4603      	mov	r3, r0
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d069      	beq.n	800cd6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc98:	6a1b      	ldr	r3, [r3, #32]
 800cc9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cca4:	f003 0304 	and.w	r3, r3, #4
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d05e      	beq.n	800cd6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ccac:	68ba      	ldr	r2, [r7, #8]
 800ccae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccb0:	699b      	ldr	r3, [r3, #24]
 800ccb2:	441a      	add	r2, r3
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	9300      	str	r3, [sp, #0]
 800ccb8:	2300      	movs	r3, #0
 800ccba:	2100      	movs	r1, #0
 800ccbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ccbe:	f7ff fe05 	bl	800c8cc <xTimerGenericCommand>
 800ccc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ccc4:	6a3b      	ldr	r3, [r7, #32]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d14f      	bne.n	800cd6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ccca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccce:	f383 8811 	msr	BASEPRI, r3
 800ccd2:	f3bf 8f6f 	isb	sy
 800ccd6:	f3bf 8f4f 	dsb	sy
 800ccda:	61bb      	str	r3, [r7, #24]
}
 800ccdc:	bf00      	nop
 800ccde:	e7fe      	b.n	800ccde <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cce2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cce6:	f023 0301 	bic.w	r3, r3, #1
 800ccea:	b2da      	uxtb	r2, r3
 800ccec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ccf2:	e03a      	b.n	800cd6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ccf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ccfa:	f043 0301 	orr.w	r3, r3, #1
 800ccfe:	b2da      	uxtb	r2, r3
 800cd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cd06:	68ba      	ldr	r2, [r7, #8]
 800cd08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0e:	699b      	ldr	r3, [r3, #24]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d10a      	bne.n	800cd2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800cd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd18:	f383 8811 	msr	BASEPRI, r3
 800cd1c:	f3bf 8f6f 	isb	sy
 800cd20:	f3bf 8f4f 	dsb	sy
 800cd24:	617b      	str	r3, [r7, #20]
}
 800cd26:	bf00      	nop
 800cd28:	e7fe      	b.n	800cd28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd2c:	699a      	ldr	r2, [r3, #24]
 800cd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd30:	18d1      	adds	r1, r2, r3
 800cd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd38:	f7ff ff06 	bl	800cb48 <prvInsertTimerInActiveList>
					break;
 800cd3c:	e015      	b.n	800cd6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd44:	f003 0302 	and.w	r3, r3, #2
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d103      	bne.n	800cd54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800cd4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd4e:	f000 fbdf 	bl	800d510 <vPortFree>
 800cd52:	e00a      	b.n	800cd6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cd5a:	f023 0301 	bic.w	r3, r3, #1
 800cd5e:	b2da      	uxtb	r2, r3
 800cd60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cd66:	e000      	b.n	800cd6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800cd68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cd6a:	4b08      	ldr	r3, [pc, #32]	; (800cd8c <prvProcessReceivedCommands+0x1c0>)
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	1d39      	adds	r1, r7, #4
 800cd70:	2200      	movs	r2, #0
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7fe f914 	bl	800afa0 <xQueueReceive>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	f47f af2a 	bne.w	800cbd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cd80:	bf00      	nop
 800cd82:	bf00      	nop
 800cd84:	3730      	adds	r7, #48	; 0x30
 800cd86:	46bd      	mov	sp, r7
 800cd88:	bd80      	pop	{r7, pc}
 800cd8a:	bf00      	nop
 800cd8c:	20004094 	.word	0x20004094

0800cd90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b088      	sub	sp, #32
 800cd94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cd96:	e048      	b.n	800ce2a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd98:	4b2d      	ldr	r3, [pc, #180]	; (800ce50 <prvSwitchTimerLists+0xc0>)
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	68db      	ldr	r3, [r3, #12]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cda2:	4b2b      	ldr	r3, [pc, #172]	; (800ce50 <prvSwitchTimerLists+0xc0>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	68db      	ldr	r3, [r3, #12]
 800cda8:	68db      	ldr	r3, [r3, #12]
 800cdaa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	3304      	adds	r3, #4
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	f7fd fcfd 	bl	800a7b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	6a1b      	ldr	r3, [r3, #32]
 800cdba:	68f8      	ldr	r0, [r7, #12]
 800cdbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cdc4:	f003 0304 	and.w	r3, r3, #4
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d02e      	beq.n	800ce2a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	699b      	ldr	r3, [r3, #24]
 800cdd0:	693a      	ldr	r2, [r7, #16]
 800cdd2:	4413      	add	r3, r2
 800cdd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cdd6:	68ba      	ldr	r2, [r7, #8]
 800cdd8:	693b      	ldr	r3, [r7, #16]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d90e      	bls.n	800cdfc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	68ba      	ldr	r2, [r7, #8]
 800cde2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cdea:	4b19      	ldr	r3, [pc, #100]	; (800ce50 <prvSwitchTimerLists+0xc0>)
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	3304      	adds	r3, #4
 800cdf2:	4619      	mov	r1, r3
 800cdf4:	4610      	mov	r0, r2
 800cdf6:	f7fd fca2 	bl	800a73e <vListInsert>
 800cdfa:	e016      	b.n	800ce2a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	9300      	str	r3, [sp, #0]
 800ce00:	2300      	movs	r3, #0
 800ce02:	693a      	ldr	r2, [r7, #16]
 800ce04:	2100      	movs	r1, #0
 800ce06:	68f8      	ldr	r0, [r7, #12]
 800ce08:	f7ff fd60 	bl	800c8cc <xTimerGenericCommand>
 800ce0c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d10a      	bne.n	800ce2a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ce14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce18:	f383 8811 	msr	BASEPRI, r3
 800ce1c:	f3bf 8f6f 	isb	sy
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	603b      	str	r3, [r7, #0]
}
 800ce26:	bf00      	nop
 800ce28:	e7fe      	b.n	800ce28 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ce2a:	4b09      	ldr	r3, [pc, #36]	; (800ce50 <prvSwitchTimerLists+0xc0>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d1b1      	bne.n	800cd98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ce34:	4b06      	ldr	r3, [pc, #24]	; (800ce50 <prvSwitchTimerLists+0xc0>)
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ce3a:	4b06      	ldr	r3, [pc, #24]	; (800ce54 <prvSwitchTimerLists+0xc4>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4a04      	ldr	r2, [pc, #16]	; (800ce50 <prvSwitchTimerLists+0xc0>)
 800ce40:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ce42:	4a04      	ldr	r2, [pc, #16]	; (800ce54 <prvSwitchTimerLists+0xc4>)
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	6013      	str	r3, [r2, #0]
}
 800ce48:	bf00      	nop
 800ce4a:	3718      	adds	r7, #24
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bd80      	pop	{r7, pc}
 800ce50:	2000408c 	.word	0x2000408c
 800ce54:	20004090 	.word	0x20004090

0800ce58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ce5e:	f000 f969 	bl	800d134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ce62:	4b15      	ldr	r3, [pc, #84]	; (800ceb8 <prvCheckForValidListAndQueue+0x60>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d120      	bne.n	800ceac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ce6a:	4814      	ldr	r0, [pc, #80]	; (800cebc <prvCheckForValidListAndQueue+0x64>)
 800ce6c:	f7fd fc16 	bl	800a69c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ce70:	4813      	ldr	r0, [pc, #76]	; (800cec0 <prvCheckForValidListAndQueue+0x68>)
 800ce72:	f7fd fc13 	bl	800a69c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ce76:	4b13      	ldr	r3, [pc, #76]	; (800cec4 <prvCheckForValidListAndQueue+0x6c>)
 800ce78:	4a10      	ldr	r2, [pc, #64]	; (800cebc <prvCheckForValidListAndQueue+0x64>)
 800ce7a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ce7c:	4b12      	ldr	r3, [pc, #72]	; (800cec8 <prvCheckForValidListAndQueue+0x70>)
 800ce7e:	4a10      	ldr	r2, [pc, #64]	; (800cec0 <prvCheckForValidListAndQueue+0x68>)
 800ce80:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce82:	2300      	movs	r3, #0
 800ce84:	9300      	str	r3, [sp, #0]
 800ce86:	4b11      	ldr	r3, [pc, #68]	; (800cecc <prvCheckForValidListAndQueue+0x74>)
 800ce88:	4a11      	ldr	r2, [pc, #68]	; (800ced0 <prvCheckForValidListAndQueue+0x78>)
 800ce8a:	2110      	movs	r1, #16
 800ce8c:	200a      	movs	r0, #10
 800ce8e:	f7fd fd21 	bl	800a8d4 <xQueueGenericCreateStatic>
 800ce92:	4603      	mov	r3, r0
 800ce94:	4a08      	ldr	r2, [pc, #32]	; (800ceb8 <prvCheckForValidListAndQueue+0x60>)
 800ce96:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ce98:	4b07      	ldr	r3, [pc, #28]	; (800ceb8 <prvCheckForValidListAndQueue+0x60>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d005      	beq.n	800ceac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cea0:	4b05      	ldr	r3, [pc, #20]	; (800ceb8 <prvCheckForValidListAndQueue+0x60>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	490b      	ldr	r1, [pc, #44]	; (800ced4 <prvCheckForValidListAndQueue+0x7c>)
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fe fc32 	bl	800b710 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ceac:	f000 f972 	bl	800d194 <vPortExitCritical>
}
 800ceb0:	bf00      	nop
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	20004094 	.word	0x20004094
 800cebc:	20004064 	.word	0x20004064
 800cec0:	20004078 	.word	0x20004078
 800cec4:	2000408c 	.word	0x2000408c
 800cec8:	20004090 	.word	0x20004090
 800cecc:	20004140 	.word	0x20004140
 800ced0:	200040a0 	.word	0x200040a0
 800ced4:	0800e424 	.word	0x0800e424

0800ced8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ced8:	b480      	push	{r7}
 800ceda:	b085      	sub	sp, #20
 800cedc:	af00      	add	r7, sp, #0
 800cede:	60f8      	str	r0, [r7, #12]
 800cee0:	60b9      	str	r1, [r7, #8]
 800cee2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	3b04      	subs	r3, #4
 800cee8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cef0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	3b04      	subs	r3, #4
 800cef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	f023 0201 	bic.w	r2, r3, #1
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	3b04      	subs	r3, #4
 800cf06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf08:	4a0c      	ldr	r2, [pc, #48]	; (800cf3c <pxPortInitialiseStack+0x64>)
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	3b14      	subs	r3, #20
 800cf12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cf14:	687a      	ldr	r2, [r7, #4]
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	3b04      	subs	r3, #4
 800cf1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f06f 0202 	mvn.w	r2, #2
 800cf26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	3b20      	subs	r3, #32
 800cf2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3714      	adds	r7, #20
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr
 800cf3c:	0800cf41 	.word	0x0800cf41

0800cf40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cf40:	b480      	push	{r7}
 800cf42:	b085      	sub	sp, #20
 800cf44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cf46:	2300      	movs	r3, #0
 800cf48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cf4a:	4b12      	ldr	r3, [pc, #72]	; (800cf94 <prvTaskExitError+0x54>)
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf52:	d00a      	beq.n	800cf6a <prvTaskExitError+0x2a>
	__asm volatile
 800cf54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf58:	f383 8811 	msr	BASEPRI, r3
 800cf5c:	f3bf 8f6f 	isb	sy
 800cf60:	f3bf 8f4f 	dsb	sy
 800cf64:	60fb      	str	r3, [r7, #12]
}
 800cf66:	bf00      	nop
 800cf68:	e7fe      	b.n	800cf68 <prvTaskExitError+0x28>
	__asm volatile
 800cf6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf6e:	f383 8811 	msr	BASEPRI, r3
 800cf72:	f3bf 8f6f 	isb	sy
 800cf76:	f3bf 8f4f 	dsb	sy
 800cf7a:	60bb      	str	r3, [r7, #8]
}
 800cf7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cf7e:	bf00      	nop
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d0fc      	beq.n	800cf80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cf86:	bf00      	nop
 800cf88:	bf00      	nop
 800cf8a:	3714      	adds	r7, #20
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr
 800cf94:	200000c8 	.word	0x200000c8
	...

0800cfa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cfa0:	4b07      	ldr	r3, [pc, #28]	; (800cfc0 <pxCurrentTCBConst2>)
 800cfa2:	6819      	ldr	r1, [r3, #0]
 800cfa4:	6808      	ldr	r0, [r1, #0]
 800cfa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfaa:	f380 8809 	msr	PSP, r0
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f04f 0000 	mov.w	r0, #0
 800cfb6:	f380 8811 	msr	BASEPRI, r0
 800cfba:	4770      	bx	lr
 800cfbc:	f3af 8000 	nop.w

0800cfc0 <pxCurrentTCBConst2>:
 800cfc0:	20003b64 	.word	0x20003b64
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cfc4:	bf00      	nop
 800cfc6:	bf00      	nop

0800cfc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cfc8:	4808      	ldr	r0, [pc, #32]	; (800cfec <prvPortStartFirstTask+0x24>)
 800cfca:	6800      	ldr	r0, [r0, #0]
 800cfcc:	6800      	ldr	r0, [r0, #0]
 800cfce:	f380 8808 	msr	MSP, r0
 800cfd2:	f04f 0000 	mov.w	r0, #0
 800cfd6:	f380 8814 	msr	CONTROL, r0
 800cfda:	b662      	cpsie	i
 800cfdc:	b661      	cpsie	f
 800cfde:	f3bf 8f4f 	dsb	sy
 800cfe2:	f3bf 8f6f 	isb	sy
 800cfe6:	df00      	svc	0
 800cfe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cfea:	bf00      	nop
 800cfec:	e000ed08 	.word	0xe000ed08

0800cff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b086      	sub	sp, #24
 800cff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cff6:	4b46      	ldr	r3, [pc, #280]	; (800d110 <xPortStartScheduler+0x120>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	4a46      	ldr	r2, [pc, #280]	; (800d114 <xPortStartScheduler+0x124>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d10a      	bne.n	800d016 <xPortStartScheduler+0x26>
	__asm volatile
 800d000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d004:	f383 8811 	msr	BASEPRI, r3
 800d008:	f3bf 8f6f 	isb	sy
 800d00c:	f3bf 8f4f 	dsb	sy
 800d010:	613b      	str	r3, [r7, #16]
}
 800d012:	bf00      	nop
 800d014:	e7fe      	b.n	800d014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d016:	4b3e      	ldr	r3, [pc, #248]	; (800d110 <xPortStartScheduler+0x120>)
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	4a3f      	ldr	r2, [pc, #252]	; (800d118 <xPortStartScheduler+0x128>)
 800d01c:	4293      	cmp	r3, r2
 800d01e:	d10a      	bne.n	800d036 <xPortStartScheduler+0x46>
	__asm volatile
 800d020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d024:	f383 8811 	msr	BASEPRI, r3
 800d028:	f3bf 8f6f 	isb	sy
 800d02c:	f3bf 8f4f 	dsb	sy
 800d030:	60fb      	str	r3, [r7, #12]
}
 800d032:	bf00      	nop
 800d034:	e7fe      	b.n	800d034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d036:	4b39      	ldr	r3, [pc, #228]	; (800d11c <xPortStartScheduler+0x12c>)
 800d038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	781b      	ldrb	r3, [r3, #0]
 800d03e:	b2db      	uxtb	r3, r3
 800d040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d042:	697b      	ldr	r3, [r7, #20]
 800d044:	22ff      	movs	r2, #255	; 0xff
 800d046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	b2db      	uxtb	r3, r3
 800d04e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d050:	78fb      	ldrb	r3, [r7, #3]
 800d052:	b2db      	uxtb	r3, r3
 800d054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d058:	b2da      	uxtb	r2, r3
 800d05a:	4b31      	ldr	r3, [pc, #196]	; (800d120 <xPortStartScheduler+0x130>)
 800d05c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d05e:	4b31      	ldr	r3, [pc, #196]	; (800d124 <xPortStartScheduler+0x134>)
 800d060:	2207      	movs	r2, #7
 800d062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d064:	e009      	b.n	800d07a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800d066:	4b2f      	ldr	r3, [pc, #188]	; (800d124 <xPortStartScheduler+0x134>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	3b01      	subs	r3, #1
 800d06c:	4a2d      	ldr	r2, [pc, #180]	; (800d124 <xPortStartScheduler+0x134>)
 800d06e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d070:	78fb      	ldrb	r3, [r7, #3]
 800d072:	b2db      	uxtb	r3, r3
 800d074:	005b      	lsls	r3, r3, #1
 800d076:	b2db      	uxtb	r3, r3
 800d078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d07a:	78fb      	ldrb	r3, [r7, #3]
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d082:	2b80      	cmp	r3, #128	; 0x80
 800d084:	d0ef      	beq.n	800d066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d086:	4b27      	ldr	r3, [pc, #156]	; (800d124 <xPortStartScheduler+0x134>)
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	f1c3 0307 	rsb	r3, r3, #7
 800d08e:	2b04      	cmp	r3, #4
 800d090:	d00a      	beq.n	800d0a8 <xPortStartScheduler+0xb8>
	__asm volatile
 800d092:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d096:	f383 8811 	msr	BASEPRI, r3
 800d09a:	f3bf 8f6f 	isb	sy
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	60bb      	str	r3, [r7, #8]
}
 800d0a4:	bf00      	nop
 800d0a6:	e7fe      	b.n	800d0a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d0a8:	4b1e      	ldr	r3, [pc, #120]	; (800d124 <xPortStartScheduler+0x134>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	021b      	lsls	r3, r3, #8
 800d0ae:	4a1d      	ldr	r2, [pc, #116]	; (800d124 <xPortStartScheduler+0x134>)
 800d0b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d0b2:	4b1c      	ldr	r3, [pc, #112]	; (800d124 <xPortStartScheduler+0x134>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d0ba:	4a1a      	ldr	r2, [pc, #104]	; (800d124 <xPortStartScheduler+0x134>)
 800d0bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	697b      	ldr	r3, [r7, #20]
 800d0c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d0c6:	4b18      	ldr	r3, [pc, #96]	; (800d128 <xPortStartScheduler+0x138>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	4a17      	ldr	r2, [pc, #92]	; (800d128 <xPortStartScheduler+0x138>)
 800d0cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d0d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d0d2:	4b15      	ldr	r3, [pc, #84]	; (800d128 <xPortStartScheduler+0x138>)
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	4a14      	ldr	r2, [pc, #80]	; (800d128 <xPortStartScheduler+0x138>)
 800d0d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d0dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d0de:	f000 f8dd 	bl	800d29c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d0e2:	4b12      	ldr	r3, [pc, #72]	; (800d12c <xPortStartScheduler+0x13c>)
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d0e8:	f000 f8fc 	bl	800d2e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d0ec:	4b10      	ldr	r3, [pc, #64]	; (800d130 <xPortStartScheduler+0x140>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a0f      	ldr	r2, [pc, #60]	; (800d130 <xPortStartScheduler+0x140>)
 800d0f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d0f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d0f8:	f7ff ff66 	bl	800cfc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d0fc:	f7fe ff54 	bl	800bfa8 <vTaskSwitchContext>
	prvTaskExitError();
 800d100:	f7ff ff1e 	bl	800cf40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d104:	2300      	movs	r3, #0
}
 800d106:	4618      	mov	r0, r3
 800d108:	3718      	adds	r7, #24
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	e000ed00 	.word	0xe000ed00
 800d114:	410fc271 	.word	0x410fc271
 800d118:	410fc270 	.word	0x410fc270
 800d11c:	e000e400 	.word	0xe000e400
 800d120:	20004190 	.word	0x20004190
 800d124:	20004194 	.word	0x20004194
 800d128:	e000ed20 	.word	0xe000ed20
 800d12c:	200000c8 	.word	0x200000c8
 800d130:	e000ef34 	.word	0xe000ef34

0800d134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
	__asm volatile
 800d13a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d13e:	f383 8811 	msr	BASEPRI, r3
 800d142:	f3bf 8f6f 	isb	sy
 800d146:	f3bf 8f4f 	dsb	sy
 800d14a:	607b      	str	r3, [r7, #4]
}
 800d14c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d14e:	4b0f      	ldr	r3, [pc, #60]	; (800d18c <vPortEnterCritical+0x58>)
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	3301      	adds	r3, #1
 800d154:	4a0d      	ldr	r2, [pc, #52]	; (800d18c <vPortEnterCritical+0x58>)
 800d156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d158:	4b0c      	ldr	r3, [pc, #48]	; (800d18c <vPortEnterCritical+0x58>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	2b01      	cmp	r3, #1
 800d15e:	d10f      	bne.n	800d180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d160:	4b0b      	ldr	r3, [pc, #44]	; (800d190 <vPortEnterCritical+0x5c>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	b2db      	uxtb	r3, r3
 800d166:	2b00      	cmp	r3, #0
 800d168:	d00a      	beq.n	800d180 <vPortEnterCritical+0x4c>
	__asm volatile
 800d16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d16e:	f383 8811 	msr	BASEPRI, r3
 800d172:	f3bf 8f6f 	isb	sy
 800d176:	f3bf 8f4f 	dsb	sy
 800d17a:	603b      	str	r3, [r7, #0]
}
 800d17c:	bf00      	nop
 800d17e:	e7fe      	b.n	800d17e <vPortEnterCritical+0x4a>
	}
}
 800d180:	bf00      	nop
 800d182:	370c      	adds	r7, #12
 800d184:	46bd      	mov	sp, r7
 800d186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18a:	4770      	bx	lr
 800d18c:	200000c8 	.word	0x200000c8
 800d190:	e000ed04 	.word	0xe000ed04

0800d194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d194:	b480      	push	{r7}
 800d196:	b083      	sub	sp, #12
 800d198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d19a:	4b12      	ldr	r3, [pc, #72]	; (800d1e4 <vPortExitCritical+0x50>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d10a      	bne.n	800d1b8 <vPortExitCritical+0x24>
	__asm volatile
 800d1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a6:	f383 8811 	msr	BASEPRI, r3
 800d1aa:	f3bf 8f6f 	isb	sy
 800d1ae:	f3bf 8f4f 	dsb	sy
 800d1b2:	607b      	str	r3, [r7, #4]
}
 800d1b4:	bf00      	nop
 800d1b6:	e7fe      	b.n	800d1b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d1b8:	4b0a      	ldr	r3, [pc, #40]	; (800d1e4 <vPortExitCritical+0x50>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	3b01      	subs	r3, #1
 800d1be:	4a09      	ldr	r2, [pc, #36]	; (800d1e4 <vPortExitCritical+0x50>)
 800d1c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d1c2:	4b08      	ldr	r3, [pc, #32]	; (800d1e4 <vPortExitCritical+0x50>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d105      	bne.n	800d1d6 <vPortExitCritical+0x42>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	f383 8811 	msr	BASEPRI, r3
}
 800d1d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d1d6:	bf00      	nop
 800d1d8:	370c      	adds	r7, #12
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e0:	4770      	bx	lr
 800d1e2:	bf00      	nop
 800d1e4:	200000c8 	.word	0x200000c8
	...

0800d1f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d1f0:	f3ef 8009 	mrs	r0, PSP
 800d1f4:	f3bf 8f6f 	isb	sy
 800d1f8:	4b15      	ldr	r3, [pc, #84]	; (800d250 <pxCurrentTCBConst>)
 800d1fa:	681a      	ldr	r2, [r3, #0]
 800d1fc:	f01e 0f10 	tst.w	lr, #16
 800d200:	bf08      	it	eq
 800d202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d20a:	6010      	str	r0, [r2, #0]
 800d20c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d210:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d214:	f380 8811 	msr	BASEPRI, r0
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	f3bf 8f6f 	isb	sy
 800d220:	f7fe fec2 	bl	800bfa8 <vTaskSwitchContext>
 800d224:	f04f 0000 	mov.w	r0, #0
 800d228:	f380 8811 	msr	BASEPRI, r0
 800d22c:	bc09      	pop	{r0, r3}
 800d22e:	6819      	ldr	r1, [r3, #0]
 800d230:	6808      	ldr	r0, [r1, #0]
 800d232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d236:	f01e 0f10 	tst.w	lr, #16
 800d23a:	bf08      	it	eq
 800d23c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d240:	f380 8809 	msr	PSP, r0
 800d244:	f3bf 8f6f 	isb	sy
 800d248:	4770      	bx	lr
 800d24a:	bf00      	nop
 800d24c:	f3af 8000 	nop.w

0800d250 <pxCurrentTCBConst>:
 800d250:	20003b64 	.word	0x20003b64
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d254:	bf00      	nop
 800d256:	bf00      	nop

0800d258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b082      	sub	sp, #8
 800d25c:	af00      	add	r7, sp, #0
	__asm volatile
 800d25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d262:	f383 8811 	msr	BASEPRI, r3
 800d266:	f3bf 8f6f 	isb	sy
 800d26a:	f3bf 8f4f 	dsb	sy
 800d26e:	607b      	str	r3, [r7, #4]
}
 800d270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d272:	f7fe fddf 	bl	800be34 <xTaskIncrementTick>
 800d276:	4603      	mov	r3, r0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d003      	beq.n	800d284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d27c:	4b06      	ldr	r3, [pc, #24]	; (800d298 <xPortSysTickHandler+0x40>)
 800d27e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d282:	601a      	str	r2, [r3, #0]
 800d284:	2300      	movs	r3, #0
 800d286:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	f383 8811 	msr	BASEPRI, r3
}
 800d28e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d290:	bf00      	nop
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}
 800d298:	e000ed04 	.word	0xe000ed04

0800d29c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d29c:	b480      	push	{r7}
 800d29e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d2a0:	4b0b      	ldr	r3, [pc, #44]	; (800d2d0 <vPortSetupTimerInterrupt+0x34>)
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d2a6:	4b0b      	ldr	r3, [pc, #44]	; (800d2d4 <vPortSetupTimerInterrupt+0x38>)
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d2ac:	4b0a      	ldr	r3, [pc, #40]	; (800d2d8 <vPortSetupTimerInterrupt+0x3c>)
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	4a0a      	ldr	r2, [pc, #40]	; (800d2dc <vPortSetupTimerInterrupt+0x40>)
 800d2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800d2b6:	099b      	lsrs	r3, r3, #6
 800d2b8:	4a09      	ldr	r2, [pc, #36]	; (800d2e0 <vPortSetupTimerInterrupt+0x44>)
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d2be:	4b04      	ldr	r3, [pc, #16]	; (800d2d0 <vPortSetupTimerInterrupt+0x34>)
 800d2c0:	2207      	movs	r2, #7
 800d2c2:	601a      	str	r2, [r3, #0]
}
 800d2c4:	bf00      	nop
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr
 800d2ce:	bf00      	nop
 800d2d0:	e000e010 	.word	0xe000e010
 800d2d4:	e000e018 	.word	0xe000e018
 800d2d8:	20000008 	.word	0x20000008
 800d2dc:	10624dd3 	.word	0x10624dd3
 800d2e0:	e000e014 	.word	0xe000e014

0800d2e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d2e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d2f4 <vPortEnableVFP+0x10>
 800d2e8:	6801      	ldr	r1, [r0, #0]
 800d2ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d2ee:	6001      	str	r1, [r0, #0]
 800d2f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d2f2:	bf00      	nop
 800d2f4:	e000ed88 	.word	0xe000ed88

0800d2f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d2f8:	b480      	push	{r7}
 800d2fa:	b085      	sub	sp, #20
 800d2fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d2fe:	f3ef 8305 	mrs	r3, IPSR
 800d302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2b0f      	cmp	r3, #15
 800d308:	d914      	bls.n	800d334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d30a:	4a17      	ldr	r2, [pc, #92]	; (800d368 <vPortValidateInterruptPriority+0x70>)
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	4413      	add	r3, r2
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d314:	4b15      	ldr	r3, [pc, #84]	; (800d36c <vPortValidateInterruptPriority+0x74>)
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	7afa      	ldrb	r2, [r7, #11]
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d20a      	bcs.n	800d334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800d31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d322:	f383 8811 	msr	BASEPRI, r3
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	607b      	str	r3, [r7, #4]
}
 800d330:	bf00      	nop
 800d332:	e7fe      	b.n	800d332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d334:	4b0e      	ldr	r3, [pc, #56]	; (800d370 <vPortValidateInterruptPriority+0x78>)
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d33c:	4b0d      	ldr	r3, [pc, #52]	; (800d374 <vPortValidateInterruptPriority+0x7c>)
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	429a      	cmp	r2, r3
 800d342:	d90a      	bls.n	800d35a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d344:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d348:	f383 8811 	msr	BASEPRI, r3
 800d34c:	f3bf 8f6f 	isb	sy
 800d350:	f3bf 8f4f 	dsb	sy
 800d354:	603b      	str	r3, [r7, #0]
}
 800d356:	bf00      	nop
 800d358:	e7fe      	b.n	800d358 <vPortValidateInterruptPriority+0x60>
	}
 800d35a:	bf00      	nop
 800d35c:	3714      	adds	r7, #20
 800d35e:	46bd      	mov	sp, r7
 800d360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d364:	4770      	bx	lr
 800d366:	bf00      	nop
 800d368:	e000e3f0 	.word	0xe000e3f0
 800d36c:	20004190 	.word	0x20004190
 800d370:	e000ed0c 	.word	0xe000ed0c
 800d374:	20004194 	.word	0x20004194

0800d378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	b08a      	sub	sp, #40	; 0x28
 800d37c:	af00      	add	r7, sp, #0
 800d37e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d380:	2300      	movs	r3, #0
 800d382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d384:	f7fe fc88 	bl	800bc98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d388:	4b5b      	ldr	r3, [pc, #364]	; (800d4f8 <pvPortMalloc+0x180>)
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d101      	bne.n	800d394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d390:	f000 f920 	bl	800d5d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d394:	4b59      	ldr	r3, [pc, #356]	; (800d4fc <pvPortMalloc+0x184>)
 800d396:	681a      	ldr	r2, [r3, #0]
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	4013      	ands	r3, r2
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f040 8093 	bne.w	800d4c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d01d      	beq.n	800d3e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d3a8:	2208      	movs	r2, #8
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f003 0307 	and.w	r3, r3, #7
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d014      	beq.n	800d3e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f023 0307 	bic.w	r3, r3, #7
 800d3c0:	3308      	adds	r3, #8
 800d3c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f003 0307 	and.w	r3, r3, #7
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00a      	beq.n	800d3e4 <pvPortMalloc+0x6c>
	__asm volatile
 800d3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d2:	f383 8811 	msr	BASEPRI, r3
 800d3d6:	f3bf 8f6f 	isb	sy
 800d3da:	f3bf 8f4f 	dsb	sy
 800d3de:	617b      	str	r3, [r7, #20]
}
 800d3e0:	bf00      	nop
 800d3e2:	e7fe      	b.n	800d3e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d06e      	beq.n	800d4c8 <pvPortMalloc+0x150>
 800d3ea:	4b45      	ldr	r3, [pc, #276]	; (800d500 <pvPortMalloc+0x188>)
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	687a      	ldr	r2, [r7, #4]
 800d3f0:	429a      	cmp	r2, r3
 800d3f2:	d869      	bhi.n	800d4c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d3f4:	4b43      	ldr	r3, [pc, #268]	; (800d504 <pvPortMalloc+0x18c>)
 800d3f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d3f8:	4b42      	ldr	r3, [pc, #264]	; (800d504 <pvPortMalloc+0x18c>)
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d3fe:	e004      	b.n	800d40a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40c:	685b      	ldr	r3, [r3, #4]
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	429a      	cmp	r2, r3
 800d412:	d903      	bls.n	800d41c <pvPortMalloc+0xa4>
 800d414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d1f1      	bne.n	800d400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d41c:	4b36      	ldr	r3, [pc, #216]	; (800d4f8 <pvPortMalloc+0x180>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d422:	429a      	cmp	r2, r3
 800d424:	d050      	beq.n	800d4c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d426:	6a3b      	ldr	r3, [r7, #32]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	2208      	movs	r2, #8
 800d42c:	4413      	add	r3, r2
 800d42e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	6a3b      	ldr	r3, [r7, #32]
 800d436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d43a:	685a      	ldr	r2, [r3, #4]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	1ad2      	subs	r2, r2, r3
 800d440:	2308      	movs	r3, #8
 800d442:	005b      	lsls	r3, r3, #1
 800d444:	429a      	cmp	r2, r3
 800d446:	d91f      	bls.n	800d488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	4413      	add	r3, r2
 800d44e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	f003 0307 	and.w	r3, r3, #7
 800d456:	2b00      	cmp	r3, #0
 800d458:	d00a      	beq.n	800d470 <pvPortMalloc+0xf8>
	__asm volatile
 800d45a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d45e:	f383 8811 	msr	BASEPRI, r3
 800d462:	f3bf 8f6f 	isb	sy
 800d466:	f3bf 8f4f 	dsb	sy
 800d46a:	613b      	str	r3, [r7, #16]
}
 800d46c:	bf00      	nop
 800d46e:	e7fe      	b.n	800d46e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d472:	685a      	ldr	r2, [r3, #4]
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	1ad2      	subs	r2, r2, r3
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d47e:	687a      	ldr	r2, [r7, #4]
 800d480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d482:	69b8      	ldr	r0, [r7, #24]
 800d484:	f000 f908 	bl	800d698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d488:	4b1d      	ldr	r3, [pc, #116]	; (800d500 <pvPortMalloc+0x188>)
 800d48a:	681a      	ldr	r2, [r3, #0]
 800d48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	1ad3      	subs	r3, r2, r3
 800d492:	4a1b      	ldr	r2, [pc, #108]	; (800d500 <pvPortMalloc+0x188>)
 800d494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d496:	4b1a      	ldr	r3, [pc, #104]	; (800d500 <pvPortMalloc+0x188>)
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	4b1b      	ldr	r3, [pc, #108]	; (800d508 <pvPortMalloc+0x190>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d203      	bcs.n	800d4aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d4a2:	4b17      	ldr	r3, [pc, #92]	; (800d500 <pvPortMalloc+0x188>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4a18      	ldr	r2, [pc, #96]	; (800d508 <pvPortMalloc+0x190>)
 800d4a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ac:	685a      	ldr	r2, [r3, #4]
 800d4ae:	4b13      	ldr	r3, [pc, #76]	; (800d4fc <pvPortMalloc+0x184>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	431a      	orrs	r2, r3
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d4be:	4b13      	ldr	r3, [pc, #76]	; (800d50c <pvPortMalloc+0x194>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	4a11      	ldr	r2, [pc, #68]	; (800d50c <pvPortMalloc+0x194>)
 800d4c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d4c8:	f7fe fbf4 	bl	800bcb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d4cc:	69fb      	ldr	r3, [r7, #28]
 800d4ce:	f003 0307 	and.w	r3, r3, #7
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00a      	beq.n	800d4ec <pvPortMalloc+0x174>
	__asm volatile
 800d4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4da:	f383 8811 	msr	BASEPRI, r3
 800d4de:	f3bf 8f6f 	isb	sy
 800d4e2:	f3bf 8f4f 	dsb	sy
 800d4e6:	60fb      	str	r3, [r7, #12]
}
 800d4e8:	bf00      	nop
 800d4ea:	e7fe      	b.n	800d4ea <pvPortMalloc+0x172>
	return pvReturn;
 800d4ec:	69fb      	ldr	r3, [r7, #28]
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3728      	adds	r7, #40	; 0x28
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	2000b6d0 	.word	0x2000b6d0
 800d4fc:	2000b6e4 	.word	0x2000b6e4
 800d500:	2000b6d4 	.word	0x2000b6d4
 800d504:	2000b6c8 	.word	0x2000b6c8
 800d508:	2000b6d8 	.word	0x2000b6d8
 800d50c:	2000b6dc 	.word	0x2000b6dc

0800d510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d510:	b580      	push	{r7, lr}
 800d512:	b086      	sub	sp, #24
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d04d      	beq.n	800d5be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d522:	2308      	movs	r3, #8
 800d524:	425b      	negs	r3, r3
 800d526:	697a      	ldr	r2, [r7, #20]
 800d528:	4413      	add	r3, r2
 800d52a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	685a      	ldr	r2, [r3, #4]
 800d534:	4b24      	ldr	r3, [pc, #144]	; (800d5c8 <vPortFree+0xb8>)
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	4013      	ands	r3, r2
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d10a      	bne.n	800d554 <vPortFree+0x44>
	__asm volatile
 800d53e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d542:	f383 8811 	msr	BASEPRI, r3
 800d546:	f3bf 8f6f 	isb	sy
 800d54a:	f3bf 8f4f 	dsb	sy
 800d54e:	60fb      	str	r3, [r7, #12]
}
 800d550:	bf00      	nop
 800d552:	e7fe      	b.n	800d552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d00a      	beq.n	800d572 <vPortFree+0x62>
	__asm volatile
 800d55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d560:	f383 8811 	msr	BASEPRI, r3
 800d564:	f3bf 8f6f 	isb	sy
 800d568:	f3bf 8f4f 	dsb	sy
 800d56c:	60bb      	str	r3, [r7, #8]
}
 800d56e:	bf00      	nop
 800d570:	e7fe      	b.n	800d570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	685a      	ldr	r2, [r3, #4]
 800d576:	4b14      	ldr	r3, [pc, #80]	; (800d5c8 <vPortFree+0xb8>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	4013      	ands	r3, r2
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d01e      	beq.n	800d5be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d11a      	bne.n	800d5be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	685a      	ldr	r2, [r3, #4]
 800d58c:	4b0e      	ldr	r3, [pc, #56]	; (800d5c8 <vPortFree+0xb8>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	43db      	mvns	r3, r3
 800d592:	401a      	ands	r2, r3
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d598:	f7fe fb7e 	bl	800bc98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	685a      	ldr	r2, [r3, #4]
 800d5a0:	4b0a      	ldr	r3, [pc, #40]	; (800d5cc <vPortFree+0xbc>)
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	4413      	add	r3, r2
 800d5a6:	4a09      	ldr	r2, [pc, #36]	; (800d5cc <vPortFree+0xbc>)
 800d5a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d5aa:	6938      	ldr	r0, [r7, #16]
 800d5ac:	f000 f874 	bl	800d698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d5b0:	4b07      	ldr	r3, [pc, #28]	; (800d5d0 <vPortFree+0xc0>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	4a06      	ldr	r2, [pc, #24]	; (800d5d0 <vPortFree+0xc0>)
 800d5b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d5ba:	f7fe fb7b 	bl	800bcb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d5be:	bf00      	nop
 800d5c0:	3718      	adds	r7, #24
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	2000b6e4 	.word	0x2000b6e4
 800d5cc:	2000b6d4 	.word	0x2000b6d4
 800d5d0:	2000b6e0 	.word	0x2000b6e0

0800d5d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b085      	sub	sp, #20
 800d5d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d5da:	f247 5330 	movw	r3, #30000	; 0x7530
 800d5de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d5e0:	4b27      	ldr	r3, [pc, #156]	; (800d680 <prvHeapInit+0xac>)
 800d5e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	f003 0307 	and.w	r3, r3, #7
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d00c      	beq.n	800d608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	3307      	adds	r3, #7
 800d5f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f023 0307 	bic.w	r3, r3, #7
 800d5fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d5fc:	68ba      	ldr	r2, [r7, #8]
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	1ad3      	subs	r3, r2, r3
 800d602:	4a1f      	ldr	r2, [pc, #124]	; (800d680 <prvHeapInit+0xac>)
 800d604:	4413      	add	r3, r2
 800d606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d60c:	4a1d      	ldr	r2, [pc, #116]	; (800d684 <prvHeapInit+0xb0>)
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d612:	4b1c      	ldr	r3, [pc, #112]	; (800d684 <prvHeapInit+0xb0>)
 800d614:	2200      	movs	r2, #0
 800d616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	68ba      	ldr	r2, [r7, #8]
 800d61c:	4413      	add	r3, r2
 800d61e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d620:	2208      	movs	r2, #8
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	1a9b      	subs	r3, r3, r2
 800d626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	f023 0307 	bic.w	r3, r3, #7
 800d62e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	4a15      	ldr	r2, [pc, #84]	; (800d688 <prvHeapInit+0xb4>)
 800d634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d636:	4b14      	ldr	r3, [pc, #80]	; (800d688 <prvHeapInit+0xb4>)
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	2200      	movs	r2, #0
 800d63c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d63e:	4b12      	ldr	r3, [pc, #72]	; (800d688 <prvHeapInit+0xb4>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	2200      	movs	r2, #0
 800d644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	68fa      	ldr	r2, [r7, #12]
 800d64e:	1ad2      	subs	r2, r2, r3
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d654:	4b0c      	ldr	r3, [pc, #48]	; (800d688 <prvHeapInit+0xb4>)
 800d656:	681a      	ldr	r2, [r3, #0]
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d65c:	683b      	ldr	r3, [r7, #0]
 800d65e:	685b      	ldr	r3, [r3, #4]
 800d660:	4a0a      	ldr	r2, [pc, #40]	; (800d68c <prvHeapInit+0xb8>)
 800d662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	4a09      	ldr	r2, [pc, #36]	; (800d690 <prvHeapInit+0xbc>)
 800d66a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d66c:	4b09      	ldr	r3, [pc, #36]	; (800d694 <prvHeapInit+0xc0>)
 800d66e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d672:	601a      	str	r2, [r3, #0]
}
 800d674:	bf00      	nop
 800d676:	3714      	adds	r7, #20
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr
 800d680:	20004198 	.word	0x20004198
 800d684:	2000b6c8 	.word	0x2000b6c8
 800d688:	2000b6d0 	.word	0x2000b6d0
 800d68c:	2000b6d8 	.word	0x2000b6d8
 800d690:	2000b6d4 	.word	0x2000b6d4
 800d694:	2000b6e4 	.word	0x2000b6e4

0800d698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d698:	b480      	push	{r7}
 800d69a:	b085      	sub	sp, #20
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d6a0:	4b28      	ldr	r3, [pc, #160]	; (800d744 <prvInsertBlockIntoFreeList+0xac>)
 800d6a2:	60fb      	str	r3, [r7, #12]
 800d6a4:	e002      	b.n	800d6ac <prvInsertBlockIntoFreeList+0x14>
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	60fb      	str	r3, [r7, #12]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	687a      	ldr	r2, [r7, #4]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d8f7      	bhi.n	800d6a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	685b      	ldr	r3, [r3, #4]
 800d6be:	68ba      	ldr	r2, [r7, #8]
 800d6c0:	4413      	add	r3, r2
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	d108      	bne.n	800d6da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	685a      	ldr	r2, [r3, #4]
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	441a      	add	r2, r3
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	685b      	ldr	r3, [r3, #4]
 800d6e2:	68ba      	ldr	r2, [r7, #8]
 800d6e4:	441a      	add	r2, r3
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d118      	bne.n	800d720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681a      	ldr	r2, [r3, #0]
 800d6f2:	4b15      	ldr	r3, [pc, #84]	; (800d748 <prvInsertBlockIntoFreeList+0xb0>)
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	429a      	cmp	r2, r3
 800d6f8:	d00d      	beq.n	800d716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	685a      	ldr	r2, [r3, #4]
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	685b      	ldr	r3, [r3, #4]
 800d704:	441a      	add	r2, r3
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	601a      	str	r2, [r3, #0]
 800d714:	e008      	b.n	800d728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d716:	4b0c      	ldr	r3, [pc, #48]	; (800d748 <prvInsertBlockIntoFreeList+0xb0>)
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	601a      	str	r2, [r3, #0]
 800d71e:	e003      	b.n	800d728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681a      	ldr	r2, [r3, #0]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d728:	68fa      	ldr	r2, [r7, #12]
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d002      	beq.n	800d736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	687a      	ldr	r2, [r7, #4]
 800d734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d736:	bf00      	nop
 800d738:	3714      	adds	r7, #20
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr
 800d742:	bf00      	nop
 800d744:	2000b6c8 	.word	0x2000b6c8
 800d748:	2000b6d0 	.word	0x2000b6d0

0800d74c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d750:	2200      	movs	r2, #0
 800d752:	4912      	ldr	r1, [pc, #72]	; (800d79c <MX_USB_DEVICE_Init+0x50>)
 800d754:	4812      	ldr	r0, [pc, #72]	; (800d7a0 <MX_USB_DEVICE_Init+0x54>)
 800d756:	f7fb fa25 	bl	8008ba4 <USBD_Init>
 800d75a:	4603      	mov	r3, r0
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d001      	beq.n	800d764 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d760:	f7f4 fa3a 	bl	8001bd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800d764:	490f      	ldr	r1, [pc, #60]	; (800d7a4 <MX_USB_DEVICE_Init+0x58>)
 800d766:	480e      	ldr	r0, [pc, #56]	; (800d7a0 <MX_USB_DEVICE_Init+0x54>)
 800d768:	f7fb fa4c 	bl	8008c04 <USBD_RegisterClass>
 800d76c:	4603      	mov	r3, r0
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d001      	beq.n	800d776 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d772:	f7f4 fa31 	bl	8001bd8 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800d776:	490c      	ldr	r1, [pc, #48]	; (800d7a8 <MX_USB_DEVICE_Init+0x5c>)
 800d778:	4809      	ldr	r0, [pc, #36]	; (800d7a0 <MX_USB_DEVICE_Init+0x54>)
 800d77a:	f7fb f9c5 	bl	8008b08 <USBD_AUDIO_RegisterInterface>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d001      	beq.n	800d788 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d784:	f7f4 fa28 	bl	8001bd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d788:	4805      	ldr	r0, [pc, #20]	; (800d7a0 <MX_USB_DEVICE_Init+0x54>)
 800d78a:	f7fb fa71 	bl	8008c70 <USBD_Start>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d001      	beq.n	800d798 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d794:	f7f4 fa20 	bl	8001bd8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d798:	bf00      	nop
 800d79a:	bd80      	pop	{r7, pc}
 800d79c:	200000e8 	.word	0x200000e8
 800d7a0:	2000b6e8 	.word	0x2000b6e8
 800d7a4:	20000014 	.word	0x20000014
 800d7a8:	200000cc 	.word	0x200000cc

0800d7ac <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	b085      	sub	sp, #20
 800d7b0:	af00      	add	r7, sp, #0
 800d7b2:	60f8      	str	r0, [r7, #12]
 800d7b4:	60b9      	str	r1, [r7, #8]
 800d7b6:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800d7b8:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3714      	adds	r7, #20
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr

0800d7c6 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800d7c6:	b480      	push	{r7}
 800d7c8:	b083      	sub	sp, #12
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800d7ce:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr

0800d7dc <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800d7dc:	b480      	push	{r7}
 800d7de:	b085      	sub	sp, #20
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	4613      	mov	r3, r2
 800d7e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800d7ea:	79fb      	ldrb	r3, [r7, #7]
 800d7ec:	2b01      	cmp	r3, #1
 800d7ee:	d001      	beq.n	800d7f4 <AUDIO_AudioCmd_FS+0x18>
 800d7f0:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800d7f2:	e000      	b.n	800d7f6 <AUDIO_AudioCmd_FS+0x1a>
    break;
 800d7f4:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800d7f6:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3714      	adds	r7, #20
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr

0800d804 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800d804:	b480      	push	{r7}
 800d806:	b083      	sub	sp, #12
 800d808:	af00      	add	r7, sp, #0
 800d80a:	4603      	mov	r3, r0
 800d80c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800d80e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d810:	4618      	mov	r0, r3
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b083      	sub	sp, #12
 800d820:	af00      	add	r7, sp, #0
 800d822:	4603      	mov	r3, r0
 800d824:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800d826:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d828:	4618      	mov	r0, r3
 800d82a:	370c      	adds	r7, #12
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800d834:	b480      	push	{r7}
 800d836:	b085      	sub	sp, #20
 800d838:	af00      	add	r7, sp, #0
 800d83a:	60f8      	str	r0, [r7, #12]
 800d83c:	60b9      	str	r1, [r7, #8]
 800d83e:	4613      	mov	r3, r2
 800d840:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800d842:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d844:	4618      	mov	r0, r3
 800d846:	3714      	adds	r7, #20
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr

0800d850 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800d850:	b480      	push	{r7}
 800d852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800d854:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800d856:	4618      	mov	r0, r3
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr

0800d860 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	4603      	mov	r3, r0
 800d868:	6039      	str	r1, [r7, #0]
 800d86a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	2212      	movs	r2, #18
 800d870:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d872:	4b03      	ldr	r3, [pc, #12]	; (800d880 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d874:	4618      	mov	r0, r3
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr
 800d880:	20000108 	.word	0x20000108

0800d884 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d884:	b480      	push	{r7}
 800d886:	b083      	sub	sp, #12
 800d888:	af00      	add	r7, sp, #0
 800d88a:	4603      	mov	r3, r0
 800d88c:	6039      	str	r1, [r7, #0]
 800d88e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	2204      	movs	r2, #4
 800d894:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d896:	4b03      	ldr	r3, [pc, #12]	; (800d8a4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d898:	4618      	mov	r0, r3
 800d89a:	370c      	adds	r7, #12
 800d89c:	46bd      	mov	sp, r7
 800d89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a2:	4770      	bx	lr
 800d8a4:	20000128 	.word	0x20000128

0800d8a8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	4603      	mov	r3, r0
 800d8b0:	6039      	str	r1, [r7, #0]
 800d8b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d8b4:	79fb      	ldrb	r3, [r7, #7]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d105      	bne.n	800d8c6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d8ba:	683a      	ldr	r2, [r7, #0]
 800d8bc:	4907      	ldr	r1, [pc, #28]	; (800d8dc <USBD_FS_ProductStrDescriptor+0x34>)
 800d8be:	4808      	ldr	r0, [pc, #32]	; (800d8e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d8c0:	f7fc fb78 	bl	8009fb4 <USBD_GetString>
 800d8c4:	e004      	b.n	800d8d0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d8c6:	683a      	ldr	r2, [r7, #0]
 800d8c8:	4904      	ldr	r1, [pc, #16]	; (800d8dc <USBD_FS_ProductStrDescriptor+0x34>)
 800d8ca:	4805      	ldr	r0, [pc, #20]	; (800d8e0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d8cc:	f7fc fb72 	bl	8009fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8d0:	4b02      	ldr	r3, [pc, #8]	; (800d8dc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d8d2:	4618      	mov	r0, r3
 800d8d4:	3708      	adds	r7, #8
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	2000b9c4 	.word	0x2000b9c4
 800d8e0:	0800e42c 	.word	0x0800e42c

0800d8e4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	6039      	str	r1, [r7, #0]
 800d8ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d8f0:	683a      	ldr	r2, [r7, #0]
 800d8f2:	4904      	ldr	r1, [pc, #16]	; (800d904 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d8f4:	4804      	ldr	r0, [pc, #16]	; (800d908 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d8f6:	f7fc fb5d 	bl	8009fb4 <USBD_GetString>
  return USBD_StrDesc;
 800d8fa:	4b02      	ldr	r3, [pc, #8]	; (800d904 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3708      	adds	r7, #8
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}
 800d904:	2000b9c4 	.word	0x2000b9c4
 800d908:	0800e440 	.word	0x0800e440

0800d90c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	4603      	mov	r3, r0
 800d914:	6039      	str	r1, [r7, #0]
 800d916:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	221a      	movs	r2, #26
 800d91c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d91e:	f000 f855 	bl	800d9cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d922:	4b02      	ldr	r3, [pc, #8]	; (800d92c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d924:	4618      	mov	r0, r3
 800d926:	3708      	adds	r7, #8
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	2000012c 	.word	0x2000012c

0800d930 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b082      	sub	sp, #8
 800d934:	af00      	add	r7, sp, #0
 800d936:	4603      	mov	r3, r0
 800d938:	6039      	str	r1, [r7, #0]
 800d93a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d93c:	79fb      	ldrb	r3, [r7, #7]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d105      	bne.n	800d94e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d942:	683a      	ldr	r2, [r7, #0]
 800d944:	4907      	ldr	r1, [pc, #28]	; (800d964 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d946:	4808      	ldr	r0, [pc, #32]	; (800d968 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d948:	f7fc fb34 	bl	8009fb4 <USBD_GetString>
 800d94c:	e004      	b.n	800d958 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d94e:	683a      	ldr	r2, [r7, #0]
 800d950:	4904      	ldr	r1, [pc, #16]	; (800d964 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d952:	4805      	ldr	r0, [pc, #20]	; (800d968 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d954:	f7fc fb2e 	bl	8009fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d958:	4b02      	ldr	r3, [pc, #8]	; (800d964 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3708      	adds	r7, #8
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	2000b9c4 	.word	0x2000b9c4
 800d968:	0800e454 	.word	0x0800e454

0800d96c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b082      	sub	sp, #8
 800d970:	af00      	add	r7, sp, #0
 800d972:	4603      	mov	r3, r0
 800d974:	6039      	str	r1, [r7, #0]
 800d976:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d978:	79fb      	ldrb	r3, [r7, #7]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d105      	bne.n	800d98a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d97e:	683a      	ldr	r2, [r7, #0]
 800d980:	4907      	ldr	r1, [pc, #28]	; (800d9a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d982:	4808      	ldr	r0, [pc, #32]	; (800d9a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d984:	f7fc fb16 	bl	8009fb4 <USBD_GetString>
 800d988:	e004      	b.n	800d994 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d98a:	683a      	ldr	r2, [r7, #0]
 800d98c:	4904      	ldr	r1, [pc, #16]	; (800d9a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d98e:	4805      	ldr	r0, [pc, #20]	; (800d9a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d990:	f7fc fb10 	bl	8009fb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d994:	4b02      	ldr	r3, [pc, #8]	; (800d9a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d996:	4618      	mov	r0, r3
 800d998:	3708      	adds	r7, #8
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	2000b9c4 	.word	0x2000b9c4
 800d9a4:	0800e464 	.word	0x0800e464

0800d9a8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	6039      	str	r1, [r7, #0]
 800d9b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	220c      	movs	r2, #12
 800d9b8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800d9ba:	4b03      	ldr	r3, [pc, #12]	; (800d9c8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	370c      	adds	r7, #12
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr
 800d9c8:	2000011c 	.word	0x2000011c

0800d9cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b084      	sub	sp, #16
 800d9d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d9d2:	4b0f      	ldr	r3, [pc, #60]	; (800da10 <Get_SerialNum+0x44>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d9d8:	4b0e      	ldr	r3, [pc, #56]	; (800da14 <Get_SerialNum+0x48>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d9de:	4b0e      	ldr	r3, [pc, #56]	; (800da18 <Get_SerialNum+0x4c>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d9e4:	68fa      	ldr	r2, [r7, #12]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	4413      	add	r3, r2
 800d9ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d009      	beq.n	800da06 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d9f2:	2208      	movs	r2, #8
 800d9f4:	4909      	ldr	r1, [pc, #36]	; (800da1c <Get_SerialNum+0x50>)
 800d9f6:	68f8      	ldr	r0, [r7, #12]
 800d9f8:	f000 f814 	bl	800da24 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d9fc:	2204      	movs	r2, #4
 800d9fe:	4908      	ldr	r1, [pc, #32]	; (800da20 <Get_SerialNum+0x54>)
 800da00:	68b8      	ldr	r0, [r7, #8]
 800da02:	f000 f80f 	bl	800da24 <IntToUnicode>
  }
}
 800da06:	bf00      	nop
 800da08:	3710      	adds	r7, #16
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bd80      	pop	{r7, pc}
 800da0e:	bf00      	nop
 800da10:	1fff7590 	.word	0x1fff7590
 800da14:	1fff7594 	.word	0x1fff7594
 800da18:	1fff7598 	.word	0x1fff7598
 800da1c:	2000012e 	.word	0x2000012e
 800da20:	2000013e 	.word	0x2000013e

0800da24 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800da24:	b480      	push	{r7}
 800da26:	b087      	sub	sp, #28
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	60b9      	str	r1, [r7, #8]
 800da2e:	4613      	mov	r3, r2
 800da30:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800da32:	2300      	movs	r3, #0
 800da34:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800da36:	2300      	movs	r3, #0
 800da38:	75fb      	strb	r3, [r7, #23]
 800da3a:	e027      	b.n	800da8c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	0f1b      	lsrs	r3, r3, #28
 800da40:	2b09      	cmp	r3, #9
 800da42:	d80b      	bhi.n	800da5c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	0f1b      	lsrs	r3, r3, #28
 800da48:	b2da      	uxtb	r2, r3
 800da4a:	7dfb      	ldrb	r3, [r7, #23]
 800da4c:	005b      	lsls	r3, r3, #1
 800da4e:	4619      	mov	r1, r3
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	440b      	add	r3, r1
 800da54:	3230      	adds	r2, #48	; 0x30
 800da56:	b2d2      	uxtb	r2, r2
 800da58:	701a      	strb	r2, [r3, #0]
 800da5a:	e00a      	b.n	800da72 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	0f1b      	lsrs	r3, r3, #28
 800da60:	b2da      	uxtb	r2, r3
 800da62:	7dfb      	ldrb	r3, [r7, #23]
 800da64:	005b      	lsls	r3, r3, #1
 800da66:	4619      	mov	r1, r3
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	440b      	add	r3, r1
 800da6c:	3237      	adds	r2, #55	; 0x37
 800da6e:	b2d2      	uxtb	r2, r2
 800da70:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	011b      	lsls	r3, r3, #4
 800da76:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800da78:	7dfb      	ldrb	r3, [r7, #23]
 800da7a:	005b      	lsls	r3, r3, #1
 800da7c:	3301      	adds	r3, #1
 800da7e:	68ba      	ldr	r2, [r7, #8]
 800da80:	4413      	add	r3, r2
 800da82:	2200      	movs	r2, #0
 800da84:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800da86:	7dfb      	ldrb	r3, [r7, #23]
 800da88:	3301      	adds	r3, #1
 800da8a:	75fb      	strb	r3, [r7, #23]
 800da8c:	7dfa      	ldrb	r2, [r7, #23]
 800da8e:	79fb      	ldrb	r3, [r7, #7]
 800da90:	429a      	cmp	r2, r3
 800da92:	d3d3      	bcc.n	800da3c <IntToUnicode+0x18>
  }
}
 800da94:	bf00      	nop
 800da96:	bf00      	nop
 800da98:	371c      	adds	r7, #28
 800da9a:	46bd      	mov	sp, r7
 800da9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa0:	4770      	bx	lr
	...

0800daa4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b0ac      	sub	sp, #176	; 0xb0
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800daac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800dab0:	2200      	movs	r2, #0
 800dab2:	601a      	str	r2, [r3, #0]
 800dab4:	605a      	str	r2, [r3, #4]
 800dab6:	609a      	str	r2, [r3, #8]
 800dab8:	60da      	str	r2, [r3, #12]
 800daba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800dabc:	f107 0314 	add.w	r3, r7, #20
 800dac0:	2288      	movs	r2, #136	; 0x88
 800dac2:	2100      	movs	r1, #0
 800dac4:	4618      	mov	r0, r3
 800dac6:	f000 fc2f 	bl	800e328 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dad2:	f040 8085 	bne.w	800dbe0 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800dad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dada:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800dadc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800dae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800dae4:	2301      	movs	r3, #1
 800dae6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800dae8:	2301      	movs	r3, #1
 800daea:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800daec:	2318      	movs	r3, #24
 800daee:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800daf0:	2307      	movs	r3, #7
 800daf2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800daf4:	2302      	movs	r3, #2
 800daf6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800daf8:	2302      	movs	r3, #2
 800dafa:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800dafc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800db00:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800db02:	f107 0314 	add.w	r3, r7, #20
 800db06:	4618      	mov	r0, r3
 800db08:	f7f7 fc82 	bl	8005410 <HAL_RCCEx_PeriphCLKConfig>
 800db0c:	4603      	mov	r3, r0
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d001      	beq.n	800db16 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 800db12:	f7f4 f861 	bl	8001bd8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800db16:	4b34      	ldr	r3, [pc, #208]	; (800dbe8 <HAL_PCD_MspInit+0x144>)
 800db18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db1a:	4a33      	ldr	r2, [pc, #204]	; (800dbe8 <HAL_PCD_MspInit+0x144>)
 800db1c:	f043 0301 	orr.w	r3, r3, #1
 800db20:	64d3      	str	r3, [r2, #76]	; 0x4c
 800db22:	4b31      	ldr	r3, [pc, #196]	; (800dbe8 <HAL_PCD_MspInit+0x144>)
 800db24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db26:	f003 0301 	and.w	r3, r3, #1
 800db2a:	613b      	str	r3, [r7, #16]
 800db2c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800db2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800db32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800db36:	2300      	movs	r3, #0
 800db38:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db3c:	2300      	movs	r3, #0
 800db3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800db42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800db46:	4619      	mov	r1, r3
 800db48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800db4c:	f7f5 f87a 	bl	8002c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800db50:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800db54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800db58:	2302      	movs	r3, #2
 800db5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800db5e:	2300      	movs	r3, #0
 800db60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db64:	2303      	movs	r3, #3
 800db66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800db6a:	230a      	movs	r3, #10
 800db6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800db70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800db74:	4619      	mov	r1, r3
 800db76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800db7a:	f7f5 f863 	bl	8002c44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800db7e:	4b1a      	ldr	r3, [pc, #104]	; (800dbe8 <HAL_PCD_MspInit+0x144>)
 800db80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db82:	4a19      	ldr	r2, [pc, #100]	; (800dbe8 <HAL_PCD_MspInit+0x144>)
 800db84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800db88:	64d3      	str	r3, [r2, #76]	; 0x4c
 800db8a:	4b17      	ldr	r3, [pc, #92]	; (800dbe8 <HAL_PCD_MspInit+0x144>)
 800db8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800db92:	60fb      	str	r3, [r7, #12]
 800db94:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800db96:	4b14      	ldr	r3, [pc, #80]	; (800dbe8 <HAL_PCD_MspInit+0x144>)
 800db98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800db9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d114      	bne.n	800dbcc <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800dba2:	4b11      	ldr	r3, [pc, #68]	; (800dbe8 <HAL_PCD_MspInit+0x144>)
 800dba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dba6:	4a10      	ldr	r2, [pc, #64]	; (800dbe8 <HAL_PCD_MspInit+0x144>)
 800dba8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800dbac:	6593      	str	r3, [r2, #88]	; 0x58
 800dbae:	4b0e      	ldr	r3, [pc, #56]	; (800dbe8 <HAL_PCD_MspInit+0x144>)
 800dbb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dbb6:	60bb      	str	r3, [r7, #8]
 800dbb8:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800dbba:	f7f6 fd5d 	bl	8004678 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800dbbe:	4b0a      	ldr	r3, [pc, #40]	; (800dbe8 <HAL_PCD_MspInit+0x144>)
 800dbc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbc2:	4a09      	ldr	r2, [pc, #36]	; (800dbe8 <HAL_PCD_MspInit+0x144>)
 800dbc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dbc8:	6593      	str	r3, [r2, #88]	; 0x58
 800dbca:	e001      	b.n	800dbd0 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800dbcc:	f7f6 fd54 	bl	8004678 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800dbd0:	2200      	movs	r2, #0
 800dbd2:	2105      	movs	r1, #5
 800dbd4:	2043      	movs	r0, #67	; 0x43
 800dbd6:	f7f4 fd38 	bl	800264a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dbda:	2043      	movs	r0, #67	; 0x43
 800dbdc:	f7f4 fd51 	bl	8002682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dbe0:	bf00      	nop
 800dbe2:	37b0      	adds	r7, #176	; 0xb0
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}
 800dbe8:	40021000 	.word	0x40021000

0800dbec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbec:	b580      	push	{r7, lr}
 800dbee:	b082      	sub	sp, #8
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800dc00:	4619      	mov	r1, r3
 800dc02:	4610      	mov	r0, r2
 800dc04:	f7fb f881 	bl	8008d0a <USBD_LL_SetupStage>
}
 800dc08:	bf00      	nop
 800dc0a:	3708      	adds	r7, #8
 800dc0c:	46bd      	mov	sp, r7
 800dc0e:	bd80      	pop	{r7, pc}

0800dc10 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc10:	b580      	push	{r7, lr}
 800dc12:	b082      	sub	sp, #8
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	460b      	mov	r3, r1
 800dc1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dc22:	78fa      	ldrb	r2, [r7, #3]
 800dc24:	6879      	ldr	r1, [r7, #4]
 800dc26:	4613      	mov	r3, r2
 800dc28:	00db      	lsls	r3, r3, #3
 800dc2a:	4413      	add	r3, r2
 800dc2c:	009b      	lsls	r3, r3, #2
 800dc2e:	440b      	add	r3, r1
 800dc30:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800dc34:	681a      	ldr	r2, [r3, #0]
 800dc36:	78fb      	ldrb	r3, [r7, #3]
 800dc38:	4619      	mov	r1, r3
 800dc3a:	f7fb f8bb 	bl	8008db4 <USBD_LL_DataOutStage>
}
 800dc3e:	bf00      	nop
 800dc40:	3708      	adds	r7, #8
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}

0800dc46 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc46:	b580      	push	{r7, lr}
 800dc48:	b082      	sub	sp, #8
 800dc4a:	af00      	add	r7, sp, #0
 800dc4c:	6078      	str	r0, [r7, #4]
 800dc4e:	460b      	mov	r3, r1
 800dc50:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800dc58:	78fa      	ldrb	r2, [r7, #3]
 800dc5a:	6879      	ldr	r1, [r7, #4]
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	00db      	lsls	r3, r3, #3
 800dc60:	4413      	add	r3, r2
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	440b      	add	r3, r1
 800dc66:	3348      	adds	r3, #72	; 0x48
 800dc68:	681a      	ldr	r2, [r3, #0]
 800dc6a:	78fb      	ldrb	r3, [r7, #3]
 800dc6c:	4619      	mov	r1, r3
 800dc6e:	f7fb f954 	bl	8008f1a <USBD_LL_DataInStage>
}
 800dc72:	bf00      	nop
 800dc74:	3708      	adds	r7, #8
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}

0800dc7a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc7a:	b580      	push	{r7, lr}
 800dc7c:	b082      	sub	sp, #8
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7fb fa8e 	bl	80091aa <USBD_LL_SOF>
}
 800dc8e:	bf00      	nop
 800dc90:	3708      	adds	r7, #8
 800dc92:	46bd      	mov	sp, r7
 800dc94:	bd80      	pop	{r7, pc}

0800dc96 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc96:	b580      	push	{r7, lr}
 800dc98:	b084      	sub	sp, #16
 800dc9a:	af00      	add	r7, sp, #0
 800dc9c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dc9e:	2301      	movs	r3, #1
 800dca0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	691b      	ldr	r3, [r3, #16]
 800dca6:	2b02      	cmp	r3, #2
 800dca8:	d001      	beq.n	800dcae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dcaa:	f7f3 ff95 	bl	8001bd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dcb4:	7bfa      	ldrb	r2, [r7, #15]
 800dcb6:	4611      	mov	r1, r2
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7fb fa32 	bl	8009122 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f7fb f9da 	bl	800907e <USBD_LL_Reset>
}
 800dcca:	bf00      	nop
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
	...

0800dcd4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b082      	sub	sp, #8
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	6812      	ldr	r2, [r2, #0]
 800dcea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dcee:	f043 0301 	orr.w	r3, r3, #1
 800dcf2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7fb fa21 	bl	8009142 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6a1b      	ldr	r3, [r3, #32]
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d005      	beq.n	800dd14 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd08:	4b04      	ldr	r3, [pc, #16]	; (800dd1c <HAL_PCD_SuspendCallback+0x48>)
 800dd0a:	691b      	ldr	r3, [r3, #16]
 800dd0c:	4a03      	ldr	r2, [pc, #12]	; (800dd1c <HAL_PCD_SuspendCallback+0x48>)
 800dd0e:	f043 0306 	orr.w	r3, r3, #6
 800dd12:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dd14:	bf00      	nop
 800dd16:	3708      	adds	r7, #8
 800dd18:	46bd      	mov	sp, r7
 800dd1a:	bd80      	pop	{r7, pc}
 800dd1c:	e000ed00 	.word	0xe000ed00

0800dd20 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd20:	b580      	push	{r7, lr}
 800dd22:	b082      	sub	sp, #8
 800dd24:	af00      	add	r7, sp, #0
 800dd26:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	6812      	ldr	r2, [r2, #0]
 800dd36:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dd3a:	f023 0301 	bic.w	r3, r3, #1
 800dd3e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	6a1b      	ldr	r3, [r3, #32]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d007      	beq.n	800dd58 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd48:	4b08      	ldr	r3, [pc, #32]	; (800dd6c <HAL_PCD_ResumeCallback+0x4c>)
 800dd4a:	691b      	ldr	r3, [r3, #16]
 800dd4c:	4a07      	ldr	r2, [pc, #28]	; (800dd6c <HAL_PCD_ResumeCallback+0x4c>)
 800dd4e:	f023 0306 	bic.w	r3, r3, #6
 800dd52:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800dd54:	f000 fae2 	bl	800e31c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fb fa0b 	bl	800917a <USBD_LL_Resume>
}
 800dd64:	bf00      	nop
 800dd66:	3708      	adds	r7, #8
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}
 800dd6c:	e000ed00 	.word	0xe000ed00

0800dd70 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b082      	sub	sp, #8
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	460b      	mov	r3, r1
 800dd7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dd82:	78fa      	ldrb	r2, [r7, #3]
 800dd84:	4611      	mov	r1, r2
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7fb fa61 	bl	800924e <USBD_LL_IsoOUTIncomplete>
}
 800dd8c:	bf00      	nop
 800dd8e:	3708      	adds	r7, #8
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b082      	sub	sp, #8
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
 800dd9c:	460b      	mov	r3, r1
 800dd9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dda6:	78fa      	ldrb	r2, [r7, #3]
 800dda8:	4611      	mov	r1, r2
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f7fb fa1d 	bl	80091ea <USBD_LL_IsoINIncomplete>
}
 800ddb0:	bf00      	nop
 800ddb2:	3708      	adds	r7, #8
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	bd80      	pop	{r7, pc}

0800ddb8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b082      	sub	sp, #8
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ddc6:	4618      	mov	r0, r3
 800ddc8:	f7fb fa73 	bl	80092b2 <USBD_LL_DevConnected>
}
 800ddcc:	bf00      	nop
 800ddce:	3708      	adds	r7, #8
 800ddd0:	46bd      	mov	sp, r7
 800ddd2:	bd80      	pop	{r7, pc}

0800ddd4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b082      	sub	sp, #8
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800dde2:	4618      	mov	r0, r3
 800dde4:	f7fb fa70 	bl	80092c8 <USBD_LL_DevDisconnected>
}
 800dde8:	bf00      	nop
 800ddea:	3708      	adds	r7, #8
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd80      	pop	{r7, pc}

0800ddf0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b082      	sub	sp, #8
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d13c      	bne.n	800de7a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800de00:	4a20      	ldr	r2, [pc, #128]	; (800de84 <USBD_LL_Init+0x94>)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	4a1e      	ldr	r2, [pc, #120]	; (800de84 <USBD_LL_Init+0x94>)
 800de0c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800de10:	4b1c      	ldr	r3, [pc, #112]	; (800de84 <USBD_LL_Init+0x94>)
 800de12:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800de16:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800de18:	4b1a      	ldr	r3, [pc, #104]	; (800de84 <USBD_LL_Init+0x94>)
 800de1a:	2206      	movs	r2, #6
 800de1c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800de1e:	4b19      	ldr	r3, [pc, #100]	; (800de84 <USBD_LL_Init+0x94>)
 800de20:	2202      	movs	r2, #2
 800de22:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800de24:	4b17      	ldr	r3, [pc, #92]	; (800de84 <USBD_LL_Init+0x94>)
 800de26:	2202      	movs	r2, #2
 800de28:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800de2a:	4b16      	ldr	r3, [pc, #88]	; (800de84 <USBD_LL_Init+0x94>)
 800de2c:	2200      	movs	r2, #0
 800de2e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800de30:	4b14      	ldr	r3, [pc, #80]	; (800de84 <USBD_LL_Init+0x94>)
 800de32:	2200      	movs	r2, #0
 800de34:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800de36:	4b13      	ldr	r3, [pc, #76]	; (800de84 <USBD_LL_Init+0x94>)
 800de38:	2200      	movs	r2, #0
 800de3a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800de3c:	4b11      	ldr	r3, [pc, #68]	; (800de84 <USBD_LL_Init+0x94>)
 800de3e:	2200      	movs	r2, #0
 800de40:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800de42:	4b10      	ldr	r3, [pc, #64]	; (800de84 <USBD_LL_Init+0x94>)
 800de44:	2200      	movs	r2, #0
 800de46:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800de48:	4b0e      	ldr	r3, [pc, #56]	; (800de84 <USBD_LL_Init+0x94>)
 800de4a:	2200      	movs	r2, #0
 800de4c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800de4e:	480d      	ldr	r0, [pc, #52]	; (800de84 <USBD_LL_Init+0x94>)
 800de50:	f7f5 fa0f 	bl	8003272 <HAL_PCD_Init>
 800de54:	4603      	mov	r3, r0
 800de56:	2b00      	cmp	r3, #0
 800de58:	d001      	beq.n	800de5e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800de5a:	f7f3 febd 	bl	8001bd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800de5e:	2180      	movs	r1, #128	; 0x80
 800de60:	4808      	ldr	r0, [pc, #32]	; (800de84 <USBD_LL_Init+0x94>)
 800de62:	f7f6 fb60 	bl	8004526 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800de66:	2240      	movs	r2, #64	; 0x40
 800de68:	2100      	movs	r1, #0
 800de6a:	4806      	ldr	r0, [pc, #24]	; (800de84 <USBD_LL_Init+0x94>)
 800de6c:	f7f6 fb14 	bl	8004498 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800de70:	2280      	movs	r2, #128	; 0x80
 800de72:	2101      	movs	r1, #1
 800de74:	4803      	ldr	r0, [pc, #12]	; (800de84 <USBD_LL_Init+0x94>)
 800de76:	f7f6 fb0f 	bl	8004498 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800de7a:	2300      	movs	r3, #0
}
 800de7c:	4618      	mov	r0, r3
 800de7e:	3708      	adds	r7, #8
 800de80:	46bd      	mov	sp, r7
 800de82:	bd80      	pop	{r7, pc}
 800de84:	2000bbc4 	.word	0x2000bbc4

0800de88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de90:	2300      	movs	r3, #0
 800de92:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de94:	2300      	movs	r3, #0
 800de96:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de9e:	4618      	mov	r0, r3
 800dea0:	f7f5 fb0b 	bl	80034ba <HAL_PCD_Start>
 800dea4:	4603      	mov	r3, r0
 800dea6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dea8:	7bbb      	ldrb	r3, [r7, #14]
 800deaa:	2b03      	cmp	r3, #3
 800deac:	d816      	bhi.n	800dedc <USBD_LL_Start+0x54>
 800deae:	a201      	add	r2, pc, #4	; (adr r2, 800deb4 <USBD_LL_Start+0x2c>)
 800deb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deb4:	0800dec5 	.word	0x0800dec5
 800deb8:	0800decb 	.word	0x0800decb
 800debc:	0800ded1 	.word	0x0800ded1
 800dec0:	0800ded7 	.word	0x0800ded7
    case HAL_OK :
      usb_status = USBD_OK;
 800dec4:	2300      	movs	r3, #0
 800dec6:	73fb      	strb	r3, [r7, #15]
    break;
 800dec8:	e00b      	b.n	800dee2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800deca:	2303      	movs	r3, #3
 800decc:	73fb      	strb	r3, [r7, #15]
    break;
 800dece:	e008      	b.n	800dee2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ded0:	2301      	movs	r3, #1
 800ded2:	73fb      	strb	r3, [r7, #15]
    break;
 800ded4:	e005      	b.n	800dee2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ded6:	2303      	movs	r3, #3
 800ded8:	73fb      	strb	r3, [r7, #15]
    break;
 800deda:	e002      	b.n	800dee2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800dedc:	2303      	movs	r3, #3
 800dede:	73fb      	strb	r3, [r7, #15]
    break;
 800dee0:	bf00      	nop
  }
  return usb_status;
 800dee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee4:	4618      	mov	r0, r3
 800dee6:	3710      	adds	r7, #16
 800dee8:	46bd      	mov	sp, r7
 800deea:	bd80      	pop	{r7, pc}

0800deec <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b084      	sub	sp, #16
 800def0:	af00      	add	r7, sp, #0
 800def2:	6078      	str	r0, [r7, #4]
 800def4:	4608      	mov	r0, r1
 800def6:	4611      	mov	r1, r2
 800def8:	461a      	mov	r2, r3
 800defa:	4603      	mov	r3, r0
 800defc:	70fb      	strb	r3, [r7, #3]
 800defe:	460b      	mov	r3, r1
 800df00:	70bb      	strb	r3, [r7, #2]
 800df02:	4613      	mov	r3, r2
 800df04:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df06:	2300      	movs	r3, #0
 800df08:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df0a:	2300      	movs	r3, #0
 800df0c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800df14:	78bb      	ldrb	r3, [r7, #2]
 800df16:	883a      	ldrh	r2, [r7, #0]
 800df18:	78f9      	ldrb	r1, [r7, #3]
 800df1a:	f7f5 ffb5 	bl	8003e88 <HAL_PCD_EP_Open>
 800df1e:	4603      	mov	r3, r0
 800df20:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800df22:	7bbb      	ldrb	r3, [r7, #14]
 800df24:	2b03      	cmp	r3, #3
 800df26:	d817      	bhi.n	800df58 <USBD_LL_OpenEP+0x6c>
 800df28:	a201      	add	r2, pc, #4	; (adr r2, 800df30 <USBD_LL_OpenEP+0x44>)
 800df2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df2e:	bf00      	nop
 800df30:	0800df41 	.word	0x0800df41
 800df34:	0800df47 	.word	0x0800df47
 800df38:	0800df4d 	.word	0x0800df4d
 800df3c:	0800df53 	.word	0x0800df53
    case HAL_OK :
      usb_status = USBD_OK;
 800df40:	2300      	movs	r3, #0
 800df42:	73fb      	strb	r3, [r7, #15]
    break;
 800df44:	e00b      	b.n	800df5e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800df46:	2303      	movs	r3, #3
 800df48:	73fb      	strb	r3, [r7, #15]
    break;
 800df4a:	e008      	b.n	800df5e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800df4c:	2301      	movs	r3, #1
 800df4e:	73fb      	strb	r3, [r7, #15]
    break;
 800df50:	e005      	b.n	800df5e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800df52:	2303      	movs	r3, #3
 800df54:	73fb      	strb	r3, [r7, #15]
    break;
 800df56:	e002      	b.n	800df5e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800df58:	2303      	movs	r3, #3
 800df5a:	73fb      	strb	r3, [r7, #15]
    break;
 800df5c:	bf00      	nop
  }
  return usb_status;
 800df5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df60:	4618      	mov	r0, r3
 800df62:	3710      	adds	r7, #16
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	460b      	mov	r3, r1
 800df72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df74:	2300      	movs	r3, #0
 800df76:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df78:	2300      	movs	r3, #0
 800df7a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df82:	78fa      	ldrb	r2, [r7, #3]
 800df84:	4611      	mov	r1, r2
 800df86:	4618      	mov	r0, r3
 800df88:	f7f5 ffe6 	bl	8003f58 <HAL_PCD_EP_Close>
 800df8c:	4603      	mov	r3, r0
 800df8e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800df90:	7bbb      	ldrb	r3, [r7, #14]
 800df92:	2b03      	cmp	r3, #3
 800df94:	d816      	bhi.n	800dfc4 <USBD_LL_CloseEP+0x5c>
 800df96:	a201      	add	r2, pc, #4	; (adr r2, 800df9c <USBD_LL_CloseEP+0x34>)
 800df98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df9c:	0800dfad 	.word	0x0800dfad
 800dfa0:	0800dfb3 	.word	0x0800dfb3
 800dfa4:	0800dfb9 	.word	0x0800dfb9
 800dfa8:	0800dfbf 	.word	0x0800dfbf
    case HAL_OK :
      usb_status = USBD_OK;
 800dfac:	2300      	movs	r3, #0
 800dfae:	73fb      	strb	r3, [r7, #15]
    break;
 800dfb0:	e00b      	b.n	800dfca <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dfb2:	2303      	movs	r3, #3
 800dfb4:	73fb      	strb	r3, [r7, #15]
    break;
 800dfb6:	e008      	b.n	800dfca <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dfb8:	2301      	movs	r3, #1
 800dfba:	73fb      	strb	r3, [r7, #15]
    break;
 800dfbc:	e005      	b.n	800dfca <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800dfbe:	2303      	movs	r3, #3
 800dfc0:	73fb      	strb	r3, [r7, #15]
    break;
 800dfc2:	e002      	b.n	800dfca <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800dfc4:	2303      	movs	r3, #3
 800dfc6:	73fb      	strb	r3, [r7, #15]
    break;
 800dfc8:	bf00      	nop
  }
  return usb_status;
 800dfca:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3710      	adds	r7, #16
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}

0800dfd4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfd4:	b580      	push	{r7, lr}
 800dfd6:	b084      	sub	sp, #16
 800dfd8:	af00      	add	r7, sp, #0
 800dfda:	6078      	str	r0, [r7, #4]
 800dfdc:	460b      	mov	r3, r1
 800dfde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfe0:	2300      	movs	r3, #0
 800dfe2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfe4:	2300      	movs	r3, #0
 800dfe6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dfee:	78fa      	ldrb	r2, [r7, #3]
 800dff0:	4611      	mov	r1, r2
 800dff2:	4618      	mov	r0, r3
 800dff4:	f7f6 f85d 	bl	80040b2 <HAL_PCD_EP_SetStall>
 800dff8:	4603      	mov	r3, r0
 800dffa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800dffc:	7bbb      	ldrb	r3, [r7, #14]
 800dffe:	2b03      	cmp	r3, #3
 800e000:	d816      	bhi.n	800e030 <USBD_LL_StallEP+0x5c>
 800e002:	a201      	add	r2, pc, #4	; (adr r2, 800e008 <USBD_LL_StallEP+0x34>)
 800e004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e008:	0800e019 	.word	0x0800e019
 800e00c:	0800e01f 	.word	0x0800e01f
 800e010:	0800e025 	.word	0x0800e025
 800e014:	0800e02b 	.word	0x0800e02b
    case HAL_OK :
      usb_status = USBD_OK;
 800e018:	2300      	movs	r3, #0
 800e01a:	73fb      	strb	r3, [r7, #15]
    break;
 800e01c:	e00b      	b.n	800e036 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e01e:	2303      	movs	r3, #3
 800e020:	73fb      	strb	r3, [r7, #15]
    break;
 800e022:	e008      	b.n	800e036 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e024:	2301      	movs	r3, #1
 800e026:	73fb      	strb	r3, [r7, #15]
    break;
 800e028:	e005      	b.n	800e036 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e02a:	2303      	movs	r3, #3
 800e02c:	73fb      	strb	r3, [r7, #15]
    break;
 800e02e:	e002      	b.n	800e036 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e030:	2303      	movs	r3, #3
 800e032:	73fb      	strb	r3, [r7, #15]
    break;
 800e034:	bf00      	nop
  }
  return usb_status;
 800e036:	7bfb      	ldrb	r3, [r7, #15]
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3710      	adds	r7, #16
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	460b      	mov	r3, r1
 800e04a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e04c:	2300      	movs	r3, #0
 800e04e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e050:	2300      	movs	r3, #0
 800e052:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e05a:	78fa      	ldrb	r2, [r7, #3]
 800e05c:	4611      	mov	r1, r2
 800e05e:	4618      	mov	r0, r3
 800e060:	f7f6 f889 	bl	8004176 <HAL_PCD_EP_ClrStall>
 800e064:	4603      	mov	r3, r0
 800e066:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e068:	7bbb      	ldrb	r3, [r7, #14]
 800e06a:	2b03      	cmp	r3, #3
 800e06c:	d816      	bhi.n	800e09c <USBD_LL_ClearStallEP+0x5c>
 800e06e:	a201      	add	r2, pc, #4	; (adr r2, 800e074 <USBD_LL_ClearStallEP+0x34>)
 800e070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e074:	0800e085 	.word	0x0800e085
 800e078:	0800e08b 	.word	0x0800e08b
 800e07c:	0800e091 	.word	0x0800e091
 800e080:	0800e097 	.word	0x0800e097
    case HAL_OK :
      usb_status = USBD_OK;
 800e084:	2300      	movs	r3, #0
 800e086:	73fb      	strb	r3, [r7, #15]
    break;
 800e088:	e00b      	b.n	800e0a2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e08a:	2303      	movs	r3, #3
 800e08c:	73fb      	strb	r3, [r7, #15]
    break;
 800e08e:	e008      	b.n	800e0a2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e090:	2301      	movs	r3, #1
 800e092:	73fb      	strb	r3, [r7, #15]
    break;
 800e094:	e005      	b.n	800e0a2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e096:	2303      	movs	r3, #3
 800e098:	73fb      	strb	r3, [r7, #15]
    break;
 800e09a:	e002      	b.n	800e0a2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800e09c:	2303      	movs	r3, #3
 800e09e:	73fb      	strb	r3, [r7, #15]
    break;
 800e0a0:	bf00      	nop
  }
  return usb_status;
 800e0a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	3710      	adds	r7, #16
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b085      	sub	sp, #20
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e0be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e0c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	da0b      	bge.n	800e0e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e0c8:	78fb      	ldrb	r3, [r7, #3]
 800e0ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0ce:	68f9      	ldr	r1, [r7, #12]
 800e0d0:	4613      	mov	r3, r2
 800e0d2:	00db      	lsls	r3, r3, #3
 800e0d4:	4413      	add	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	440b      	add	r3, r1
 800e0da:	333e      	adds	r3, #62	; 0x3e
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	e00b      	b.n	800e0f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e0e0:	78fb      	ldrb	r3, [r7, #3]
 800e0e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e0e6:	68f9      	ldr	r1, [r7, #12]
 800e0e8:	4613      	mov	r3, r2
 800e0ea:	00db      	lsls	r3, r3, #3
 800e0ec:	4413      	add	r3, r2
 800e0ee:	009b      	lsls	r3, r3, #2
 800e0f0:	440b      	add	r3, r1
 800e0f2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e0f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3714      	adds	r7, #20
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr

0800e104 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
 800e10c:	460b      	mov	r3, r1
 800e10e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e110:	2300      	movs	r3, #0
 800e112:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e114:	2300      	movs	r3, #0
 800e116:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e11e:	78fa      	ldrb	r2, [r7, #3]
 800e120:	4611      	mov	r1, r2
 800e122:	4618      	mov	r0, r3
 800e124:	f7f5 fe8b 	bl	8003e3e <HAL_PCD_SetAddress>
 800e128:	4603      	mov	r3, r0
 800e12a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800e12c:	7bbb      	ldrb	r3, [r7, #14]
 800e12e:	2b03      	cmp	r3, #3
 800e130:	d816      	bhi.n	800e160 <USBD_LL_SetUSBAddress+0x5c>
 800e132:	a201      	add	r2, pc, #4	; (adr r2, 800e138 <USBD_LL_SetUSBAddress+0x34>)
 800e134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e138:	0800e149 	.word	0x0800e149
 800e13c:	0800e14f 	.word	0x0800e14f
 800e140:	0800e155 	.word	0x0800e155
 800e144:	0800e15b 	.word	0x0800e15b
    case HAL_OK :
      usb_status = USBD_OK;
 800e148:	2300      	movs	r3, #0
 800e14a:	73fb      	strb	r3, [r7, #15]
    break;
 800e14c:	e00b      	b.n	800e166 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e14e:	2303      	movs	r3, #3
 800e150:	73fb      	strb	r3, [r7, #15]
    break;
 800e152:	e008      	b.n	800e166 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e154:	2301      	movs	r3, #1
 800e156:	73fb      	strb	r3, [r7, #15]
    break;
 800e158:	e005      	b.n	800e166 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e15a:	2303      	movs	r3, #3
 800e15c:	73fb      	strb	r3, [r7, #15]
    break;
 800e15e:	e002      	b.n	800e166 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800e160:	2303      	movs	r3, #3
 800e162:	73fb      	strb	r3, [r7, #15]
    break;
 800e164:	bf00      	nop
  }
  return usb_status;
 800e166:	7bfb      	ldrb	r3, [r7, #15]
}
 800e168:	4618      	mov	r0, r3
 800e16a:	3710      	adds	r7, #16
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}

0800e170 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b086      	sub	sp, #24
 800e174:	af00      	add	r7, sp, #0
 800e176:	60f8      	str	r0, [r7, #12]
 800e178:	607a      	str	r2, [r7, #4]
 800e17a:	603b      	str	r3, [r7, #0]
 800e17c:	460b      	mov	r3, r1
 800e17e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e180:	2300      	movs	r3, #0
 800e182:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e184:	2300      	movs	r3, #0
 800e186:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e18e:	7af9      	ldrb	r1, [r7, #11]
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	687a      	ldr	r2, [r7, #4]
 800e194:	f7f5 ff5c 	bl	8004050 <HAL_PCD_EP_Transmit>
 800e198:	4603      	mov	r3, r0
 800e19a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e19c:	7dbb      	ldrb	r3, [r7, #22]
 800e19e:	2b03      	cmp	r3, #3
 800e1a0:	d816      	bhi.n	800e1d0 <USBD_LL_Transmit+0x60>
 800e1a2:	a201      	add	r2, pc, #4	; (adr r2, 800e1a8 <USBD_LL_Transmit+0x38>)
 800e1a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1a8:	0800e1b9 	.word	0x0800e1b9
 800e1ac:	0800e1bf 	.word	0x0800e1bf
 800e1b0:	0800e1c5 	.word	0x0800e1c5
 800e1b4:	0800e1cb 	.word	0x0800e1cb
    case HAL_OK :
      usb_status = USBD_OK;
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	75fb      	strb	r3, [r7, #23]
    break;
 800e1bc:	e00b      	b.n	800e1d6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e1be:	2303      	movs	r3, #3
 800e1c0:	75fb      	strb	r3, [r7, #23]
    break;
 800e1c2:	e008      	b.n	800e1d6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	75fb      	strb	r3, [r7, #23]
    break;
 800e1c8:	e005      	b.n	800e1d6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e1ca:	2303      	movs	r3, #3
 800e1cc:	75fb      	strb	r3, [r7, #23]
    break;
 800e1ce:	e002      	b.n	800e1d6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800e1d0:	2303      	movs	r3, #3
 800e1d2:	75fb      	strb	r3, [r7, #23]
    break;
 800e1d4:	bf00      	nop
  }
  return usb_status;
 800e1d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1d8:	4618      	mov	r0, r3
 800e1da:	3718      	adds	r7, #24
 800e1dc:	46bd      	mov	sp, r7
 800e1de:	bd80      	pop	{r7, pc}

0800e1e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b086      	sub	sp, #24
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	60f8      	str	r0, [r7, #12]
 800e1e8:	607a      	str	r2, [r7, #4]
 800e1ea:	603b      	str	r3, [r7, #0]
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e1fe:	7af9      	ldrb	r1, [r7, #11]
 800e200:	683b      	ldr	r3, [r7, #0]
 800e202:	687a      	ldr	r2, [r7, #4]
 800e204:	f7f5 fef2 	bl	8003fec <HAL_PCD_EP_Receive>
 800e208:	4603      	mov	r3, r0
 800e20a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800e20c:	7dbb      	ldrb	r3, [r7, #22]
 800e20e:	2b03      	cmp	r3, #3
 800e210:	d816      	bhi.n	800e240 <USBD_LL_PrepareReceive+0x60>
 800e212:	a201      	add	r2, pc, #4	; (adr r2, 800e218 <USBD_LL_PrepareReceive+0x38>)
 800e214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e218:	0800e229 	.word	0x0800e229
 800e21c:	0800e22f 	.word	0x0800e22f
 800e220:	0800e235 	.word	0x0800e235
 800e224:	0800e23b 	.word	0x0800e23b
    case HAL_OK :
      usb_status = USBD_OK;
 800e228:	2300      	movs	r3, #0
 800e22a:	75fb      	strb	r3, [r7, #23]
    break;
 800e22c:	e00b      	b.n	800e246 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e22e:	2303      	movs	r3, #3
 800e230:	75fb      	strb	r3, [r7, #23]
    break;
 800e232:	e008      	b.n	800e246 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e234:	2301      	movs	r3, #1
 800e236:	75fb      	strb	r3, [r7, #23]
    break;
 800e238:	e005      	b.n	800e246 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e23a:	2303      	movs	r3, #3
 800e23c:	75fb      	strb	r3, [r7, #23]
    break;
 800e23e:	e002      	b.n	800e246 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800e240:	2303      	movs	r3, #3
 800e242:	75fb      	strb	r3, [r7, #23]
    break;
 800e244:	bf00      	nop
  }
  return usb_status;
 800e246:	7dfb      	ldrb	r3, [r7, #23]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3718      	adds	r7, #24
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	460b      	mov	r3, r1
 800e25a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e25c:	78fb      	ldrb	r3, [r7, #3]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d002      	beq.n	800e268 <HAL_PCDEx_LPM_Callback+0x18>
 800e262:	2b01      	cmp	r3, #1
 800e264:	d01f      	beq.n	800e2a6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e266:	e03b      	b.n	800e2e0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6a1b      	ldr	r3, [r3, #32]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d007      	beq.n	800e280 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e270:	f000 f854 	bl	800e31c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e274:	4b1c      	ldr	r3, [pc, #112]	; (800e2e8 <HAL_PCDEx_LPM_Callback+0x98>)
 800e276:	691b      	ldr	r3, [r3, #16]
 800e278:	4a1b      	ldr	r2, [pc, #108]	; (800e2e8 <HAL_PCDEx_LPM_Callback+0x98>)
 800e27a:	f023 0306 	bic.w	r3, r3, #6
 800e27e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	687a      	ldr	r2, [r7, #4]
 800e28c:	6812      	ldr	r2, [r2, #0]
 800e28e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e292:	f023 0301 	bic.w	r3, r3, #1
 800e296:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7fa ff6b 	bl	800917a <USBD_LL_Resume>
    break;
 800e2a4:	e01c      	b.n	800e2e0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	687a      	ldr	r2, [r7, #4]
 800e2b2:	6812      	ldr	r2, [r2, #0]
 800e2b4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e2b8:	f043 0301 	orr.w	r3, r3, #1
 800e2bc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7fa ff3c 	bl	8009142 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	6a1b      	ldr	r3, [r3, #32]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d005      	beq.n	800e2de <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e2d2:	4b05      	ldr	r3, [pc, #20]	; (800e2e8 <HAL_PCDEx_LPM_Callback+0x98>)
 800e2d4:	691b      	ldr	r3, [r3, #16]
 800e2d6:	4a04      	ldr	r2, [pc, #16]	; (800e2e8 <HAL_PCDEx_LPM_Callback+0x98>)
 800e2d8:	f043 0306 	orr.w	r3, r3, #6
 800e2dc:	6113      	str	r3, [r2, #16]
    break;
 800e2de:	bf00      	nop
}
 800e2e0:	bf00      	nop
 800e2e2:	3708      	adds	r7, #8
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd80      	pop	{r7, pc}
 800e2e8:	e000ed00 	.word	0xe000ed00

0800e2ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b083      	sub	sp, #12
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
	Number of sub-packets in the audio transfer buffer. You can modify this value but always make sure
    that it is an even number and higher than 3
	AUDIO_OUT_PACKET_NUM = 80
  */
  /* USER CODE END 4 */
  return mem;
 800e2f4:	4b03      	ldr	r3, [pc, #12]	; (800e304 <USBD_static_malloc+0x18>)
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	370c      	adds	r7, #12
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e300:	4770      	bx	lr
 800e302:	bf00      	nop
 800e304:	2000c0d0 	.word	0x2000c0d0

0800e308 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e308:	b480      	push	{r7}
 800e30a:	b083      	sub	sp, #12
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]

}
 800e310:	bf00      	nop
 800e312:	370c      	adds	r7, #12
 800e314:	46bd      	mov	sp, r7
 800e316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e31a:	4770      	bx	lr

0800e31c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e320:	f7f3 f828 	bl	8001374 <SystemClock_Config>
}
 800e324:	bf00      	nop
 800e326:	bd80      	pop	{r7, pc}

0800e328 <memset>:
 800e328:	4402      	add	r2, r0
 800e32a:	4603      	mov	r3, r0
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d100      	bne.n	800e332 <memset+0xa>
 800e330:	4770      	bx	lr
 800e332:	f803 1b01 	strb.w	r1, [r3], #1
 800e336:	e7f9      	b.n	800e32c <memset+0x4>

0800e338 <__libc_init_array>:
 800e338:	b570      	push	{r4, r5, r6, lr}
 800e33a:	4d0d      	ldr	r5, [pc, #52]	; (800e370 <__libc_init_array+0x38>)
 800e33c:	4c0d      	ldr	r4, [pc, #52]	; (800e374 <__libc_init_array+0x3c>)
 800e33e:	1b64      	subs	r4, r4, r5
 800e340:	10a4      	asrs	r4, r4, #2
 800e342:	2600      	movs	r6, #0
 800e344:	42a6      	cmp	r6, r4
 800e346:	d109      	bne.n	800e35c <__libc_init_array+0x24>
 800e348:	4d0b      	ldr	r5, [pc, #44]	; (800e378 <__libc_init_array+0x40>)
 800e34a:	4c0c      	ldr	r4, [pc, #48]	; (800e37c <__libc_init_array+0x44>)
 800e34c:	f000 f826 	bl	800e39c <_init>
 800e350:	1b64      	subs	r4, r4, r5
 800e352:	10a4      	asrs	r4, r4, #2
 800e354:	2600      	movs	r6, #0
 800e356:	42a6      	cmp	r6, r4
 800e358:	d105      	bne.n	800e366 <__libc_init_array+0x2e>
 800e35a:	bd70      	pop	{r4, r5, r6, pc}
 800e35c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e360:	4798      	blx	r3
 800e362:	3601      	adds	r6, #1
 800e364:	e7ee      	b.n	800e344 <__libc_init_array+0xc>
 800e366:	f855 3b04 	ldr.w	r3, [r5], #4
 800e36a:	4798      	blx	r3
 800e36c:	3601      	adds	r6, #1
 800e36e:	e7f2      	b.n	800e356 <__libc_init_array+0x1e>
 800e370:	0800e588 	.word	0x0800e588
 800e374:	0800e588 	.word	0x0800e588
 800e378:	0800e588 	.word	0x0800e588
 800e37c:	0800e58c 	.word	0x0800e58c

0800e380 <memcpy>:
 800e380:	440a      	add	r2, r1
 800e382:	4291      	cmp	r1, r2
 800e384:	f100 33ff 	add.w	r3, r0, #4294967295
 800e388:	d100      	bne.n	800e38c <memcpy+0xc>
 800e38a:	4770      	bx	lr
 800e38c:	b510      	push	{r4, lr}
 800e38e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e392:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e396:	4291      	cmp	r1, r2
 800e398:	d1f9      	bne.n	800e38e <memcpy+0xe>
 800e39a:	bd10      	pop	{r4, pc}

0800e39c <_init>:
 800e39c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e39e:	bf00      	nop
 800e3a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3a2:	bc08      	pop	{r3}
 800e3a4:	469e      	mov	lr, r3
 800e3a6:	4770      	bx	lr

0800e3a8 <_fini>:
 800e3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3aa:	bf00      	nop
 800e3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3ae:	bc08      	pop	{r3}
 800e3b0:	469e      	mov	lr, r3
 800e3b2:	4770      	bx	lr
