
Practica7_Fase4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000146f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  08014888  08014888  00024888  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014ddc  08014ddc  000307fc  2**0
                  CONTENTS
  4 .ARM          00000008  08014ddc  08014ddc  00024ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014de4  08014de4  000307fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014de4  08014de4  00024de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014dec  08014dec  00024dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007fc  20000000  08014df0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000e14c  200007fc  080155ec  000307fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000e948  080155ec  0003e948  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000307fc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003082c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003222d  00000000  00000000  0003086f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000068c6  00000000  00000000  00062a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d38  00000000  00000000  00069368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000230d  00000000  00000000  0006c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000a048  00000000  00000000  0006e3ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034b95  00000000  00000000  000783f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00121b91  00000000  00000000  000acf8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000d5f4  00000000  00000000  001ceb1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001dc110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200007fc 	.word	0x200007fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801486c 	.word	0x0801486c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000800 	.word	0x20000800
 80001cc:	0801486c 	.word	0x0801486c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
    // Pulse clock
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 1);
 8000f48:	2201      	movs	r2, #1
 8000f4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f52:	f003 fdc1 	bl	8004ad8 <HAL_GPIO_WritePin>

	osDelay(1);
 8000f56:	2001      	movs	r0, #1
 8000f58:	f00a ffbc 	bl	800bed4 <osDelay>
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f66:	f003 fdb7 	bl	8004ad8 <HAL_GPIO_WritePin>
    osDelay(1);
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f00a ffb2 	bl	800bed4 <osDelay>
}
 8000f70:	bf00      	nop
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <lcd_reset>:

void lcd_reset(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2104      	movs	r1, #4
 8000f7c:	4820      	ldr	r0, [pc, #128]	; (8001000 <lcd_reset+0x8c>)
 8000f7e:	f003 fdab 	bl	8004ad8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2110      	movs	r1, #16
 8000f86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f8a:	f003 fda5 	bl	8004ad8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2108      	movs	r1, #8
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f003 fd9f 	bl	8004ad8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	2110      	movs	r1, #16
 8000f9e:	4818      	ldr	r0, [pc, #96]	; (8001000 <lcd_reset+0x8c>)
 8000fa0:	f003 fd9a 	bl	8004ad8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	2102      	movs	r1, #2
 8000fa8:	4815      	ldr	r0, [pc, #84]	; (8001000 <lcd_reset+0x8c>)
 8000faa:	f003 fd95 	bl	8004ad8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f003 fd8e 	bl	8004ad8 <HAL_GPIO_WritePin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	2108      	movs	r1, #8
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc4:	f003 fd88 	bl	8004ad8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000fc8:	2201      	movs	r2, #1
 8000fca:	2110      	movs	r1, #16
 8000fcc:	480c      	ldr	r0, [pc, #48]	; (8001000 <lcd_reset+0x8c>)
 8000fce:	f003 fd83 	bl	8004ad8 <HAL_GPIO_WritePin>
    lcd_clock();
 8000fd2:	f7ff ffb7 	bl	8000f44 <lcd_clock>
    lcd_clock();
 8000fd6:	f7ff ffb5 	bl	8000f44 <lcd_clock>
    lcd_clock();
 8000fda:	f7ff ffb3 	bl	8000f44 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe6:	f003 fd77 	bl	8004ad8 <HAL_GPIO_WritePin>
    lcd_clock();
 8000fea:	f7ff ffab 	bl	8000f44 <lcd_clock>

    HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff6:	f003 fd6f 	bl	8004ad8 <HAL_GPIO_WritePin>
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	48000400 	.word	0x48000400

08001004 <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	460a      	mov	r2, r1
 800100e:	71fb      	strb	r3, [r7, #7]
 8001010:	4613      	mov	r3, r2
 8001012:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	091b      	lsrs	r3, r3, #4
 8001018:	b2db      	uxtb	r3, r3
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	2b00      	cmp	r3, #0
 8001020:	d006      	beq.n	8001030 <lcd_write+0x2c>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8001022:	2201      	movs	r2, #1
 8001024:	2108      	movs	r1, #8
 8001026:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102a:	f003 fd55 	bl	8004ad8 <HAL_GPIO_WritePin>
 800102e:	e005      	b.n	800103c <lcd_write+0x38>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2108      	movs	r1, #8
 8001034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001038:	f003 fd4e 	bl	8004ad8 <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	b2db      	uxtb	r3, r3
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b00      	cmp	r3, #0
 8001048:	d005      	beq.n	8001056 <lcd_write+0x52>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 800104a:	2201      	movs	r2, #1
 800104c:	2110      	movs	r1, #16
 800104e:	4847      	ldr	r0, [pc, #284]	; (800116c <lcd_write+0x168>)
 8001050:	f003 fd42 	bl	8004ad8 <HAL_GPIO_WritePin>
 8001054:	e004      	b.n	8001060 <lcd_write+0x5c>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2110      	movs	r1, #16
 800105a:	4844      	ldr	r0, [pc, #272]	; (800116c <lcd_write+0x168>)
 800105c:	f003 fd3c 	bl	8004ad8 <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	099b      	lsrs	r3, r3, #6
 8001064:	b2db      	uxtb	r3, r3
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b00      	cmp	r3, #0
 800106c:	d005      	beq.n	800107a <lcd_write+0x76>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 800106e:	2201      	movs	r2, #1
 8001070:	2102      	movs	r1, #2
 8001072:	483e      	ldr	r0, [pc, #248]	; (800116c <lcd_write+0x168>)
 8001074:	f003 fd30 	bl	8004ad8 <HAL_GPIO_WritePin>
 8001078:	e004      	b.n	8001084 <lcd_write+0x80>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2102      	movs	r1, #2
 800107e:	483b      	ldr	r0, [pc, #236]	; (800116c <lcd_write+0x168>)
 8001080:	f003 fd2a 	bl	8004ad8 <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	09db      	lsrs	r3, r3, #7
 8001088:	b2db      	uxtb	r3, r3
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d006      	beq.n	80010a0 <lcd_write+0x9c>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 8001092:	2201      	movs	r2, #1
 8001094:	2110      	movs	r1, #16
 8001096:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109a:	f003 fd1d 	bl	8004ad8 <HAL_GPIO_WritePin>
 800109e:	e005      	b.n	80010ac <lcd_write+0xa8>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2110      	movs	r1, #16
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f003 fd16 	bl	8004ad8 <HAL_GPIO_WritePin>

    if(rs)
 80010ac:	79bb      	ldrb	r3, [r7, #6]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d005      	beq.n	80010be <lcd_write+0xba>
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 1);
 80010b2:	2201      	movs	r2, #1
 80010b4:	2104      	movs	r1, #4
 80010b6:	482d      	ldr	r0, [pc, #180]	; (800116c <lcd_write+0x168>)
 80010b8:	f003 fd0e 	bl	8004ad8 <HAL_GPIO_WritePin>
 80010bc:	e004      	b.n	80010c8 <lcd_write+0xc4>
    else
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 80010be:	2200      	movs	r2, #0
 80010c0:	2104      	movs	r1, #4
 80010c2:	482a      	ldr	r0, [pc, #168]	; (800116c <lcd_write+0x168>)
 80010c4:	f003 fd08 	bl	8004ad8 <HAL_GPIO_WritePin>

    lcd_clock();
 80010c8:	f7ff ff3c 	bl	8000f44 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d006      	beq.n	80010e4 <lcd_write+0xe0>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 80010d6:	2201      	movs	r2, #1
 80010d8:	2108      	movs	r1, #8
 80010da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010de:	f003 fcfb 	bl	8004ad8 <HAL_GPIO_WritePin>
 80010e2:	e005      	b.n	80010f0 <lcd_write+0xec>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2108      	movs	r1, #8
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f003 fcf4 	bl	8004ad8 <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	085b      	lsrs	r3, r3, #1
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <lcd_write+0x106>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 80010fe:	2201      	movs	r2, #1
 8001100:	2110      	movs	r1, #16
 8001102:	481a      	ldr	r0, [pc, #104]	; (800116c <lcd_write+0x168>)
 8001104:	f003 fce8 	bl	8004ad8 <HAL_GPIO_WritePin>
 8001108:	e004      	b.n	8001114 <lcd_write+0x110>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2110      	movs	r1, #16
 800110e:	4817      	ldr	r0, [pc, #92]	; (800116c <lcd_write+0x168>)
 8001110:	f003 fce2 	bl	8004ad8 <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	089b      	lsrs	r3, r3, #2
 8001118:	b2db      	uxtb	r3, r3
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <lcd_write+0x12a>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 8001122:	2201      	movs	r2, #1
 8001124:	2102      	movs	r1, #2
 8001126:	4811      	ldr	r0, [pc, #68]	; (800116c <lcd_write+0x168>)
 8001128:	f003 fcd6 	bl	8004ad8 <HAL_GPIO_WritePin>
 800112c:	e004      	b.n	8001138 <lcd_write+0x134>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2102      	movs	r1, #2
 8001132:	480e      	ldr	r0, [pc, #56]	; (800116c <lcd_write+0x168>)
 8001134:	f003 fcd0 	bl	8004ad8 <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	08db      	lsrs	r3, r3, #3
 800113c:	b2db      	uxtb	r3, r3
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d006      	beq.n	8001154 <lcd_write+0x150>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 8001146:	2201      	movs	r2, #1
 8001148:	2110      	movs	r1, #16
 800114a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114e:	f003 fcc3 	bl	8004ad8 <HAL_GPIO_WritePin>
 8001152:	e005      	b.n	8001160 <lcd_write+0x15c>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8001154:	2200      	movs	r2, #0
 8001156:	2110      	movs	r1, #16
 8001158:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800115c:	f003 fcbc 	bl	8004ad8 <HAL_GPIO_WritePin>

    lcd_clock();
 8001160:	f7ff fef0 	bl	8000f44 <lcd_clock>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	48000400 	.word	0x48000400

08001170 <lcd_clear>:

void lcd_clear(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 8001174:	2100      	movs	r1, #0
 8001176:	2001      	movs	r0, #1
 8001178:	f7ff ff44 	bl	8001004 <lcd_write>
    _lcd_char = 0;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <lcd_clear+0x1c>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 8001182:	4b03      	ldr	r3, [pc, #12]	; (8001190 <lcd_clear+0x20>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000820 	.word	0x20000820
 8001190:	20000821 	.word	0x20000821

08001194 <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	460b      	mov	r3, r1
 80011a0:	71bb      	strb	r3, [r7, #6]
 80011a2:	4613      	mov	r3, r2
 80011a4:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	b25a      	sxtb	r2, r3
 80011b2:	79bb      	ldrb	r3, [r7, #6]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	b25b      	sxtb	r3, r3
 80011b8:	4313      	orrs	r3, r2
 80011ba:	b25a      	sxtb	r2, r3
 80011bc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	b25b      	sxtb	r3, r3
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2100      	movs	r1, #0
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff1b 	bl	8001004 <lcd_write>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 80011e0:	79fb      	ldrb	r3, [r7, #7]
 80011e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff0a 	bl	8001004 <lcd_write>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <lcd_print>:
{
	lcd_write(0b01000000 | address, 0);
}

void lcd_print(char string[])
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 8001200:	2300      	movs	r3, #0
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e055      	b.n	80012b2 <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 8001206:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <lcd_print+0xd0>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d01c      	beq.n	8001248 <lcd_print+0x50>
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	4413      	add	r3, r2
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	2b0a      	cmp	r3, #10
 8001218:	d116      	bne.n	8001248 <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 800121a:	4b2c      	ldr	r3, [pc, #176]	; (80012cc <lcd_print+0xd4>)
 800121c:	781a      	ldrb	r2, [r3, #0]
 800121e:	4b2a      	ldr	r3, [pc, #168]	; (80012c8 <lcd_print+0xd0>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	429a      	cmp	r2, r3
 8001224:	d242      	bcs.n	80012ac <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 8001226:	4b2a      	ldr	r3, [pc, #168]	; (80012d0 <lcd_print+0xd8>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	4b28      	ldr	r3, [pc, #160]	; (80012cc <lcd_print+0xd4>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	1c59      	adds	r1, r3, #1
 8001230:	b2c8      	uxtb	r0, r1
 8001232:	4926      	ldr	r1, [pc, #152]	; (80012cc <lcd_print+0xd4>)
 8001234:	7008      	strb	r0, [r1, #0]
 8001236:	4413      	add	r3, r2
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ffcb 	bl	80011d6 <lcd_display_address>
                _lcd_char = 0;
 8001240:	4b24      	ldr	r3, [pc, #144]	; (80012d4 <lcd_print+0xdc>)
 8001242:	2200      	movs	r2, #0
 8001244:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 8001246:	e031      	b.n	80012ac <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <lcd_print+0xe0>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d01b      	beq.n	8001288 <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 8001250:	4b20      	ldr	r3, [pc, #128]	; (80012d4 <lcd_print+0xdc>)
 8001252:	781a      	ldrb	r2, [r3, #0]
 8001254:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <lcd_print+0xe0>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	429a      	cmp	r2, r3
 800125a:	d115      	bne.n	8001288 <lcd_print+0x90>
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <lcd_print+0xd4>)
 800125e:	781a      	ldrb	r2, [r3, #0]
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <lcd_print+0xd0>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d20f      	bcs.n	8001288 <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <lcd_print+0xd8>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b17      	ldr	r3, [pc, #92]	; (80012cc <lcd_print+0xd4>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	1c59      	adds	r1, r3, #1
 8001272:	b2c8      	uxtb	r0, r1
 8001274:	4915      	ldr	r1, [pc, #84]	; (80012cc <lcd_print+0xd4>)
 8001276:	7008      	strb	r0, [r1, #0]
 8001278:	4413      	add	r3, r2
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ffaa 	bl	80011d6 <lcd_display_address>
                    _lcd_char = 0;
 8001282:	4b14      	ldr	r3, [pc, #80]	; (80012d4 <lcd_print+0xdc>)
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2101      	movs	r1, #1
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff feb6 	bl	8001004 <lcd_write>
            if(lcd_chars) _lcd_char++;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <lcd_print+0xe0>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <lcd_print+0xb4>
 80012a0:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <lcd_print+0xdc>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	3301      	adds	r3, #1
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	4b0a      	ldr	r3, [pc, #40]	; (80012d4 <lcd_print+0xdc>)
 80012aa:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	3301      	adds	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	4413      	add	r3, r2
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1a3      	bne.n	8001206 <lcd_print+0xe>
        }
    }
}
 80012be:	bf00      	nop
 80012c0:	bf00      	nop
 80012c2:	3710      	adds	r7, #16
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000819 	.word	0x20000819
 80012cc:	20000821 	.word	0x20000821
 80012d0:	2000081c 	.word	0x2000081c
 80012d4:	20000820 	.word	0x20000820
 80012d8:	20000818 	.word	0x20000818

080012dc <writeIntegerToLCD>:

void writeIntegerToLCD(int integer)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
	//	Break down the original number into the thousands, hundreds, tens,
	//	and ones places and then immediately write that value to the LCD
	unsigned char thousands = integer / 1000;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a32      	ldr	r2, [pc, #200]	; (80013b0 <writeIntegerToLCD+0xd4>)
 80012e8:	fb82 1203 	smull	r1, r2, r2, r3
 80012ec:	1192      	asrs	r2, r2, #6
 80012ee:	17db      	asrs	r3, r3, #31
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	73fb      	strb	r3, [r7, #15]
	lcd_write( thousands + 0x30,1);
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	3330      	adds	r3, #48	; 0x30
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	2101      	movs	r1, #1
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff fe81 	bl	8001004 <lcd_write>

	unsigned char hundreds = (integer - thousands*1000) / 100;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
 8001304:	4a2b      	ldr	r2, [pc, #172]	; (80013b4 <writeIntegerToLCD+0xd8>)
 8001306:	fb03 f202 	mul.w	r2, r3, r2
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a2a      	ldr	r2, [pc, #168]	; (80013b8 <writeIntegerToLCD+0xdc>)
 8001310:	fb82 1203 	smull	r1, r2, r2, r3
 8001314:	1152      	asrs	r2, r2, #5
 8001316:	17db      	asrs	r3, r3, #31
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	73bb      	strb	r3, [r7, #14]
	lcd_write( hundreds + 0x30,1);
 800131c:	7bbb      	ldrb	r3, [r7, #14]
 800131e:	3330      	adds	r3, #48	; 0x30
 8001320:	b2db      	uxtb	r3, r3
 8001322:	2101      	movs	r1, #1
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fe6d 	bl	8001004 <lcd_write>

	unsigned char tens = (integer - thousands*1000 - hundreds*100 ) / 10;
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	4a21      	ldr	r2, [pc, #132]	; (80013b4 <writeIntegerToLCD+0xd8>)
 800132e:	fb03 f202 	mul.w	r2, r3, r2
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	441a      	add	r2, r3
 8001336:	7bbb      	ldrb	r3, [r7, #14]
 8001338:	f06f 0163 	mvn.w	r1, #99	; 0x63
 800133c:	fb01 f303 	mul.w	r3, r1, r3
 8001340:	4413      	add	r3, r2
 8001342:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <writeIntegerToLCD+0xe0>)
 8001344:	fb82 1203 	smull	r1, r2, r2, r3
 8001348:	1092      	asrs	r2, r2, #2
 800134a:	17db      	asrs	r3, r3, #31
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	737b      	strb	r3, [r7, #13]
	lcd_write( tens + 0x30,1);
 8001350:	7b7b      	ldrb	r3, [r7, #13]
 8001352:	3330      	adds	r3, #48	; 0x30
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2101      	movs	r1, #1
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fe53 	bl	8001004 <lcd_write>

	unsigned char ones = (integer - thousands*1000 - hundreds*100 - tens*10);
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	461a      	mov	r2, r3
 8001362:	0052      	lsls	r2, r2, #1
 8001364:	4413      	add	r3, r2
 8001366:	00db      	lsls	r3, r3, #3
 8001368:	b2da      	uxtb	r2, r3
 800136a:	7bbb      	ldrb	r3, [r7, #14]
 800136c:	4619      	mov	r1, r3
 800136e:	0089      	lsls	r1, r1, #2
 8001370:	4419      	add	r1, r3
 8001372:	00c9      	lsls	r1, r1, #3
 8001374:	1acb      	subs	r3, r1, r3
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	b2db      	uxtb	r3, r3
 800137a:	4413      	add	r3, r2
 800137c:	b2da      	uxtb	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	4413      	add	r3, r2
 8001384:	b2da      	uxtb	r2, r3
 8001386:	7b7b      	ldrb	r3, [r7, #13]
 8001388:	4619      	mov	r1, r3
 800138a:	0149      	lsls	r1, r1, #5
 800138c:	1ac9      	subs	r1, r1, r3
 800138e:	0089      	lsls	r1, r1, #2
 8001390:	1acb      	subs	r3, r1, r3
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4413      	add	r3, r2
 8001398:	733b      	strb	r3, [r7, #12]
	lcd_write( ones + 0x30,1);
 800139a:	7b3b      	ldrb	r3, [r7, #12]
 800139c:	3330      	adds	r3, #48	; 0x30
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2101      	movs	r1, #1
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff fe2e 	bl	8001004 <lcd_write>
}
 80013a8:	bf00      	nop
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	10624dd3 	.word	0x10624dd3
 80013b4:	fffffc18 	.word	0xfffffc18
 80013b8:	51eb851f 	.word	0x51eb851f
 80013bc:	66666667 	.word	0x66666667

080013c0 <moveToXY>:

void moveToXY(unsigned char row, unsigned char column)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	460a      	mov	r2, r1
 80013ca:	71fb      	strb	r3, [r7, #7]
 80013cc:	4613      	mov	r3, r2
 80013ce:	71bb      	strb	r3, [r7, #6]
	//	Determine the new position
	int position = (row * 16) + column;
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	011a      	lsls	r2, r3, #4
 80013d4:	79bb      	ldrb	r3, [r7, #6]
 80013d6:	4413      	add	r3, r2
 80013d8:	60fb      	str	r3, [r7, #12]

	//	Send the correct commands to the command register of the LCD
	if(position < 16)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	2b0f      	cmp	r3, #15
 80013de:	dc0a      	bgt.n	80013f6 <moveToXY+0x36>
		lcd_write( 0x80 | position,0);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	b25b      	sxtb	r3, r3
 80013e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	2100      	movs	r1, #0
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fe08 	bl	8001004 <lcd_write>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
	else if(position >= 41 && position < 60)
		lcd_write( 0x80 | (position % 40 + 0x14),0);
	else if(position >= 20 && position < 40)
		lcd_write( 0x80 | (position % 60 + 0x54),0);
}
 80013f4:	e059      	b.n	80014aa <moveToXY+0xea>
	else if(position >= 16 && position < 32)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	dd17      	ble.n	800142c <moveToXY+0x6c>
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2b1f      	cmp	r3, #31
 8001400:	dc14      	bgt.n	800142c <moveToXY+0x6c>
		lcd_write( 0x80 | (position % 16 + 0x40),0);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	425a      	negs	r2, r3
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	f002 020f 	and.w	r2, r2, #15
 800140e:	bf58      	it	pl
 8001410:	4253      	negpl	r3, r2
 8001412:	b2db      	uxtb	r3, r3
 8001414:	3340      	adds	r3, #64	; 0x40
 8001416:	b2db      	uxtb	r3, r3
 8001418:	b25b      	sxtb	r3, r3
 800141a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800141e:	b25b      	sxtb	r3, r3
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2100      	movs	r1, #0
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fded 	bl	8001004 <lcd_write>
 800142a:	e03e      	b.n	80014aa <moveToXY+0xea>
	else if(position >= 41 && position < 60)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	2b28      	cmp	r3, #40	; 0x28
 8001430:	dd1b      	ble.n	800146a <moveToXY+0xaa>
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	2b3b      	cmp	r3, #59	; 0x3b
 8001436:	dc18      	bgt.n	800146a <moveToXY+0xaa>
		lcd_write( 0x80 | (position % 40 + 0x14),0);
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	4b1e      	ldr	r3, [pc, #120]	; (80014b4 <moveToXY+0xf4>)
 800143c:	fb83 1302 	smull	r1, r3, r3, r2
 8001440:	1119      	asrs	r1, r3, #4
 8001442:	17d3      	asrs	r3, r2, #31
 8001444:	1ac9      	subs	r1, r1, r3
 8001446:	460b      	mov	r3, r1
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	1ad1      	subs	r1, r2, r3
 8001450:	b2cb      	uxtb	r3, r1
 8001452:	3314      	adds	r3, #20
 8001454:	b2db      	uxtb	r3, r3
 8001456:	b25b      	sxtb	r3, r3
 8001458:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800145c:	b25b      	sxtb	r3, r3
 800145e:	b2db      	uxtb	r3, r3
 8001460:	2100      	movs	r1, #0
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fdce 	bl	8001004 <lcd_write>
 8001468:	e01f      	b.n	80014aa <moveToXY+0xea>
	else if(position >= 20 && position < 40)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2b13      	cmp	r3, #19
 800146e:	dd1c      	ble.n	80014aa <moveToXY+0xea>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b27      	cmp	r3, #39	; 0x27
 8001474:	dc19      	bgt.n	80014aa <moveToXY+0xea>
		lcd_write( 0x80 | (position % 60 + 0x54),0);
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <moveToXY+0xf8>)
 800147a:	fb83 1302 	smull	r1, r3, r3, r2
 800147e:	4413      	add	r3, r2
 8001480:	1159      	asrs	r1, r3, #5
 8001482:	17d3      	asrs	r3, r2, #31
 8001484:	1ac9      	subs	r1, r1, r3
 8001486:	460b      	mov	r3, r1
 8001488:	011b      	lsls	r3, r3, #4
 800148a:	1a5b      	subs	r3, r3, r1
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	1ad1      	subs	r1, r2, r3
 8001490:	b2cb      	uxtb	r3, r1
 8001492:	3354      	adds	r3, #84	; 0x54
 8001494:	b2db      	uxtb	r3, r3
 8001496:	b25b      	sxtb	r3, r3
 8001498:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800149c:	b25b      	sxtb	r3, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fdae 	bl	8001004 <lcd_write>
}
 80014a8:	e7ff      	b.n	80014aa <moveToXY+0xea>
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	66666667 	.word	0x66666667
 80014b8:	88888889 	.word	0x88888889

080014bc <getButton>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t getButton(uint16_t sample) {
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	80fb      	strh	r3, [r7, #6]
	// uint8_t getButton(uint32_t sample)
	// uint8_t getButton(uint16_t sample)
	//da errores si las declaramos de esta forma
	uint8_t res = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	73fb      	strb	r3, [r7, #15]
	if (sample == 4095) {
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80014d0:	4293      	cmp	r3, r2
 80014d2:	d102      	bne.n	80014da <getButton+0x1e>
		res = 0;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]
 80014d8:	e037      	b.n	800154a <getButton+0x8e>
	} else if (sample >= 700 && sample <= 730) {
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80014e0:	d307      	bcc.n	80014f2 <getButton+0x36>
 80014e2:	88fb      	ldrh	r3, [r7, #6]
 80014e4:	f240 22da 	movw	r2, #730	; 0x2da
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d802      	bhi.n	80014f2 <getButton+0x36>
		// boton up
		res = 2;
 80014ec:	2302      	movs	r3, #2
 80014ee:	73fb      	strb	r3, [r7, #15]
 80014f0:	e02b      	b.n	800154a <getButton+0x8e>
	} else if (sample >= 1618 && sample <= 1660) {
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	f240 6251 	movw	r2, #1617	; 0x651
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d907      	bls.n	800150c <getButton+0x50>
 80014fc:	88fb      	ldrh	r3, [r7, #6]
 80014fe:	f240 627c 	movw	r2, #1660	; 0x67c
 8001502:	4293      	cmp	r3, r2
 8001504:	d802      	bhi.n	800150c <getButton+0x50>
		//boton down
		res = 3;
 8001506:	2303      	movs	r3, #3
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e01e      	b.n	800154a <getButton+0x8e>
	} else if (sample >= 2380 && sample <= 2450) {
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	f640 124b 	movw	r2, #2379	; 0x94b
 8001512:	4293      	cmp	r3, r2
 8001514:	d907      	bls.n	8001526 <getButton+0x6a>
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	f640 1292 	movw	r2, #2450	; 0x992
 800151c:	4293      	cmp	r3, r2
 800151e:	d802      	bhi.n	8001526 <getButton+0x6a>
		// boton left
		res = 4;
 8001520:	2304      	movs	r3, #4
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e011      	b.n	800154a <getButton+0x8e>
	} else if (sample >= 3350 && sample <= 3380) {
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	f640 5215 	movw	r2, #3349	; 0xd15
 800152c:	4293      	cmp	r3, r2
 800152e:	d907      	bls.n	8001540 <getButton+0x84>
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	f640 5234 	movw	r2, #3380	; 0xd34
 8001536:	4293      	cmp	r3, r2
 8001538:	d802      	bhi.n	8001540 <getButton+0x84>
		// select 3366
		res = 5;
 800153a:	2305      	movs	r3, #5
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	e004      	b.n	800154a <getButton+0x8e>
	} else if (sample >= 0 && sample <= 100) {
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	2b64      	cmp	r3, #100	; 0x64
 8001544:	d801      	bhi.n	800154a <getButton+0x8e>
		//boton right 000
		res = 1;
 8001546:	2301      	movs	r3, #1
 8001548:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800155c:	f001 fa7f 	bl	8002a5e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001560:	f000 f878 	bl	8001654 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001564:	f000 f8d8 	bl	8001718 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001568:	f000 fb1e 	bl	8001ba8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 800156c:	f000 f9aa 	bl	80018c4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 8001570:	f000 f9e0 	bl	8001934 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 8001574:	f000 fa1e 	bl	80019b4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001578:	f000 fa42 	bl	8001a00 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 800157c:	f000 fab4 	bl	8001ae8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001580:	f000 fae2 	bl	8001b48 <MX_USART3_UART_Init>
  MX_DAC1_Init();
 8001584:	f000 f96c 	bl	8001860 <MX_DAC1_Init>
  MX_TIM7_Init();
 8001588:	f000 fa78 	bl	8001a7c <MX_TIM7_Init>
  MX_ADC1_Init();
 800158c:	f000 f8f2 	bl	8001774 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8001590:	2110      	movs	r1, #16
 8001592:	481d      	ldr	r0, [pc, #116]	; (8001608 <main+0xb0>)
 8001594:	f002 fe51 	bl	800423a <HAL_DAC_Start>
	HAL_TIM_Base_Start_IT(&htim7);
 8001598:	481c      	ldr	r0, [pc, #112]	; (800160c <main+0xb4>)
 800159a:	f006 fa9f 	bl	8007adc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800159e:	f00a fbbd 	bl	800bd1c <osKernelInitialize>
	/* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of AccesoLCD */
  AccesoLCDHandle = osSemaphoreNew(1, 1, &AccesoLCD_attributes);
 80015a2:	4a1b      	ldr	r2, [pc, #108]	; (8001610 <main+0xb8>)
 80015a4:	2101      	movs	r1, #1
 80015a6:	2001      	movs	r0, #1
 80015a8:	f00a fcaf 	bl	800bf0a <osSemaphoreNew>
 80015ac:	4603      	mov	r3, r0
 80015ae:	4a19      	ldr	r2, [pc, #100]	; (8001614 <main+0xbc>)
 80015b0:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80015b2:	4a19      	ldr	r2, [pc, #100]	; (8001618 <main+0xc0>)
 80015b4:	2100      	movs	r1, #0
 80015b6:	4819      	ldr	r0, [pc, #100]	; (800161c <main+0xc4>)
 80015b8:	f00a fbfa 	bl	800bdb0 <osThreadNew>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a18      	ldr	r2, [pc, #96]	; (8001620 <main+0xc8>)
 80015c0:	6013      	str	r3, [r2, #0]

  /* creation of led_verde */
  led_verdeHandle = osThreadNew(Start_led_verde, NULL, &led_verde_attributes);
 80015c2:	4a18      	ldr	r2, [pc, #96]	; (8001624 <main+0xcc>)
 80015c4:	2100      	movs	r1, #0
 80015c6:	4818      	ldr	r0, [pc, #96]	; (8001628 <main+0xd0>)
 80015c8:	f00a fbf2 	bl	800bdb0 <osThreadNew>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4a17      	ldr	r2, [pc, #92]	; (800162c <main+0xd4>)
 80015d0:	6013      	str	r3, [r2, #0]

  /* creation of led_amarillo */
  led_amarilloHandle = osThreadNew(Start_led_amarillo, NULL, &led_amarillo_attributes);
 80015d2:	4a17      	ldr	r2, [pc, #92]	; (8001630 <main+0xd8>)
 80015d4:	2100      	movs	r1, #0
 80015d6:	4817      	ldr	r0, [pc, #92]	; (8001634 <main+0xdc>)
 80015d8:	f00a fbea 	bl	800bdb0 <osThreadNew>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a16      	ldr	r2, [pc, #88]	; (8001638 <main+0xe0>)
 80015e0:	6013      	str	r3, [r2, #0]

  /* creation of LCDTareaA */
  LCDTareaAHandle = osThreadNew(StartLCD_TareaA, NULL, &LCDTareaA_attributes);
 80015e2:	4a16      	ldr	r2, [pc, #88]	; (800163c <main+0xe4>)
 80015e4:	2100      	movs	r1, #0
 80015e6:	4816      	ldr	r0, [pc, #88]	; (8001640 <main+0xe8>)
 80015e8:	f00a fbe2 	bl	800bdb0 <osThreadNew>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4a15      	ldr	r2, [pc, #84]	; (8001644 <main+0xec>)
 80015f0:	6013      	str	r3, [r2, #0]

  /* creation of LCDtareaB */
  LCDtareaBHandle = osThreadNew(StartTareaB, NULL, &LCDtareaB_attributes);
 80015f2:	4a15      	ldr	r2, [pc, #84]	; (8001648 <main+0xf0>)
 80015f4:	2100      	movs	r1, #0
 80015f6:	4815      	ldr	r0, [pc, #84]	; (800164c <main+0xf4>)
 80015f8:	f00a fbda 	bl	800bdb0 <osThreadNew>
 80015fc:	4603      	mov	r3, r0
 80015fe:	4a14      	ldr	r2, [pc, #80]	; (8001650 <main+0xf8>)
 8001600:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001602:	f00a fbaf 	bl	800bd64 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8001606:	e7fe      	b.n	8001606 <main+0xae>
 8001608:	20000888 	.word	0x20000888
 800160c:	200009d0 	.word	0x200009d0
 8001610:	080149f8 	.word	0x080149f8
 8001614:	20000b40 	.word	0x20000b40
 8001618:	08014944 	.word	0x08014944
 800161c:	08001e99 	.word	0x08001e99
 8001620:	20000b2c 	.word	0x20000b2c
 8001624:	08014968 	.word	0x08014968
 8001628:	08001ead 	.word	0x08001ead
 800162c:	20000b30 	.word	0x20000b30
 8001630:	0801498c 	.word	0x0801498c
 8001634:	08001ee5 	.word	0x08001ee5
 8001638:	20000b34 	.word	0x20000b34
 800163c:	080149b0 	.word	0x080149b0
 8001640:	08001f21 	.word	0x08001f21
 8001644:	20000b38 	.word	0x20000b38
 8001648:	080149d4 	.word	0x080149d4
 800164c:	08002021 	.word	0x08002021
 8001650:	20000b3c 	.word	0x20000b3c

08001654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b096      	sub	sp, #88	; 0x58
 8001658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	2244      	movs	r2, #68	; 0x44
 8001660:	2100      	movs	r1, #0
 8001662:	4618      	mov	r0, r3
 8001664:	f00e fcbb 	bl	800ffde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001668:	463b      	mov	r3, r7
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001676:	f44f 7000 	mov.w	r0, #512	; 0x200
 800167a:	f004 fd47 	bl	800610c <HAL_PWREx_ControlVoltageScaling>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001684:	f000 fd20 	bl	80020c8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001688:	f004 fd22 	bl	80060d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800168c:	4b21      	ldr	r3, [pc, #132]	; (8001714 <SystemClock_Config+0xc0>)
 800168e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001692:	4a20      	ldr	r2, [pc, #128]	; (8001714 <SystemClock_Config+0xc0>)
 8001694:	f023 0318 	bic.w	r3, r3, #24
 8001698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800169c:	2314      	movs	r3, #20
 800169e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80016a0:	2301      	movs	r3, #1
 80016a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016a4:	2301      	movs	r3, #1
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016ac:	2360      	movs	r3, #96	; 0x60
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b0:	2302      	movs	r3, #2
 80016b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016b4:	2301      	movs	r3, #1
 80016b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016bc:	2328      	movs	r3, #40	; 0x28
 80016be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016c0:	2307      	movs	r3, #7
 80016c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4618      	mov	r0, r3
 80016d2:	f004 fe3d 	bl	8006350 <HAL_RCC_OscConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80016dc:	f000 fcf4 	bl	80020c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e0:	230f      	movs	r3, #15
 80016e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e4:	2303      	movs	r3, #3
 80016e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016f4:	463b      	mov	r3, r7
 80016f6:	2104      	movs	r1, #4
 80016f8:	4618      	mov	r0, r3
 80016fa:	f005 fa05 	bl	8006b08 <HAL_RCC_ClockConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001704:	f000 fce0 	bl	80020c8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001708:	f005 ff0c 	bl	8007524 <HAL_RCCEx_EnableMSIPLLMode>
}
 800170c:	bf00      	nop
 800170e:	3758      	adds	r7, #88	; 0x58
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40021000 	.word	0x40021000

08001718 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b0a2      	sub	sp, #136	; 0x88
 800171c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800171e:	463b      	mov	r3, r7
 8001720:	2288      	movs	r2, #136	; 0x88
 8001722:	2100      	movs	r1, #0
 8001724:	4618      	mov	r0, r3
 8001726:	f00e fc5a 	bl	800ffde <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800172a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800172e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001730:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001734:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001736:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800173a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800173c:	2301      	movs	r3, #1
 800173e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001740:	2301      	movs	r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001744:	2318      	movs	r3, #24
 8001746:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001748:	2307      	movs	r3, #7
 800174a:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800174c:	2302      	movs	r3, #2
 800174e:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001750:	2302      	movs	r3, #2
 8001752:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001754:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001758:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800175a:	463b      	mov	r3, r7
 800175c:	4618      	mov	r0, r3
 800175e:	f005 fbf7 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8001768:	f000 fcae 	bl	80020c8 <Error_Handler>
  }
}
 800176c:	bf00      	nop
 800176e:	3788      	adds	r7, #136	; 0x88
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}

08001774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08a      	sub	sp, #40	; 0x28
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
 8001794:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001796:	4b2f      	ldr	r3, [pc, #188]	; (8001854 <MX_ADC1_Init+0xe0>)
 8001798:	4a2f      	ldr	r2, [pc, #188]	; (8001858 <MX_ADC1_Init+0xe4>)
 800179a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800179c:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <MX_ADC1_Init+0xe0>)
 800179e:	2200      	movs	r2, #0
 80017a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017a2:	4b2c      	ldr	r3, [pc, #176]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a8:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b4:	4b27      	ldr	r3, [pc, #156]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017b6:	2204      	movs	r2, #4
 80017b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017ba:	4b26      	ldr	r3, [pc, #152]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017c0:	4b24      	ldr	r3, [pc, #144]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80017c6:	4b23      	ldr	r3, [pc, #140]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017c8:	2201      	movs	r2, #1
 80017ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017d4:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017f6:	4817      	ldr	r0, [pc, #92]	; (8001854 <MX_ADC1_Init+0xe0>)
 80017f8:	f001 fbae 	bl	8002f58 <HAL_ADC_Init>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001802:	f000 fc61 	bl	80020c8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800180a:	f107 031c 	add.w	r3, r7, #28
 800180e:	4619      	mov	r1, r3
 8001810:	4810      	ldr	r0, [pc, #64]	; (8001854 <MX_ADC1_Init+0xe0>)
 8001812:	f002 fb2f 	bl	8003e74 <HAL_ADCEx_MultiModeConfigChannel>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800181c:	f000 fc54 	bl	80020c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001820:	4b0e      	ldr	r3, [pc, #56]	; (800185c <MX_ADC1_Init+0xe8>)
 8001822:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001824:	2306      	movs	r3, #6
 8001826:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001828:	2300      	movs	r3, #0
 800182a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800182c:	237f      	movs	r3, #127	; 0x7f
 800182e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001830:	2304      	movs	r3, #4
 8001832:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_ADC1_Init+0xe0>)
 800183e:	f001 fe7b 	bl	8003538 <HAL_ADC_ConfigChannel>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001848:	f000 fc3e 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	; 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20000824 	.word	0x20000824
 8001858:	50040000 	.word	0x50040000
 800185c:	3ac04000 	.word	0x3ac04000

08001860 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2224      	movs	r2, #36	; 0x24
 800186a:	2100      	movs	r1, #0
 800186c:	4618      	mov	r0, r3
 800186e:	f00e fbb6 	bl	800ffde <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_DAC1_Init+0x5c>)
 8001874:	4a12      	ldr	r2, [pc, #72]	; (80018c0 <MX_DAC1_Init+0x60>)
 8001876:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001878:	4810      	ldr	r0, [pc, #64]	; (80018bc <MX_DAC1_Init+0x5c>)
 800187a:	f002 fcbc 	bl	80041f6 <HAL_DAC_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001884:	f000 fc20 	bl	80020c8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2210      	movs	r2, #16
 80018a0:	4619      	mov	r1, r3
 80018a2:	4806      	ldr	r0, [pc, #24]	; (80018bc <MX_DAC1_Init+0x5c>)
 80018a4:	f002 fd3b 	bl	800431e <HAL_DAC_ConfigChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80018ae:	f000 fc0b 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	3728      	adds	r7, #40	; 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000888 	.word	0x20000888
 80018c0:	40007400 	.word	0x40007400

080018c4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <MX_DFSDM1_Init+0x68>)
 80018ca:	4a19      	ldr	r2, [pc, #100]	; (8001930 <MX_DFSDM1_Init+0x6c>)
 80018cc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <MX_DFSDM1_Init+0x68>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <MX_DFSDM1_Init+0x68>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80018da:	4b14      	ldr	r3, [pc, #80]	; (800192c <MX_DFSDM1_Init+0x68>)
 80018dc:	2202      	movs	r2, #2
 80018de:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <MX_DFSDM1_Init+0x68>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_DFSDM1_Init+0x68>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80018ec:	4b0f      	ldr	r3, [pc, #60]	; (800192c <MX_DFSDM1_Init+0x68>)
 80018ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f2:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <MX_DFSDM1_Init+0x68>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_DFSDM1_Init+0x68>)
 80018fc:	2204      	movs	r2, #4
 80018fe:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001900:	4b0a      	ldr	r3, [pc, #40]	; (800192c <MX_DFSDM1_Init+0x68>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_DFSDM1_Init+0x68>)
 8001908:	2201      	movs	r2, #1
 800190a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800190c:	4b07      	ldr	r3, [pc, #28]	; (800192c <MX_DFSDM1_Init+0x68>)
 800190e:	2200      	movs	r2, #0
 8001910:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_DFSDM1_Init+0x68>)
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001918:	4804      	ldr	r0, [pc, #16]	; (800192c <MX_DFSDM1_Init+0x68>)
 800191a:	f002 fe27 	bl	800456c <HAL_DFSDM_ChannelInit>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8001924:	f000 fbd0 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001928:	bf00      	nop
 800192a:	bd80      	pop	{r7, pc}
 800192c:	2000089c 	.word	0x2000089c
 8001930:	40016020 	.word	0x40016020

08001934 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001938:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <MX_I2C2_Init+0x74>)
 800193a:	4a1c      	ldr	r2, [pc, #112]	; (80019ac <MX_I2C2_Init+0x78>)
 800193c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800193e:	4b1a      	ldr	r3, [pc, #104]	; (80019a8 <MX_I2C2_Init+0x74>)
 8001940:	4a1b      	ldr	r2, [pc, #108]	; (80019b0 <MX_I2C2_Init+0x7c>)
 8001942:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001944:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <MX_I2C2_Init+0x74>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800194a:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <MX_I2C2_Init+0x74>)
 800194c:	2201      	movs	r2, #1
 800194e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <MX_I2C2_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001956:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_I2C2_Init+0x74>)
 8001958:	2200      	movs	r2, #0
 800195a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_I2C2_Init+0x74>)
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_I2C2_Init+0x74>)
 8001964:	2200      	movs	r2, #0
 8001966:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_I2C2_Init+0x74>)
 800196a:	2200      	movs	r2, #0
 800196c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800196e:	480e      	ldr	r0, [pc, #56]	; (80019a8 <MX_I2C2_Init+0x74>)
 8001970:	f003 f8ed 	bl	8004b4e <HAL_I2C_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800197a:	f000 fba5 	bl	80020c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800197e:	2100      	movs	r1, #0
 8001980:	4809      	ldr	r0, [pc, #36]	; (80019a8 <MX_I2C2_Init+0x74>)
 8001982:	f003 f97f 	bl	8004c84 <HAL_I2CEx_ConfigAnalogFilter>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800198c:	f000 fb9c 	bl	80020c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001990:	2100      	movs	r1, #0
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_I2C2_Init+0x74>)
 8001994:	f003 f9c1 	bl	8004d1a <HAL_I2CEx_ConfigDigitalFilter>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800199e:	f000 fb93 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200008d4 	.word	0x200008d4
 80019ac:	40005800 	.word	0x40005800
 80019b0:	10909cec 	.word	0x10909cec

080019b4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	; (80019f8 <MX_QUADSPI_Init+0x44>)
 80019ba:	4a10      	ldr	r2, [pc, #64]	; (80019fc <MX_QUADSPI_Init+0x48>)
 80019bc:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80019be:	4b0e      	ldr	r3, [pc, #56]	; (80019f8 <MX_QUADSPI_Init+0x44>)
 80019c0:	2202      	movs	r2, #2
 80019c2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <MX_QUADSPI_Init+0x44>)
 80019c6:	2204      	movs	r2, #4
 80019c8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80019ca:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <MX_QUADSPI_Init+0x44>)
 80019cc:	2210      	movs	r2, #16
 80019ce:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80019d0:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <MX_QUADSPI_Init+0x44>)
 80019d2:	2217      	movs	r2, #23
 80019d4:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80019d6:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <MX_QUADSPI_Init+0x44>)
 80019d8:	2200      	movs	r2, #0
 80019da:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <MX_QUADSPI_Init+0x44>)
 80019de:	2200      	movs	r2, #0
 80019e0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80019e2:	4805      	ldr	r0, [pc, #20]	; (80019f8 <MX_QUADSPI_Init+0x44>)
 80019e4:	f004 fbf8 	bl	80061d8 <HAL_QSPI_Init>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80019ee:	f000 fb6b 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	20000928 	.word	0x20000928
 80019fc:	a0001000 	.word	0xa0001000

08001a00 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001a04:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <MX_SPI3_Init+0x74>)
 8001a06:	4a1c      	ldr	r2, [pc, #112]	; (8001a78 <MX_SPI3_Init+0x78>)
 8001a08:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <MX_SPI3_Init+0x74>)
 8001a0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001a10:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001a12:	4b18      	ldr	r3, [pc, #96]	; (8001a74 <MX_SPI3_Init+0x74>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_SPI3_Init+0x74>)
 8001a1a:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001a1e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_SPI3_Init+0x74>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <MX_SPI3_Init+0x74>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_SPI3_Init+0x74>)
 8001a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a32:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_SPI3_Init+0x74>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_SPI3_Init+0x74>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_SPI3_Init+0x74>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <MX_SPI3_Init+0x74>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_SPI3_Init+0x74>)
 8001a4e:	2207      	movs	r2, #7
 8001a50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <MX_SPI3_Init+0x74>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_SPI3_Init+0x74>)
 8001a5a:	2208      	movs	r2, #8
 8001a5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_SPI3_Init+0x74>)
 8001a60:	f005 ff42 	bl	80078e8 <HAL_SPI_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001a6a:	f000 fb2d 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	2000096c 	.word	0x2000096c
 8001a78:	40003c00 	.word	0x40003c00

08001a7c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a82:	1d3b      	adds	r3, r7, #4
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a8c:	4b14      	ldr	r3, [pc, #80]	; (8001ae0 <MX_TIM7_Init+0x64>)
 8001a8e:	4a15      	ldr	r2, [pc, #84]	; (8001ae4 <MX_TIM7_Init+0x68>)
 8001a90:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8001a92:	4b13      	ldr	r3, [pc, #76]	; (8001ae0 <MX_TIM7_Init+0x64>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_TIM7_Init+0x64>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 3320;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <MX_TIM7_Init+0x64>)
 8001aa0:	f640 42f8 	movw	r2, #3320	; 0xcf8
 8001aa4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_TIM7_Init+0x64>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001aac:	480c      	ldr	r0, [pc, #48]	; (8001ae0 <MX_TIM7_Init+0x64>)
 8001aae:	f005 ffbe 	bl	8007a2e <HAL_TIM_Base_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001ab8:	f000 fb06 	bl	80020c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ac4:	1d3b      	adds	r3, r7, #4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_TIM7_Init+0x64>)
 8001aca:	f006 fa45 	bl	8007f58 <HAL_TIMEx_MasterConfigSynchronization>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001ad4:	f000 faf8 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001ad8:	bf00      	nop
 8001ada:	3710      	adds	r7, #16
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200009d0 	.word	0x200009d0
 8001ae4:	40001400 	.word	0x40001400

08001ae8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aec:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001aee:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <MX_USART1_UART_Init+0x5c>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001af2:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_USART1_UART_Init+0x58>)
 8001b2c:	f006 faba 	bl	80080a4 <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b36:	f000 fac7 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000a1c 	.word	0x20000a1c
 8001b44:	40013800 	.word	0x40013800

08001b48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b4e:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <MX_USART3_UART_Init+0x5c>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b52:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_USART3_UART_Init+0x58>)
 8001b8c:	f006 fa8a 	bl	80080a4 <HAL_UART_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b96:	f000 fa97 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000aa4 	.word	0x20000aa4
 8001ba4:	40004800 	.word	0x40004800

08001ba8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bae:	f107 0314 	add.w	r3, r7, #20
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
 8001bbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bbe:	4bb1      	ldr	r3, [pc, #708]	; (8001e84 <MX_GPIO_Init+0x2dc>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	4ab0      	ldr	r2, [pc, #704]	; (8001e84 <MX_GPIO_Init+0x2dc>)
 8001bc4:	f043 0310 	orr.w	r3, r3, #16
 8001bc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bca:	4bae      	ldr	r3, [pc, #696]	; (8001e84 <MX_GPIO_Init+0x2dc>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	613b      	str	r3, [r7, #16]
 8001bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd6:	4bab      	ldr	r3, [pc, #684]	; (8001e84 <MX_GPIO_Init+0x2dc>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	4aaa      	ldr	r2, [pc, #680]	; (8001e84 <MX_GPIO_Init+0x2dc>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be2:	4ba8      	ldr	r3, [pc, #672]	; (8001e84 <MX_GPIO_Init+0x2dc>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	4ba5      	ldr	r3, [pc, #660]	; (8001e84 <MX_GPIO_Init+0x2dc>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	4aa4      	ldr	r2, [pc, #656]	; (8001e84 <MX_GPIO_Init+0x2dc>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bfa:	4ba2      	ldr	r3, [pc, #648]	; (8001e84 <MX_GPIO_Init+0x2dc>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
 8001c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c06:	4b9f      	ldr	r3, [pc, #636]	; (8001e84 <MX_GPIO_Init+0x2dc>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	4a9e      	ldr	r2, [pc, #632]	; (8001e84 <MX_GPIO_Init+0x2dc>)
 8001c0c:	f043 0302 	orr.w	r3, r3, #2
 8001c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c12:	4b9c      	ldr	r3, [pc, #624]	; (8001e84 <MX_GPIO_Init+0x2dc>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c1e:	4b99      	ldr	r3, [pc, #612]	; (8001e84 <MX_GPIO_Init+0x2dc>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	4a98      	ldr	r2, [pc, #608]	; (8001e84 <MX_GPIO_Init+0x2dc>)
 8001c24:	f043 0308 	orr.w	r3, r3, #8
 8001c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2a:	4b96      	ldr	r3, [pc, #600]	; (8001e84 <MX_GPIO_Init+0x2dc>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001c3c:	4892      	ldr	r0, [pc, #584]	; (8001e88 <MX_GPIO_Init+0x2e0>)
 8001c3e:	f002 ff4b 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001c42:	2200      	movs	r2, #0
 8001c44:	f248 111c 	movw	r1, #33052	; 0x811c
 8001c48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c4c:	f002 ff44 	bl	8004ad8 <HAL_GPIO_WritePin>
                          |E_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001c50:	2200      	movs	r2, #0
 8001c52:	f24f 0116 	movw	r1, #61462	; 0xf016
 8001c56:	488d      	ldr	r0, [pc, #564]	; (8001e8c <MX_GPIO_Init+0x2e4>)
 8001c58:	f002 ff3e 	bl	8004ad8 <HAL_GPIO_WritePin>
                          |verde_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f241 0181 	movw	r1, #4225	; 0x1081
 8001c62:	488b      	ldr	r0, [pc, #556]	; (8001e90 <MX_GPIO_Init+0x2e8>)
 8001c64:	f002 ff38 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c6e:	4888      	ldr	r0, [pc, #544]	; (8001e90 <MX_GPIO_Init+0x2e8>)
 8001c70:	f002 ff32 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|amarillo_Pin, GPIO_PIN_RESET);
 8001c74:	2200      	movs	r2, #0
 8001c76:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001c7a:	4886      	ldr	r0, [pc, #536]	; (8001e94 <MX_GPIO_Init+0x2ec>)
 8001c7c:	f002 ff2c 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001c80:	2201      	movs	r2, #1
 8001c82:	2120      	movs	r1, #32
 8001c84:	4881      	ldr	r0, [pc, #516]	; (8001e8c <MX_GPIO_Init+0x2e4>)
 8001c86:	f002 ff27 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	487e      	ldr	r0, [pc, #504]	; (8001e88 <MX_GPIO_Init+0x2e0>)
 8001c90:	f002 ff22 	bl	8004ad8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001c94:	f240 1315 	movw	r3, #277	; 0x115
 8001c98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4619      	mov	r1, r3
 8001cac:	4876      	ldr	r0, [pc, #472]	; (8001e88 <MX_GPIO_Init+0x2e0>)
 8001cae:	f002 fd69 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001cb2:	236a      	movs	r3, #106	; 0x6a
 8001cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cb6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cc0:	f107 0314 	add.w	r3, r7, #20
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4870      	ldr	r0, [pc, #448]	; (8001e88 <MX_GPIO_Init+0x2e0>)
 8001cc8:	f002 fd5c 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cd2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001cdc:	f107 0314 	add.w	r3, r7, #20
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	486c      	ldr	r0, [pc, #432]	; (8001e94 <MX_GPIO_Init+0x2ec>)
 8001ce4:	f002 fd4e 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cec:	2302      	movs	r3, #2
 8001cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001cf8:	2308      	movs	r3, #8
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfc:	f107 0314 	add.w	r3, r7, #20
 8001d00:	4619      	mov	r1, r3
 8001d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d06:	f002 fd3d 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin SPBTLE_RF_RST_Pin
                           E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001d0a:	f248 131c 	movw	r3, #33052	; 0x811c
 8001d0e:	617b      	str	r3, [r7, #20]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d10:	2301      	movs	r3, #1
 8001d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d14:	2300      	movs	r3, #0
 8001d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	4619      	mov	r1, r3
 8001d22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d26:	f002 fd2d 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001d2a:	23c0      	movs	r3, #192	; 0xc0
 8001d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d36:	2303      	movs	r3, #3
 8001d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d3a:	2305      	movs	r3, #5
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3e:	f107 0314 	add.w	r3, r7, #20
 8001d42:	4619      	mov	r1, r3
 8001d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d48:	f002 fd1c 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d50:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4619      	mov	r1, r3
 8001d60:	484a      	ldr	r0, [pc, #296]	; (8001e8c <MX_GPIO_Init+0x2e4>)
 8001d62:	f002 fd0f 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           verde_Pin SPSGRF_915_SDN_Pin D5_LCD_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001d66:	f24f 0336 	movw	r3, #61494	; 0xf036
 8001d6a:	617b      	str	r3, [r7, #20]
                          |verde_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4843      	ldr	r0, [pc, #268]	; (8001e8c <MX_GPIO_Init+0x2e4>)
 8001d80:	f002 fd00 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001d84:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001d88:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	483d      	ldr	r0, [pc, #244]	; (8001e90 <MX_GPIO_Init+0x2e8>)
 8001d9c:	f002 fcf2 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001da0:	f243 0381 	movw	r3, #12417	; 0x3081
 8001da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	4835      	ldr	r0, [pc, #212]	; (8001e90 <MX_GPIO_Init+0x2e8>)
 8001dba:	f002 fce3 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin amarillo_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|amarillo_Pin;
 8001dbe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	482f      	ldr	r0, [pc, #188]	; (8001e94 <MX_GPIO_Init+0x2ec>)
 8001dd8:	f002 fcd4 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001ddc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001de2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001de6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de8:	2300      	movs	r3, #0
 8001dea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dec:	f107 0314 	add.w	r3, r7, #20
 8001df0:	4619      	mov	r1, r3
 8001df2:	4828      	ldr	r0, [pc, #160]	; (8001e94 <MX_GPIO_Init+0x2ec>)
 8001df4:	f002 fcc6 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e08:	2305      	movs	r3, #5
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	481f      	ldr	r0, [pc, #124]	; (8001e90 <MX_GPIO_Init+0x2e8>)
 8001e14:	f002 fcb6 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001e18:	2378      	movs	r3, #120	; 0x78
 8001e1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e28:	2307      	movs	r3, #7
 8001e2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	4619      	mov	r1, r3
 8001e32:	4817      	ldr	r0, [pc, #92]	; (8001e90 <MX_GPIO_Init+0x2e8>)
 8001e34:	f002 fca6 	bl	8004784 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001e38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3e:	2312      	movs	r3, #18
 8001e40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	4619      	mov	r1, r3
 8001e54:	480d      	ldr	r0, [pc, #52]	; (8001e8c <MX_GPIO_Init+0x2e4>)
 8001e56:	f002 fc95 	bl	8004784 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2105      	movs	r1, #5
 8001e5e:	2017      	movs	r0, #23
 8001e60:	f002 f993 	bl	800418a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e64:	2017      	movs	r0, #23
 8001e66:	f002 f9ac 	bl	80041c2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	2105      	movs	r1, #5
 8001e6e:	2028      	movs	r0, #40	; 0x28
 8001e70:	f002 f98b 	bl	800418a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e74:	2028      	movs	r0, #40	; 0x28
 8001e76:	f002 f9a4 	bl	80041c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e7a:	bf00      	nop
 8001e7c:	3728      	adds	r7, #40	; 0x28
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	48001000 	.word	0x48001000
 8001e8c:	48000400 	.word	0x48000400
 8001e90:	48000c00 	.word	0x48000c00
 8001e94:	48000800 	.word	0x48000800

08001e98 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001ea0:	f00d f9cc 	bl	800f23c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001ea4:	2001      	movs	r0, #1
 8001ea6:	f00a f815 	bl	800bed4 <osDelay>
 8001eaa:	e7fb      	b.n	8001ea4 <StartDefaultTask+0xc>

08001eac <Start_led_verde>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_led_verde */
void Start_led_verde(void *argument)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_led_verde */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(verde_GPIO_Port, verde_Pin, 1);
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001eba:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <Start_led_verde+0x34>)
 8001ebc:	f002 fe0c 	bl	8004ad8 <HAL_GPIO_WritePin>
		osDelay(300);
 8001ec0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ec4:	f00a f806 	bl	800bed4 <osDelay>
		HAL_GPIO_WritePin(verde_GPIO_Port, verde_Pin, 0);
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ece:	4804      	ldr	r0, [pc, #16]	; (8001ee0 <Start_led_verde+0x34>)
 8001ed0:	f002 fe02 	bl	8004ad8 <HAL_GPIO_WritePin>
		osDelay(300);
 8001ed4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001ed8:	f009 fffc 	bl	800bed4 <osDelay>
		HAL_GPIO_WritePin(verde_GPIO_Port, verde_Pin, 1);
 8001edc:	e7ea      	b.n	8001eb4 <Start_led_verde+0x8>
 8001ede:	bf00      	nop
 8001ee0:	48000400 	.word	0x48000400

08001ee4 <Start_led_amarillo>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Start_led_amarillo */
void Start_led_amarillo(void *argument)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_led_amarillo */
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(amarillo_GPIO_Port, amarillo_Pin, 1);
 8001eec:	2201      	movs	r2, #1
 8001eee:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ef2:	4809      	ldr	r0, [pc, #36]	; (8001f18 <Start_led_amarillo+0x34>)
 8001ef4:	f002 fdf0 	bl	8004ad8 <HAL_GPIO_WritePin>
		osDelay(300);
 8001ef8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001efc:	f009 ffea 	bl	800bed4 <osDelay>
		HAL_GPIO_WritePin(amarillo_GPIO_Port, amarillo_Pin, 0);
 8001f00:	2200      	movs	r2, #0
 8001f02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f06:	4804      	ldr	r0, [pc, #16]	; (8001f18 <Start_led_amarillo+0x34>)
 8001f08:	f002 fde6 	bl	8004ad8 <HAL_GPIO_WritePin>
		osDelay(300);
 8001f0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001f10:	f009 ffe0 	bl	800bed4 <osDelay>
		HAL_GPIO_WritePin(amarillo_GPIO_Port, amarillo_Pin, 1);
 8001f14:	e7ea      	b.n	8001eec <Start_led_amarillo+0x8>
 8001f16:	bf00      	nop
 8001f18:	48000800 	.word	0x48000800
 8001f1c:	00000000 	.word	0x00000000

08001f20 <StartLCD_TareaA>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLCD_TareaA */
void StartLCD_TareaA(void *argument)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLCD_TareaA */
	/* Infinite loop */
	lcd_reset();
 8001f28:	f7ff f824 	bl	8000f74 <lcd_reset>
	lcd_display_settings(1, 0, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	2001      	movs	r0, #1
 8001f32:	f7ff f92f 	bl	8001194 <lcd_display_settings>
	lcd_clear();
 8001f36:	f7ff f91b 	bl	8001170 <lcd_clear>
	char str[10];

	for (;;) {
		osSemaphoreAcquire(AccesoLCDHandle, 0xFFFFFFF);
 8001f3a:	4b35      	ldr	r3, [pc, #212]	; (8002010 <StartLCD_TareaA+0xf0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8001f42:	4618      	mov	r0, r3
 8001f44:	f00a f86a 	bl	800c01c <osSemaphoreAcquire>
		//le damos un time out enorme
		//leemos la botonera y ponemos el boton
		  HAL_ADC_Start(&hadc1);
 8001f48:	4832      	ldr	r0, [pc, #200]	; (8002014 <StartLCD_TareaA+0xf4>)
 8001f4a:	f001 f955 	bl	80031f8 <HAL_ADC_Start>
		  // 2- Esperar a que esté disponible
		  HAL_ADC_PollForConversion(&hadc1, 100);
 8001f4e:	2164      	movs	r1, #100	; 0x64
 8001f50:	4830      	ldr	r0, [pc, #192]	; (8002014 <StartLCD_TareaA+0xf4>)
 8001f52:	f001 fa0b 	bl	800336c <HAL_ADC_PollForConversion>
		  // 3- Leer muestra del registro de datos
		  uint32_t sample =  HAL_ADC_GetValue(&hadc1);
 8001f56:	482f      	ldr	r0, [pc, #188]	; (8002014 <StartLCD_TareaA+0xf4>)
 8001f58:	f001 fae0 	bl	800351c <HAL_ADC_GetValue>
 8001f5c:	6178      	str	r0, [r7, #20]
		  // modicamos gnancia up down
		  moveToXY(0, 0);
 8001f5e:	2100      	movs	r1, #0
 8001f60:	2000      	movs	r0, #0
 8001f62:	f7ff fa2d 	bl	80013c0 <moveToXY>
		  if(getButton(sample)==2){
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff faa6 	bl	80014bc <getButton>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b02      	cmp	r3, #2
 8001f74:	d113      	bne.n	8001f9e <StartLCD_TareaA+0x7e>
			  ganancia=ganancia+0.1;
 8001f76:	4b28      	ldr	r3, [pc, #160]	; (8002018 <StartLCD_TareaA+0xf8>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7fe fae4 	bl	8000548 <__aeabi_f2d>
 8001f80:	a321      	add	r3, pc, #132	; (adr r3, 8002008 <StartLCD_TareaA+0xe8>)
 8001f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f86:	f7fe f981 	bl	800028c <__adddf3>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4610      	mov	r0, r2
 8001f90:	4619      	mov	r1, r3
 8001f92:	f7fe fe09 	bl	8000ba8 <__aeabi_d2f>
 8001f96:	4603      	mov	r3, r0
 8001f98:	4a1f      	ldr	r2, [pc, #124]	; (8002018 <StartLCD_TareaA+0xf8>)
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	e01a      	b.n	8001fd4 <StartLCD_TareaA+0xb4>

		  }else if(getButton(sample)==3){
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	b29b      	uxth	r3, r3
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fa8a 	bl	80014bc <getButton>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d112      	bne.n	8001fd4 <StartLCD_TareaA+0xb4>
			  ganancia=ganancia-0.1;
 8001fae:	4b1a      	ldr	r3, [pc, #104]	; (8002018 <StartLCD_TareaA+0xf8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fac8 	bl	8000548 <__aeabi_f2d>
 8001fb8:	a313      	add	r3, pc, #76	; (adr r3, 8002008 <StartLCD_TareaA+0xe8>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe f963 	bl	8000288 <__aeabi_dsub>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f7fe fded 	bl	8000ba8 <__aeabi_d2f>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4a11      	ldr	r2, [pc, #68]	; (8002018 <StartLCD_TareaA+0xf8>)
 8001fd2:	6013      	str	r3, [r2, #0]
		  }
		  sprintf(str,"G: %.1f",ganancia);
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <StartLCD_TareaA+0xf8>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fab5 	bl	8000548 <__aeabi_f2d>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	f107 0008 	add.w	r0, r7, #8
 8001fe6:	490d      	ldr	r1, [pc, #52]	; (800201c <StartLCD_TareaA+0xfc>)
 8001fe8:	f00d ff96 	bl	800ff18 <sprintf>
		  lcd_print(str);
 8001fec:	f107 0308 	add.w	r3, r7, #8
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff f901 	bl	80011f8 <lcd_print>
		  // 4-PResentar valores


		//  lcd_print(str);

		osSemaphoreRelease(AccesoLCDHandle);
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <StartLCD_TareaA+0xf0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f00a f860 	bl	800c0c0 <osSemaphoreRelease>

		osDelay(200);
 8002000:	20c8      	movs	r0, #200	; 0xc8
 8002002:	f009 ff67 	bl	800bed4 <osDelay>
	for (;;) {
 8002006:	e798      	b.n	8001f3a <StartLCD_TareaA+0x1a>
 8002008:	9999999a 	.word	0x9999999a
 800200c:	3fb99999 	.word	0x3fb99999
 8002010:	20000b40 	.word	0x20000b40
 8002014:	20000824 	.word	0x20000824
 8002018:	20000000 	.word	0x20000000
 800201c:	080148d4 	.word	0x080148d4

08002020 <StartTareaB>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTareaB */
void StartTareaB(void *argument)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTareaB */
	/* Infinite loop */
	//esta se supone que la debemos retrasar un poco
	//int contador2 = 0;
	osDelay(25);
 8002028:	2019      	movs	r0, #25
 800202a:	f009 ff53 	bl	800bed4 <osDelay>
//uint32_t tickB;
//tickB = osKernelGetTickCount();
	for (;;) {  // tickB+=100;
				//osDelayUntil(tickB);

		osSemaphoreAcquire(AccesoLCDHandle, 0xFFFFFFF);
 800202e:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <StartTareaB+0x98>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002036:	4618      	mov	r0, r3
 8002038:	f009 fff0 	bl	800c01c <osSemaphoreAcquire>
	//lectura de la ganancia
		  HAL_ADC_Start(&hadc1);
 800203c:	481f      	ldr	r0, [pc, #124]	; (80020bc <StartTareaB+0x9c>)
 800203e:	f001 f8db 	bl	80031f8 <HAL_ADC_Start>
		  // 2- Esperar a que esté disponible
		  HAL_ADC_PollForConversion(&hadc1, 100);
 8002042:	2164      	movs	r1, #100	; 0x64
 8002044:	481d      	ldr	r0, [pc, #116]	; (80020bc <StartTareaB+0x9c>)
 8002046:	f001 f991 	bl	800336c <HAL_ADC_PollForConversion>
		  // 3- Leer muestra del registro de datos
		  uint32_t sample =  HAL_ADC_GetValue(&hadc1);
 800204a:	481c      	ldr	r0, [pc, #112]	; (80020bc <StartTareaB+0x9c>)
 800204c:	f001 fa66 	bl	800351c <HAL_ADC_GetValue>
 8002050:	60f8      	str	r0, [r7, #12]
		  if(getButton(sample)==4){
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	b29b      	uxth	r3, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fa30 	bl	80014bc <getButton>
 800205c:	4603      	mov	r3, r0
 800205e:	2b04      	cmp	r3, #4
 8002060:	d106      	bne.n	8002070 <StartTareaB+0x50>
			  efecto++;
 8002062:	4b17      	ldr	r3, [pc, #92]	; (80020c0 <StartTareaB+0xa0>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	3301      	adds	r3, #1
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <StartTareaB+0xa0>)
 800206c:	701a      	strb	r2, [r3, #0]
 800206e:	e00d      	b.n	800208c <StartTareaB+0x6c>
		  }else if(getButton(sample)==1){
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	b29b      	uxth	r3, r3
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff fa21 	bl	80014bc <getButton>
 800207a:	4603      	mov	r3, r0
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <StartTareaB+0x6c>
			  efecto--;
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <StartTareaB+0xa0>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	3b01      	subs	r3, #1
 8002086:	b2da      	uxtb	r2, r3
 8002088:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <StartTareaB+0xa0>)
 800208a:	701a      	strb	r2, [r3, #0]
		  }

		  moveToXY(1, 0);
 800208c:	2100      	movs	r1, #0
 800208e:	2001      	movs	r0, #1
 8002090:	f7ff f996 	bl	80013c0 <moveToXY>
		  lcd_print("Efecto");
 8002094:	480b      	ldr	r0, [pc, #44]	; (80020c4 <StartTareaB+0xa4>)
 8002096:	f7ff f8af 	bl	80011f8 <lcd_print>
		  writeIntegerToLCD(efecto);
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <StartTareaB+0xa0>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7ff f91c 	bl	80012dc <writeIntegerToLCD>
		osSemaphoreRelease(AccesoLCDHandle);
 80020a4:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <StartTareaB+0x98>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f00a f809 	bl	800c0c0 <osSemaphoreRelease>
		osDelay(200);
 80020ae:	20c8      	movs	r0, #200	; 0xc8
 80020b0:	f009 ff10 	bl	800bed4 <osDelay>
	for (;;) {  // tickB+=100;
 80020b4:	e7bb      	b.n	800202e <StartTareaB+0xe>
 80020b6:	bf00      	nop
 80020b8:	20000b40 	.word	0x20000b40
 80020bc:	20000824 	.word	0x20000824
 80020c0:	20000004 	.word	0x20000004
 80020c4:	080148dc 	.word	0x080148dc

080020c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020cc:	b672      	cpsid	i
}
 80020ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80020d0:	e7fe      	b.n	80020d0 <Error_Handler+0x8>
	...

080020d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020da:	4b11      	ldr	r3, [pc, #68]	; (8002120 <HAL_MspInit+0x4c>)
 80020dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020de:	4a10      	ldr	r2, [pc, #64]	; (8002120 <HAL_MspInit+0x4c>)
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	6613      	str	r3, [r2, #96]	; 0x60
 80020e6:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_MspInit+0x4c>)
 80020e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020f2:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <HAL_MspInit+0x4c>)
 80020f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f6:	4a0a      	ldr	r2, [pc, #40]	; (8002120 <HAL_MspInit+0x4c>)
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	6593      	str	r3, [r2, #88]	; 0x58
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <HAL_MspInit+0x4c>)
 8002100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	603b      	str	r3, [r7, #0]
 8002108:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800210a:	2200      	movs	r2, #0
 800210c:	210f      	movs	r1, #15
 800210e:	f06f 0001 	mvn.w	r0, #1
 8002112:	f002 f83a 	bl	800418a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000

08002124 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b08a      	sub	sp, #40	; 0x28
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a15      	ldr	r2, [pc, #84]	; (8002198 <HAL_ADC_MspInit+0x74>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d123      	bne.n	800218e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002146:	4b15      	ldr	r3, [pc, #84]	; (800219c <HAL_ADC_MspInit+0x78>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	4a14      	ldr	r2, [pc, #80]	; (800219c <HAL_ADC_MspInit+0x78>)
 800214c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_ADC_MspInit+0x78>)
 8002154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002156:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800215e:	4b0f      	ldr	r3, [pc, #60]	; (800219c <HAL_ADC_MspInit+0x78>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	4a0e      	ldr	r2, [pc, #56]	; (800219c <HAL_ADC_MspInit+0x78>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	64d3      	str	r3, [r2, #76]	; 0x4c
 800216a:	4b0c      	ldr	r3, [pc, #48]	; (800219c <HAL_ADC_MspInit+0x78>)
 800216c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8002176:	233f      	movs	r3, #63	; 0x3f
 8002178:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800217a:	230b      	movs	r3, #11
 800217c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	4619      	mov	r1, r3
 8002188:	4805      	ldr	r0, [pc, #20]	; (80021a0 <HAL_ADC_MspInit+0x7c>)
 800218a:	f002 fafb 	bl	8004784 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800218e:	bf00      	nop
 8002190:	3728      	adds	r7, #40	; 0x28
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	50040000 	.word	0x50040000
 800219c:	40021000 	.word	0x40021000
 80021a0:	48000800 	.word	0x48000800

080021a4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b08a      	sub	sp, #40	; 0x28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021ac:	f107 0314 	add.w	r3, r7, #20
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	605a      	str	r2, [r3, #4]
 80021b6:	609a      	str	r2, [r3, #8]
 80021b8:	60da      	str	r2, [r3, #12]
 80021ba:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a15      	ldr	r2, [pc, #84]	; (8002218 <HAL_DAC_MspInit+0x74>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d124      	bne.n	8002210 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <HAL_DAC_MspInit+0x78>)
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	4a14      	ldr	r2, [pc, #80]	; (800221c <HAL_DAC_MspInit+0x78>)
 80021cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021d0:	6593      	str	r3, [r2, #88]	; 0x58
 80021d2:	4b12      	ldr	r3, [pc, #72]	; (800221c <HAL_DAC_MspInit+0x78>)
 80021d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_DAC_MspInit+0x78>)
 80021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e2:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_DAC_MspInit+0x78>)
 80021e4:	f043 0301 	orr.w	r3, r3, #1
 80021e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021ea:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_DAC_MspInit+0x78>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021f6:	2320      	movs	r3, #32
 80021f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021fa:	2303      	movs	r3, #3
 80021fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002202:	f107 0314 	add.w	r3, r7, #20
 8002206:	4619      	mov	r1, r3
 8002208:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220c:	f002 faba 	bl	8004784 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002210:	bf00      	nop
 8002212:	3728      	adds	r7, #40	; 0x28
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40007400 	.word	0x40007400
 800221c:	40021000 	.word	0x40021000

08002220 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b0ac      	sub	sp, #176	; 0xb0
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002238:	f107 0314 	add.w	r3, r7, #20
 800223c:	2288      	movs	r2, #136	; 0x88
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f00d fecc 	bl	800ffde <memset>
  if(DFSDM1_Init == 0)
 8002246:	4b25      	ldr	r3, [pc, #148]	; (80022dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d142      	bne.n	80022d4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800224e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002252:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002254:	2300      	movs	r3, #0
 8002256:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800225a:	f107 0314 	add.w	r3, r7, #20
 800225e:	4618      	mov	r0, r3
 8002260:	f004 fe76 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800226a:	f7ff ff2d 	bl	80020c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800226e:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002272:	4a1b      	ldr	r2, [pc, #108]	; (80022e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002274:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002278:	6613      	str	r3, [r2, #96]	; 0x60
 800227a:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800227c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002286:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800228a:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800228c:	f043 0310 	orr.w	r3, r3, #16
 8002290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002296:	f003 0310 	and.w	r3, r3, #16
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800229e:	f44f 7320 	mov.w	r3, #640	; 0x280
 80022a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80022b8:	2306      	movs	r3, #6
 80022ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022c2:	4619      	mov	r1, r3
 80022c4:	4807      	ldr	r0, [pc, #28]	; (80022e4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80022c6:	f002 fa5d 	bl	8004784 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80022ca:	4b04      	ldr	r3, [pc, #16]	; (80022dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3301      	adds	r3, #1
 80022d0:	4a02      	ldr	r2, [pc, #8]	; (80022dc <HAL_DFSDM_ChannelMspInit+0xbc>)
 80022d2:	6013      	str	r3, [r2, #0]
  }

}
 80022d4:	bf00      	nop
 80022d6:	37b0      	adds	r7, #176	; 0xb0
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	20000b44 	.word	0x20000b44
 80022e0:	40021000 	.word	0x40021000
 80022e4:	48001000 	.word	0x48001000

080022e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b0ac      	sub	sp, #176	; 0xb0
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002300:	f107 0314 	add.w	r3, r7, #20
 8002304:	2288      	movs	r2, #136	; 0x88
 8002306:	2100      	movs	r1, #0
 8002308:	4618      	mov	r0, r3
 800230a:	f00d fe68 	bl	800ffde <memset>
  if(hi2c->Instance==I2C2)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a21      	ldr	r2, [pc, #132]	; (8002398 <HAL_I2C_MspInit+0xb0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d13b      	bne.n	8002390 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800231c:	2300      	movs	r3, #0
 800231e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4618      	mov	r0, r3
 8002326:	f004 fe13 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002330:	f7ff feca 	bl	80020c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002334:	4b19      	ldr	r3, [pc, #100]	; (800239c <HAL_I2C_MspInit+0xb4>)
 8002336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002338:	4a18      	ldr	r2, [pc, #96]	; (800239c <HAL_I2C_MspInit+0xb4>)
 800233a:	f043 0302 	orr.w	r3, r3, #2
 800233e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002340:	4b16      	ldr	r3, [pc, #88]	; (800239c <HAL_I2C_MspInit+0xb4>)
 8002342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	613b      	str	r3, [r7, #16]
 800234a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800234c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002350:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002354:	2312      	movs	r3, #18
 8002356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800235a:	2301      	movs	r3, #1
 800235c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002366:	2304      	movs	r3, #4
 8002368:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800236c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002370:	4619      	mov	r1, r3
 8002372:	480b      	ldr	r0, [pc, #44]	; (80023a0 <HAL_I2C_MspInit+0xb8>)
 8002374:	f002 fa06 	bl	8004784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002378:	4b08      	ldr	r3, [pc, #32]	; (800239c <HAL_I2C_MspInit+0xb4>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	4a07      	ldr	r2, [pc, #28]	; (800239c <HAL_I2C_MspInit+0xb4>)
 800237e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002382:	6593      	str	r3, [r2, #88]	; 0x58
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_I2C_MspInit+0xb4>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002390:	bf00      	nop
 8002392:	37b0      	adds	r7, #176	; 0xb0
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40005800 	.word	0x40005800
 800239c:	40021000 	.word	0x40021000
 80023a0:	48000400 	.word	0x48000400

080023a4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08a      	sub	sp, #40	; 0x28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ac:	f107 0314 	add.w	r3, r7, #20
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a17      	ldr	r2, [pc, #92]	; (8002420 <HAL_QSPI_MspInit+0x7c>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d128      	bne.n	8002418 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80023c6:	4b17      	ldr	r3, [pc, #92]	; (8002424 <HAL_QSPI_MspInit+0x80>)
 80023c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ca:	4a16      	ldr	r2, [pc, #88]	; (8002424 <HAL_QSPI_MspInit+0x80>)
 80023cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023d0:	6513      	str	r3, [r2, #80]	; 0x50
 80023d2:	4b14      	ldr	r3, [pc, #80]	; (8002424 <HAL_QSPI_MspInit+0x80>)
 80023d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023de:	4b11      	ldr	r3, [pc, #68]	; (8002424 <HAL_QSPI_MspInit+0x80>)
 80023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e2:	4a10      	ldr	r2, [pc, #64]	; (8002424 <HAL_QSPI_MspInit+0x80>)
 80023e4:	f043 0310 	orr.w	r3, r3, #16
 80023e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ea:	4b0e      	ldr	r3, [pc, #56]	; (8002424 <HAL_QSPI_MspInit+0x80>)
 80023ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ee:	f003 0310 	and.w	r3, r3, #16
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80023f6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80023fa:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002404:	2303      	movs	r3, #3
 8002406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8002408:	230a      	movs	r3, #10
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	4619      	mov	r1, r3
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <HAL_QSPI_MspInit+0x84>)
 8002414:	f002 f9b6 	bl	8004784 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002418:	bf00      	nop
 800241a:	3728      	adds	r7, #40	; 0x28
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	a0001000 	.word	0xa0001000
 8002424:	40021000 	.word	0x40021000
 8002428:	48001000 	.word	0x48001000

0800242c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08a      	sub	sp, #40	; 0x28
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 0314 	add.w	r3, r7, #20
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
 8002442:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a17      	ldr	r2, [pc, #92]	; (80024a8 <HAL_SPI_MspInit+0x7c>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d128      	bne.n	80024a0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800244e:	4b17      	ldr	r3, [pc, #92]	; (80024ac <HAL_SPI_MspInit+0x80>)
 8002450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002452:	4a16      	ldr	r2, [pc, #88]	; (80024ac <HAL_SPI_MspInit+0x80>)
 8002454:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002458:	6593      	str	r3, [r2, #88]	; 0x58
 800245a:	4b14      	ldr	r3, [pc, #80]	; (80024ac <HAL_SPI_MspInit+0x80>)
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002466:	4b11      	ldr	r3, [pc, #68]	; (80024ac <HAL_SPI_MspInit+0x80>)
 8002468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246a:	4a10      	ldr	r2, [pc, #64]	; (80024ac <HAL_SPI_MspInit+0x80>)
 800246c:	f043 0304 	orr.w	r3, r3, #4
 8002470:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002472:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <HAL_SPI_MspInit+0x80>)
 8002474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002476:	f003 0304 	and.w	r3, r3, #4
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800247e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002490:	2306      	movs	r3, #6
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	4619      	mov	r1, r3
 800249a:	4805      	ldr	r0, [pc, #20]	; (80024b0 <HAL_SPI_MspInit+0x84>)
 800249c:	f002 f972 	bl	8004784 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80024a0:	bf00      	nop
 80024a2:	3728      	adds	r7, #40	; 0x28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	40003c00 	.word	0x40003c00
 80024ac:	40021000 	.word	0x40021000
 80024b0:	48000800 	.word	0x48000800

080024b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <HAL_TIM_Base_MspInit+0x44>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d113      	bne.n	80024ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <HAL_TIM_Base_MspInit+0x48>)
 80024c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ca:	4a0c      	ldr	r2, [pc, #48]	; (80024fc <HAL_TIM_Base_MspInit+0x48>)
 80024cc:	f043 0320 	orr.w	r3, r3, #32
 80024d0:	6593      	str	r3, [r2, #88]	; 0x58
 80024d2:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <HAL_TIM_Base_MspInit+0x48>)
 80024d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d6:	f003 0320 	and.w	r3, r3, #32
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80024de:	2200      	movs	r2, #0
 80024e0:	2105      	movs	r1, #5
 80024e2:	2037      	movs	r0, #55	; 0x37
 80024e4:	f001 fe51 	bl	800418a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80024e8:	2037      	movs	r0, #55	; 0x37
 80024ea:	f001 fe6a 	bl	80041c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	40001400 	.word	0x40001400
 80024fc:	40021000 	.word	0x40021000

08002500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b0ae      	sub	sp, #184	; 0xb8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002518:	f107 031c 	add.w	r3, r7, #28
 800251c:	2288      	movs	r2, #136	; 0x88
 800251e:	2100      	movs	r1, #0
 8002520:	4618      	mov	r0, r3
 8002522:	f00d fd5c 	bl	800ffde <memset>
  if(huart->Instance==USART1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a42      	ldr	r2, [pc, #264]	; (8002634 <HAL_UART_MspInit+0x134>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d13b      	bne.n	80025a8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002530:	2301      	movs	r3, #1
 8002532:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002534:	2300      	movs	r3, #0
 8002536:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002538:	f107 031c 	add.w	r3, r7, #28
 800253c:	4618      	mov	r0, r3
 800253e:	f004 fd07 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002548:	f7ff fdbe 	bl	80020c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800254c:	4b3a      	ldr	r3, [pc, #232]	; (8002638 <HAL_UART_MspInit+0x138>)
 800254e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002550:	4a39      	ldr	r2, [pc, #228]	; (8002638 <HAL_UART_MspInit+0x138>)
 8002552:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002556:	6613      	str	r3, [r2, #96]	; 0x60
 8002558:	4b37      	ldr	r3, [pc, #220]	; (8002638 <HAL_UART_MspInit+0x138>)
 800255a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002560:	61bb      	str	r3, [r7, #24]
 8002562:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002564:	4b34      	ldr	r3, [pc, #208]	; (8002638 <HAL_UART_MspInit+0x138>)
 8002566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002568:	4a33      	ldr	r2, [pc, #204]	; (8002638 <HAL_UART_MspInit+0x138>)
 800256a:	f043 0302 	orr.w	r3, r3, #2
 800256e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002570:	4b31      	ldr	r3, [pc, #196]	; (8002638 <HAL_UART_MspInit+0x138>)
 8002572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800257c:	23c0      	movs	r3, #192	; 0xc0
 800257e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002582:	2302      	movs	r3, #2
 8002584:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258e:	2303      	movs	r3, #3
 8002590:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002594:	2307      	movs	r3, #7
 8002596:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800259e:	4619      	mov	r1, r3
 80025a0:	4826      	ldr	r0, [pc, #152]	; (800263c <HAL_UART_MspInit+0x13c>)
 80025a2:	f002 f8ef 	bl	8004784 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025a6:	e040      	b.n	800262a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a24      	ldr	r2, [pc, #144]	; (8002640 <HAL_UART_MspInit+0x140>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d13b      	bne.n	800262a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025b2:	2304      	movs	r3, #4
 80025b4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80025b6:	2300      	movs	r3, #0
 80025b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025ba:	f107 031c 	add.w	r3, r7, #28
 80025be:	4618      	mov	r0, r3
 80025c0:	f004 fcc6 	bl	8006f50 <HAL_RCCEx_PeriphCLKConfig>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <HAL_UART_MspInit+0xce>
      Error_Handler();
 80025ca:	f7ff fd7d 	bl	80020c8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80025ce:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <HAL_UART_MspInit+0x138>)
 80025d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d2:	4a19      	ldr	r2, [pc, #100]	; (8002638 <HAL_UART_MspInit+0x138>)
 80025d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025d8:	6593      	str	r3, [r2, #88]	; 0x58
 80025da:	4b17      	ldr	r3, [pc, #92]	; (8002638 <HAL_UART_MspInit+0x138>)
 80025dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025e6:	4b14      	ldr	r3, [pc, #80]	; (8002638 <HAL_UART_MspInit+0x138>)
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	4a13      	ldr	r2, [pc, #76]	; (8002638 <HAL_UART_MspInit+0x138>)
 80025ec:	f043 0308 	orr.w	r3, r3, #8
 80025f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025f2:	4b11      	ldr	r3, [pc, #68]	; (8002638 <HAL_UART_MspInit+0x138>)
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	f003 0308 	and.w	r3, r3, #8
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80025fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002602:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002606:	2302      	movs	r3, #2
 8002608:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260c:	2300      	movs	r3, #0
 800260e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002612:	2303      	movs	r3, #3
 8002614:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002618:	2307      	movs	r3, #7
 800261a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800261e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002622:	4619      	mov	r1, r3
 8002624:	4807      	ldr	r0, [pc, #28]	; (8002644 <HAL_UART_MspInit+0x144>)
 8002626:	f002 f8ad 	bl	8004784 <HAL_GPIO_Init>
}
 800262a:	bf00      	nop
 800262c:	37b8      	adds	r7, #184	; 0xb8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40013800 	.word	0x40013800
 8002638:	40021000 	.word	0x40021000
 800263c:	48000400 	.word	0x48000400
 8002640:	40004800 	.word	0x40004800
 8002644:	48000c00 	.word	0x48000c00

08002648 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 800264c:	e7fe      	b.n	800264c <NMI_Handler+0x4>

0800264e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800264e:	b480      	push	{r7}
 8002650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002652:	e7fe      	b.n	8002652 <HardFault_Handler+0x4>

08002654 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002658:	e7fe      	b.n	8002658 <MemManage_Handler+0x4>

0800265a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265a:	b480      	push	{r7}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800265e:	e7fe      	b.n	800265e <BusFault_Handler+0x4>

08002660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002664:	e7fe      	b.n	8002664 <UsageFault_Handler+0x4>

08002666 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002678:	f000 fa46 	bl	8002b08 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800267c:	f00b fc78 	bl	800df70 <xTaskGetSchedulerState>
 8002680:	4603      	mov	r3, r0
 8002682:	2b01      	cmp	r3, #1
 8002684:	d001      	beq.n	800268a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002686:	f00c fb5f 	bl	800ed48 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	bd80      	pop	{r7, pc}

0800268e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002692:	2020      	movs	r0, #32
 8002694:	f002 fa38 	bl	8004b08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002698:	2040      	movs	r0, #64	; 0x40
 800269a:	f002 fa35 	bl	8004b08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800269e:	2080      	movs	r0, #128	; 0x80
 80026a0:	f002 fa32 	bl	8004b08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80026a4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80026a8:	f002 fa2e 	bl	8004b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026ac:	bf00      	nop
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80026b4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026b8:	f002 fa26 	bl	8004b08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80026bc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80026c0:	f002 fa22 	bl	8004b08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80026c4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026c8:	f002 fa1e 	bl	8004b08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80026cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80026d0:	f002 fa1a 	bl	8004b08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80026d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80026d8:	f002 fa16 	bl	8004b08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}

080026e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80026e6:	484c      	ldr	r0, [pc, #304]	; (8002818 <TIM7_IRQHandler+0x138>)
 80026e8:	f005 fa68 	bl	8007bbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */
	static int i = 0;
	float dato;
	if (disponible == 1) {
 80026ec:	4b4b      	ldr	r3, [pc, #300]	; (800281c <TIM7_IRQHandler+0x13c>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	f040 8088 	bne.w	8002806 <TIM7_IRQHandler+0x126>
		dato = ((float) audiobuf[i]
 80026f6:	4b4a      	ldr	r3, [pc, #296]	; (8002820 <TIM7_IRQHandler+0x140>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	4b4a      	ldr	r3, [pc, #296]	; (8002824 <TIM7_IRQHandler+0x144>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	4413      	add	r3, r2
 8002702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002706:	ee07 3a90 	vmov	s15, r3
 800270a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
				+ (float) (ganancia * mibuf[(unsigned char) (jj - efecto)][i])
 800270e:	4b46      	ldr	r3, [pc, #280]	; (8002828 <TIM7_IRQHandler+0x148>)
 8002710:	781a      	ldrb	r2, [r3, #0]
 8002712:	4b46      	ldr	r3, [pc, #280]	; (800282c <TIM7_IRQHandler+0x14c>)
 8002714:	781b      	ldrb	r3, [r3, #0]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	b2db      	uxtb	r3, r3
 800271a:	4618      	mov	r0, r3
 800271c:	4b41      	ldr	r3, [pc, #260]	; (8002824 <TIM7_IRQHandler+0x144>)
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	4943      	ldr	r1, [pc, #268]	; (8002830 <TIM7_IRQHandler+0x150>)
 8002722:	4603      	mov	r3, r0
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4403      	add	r3, r0
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8002730:	ee07 3a90 	vmov	s15, r3
 8002734:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002738:	4b3e      	ldr	r3, [pc, #248]	; (8002834 <TIM7_IRQHandler+0x154>)
 800273a:	edd3 7a00 	vldr	s15, [r3]
 800273e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002742:	ee37 7a27 	vadd.f32	s14, s14, s15
				+ (float) (ganancia
						* mibuf[(unsigned char) (jj - efecto - 1)][i])) / 3;
 8002746:	4b38      	ldr	r3, [pc, #224]	; (8002828 <TIM7_IRQHandler+0x148>)
 8002748:	781a      	ldrb	r2, [r3, #0]
 800274a:	4b38      	ldr	r3, [pc, #224]	; (800282c <TIM7_IRQHandler+0x14c>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	b2db      	uxtb	r3, r3
 8002752:	3b01      	subs	r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	4618      	mov	r0, r3
 8002758:	4b32      	ldr	r3, [pc, #200]	; (8002824 <TIM7_IRQHandler+0x144>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	4934      	ldr	r1, [pc, #208]	; (8002830 <TIM7_IRQHandler+0x150>)
 800275e:	4603      	mov	r3, r0
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4403      	add	r3, r0
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
				+ (float) (ganancia
 800276c:	ee07 3a90 	vmov	s15, r3
 8002770:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002774:	4b2f      	ldr	r3, [pc, #188]	; (8002834 <TIM7_IRQHandler+0x154>)
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800277e:	ee37 7a27 	vadd.f32	s14, s14, s15
		dato = ((float) audiobuf[i]
 8002782:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002786:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800278a:	edc7 7a01 	vstr	s15, [r7, #4]
		dato = dato * 2048.0 / 32768; //escalado de 16 bits del PC a 12
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fd feda 	bl	8000548 <__aeabi_f2d>
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	4b27      	ldr	r3, [pc, #156]	; (8002838 <TIM7_IRQHandler+0x158>)
 800279a:	f7fd ff2d 	bl	80005f8 <__aeabi_dmul>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	4610      	mov	r0, r2
 80027a4:	4619      	mov	r1, r3
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	4b24      	ldr	r3, [pc, #144]	; (800283c <TIM7_IRQHandler+0x15c>)
 80027ac:	f7fe f84e 	bl	800084c <__aeabi_ddiv>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	f7fe f9f6 	bl	8000ba8 <__aeabi_d2f>
 80027bc:	4603      	mov	r3, r0
 80027be:	607b      	str	r3, [r7, #4]
		dato = dato + 2048; //centrado positivo DAC
 80027c0:	edd7 7a01 	vldr	s15, [r7, #4]
 80027c4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002840 <TIM7_IRQHandler+0x160>
 80027c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027cc:	edc7 7a01 	vstr	s15, [r7, #4]
		i++;
 80027d0:	4b14      	ldr	r3, [pc, #80]	; (8002824 <TIM7_IRQHandler+0x144>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	4a13      	ldr	r2, [pc, #76]	; (8002824 <TIM7_IRQHandler+0x144>)
 80027d8:	6013      	str	r3, [r2, #0]
		if (i >= 24) {
 80027da:	4b12      	ldr	r3, [pc, #72]	; (8002824 <TIM7_IRQHandler+0x144>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b17      	cmp	r3, #23
 80027e0:	dd05      	ble.n	80027ee <TIM7_IRQHandler+0x10e>
			i = 0;
 80027e2:	4b10      	ldr	r3, [pc, #64]	; (8002824 <TIM7_IRQHandler+0x144>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
			disponible = 0;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <TIM7_IRQHandler+0x13c>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
		}
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R,
				(unsigned short int) dato);
 80027ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80027f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027f6:	ee17 3a90 	vmov	r3, s15
 80027fa:	b29b      	uxth	r3, r3
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R,
 80027fc:	2200      	movs	r2, #0
 80027fe:	2110      	movs	r1, #16
 8002800:	4810      	ldr	r0, [pc, #64]	; (8002844 <TIM7_IRQHandler+0x164>)
 8002802:	f001 fd67 	bl	80042d4 <HAL_DAC_SetValue>
	}
	__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8002806:	4b04      	ldr	r3, [pc, #16]	; (8002818 <TIM7_IRQHandler+0x138>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f06f 0201 	mvn.w	r2, #1
 800280e:	611a      	str	r2, [r3, #16]
  /* USER CODE END TIM7_IRQn 1 */
}
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	200009d0 	.word	0x200009d0
 800281c:	20000b78 	.word	0x20000b78
 8002820:	20000b7c 	.word	0x20000b7c
 8002824:	20000b48 	.word	0x20000b48
 8002828:	20003b80 	.word	0x20003b80
 800282c:	20000004 	.word	0x20000004
 8002830:	20000b80 	.word	0x20000b80
 8002834:	20000000 	.word	0x20000000
 8002838:	40a00000 	.word	0x40a00000
 800283c:	40e00000 	.word	0x40e00000
 8002840:	45000000 	.word	0x45000000
 8002844:	20000888 	.word	0x20000888

08002848 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800284c:	4802      	ldr	r0, [pc, #8]	; (8002858 <OTG_FS_IRQHandler+0x10>)
 800284e:	f002 fc03 	bl	8005058 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	2000c2e0 	.word	0x2000c2e0

0800285c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return 1;
 8002860:	2301      	movs	r3, #1
}
 8002862:	4618      	mov	r0, r3
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <_kill>:

int _kill(int pid, int sig)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002876:	f00d fc01 	bl	801007c <__errno>
 800287a:	4603      	mov	r3, r0
 800287c:	2216      	movs	r2, #22
 800287e:	601a      	str	r2, [r3, #0]
  return -1;
 8002880:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002884:	4618      	mov	r0, r3
 8002886:	3708      	adds	r7, #8
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <_exit>:

void _exit (int status)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002894:	f04f 31ff 	mov.w	r1, #4294967295
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ffe7 	bl	800286c <_kill>
  while (1) {}    /* Make sure we hang here */
 800289e:	e7fe      	b.n	800289e <_exit+0x12>

080028a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b086      	sub	sp, #24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	e00a      	b.n	80028c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028b2:	f3af 8000 	nop.w
 80028b6:	4601      	mov	r1, r0
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	60ba      	str	r2, [r7, #8]
 80028be:	b2ca      	uxtb	r2, r1
 80028c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	3301      	adds	r3, #1
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	dbf0      	blt.n	80028b2 <_read+0x12>
  }

  return len;
 80028d0:	687b      	ldr	r3, [r7, #4]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}

080028da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	b086      	sub	sp, #24
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e6:	2300      	movs	r3, #0
 80028e8:	617b      	str	r3, [r7, #20]
 80028ea:	e009      	b.n	8002900 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	1c5a      	adds	r2, r3, #1
 80028f0:	60ba      	str	r2, [r7, #8]
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	3301      	adds	r3, #1
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	697a      	ldr	r2, [r7, #20]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	429a      	cmp	r2, r3
 8002906:	dbf1      	blt.n	80028ec <_write+0x12>
  }
  return len;
 8002908:	687b      	ldr	r3, [r7, #4]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <_close>:

int _close(int file)
{
 8002912:	b480      	push	{r7}
 8002914:	b083      	sub	sp, #12
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800291a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
 8002932:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800293a:	605a      	str	r2, [r3, #4]
  return 0;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <_isatty>:

int _isatty(int file)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002952:	2301      	movs	r3, #1
}
 8002954:	4618      	mov	r0, r3
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002984:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <_sbrk+0x5c>)
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <_sbrk+0x60>)
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002990:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <_sbrk+0x64>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d102      	bne.n	800299e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002998:	4b11      	ldr	r3, [pc, #68]	; (80029e0 <_sbrk+0x64>)
 800299a:	4a12      	ldr	r2, [pc, #72]	; (80029e4 <_sbrk+0x68>)
 800299c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800299e:	4b10      	ldr	r3, [pc, #64]	; (80029e0 <_sbrk+0x64>)
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d207      	bcs.n	80029bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029ac:	f00d fb66 	bl	801007c <__errno>
 80029b0:	4603      	mov	r3, r0
 80029b2:	220c      	movs	r2, #12
 80029b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029b6:	f04f 33ff 	mov.w	r3, #4294967295
 80029ba:	e009      	b.n	80029d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029bc:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <_sbrk+0x64>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <_sbrk+0x64>)
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4413      	add	r3, r2
 80029ca:	4a05      	ldr	r2, [pc, #20]	; (80029e0 <_sbrk+0x64>)
 80029cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ce:	68fb      	ldr	r3, [r7, #12]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	20018000 	.word	0x20018000
 80029dc:	00000400 	.word	0x00000400
 80029e0:	20000b4c 	.word	0x20000b4c
 80029e4:	2000e948 	.word	0x2000e948

080029e8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <SystemInit+0x20>)
 80029ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f2:	4a05      	ldr	r2, [pc, #20]	; (8002a08 <SystemInit+0x20>)
 80029f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80029fc:	bf00      	nop
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000ed00 	.word	0xe000ed00

08002a0c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002a0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a44 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a10:	f7ff ffea 	bl	80029e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a14:	480c      	ldr	r0, [pc, #48]	; (8002a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a16:	490d      	ldr	r1, [pc, #52]	; (8002a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a18:	4a0d      	ldr	r2, [pc, #52]	; (8002a50 <LoopForever+0xe>)
  movs r3, #0
 8002a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a1c:	e002      	b.n	8002a24 <LoopCopyDataInit>

08002a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a22:	3304      	adds	r3, #4

08002a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a28:	d3f9      	bcc.n	8002a1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a2a:	4a0a      	ldr	r2, [pc, #40]	; (8002a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a2c:	4c0a      	ldr	r4, [pc, #40]	; (8002a58 <LoopForever+0x16>)
  movs r3, #0
 8002a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a30:	e001      	b.n	8002a36 <LoopFillZerobss>

08002a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a34:	3204      	adds	r2, #4

08002a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a38:	d3fb      	bcc.n	8002a32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a3a:	f00d fb25 	bl	8010088 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a3e:	f7fe fd8b 	bl	8001558 <main>

08002a42 <LoopForever>:

LoopForever:
    b LoopForever
 8002a42:	e7fe      	b.n	8002a42 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002a44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a4c:	200007fc 	.word	0x200007fc
  ldr r2, =_sidata
 8002a50:	08014df0 	.word	0x08014df0
  ldr r2, =_sbss
 8002a54:	200007fc 	.word	0x200007fc
  ldr r4, =_ebss
 8002a58:	2000e948 	.word	0x2000e948

08002a5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a5c:	e7fe      	b.n	8002a5c <ADC1_2_IRQHandler>

08002a5e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b082      	sub	sp, #8
 8002a62:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a64:	2300      	movs	r3, #0
 8002a66:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f001 fb83 	bl	8004174 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a6e:	200f      	movs	r0, #15
 8002a70:	f000 f80e 	bl	8002a90 <HAL_InitTick>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	71fb      	strb	r3, [r7, #7]
 8002a7e:	e001      	b.n	8002a84 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a80:	f7ff fb28 	bl	80020d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a84:	79fb      	ldrb	r3, [r7, #7]
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002a9c:	4b17      	ldr	r3, [pc, #92]	; (8002afc <HAL_InitTick+0x6c>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d023      	beq.n	8002aec <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002aa4:	4b16      	ldr	r3, [pc, #88]	; (8002b00 <HAL_InitTick+0x70>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b14      	ldr	r3, [pc, #80]	; (8002afc <HAL_InitTick+0x6c>)
 8002aaa:	781b      	ldrb	r3, [r3, #0]
 8002aac:	4619      	mov	r1, r3
 8002aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aba:	4618      	mov	r0, r3
 8002abc:	f001 fb8f 	bl	80041de <HAL_SYSTICK_Config>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10f      	bne.n	8002ae6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b0f      	cmp	r3, #15
 8002aca:	d809      	bhi.n	8002ae0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002acc:	2200      	movs	r2, #0
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ad4:	f001 fb59 	bl	800418a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ad8:	4a0a      	ldr	r2, [pc, #40]	; (8002b04 <HAL_InitTick+0x74>)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e007      	b.n	8002af0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
 8002ae4:	e004      	b.n	8002af0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	73fb      	strb	r3, [r7, #15]
 8002aea:	e001      	b.n	8002af0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000010 	.word	0x20000010
 8002b00:	20000008 	.word	0x20000008
 8002b04:	2000000c 	.word	0x2000000c

08002b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <HAL_IncTick+0x20>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_IncTick+0x24>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <HAL_IncTick+0x24>)
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000010 	.word	0x20000010
 8002b2c:	20000b50 	.word	0x20000b50

08002b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return uwTick;
 8002b34:	4b03      	ldr	r3, [pc, #12]	; (8002b44 <HAL_GetTick+0x14>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	20000b50 	.word	0x20000b50

08002b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b50:	f7ff ffee 	bl	8002b30 <HAL_GetTick>
 8002b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b60:	d005      	beq.n	8002b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002b62:	4b0a      	ldr	r3, [pc, #40]	; (8002b8c <HAL_Delay+0x44>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b6e:	bf00      	nop
 8002b70:	f7ff ffde 	bl	8002b30 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d8f7      	bhi.n	8002b70 <HAL_Delay+0x28>
  {
  }
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000010 	.word	0x20000010

08002b90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	609a      	str	r2, [r3, #8]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	609a      	str	r2, [r3, #8]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3360      	adds	r3, #96	; 0x60
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	4b08      	ldr	r3, [pc, #32]	; (8002c3c <LL_ADC_SetOffset+0x44>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002c30:	bf00      	nop
 8002c32:	371c      	adds	r7, #28
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr
 8002c3c:	03fff000 	.word	0x03fff000

08002c40 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3360      	adds	r3, #96	; 0x60
 8002c4e:	461a      	mov	r2, r3
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3714      	adds	r7, #20
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	3360      	adds	r3, #96	; 0x60
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002c96:	bf00      	nop
 8002c98:	371c      	adds	r7, #28
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr

08002ca2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002ca2:	b480      	push	{r7}
 8002ca4:	b083      	sub	sp, #12
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002cba:	2300      	movs	r3, #0
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b087      	sub	sp, #28
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	3330      	adds	r3, #48	; 0x30
 8002cd8:	461a      	mov	r2, r3
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	0a1b      	lsrs	r3, r3, #8
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	4413      	add	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	211f      	movs	r1, #31
 8002cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0e9b      	lsrs	r3, r3, #26
 8002d00:	f003 011f 	and.w	r1, r3, #31
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d14:	bf00      	nop
 8002d16:	371c      	adds	r7, #28
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b087      	sub	sp, #28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	3314      	adds	r3, #20
 8002d30:	461a      	mov	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	0e5b      	lsrs	r3, r3, #25
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	4413      	add	r3, r2
 8002d3e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	0d1b      	lsrs	r3, r3, #20
 8002d48:	f003 031f 	and.w	r3, r3, #31
 8002d4c:	2107      	movs	r1, #7
 8002d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d52:	43db      	mvns	r3, r3
 8002d54:	401a      	ands	r2, r3
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	0d1b      	lsrs	r3, r3, #20
 8002d5a:	f003 031f 	and.w	r3, r3, #31
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	fa01 f303 	lsl.w	r3, r1, r3
 8002d64:	431a      	orrs	r2, r3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d6a:	bf00      	nop
 8002d6c:	371c      	adds	r7, #28
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
	...

08002d78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d90:	43db      	mvns	r3, r3
 8002d92:	401a      	ands	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f003 0318 	and.w	r3, r3, #24
 8002d9a:	4908      	ldr	r1, [pc, #32]	; (8002dbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d9c:	40d9      	lsrs	r1, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	400b      	ands	r3, r1
 8002da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da6:	431a      	orrs	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002dae:	bf00      	nop
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	0007ffff 	.word	0x0007ffff

08002dc0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002e08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	6093      	str	r3, [r2, #8]
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e30:	d101      	bne.n	8002e36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e80:	d101      	bne.n	8002e86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ea4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ea8:	f043 0201 	orr.w	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f003 0301 	and.w	r3, r3, #1
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d101      	bne.n	8002ed4 <LL_ADC_IsEnabled+0x18>
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e000      	b.n	8002ed6 <LL_ADC_IsEnabled+0x1a>
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ef2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ef6:	f043 0204 	orr.w	r2, r3, #4
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002efe:	bf00      	nop
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	d101      	bne.n	8002f22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e000      	b.n	8002f24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 0308 	and.w	r3, r3, #8
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d101      	bne.n	8002f48 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f44:	2301      	movs	r3, #1
 8002f46:	e000      	b.n	8002f4a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
	...

08002f58 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b089      	sub	sp, #36	; 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f60:	2300      	movs	r3, #0
 8002f62:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e130      	b.n	80031d4 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d109      	bne.n	8002f94 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff f8cf 	bl	8002124 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ff3f 	bl	8002e1c <LL_ADC_IsDeepPowerDownEnabled>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d004      	beq.n	8002fae <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff25 	bl	8002df8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff ff5a 	bl	8002e6c <LL_ADC_IsInternalRegulatorEnabled>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d115      	bne.n	8002fea <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff ff3e 	bl	8002e44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fc8:	4b84      	ldr	r3, [pc, #528]	; (80031dc <HAL_ADC_Init+0x284>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	099b      	lsrs	r3, r3, #6
 8002fce:	4a84      	ldr	r2, [pc, #528]	; (80031e0 <HAL_ADC_Init+0x288>)
 8002fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd4:	099b      	lsrs	r3, r3, #6
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002fdc:	e002      	b.n	8002fe4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1f9      	bne.n	8002fde <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7ff ff3c 	bl	8002e6c <LL_ADC_IsInternalRegulatorEnabled>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10d      	bne.n	8003016 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffe:	f043 0210 	orr.w	r2, r3, #16
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300a:	f043 0201 	orr.w	r2, r3, #1
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff ff75 	bl	8002f0a <LL_ADC_REG_IsConversionOngoing>
 8003020:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003026:	f003 0310 	and.w	r3, r3, #16
 800302a:	2b00      	cmp	r3, #0
 800302c:	f040 80c9 	bne.w	80031c2 <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b00      	cmp	r3, #0
 8003034:	f040 80c5 	bne.w	80031c2 <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003040:	f043 0202 	orr.w	r2, r3, #2
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff35 	bl	8002ebc <LL_ADC_IsEnabled>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d115      	bne.n	8003084 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003058:	4862      	ldr	r0, [pc, #392]	; (80031e4 <HAL_ADC_Init+0x28c>)
 800305a:	f7ff ff2f 	bl	8002ebc <LL_ADC_IsEnabled>
 800305e:	4604      	mov	r4, r0
 8003060:	4861      	ldr	r0, [pc, #388]	; (80031e8 <HAL_ADC_Init+0x290>)
 8003062:	f7ff ff2b 	bl	8002ebc <LL_ADC_IsEnabled>
 8003066:	4603      	mov	r3, r0
 8003068:	431c      	orrs	r4, r3
 800306a:	4860      	ldr	r0, [pc, #384]	; (80031ec <HAL_ADC_Init+0x294>)
 800306c:	f7ff ff26 	bl	8002ebc <LL_ADC_IsEnabled>
 8003070:	4603      	mov	r3, r0
 8003072:	4323      	orrs	r3, r4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d105      	bne.n	8003084 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4619      	mov	r1, r3
 800307e:	485c      	ldr	r0, [pc, #368]	; (80031f0 <HAL_ADC_Init+0x298>)
 8003080:	f7ff fd86 	bl	8002b90 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	7e5b      	ldrb	r3, [r3, #25]
 8003088:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800308e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003094:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800309a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030a2:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d106      	bne.n	80030c0 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b6:	3b01      	subs	r3, #1
 80030b8:	045b      	lsls	r3, r3, #17
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d009      	beq.n	80030dc <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	4b44      	ldr	r3, [pc, #272]	; (80031f4 <HAL_ADC_Init+0x29c>)
 80030e4:	4013      	ands	r3, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	69b9      	ldr	r1, [r7, #24]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff1b 	bl	8002f30 <LL_ADC_INJ_IsConversionOngoing>
 80030fa:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d13d      	bne.n	800317e <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d13a      	bne.n	800317e <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800310c:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003114:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003124:	f023 0302 	bic.w	r3, r3, #2
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	6812      	ldr	r2, [r2, #0]
 800312c:	69b9      	ldr	r1, [r7, #24]
 800312e:	430b      	orrs	r3, r1
 8003130:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003138:	2b01      	cmp	r3, #1
 800313a:	d118      	bne.n	800316e <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003146:	f023 0304 	bic.w	r3, r3, #4
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003152:	4311      	orrs	r1, r2
 8003154:	687a      	ldr	r2, [r7, #4]
 8003156:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003158:	4311      	orrs	r1, r2
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800315e:	430a      	orrs	r2, r1
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	611a      	str	r2, [r3, #16]
 800316c:	e007      	b.n	800317e <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f022 0201 	bic.w	r2, r2, #1
 800317c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d10c      	bne.n	80031a0 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	f023 010f 	bic.w	r1, r3, #15
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	1e5a      	subs	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	430a      	orrs	r2, r1
 800319c:	631a      	str	r2, [r3, #48]	; 0x30
 800319e:	e007      	b.n	80031b0 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 020f 	bic.w	r2, r2, #15
 80031ae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b4:	f023 0303 	bic.w	r3, r3, #3
 80031b8:	f043 0201 	orr.w	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	655a      	str	r2, [r3, #84]	; 0x54
 80031c0:	e007      	b.n	80031d2 <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c6:	f043 0210 	orr.w	r2, r3, #16
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3724      	adds	r7, #36	; 0x24
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd90      	pop	{r4, r7, pc}
 80031dc:	20000008 	.word	0x20000008
 80031e0:	053e2d63 	.word	0x053e2d63
 80031e4:	50040000 	.word	0x50040000
 80031e8:	50040100 	.word	0x50040100
 80031ec:	50040200 	.word	0x50040200
 80031f0:	50040300 	.word	0x50040300
 80031f4:	fff0c007 	.word	0xfff0c007

080031f8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003200:	4857      	ldr	r0, [pc, #348]	; (8003360 <HAL_ADC_Start+0x168>)
 8003202:	f7ff fddd 	bl	8002dc0 <LL_ADC_GetMultimode>
 8003206:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fe7c 	bl	8002f0a <LL_ADC_REG_IsConversionOngoing>
 8003212:	4603      	mov	r3, r0
 8003214:	2b00      	cmp	r3, #0
 8003216:	f040 809c 	bne.w	8003352 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003220:	2b01      	cmp	r3, #1
 8003222:	d101      	bne.n	8003228 <HAL_ADC_Start+0x30>
 8003224:	2302      	movs	r3, #2
 8003226:	e097      	b.n	8003358 <HAL_ADC_Start+0x160>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fd73 	bl	8003d1c <ADC_Enable>
 8003236:	4603      	mov	r3, r0
 8003238:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	2b00      	cmp	r3, #0
 800323e:	f040 8083 	bne.w	8003348 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003246:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800324a:	f023 0301 	bic.w	r3, r3, #1
 800324e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a42      	ldr	r2, [pc, #264]	; (8003364 <HAL_ADC_Start+0x16c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d002      	beq.n	8003266 <HAL_ADC_Start+0x6e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	e000      	b.n	8003268 <HAL_ADC_Start+0x70>
 8003266:	4b40      	ldr	r3, [pc, #256]	; (8003368 <HAL_ADC_Start+0x170>)
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	4293      	cmp	r3, r2
 800326e:	d002      	beq.n	8003276 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d105      	bne.n	8003282 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003286:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800328a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800328e:	d106      	bne.n	800329e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003294:	f023 0206 	bic.w	r2, r3, #6
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	659a      	str	r2, [r3, #88]	; 0x58
 800329c:	e002      	b.n	80032a4 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	221c      	movs	r2, #28
 80032aa:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a2a      	ldr	r2, [pc, #168]	; (8003364 <HAL_ADC_Start+0x16c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d002      	beq.n	80032c4 <HAL_ADC_Start+0xcc>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	e000      	b.n	80032c6 <HAL_ADC_Start+0xce>
 80032c4:	4b28      	ldr	r3, [pc, #160]	; (8003368 <HAL_ADC_Start+0x170>)
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6812      	ldr	r2, [r2, #0]
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d008      	beq.n	80032e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d005      	beq.n	80032e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b05      	cmp	r3, #5
 80032d8:	d002      	beq.n	80032e0 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b09      	cmp	r3, #9
 80032de:	d114      	bne.n	800330a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d007      	beq.n	80032fe <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fded 	bl	8002ee2 <LL_ADC_REG_StartConversion>
 8003308:	e025      	b.n	8003356 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a12      	ldr	r2, [pc, #72]	; (8003364 <HAL_ADC_Start+0x16c>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d002      	beq.n	8003326 <HAL_ADC_Start+0x12e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	e000      	b.n	8003328 <HAL_ADC_Start+0x130>
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_ADC_Start+0x170>)
 8003328:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00f      	beq.n	8003356 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800333e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	655a      	str	r2, [r3, #84]	; 0x54
 8003346:	e006      	b.n	8003356 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003350:	e001      	b.n	8003356 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003352:	2302      	movs	r3, #2
 8003354:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003356:	7dfb      	ldrb	r3, [r7, #23]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3718      	adds	r7, #24
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	50040300 	.word	0x50040300
 8003364:	50040100 	.word	0x50040100
 8003368:	50040000 	.word	0x50040000

0800336c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b088      	sub	sp, #32
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003376:	4866      	ldr	r0, [pc, #408]	; (8003510 <HAL_ADC_PollForConversion+0x1a4>)
 8003378:	f7ff fd22 	bl	8002dc0 <LL_ADC_GetMultimode>
 800337c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	2b08      	cmp	r3, #8
 8003384:	d102      	bne.n	800338c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003386:	2308      	movs	r3, #8
 8003388:	61fb      	str	r3, [r7, #28]
 800338a:	e02a      	b.n	80033e2 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d005      	beq.n	800339e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	2b05      	cmp	r3, #5
 8003396:	d002      	beq.n	800339e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	2b09      	cmp	r3, #9
 800339c:	d111      	bne.n	80033c2 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0301 	and.w	r3, r3, #1
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d007      	beq.n	80033bc <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b0:	f043 0220 	orr.w	r2, r3, #32
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0a4      	b.n	8003506 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80033bc:	2304      	movs	r3, #4
 80033be:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80033c0:	e00f      	b.n	80033e2 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80033c2:	4853      	ldr	r0, [pc, #332]	; (8003510 <HAL_ADC_PollForConversion+0x1a4>)
 80033c4:	f7ff fd0a 	bl	8002ddc <LL_ADC_GetMultiDMATransfer>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d2:	f043 0220 	orr.w	r2, r3, #32
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e093      	b.n	8003506 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80033de:	2304      	movs	r3, #4
 80033e0:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80033e2:	f7ff fba5 	bl	8002b30 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033e8:	e021      	b.n	800342e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d01d      	beq.n	800342e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80033f2:	f7ff fb9d 	bl	8002b30 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <HAL_ADC_PollForConversion+0x9c>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d112      	bne.n	800342e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	4013      	ands	r3, r2
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10b      	bne.n	800342e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341a:	f043 0204 	orr.w	r2, r3, #4
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e06b      	b.n	8003506 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0d6      	beq.n	80033ea <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003440:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fc28 	bl	8002ca2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01c      	beq.n	8003492 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	7e5b      	ldrb	r3, [r3, #25]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d118      	bne.n	8003492 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b08      	cmp	r3, #8
 800346c:	d111      	bne.n	8003492 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d105      	bne.n	8003492 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348a:	f043 0201 	orr.w	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a1f      	ldr	r2, [pc, #124]	; (8003514 <HAL_ADC_PollForConversion+0x1a8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d002      	beq.n	80034a2 <HAL_ADC_PollForConversion+0x136>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	e000      	b.n	80034a4 <HAL_ADC_PollForConversion+0x138>
 80034a2:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_ADC_PollForConversion+0x1ac>)
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d008      	beq.n	80034be <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d002      	beq.n	80034be <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	2b09      	cmp	r3, #9
 80034bc:	d104      	bne.n	80034c8 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	61bb      	str	r3, [r7, #24]
 80034c6:	e00c      	b.n	80034e2 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a11      	ldr	r2, [pc, #68]	; (8003514 <HAL_ADC_PollForConversion+0x1a8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d002      	beq.n	80034d8 <HAL_ADC_PollForConversion+0x16c>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	e000      	b.n	80034da <HAL_ADC_PollForConversion+0x16e>
 80034d8:	4b0f      	ldr	r3, [pc, #60]	; (8003518 <HAL_ADC_PollForConversion+0x1ac>)
 80034da:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	2b08      	cmp	r3, #8
 80034e6:	d104      	bne.n	80034f2 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2208      	movs	r2, #8
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	e008      	b.n	8003504 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d103      	bne.n	8003504 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	220c      	movs	r2, #12
 8003502:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3720      	adds	r7, #32
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	50040300 	.word	0x50040300
 8003514:	50040100 	.word	0x50040100
 8003518:	50040000 	.word	0x50040000

0800351c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800352a:	4618      	mov	r0, r3
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b0b6      	sub	sp, #216	; 0xd8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003548:	2300      	movs	r3, #0
 800354a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_ADC_ConfigChannel+0x22>
 8003556:	2302      	movs	r3, #2
 8003558:	e3c9      	b.n	8003cee <HAL_ADC_ConfigChannel+0x7b6>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fccf 	bl	8002f0a <LL_ADC_REG_IsConversionOngoing>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	f040 83aa 	bne.w	8003cc8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b05      	cmp	r3, #5
 8003582:	d824      	bhi.n	80035ce <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	3b02      	subs	r3, #2
 800358a:	2b03      	cmp	r3, #3
 800358c:	d81b      	bhi.n	80035c6 <HAL_ADC_ConfigChannel+0x8e>
 800358e:	a201      	add	r2, pc, #4	; (adr r2, 8003594 <HAL_ADC_ConfigChannel+0x5c>)
 8003590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003594:	080035a5 	.word	0x080035a5
 8003598:	080035ad 	.word	0x080035ad
 800359c:	080035b5 	.word	0x080035b5
 80035a0:	080035bd 	.word	0x080035bd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80035a4:	230c      	movs	r3, #12
 80035a6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035aa:	e010      	b.n	80035ce <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80035ac:	2312      	movs	r3, #18
 80035ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035b2:	e00c      	b.n	80035ce <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80035b4:	2318      	movs	r3, #24
 80035b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035ba:	e008      	b.n	80035ce <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80035bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035c4:	e003      	b.n	80035ce <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80035c6:	2306      	movs	r3, #6
 80035c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80035cc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	461a      	mov	r2, r3
 80035d8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80035dc:	f7ff fb74 	bl	8002cc8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fc90 	bl	8002f0a <LL_ADC_REG_IsConversionOngoing>
 80035ea:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fc9c 	bl	8002f30 <LL_ADC_INJ_IsConversionOngoing>
 80035f8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003600:	2b00      	cmp	r3, #0
 8003602:	f040 81a4 	bne.w	800394e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003606:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800360a:	2b00      	cmp	r3, #0
 800360c:	f040 819f 	bne.w	800394e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6818      	ldr	r0, [r3, #0]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	6819      	ldr	r1, [r3, #0]
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	461a      	mov	r2, r3
 800361e:	f7ff fb7f 	bl	8002d20 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695a      	ldr	r2, [r3, #20]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	08db      	lsrs	r3, r3, #3
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	005b      	lsls	r3, r3, #1
 8003634:	fa02 f303 	lsl.w	r3, r2, r3
 8003638:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	2b04      	cmp	r3, #4
 8003642:	d00a      	beq.n	800365a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6818      	ldr	r0, [r3, #0]
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	6919      	ldr	r1, [r3, #16]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003654:	f7ff fad0 	bl	8002bf8 <LL_ADC_SetOffset>
 8003658:	e179      	b.n	800394e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2100      	movs	r1, #0
 8003660:	4618      	mov	r0, r3
 8003662:	f7ff faed 	bl	8002c40 <LL_ADC_GetOffsetChannel>
 8003666:	4603      	mov	r3, r0
 8003668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10a      	bne.n	8003686 <HAL_ADC_ConfigChannel+0x14e>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2100      	movs	r1, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f7ff fae2 	bl	8002c40 <LL_ADC_GetOffsetChannel>
 800367c:	4603      	mov	r3, r0
 800367e:	0e9b      	lsrs	r3, r3, #26
 8003680:	f003 021f 	and.w	r2, r3, #31
 8003684:	e01e      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x18c>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2100      	movs	r1, #0
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff fad7 	bl	8002c40 <LL_ADC_GetOffsetChannel>
 8003692:	4603      	mov	r3, r0
 8003694:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80036b4:	2320      	movs	r3, #32
 80036b6:	e004      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80036b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036bc:	fab3 f383 	clz	r3, r3
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d105      	bne.n	80036dc <HAL_ADC_ConfigChannel+0x1a4>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0e9b      	lsrs	r3, r3, #26
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	e018      	b.n	800370e <HAL_ADC_ConfigChannel+0x1d6>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80036f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80036f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80036f8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8003700:	2320      	movs	r3, #32
 8003702:	e004      	b.n	800370e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8003704:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800370e:	429a      	cmp	r2, r3
 8003710:	d106      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2200      	movs	r2, #0
 8003718:	2100      	movs	r1, #0
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff faa6 	bl	8002c6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2101      	movs	r1, #1
 8003726:	4618      	mov	r0, r3
 8003728:	f7ff fa8a 	bl	8002c40 <LL_ADC_GetOffsetChannel>
 800372c:	4603      	mov	r3, r0
 800372e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10a      	bne.n	800374c <HAL_ADC_ConfigChannel+0x214>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2101      	movs	r1, #1
 800373c:	4618      	mov	r0, r3
 800373e:	f7ff fa7f 	bl	8002c40 <LL_ADC_GetOffsetChannel>
 8003742:	4603      	mov	r3, r0
 8003744:	0e9b      	lsrs	r3, r3, #26
 8003746:	f003 021f 	and.w	r2, r3, #31
 800374a:	e01e      	b.n	800378a <HAL_ADC_ConfigChannel+0x252>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f7ff fa74 	bl	8002c40 <LL_ADC_GetOffsetChannel>
 8003758:	4603      	mov	r3, r0
 800375a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003762:	fa93 f3a3 	rbit	r3, r3
 8003766:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800376a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800376e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003772:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800377a:	2320      	movs	r3, #32
 800377c:	e004      	b.n	8003788 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800377e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003782:	fab3 f383 	clz	r3, r3
 8003786:	b2db      	uxtb	r3, r3
 8003788:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003792:	2b00      	cmp	r3, #0
 8003794:	d105      	bne.n	80037a2 <HAL_ADC_ConfigChannel+0x26a>
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	0e9b      	lsrs	r3, r3, #26
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	e018      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x29c>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037ae:	fa93 f3a3 	rbit	r3, r3
 80037b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80037b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80037be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80037c6:	2320      	movs	r3, #32
 80037c8:	e004      	b.n	80037d4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80037ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037ce:	fab3 f383 	clz	r3, r3
 80037d2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d106      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2200      	movs	r2, #0
 80037de:	2101      	movs	r1, #1
 80037e0:	4618      	mov	r0, r3
 80037e2:	f7ff fa43 	bl	8002c6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2102      	movs	r1, #2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff fa27 	bl	8002c40 <LL_ADC_GetOffsetChannel>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <HAL_ADC_ConfigChannel+0x2da>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2102      	movs	r1, #2
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff fa1c 	bl	8002c40 <LL_ADC_GetOffsetChannel>
 8003808:	4603      	mov	r3, r0
 800380a:	0e9b      	lsrs	r3, r3, #26
 800380c:	f003 021f 	and.w	r2, r3, #31
 8003810:	e01e      	b.n	8003850 <HAL_ADC_ConfigChannel+0x318>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2102      	movs	r1, #2
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff fa11 	bl	8002c40 <LL_ADC_GetOffsetChannel>
 800381e:	4603      	mov	r3, r0
 8003820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003824:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003828:	fa93 f3a3 	rbit	r3, r3
 800382c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8003830:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003834:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8003838:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8003840:	2320      	movs	r3, #32
 8003842:	e004      	b.n	800384e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8003844:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003848:	fab3 f383 	clz	r3, r3
 800384c:	b2db      	uxtb	r3, r3
 800384e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003858:	2b00      	cmp	r3, #0
 800385a:	d105      	bne.n	8003868 <HAL_ADC_ConfigChannel+0x330>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	0e9b      	lsrs	r3, r3, #26
 8003862:	f003 031f 	and.w	r3, r3, #31
 8003866:	e014      	b.n	8003892 <HAL_ADC_ConfigChannel+0x35a>
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003870:	fa93 f3a3 	rbit	r3, r3
 8003874:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003876:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003878:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800387c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8003884:	2320      	movs	r3, #32
 8003886:	e004      	b.n	8003892 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8003888:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003892:	429a      	cmp	r2, r3
 8003894:	d106      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	2102      	movs	r1, #2
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff f9e4 	bl	8002c6c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2103      	movs	r1, #3
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff f9c8 	bl	8002c40 <LL_ADC_GetOffsetChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10a      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x398>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2103      	movs	r1, #3
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff f9bd 	bl	8002c40 <LL_ADC_GetOffsetChannel>
 80038c6:	4603      	mov	r3, r0
 80038c8:	0e9b      	lsrs	r3, r3, #26
 80038ca:	f003 021f 	and.w	r2, r3, #31
 80038ce:	e017      	b.n	8003900 <HAL_ADC_ConfigChannel+0x3c8>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2103      	movs	r1, #3
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff f9b2 	bl	8002c40 <LL_ADC_GetOffsetChannel>
 80038dc:	4603      	mov	r3, r0
 80038de:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038e2:	fa93 f3a3 	rbit	r3, r3
 80038e6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80038e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ea:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80038ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80038f2:	2320      	movs	r3, #32
 80038f4:	e003      	b.n	80038fe <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80038f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038f8:	fab3 f383 	clz	r3, r3
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003908:	2b00      	cmp	r3, #0
 800390a:	d105      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x3e0>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	0e9b      	lsrs	r3, r3, #26
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	e011      	b.n	800393c <HAL_ADC_ConfigChannel+0x404>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800391e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003920:	fa93 f3a3 	rbit	r3, r3
 8003924:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8003926:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003928:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800392a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003930:	2320      	movs	r3, #32
 8003932:	e003      	b.n	800393c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003934:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003936:	fab3 f383 	clz	r3, r3
 800393a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800393c:	429a      	cmp	r2, r3
 800393e:	d106      	bne.n	800394e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2200      	movs	r2, #0
 8003946:	2103      	movs	r1, #3
 8003948:	4618      	mov	r0, r3
 800394a:	f7ff f98f 	bl	8002c6c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4618      	mov	r0, r3
 8003954:	f7ff fab2 	bl	8002ebc <LL_ADC_IsEnabled>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	f040 8140 	bne.w	8003be0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6818      	ldr	r0, [r3, #0]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	6819      	ldr	r1, [r3, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	461a      	mov	r2, r3
 800396e:	f7ff fa03 	bl	8002d78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	4a8f      	ldr	r2, [pc, #572]	; (8003bb4 <HAL_ADC_ConfigChannel+0x67c>)
 8003978:	4293      	cmp	r3, r2
 800397a:	f040 8131 	bne.w	8003be0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10b      	bne.n	80039a6 <HAL_ADC_ConfigChannel+0x46e>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	0e9b      	lsrs	r3, r3, #26
 8003994:	3301      	adds	r3, #1
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	2b09      	cmp	r3, #9
 800399c:	bf94      	ite	ls
 800399e:	2301      	movls	r3, #1
 80039a0:	2300      	movhi	r3, #0
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	e019      	b.n	80039da <HAL_ADC_ConfigChannel+0x4a2>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80039b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80039b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d101      	bne.n	80039c2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 80039be:	2320      	movs	r3, #32
 80039c0:	e003      	b.n	80039ca <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80039c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039c4:	fab3 f383 	clz	r3, r3
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	3301      	adds	r3, #1
 80039cc:	f003 031f 	and.w	r3, r3, #31
 80039d0:	2b09      	cmp	r3, #9
 80039d2:	bf94      	ite	ls
 80039d4:	2301      	movls	r3, #1
 80039d6:	2300      	movhi	r3, #0
 80039d8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d079      	beq.n	8003ad2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d107      	bne.n	80039fa <HAL_ADC_ConfigChannel+0x4c2>
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	0e9b      	lsrs	r3, r3, #26
 80039f0:	3301      	adds	r3, #1
 80039f2:	069b      	lsls	r3, r3, #26
 80039f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039f8:	e015      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x4ee>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a02:	fa93 f3a3 	rbit	r3, r3
 8003a06:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a0a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8003a12:	2320      	movs	r3, #32
 8003a14:	e003      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8003a16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a18:	fab3 f383 	clz	r3, r3
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	069b      	lsls	r3, r3, #26
 8003a22:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d109      	bne.n	8003a46 <HAL_ADC_ConfigChannel+0x50e>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	0e9b      	lsrs	r3, r3, #26
 8003a38:	3301      	adds	r3, #1
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	2101      	movs	r1, #1
 8003a40:	fa01 f303 	lsl.w	r3, r1, r3
 8003a44:	e017      	b.n	8003a76 <HAL_ADC_ConfigChannel+0x53e>
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a4e:	fa93 f3a3 	rbit	r3, r3
 8003a52:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a56:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8003a5e:	2320      	movs	r3, #32
 8003a60:	e003      	b.n	8003a6a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8003a62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a64:	fab3 f383 	clz	r3, r3
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	f003 031f 	and.w	r3, r3, #31
 8003a70:	2101      	movs	r1, #1
 8003a72:	fa01 f303 	lsl.w	r3, r1, r3
 8003a76:	ea42 0103 	orr.w	r1, r2, r3
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10a      	bne.n	8003a9c <HAL_ADC_ConfigChannel+0x564>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	0e9b      	lsrs	r3, r3, #26
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f003 021f 	and.w	r2, r3, #31
 8003a92:	4613      	mov	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	4413      	add	r3, r2
 8003a98:	051b      	lsls	r3, r3, #20
 8003a9a:	e018      	b.n	8003ace <HAL_ADC_ConfigChannel+0x596>
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aa4:	fa93 f3a3 	rbit	r3, r3
 8003aa8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aac:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8003ab4:	2320      	movs	r3, #32
 8003ab6:	e003      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aba:	fab3 f383 	clz	r3, r3
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	f003 021f 	and.w	r2, r3, #31
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	4413      	add	r3, r2
 8003acc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	e081      	b.n	8003bd6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d107      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x5b6>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	0e9b      	lsrs	r3, r3, #26
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	069b      	lsls	r3, r3, #26
 8003ae8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aec:	e015      	b.n	8003b1a <HAL_ADC_ConfigChannel+0x5e2>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8003b06:	2320      	movs	r3, #32
 8003b08:	e003      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8003b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	3301      	adds	r3, #1
 8003b14:	069b      	lsls	r3, r3, #26
 8003b16:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d109      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x602>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	0e9b      	lsrs	r3, r3, #26
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	2101      	movs	r1, #1
 8003b34:	fa01 f303 	lsl.w	r3, r1, r3
 8003b38:	e017      	b.n	8003b6a <HAL_ADC_ConfigChannel+0x632>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	fa93 f3a3 	rbit	r3, r3
 8003b46:	61bb      	str	r3, [r7, #24]
  return result;
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8003b52:	2320      	movs	r3, #32
 8003b54:	e003      	b.n	8003b5e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8003b56:	6a3b      	ldr	r3, [r7, #32]
 8003b58:	fab3 f383 	clz	r3, r3
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	3301      	adds	r3, #1
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	2101      	movs	r1, #1
 8003b66:	fa01 f303 	lsl.w	r3, r1, r3
 8003b6a:	ea42 0103 	orr.w	r1, r2, r3
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10d      	bne.n	8003b96 <HAL_ADC_ConfigChannel+0x65e>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	0e9b      	lsrs	r3, r3, #26
 8003b80:	3301      	adds	r3, #1
 8003b82:	f003 021f 	and.w	r2, r3, #31
 8003b86:	4613      	mov	r3, r2
 8003b88:	005b      	lsls	r3, r3, #1
 8003b8a:	4413      	add	r3, r2
 8003b8c:	3b1e      	subs	r3, #30
 8003b8e:	051b      	lsls	r3, r3, #20
 8003b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b94:	e01e      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x69c>
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	fa93 f3a3 	rbit	r3, r3
 8003ba2:	60fb      	str	r3, [r7, #12]
  return result;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d104      	bne.n	8003bb8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8003bae:	2320      	movs	r3, #32
 8003bb0:	e006      	b.n	8003bc0 <HAL_ADC_ConfigChannel+0x688>
 8003bb2:	bf00      	nop
 8003bb4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	fab3 f383 	clz	r3, r3
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f003 021f 	and.w	r2, r3, #31
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	4413      	add	r3, r2
 8003bcc:	3b1e      	subs	r3, #30
 8003bce:	051b      	lsls	r3, r3, #20
 8003bd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bd4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f7ff f8a0 	bl	8002d20 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	4b44      	ldr	r3, [pc, #272]	; (8003cf8 <HAL_ADC_ConfigChannel+0x7c0>)
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d07a      	beq.n	8003ce2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bec:	4843      	ldr	r0, [pc, #268]	; (8003cfc <HAL_ADC_ConfigChannel+0x7c4>)
 8003bee:	f7fe fff5 	bl	8002bdc <LL_ADC_GetCommonPathInternalCh>
 8003bf2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a41      	ldr	r2, [pc, #260]	; (8003d00 <HAL_ADC_ConfigChannel+0x7c8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d12c      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d126      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a3c      	ldr	r2, [pc, #240]	; (8003d04 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d004      	beq.n	8003c20 <HAL_ADC_ConfigChannel+0x6e8>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a3b      	ldr	r2, [pc, #236]	; (8003d08 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d15d      	bne.n	8003cdc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c24:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c28:	4619      	mov	r1, r3
 8003c2a:	4834      	ldr	r0, [pc, #208]	; (8003cfc <HAL_ADC_ConfigChannel+0x7c4>)
 8003c2c:	f7fe ffc3 	bl	8002bb6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c30:	4b36      	ldr	r3, [pc, #216]	; (8003d0c <HAL_ADC_ConfigChannel+0x7d4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	099b      	lsrs	r3, r3, #6
 8003c36:	4a36      	ldr	r2, [pc, #216]	; (8003d10 <HAL_ADC_ConfigChannel+0x7d8>)
 8003c38:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3c:	099b      	lsrs	r3, r3, #6
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	4613      	mov	r3, r2
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	4413      	add	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c4a:	e002      	b.n	8003c52 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f9      	bne.n	8003c4c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c58:	e040      	b.n	8003cdc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a2d      	ldr	r2, [pc, #180]	; (8003d14 <HAL_ADC_ConfigChannel+0x7dc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d118      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c64:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d112      	bne.n	8003c96 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a23      	ldr	r2, [pc, #140]	; (8003d04 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d004      	beq.n	8003c84 <HAL_ADC_ConfigChannel+0x74c>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a22      	ldr	r2, [pc, #136]	; (8003d08 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d12d      	bne.n	8003ce0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	481b      	ldr	r0, [pc, #108]	; (8003cfc <HAL_ADC_ConfigChannel+0x7c4>)
 8003c90:	f7fe ff91 	bl	8002bb6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c94:	e024      	b.n	8003ce0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1f      	ldr	r2, [pc, #124]	; (8003d18 <HAL_ADC_ConfigChannel+0x7e0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d120      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ca0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003ca4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d11a      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <HAL_ADC_ConfigChannel+0x7cc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d115      	bne.n	8003ce2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003cba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	480e      	ldr	r0, [pc, #56]	; (8003cfc <HAL_ADC_ConfigChannel+0x7c4>)
 8003cc2:	f7fe ff78 	bl	8002bb6 <LL_ADC_SetCommonPathInternalCh>
 8003cc6:	e00c      	b.n	8003ce2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ccc:	f043 0220 	orr.w	r2, r3, #32
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003cda:	e002      	b.n	8003ce2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cdc:	bf00      	nop
 8003cde:	e000      	b.n	8003ce2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ce0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003cea:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	37d8      	adds	r7, #216	; 0xd8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	80080000 	.word	0x80080000
 8003cfc:	50040300 	.word	0x50040300
 8003d00:	c7520000 	.word	0xc7520000
 8003d04:	50040000 	.word	0x50040000
 8003d08:	50040200 	.word	0x50040200
 8003d0c:	20000008 	.word	0x20000008
 8003d10:	053e2d63 	.word	0x053e2d63
 8003d14:	cb840000 	.word	0xcb840000
 8003d18:	80000001 	.word	0x80000001

08003d1c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7ff f8c5 	bl	8002ebc <LL_ADC_IsEnabled>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d169      	bne.n	8003e0c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	4b36      	ldr	r3, [pc, #216]	; (8003e18 <ADC_Enable+0xfc>)
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00d      	beq.n	8003d62 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4a:	f043 0210 	orr.w	r2, r3, #16
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d56:	f043 0201 	orr.w	r2, r3, #1
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e055      	b.n	8003e0e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7ff f894 	bl	8002e94 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d6c:	482b      	ldr	r0, [pc, #172]	; (8003e1c <ADC_Enable+0x100>)
 8003d6e:	f7fe ff35 	bl	8002bdc <LL_ADC_GetCommonPathInternalCh>
 8003d72:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d013      	beq.n	8003da4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d7c:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <ADC_Enable+0x104>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	099b      	lsrs	r3, r3, #6
 8003d82:	4a28      	ldr	r2, [pc, #160]	; (8003e24 <ADC_Enable+0x108>)
 8003d84:	fba2 2303 	umull	r2, r3, r2, r3
 8003d88:	099b      	lsrs	r3, r3, #6
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d96:	e002      	b.n	8003d9e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d1f9      	bne.n	8003d98 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003da4:	f7fe fec4 	bl	8002b30 <HAL_GetTick>
 8003da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003daa:	e028      	b.n	8003dfe <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff f883 	bl	8002ebc <LL_ADC_IsEnabled>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d104      	bne.n	8003dc6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	f7ff f867 	bl	8002e94 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dc6:	f7fe feb3 	bl	8002b30 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d914      	bls.n	8003dfe <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d00d      	beq.n	8003dfe <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de6:	f043 0210 	orr.w	r2, r3, #16
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df2:	f043 0201 	orr.w	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e007      	b.n	8003e0e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d1cf      	bne.n	8003dac <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e0c:	2300      	movs	r3, #0
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	8000003f 	.word	0x8000003f
 8003e1c:	50040300 	.word	0x50040300
 8003e20:	20000008 	.word	0x20000008
 8003e24:	053e2d63 	.word	0x053e2d63

08003e28 <LL_ADC_IsEnabled>:
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <LL_ADC_IsEnabled+0x18>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <LL_ADC_IsEnabled+0x1a>
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <LL_ADC_REG_IsConversionOngoing>:
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0304 	and.w	r3, r3, #4
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d101      	bne.n	8003e66 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003e74:	b590      	push	{r4, r7, lr}
 8003e76:	b09f      	sub	sp, #124	; 0x7c
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e8e:	2302      	movs	r3, #2
 8003e90:	e093      	b.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a47      	ldr	r2, [pc, #284]	; (8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d102      	bne.n	8003eb2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003eac:	4b46      	ldr	r3, [pc, #280]	; (8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	e001      	b.n	8003eb6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10b      	bne.n	8003ed4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec0:	f043 0220 	orr.w	r2, r3, #32
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e072      	b.n	8003fba <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff ffb9 	bl	8003e4e <LL_ADC_REG_IsConversionOngoing>
 8003edc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff ffb3 	bl	8003e4e <LL_ADC_REG_IsConversionOngoing>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d154      	bne.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d151      	bne.n	8003f98 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ef4:	4b35      	ldr	r3, [pc, #212]	; (8003fcc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003ef6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d02c      	beq.n	8003f5a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	6859      	ldr	r1, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f12:	035b      	lsls	r3, r3, #13
 8003f14:	430b      	orrs	r3, r1
 8003f16:	431a      	orrs	r2, r3
 8003f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f1c:	4829      	ldr	r0, [pc, #164]	; (8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003f1e:	f7ff ff83 	bl	8003e28 <LL_ADC_IsEnabled>
 8003f22:	4604      	mov	r4, r0
 8003f24:	4828      	ldr	r0, [pc, #160]	; (8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f26:	f7ff ff7f 	bl	8003e28 <LL_ADC_IsEnabled>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	431c      	orrs	r4, r3
 8003f2e:	4828      	ldr	r0, [pc, #160]	; (8003fd0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003f30:	f7ff ff7a 	bl	8003e28 <LL_ADC_IsEnabled>
 8003f34:	4603      	mov	r3, r0
 8003f36:	4323      	orrs	r3, r4
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d137      	bne.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f44:	f023 030f 	bic.w	r3, r3, #15
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	6811      	ldr	r1, [r2, #0]
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	6892      	ldr	r2, [r2, #8]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	431a      	orrs	r2, r3
 8003f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f56:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f58:	e028      	b.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f64:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f66:	4817      	ldr	r0, [pc, #92]	; (8003fc4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003f68:	f7ff ff5e 	bl	8003e28 <LL_ADC_IsEnabled>
 8003f6c:	4604      	mov	r4, r0
 8003f6e:	4816      	ldr	r0, [pc, #88]	; (8003fc8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003f70:	f7ff ff5a 	bl	8003e28 <LL_ADC_IsEnabled>
 8003f74:	4603      	mov	r3, r0
 8003f76:	431c      	orrs	r4, r3
 8003f78:	4815      	ldr	r0, [pc, #84]	; (8003fd0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003f7a:	f7ff ff55 	bl	8003e28 <LL_ADC_IsEnabled>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4323      	orrs	r3, r4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d112      	bne.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f8e:	f023 030f 	bic.w	r3, r3, #15
 8003f92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f94:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003f96:	e009      	b.n	8003fac <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f9c:	f043 0220 	orr.w	r2, r3, #32
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003faa:	e000      	b.n	8003fae <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003fac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003fb6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	377c      	adds	r7, #124	; 0x7c
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd90      	pop	{r4, r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	50040000 	.word	0x50040000
 8003fc8:	50040100 	.word	0x50040100
 8003fcc:	50040300 	.word	0x50040300
 8003fd0:	50040200 	.word	0x50040200

08003fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b085      	sub	sp, #20
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ffc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004006:	4a04      	ldr	r2, [pc, #16]	; (8004018 <__NVIC_SetPriorityGrouping+0x44>)
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	60d3      	str	r3, [r2, #12]
}
 800400c:	bf00      	nop
 800400e:	3714      	adds	r7, #20
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	e000ed00 	.word	0xe000ed00

0800401c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004020:	4b04      	ldr	r3, [pc, #16]	; (8004034 <__NVIC_GetPriorityGrouping+0x18>)
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	0a1b      	lsrs	r3, r3, #8
 8004026:	f003 0307 	and.w	r3, r3, #7
}
 800402a:	4618      	mov	r0, r3
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr
 8004034:	e000ed00 	.word	0xe000ed00

08004038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	4603      	mov	r3, r0
 8004040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004046:	2b00      	cmp	r3, #0
 8004048:	db0b      	blt.n	8004062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	f003 021f 	and.w	r2, r3, #31
 8004050:	4907      	ldr	r1, [pc, #28]	; (8004070 <__NVIC_EnableIRQ+0x38>)
 8004052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	2001      	movs	r0, #1
 800405a:	fa00 f202 	lsl.w	r2, r0, r2
 800405e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004062:	bf00      	nop
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	e000e100 	.word	0xe000e100

08004074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	4603      	mov	r3, r0
 800407c:	6039      	str	r1, [r7, #0]
 800407e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004084:	2b00      	cmp	r3, #0
 8004086:	db0a      	blt.n	800409e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	b2da      	uxtb	r2, r3
 800408c:	490c      	ldr	r1, [pc, #48]	; (80040c0 <__NVIC_SetPriority+0x4c>)
 800408e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004092:	0112      	lsls	r2, r2, #4
 8004094:	b2d2      	uxtb	r2, r2
 8004096:	440b      	add	r3, r1
 8004098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800409c:	e00a      	b.n	80040b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	4908      	ldr	r1, [pc, #32]	; (80040c4 <__NVIC_SetPriority+0x50>)
 80040a4:	79fb      	ldrb	r3, [r7, #7]
 80040a6:	f003 030f 	and.w	r3, r3, #15
 80040aa:	3b04      	subs	r3, #4
 80040ac:	0112      	lsls	r2, r2, #4
 80040ae:	b2d2      	uxtb	r2, r2
 80040b0:	440b      	add	r3, r1
 80040b2:	761a      	strb	r2, [r3, #24]
}
 80040b4:	bf00      	nop
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	e000e100 	.word	0xe000e100
 80040c4:	e000ed00 	.word	0xe000ed00

080040c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b089      	sub	sp, #36	; 0x24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f003 0307 	and.w	r3, r3, #7
 80040da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040dc:	69fb      	ldr	r3, [r7, #28]
 80040de:	f1c3 0307 	rsb	r3, r3, #7
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	bf28      	it	cs
 80040e6:	2304      	movcs	r3, #4
 80040e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3304      	adds	r3, #4
 80040ee:	2b06      	cmp	r3, #6
 80040f0:	d902      	bls.n	80040f8 <NVIC_EncodePriority+0x30>
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	3b03      	subs	r3, #3
 80040f6:	e000      	b.n	80040fa <NVIC_EncodePriority+0x32>
 80040f8:	2300      	movs	r3, #0
 80040fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	fa02 f303 	lsl.w	r3, r2, r3
 8004106:	43da      	mvns	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	401a      	ands	r2, r3
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004110:	f04f 31ff 	mov.w	r1, #4294967295
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	fa01 f303 	lsl.w	r3, r1, r3
 800411a:	43d9      	mvns	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004120:	4313      	orrs	r3, r2
         );
}
 8004122:	4618      	mov	r0, r3
 8004124:	3724      	adds	r7, #36	; 0x24
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
	...

08004130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	3b01      	subs	r3, #1
 800413c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004140:	d301      	bcc.n	8004146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004142:	2301      	movs	r3, #1
 8004144:	e00f      	b.n	8004166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004146:	4a0a      	ldr	r2, [pc, #40]	; (8004170 <SysTick_Config+0x40>)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3b01      	subs	r3, #1
 800414c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800414e:	210f      	movs	r1, #15
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	f7ff ff8e 	bl	8004074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <SysTick_Config+0x40>)
 800415a:	2200      	movs	r2, #0
 800415c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800415e:	4b04      	ldr	r3, [pc, #16]	; (8004170 <SysTick_Config+0x40>)
 8004160:	2207      	movs	r2, #7
 8004162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
 800416e:	bf00      	nop
 8004170:	e000e010 	.word	0xe000e010

08004174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff ff29 	bl	8003fd4 <__NVIC_SetPriorityGrouping>
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b086      	sub	sp, #24
 800418e:	af00      	add	r7, sp, #0
 8004190:	4603      	mov	r3, r0
 8004192:	60b9      	str	r1, [r7, #8]
 8004194:	607a      	str	r2, [r7, #4]
 8004196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004198:	2300      	movs	r3, #0
 800419a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800419c:	f7ff ff3e 	bl	800401c <__NVIC_GetPriorityGrouping>
 80041a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68b9      	ldr	r1, [r7, #8]
 80041a6:	6978      	ldr	r0, [r7, #20]
 80041a8:	f7ff ff8e 	bl	80040c8 <NVIC_EncodePriority>
 80041ac:	4602      	mov	r2, r0
 80041ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7ff ff5d 	bl	8004074 <__NVIC_SetPriority>
}
 80041ba:	bf00      	nop
 80041bc:	3718      	adds	r7, #24
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b082      	sub	sp, #8
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	4603      	mov	r3, r0
 80041ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7ff ff31 	bl	8004038 <__NVIC_EnableIRQ>
}
 80041d6:	bf00      	nop
 80041d8:	3708      	adds	r7, #8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b082      	sub	sp, #8
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f7ff ffa2 	bl	8004130 <SysTick_Config>
 80041ec:	4603      	mov	r3, r0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}

080041f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b082      	sub	sp, #8
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d101      	bne.n	8004208 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e014      	b.n	8004232 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	791b      	ldrb	r3, [r3, #4]
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d105      	bne.n	800421e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7fd ffc3 	bl	80021a4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2202      	movs	r2, #2
 8004222:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2201      	movs	r2, #1
 800422e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004230:	2300      	movs	r3, #0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
 8004242:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	795b      	ldrb	r3, [r3, #5]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d101      	bne.n	8004250 <HAL_DAC_Start+0x16>
 800424c:	2302      	movs	r3, #2
 800424e:	e03b      	b.n	80042c8 <HAL_DAC_Start+0x8e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2202      	movs	r2, #2
 800425a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6819      	ldr	r1, [r3, #0]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2201      	movs	r2, #1
 800426a:	409a      	lsls	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10f      	bne.n	800429a <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004284:	2b04      	cmp	r3, #4
 8004286:	d118      	bne.n	80042ba <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	e00f      	b.n	80042ba <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80042a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042a8:	d107      	bne.n	80042ba <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0202 	orr.w	r2, r2, #2
 80042b8:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b087      	sub	sp, #28
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d105      	bne.n	80042fe <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4413      	add	r3, r2
 80042f8:	3308      	adds	r3, #8
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	e004      	b.n	8004308 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80042fe:	697a      	ldr	r2, [r7, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4413      	add	r3, r2
 8004304:	3314      	adds	r3, #20
 8004306:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	461a      	mov	r2, r3
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b088      	sub	sp, #32
 8004322:	af00      	add	r7, sp, #0
 8004324:	60f8      	str	r0, [r7, #12]
 8004326:	60b9      	str	r1, [r7, #8]
 8004328:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	795b      	ldrb	r3, [r3, #5]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d101      	bne.n	800433a <HAL_DAC_ConfigChannel+0x1c>
 8004336:	2302      	movs	r3, #2
 8004338:	e114      	b.n	8004564 <HAL_DAC_ConfigChannel+0x246>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2202      	movs	r2, #2
 8004344:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b04      	cmp	r3, #4
 800434c:	f040 8081 	bne.w	8004452 <HAL_DAC_ConfigChannel+0x134>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004350:	f7fe fbee 	bl	8002b30 <HAL_GetTick>
 8004354:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d140      	bne.n	80043de <HAL_DAC_ConfigChannel+0xc0>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800435c:	e018      	b.n	8004390 <HAL_DAC_ConfigChannel+0x72>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800435e:	f7fe fbe7 	bl	8002b30 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b01      	cmp	r3, #1
 800436a:	d911      	bls.n	8004390 <HAL_DAC_ConfigChannel+0x72>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004372:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <HAL_DAC_ConfigChannel+0x72>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f043 0208 	orr.w	r2, r3, #8
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2203      	movs	r2, #3
 800438a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e0e9      	b.n	8004564 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004396:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1df      	bne.n	800435e <HAL_DAC_ConfigChannel+0x40>
          }
        }
      }
      HAL_Delay(1);
 800439e:	2001      	movs	r0, #1
 80043a0:	f7fe fbd2 	bl	8002b48 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68ba      	ldr	r2, [r7, #8]
 80043aa:	6992      	ldr	r2, [r2, #24]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40
 80043ae:	e023      	b.n	80043f8 <HAL_DAC_ConfigChannel+0xda>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80043b0:	f7fe fbbe 	bl	8002b30 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d90f      	bls.n	80043de <HAL_DAC_ConfigChannel+0xc0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	da0a      	bge.n	80043de <HAL_DAC_ConfigChannel+0xc0>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	f043 0208 	orr.w	r2, r3, #8
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2203      	movs	r2, #3
 80043d8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e0c2      	b.n	8004564 <HAL_DAC_ConfigChannel+0x246>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	dbe3      	blt.n	80043b0 <HAL_DAC_ConfigChannel+0x92>
          }
        }
      }
      HAL_Delay(1U);
 80043e8:	2001      	movs	r0, #1
 80043ea:	f7fe fbad 	bl	8002b48 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	6992      	ldr	r2, [r2, #24]
 80043f6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f003 0310 	and.w	r3, r3, #16
 8004404:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004408:	fa01 f303 	lsl.w	r3, r1, r3
 800440c:	43db      	mvns	r3, r3
 800440e:	ea02 0103 	and.w	r1, r2, r3
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	69da      	ldr	r2, [r3, #28]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f003 0310 	and.w	r3, r3, #16
 800441c:	409a      	lsls	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	21ff      	movs	r1, #255	; 0xff
 8004434:	fa01 f303 	lsl.w	r3, r1, r3
 8004438:	43db      	mvns	r3, r3
 800443a:	ea02 0103 	and.w	r1, r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	6a1a      	ldr	r2, [r3, #32]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f003 0310 	and.w	r3, r3, #16
 8004448:	409a      	lsls	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	430a      	orrs	r2, r1
 8004450:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d11d      	bne.n	8004496 <HAL_DAC_ConfigChannel+0x178>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004460:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	221f      	movs	r2, #31
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f003 0310 	and.w	r3, r3, #16
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800449c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f003 0310 	and.w	r3, r3, #16
 80044a4:	2207      	movs	r2, #7
 80044a6:	fa02 f303 	lsl.w	r3, r2, r3
 80044aa:	43db      	mvns	r3, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4013      	ands	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f003 0310 	and.w	r3, r3, #16
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	fa02 f303 	lsl.w	r3, r2, r3
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6819      	ldr	r1, [r3, #0]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	43da      	mvns	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	400a      	ands	r2, r1
 80044fa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f003 0310 	and.w	r3, r3, #16
 800450a:	f640 72fc 	movw	r2, #4092	; 0xffc
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	43db      	mvns	r3, r3
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	4013      	ands	r3, r2
 8004518:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	69ba      	ldr	r2, [r7, #24]
 800452e:	4313      	orrs	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	6819      	ldr	r1, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f003 0310 	and.w	r3, r3, #16
 8004546:	22c0      	movs	r2, #192	; 0xc0
 8004548:	fa02 f303 	lsl.w	r3, r2, r3
 800454c:	43da      	mvns	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	400a      	ands	r2, r1
 8004554:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2201      	movs	r2, #1
 800455a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3720      	adds	r7, #32
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e0ac      	b.n	80046d8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f000 f8b2 	bl	80046ec <DFSDM_GetChannelFromInstance>
 8004588:	4603      	mov	r3, r0
 800458a:	4a55      	ldr	r2, [pc, #340]	; (80046e0 <HAL_DFSDM_ChannelInit+0x174>)
 800458c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e09f      	b.n	80046d8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7fd fe41 	bl	8002220 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800459e:	4b51      	ldr	r3, [pc, #324]	; (80046e4 <HAL_DFSDM_ChannelInit+0x178>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3301      	adds	r3, #1
 80045a4:	4a4f      	ldr	r2, [pc, #316]	; (80046e4 <HAL_DFSDM_ChannelInit+0x178>)
 80045a6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80045a8:	4b4e      	ldr	r3, [pc, #312]	; (80046e4 <HAL_DFSDM_ChannelInit+0x178>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d125      	bne.n	80045fc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80045b0:	4b4d      	ldr	r3, [pc, #308]	; (80046e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a4c      	ldr	r2, [pc, #304]	; (80046e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80045b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80045ba:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80045bc:	4b4a      	ldr	r3, [pc, #296]	; (80046e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	4948      	ldr	r1, [pc, #288]	; (80046e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80045ca:	4b47      	ldr	r3, [pc, #284]	; (80046e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a46      	ldr	r2, [pc, #280]	; (80046e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80045d0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80045d4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	791b      	ldrb	r3, [r3, #4]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d108      	bne.n	80045f0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80045de:	4b42      	ldr	r3, [pc, #264]	; (80046e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	3b01      	subs	r3, #1
 80045e8:	041b      	lsls	r3, r3, #16
 80045ea:	493f      	ldr	r1, [pc, #252]	; (80046e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80045f0:	4b3d      	ldr	r3, [pc, #244]	; (80046e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a3c      	ldr	r2, [pc, #240]	; (80046e8 <HAL_DFSDM_ChannelInit+0x17c>)
 80045f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80045fa:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800460a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6819      	ldr	r1, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800461a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8004620:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	430a      	orrs	r2, r1
 8004628:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f022 020f 	bic.w	r2, r2, #15
 8004638:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	6819      	ldr	r1, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8004648:	431a      	orrs	r2, r3
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	689a      	ldr	r2, [r3, #8]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004660:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	6899      	ldr	r1, [r3, #8]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	3b01      	subs	r3, #1
 8004672:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f002 0207 	and.w	r2, r2, #7
 800468c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6859      	ldr	r1, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004698:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046b8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f000 f810 	bl	80046ec <DFSDM_GetChannelFromInstance>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4904      	ldr	r1, [pc, #16]	; (80046e0 <HAL_DFSDM_ChannelInit+0x174>)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3708      	adds	r7, #8
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000b58 	.word	0x20000b58
 80046e4:	20000b54 	.word	0x20000b54
 80046e8:	40016000 	.word	0x40016000

080046ec <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a1c      	ldr	r2, [pc, #112]	; (8004768 <DFSDM_GetChannelFromInstance+0x7c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d102      	bne.n	8004702 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	e02b      	b.n	800475a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a19      	ldr	r2, [pc, #100]	; (800476c <DFSDM_GetChannelFromInstance+0x80>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d102      	bne.n	8004710 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800470a:	2301      	movs	r3, #1
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	e024      	b.n	800475a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a17      	ldr	r2, [pc, #92]	; (8004770 <DFSDM_GetChannelFromInstance+0x84>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d102      	bne.n	800471e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8004718:	2302      	movs	r3, #2
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	e01d      	b.n	800475a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4a14      	ldr	r2, [pc, #80]	; (8004774 <DFSDM_GetChannelFromInstance+0x88>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d102      	bne.n	800472c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8004726:	2304      	movs	r3, #4
 8004728:	60fb      	str	r3, [r7, #12]
 800472a:	e016      	b.n	800475a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a12      	ldr	r2, [pc, #72]	; (8004778 <DFSDM_GetChannelFromInstance+0x8c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d102      	bne.n	800473a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8004734:	2305      	movs	r3, #5
 8004736:	60fb      	str	r3, [r7, #12]
 8004738:	e00f      	b.n	800475a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	4a0f      	ldr	r2, [pc, #60]	; (800477c <DFSDM_GetChannelFromInstance+0x90>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d102      	bne.n	8004748 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8004742:	2306      	movs	r3, #6
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	e008      	b.n	800475a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a0d      	ldr	r2, [pc, #52]	; (8004780 <DFSDM_GetChannelFromInstance+0x94>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d102      	bne.n	8004756 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8004750:	2307      	movs	r3, #7
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	e001      	b.n	800475a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8004756:	2303      	movs	r3, #3
 8004758:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800475a:	68fb      	ldr	r3, [r7, #12]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	40016000 	.word	0x40016000
 800476c:	40016020 	.word	0x40016020
 8004770:	40016040 	.word	0x40016040
 8004774:	40016080 	.word	0x40016080
 8004778:	400160a0 	.word	0x400160a0
 800477c:	400160c0 	.word	0x400160c0
 8004780:	400160e0 	.word	0x400160e0

08004784 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004784:	b480      	push	{r7}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004792:	e17f      	b.n	8004a94 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	2101      	movs	r1, #1
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	fa01 f303 	lsl.w	r3, r1, r3
 80047a0:	4013      	ands	r3, r2
 80047a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 8171 	beq.w	8004a8e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f003 0303 	and.w	r3, r3, #3
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d005      	beq.n	80047c4 <HAL_GPIO_Init+0x40>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d130      	bne.n	8004826 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	2203      	movs	r2, #3
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	43db      	mvns	r3, r3
 80047d6:	693a      	ldr	r2, [r7, #16]
 80047d8:	4013      	ands	r3, r2
 80047da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80047fa:	2201      	movs	r2, #1
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43db      	mvns	r3, r3
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	4013      	ands	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	091b      	lsrs	r3, r3, #4
 8004810:	f003 0201 	and.w	r2, r3, #1
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f003 0303 	and.w	r3, r3, #3
 800482e:	2b03      	cmp	r3, #3
 8004830:	d118      	bne.n	8004864 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004836:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8004838:	2201      	movs	r2, #1
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	43db      	mvns	r3, r3
 8004842:	693a      	ldr	r2, [r7, #16]
 8004844:	4013      	ands	r3, r2
 8004846:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	08db      	lsrs	r3, r3, #3
 800484e:	f003 0201 	and.w	r2, r3, #1
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	4313      	orrs	r3, r2
 800485c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f003 0303 	and.w	r3, r3, #3
 800486c:	2b03      	cmp	r3, #3
 800486e:	d017      	beq.n	80048a0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	005b      	lsls	r3, r3, #1
 800487a:	2203      	movs	r2, #3
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	43db      	mvns	r3, r3
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	4013      	ands	r3, r2
 8004886:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	005b      	lsls	r3, r3, #1
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f003 0303 	and.w	r3, r3, #3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d123      	bne.n	80048f4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	08da      	lsrs	r2, r3, #3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	3208      	adds	r2, #8
 80048b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f003 0307 	and.w	r3, r3, #7
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	220f      	movs	r2, #15
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	43db      	mvns	r3, r3
 80048ca:	693a      	ldr	r2, [r7, #16]
 80048cc:	4013      	ands	r3, r2
 80048ce:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	691a      	ldr	r2, [r3, #16]
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	009b      	lsls	r3, r3, #2
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	08da      	lsrs	r2, r3, #3
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	3208      	adds	r2, #8
 80048ee:	6939      	ldr	r1, [r7, #16]
 80048f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	005b      	lsls	r3, r3, #1
 80048fe:	2203      	movs	r2, #3
 8004900:	fa02 f303 	lsl.w	r3, r2, r3
 8004904:	43db      	mvns	r3, r3
 8004906:	693a      	ldr	r2, [r7, #16]
 8004908:	4013      	ands	r3, r2
 800490a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f003 0203 	and.w	r2, r3, #3
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	005b      	lsls	r3, r3, #1
 8004918:	fa02 f303 	lsl.w	r3, r2, r3
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	4313      	orrs	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80ac 	beq.w	8004a8e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004936:	4b5f      	ldr	r3, [pc, #380]	; (8004ab4 <HAL_GPIO_Init+0x330>)
 8004938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800493a:	4a5e      	ldr	r2, [pc, #376]	; (8004ab4 <HAL_GPIO_Init+0x330>)
 800493c:	f043 0301 	orr.w	r3, r3, #1
 8004940:	6613      	str	r3, [r2, #96]	; 0x60
 8004942:	4b5c      	ldr	r3, [pc, #368]	; (8004ab4 <HAL_GPIO_Init+0x330>)
 8004944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	60bb      	str	r3, [r7, #8]
 800494c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800494e:	4a5a      	ldr	r2, [pc, #360]	; (8004ab8 <HAL_GPIO_Init+0x334>)
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	089b      	lsrs	r3, r3, #2
 8004954:	3302      	adds	r3, #2
 8004956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800495a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	009b      	lsls	r3, r3, #2
 8004964:	220f      	movs	r2, #15
 8004966:	fa02 f303 	lsl.w	r3, r2, r3
 800496a:	43db      	mvns	r3, r3
 800496c:	693a      	ldr	r2, [r7, #16]
 800496e:	4013      	ands	r3, r2
 8004970:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004978:	d025      	beq.n	80049c6 <HAL_GPIO_Init+0x242>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	4a4f      	ldr	r2, [pc, #316]	; (8004abc <HAL_GPIO_Init+0x338>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d01f      	beq.n	80049c2 <HAL_GPIO_Init+0x23e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a4e      	ldr	r2, [pc, #312]	; (8004ac0 <HAL_GPIO_Init+0x33c>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d019      	beq.n	80049be <HAL_GPIO_Init+0x23a>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a4d      	ldr	r2, [pc, #308]	; (8004ac4 <HAL_GPIO_Init+0x340>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <HAL_GPIO_Init+0x236>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a4c      	ldr	r2, [pc, #304]	; (8004ac8 <HAL_GPIO_Init+0x344>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00d      	beq.n	80049b6 <HAL_GPIO_Init+0x232>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a4b      	ldr	r2, [pc, #300]	; (8004acc <HAL_GPIO_Init+0x348>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d007      	beq.n	80049b2 <HAL_GPIO_Init+0x22e>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a4a      	ldr	r2, [pc, #296]	; (8004ad0 <HAL_GPIO_Init+0x34c>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d101      	bne.n	80049ae <HAL_GPIO_Init+0x22a>
 80049aa:	2306      	movs	r3, #6
 80049ac:	e00c      	b.n	80049c8 <HAL_GPIO_Init+0x244>
 80049ae:	2307      	movs	r3, #7
 80049b0:	e00a      	b.n	80049c8 <HAL_GPIO_Init+0x244>
 80049b2:	2305      	movs	r3, #5
 80049b4:	e008      	b.n	80049c8 <HAL_GPIO_Init+0x244>
 80049b6:	2304      	movs	r3, #4
 80049b8:	e006      	b.n	80049c8 <HAL_GPIO_Init+0x244>
 80049ba:	2303      	movs	r3, #3
 80049bc:	e004      	b.n	80049c8 <HAL_GPIO_Init+0x244>
 80049be:	2302      	movs	r3, #2
 80049c0:	e002      	b.n	80049c8 <HAL_GPIO_Init+0x244>
 80049c2:	2301      	movs	r3, #1
 80049c4:	e000      	b.n	80049c8 <HAL_GPIO_Init+0x244>
 80049c6:	2300      	movs	r3, #0
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	f002 0203 	and.w	r2, r2, #3
 80049ce:	0092      	lsls	r2, r2, #2
 80049d0:	4093      	lsls	r3, r2
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80049d8:	4937      	ldr	r1, [pc, #220]	; (8004ab8 <HAL_GPIO_Init+0x334>)
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	089b      	lsrs	r3, r3, #2
 80049de:	3302      	adds	r3, #2
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049e6:	4b3b      	ldr	r3, [pc, #236]	; (8004ad4 <HAL_GPIO_Init+0x350>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	43db      	mvns	r3, r3
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4013      	ands	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a0a:	4a32      	ldr	r2, [pc, #200]	; (8004ad4 <HAL_GPIO_Init+0x350>)
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a10:	4b30      	ldr	r3, [pc, #192]	; (8004ad4 <HAL_GPIO_Init+0x350>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a34:	4a27      	ldr	r2, [pc, #156]	; (8004ad4 <HAL_GPIO_Init+0x350>)
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004a3a:	4b26      	ldr	r3, [pc, #152]	; (8004ad4 <HAL_GPIO_Init+0x350>)
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	43db      	mvns	r3, r3
 8004a44:	693a      	ldr	r2, [r7, #16]
 8004a46:	4013      	ands	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a5e:	4a1d      	ldr	r2, [pc, #116]	; (8004ad4 <HAL_GPIO_Init+0x350>)
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004a64:	4b1b      	ldr	r3, [pc, #108]	; (8004ad4 <HAL_GPIO_Init+0x350>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	4013      	ands	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a88:	4a12      	ldr	r2, [pc, #72]	; (8004ad4 <HAL_GPIO_Init+0x350>)
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	3301      	adds	r3, #1
 8004a92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f47f ae78 	bne.w	8004794 <HAL_GPIO_Init+0x10>
  }
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40010000 	.word	0x40010000
 8004abc:	48000400 	.word	0x48000400
 8004ac0:	48000800 	.word	0x48000800
 8004ac4:	48000c00 	.word	0x48000c00
 8004ac8:	48001000 	.word	0x48001000
 8004acc:	48001400 	.word	0x48001400
 8004ad0:	48001800 	.word	0x48001800
 8004ad4:	40010400 	.word	0x40010400

08004ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	807b      	strh	r3, [r7, #2]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ae8:	787b      	ldrb	r3, [r7, #1]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004aee:	887a      	ldrh	r2, [r7, #2]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004af4:	e002      	b.n	8004afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004af6:	887a      	ldrh	r2, [r7, #2]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b082      	sub	sp, #8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	4603      	mov	r3, r0
 8004b10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b12:	4b08      	ldr	r3, [pc, #32]	; (8004b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	88fb      	ldrh	r3, [r7, #6]
 8004b18:	4013      	ands	r3, r2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d006      	beq.n	8004b2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b1e:	4a05      	ldr	r2, [pc, #20]	; (8004b34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b20:	88fb      	ldrh	r3, [r7, #6]
 8004b22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b24:	88fb      	ldrh	r3, [r7, #6]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f806 	bl	8004b38 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b2c:	bf00      	nop
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	40010400 	.word	0x40010400

08004b38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b082      	sub	sp, #8
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e08d      	b.n	8004c7c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7fd fbb7 	bl	80022e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2224      	movs	r2, #36	; 0x24
 8004b7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f022 0201 	bic.w	r2, r2, #1
 8004b90:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b9e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689a      	ldr	r2, [r3, #8]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d107      	bne.n	8004bc8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bc4:	609a      	str	r2, [r3, #8]
 8004bc6:	e006      	b.n	8004bd6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004bd4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d108      	bne.n	8004bf0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bec:	605a      	str	r2, [r3, #4]
 8004bee:	e007      	b.n	8004c00 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	685a      	ldr	r2, [r3, #4]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bfe:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	6812      	ldr	r2, [r2, #0]
 8004c0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c12:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c22:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69d9      	ldr	r1, [r3, #28]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1a      	ldr	r2, [r3, #32]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f042 0201 	orr.w	r2, r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	d138      	bne.n	8004d0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d101      	bne.n	8004ca8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	e032      	b.n	8004d0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2201      	movs	r2, #1
 8004cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2224      	movs	r2, #36	; 0x24
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f022 0201 	bic.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004cd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6819      	ldr	r1, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	430a      	orrs	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 0201 	orr.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2220      	movs	r2, #32
 8004cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	e000      	b.n	8004d0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004d0c:	2302      	movs	r3, #2
  }
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	370c      	adds	r7, #12
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr

08004d1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004d1a:	b480      	push	{r7}
 8004d1c:	b085      	sub	sp, #20
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d139      	bne.n	8004da4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d101      	bne.n	8004d3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	e033      	b.n	8004da6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2224      	movs	r2, #36	; 0x24
 8004d4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 0201 	bic.w	r2, r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	021b      	lsls	r3, r3, #8
 8004d72:	68fa      	ldr	r2, [r7, #12]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0201 	orr.w	r2, r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2220      	movs	r2, #32
 8004d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004da0:	2300      	movs	r3, #0
 8004da2:	e000      	b.n	8004da6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004da4:	2302      	movs	r3, #2
  }
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr

08004db2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004db2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004db4:	b08f      	sub	sp, #60	; 0x3c
 8004db6:	af0a      	add	r7, sp, #40	; 0x28
 8004db8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e116      	b.n	8004ff2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d106      	bne.n	8004de4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f00a fbd8 	bl	800f594 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2203      	movs	r2, #3
 8004de8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d102      	bne.n	8004dfe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4618      	mov	r0, r3
 8004e04:	f003 ff43 	bl	8008c8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	603b      	str	r3, [r7, #0]
 8004e0e:	687e      	ldr	r6, [r7, #4]
 8004e10:	466d      	mov	r5, sp
 8004e12:	f106 0410 	add.w	r4, r6, #16
 8004e16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e1e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e22:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e26:	1d33      	adds	r3, r6, #4
 8004e28:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e2a:	6838      	ldr	r0, [r7, #0]
 8004e2c:	f003 fe55 	bl	8008ada <USB_CoreInit>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d005      	beq.n	8004e42 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2202      	movs	r2, #2
 8004e3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e0d7      	b.n	8004ff2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2100      	movs	r1, #0
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f003 ff31 	bl	8008cb0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e4e:	2300      	movs	r3, #0
 8004e50:	73fb      	strb	r3, [r7, #15]
 8004e52:	e04a      	b.n	8004eea <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e54:	7bfa      	ldrb	r2, [r7, #15]
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	4413      	add	r3, r2
 8004e5e:	009b      	lsls	r3, r3, #2
 8004e60:	440b      	add	r3, r1
 8004e62:	333d      	adds	r3, #61	; 0x3d
 8004e64:	2201      	movs	r2, #1
 8004e66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e68:	7bfa      	ldrb	r2, [r7, #15]
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4413      	add	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	333c      	adds	r3, #60	; 0x3c
 8004e78:	7bfa      	ldrb	r2, [r7, #15]
 8004e7a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004e7c:	7bfa      	ldrb	r2, [r7, #15]
 8004e7e:	7bfb      	ldrb	r3, [r7, #15]
 8004e80:	b298      	uxth	r0, r3
 8004e82:	6879      	ldr	r1, [r7, #4]
 8004e84:	4613      	mov	r3, r2
 8004e86:	00db      	lsls	r3, r3, #3
 8004e88:	4413      	add	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	3356      	adds	r3, #86	; 0x56
 8004e90:	4602      	mov	r2, r0
 8004e92:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004e94:	7bfa      	ldrb	r2, [r7, #15]
 8004e96:	6879      	ldr	r1, [r7, #4]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	3340      	adds	r3, #64	; 0x40
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ea8:	7bfa      	ldrb	r2, [r7, #15]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	3344      	adds	r3, #68	; 0x44
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ebc:	7bfa      	ldrb	r2, [r7, #15]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	3348      	adds	r3, #72	; 0x48
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ed0:	7bfa      	ldrb	r2, [r7, #15]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	334c      	adds	r3, #76	; 0x4c
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ee4:	7bfb      	ldrb	r3, [r7, #15]
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	73fb      	strb	r3, [r7, #15]
 8004eea:	7bfa      	ldrb	r2, [r7, #15]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d3af      	bcc.n	8004e54 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	73fb      	strb	r3, [r7, #15]
 8004ef8:	e044      	b.n	8004f84 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004efa:	7bfa      	ldrb	r2, [r7, #15]
 8004efc:	6879      	ldr	r1, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	440b      	add	r3, r1
 8004f08:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f10:	7bfa      	ldrb	r2, [r7, #15]
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	4613      	mov	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004f22:	7bfa      	ldrb	r2, [r7, #15]
 8004f24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f26:	7bfa      	ldrb	r2, [r7, #15]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	4413      	add	r3, r2
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	440b      	add	r3, r1
 8004f34:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004f38:	2200      	movs	r2, #0
 8004f3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f3c:	7bfa      	ldrb	r2, [r7, #15]
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	4413      	add	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8004f4e:	2200      	movs	r2, #0
 8004f50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f52:	7bfa      	ldrb	r2, [r7, #15]
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	440b      	add	r3, r1
 8004f60:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004f64:	2200      	movs	r2, #0
 8004f66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f68:	7bfa      	ldrb	r2, [r7, #15]
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	4413      	add	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	3301      	adds	r3, #1
 8004f82:	73fb      	strb	r3, [r7, #15]
 8004f84:	7bfa      	ldrb	r2, [r7, #15]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d3b5      	bcc.n	8004efa <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	687e      	ldr	r6, [r7, #4]
 8004f96:	466d      	mov	r5, sp
 8004f98:	f106 0410 	add.w	r4, r6, #16
 8004f9c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f9e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fa0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004fa2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004fa4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004fa8:	e885 0003 	stmia.w	r5, {r0, r1}
 8004fac:	1d33      	adds	r3, r6, #4
 8004fae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fb0:	6838      	ldr	r0, [r7, #0]
 8004fb2:	f003 fec9 	bl	8008d48 <USB_DevInit>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e014      	b.n	8004ff2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d102      	bne.n	8004fe6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f001 f851 	bl	8006088 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4618      	mov	r0, r3
 8004fec:	f004 fe77 	bl	8009cde <USB_DevDisconnect>

  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ffa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <HAL_PCD_Start+0x1c>
 8005012:	2302      	movs	r3, #2
 8005014:	e01c      	b.n	8005050 <HAL_PCD_Start+0x56>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005022:	2b01      	cmp	r3, #1
 8005024:	d105      	bne.n	8005032 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4618      	mov	r0, r3
 8005038:	f003 fe18 	bl	8008c6c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4618      	mov	r0, r3
 8005042:	f004 fe2b 	bl	8009c9c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800504e:	2300      	movs	r3, #0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005058:	b590      	push	{r4, r7, lr}
 800505a:	b08d      	sub	sp, #52	; 0x34
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4618      	mov	r0, r3
 8005070:	f004 fee9 	bl	8009e46 <USB_GetMode>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	f040 847e 	bne.w	8005978 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4618      	mov	r0, r3
 8005082:	f004 fe4d 	bl	8009d20 <USB_ReadInterrupts>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 8474 	beq.w	8005976 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	0a1b      	lsrs	r3, r3, #8
 8005098:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f004 fe3a 	bl	8009d20 <USB_ReadInterrupts>
 80050ac:	4603      	mov	r3, r0
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d107      	bne.n	80050c6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	695a      	ldr	r2, [r3, #20]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f002 0202 	and.w	r2, r2, #2
 80050c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4618      	mov	r0, r3
 80050cc:	f004 fe28 	bl	8009d20 <USB_ReadInterrupts>
 80050d0:	4603      	mov	r3, r0
 80050d2:	f003 0310 	and.w	r3, r3, #16
 80050d6:	2b10      	cmp	r3, #16
 80050d8:	d161      	bne.n	800519e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699a      	ldr	r2, [r3, #24]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0210 	bic.w	r2, r2, #16
 80050e8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80050ea:	6a3b      	ldr	r3, [r7, #32]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	f003 020f 	and.w	r2, r3, #15
 80050f6:	4613      	mov	r3, r2
 80050f8:	00db      	lsls	r3, r3, #3
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	3304      	adds	r3, #4
 8005108:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	0c5b      	lsrs	r3, r3, #17
 800510e:	f003 030f 	and.w	r3, r3, #15
 8005112:	2b02      	cmp	r3, #2
 8005114:	d124      	bne.n	8005160 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800511c:	4013      	ands	r3, r2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d035      	beq.n	800518e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	091b      	lsrs	r3, r3, #4
 800512a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800512c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005130:	b29b      	uxth	r3, r3
 8005132:	461a      	mov	r2, r3
 8005134:	6a38      	ldr	r0, [r7, #32]
 8005136:	f004 fc5f 	bl	80099f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	091b      	lsrs	r3, r3, #4
 8005142:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005146:	441a      	add	r2, r3
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	695a      	ldr	r2, [r3, #20]
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	091b      	lsrs	r3, r3, #4
 8005154:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005158:	441a      	add	r2, r3
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	615a      	str	r2, [r3, #20]
 800515e:	e016      	b.n	800518e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	0c5b      	lsrs	r3, r3, #17
 8005164:	f003 030f 	and.w	r3, r3, #15
 8005168:	2b06      	cmp	r3, #6
 800516a:	d110      	bne.n	800518e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005172:	2208      	movs	r2, #8
 8005174:	4619      	mov	r1, r3
 8005176:	6a38      	ldr	r0, [r7, #32]
 8005178:	f004 fc3e 	bl	80099f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	695a      	ldr	r2, [r3, #20]
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	091b      	lsrs	r3, r3, #4
 8005184:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005188:	441a      	add	r2, r3
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	699a      	ldr	r2, [r3, #24]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f042 0210 	orr.w	r2, r2, #16
 800519c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f004 fdbc 	bl	8009d20 <USB_ReadInterrupts>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051ae:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80051b2:	f040 80a7 	bne.w	8005304 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80051b6:	2300      	movs	r3, #0
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f004 fdc1 	bl	8009d46 <USB_ReadDevAllOutEpInterrupt>
 80051c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80051c6:	e099      	b.n	80052fc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	f003 0301 	and.w	r3, r3, #1
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	f000 808e 	beq.w	80052f0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	4611      	mov	r1, r2
 80051de:	4618      	mov	r0, r3
 80051e0:	f004 fde5 	bl	8009dae <USB_ReadDevOutEPInterrupt>
 80051e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00c      	beq.n	800520a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fc:	461a      	mov	r2, r3
 80051fe:	2301      	movs	r3, #1
 8005200:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005202:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fe65 	bl	8005ed4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00c      	beq.n	800522e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005220:	461a      	mov	r2, r3
 8005222:	2308      	movs	r3, #8
 8005224:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005226:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fea1 	bl	8005f70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f003 0310 	and.w	r3, r3, #16
 8005234:	2b00      	cmp	r3, #0
 8005236:	d008      	beq.n	800524a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005244:	461a      	mov	r2, r3
 8005246:	2310      	movs	r3, #16
 8005248:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d030      	beq.n	80052b6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005254:	6a3b      	ldr	r3, [r7, #32]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525c:	2b80      	cmp	r3, #128	; 0x80
 800525e:	d109      	bne.n	8005274 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005260:	69fb      	ldr	r3, [r7, #28]
 8005262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800526e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005272:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005276:	4613      	mov	r3, r2
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	4413      	add	r3, r2
 8005286:	3304      	adds	r3, #4
 8005288:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	78db      	ldrb	r3, [r3, #3]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d108      	bne.n	80052a4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	2200      	movs	r2, #0
 8005296:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529a:	b2db      	uxtb	r3, r3
 800529c:	4619      	mov	r1, r3
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f00a faae 	bl	800f800 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80052a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b0:	461a      	mov	r2, r3
 80052b2:	2302      	movs	r3, #2
 80052b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d008      	beq.n	80052d2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052cc:	461a      	mov	r2, r3
 80052ce:	2320      	movs	r3, #32
 80052d0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d009      	beq.n	80052f0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e8:	461a      	mov	r2, r3
 80052ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80052ee:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f2:	3301      	adds	r3, #1
 80052f4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80052f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f8:	085b      	lsrs	r3, r3, #1
 80052fa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f47f af62 	bne.w	80051c8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4618      	mov	r0, r3
 800530a:	f004 fd09 	bl	8009d20 <USB_ReadInterrupts>
 800530e:	4603      	mov	r3, r0
 8005310:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005314:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005318:	f040 80a4 	bne.w	8005464 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4618      	mov	r0, r3
 8005322:	f004 fd2a 	bl	8009d7a <USB_ReadDevAllInEpInterrupt>
 8005326:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005328:	2300      	movs	r3, #0
 800532a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800532c:	e096      	b.n	800545c <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800532e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 808b 	beq.w	8005450 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	4611      	mov	r1, r2
 8005344:	4618      	mov	r0, r3
 8005346:	f004 fd50 	bl	8009dea <USB_ReadDevInEPInterrupt>
 800534a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d020      	beq.n	8005398 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005358:	f003 030f 	and.w	r3, r3, #15
 800535c:	2201      	movs	r2, #1
 800535e:	fa02 f303 	lsl.w	r3, r2, r3
 8005362:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005364:	69fb      	ldr	r3, [r7, #28]
 8005366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800536a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	43db      	mvns	r3, r3
 8005370:	69f9      	ldr	r1, [r7, #28]
 8005372:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005376:	4013      	ands	r3, r2
 8005378:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005386:	461a      	mov	r2, r3
 8005388:	2301      	movs	r3, #1
 800538a:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	b2db      	uxtb	r3, r3
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f00a f99f 	bl	800f6d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d008      	beq.n	80053b4 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ae:	461a      	mov	r2, r3
 80053b0:	2308      	movs	r3, #8
 80053b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d008      	beq.n	80053d0 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80053be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ca:	461a      	mov	r2, r3
 80053cc:	2310      	movs	r3, #16
 80053ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d008      	beq.n	80053ec <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e6:	461a      	mov	r2, r3
 80053e8:	2340      	movs	r3, #64	; 0x40
 80053ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d023      	beq.n	800543e <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80053f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053f8:	6a38      	ldr	r0, [r7, #32]
 80053fa:	f003 fde7 	bl	8008fcc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80053fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005400:	4613      	mov	r3, r2
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	3338      	adds	r3, #56	; 0x38
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	4413      	add	r3, r2
 800540e:	3304      	adds	r3, #4
 8005410:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	78db      	ldrb	r3, [r3, #3]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d108      	bne.n	800542c <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	2200      	movs	r2, #0
 800541e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	b2db      	uxtb	r3, r3
 8005424:	4619      	mov	r1, r3
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f00a f9fc 	bl	800f824 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005438:	461a      	mov	r2, r3
 800543a:	2302      	movs	r3, #2
 800543c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fcba 	bl	8005dc4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	3301      	adds	r3, #1
 8005454:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	085b      	lsrs	r3, r3, #1
 800545a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	2b00      	cmp	r3, #0
 8005460:	f47f af65 	bne.w	800532e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f004 fc59 	bl	8009d20 <USB_ReadInterrupts>
 800546e:	4603      	mov	r3, r0
 8005470:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005474:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005478:	d122      	bne.n	80054c0 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005488:	f023 0301 	bic.w	r3, r3, #1
 800548c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005494:	2b01      	cmp	r3, #1
 8005496:	d108      	bne.n	80054aa <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80054a0:	2100      	movs	r1, #0
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f00a fc1c 	bl	800fce0 <HAL_PCDEx_LPM_Callback>
 80054a8:	e002      	b.n	80054b0 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f00a f980 	bl	800f7b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	695a      	ldr	r2, [r3, #20]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80054be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f004 fc2b 	bl	8009d20 <USB_ReadInterrupts>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d4:	d112      	bne.n	80054fc <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 0301 	and.w	r3, r3, #1
 80054e2:	2b01      	cmp	r3, #1
 80054e4:	d102      	bne.n	80054ec <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f00a f93c 	bl	800f764 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	695a      	ldr	r2, [r3, #20]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80054fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4618      	mov	r0, r3
 8005502:	f004 fc0d 	bl	8009d20 <USB_ReadInterrupts>
 8005506:	4603      	mov	r3, r0
 8005508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800550c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005510:	d121      	bne.n	8005556 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	695a      	ldr	r2, [r3, #20]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005520:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005528:	2b00      	cmp	r3, #0
 800552a:	d111      	bne.n	8005550 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553a:	089b      	lsrs	r3, r3, #2
 800553c:	f003 020f 	and.w	r2, r3, #15
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005546:	2101      	movs	r1, #1
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f00a fbc9 	bl	800fce0 <HAL_PCDEx_LPM_Callback>
 800554e:	e002      	b.n	8005556 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f00a f907 	bl	800f764 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4618      	mov	r0, r3
 800555c:	f004 fbe0 	bl	8009d20 <USB_ReadInterrupts>
 8005560:	4603      	mov	r3, r0
 8005562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800556a:	f040 80b5 	bne.w	80056d8 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	69fa      	ldr	r2, [r7, #28]
 8005578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800557c:	f023 0301 	bic.w	r3, r3, #1
 8005580:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2110      	movs	r1, #16
 8005588:	4618      	mov	r0, r3
 800558a:	f003 fd1f 	bl	8008fcc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800558e:	2300      	movs	r3, #0
 8005590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005592:	e046      	b.n	8005622 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a0:	461a      	mov	r2, r3
 80055a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80055a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055b8:	0151      	lsls	r1, r2, #5
 80055ba:	69fa      	ldr	r2, [r7, #28]
 80055bc:	440a      	add	r2, r1
 80055be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80055c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d4:	461a      	mov	r2, r3
 80055d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80055da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	69fb      	ldr	r3, [r7, #28]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ec:	0151      	lsls	r1, r2, #5
 80055ee:	69fa      	ldr	r2, [r7, #28]
 80055f0:	440a      	add	r2, r1
 80055f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800560c:	0151      	lsls	r1, r2, #5
 800560e:	69fa      	ldr	r2, [r7, #28]
 8005610:	440a      	add	r2, r1
 8005612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005616:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800561a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561e:	3301      	adds	r3, #1
 8005620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005628:	429a      	cmp	r2, r3
 800562a:	d3b3      	bcc.n	8005594 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005632:	69db      	ldr	r3, [r3, #28]
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800563a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800563e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005644:	2b00      	cmp	r3, #0
 8005646:	d016      	beq.n	8005676 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800564e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005652:	69fa      	ldr	r2, [r7, #28]
 8005654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005658:	f043 030b 	orr.w	r3, r3, #11
 800565c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800566e:	f043 030b 	orr.w	r3, r3, #11
 8005672:	6453      	str	r3, [r2, #68]	; 0x44
 8005674:	e015      	b.n	80056a2 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005676:	69fb      	ldr	r3, [r7, #28]
 8005678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	69fa      	ldr	r2, [r7, #28]
 8005680:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005684:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005688:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800568c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	69fa      	ldr	r2, [r7, #28]
 8005698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800569c:	f043 030b 	orr.w	r3, r3, #11
 80056a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80056b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80056c0:	4619      	mov	r1, r3
 80056c2:	4610      	mov	r0, r2
 80056c4:	f004 fbf0 	bl	8009ea8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	695a      	ldr	r2, [r3, #20]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80056d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4618      	mov	r0, r3
 80056de:	f004 fb1f 	bl	8009d20 <USB_ReadInterrupts>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ec:	d124      	bne.n	8005738 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f004 fbb5 	bl	8009e62 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f003 fce2 	bl	80090c6 <USB_GetDevSpeed>
 8005702:	4603      	mov	r3, r0
 8005704:	461a      	mov	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681c      	ldr	r4, [r3, #0]
 800570e:	f001 fb87 	bl	8006e20 <HAL_RCC_GetHCLKFreq>
 8005712:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005718:	b2db      	uxtb	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	4620      	mov	r0, r4
 800571e:	f003 fa09 	bl	8008b34 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f009 ffff 	bl	800f726 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695a      	ldr	r2, [r3, #20]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005736:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4618      	mov	r0, r3
 800573e:	f004 faef 	bl	8009d20 <USB_ReadInterrupts>
 8005742:	4603      	mov	r3, r0
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b08      	cmp	r3, #8
 800574a:	d10a      	bne.n	8005762 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800574c:	6878      	ldr	r0, [r7, #4]
 800574e:	f009 ffdc 	bl	800f70a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695a      	ldr	r2, [r3, #20]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f002 0208 	and.w	r2, r2, #8
 8005760:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f004 fada 	bl	8009d20 <USB_ReadInterrupts>
 800576c:	4603      	mov	r3, r0
 800576e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005772:	2b80      	cmp	r3, #128	; 0x80
 8005774:	d122      	bne.n	80057bc <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005776:	6a3b      	ldr	r3, [r7, #32]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005782:	2301      	movs	r3, #1
 8005784:	627b      	str	r3, [r7, #36]	; 0x24
 8005786:	e014      	b.n	80057b2 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578c:	4613      	mov	r3, r2
 800578e:	00db      	lsls	r3, r3, #3
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800579a:	781b      	ldrb	r3, [r3, #0]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d105      	bne.n	80057ac <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80057a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	4619      	mov	r1, r3
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fadb 	bl	8005d62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	3301      	adds	r3, #1
 80057b0:	627b      	str	r3, [r7, #36]	; 0x24
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d3e5      	bcc.n	8005788 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f004 faad 	bl	8009d20 <USB_ReadInterrupts>
 80057c6:	4603      	mov	r3, r0
 80057c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d0:	d13b      	bne.n	800584a <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057d2:	2301      	movs	r3, #1
 80057d4:	627b      	str	r3, [r7, #36]	; 0x24
 80057d6:	e02b      	b.n	8005830 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80057d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057da:	015a      	lsls	r2, r3, #5
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	4413      	add	r3, r2
 80057e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ec:	4613      	mov	r3, r2
 80057ee:	00db      	lsls	r3, r3, #3
 80057f0:	4413      	add	r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	440b      	add	r3, r1
 80057f6:	3340      	adds	r3, #64	; 0x40
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d115      	bne.n	800582a <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80057fe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005800:	2b00      	cmp	r3, #0
 8005802:	da12      	bge.n	800582a <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005808:	4613      	mov	r3, r2
 800580a:	00db      	lsls	r3, r3, #3
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	440b      	add	r3, r1
 8005812:	333f      	adds	r3, #63	; 0x3f
 8005814:	2201      	movs	r2, #1
 8005816:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	b2db      	uxtb	r3, r3
 800581c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005820:	b2db      	uxtb	r3, r3
 8005822:	4619      	mov	r1, r3
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f000 fa9c 	bl	8005d62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	3301      	adds	r3, #1
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005836:	429a      	cmp	r2, r3
 8005838:	d3ce      	bcc.n	80057d8 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	695a      	ldr	r2, [r3, #20]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005848:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4618      	mov	r0, r3
 8005850:	f004 fa66 	bl	8009d20 <USB_ReadInterrupts>
 8005854:	4603      	mov	r3, r0
 8005856:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800585a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800585e:	d155      	bne.n	800590c <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005860:	2301      	movs	r3, #1
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
 8005864:	e045      	b.n	80058f2 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	4413      	add	r3, r2
 800586e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587a:	4613      	mov	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	4413      	add	r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	440b      	add	r3, r1
 8005884:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d12e      	bne.n	80058ec <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800588e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005890:	2b00      	cmp	r3, #0
 8005892:	da2b      	bge.n	80058ec <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80058a0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d121      	bne.n	80058ec <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058ac:	4613      	mov	r3, r2
 80058ae:	00db      	lsls	r3, r3, #3
 80058b0:	4413      	add	r3, r2
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	440b      	add	r3, r1
 80058b6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80058ba:	2201      	movs	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	695b      	ldr	r3, [r3, #20]
 80058ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10a      	bne.n	80058ec <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	69fa      	ldr	r2, [r7, #28]
 80058e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058e8:	6053      	str	r3, [r2, #4]
            break;
 80058ea:	e007      	b.n	80058fc <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	3301      	adds	r3, #1
 80058f0:	627b      	str	r3, [r7, #36]	; 0x24
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d3b4      	bcc.n	8005866 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	695a      	ldr	r2, [r3, #20]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800590a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4618      	mov	r0, r3
 8005912:	f004 fa05 	bl	8009d20 <USB_ReadInterrupts>
 8005916:	4603      	mov	r3, r0
 8005918:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800591c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005920:	d10a      	bne.n	8005938 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f009 ff90 	bl	800f848 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	695a      	ldr	r2, [r3, #20]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005936:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4618      	mov	r0, r3
 800593e:	f004 f9ef 	bl	8009d20 <USB_ReadInterrupts>
 8005942:	4603      	mov	r3, r0
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b04      	cmp	r3, #4
 800594a:	d115      	bne.n	8005978 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f003 0304 	and.w	r3, r3, #4
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f009 ff80 	bl	800f864 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6859      	ldr	r1, [r3, #4]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	430a      	orrs	r2, r1
 8005972:	605a      	str	r2, [r3, #4]
 8005974:	e000      	b.n	8005978 <HAL_PCD_IRQHandler+0x920>
      return;
 8005976:	bf00      	nop
    }
  }
}
 8005978:	3734      	adds	r7, #52	; 0x34
 800597a:	46bd      	mov	sp, r7
 800597c:	bd90      	pop	{r4, r7, pc}

0800597e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b082      	sub	sp, #8
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
 8005986:	460b      	mov	r3, r1
 8005988:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_PCD_SetAddress+0x1a>
 8005994:	2302      	movs	r3, #2
 8005996:	e013      	b.n	80059c0 <HAL_PCD_SetAddress+0x42>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	78fa      	ldrb	r2, [r7, #3]
 80059a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	4611      	mov	r1, r2
 80059b0:	4618      	mov	r0, r3
 80059b2:	f004 f94d 	bl	8009c50 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	4608      	mov	r0, r1
 80059d2:	4611      	mov	r1, r2
 80059d4:	461a      	mov	r2, r3
 80059d6:	4603      	mov	r3, r0
 80059d8:	70fb      	strb	r3, [r7, #3]
 80059da:	460b      	mov	r3, r1
 80059dc:	803b      	strh	r3, [r7, #0]
 80059de:	4613      	mov	r3, r2
 80059e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	da0f      	bge.n	8005a0e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059ee:	78fb      	ldrb	r3, [r7, #3]
 80059f0:	f003 020f 	and.w	r2, r3, #15
 80059f4:	4613      	mov	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	3338      	adds	r3, #56	; 0x38
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	4413      	add	r3, r2
 8005a02:	3304      	adds	r3, #4
 8005a04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	705a      	strb	r2, [r3, #1]
 8005a0c:	e00f      	b.n	8005a2e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a0e:	78fb      	ldrb	r3, [r7, #3]
 8005a10:	f003 020f 	and.w	r2, r3, #15
 8005a14:	4613      	mov	r3, r2
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	4413      	add	r3, r2
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	4413      	add	r3, r2
 8005a24:	3304      	adds	r3, #4
 8005a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005a2e:	78fb      	ldrb	r3, [r7, #3]
 8005a30:	f003 030f 	and.w	r3, r3, #15
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005a3a:	883a      	ldrh	r2, [r7, #0]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	78ba      	ldrb	r2, [r7, #2]
 8005a44:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	785b      	ldrb	r3, [r3, #1]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d004      	beq.n	8005a58 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005a58:	78bb      	ldrb	r3, [r7, #2]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d102      	bne.n	8005a64 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_PCD_EP_Open+0xaa>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e00e      	b.n	8005a90 <HAL_PCD_EP_Open+0xc8>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68f9      	ldr	r1, [r7, #12]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f003 fb3f 	bl	8009104 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005a8e:	7afb      	ldrb	r3, [r7, #11]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005aa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	da0f      	bge.n	8005acc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	f003 020f 	and.w	r2, r3, #15
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	3338      	adds	r3, #56	; 0x38
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	4413      	add	r3, r2
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	705a      	strb	r2, [r3, #1]
 8005aca:	e00f      	b.n	8005aec <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005acc:	78fb      	ldrb	r3, [r7, #3]
 8005ace:	f003 020f 	and.w	r2, r3, #15
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	3304      	adds	r3, #4
 8005ae4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005aec:	78fb      	ldrb	r3, [r7, #3]
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d101      	bne.n	8005b06 <HAL_PCD_EP_Close+0x6e>
 8005b02:	2302      	movs	r3, #2
 8005b04:	e00e      	b.n	8005b24 <HAL_PCD_EP_Close+0x8c>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68f9      	ldr	r1, [r7, #12]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f003 fb7d 	bl	8009214 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	607a      	str	r2, [r7, #4]
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b3c:	7afb      	ldrb	r3, [r7, #11]
 8005b3e:	f003 020f 	and.w	r2, r3, #15
 8005b42:	4613      	mov	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	4413      	add	r3, r2
 8005b52:	3304      	adds	r3, #4
 8005b54:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	683a      	ldr	r2, [r7, #0]
 8005b60:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2200      	movs	r2, #0
 8005b66:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b6e:	7afb      	ldrb	r3, [r7, #11]
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	b2da      	uxtb	r2, r3
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	6979      	ldr	r1, [r7, #20]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f003 fc23 	bl	80093cc <USB_EPStartXfer>

  return HAL_OK;
 8005b86:	2300      	movs	r3, #0
}
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3718      	adds	r7, #24
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	607a      	str	r2, [r7, #4]
 8005b9a:	603b      	str	r3, [r7, #0]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ba0:	7afb      	ldrb	r3, [r7, #11]
 8005ba2:	f003 020f 	and.w	r2, r3, #15
 8005ba6:	4613      	mov	r3, r2
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	4413      	add	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	3338      	adds	r3, #56	; 0x38
 8005bb0:	68fa      	ldr	r2, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	3304      	adds	r3, #4
 8005bb6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	2201      	movs	r2, #1
 8005bce:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bd0:	7afb      	ldrb	r3, [r7, #11]
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6979      	ldr	r1, [r7, #20]
 8005be2:	4618      	mov	r0, r3
 8005be4:	f003 fbf2 	bl	80093cc <USB_EPStartXfer>

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bfe:	78fb      	ldrb	r3, [r7, #3]
 8005c00:	f003 020f 	and.w	r2, r3, #15
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d901      	bls.n	8005c10 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e04e      	b.n	8005cae <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	da0f      	bge.n	8005c38 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	f003 020f 	and.w	r2, r3, #15
 8005c1e:	4613      	mov	r3, r2
 8005c20:	00db      	lsls	r3, r3, #3
 8005c22:	4413      	add	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	3338      	adds	r3, #56	; 0x38
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2201      	movs	r2, #1
 8005c34:	705a      	strb	r2, [r3, #1]
 8005c36:	e00d      	b.n	8005c54 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c38:	78fa      	ldrb	r2, [r7, #3]
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	00db      	lsls	r3, r3, #3
 8005c3e:	4413      	add	r3, r2
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	4413      	add	r3, r2
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2201      	movs	r2, #1
 8005c58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d101      	bne.n	8005c74 <HAL_PCD_EP_SetStall+0x82>
 8005c70:	2302      	movs	r3, #2
 8005c72:	e01c      	b.n	8005cae <HAL_PCD_EP_SetStall+0xbc>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68f9      	ldr	r1, [r7, #12]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f003 ff10 	bl	8009aa8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c88:	78fb      	ldrb	r3, [r7, #3]
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d108      	bne.n	8005ca4 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	4610      	mov	r0, r2
 8005ca0:	f004 f902 	bl	8009ea8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	f003 020f 	and.w	r2, r3, #15
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d901      	bls.n	8005cd4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e042      	b.n	8005d5a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	da0f      	bge.n	8005cfc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	f003 020f 	and.w	r2, r3, #15
 8005ce2:	4613      	mov	r3, r2
 8005ce4:	00db      	lsls	r3, r3, #3
 8005ce6:	4413      	add	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	3338      	adds	r3, #56	; 0x38
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	4413      	add	r3, r2
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	705a      	strb	r2, [r3, #1]
 8005cfa:	e00f      	b.n	8005d1c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	f003 020f 	and.w	r2, r3, #15
 8005d02:	4613      	mov	r3, r2
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	4413      	add	r3, r2
 8005d12:	3304      	adds	r3, #4
 8005d14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d22:	78fb      	ldrb	r3, [r7, #3]
 8005d24:	f003 030f 	and.w	r3, r3, #15
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d101      	bne.n	8005d3c <HAL_PCD_EP_ClrStall+0x86>
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e00e      	b.n	8005d5a <HAL_PCD_EP_ClrStall+0xa4>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68f9      	ldr	r1, [r7, #12]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f003 ff1a 	bl	8009b84 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	da0c      	bge.n	8005d90 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	f003 020f 	and.w	r2, r3, #15
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	4413      	add	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	3338      	adds	r3, #56	; 0x38
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	4413      	add	r3, r2
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	e00c      	b.n	8005daa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d90:	78fb      	ldrb	r3, [r7, #3]
 8005d92:	f003 020f 	and.w	r2, r3, #15
 8005d96:	4613      	mov	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	4413      	add	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	4413      	add	r3, r2
 8005da6:	3304      	adds	r3, #4
 8005da8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68f9      	ldr	r1, [r7, #12]
 8005db0:	4618      	mov	r0, r3
 8005db2:	f003 fd3d 	bl	8009830 <USB_EPStopXfer>
 8005db6:	4603      	mov	r3, r0
 8005db8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005dba:	7afb      	ldrb	r3, [r7, #11]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b088      	sub	sp, #32
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	4613      	mov	r3, r2
 8005ddc:	00db      	lsls	r3, r3, #3
 8005dde:	4413      	add	r3, r2
 8005de0:	009b      	lsls	r3, r3, #2
 8005de2:	3338      	adds	r3, #56	; 0x38
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	4413      	add	r3, r2
 8005de8:	3304      	adds	r3, #4
 8005dea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	695a      	ldr	r2, [r3, #20]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d901      	bls.n	8005dfc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e067      	b.n	8005ecc <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	691a      	ldr	r2, [r3, #16]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	695b      	ldr	r3, [r3, #20]
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	69fa      	ldr	r2, [r7, #28]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d902      	bls.n	8005e18 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	3303      	adds	r3, #3
 8005e1c:	089b      	lsrs	r3, r3, #2
 8005e1e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e20:	e026      	b.n	8005e70 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	691a      	ldr	r2, [r3, #16]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	1ad3      	subs	r3, r2, r3
 8005e2c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d902      	bls.n	8005e3e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	3303      	adds	r3, #3
 8005e42:	089b      	lsrs	r3, r3, #2
 8005e44:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	68d9      	ldr	r1, [r3, #12]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	6978      	ldr	r0, [r7, #20]
 8005e54:	f003 fd96 	bl	8009984 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	68da      	ldr	r2, [r3, #12]
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	441a      	add	r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	695a      	ldr	r2, [r3, #20]
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	441a      	add	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e80:	69ba      	ldr	r2, [r7, #24]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d809      	bhi.n	8005e9a <PCD_WriteEmptyTxFifo+0xd6>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	695a      	ldr	r2, [r3, #20]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d203      	bcs.n	8005e9a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1c3      	bne.n	8005e22 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	691a      	ldr	r2, [r3, #16]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	695b      	ldr	r3, [r3, #20]
 8005ea2:	429a      	cmp	r2, r3
 8005ea4:	d811      	bhi.n	8005eca <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	f003 030f 	and.w	r3, r3, #15
 8005eac:	2201      	movs	r2, #1
 8005eae:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	43db      	mvns	r3, r3
 8005ec0:	6939      	ldr	r1, [r7, #16]
 8005ec2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3720      	adds	r7, #32
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b086      	sub	sp, #24
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	333c      	adds	r3, #60	; 0x3c
 8005eec:	3304      	adds	r3, #4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4a19      	ldr	r2, [pc, #100]	; (8005f6c <PCD_EP_OutXfrComplete_int+0x98>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d124      	bne.n	8005f54 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00a      	beq.n	8005f2a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f20:	461a      	mov	r2, r3
 8005f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f26:	6093      	str	r3, [r2, #8]
 8005f28:	e01a      	b.n	8005f60 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f003 0320 	and.w	r3, r3, #32
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d008      	beq.n	8005f46 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	015a      	lsls	r2, r3, #5
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f40:	461a      	mov	r2, r3
 8005f42:	2320      	movs	r3, #32
 8005f44:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f009 fba7 	bl	800f6a0 <HAL_PCD_DataOutStageCallback>
 8005f52:	e005      	b.n	8005f60 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f009 fba0 	bl	800f6a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	4f54310a 	.word	0x4f54310a

08005f70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	333c      	adds	r3, #60	; 0x3c
 8005f88:	3304      	adds	r3, #4
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	015a      	lsls	r2, r3, #5
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	4413      	add	r3, r2
 8005f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	4a0c      	ldr	r2, [pc, #48]	; (8005fd4 <PCD_EP_OutSetupPacket_int+0x64>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d90e      	bls.n	8005fc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d009      	beq.n	8005fc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f009 fb59 	bl	800f67c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	4f54300a 	.word	0x4f54300a

08005fd8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b085      	sub	sp, #20
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	70fb      	strb	r3, [r7, #3]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005ff0:	78fb      	ldrb	r3, [r7, #3]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d107      	bne.n	8006006 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005ff6:	883b      	ldrh	r3, [r7, #0]
 8005ff8:	0419      	lsls	r1, r3, #16
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	430a      	orrs	r2, r1
 8006002:	629a      	str	r2, [r3, #40]	; 0x28
 8006004:	e028      	b.n	8006058 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600c:	0c1b      	lsrs	r3, r3, #16
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	4413      	add	r3, r2
 8006012:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006014:	2300      	movs	r3, #0
 8006016:	73fb      	strb	r3, [r7, #15]
 8006018:	e00d      	b.n	8006036 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	7bfb      	ldrb	r3, [r7, #15]
 8006020:	3340      	adds	r3, #64	; 0x40
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	0c1b      	lsrs	r3, r3, #16
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	4413      	add	r3, r2
 800602e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	3301      	adds	r3, #1
 8006034:	73fb      	strb	r3, [r7, #15]
 8006036:	7bfa      	ldrb	r2, [r7, #15]
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	3b01      	subs	r3, #1
 800603c:	429a      	cmp	r2, r3
 800603e:	d3ec      	bcc.n	800601a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006040:	883b      	ldrh	r3, [r7, #0]
 8006042:	0418      	lsls	r0, r3, #16
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6819      	ldr	r1, [r3, #0]
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	3b01      	subs	r3, #1
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	4302      	orrs	r2, r0
 8006050:	3340      	adds	r3, #64	; 0x40
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	440b      	add	r3, r1
 8006056:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006058:	2300      	movs	r3, #0
}
 800605a:	4618      	mov	r0, r3
 800605c:	3714      	adds	r7, #20
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr

08006066 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006066:	b480      	push	{r7}
 8006068:	b083      	sub	sp, #12
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	460b      	mov	r3, r1
 8006070:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	887a      	ldrh	r2, [r7, #2]
 8006078:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	370c      	adds	r7, #12
 8006080:	46bd      	mov	sp, r7
 8006082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006086:	4770      	bx	lr

08006088 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006088:	b480      	push	{r7}
 800608a:	b085      	sub	sp, #20
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	699b      	ldr	r3, [r3, #24]
 80060aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060ba:	f043 0303 	orr.w	r3, r3, #3
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80060d0:	b480      	push	{r7}
 80060d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a04      	ldr	r2, [pc, #16]	; (80060ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060de:	6013      	str	r3, [r2, #0]
}
 80060e0:	bf00      	nop
 80060e2:	46bd      	mov	sp, r7
 80060e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	40007000 	.word	0x40007000

080060f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80060f0:	b480      	push	{r7}
 80060f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80060f4:	4b04      	ldr	r3, [pc, #16]	; (8006108 <HAL_PWREx_GetVoltageRange+0x18>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	40007000 	.word	0x40007000

0800610c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800611a:	d130      	bne.n	800617e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800611c:	4b23      	ldr	r3, [pc, #140]	; (80061ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006124:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006128:	d038      	beq.n	800619c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800612a:	4b20      	ldr	r3, [pc, #128]	; (80061ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006132:	4a1e      	ldr	r2, [pc, #120]	; (80061ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006134:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006138:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800613a:	4b1d      	ldr	r3, [pc, #116]	; (80061b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2232      	movs	r2, #50	; 0x32
 8006140:	fb02 f303 	mul.w	r3, r2, r3
 8006144:	4a1b      	ldr	r2, [pc, #108]	; (80061b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006146:	fba2 2303 	umull	r2, r3, r2, r3
 800614a:	0c9b      	lsrs	r3, r3, #18
 800614c:	3301      	adds	r3, #1
 800614e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006150:	e002      	b.n	8006158 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3b01      	subs	r3, #1
 8006156:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006158:	4b14      	ldr	r3, [pc, #80]	; (80061ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006164:	d102      	bne.n	800616c <HAL_PWREx_ControlVoltageScaling+0x60>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1f2      	bne.n	8006152 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800616c:	4b0f      	ldr	r3, [pc, #60]	; (80061ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800616e:	695b      	ldr	r3, [r3, #20]
 8006170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006178:	d110      	bne.n	800619c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e00f      	b.n	800619e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800617e:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800618a:	d007      	beq.n	800619c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800618c:	4b07      	ldr	r3, [pc, #28]	; (80061ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006194:	4a05      	ldr	r2, [pc, #20]	; (80061ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006196:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800619a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800619c:	2300      	movs	r3, #0
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	40007000 	.word	0x40007000
 80061b0:	20000008 	.word	0x20000008
 80061b4:	431bde83 	.word	0x431bde83

080061b8 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80061b8:	b480      	push	{r7}
 80061ba:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80061bc:	4b05      	ldr	r3, [pc, #20]	; (80061d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	4a04      	ldr	r2, [pc, #16]	; (80061d4 <HAL_PWREx_EnableVddUSB+0x1c>)
 80061c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061c6:	6053      	str	r3, [r2, #4]
}
 80061c8:	bf00      	nop
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	40007000 	.word	0x40007000

080061d8 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b086      	sub	sp, #24
 80061dc:	af02      	add	r7, sp, #8
 80061de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80061e0:	f7fc fca6 	bl	8002b30 <HAL_GetTick>
 80061e4:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d101      	bne.n	80061f0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e063      	b.n	80062b8 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10b      	bne.n	8006214 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7fc f8cd 	bl	80023a4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800620a:	f241 3188 	movw	r1, #5000	; 0x1388
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f858 	bl	80062c4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	3b01      	subs	r3, #1
 8006224:	021a      	lsls	r2, r3, #8
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	9300      	str	r3, [sp, #0]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	2120      	movs	r1, #32
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f850 	bl	80062e0 <QSPI_WaitFlagStateUntilTimeout>
 8006240:	4603      	mov	r3, r0
 8006242:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006244:	7afb      	ldrb	r3, [r7, #11]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d131      	bne.n	80062ae <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006254:	f023 0310 	bic.w	r3, r3, #16
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	6852      	ldr	r2, [r2, #4]
 800625c:	0611      	lsls	r1, r2, #24
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	68d2      	ldr	r2, [r2, #12]
 8006262:	4311      	orrs	r1, r2
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	6812      	ldr	r2, [r2, #0]
 8006268:	430b      	orrs	r3, r1
 800626a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	4b13      	ldr	r3, [pc, #76]	; (80062c0 <HAL_QSPI_Init+0xe8>)
 8006274:	4013      	ands	r3, r2
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	6912      	ldr	r2, [r2, #16]
 800627a:	0411      	lsls	r1, r2, #16
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6952      	ldr	r2, [r2, #20]
 8006280:	4311      	orrs	r1, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6992      	ldr	r2, [r2, #24]
 8006286:	4311      	orrs	r1, r2
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6812      	ldr	r2, [r2, #0]
 800628c:	430b      	orrs	r3, r1
 800628e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681a      	ldr	r2, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0201 	orr.w	r2, r2, #1
 800629e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80062b6:	7afb      	ldrb	r3, [r7, #11]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}
 80062c0:	ffe0f8fe 	.word	0xffe0f8fe

080062c4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	641a      	str	r2, [r3, #64]	; 0x40
}
 80062d4:	bf00      	nop
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	4613      	mov	r3, r2
 80062ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80062f0:	e01a      	b.n	8006328 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f8:	d016      	beq.n	8006328 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062fa:	f7fc fc19 	bl	8002b30 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	69ba      	ldr	r2, [r7, #24]
 8006306:	429a      	cmp	r2, r3
 8006308:	d302      	bcc.n	8006310 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d10b      	bne.n	8006328 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2204      	movs	r2, #4
 8006314:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800631c:	f043 0201 	orr.w	r2, r3, #1
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	e00e      	b.n	8006346 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	689a      	ldr	r2, [r3, #8]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	4013      	ands	r3, r2
 8006332:	2b00      	cmp	r3, #0
 8006334:	bf14      	ite	ne
 8006336:	2301      	movne	r3, #1
 8006338:	2300      	moveq	r3, #0
 800633a:	b2db      	uxtb	r3, r3
 800633c:	461a      	mov	r2, r3
 800633e:	79fb      	ldrb	r3, [r7, #7]
 8006340:	429a      	cmp	r2, r3
 8006342:	d1d6      	bne.n	80062f2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006344:	2300      	movs	r3, #0
}
 8006346:	4618      	mov	r0, r3
 8006348:	3710      	adds	r7, #16
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}
	...

08006350 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e3ca      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006362:	4b97      	ldr	r3, [pc, #604]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f003 030c 	and.w	r3, r3, #12
 800636a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800636c:	4b94      	ldr	r3, [pc, #592]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f003 0303 	and.w	r3, r3, #3
 8006374:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f003 0310 	and.w	r3, r3, #16
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 80e4 	beq.w	800654c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d007      	beq.n	800639a <HAL_RCC_OscConfig+0x4a>
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2b0c      	cmp	r3, #12
 800638e:	f040 808b 	bne.w	80064a8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2b01      	cmp	r3, #1
 8006396:	f040 8087 	bne.w	80064a8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800639a:	4b89      	ldr	r3, [pc, #548]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f003 0302 	and.w	r3, r3, #2
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d005      	beq.n	80063b2 <HAL_RCC_OscConfig+0x62>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e3a2      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1a      	ldr	r2, [r3, #32]
 80063b6:	4b82      	ldr	r3, [pc, #520]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d004      	beq.n	80063cc <HAL_RCC_OscConfig+0x7c>
 80063c2:	4b7f      	ldr	r3, [pc, #508]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063ca:	e005      	b.n	80063d8 <HAL_RCC_OscConfig+0x88>
 80063cc:	4b7c      	ldr	r3, [pc, #496]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80063ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80063d2:	091b      	lsrs	r3, r3, #4
 80063d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80063d8:	4293      	cmp	r3, r2
 80063da:	d223      	bcs.n	8006424 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	4618      	mov	r0, r3
 80063e2:	f000 fd55 	bl	8006e90 <RCC_SetFlashLatencyFromMSIRange>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e383      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80063f0:	4b73      	ldr	r3, [pc, #460]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a72      	ldr	r2, [pc, #456]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80063f6:	f043 0308 	orr.w	r3, r3, #8
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	4b70      	ldr	r3, [pc, #448]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6a1b      	ldr	r3, [r3, #32]
 8006408:	496d      	ldr	r1, [pc, #436]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 800640a:	4313      	orrs	r3, r2
 800640c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800640e:	4b6c      	ldr	r3, [pc, #432]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	021b      	lsls	r3, r3, #8
 800641c:	4968      	ldr	r1, [pc, #416]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 800641e:	4313      	orrs	r3, r2
 8006420:	604b      	str	r3, [r1, #4]
 8006422:	e025      	b.n	8006470 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006424:	4b66      	ldr	r3, [pc, #408]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a65      	ldr	r2, [pc, #404]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 800642a:	f043 0308 	orr.w	r3, r3, #8
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	4b63      	ldr	r3, [pc, #396]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	4960      	ldr	r1, [pc, #384]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 800643e:	4313      	orrs	r3, r2
 8006440:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006442:	4b5f      	ldr	r3, [pc, #380]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	021b      	lsls	r3, r3, #8
 8006450:	495b      	ldr	r1, [pc, #364]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 8006452:	4313      	orrs	r3, r2
 8006454:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d109      	bne.n	8006470 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	4618      	mov	r0, r3
 8006462:	f000 fd15 	bl	8006e90 <RCC_SetFlashLatencyFromMSIRange>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e343      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006470:	f000 fc4a 	bl	8006d08 <HAL_RCC_GetSysClockFreq>
 8006474:	4602      	mov	r2, r0
 8006476:	4b52      	ldr	r3, [pc, #328]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	091b      	lsrs	r3, r3, #4
 800647c:	f003 030f 	and.w	r3, r3, #15
 8006480:	4950      	ldr	r1, [pc, #320]	; (80065c4 <HAL_RCC_OscConfig+0x274>)
 8006482:	5ccb      	ldrb	r3, [r1, r3]
 8006484:	f003 031f 	and.w	r3, r3, #31
 8006488:	fa22 f303 	lsr.w	r3, r2, r3
 800648c:	4a4e      	ldr	r2, [pc, #312]	; (80065c8 <HAL_RCC_OscConfig+0x278>)
 800648e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006490:	4b4e      	ldr	r3, [pc, #312]	; (80065cc <HAL_RCC_OscConfig+0x27c>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4618      	mov	r0, r3
 8006496:	f7fc fafb 	bl	8002a90 <HAL_InitTick>
 800649a:	4603      	mov	r3, r0
 800649c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800649e:	7bfb      	ldrb	r3, [r7, #15]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d052      	beq.n	800654a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
 80064a6:	e327      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d032      	beq.n	8006516 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80064b0:	4b43      	ldr	r3, [pc, #268]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a42      	ldr	r2, [pc, #264]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80064bc:	f7fc fb38 	bl	8002b30 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80064c4:	f7fc fb34 	bl	8002b30 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e310      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80064d6:	4b3a      	ldr	r3, [pc, #232]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0f0      	beq.n	80064c4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80064e2:	4b37      	ldr	r3, [pc, #220]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	4a36      	ldr	r2, [pc, #216]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80064e8:	f043 0308 	orr.w	r3, r3, #8
 80064ec:	6013      	str	r3, [r2, #0]
 80064ee:	4b34      	ldr	r3, [pc, #208]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a1b      	ldr	r3, [r3, #32]
 80064fa:	4931      	ldr	r1, [pc, #196]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006500:	4b2f      	ldr	r3, [pc, #188]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	69db      	ldr	r3, [r3, #28]
 800650c:	021b      	lsls	r3, r3, #8
 800650e:	492c      	ldr	r1, [pc, #176]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 8006510:	4313      	orrs	r3, r2
 8006512:	604b      	str	r3, [r1, #4]
 8006514:	e01a      	b.n	800654c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006516:	4b2a      	ldr	r3, [pc, #168]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a29      	ldr	r2, [pc, #164]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 800651c:	f023 0301 	bic.w	r3, r3, #1
 8006520:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006522:	f7fc fb05 	bl	8002b30 <HAL_GetTick>
 8006526:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006528:	e008      	b.n	800653c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800652a:	f7fc fb01 	bl	8002b30 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	2b02      	cmp	r3, #2
 8006536:	d901      	bls.n	800653c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e2dd      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800653c:	4b20      	ldr	r3, [pc, #128]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0302 	and.w	r3, r3, #2
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1f0      	bne.n	800652a <HAL_RCC_OscConfig+0x1da>
 8006548:	e000      	b.n	800654c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800654a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0301 	and.w	r3, r3, #1
 8006554:	2b00      	cmp	r3, #0
 8006556:	d074      	beq.n	8006642 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	2b08      	cmp	r3, #8
 800655c:	d005      	beq.n	800656a <HAL_RCC_OscConfig+0x21a>
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	2b0c      	cmp	r3, #12
 8006562:	d10e      	bne.n	8006582 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	2b03      	cmp	r3, #3
 8006568:	d10b      	bne.n	8006582 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800656a:	4b15      	ldr	r3, [pc, #84]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d064      	beq.n	8006640 <HAL_RCC_OscConfig+0x2f0>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d160      	bne.n	8006640 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e2ba      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800658a:	d106      	bne.n	800659a <HAL_RCC_OscConfig+0x24a>
 800658c:	4b0c      	ldr	r3, [pc, #48]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a0b      	ldr	r2, [pc, #44]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 8006592:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	e026      	b.n	80065e8 <HAL_RCC_OscConfig+0x298>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065a2:	d115      	bne.n	80065d0 <HAL_RCC_OscConfig+0x280>
 80065a4:	4b06      	ldr	r3, [pc, #24]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a05      	ldr	r2, [pc, #20]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80065aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065ae:	6013      	str	r3, [r2, #0]
 80065b0:	4b03      	ldr	r3, [pc, #12]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a02      	ldr	r2, [pc, #8]	; (80065c0 <HAL_RCC_OscConfig+0x270>)
 80065b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	e014      	b.n	80065e8 <HAL_RCC_OscConfig+0x298>
 80065be:	bf00      	nop
 80065c0:	40021000 	.word	0x40021000
 80065c4:	08014a08 	.word	0x08014a08
 80065c8:	20000008 	.word	0x20000008
 80065cc:	2000000c 	.word	0x2000000c
 80065d0:	4ba0      	ldr	r3, [pc, #640]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a9f      	ldr	r2, [pc, #636]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 80065d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065da:	6013      	str	r3, [r2, #0]
 80065dc:	4b9d      	ldr	r3, [pc, #628]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a9c      	ldr	r2, [pc, #624]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 80065e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d013      	beq.n	8006618 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f0:	f7fc fa9e 	bl	8002b30 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065f8:	f7fc fa9a 	bl	8002b30 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b64      	cmp	r3, #100	; 0x64
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e276      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800660a:	4b92      	ldr	r3, [pc, #584]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d0f0      	beq.n	80065f8 <HAL_RCC_OscConfig+0x2a8>
 8006616:	e014      	b.n	8006642 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006618:	f7fc fa8a 	bl	8002b30 <HAL_GetTick>
 800661c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800661e:	e008      	b.n	8006632 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006620:	f7fc fa86 	bl	8002b30 <HAL_GetTick>
 8006624:	4602      	mov	r2, r0
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	2b64      	cmp	r3, #100	; 0x64
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e262      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006632:	4b88      	ldr	r3, [pc, #544]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1f0      	bne.n	8006620 <HAL_RCC_OscConfig+0x2d0>
 800663e:	e000      	b.n	8006642 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b00      	cmp	r3, #0
 800664c:	d060      	beq.n	8006710 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	2b04      	cmp	r3, #4
 8006652:	d005      	beq.n	8006660 <HAL_RCC_OscConfig+0x310>
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	2b0c      	cmp	r3, #12
 8006658:	d119      	bne.n	800668e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b02      	cmp	r3, #2
 800665e:	d116      	bne.n	800668e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006660:	4b7c      	ldr	r3, [pc, #496]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006668:	2b00      	cmp	r3, #0
 800666a:	d005      	beq.n	8006678 <HAL_RCC_OscConfig+0x328>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e23f      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006678:	4b76      	ldr	r3, [pc, #472]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	691b      	ldr	r3, [r3, #16]
 8006684:	061b      	lsls	r3, r3, #24
 8006686:	4973      	ldr	r1, [pc, #460]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 8006688:	4313      	orrs	r3, r2
 800668a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800668c:	e040      	b.n	8006710 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d023      	beq.n	80066de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006696:	4b6f      	ldr	r3, [pc, #444]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a6e      	ldr	r2, [pc, #440]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 800669c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a2:	f7fc fa45 	bl	8002b30 <HAL_GetTick>
 80066a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066a8:	e008      	b.n	80066bc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066aa:	f7fc fa41 	bl	8002b30 <HAL_GetTick>
 80066ae:	4602      	mov	r2, r0
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	1ad3      	subs	r3, r2, r3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d901      	bls.n	80066bc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80066b8:	2303      	movs	r3, #3
 80066ba:	e21d      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066bc:	4b65      	ldr	r3, [pc, #404]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d0f0      	beq.n	80066aa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066c8:	4b62      	ldr	r3, [pc, #392]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	061b      	lsls	r3, r3, #24
 80066d6:	495f      	ldr	r1, [pc, #380]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	604b      	str	r3, [r1, #4]
 80066dc:	e018      	b.n	8006710 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066de:	4b5d      	ldr	r3, [pc, #372]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a5c      	ldr	r2, [pc, #368]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 80066e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ea:	f7fc fa21 	bl	8002b30 <HAL_GetTick>
 80066ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066f0:	e008      	b.n	8006704 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066f2:	f7fc fa1d 	bl	8002b30 <HAL_GetTick>
 80066f6:	4602      	mov	r2, r0
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	2b02      	cmp	r3, #2
 80066fe:	d901      	bls.n	8006704 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006700:	2303      	movs	r3, #3
 8006702:	e1f9      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006704:	4b53      	ldr	r3, [pc, #332]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1f0      	bne.n	80066f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 0308 	and.w	r3, r3, #8
 8006718:	2b00      	cmp	r3, #0
 800671a:	d03c      	beq.n	8006796 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01c      	beq.n	800675e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006724:	4b4b      	ldr	r3, [pc, #300]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 8006726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800672a:	4a4a      	ldr	r2, [pc, #296]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 800672c:	f043 0301 	orr.w	r3, r3, #1
 8006730:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006734:	f7fc f9fc 	bl	8002b30 <HAL_GetTick>
 8006738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800673a:	e008      	b.n	800674e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800673c:	f7fc f9f8 	bl	8002b30 <HAL_GetTick>
 8006740:	4602      	mov	r2, r0
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	2b02      	cmp	r3, #2
 8006748:	d901      	bls.n	800674e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e1d4      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800674e:	4b41      	ldr	r3, [pc, #260]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 8006750:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0ef      	beq.n	800673c <HAL_RCC_OscConfig+0x3ec>
 800675c:	e01b      	b.n	8006796 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800675e:	4b3d      	ldr	r3, [pc, #244]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 8006760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006764:	4a3b      	ldr	r2, [pc, #236]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 8006766:	f023 0301 	bic.w	r3, r3, #1
 800676a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800676e:	f7fc f9df 	bl	8002b30 <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006774:	e008      	b.n	8006788 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006776:	f7fc f9db 	bl	8002b30 <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d901      	bls.n	8006788 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e1b7      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006788:	4b32      	ldr	r3, [pc, #200]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 800678a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1ef      	bne.n	8006776 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f003 0304 	and.w	r3, r3, #4
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 80a6 	beq.w	80068f0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067a4:	2300      	movs	r3, #0
 80067a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80067a8:	4b2a      	ldr	r3, [pc, #168]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 80067aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10d      	bne.n	80067d0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067b4:	4b27      	ldr	r3, [pc, #156]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 80067b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067b8:	4a26      	ldr	r2, [pc, #152]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 80067ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067be:	6593      	str	r3, [r2, #88]	; 0x58
 80067c0:	4b24      	ldr	r3, [pc, #144]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 80067c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c8:	60bb      	str	r3, [r7, #8]
 80067ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067cc:	2301      	movs	r3, #1
 80067ce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067d0:	4b21      	ldr	r3, [pc, #132]	; (8006858 <HAL_RCC_OscConfig+0x508>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d118      	bne.n	800680e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067dc:	4b1e      	ldr	r3, [pc, #120]	; (8006858 <HAL_RCC_OscConfig+0x508>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a1d      	ldr	r2, [pc, #116]	; (8006858 <HAL_RCC_OscConfig+0x508>)
 80067e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067e8:	f7fc f9a2 	bl	8002b30 <HAL_GetTick>
 80067ec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067ee:	e008      	b.n	8006802 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067f0:	f7fc f99e 	bl	8002b30 <HAL_GetTick>
 80067f4:	4602      	mov	r2, r0
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	1ad3      	subs	r3, r2, r3
 80067fa:	2b02      	cmp	r3, #2
 80067fc:	d901      	bls.n	8006802 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e17a      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006802:	4b15      	ldr	r3, [pc, #84]	; (8006858 <HAL_RCC_OscConfig+0x508>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680a:	2b00      	cmp	r3, #0
 800680c:	d0f0      	beq.n	80067f0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	2b01      	cmp	r3, #1
 8006814:	d108      	bne.n	8006828 <HAL_RCC_OscConfig+0x4d8>
 8006816:	4b0f      	ldr	r3, [pc, #60]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 8006818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800681c:	4a0d      	ldr	r2, [pc, #52]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 800681e:	f043 0301 	orr.w	r3, r3, #1
 8006822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006826:	e029      	b.n	800687c <HAL_RCC_OscConfig+0x52c>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	689b      	ldr	r3, [r3, #8]
 800682c:	2b05      	cmp	r3, #5
 800682e:	d115      	bne.n	800685c <HAL_RCC_OscConfig+0x50c>
 8006830:	4b08      	ldr	r3, [pc, #32]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 8006832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006836:	4a07      	ldr	r2, [pc, #28]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 8006838:	f043 0304 	orr.w	r3, r3, #4
 800683c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006840:	4b04      	ldr	r3, [pc, #16]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 8006842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006846:	4a03      	ldr	r2, [pc, #12]	; (8006854 <HAL_RCC_OscConfig+0x504>)
 8006848:	f043 0301 	orr.w	r3, r3, #1
 800684c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006850:	e014      	b.n	800687c <HAL_RCC_OscConfig+0x52c>
 8006852:	bf00      	nop
 8006854:	40021000 	.word	0x40021000
 8006858:	40007000 	.word	0x40007000
 800685c:	4b9c      	ldr	r3, [pc, #624]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 800685e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006862:	4a9b      	ldr	r2, [pc, #620]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006864:	f023 0301 	bic.w	r3, r3, #1
 8006868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800686c:	4b98      	ldr	r3, [pc, #608]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 800686e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006872:	4a97      	ldr	r2, [pc, #604]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006874:	f023 0304 	bic.w	r3, r3, #4
 8006878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d016      	beq.n	80068b2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006884:	f7fc f954 	bl	8002b30 <HAL_GetTick>
 8006888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800688a:	e00a      	b.n	80068a2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800688c:	f7fc f950 	bl	8002b30 <HAL_GetTick>
 8006890:	4602      	mov	r2, r0
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	1ad3      	subs	r3, r2, r3
 8006896:	f241 3288 	movw	r2, #5000	; 0x1388
 800689a:	4293      	cmp	r3, r2
 800689c:	d901      	bls.n	80068a2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e12a      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068a2:	4b8b      	ldr	r3, [pc, #556]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 80068a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d0ed      	beq.n	800688c <HAL_RCC_OscConfig+0x53c>
 80068b0:	e015      	b.n	80068de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b2:	f7fc f93d 	bl	8002b30 <HAL_GetTick>
 80068b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068b8:	e00a      	b.n	80068d0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ba:	f7fc f939 	bl	8002b30 <HAL_GetTick>
 80068be:	4602      	mov	r2, r0
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	1ad3      	subs	r3, r2, r3
 80068c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d901      	bls.n	80068d0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e113      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068d0:	4b7f      	ldr	r3, [pc, #508]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 80068d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d6:	f003 0302 	and.w	r3, r3, #2
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1ed      	bne.n	80068ba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068de:	7ffb      	ldrb	r3, [r7, #31]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d105      	bne.n	80068f0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068e4:	4b7a      	ldr	r3, [pc, #488]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 80068e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e8:	4a79      	ldr	r2, [pc, #484]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 80068ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068ee:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	f000 80fe 	beq.w	8006af6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fe:	2b02      	cmp	r3, #2
 8006900:	f040 80d0 	bne.w	8006aa4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006904:	4b72      	ldr	r3, [pc, #456]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f003 0203 	and.w	r2, r3, #3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006914:	429a      	cmp	r2, r3
 8006916:	d130      	bne.n	800697a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006922:	3b01      	subs	r3, #1
 8006924:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006926:	429a      	cmp	r2, r3
 8006928:	d127      	bne.n	800697a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006934:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006936:	429a      	cmp	r2, r3
 8006938:	d11f      	bne.n	800697a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006940:	687a      	ldr	r2, [r7, #4]
 8006942:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006944:	2a07      	cmp	r2, #7
 8006946:	bf14      	ite	ne
 8006948:	2201      	movne	r2, #1
 800694a:	2200      	moveq	r2, #0
 800694c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800694e:	4293      	cmp	r3, r2
 8006950:	d113      	bne.n	800697a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695c:	085b      	lsrs	r3, r3, #1
 800695e:	3b01      	subs	r3, #1
 8006960:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006962:	429a      	cmp	r2, r3
 8006964:	d109      	bne.n	800697a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006970:	085b      	lsrs	r3, r3, #1
 8006972:	3b01      	subs	r3, #1
 8006974:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006976:	429a      	cmp	r2, r3
 8006978:	d06e      	beq.n	8006a58 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	2b0c      	cmp	r3, #12
 800697e:	d069      	beq.n	8006a54 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006980:	4b53      	ldr	r3, [pc, #332]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d105      	bne.n	8006998 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800698c:	4b50      	ldr	r3, [pc, #320]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	e0ad      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800699c:	4b4c      	ldr	r3, [pc, #304]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a4b      	ldr	r2, [pc, #300]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 80069a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069a6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80069a8:	f7fc f8c2 	bl	8002b30 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069b0:	f7fc f8be 	bl	8002b30 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e09a      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069c2:	4b43      	ldr	r3, [pc, #268]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1f0      	bne.n	80069b0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069ce:	4b40      	ldr	r3, [pc, #256]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 80069d0:	68da      	ldr	r2, [r3, #12]
 80069d2:	4b40      	ldr	r3, [pc, #256]	; (8006ad4 <HAL_RCC_OscConfig+0x784>)
 80069d4:	4013      	ands	r3, r2
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80069da:	687a      	ldr	r2, [r7, #4]
 80069dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80069de:	3a01      	subs	r2, #1
 80069e0:	0112      	lsls	r2, r2, #4
 80069e2:	4311      	orrs	r1, r2
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80069e8:	0212      	lsls	r2, r2, #8
 80069ea:	4311      	orrs	r1, r2
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80069f0:	0852      	lsrs	r2, r2, #1
 80069f2:	3a01      	subs	r2, #1
 80069f4:	0552      	lsls	r2, r2, #21
 80069f6:	4311      	orrs	r1, r2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80069fc:	0852      	lsrs	r2, r2, #1
 80069fe:	3a01      	subs	r2, #1
 8006a00:	0652      	lsls	r2, r2, #25
 8006a02:	4311      	orrs	r1, r2
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006a08:	0912      	lsrs	r2, r2, #4
 8006a0a:	0452      	lsls	r2, r2, #17
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	4930      	ldr	r1, [pc, #192]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006a10:	4313      	orrs	r3, r2
 8006a12:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006a14:	4b2e      	ldr	r3, [pc, #184]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a2d      	ldr	r2, [pc, #180]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006a1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a1e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a20:	4b2b      	ldr	r3, [pc, #172]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	4a2a      	ldr	r2, [pc, #168]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a2a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006a2c:	f7fc f880 	bl	8002b30 <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a34:	f7fc f87c 	bl	8002b30 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e058      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a46:	4b22      	ldr	r3, [pc, #136]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0f0      	beq.n	8006a34 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006a52:	e050      	b.n	8006af6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e04f      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a58:	4b1d      	ldr	r3, [pc, #116]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d148      	bne.n	8006af6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006a64:	4b1a      	ldr	r3, [pc, #104]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4a19      	ldr	r2, [pc, #100]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a6e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a70:	4b17      	ldr	r3, [pc, #92]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	4a16      	ldr	r2, [pc, #88]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006a76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a7a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a7c:	f7fc f858 	bl	8002b30 <HAL_GetTick>
 8006a80:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a82:	e008      	b.n	8006a96 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a84:	f7fc f854 	bl	8002b30 <HAL_GetTick>
 8006a88:	4602      	mov	r2, r0
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	1ad3      	subs	r3, r2, r3
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d901      	bls.n	8006a96 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006a92:	2303      	movs	r3, #3
 8006a94:	e030      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a96:	4b0e      	ldr	r3, [pc, #56]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f0      	beq.n	8006a84 <HAL_RCC_OscConfig+0x734>
 8006aa2:	e028      	b.n	8006af6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	2b0c      	cmp	r3, #12
 8006aa8:	d023      	beq.n	8006af2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aaa:	4b09      	ldr	r3, [pc, #36]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a08      	ldr	r2, [pc, #32]	; (8006ad0 <HAL_RCC_OscConfig+0x780>)
 8006ab0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ab4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab6:	f7fc f83b 	bl	8002b30 <HAL_GetTick>
 8006aba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006abc:	e00c      	b.n	8006ad8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006abe:	f7fc f837 	bl	8002b30 <HAL_GetTick>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d905      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e013      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
 8006ad0:	40021000 	.word	0x40021000
 8006ad4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ad8:	4b09      	ldr	r3, [pc, #36]	; (8006b00 <HAL_RCC_OscConfig+0x7b0>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1ec      	bne.n	8006abe <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8006ae4:	4b06      	ldr	r3, [pc, #24]	; (8006b00 <HAL_RCC_OscConfig+0x7b0>)
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	4905      	ldr	r1, [pc, #20]	; (8006b00 <HAL_RCC_OscConfig+0x7b0>)
 8006aea:	4b06      	ldr	r3, [pc, #24]	; (8006b04 <HAL_RCC_OscConfig+0x7b4>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	60cb      	str	r3, [r1, #12]
 8006af0:	e001      	b.n	8006af6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e000      	b.n	8006af8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3720      	adds	r7, #32
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40021000 	.word	0x40021000
 8006b04:	feeefffc 	.word	0xfeeefffc

08006b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e0e7      	b.n	8006cec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b1c:	4b75      	ldr	r3, [pc, #468]	; (8006cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d910      	bls.n	8006b4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2a:	4b72      	ldr	r3, [pc, #456]	; (8006cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f023 0207 	bic.w	r2, r3, #7
 8006b32:	4970      	ldr	r1, [pc, #448]	; (8006cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b3a:	4b6e      	ldr	r3, [pc, #440]	; (8006cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f003 0307 	and.w	r3, r3, #7
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d001      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e0cf      	b.n	8006cec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0302 	and.w	r3, r3, #2
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d010      	beq.n	8006b7a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	4b66      	ldr	r3, [pc, #408]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b64:	429a      	cmp	r2, r3
 8006b66:	d908      	bls.n	8006b7a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b68:	4b63      	ldr	r3, [pc, #396]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	4960      	ldr	r1, [pc, #384]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b76:	4313      	orrs	r3, r2
 8006b78:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d04c      	beq.n	8006c20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	2b03      	cmp	r3, #3
 8006b8c:	d107      	bne.n	8006b9e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b8e:	4b5a      	ldr	r3, [pc, #360]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d121      	bne.n	8006bde <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	e0a6      	b.n	8006cec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d107      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ba6:	4b54      	ldr	r3, [pc, #336]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d115      	bne.n	8006bde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e09a      	b.n	8006cec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d107      	bne.n	8006bce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006bbe:	4b4e      	ldr	r3, [pc, #312]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f003 0302 	and.w	r3, r3, #2
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d109      	bne.n	8006bde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e08e      	b.n	8006cec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bce:	4b4a      	ldr	r3, [pc, #296]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e086      	b.n	8006cec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006bde:	4b46      	ldr	r3, [pc, #280]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006be0:	689b      	ldr	r3, [r3, #8]
 8006be2:	f023 0203 	bic.w	r2, r3, #3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	4943      	ldr	r1, [pc, #268]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006bec:	4313      	orrs	r3, r2
 8006bee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bf0:	f7fb ff9e 	bl	8002b30 <HAL_GetTick>
 8006bf4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf6:	e00a      	b.n	8006c0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bf8:	f7fb ff9a 	bl	8002b30 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d901      	bls.n	8006c0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8006c0a:	2303      	movs	r3, #3
 8006c0c:	e06e      	b.n	8006cec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c0e:	4b3a      	ldr	r3, [pc, #232]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f003 020c 	and.w	r2, r3, #12
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d1eb      	bne.n	8006bf8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f003 0302 	and.w	r3, r3, #2
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d010      	beq.n	8006c4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689a      	ldr	r2, [r3, #8]
 8006c30:	4b31      	ldr	r3, [pc, #196]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c32:	689b      	ldr	r3, [r3, #8]
 8006c34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d208      	bcs.n	8006c4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c3c:	4b2e      	ldr	r3, [pc, #184]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	492b      	ldr	r1, [pc, #172]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c4e:	4b29      	ldr	r3, [pc, #164]	; (8006cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0307 	and.w	r3, r3, #7
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	429a      	cmp	r2, r3
 8006c5a:	d210      	bcs.n	8006c7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c5c:	4b25      	ldr	r3, [pc, #148]	; (8006cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f023 0207 	bic.w	r2, r3, #7
 8006c64:	4923      	ldr	r1, [pc, #140]	; (8006cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c6c:	4b21      	ldr	r3, [pc, #132]	; (8006cf4 <HAL_RCC_ClockConfig+0x1ec>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0307 	and.w	r3, r3, #7
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d001      	beq.n	8006c7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	e036      	b.n	8006cec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f003 0304 	and.w	r3, r3, #4
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d008      	beq.n	8006c9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c8a:	4b1b      	ldr	r3, [pc, #108]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	4918      	ldr	r1, [pc, #96]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0308 	and.w	r3, r3, #8
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d009      	beq.n	8006cbc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ca8:	4b13      	ldr	r3, [pc, #76]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	691b      	ldr	r3, [r3, #16]
 8006cb4:	00db      	lsls	r3, r3, #3
 8006cb6:	4910      	ldr	r1, [pc, #64]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006cbc:	f000 f824 	bl	8006d08 <HAL_RCC_GetSysClockFreq>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	4b0d      	ldr	r3, [pc, #52]	; (8006cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	091b      	lsrs	r3, r3, #4
 8006cc8:	f003 030f 	and.w	r3, r3, #15
 8006ccc:	490b      	ldr	r1, [pc, #44]	; (8006cfc <HAL_RCC_ClockConfig+0x1f4>)
 8006cce:	5ccb      	ldrb	r3, [r1, r3]
 8006cd0:	f003 031f 	and.w	r3, r3, #31
 8006cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cd8:	4a09      	ldr	r2, [pc, #36]	; (8006d00 <HAL_RCC_ClockConfig+0x1f8>)
 8006cda:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006cdc:	4b09      	ldr	r3, [pc, #36]	; (8006d04 <HAL_RCC_ClockConfig+0x1fc>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	f7fb fed5 	bl	8002a90 <HAL_InitTick>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	72fb      	strb	r3, [r7, #11]

  return status;
 8006cea:	7afb      	ldrb	r3, [r7, #11]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	40022000 	.word	0x40022000
 8006cf8:	40021000 	.word	0x40021000
 8006cfc:	08014a08 	.word	0x08014a08
 8006d00:	20000008 	.word	0x20000008
 8006d04:	2000000c 	.word	0x2000000c

08006d08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b089      	sub	sp, #36	; 0x24
 8006d0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	61fb      	str	r3, [r7, #28]
 8006d12:	2300      	movs	r3, #0
 8006d14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d16:	4b3e      	ldr	r3, [pc, #248]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	f003 030c 	and.w	r3, r3, #12
 8006d1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d20:	4b3b      	ldr	r3, [pc, #236]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f003 0303 	and.w	r3, r3, #3
 8006d28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d005      	beq.n	8006d3c <HAL_RCC_GetSysClockFreq+0x34>
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	2b0c      	cmp	r3, #12
 8006d34:	d121      	bne.n	8006d7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d11e      	bne.n	8006d7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8006d3c:	4b34      	ldr	r3, [pc, #208]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0308 	and.w	r3, r3, #8
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d107      	bne.n	8006d58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8006d48:	4b31      	ldr	r3, [pc, #196]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d4e:	0a1b      	lsrs	r3, r3, #8
 8006d50:	f003 030f 	and.w	r3, r3, #15
 8006d54:	61fb      	str	r3, [r7, #28]
 8006d56:	e005      	b.n	8006d64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8006d58:	4b2d      	ldr	r3, [pc, #180]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	091b      	lsrs	r3, r3, #4
 8006d5e:	f003 030f 	and.w	r3, r3, #15
 8006d62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006d64:	4a2b      	ldr	r2, [pc, #172]	; (8006e14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10d      	bne.n	8006d90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006d78:	e00a      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	d102      	bne.n	8006d86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006d80:	4b25      	ldr	r3, [pc, #148]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x110>)
 8006d82:	61bb      	str	r3, [r7, #24]
 8006d84:	e004      	b.n	8006d90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2b08      	cmp	r3, #8
 8006d8a:	d101      	bne.n	8006d90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006d8c:	4b23      	ldr	r3, [pc, #140]	; (8006e1c <HAL_RCC_GetSysClockFreq+0x114>)
 8006d8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	2b0c      	cmp	r3, #12
 8006d94:	d134      	bne.n	8006e00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006d96:	4b1e      	ldr	r3, [pc, #120]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	f003 0303 	and.w	r3, r3, #3
 8006d9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	2b02      	cmp	r3, #2
 8006da4:	d003      	beq.n	8006dae <HAL_RCC_GetSysClockFreq+0xa6>
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b03      	cmp	r3, #3
 8006daa:	d003      	beq.n	8006db4 <HAL_RCC_GetSysClockFreq+0xac>
 8006dac:	e005      	b.n	8006dba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8006dae:	4b1a      	ldr	r3, [pc, #104]	; (8006e18 <HAL_RCC_GetSysClockFreq+0x110>)
 8006db0:	617b      	str	r3, [r7, #20]
      break;
 8006db2:	e005      	b.n	8006dc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8006db4:	4b19      	ldr	r3, [pc, #100]	; (8006e1c <HAL_RCC_GetSysClockFreq+0x114>)
 8006db6:	617b      	str	r3, [r7, #20]
      break;
 8006db8:	e002      	b.n	8006dc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	617b      	str	r3, [r7, #20]
      break;
 8006dbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006dc0:	4b13      	ldr	r3, [pc, #76]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	091b      	lsrs	r3, r3, #4
 8006dc6:	f003 0307 	and.w	r3, r3, #7
 8006dca:	3301      	adds	r3, #1
 8006dcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8006dce:	4b10      	ldr	r3, [pc, #64]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	0a1b      	lsrs	r3, r3, #8
 8006dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	fb03 f202 	mul.w	r2, r3, r2
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006de6:	4b0a      	ldr	r3, [pc, #40]	; (8006e10 <HAL_RCC_GetSysClockFreq+0x108>)
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	0e5b      	lsrs	r3, r3, #25
 8006dec:	f003 0303 	and.w	r3, r3, #3
 8006df0:	3301      	adds	r3, #1
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8006e00:	69bb      	ldr	r3, [r7, #24]
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3724      	adds	r7, #36	; 0x24
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40021000 	.word	0x40021000
 8006e14:	08014a20 	.word	0x08014a20
 8006e18:	00f42400 	.word	0x00f42400
 8006e1c:	007a1200 	.word	0x007a1200

08006e20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e20:	b480      	push	{r7}
 8006e22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e24:	4b03      	ldr	r3, [pc, #12]	; (8006e34 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e26:	681b      	ldr	r3, [r3, #0]
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	20000008 	.word	0x20000008

08006e38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e3c:	f7ff fff0 	bl	8006e20 <HAL_RCC_GetHCLKFreq>
 8006e40:	4602      	mov	r2, r0
 8006e42:	4b06      	ldr	r3, [pc, #24]	; (8006e5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	0a1b      	lsrs	r3, r3, #8
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	4904      	ldr	r1, [pc, #16]	; (8006e60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e4e:	5ccb      	ldrb	r3, [r1, r3]
 8006e50:	f003 031f 	and.w	r3, r3, #31
 8006e54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	08014a18 	.word	0x08014a18

08006e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006e68:	f7ff ffda 	bl	8006e20 <HAL_RCC_GetHCLKFreq>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	0adb      	lsrs	r3, r3, #11
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	4904      	ldr	r1, [pc, #16]	; (8006e8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e7a:	5ccb      	ldrb	r3, [r1, r3]
 8006e7c:	f003 031f 	and.w	r3, r3, #31
 8006e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	40021000 	.word	0x40021000
 8006e8c:	08014a18 	.word	0x08014a18

08006e90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006e98:	2300      	movs	r3, #0
 8006e9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006e9c:	4b2a      	ldr	r3, [pc, #168]	; (8006f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d003      	beq.n	8006eb0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006ea8:	f7ff f922 	bl	80060f0 <HAL_PWREx_GetVoltageRange>
 8006eac:	6178      	str	r0, [r7, #20]
 8006eae:	e014      	b.n	8006eda <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006eb0:	4b25      	ldr	r3, [pc, #148]	; (8006f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eb4:	4a24      	ldr	r2, [pc, #144]	; (8006f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006eb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006eba:	6593      	str	r3, [r2, #88]	; 0x58
 8006ebc:	4b22      	ldr	r3, [pc, #136]	; (8006f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ec4:	60fb      	str	r3, [r7, #12]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006ec8:	f7ff f912 	bl	80060f0 <HAL_PWREx_GetVoltageRange>
 8006ecc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006ece:	4b1e      	ldr	r3, [pc, #120]	; (8006f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed2:	4a1d      	ldr	r2, [pc, #116]	; (8006f48 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006ed4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ed8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ee0:	d10b      	bne.n	8006efa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b80      	cmp	r3, #128	; 0x80
 8006ee6:	d919      	bls.n	8006f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2ba0      	cmp	r3, #160	; 0xa0
 8006eec:	d902      	bls.n	8006ef4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006eee:	2302      	movs	r3, #2
 8006ef0:	613b      	str	r3, [r7, #16]
 8006ef2:	e013      	b.n	8006f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	613b      	str	r3, [r7, #16]
 8006ef8:	e010      	b.n	8006f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2b80      	cmp	r3, #128	; 0x80
 8006efe:	d902      	bls.n	8006f06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8006f00:	2303      	movs	r3, #3
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	e00a      	b.n	8006f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2b80      	cmp	r3, #128	; 0x80
 8006f0a:	d102      	bne.n	8006f12 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	613b      	str	r3, [r7, #16]
 8006f10:	e004      	b.n	8006f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2b70      	cmp	r3, #112	; 0x70
 8006f16:	d101      	bne.n	8006f1c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8006f18:	2301      	movs	r3, #1
 8006f1a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006f1c:	4b0b      	ldr	r3, [pc, #44]	; (8006f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f023 0207 	bic.w	r2, r3, #7
 8006f24:	4909      	ldr	r1, [pc, #36]	; (8006f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006f2c:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f003 0307 	and.w	r3, r3, #7
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d001      	beq.n	8006f3e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e000      	b.n	8006f40 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006f3e:	2300      	movs	r3, #0
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	40021000 	.word	0x40021000
 8006f4c:	40022000 	.word	0x40022000

08006f50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f58:	2300      	movs	r3, #0
 8006f5a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d041      	beq.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f70:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f74:	d02a      	beq.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006f76:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006f7a:	d824      	bhi.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f7c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f80:	d008      	beq.n	8006f94 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006f82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f86:	d81e      	bhi.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00a      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8006f8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f90:	d010      	beq.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006f92:	e018      	b.n	8006fc6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006f94:	4b86      	ldr	r3, [pc, #536]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	4a85      	ldr	r2, [pc, #532]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f9e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fa0:	e015      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	3304      	adds	r3, #4
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	4618      	mov	r0, r3
 8006faa:	f000 facb 	bl	8007544 <RCCEx_PLLSAI1_Config>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fb2:	e00c      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	3320      	adds	r3, #32
 8006fb8:	2100      	movs	r1, #0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 fbb6 	bl	800772c <RCCEx_PLLSAI2_Config>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006fc4:	e003      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	74fb      	strb	r3, [r7, #19]
      break;
 8006fca:	e000      	b.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fce:	7cfb      	ldrb	r3, [r7, #19]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d10b      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fd4:	4b76      	ldr	r3, [pc, #472]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fe2:	4973      	ldr	r1, [pc, #460]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006fea:	e001      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fec:	7cfb      	ldrb	r3, [r7, #19]
 8006fee:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d041      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007000:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007004:	d02a      	beq.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8007006:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800700a:	d824      	bhi.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800700c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007010:	d008      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007012:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007016:	d81e      	bhi.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00a      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800701c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007020:	d010      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007022:	e018      	b.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007024:	4b62      	ldr	r3, [pc, #392]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	4a61      	ldr	r2, [pc, #388]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800702a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800702e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007030:	e015      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	3304      	adds	r3, #4
 8007036:	2100      	movs	r1, #0
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fa83 	bl	8007544 <RCCEx_PLLSAI1_Config>
 800703e:	4603      	mov	r3, r0
 8007040:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007042:	e00c      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	3320      	adds	r3, #32
 8007048:	2100      	movs	r1, #0
 800704a:	4618      	mov	r0, r3
 800704c:	f000 fb6e 	bl	800772c <RCCEx_PLLSAI2_Config>
 8007050:	4603      	mov	r3, r0
 8007052:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007054:	e003      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	74fb      	strb	r3, [r7, #19]
      break;
 800705a:	e000      	b.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800705c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800705e:	7cfb      	ldrb	r3, [r7, #19]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10b      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007064:	4b52      	ldr	r3, [pc, #328]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800706a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007072:	494f      	ldr	r1, [pc, #316]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007074:	4313      	orrs	r3, r2
 8007076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800707a:	e001      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800707c:	7cfb      	ldrb	r3, [r7, #19]
 800707e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007088:	2b00      	cmp	r3, #0
 800708a:	f000 80a0 	beq.w	80071ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800708e:	2300      	movs	r3, #0
 8007090:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007092:	4b47      	ldr	r3, [pc, #284]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800709a:	2b00      	cmp	r3, #0
 800709c:	d101      	bne.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80070a2:	2300      	movs	r3, #0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00d      	beq.n	80070c4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070a8:	4b41      	ldr	r3, [pc, #260]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ac:	4a40      	ldr	r2, [pc, #256]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070b2:	6593      	str	r3, [r2, #88]	; 0x58
 80070b4:	4b3e      	ldr	r3, [pc, #248]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80070b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070bc:	60bb      	str	r3, [r7, #8]
 80070be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070c0:	2301      	movs	r3, #1
 80070c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070c4:	4b3b      	ldr	r3, [pc, #236]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a3a      	ldr	r2, [pc, #232]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80070ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80070d0:	f7fb fd2e 	bl	8002b30 <HAL_GetTick>
 80070d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070d6:	e009      	b.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070d8:	f7fb fd2a 	bl	8002b30 <HAL_GetTick>
 80070dc:	4602      	mov	r2, r0
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	1ad3      	subs	r3, r2, r3
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d902      	bls.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	74fb      	strb	r3, [r7, #19]
        break;
 80070ea:	e005      	b.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80070ec:	4b31      	ldr	r3, [pc, #196]	; (80071b4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d0ef      	beq.n	80070d8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80070f8:	7cfb      	ldrb	r3, [r7, #19]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d15c      	bne.n	80071b8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80070fe:	4b2c      	ldr	r3, [pc, #176]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007100:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007104:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007108:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d01f      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007116:	697a      	ldr	r2, [r7, #20]
 8007118:	429a      	cmp	r2, r3
 800711a:	d019      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800711c:	4b24      	ldr	r3, [pc, #144]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800711e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007126:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007128:	4b21      	ldr	r3, [pc, #132]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800712a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800712e:	4a20      	ldr	r2, [pc, #128]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007138:	4b1d      	ldr	r3, [pc, #116]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800713a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800713e:	4a1c      	ldr	r2, [pc, #112]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007140:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007144:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007148:	4a19      	ldr	r2, [pc, #100]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d016      	beq.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800715a:	f7fb fce9 	bl	8002b30 <HAL_GetTick>
 800715e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007160:	e00b      	b.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007162:	f7fb fce5 	bl	8002b30 <HAL_GetTick>
 8007166:	4602      	mov	r2, r0
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	1ad3      	subs	r3, r2, r3
 800716c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007170:	4293      	cmp	r3, r2
 8007172:	d902      	bls.n	800717a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	74fb      	strb	r3, [r7, #19]
            break;
 8007178:	e006      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800717a:	4b0d      	ldr	r3, [pc, #52]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800717c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	2b00      	cmp	r3, #0
 8007186:	d0ec      	beq.n	8007162 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007188:	7cfb      	ldrb	r3, [r7, #19]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d10c      	bne.n	80071a8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800718e:	4b08      	ldr	r3, [pc, #32]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007194:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800719e:	4904      	ldr	r1, [pc, #16]	; (80071b0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80071a6:	e009      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071a8:	7cfb      	ldrb	r3, [r7, #19]
 80071aa:	74bb      	strb	r3, [r7, #18]
 80071ac:	e006      	b.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80071ae:	bf00      	nop
 80071b0:	40021000 	.word	0x40021000
 80071b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071b8:	7cfb      	ldrb	r3, [r7, #19]
 80071ba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80071bc:	7c7b      	ldrb	r3, [r7, #17]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d105      	bne.n	80071ce <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071c2:	4b9e      	ldr	r3, [pc, #632]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071c6:	4a9d      	ldr	r2, [pc, #628]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80071cc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f003 0301 	and.w	r3, r3, #1
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00a      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80071da:	4b98      	ldr	r3, [pc, #608]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e0:	f023 0203 	bic.w	r2, r3, #3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071e8:	4994      	ldr	r1, [pc, #592]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f003 0302 	and.w	r3, r3, #2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00a      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80071fc:	4b8f      	ldr	r3, [pc, #572]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80071fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007202:	f023 020c 	bic.w	r2, r3, #12
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800720a:	498c      	ldr	r1, [pc, #560]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800720c:	4313      	orrs	r3, r2
 800720e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0304 	and.w	r3, r3, #4
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00a      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800721e:	4b87      	ldr	r3, [pc, #540]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007224:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722c:	4983      	ldr	r1, [pc, #524]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800722e:	4313      	orrs	r3, r2
 8007230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0308 	and.w	r3, r3, #8
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00a      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007240:	4b7e      	ldr	r3, [pc, #504]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007246:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800724e:	497b      	ldr	r1, [pc, #492]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007250:	4313      	orrs	r3, r2
 8007252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f003 0310 	and.w	r3, r3, #16
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00a      	beq.n	8007278 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007262:	4b76      	ldr	r3, [pc, #472]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007270:	4972      	ldr	r1, [pc, #456]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007272:	4313      	orrs	r3, r2
 8007274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0320 	and.w	r3, r3, #32
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00a      	beq.n	800729a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007284:	4b6d      	ldr	r3, [pc, #436]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800728a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007292:	496a      	ldr	r1, [pc, #424]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007294:	4313      	orrs	r3, r2
 8007296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00a      	beq.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072a6:	4b65      	ldr	r3, [pc, #404]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b4:	4961      	ldr	r1, [pc, #388]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d00a      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80072c8:	4b5c      	ldr	r3, [pc, #368]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072d6:	4959      	ldr	r1, [pc, #356]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072d8:	4313      	orrs	r3, r2
 80072da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00a      	beq.n	8007300 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072ea:	4b54      	ldr	r3, [pc, #336]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f8:	4950      	ldr	r1, [pc, #320]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00a      	beq.n	8007322 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800730c:	4b4b      	ldr	r3, [pc, #300]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800730e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007312:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800731a:	4948      	ldr	r1, [pc, #288]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800731c:	4313      	orrs	r3, r2
 800731e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800732a:	2b00      	cmp	r3, #0
 800732c:	d00a      	beq.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800732e:	4b43      	ldr	r3, [pc, #268]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007334:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800733c:	493f      	ldr	r1, [pc, #252]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800733e:	4313      	orrs	r3, r2
 8007340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800734c:	2b00      	cmp	r3, #0
 800734e:	d028      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007350:	4b3a      	ldr	r3, [pc, #232]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007356:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800735e:	4937      	ldr	r1, [pc, #220]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007360:	4313      	orrs	r3, r2
 8007362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800736a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800736e:	d106      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007370:	4b32      	ldr	r3, [pc, #200]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007372:	68db      	ldr	r3, [r3, #12]
 8007374:	4a31      	ldr	r2, [pc, #196]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007376:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800737a:	60d3      	str	r3, [r2, #12]
 800737c:	e011      	b.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007382:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007386:	d10c      	bne.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	3304      	adds	r3, #4
 800738c:	2101      	movs	r1, #1
 800738e:	4618      	mov	r0, r3
 8007390:	f000 f8d8 	bl	8007544 <RCCEx_PLLSAI1_Config>
 8007394:	4603      	mov	r3, r0
 8007396:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007398:	7cfb      	ldrb	r3, [r7, #19]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d001      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800739e:	7cfb      	ldrb	r3, [r7, #19]
 80073a0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d028      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80073ae:	4b23      	ldr	r3, [pc, #140]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073b4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073bc:	491f      	ldr	r1, [pc, #124]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073cc:	d106      	bne.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073ce:	4b1b      	ldr	r3, [pc, #108]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	4a1a      	ldr	r2, [pc, #104]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80073d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073d8:	60d3      	str	r3, [r2, #12]
 80073da:	e011      	b.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073e0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073e4:	d10c      	bne.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3304      	adds	r3, #4
 80073ea:	2101      	movs	r1, #1
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 f8a9 	bl	8007544 <RCCEx_PLLSAI1_Config>
 80073f2:	4603      	mov	r3, r0
 80073f4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80073f6:	7cfb      	ldrb	r3, [r7, #19]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80073fc:	7cfb      	ldrb	r3, [r7, #19]
 80073fe:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d02b      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800740c:	4b0b      	ldr	r3, [pc, #44]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800740e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007412:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800741a:	4908      	ldr	r1, [pc, #32]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800741c:	4313      	orrs	r3, r2
 800741e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007426:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800742a:	d109      	bne.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800742c:	4b03      	ldr	r3, [pc, #12]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800742e:	68db      	ldr	r3, [r3, #12]
 8007430:	4a02      	ldr	r2, [pc, #8]	; (800743c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007436:	60d3      	str	r3, [r2, #12]
 8007438:	e014      	b.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800743a:	bf00      	nop
 800743c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007444:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007448:	d10c      	bne.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	3304      	adds	r3, #4
 800744e:	2101      	movs	r1, #1
 8007450:	4618      	mov	r0, r3
 8007452:	f000 f877 	bl	8007544 <RCCEx_PLLSAI1_Config>
 8007456:	4603      	mov	r3, r0
 8007458:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800745a:	7cfb      	ldrb	r3, [r7, #19]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007460:	7cfb      	ldrb	r3, [r7, #19]
 8007462:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800746c:	2b00      	cmp	r3, #0
 800746e:	d02f      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007470:	4b2b      	ldr	r3, [pc, #172]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007476:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800747e:	4928      	ldr	r1, [pc, #160]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007480:	4313      	orrs	r3, r2
 8007482:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800748a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800748e:	d10d      	bne.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3304      	adds	r3, #4
 8007494:	2102      	movs	r1, #2
 8007496:	4618      	mov	r0, r3
 8007498:	f000 f854 	bl	8007544 <RCCEx_PLLSAI1_Config>
 800749c:	4603      	mov	r3, r0
 800749e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074a0:	7cfb      	ldrb	r3, [r7, #19]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d014      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80074a6:	7cfb      	ldrb	r3, [r7, #19]
 80074a8:	74bb      	strb	r3, [r7, #18]
 80074aa:	e011      	b.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80074b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074b4:	d10c      	bne.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	3320      	adds	r3, #32
 80074ba:	2102      	movs	r1, #2
 80074bc:	4618      	mov	r0, r3
 80074be:	f000 f935 	bl	800772c <RCCEx_PLLSAI2_Config>
 80074c2:	4603      	mov	r3, r0
 80074c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80074c6:	7cfb      	ldrb	r3, [r7, #19]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80074cc:	7cfb      	ldrb	r3, [r7, #19]
 80074ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00a      	beq.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80074dc:	4b10      	ldr	r3, [pc, #64]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074ea:	490d      	ldr	r1, [pc, #52]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d00b      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80074fe:	4b08      	ldr	r3, [pc, #32]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007504:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800750e:	4904      	ldr	r1, [pc, #16]	; (8007520 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007510:	4313      	orrs	r3, r2
 8007512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007516:	7cbb      	ldrb	r3, [r7, #18]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3718      	adds	r7, #24
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}
 8007520:	40021000 	.word	0x40021000

08007524 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007524:	b480      	push	{r7}
 8007526:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007528:	4b05      	ldr	r3, [pc, #20]	; (8007540 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a04      	ldr	r2, [pc, #16]	; (8007540 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800752e:	f043 0304 	orr.w	r3, r3, #4
 8007532:	6013      	str	r3, [r2, #0]
}
 8007534:	bf00      	nop
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	40021000 	.word	0x40021000

08007544 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800754e:	2300      	movs	r3, #0
 8007550:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007552:	4b75      	ldr	r3, [pc, #468]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007554:	68db      	ldr	r3, [r3, #12]
 8007556:	f003 0303 	and.w	r3, r3, #3
 800755a:	2b00      	cmp	r3, #0
 800755c:	d018      	beq.n	8007590 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800755e:	4b72      	ldr	r3, [pc, #456]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	f003 0203 	and.w	r2, r3, #3
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	429a      	cmp	r2, r3
 800756c:	d10d      	bne.n	800758a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
       ||
 8007572:	2b00      	cmp	r3, #0
 8007574:	d009      	beq.n	800758a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007576:	4b6c      	ldr	r3, [pc, #432]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	091b      	lsrs	r3, r3, #4
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	1c5a      	adds	r2, r3, #1
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
       ||
 8007586:	429a      	cmp	r2, r3
 8007588:	d047      	beq.n	800761a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	73fb      	strb	r3, [r7, #15]
 800758e:	e044      	b.n	800761a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b03      	cmp	r3, #3
 8007596:	d018      	beq.n	80075ca <RCCEx_PLLSAI1_Config+0x86>
 8007598:	2b03      	cmp	r3, #3
 800759a:	d825      	bhi.n	80075e8 <RCCEx_PLLSAI1_Config+0xa4>
 800759c:	2b01      	cmp	r3, #1
 800759e:	d002      	beq.n	80075a6 <RCCEx_PLLSAI1_Config+0x62>
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d009      	beq.n	80075b8 <RCCEx_PLLSAI1_Config+0x74>
 80075a4:	e020      	b.n	80075e8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80075a6:	4b60      	ldr	r3, [pc, #384]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d11d      	bne.n	80075ee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075b6:	e01a      	b.n	80075ee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80075b8:	4b5b      	ldr	r3, [pc, #364]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d116      	bne.n	80075f2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075c8:	e013      	b.n	80075f2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80075ca:	4b57      	ldr	r3, [pc, #348]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10f      	bne.n	80075f6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80075d6:	4b54      	ldr	r3, [pc, #336]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d109      	bne.n	80075f6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80075e2:	2301      	movs	r3, #1
 80075e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80075e6:	e006      	b.n	80075f6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80075e8:	2301      	movs	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
      break;
 80075ec:	e004      	b.n	80075f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80075ee:	bf00      	nop
 80075f0:	e002      	b.n	80075f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80075f2:	bf00      	nop
 80075f4:	e000      	b.n	80075f8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80075f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10d      	bne.n	800761a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80075fe:	4b4a      	ldr	r3, [pc, #296]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6819      	ldr	r1, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	3b01      	subs	r3, #1
 8007610:	011b      	lsls	r3, r3, #4
 8007612:	430b      	orrs	r3, r1
 8007614:	4944      	ldr	r1, [pc, #272]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007616:	4313      	orrs	r3, r2
 8007618:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800761a:	7bfb      	ldrb	r3, [r7, #15]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d17d      	bne.n	800771c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007620:	4b41      	ldr	r3, [pc, #260]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4a40      	ldr	r2, [pc, #256]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007626:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800762a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800762c:	f7fb fa80 	bl	8002b30 <HAL_GetTick>
 8007630:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007632:	e009      	b.n	8007648 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007634:	f7fb fa7c 	bl	8002b30 <HAL_GetTick>
 8007638:	4602      	mov	r2, r0
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	1ad3      	subs	r3, r2, r3
 800763e:	2b02      	cmp	r3, #2
 8007640:	d902      	bls.n	8007648 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007642:	2303      	movs	r3, #3
 8007644:	73fb      	strb	r3, [r7, #15]
        break;
 8007646:	e005      	b.n	8007654 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007648:	4b37      	ldr	r3, [pc, #220]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1ef      	bne.n	8007634 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007654:	7bfb      	ldrb	r3, [r7, #15]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d160      	bne.n	800771c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d111      	bne.n	8007684 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007660:	4b31      	ldr	r3, [pc, #196]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6892      	ldr	r2, [r2, #8]
 8007670:	0211      	lsls	r1, r2, #8
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	68d2      	ldr	r2, [r2, #12]
 8007676:	0912      	lsrs	r2, r2, #4
 8007678:	0452      	lsls	r2, r2, #17
 800767a:	430a      	orrs	r2, r1
 800767c:	492a      	ldr	r1, [pc, #168]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 800767e:	4313      	orrs	r3, r2
 8007680:	610b      	str	r3, [r1, #16]
 8007682:	e027      	b.n	80076d4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	2b01      	cmp	r3, #1
 8007688:	d112      	bne.n	80076b0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800768a:	4b27      	ldr	r3, [pc, #156]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007692:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	6892      	ldr	r2, [r2, #8]
 800769a:	0211      	lsls	r1, r2, #8
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	6912      	ldr	r2, [r2, #16]
 80076a0:	0852      	lsrs	r2, r2, #1
 80076a2:	3a01      	subs	r2, #1
 80076a4:	0552      	lsls	r2, r2, #21
 80076a6:	430a      	orrs	r2, r1
 80076a8:	491f      	ldr	r1, [pc, #124]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	610b      	str	r3, [r1, #16]
 80076ae:	e011      	b.n	80076d4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80076b0:	4b1d      	ldr	r3, [pc, #116]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80076b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	6892      	ldr	r2, [r2, #8]
 80076c0:	0211      	lsls	r1, r2, #8
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	6952      	ldr	r2, [r2, #20]
 80076c6:	0852      	lsrs	r2, r2, #1
 80076c8:	3a01      	subs	r2, #1
 80076ca:	0652      	lsls	r2, r2, #25
 80076cc:	430a      	orrs	r2, r1
 80076ce:	4916      	ldr	r1, [pc, #88]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076d0:	4313      	orrs	r3, r2
 80076d2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80076d4:	4b14      	ldr	r3, [pc, #80]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	4a13      	ldr	r2, [pc, #76]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80076de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076e0:	f7fb fa26 	bl	8002b30 <HAL_GetTick>
 80076e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80076e6:	e009      	b.n	80076fc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80076e8:	f7fb fa22 	bl	8002b30 <HAL_GetTick>
 80076ec:	4602      	mov	r2, r0
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d902      	bls.n	80076fc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	73fb      	strb	r3, [r7, #15]
          break;
 80076fa:	e005      	b.n	8007708 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80076fc:	4b0a      	ldr	r3, [pc, #40]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d0ef      	beq.n	80076e8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007708:	7bfb      	ldrb	r3, [r7, #15]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d106      	bne.n	800771c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800770e:	4b06      	ldr	r3, [pc, #24]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007710:	691a      	ldr	r2, [r3, #16]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	4904      	ldr	r1, [pc, #16]	; (8007728 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007718:	4313      	orrs	r3, r2
 800771a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800771c:	7bfb      	ldrb	r3, [r7, #15]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	40021000 	.word	0x40021000

0800772c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b084      	sub	sp, #16
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
 8007734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007736:	2300      	movs	r3, #0
 8007738:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800773a:	4b6a      	ldr	r3, [pc, #424]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	f003 0303 	and.w	r3, r3, #3
 8007742:	2b00      	cmp	r3, #0
 8007744:	d018      	beq.n	8007778 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007746:	4b67      	ldr	r3, [pc, #412]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007748:	68db      	ldr	r3, [r3, #12]
 800774a:	f003 0203 	and.w	r2, r3, #3
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	429a      	cmp	r2, r3
 8007754:	d10d      	bne.n	8007772 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
       ||
 800775a:	2b00      	cmp	r3, #0
 800775c:	d009      	beq.n	8007772 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800775e:	4b61      	ldr	r3, [pc, #388]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	091b      	lsrs	r3, r3, #4
 8007764:	f003 0307 	and.w	r3, r3, #7
 8007768:	1c5a      	adds	r2, r3, #1
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
       ||
 800776e:	429a      	cmp	r2, r3
 8007770:	d047      	beq.n	8007802 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	73fb      	strb	r3, [r7, #15]
 8007776:	e044      	b.n	8007802 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b03      	cmp	r3, #3
 800777e:	d018      	beq.n	80077b2 <RCCEx_PLLSAI2_Config+0x86>
 8007780:	2b03      	cmp	r3, #3
 8007782:	d825      	bhi.n	80077d0 <RCCEx_PLLSAI2_Config+0xa4>
 8007784:	2b01      	cmp	r3, #1
 8007786:	d002      	beq.n	800778e <RCCEx_PLLSAI2_Config+0x62>
 8007788:	2b02      	cmp	r3, #2
 800778a:	d009      	beq.n	80077a0 <RCCEx_PLLSAI2_Config+0x74>
 800778c:	e020      	b.n	80077d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800778e:	4b55      	ldr	r3, [pc, #340]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0302 	and.w	r3, r3, #2
 8007796:	2b00      	cmp	r3, #0
 8007798:	d11d      	bne.n	80077d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800779e:	e01a      	b.n	80077d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80077a0:	4b50      	ldr	r3, [pc, #320]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d116      	bne.n	80077da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80077ac:	2301      	movs	r3, #1
 80077ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80077b0:	e013      	b.n	80077da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80077b2:	4b4c      	ldr	r3, [pc, #304]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10f      	bne.n	80077de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80077be:	4b49      	ldr	r3, [pc, #292]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d109      	bne.n	80077de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80077ce:	e006      	b.n	80077de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80077d0:	2301      	movs	r3, #1
 80077d2:	73fb      	strb	r3, [r7, #15]
      break;
 80077d4:	e004      	b.n	80077e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80077d6:	bf00      	nop
 80077d8:	e002      	b.n	80077e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80077da:	bf00      	nop
 80077dc:	e000      	b.n	80077e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80077de:	bf00      	nop
    }

    if(status == HAL_OK)
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10d      	bne.n	8007802 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80077e6:	4b3f      	ldr	r3, [pc, #252]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6819      	ldr	r1, [r3, #0]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	3b01      	subs	r3, #1
 80077f8:	011b      	lsls	r3, r3, #4
 80077fa:	430b      	orrs	r3, r1
 80077fc:	4939      	ldr	r1, [pc, #228]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80077fe:	4313      	orrs	r3, r2
 8007800:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007802:	7bfb      	ldrb	r3, [r7, #15]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d167      	bne.n	80078d8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007808:	4b36      	ldr	r3, [pc, #216]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a35      	ldr	r2, [pc, #212]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800780e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007812:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007814:	f7fb f98c 	bl	8002b30 <HAL_GetTick>
 8007818:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800781a:	e009      	b.n	8007830 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800781c:	f7fb f988 	bl	8002b30 <HAL_GetTick>
 8007820:	4602      	mov	r2, r0
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	2b02      	cmp	r3, #2
 8007828:	d902      	bls.n	8007830 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800782a:	2303      	movs	r3, #3
 800782c:	73fb      	strb	r3, [r7, #15]
        break;
 800782e:	e005      	b.n	800783c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007830:	4b2c      	ldr	r3, [pc, #176]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1ef      	bne.n	800781c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d14a      	bne.n	80078d8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d111      	bne.n	800786c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007848:	4b26      	ldr	r3, [pc, #152]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800784a:	695b      	ldr	r3, [r3, #20]
 800784c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8007850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	6892      	ldr	r2, [r2, #8]
 8007858:	0211      	lsls	r1, r2, #8
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	68d2      	ldr	r2, [r2, #12]
 800785e:	0912      	lsrs	r2, r2, #4
 8007860:	0452      	lsls	r2, r2, #17
 8007862:	430a      	orrs	r2, r1
 8007864:	491f      	ldr	r1, [pc, #124]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007866:	4313      	orrs	r3, r2
 8007868:	614b      	str	r3, [r1, #20]
 800786a:	e011      	b.n	8007890 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800786c:	4b1d      	ldr	r3, [pc, #116]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800786e:	695b      	ldr	r3, [r3, #20]
 8007870:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007874:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	6892      	ldr	r2, [r2, #8]
 800787c:	0211      	lsls	r1, r2, #8
 800787e:	687a      	ldr	r2, [r7, #4]
 8007880:	6912      	ldr	r2, [r2, #16]
 8007882:	0852      	lsrs	r2, r2, #1
 8007884:	3a01      	subs	r2, #1
 8007886:	0652      	lsls	r2, r2, #25
 8007888:	430a      	orrs	r2, r1
 800788a:	4916      	ldr	r1, [pc, #88]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800788c:	4313      	orrs	r3, r2
 800788e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007890:	4b14      	ldr	r3, [pc, #80]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a13      	ldr	r2, [pc, #76]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800789a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800789c:	f7fb f948 	bl	8002b30 <HAL_GetTick>
 80078a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80078a2:	e009      	b.n	80078b8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80078a4:	f7fb f944 	bl	8002b30 <HAL_GetTick>
 80078a8:	4602      	mov	r2, r0
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	1ad3      	subs	r3, r2, r3
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d902      	bls.n	80078b8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80078b2:	2303      	movs	r3, #3
 80078b4:	73fb      	strb	r3, [r7, #15]
          break;
 80078b6:	e005      	b.n	80078c4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80078b8:	4b0a      	ldr	r3, [pc, #40]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d0ef      	beq.n	80078a4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d106      	bne.n	80078d8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80078ca:	4b06      	ldr	r3, [pc, #24]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078cc:	695a      	ldr	r2, [r3, #20]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	695b      	ldr	r3, [r3, #20]
 80078d2:	4904      	ldr	r1, [pc, #16]	; (80078e4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80078d4:	4313      	orrs	r3, r2
 80078d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3710      	adds	r7, #16
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	40021000 	.word	0x40021000

080078e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e095      	b.n	8007a26 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d108      	bne.n	8007914 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800790a:	d009      	beq.n	8007920 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	61da      	str	r2, [r3, #28]
 8007912:	e005      	b.n	8007920 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2200      	movs	r2, #0
 800791e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800792c:	b2db      	uxtb	r3, r3
 800792e:	2b00      	cmp	r3, #0
 8007930:	d106      	bne.n	8007940 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f7fa fd76 	bl	800242c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007956:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007960:	d902      	bls.n	8007968 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007962:	2300      	movs	r3, #0
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	e002      	b.n	800796e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800796c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007976:	d007      	beq.n	8007988 <HAL_SPI_Init+0xa0>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007980:	d002      	beq.n	8007988 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2200      	movs	r2, #0
 8007986:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007998:	431a      	orrs	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	431a      	orrs	r2, r3
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	695b      	ldr	r3, [r3, #20]
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079b6:	431a      	orrs	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079c0:	431a      	orrs	r2, r3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a1b      	ldr	r3, [r3, #32]
 80079c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ca:	ea42 0103 	orr.w	r1, r2, r3
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	430a      	orrs	r2, r1
 80079dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	699b      	ldr	r3, [r3, #24]
 80079e2:	0c1b      	lsrs	r3, r3, #16
 80079e4:	f003 0204 	and.w	r2, r3, #4
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ec:	f003 0310 	and.w	r3, r3, #16
 80079f0:	431a      	orrs	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f6:	f003 0308 	and.w	r3, r3, #8
 80079fa:	431a      	orrs	r2, r3
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007a04:	ea42 0103 	orr.w	r1, r2, r3
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b082      	sub	sp, #8
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d101      	bne.n	8007a40 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	e049      	b.n	8007ad4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d106      	bne.n	8007a5a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7fa fd2d 	bl	80024b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681a      	ldr	r2, [r3, #0]
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	3304      	adds	r3, #4
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	4610      	mov	r0, r2
 8007a6e:	f000 f9d9 	bl	8007e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007ad2:	2300      	movs	r3, #0
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d001      	beq.n	8007af4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	e04f      	b.n	8007b94 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68da      	ldr	r2, [r3, #12]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f042 0201 	orr.w	r2, r2, #1
 8007b0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a23      	ldr	r2, [pc, #140]	; (8007ba0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d01d      	beq.n	8007b52 <HAL_TIM_Base_Start_IT+0x76>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b1e:	d018      	beq.n	8007b52 <HAL_TIM_Base_Start_IT+0x76>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a1f      	ldr	r2, [pc, #124]	; (8007ba4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d013      	beq.n	8007b52 <HAL_TIM_Base_Start_IT+0x76>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a1e      	ldr	r2, [pc, #120]	; (8007ba8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d00e      	beq.n	8007b52 <HAL_TIM_Base_Start_IT+0x76>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a1c      	ldr	r2, [pc, #112]	; (8007bac <HAL_TIM_Base_Start_IT+0xd0>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d009      	beq.n	8007b52 <HAL_TIM_Base_Start_IT+0x76>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a1b      	ldr	r2, [pc, #108]	; (8007bb0 <HAL_TIM_Base_Start_IT+0xd4>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d004      	beq.n	8007b52 <HAL_TIM_Base_Start_IT+0x76>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a19      	ldr	r2, [pc, #100]	; (8007bb4 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d115      	bne.n	8007b7e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689a      	ldr	r2, [r3, #8]
 8007b58:	4b17      	ldr	r3, [pc, #92]	; (8007bb8 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2b06      	cmp	r3, #6
 8007b62:	d015      	beq.n	8007b90 <HAL_TIM_Base_Start_IT+0xb4>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b6a:	d011      	beq.n	8007b90 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0201 	orr.w	r2, r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b7c:	e008      	b.n	8007b90 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f042 0201 	orr.w	r2, r2, #1
 8007b8c:	601a      	str	r2, [r3, #0]
 8007b8e:	e000      	b.n	8007b92 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b90:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b92:	2300      	movs	r3, #0
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	40012c00 	.word	0x40012c00
 8007ba4:	40000400 	.word	0x40000400
 8007ba8:	40000800 	.word	0x40000800
 8007bac:	40000c00 	.word	0x40000c00
 8007bb0:	40013400 	.word	0x40013400
 8007bb4:	40014000 	.word	0x40014000
 8007bb8:	00010007 	.word	0x00010007

08007bbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	68db      	ldr	r3, [r3, #12]
 8007bca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f003 0302 	and.w	r3, r3, #2
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d020      	beq.n	8007c20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01b      	beq.n	8007c20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f06f 0202 	mvn.w	r2, #2
 8007bf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	f003 0303 	and.w	r3, r3, #3
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d003      	beq.n	8007c0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f8ee 	bl	8007de8 <HAL_TIM_IC_CaptureCallback>
 8007c0c:	e005      	b.n	8007c1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f8e0 	bl	8007dd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f8f1 	bl	8007dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f003 0304 	and.w	r3, r3, #4
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d020      	beq.n	8007c6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f003 0304 	and.w	r3, r3, #4
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d01b      	beq.n	8007c6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f06f 0204 	mvn.w	r2, #4
 8007c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2202      	movs	r2, #2
 8007c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	699b      	ldr	r3, [r3, #24]
 8007c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f8c8 	bl	8007de8 <HAL_TIM_IC_CaptureCallback>
 8007c58:	e005      	b.n	8007c66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f8ba 	bl	8007dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f8cb 	bl	8007dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	f003 0308 	and.w	r3, r3, #8
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d020      	beq.n	8007cb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f003 0308 	and.w	r3, r3, #8
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d01b      	beq.n	8007cb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f06f 0208 	mvn.w	r2, #8
 8007c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2204      	movs	r2, #4
 8007c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	69db      	ldr	r3, [r3, #28]
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f8a2 	bl	8007de8 <HAL_TIM_IC_CaptureCallback>
 8007ca4:	e005      	b.n	8007cb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f894 	bl	8007dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f000 f8a5 	bl	8007dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	f003 0310 	and.w	r3, r3, #16
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d020      	beq.n	8007d04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f003 0310 	and.w	r3, r3, #16
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d01b      	beq.n	8007d04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f06f 0210 	mvn.w	r2, #16
 8007cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2208      	movs	r2, #8
 8007cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f87c 	bl	8007de8 <HAL_TIM_IC_CaptureCallback>
 8007cf0:	e005      	b.n	8007cfe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f86e 	bl	8007dd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f87f 	bl	8007dfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	f003 0301 	and.w	r3, r3, #1
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00c      	beq.n	8007d28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f003 0301 	and.w	r3, r3, #1
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d007      	beq.n	8007d28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f06f 0201 	mvn.w	r2, #1
 8007d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f84c 	bl	8007dc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d00c      	beq.n	8007d4c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d007      	beq.n	8007d4c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 f998 	bl	800807c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00c      	beq.n	8007d70 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d007      	beq.n	8007d70 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f990 	bl	8008090 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d00c      	beq.n	8007d94 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d007      	beq.n	8007d94 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 f83e 	bl	8007e10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	f003 0320 	and.w	r3, r3, #32
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00c      	beq.n	8007db8 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f003 0320 	and.w	r3, r3, #32
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d007      	beq.n	8007db8 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f06f 0220 	mvn.w	r2, #32
 8007db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f000 f958 	bl	8008068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007db8:	bf00      	nop
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}

08007dc0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a40      	ldr	r2, [pc, #256]	; (8007f38 <TIM_Base_SetConfig+0x114>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d013      	beq.n	8007e64 <TIM_Base_SetConfig+0x40>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e42:	d00f      	beq.n	8007e64 <TIM_Base_SetConfig+0x40>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a3d      	ldr	r2, [pc, #244]	; (8007f3c <TIM_Base_SetConfig+0x118>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d00b      	beq.n	8007e64 <TIM_Base_SetConfig+0x40>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a3c      	ldr	r2, [pc, #240]	; (8007f40 <TIM_Base_SetConfig+0x11c>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d007      	beq.n	8007e64 <TIM_Base_SetConfig+0x40>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a3b      	ldr	r2, [pc, #236]	; (8007f44 <TIM_Base_SetConfig+0x120>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d003      	beq.n	8007e64 <TIM_Base_SetConfig+0x40>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a3a      	ldr	r2, [pc, #232]	; (8007f48 <TIM_Base_SetConfig+0x124>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d108      	bne.n	8007e76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	685b      	ldr	r3, [r3, #4]
 8007e70:	68fa      	ldr	r2, [r7, #12]
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a2f      	ldr	r2, [pc, #188]	; (8007f38 <TIM_Base_SetConfig+0x114>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d01f      	beq.n	8007ebe <TIM_Base_SetConfig+0x9a>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e84:	d01b      	beq.n	8007ebe <TIM_Base_SetConfig+0x9a>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a2c      	ldr	r2, [pc, #176]	; (8007f3c <TIM_Base_SetConfig+0x118>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d017      	beq.n	8007ebe <TIM_Base_SetConfig+0x9a>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a2b      	ldr	r2, [pc, #172]	; (8007f40 <TIM_Base_SetConfig+0x11c>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d013      	beq.n	8007ebe <TIM_Base_SetConfig+0x9a>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a2a      	ldr	r2, [pc, #168]	; (8007f44 <TIM_Base_SetConfig+0x120>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d00f      	beq.n	8007ebe <TIM_Base_SetConfig+0x9a>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	4a29      	ldr	r2, [pc, #164]	; (8007f48 <TIM_Base_SetConfig+0x124>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d00b      	beq.n	8007ebe <TIM_Base_SetConfig+0x9a>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	4a28      	ldr	r2, [pc, #160]	; (8007f4c <TIM_Base_SetConfig+0x128>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d007      	beq.n	8007ebe <TIM_Base_SetConfig+0x9a>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	4a27      	ldr	r2, [pc, #156]	; (8007f50 <TIM_Base_SetConfig+0x12c>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d003      	beq.n	8007ebe <TIM_Base_SetConfig+0x9a>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	4a26      	ldr	r2, [pc, #152]	; (8007f54 <TIM_Base_SetConfig+0x130>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d108      	bne.n	8007ed0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ec4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	68fa      	ldr	r2, [r7, #12]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	695b      	ldr	r3, [r3, #20]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	68fa      	ldr	r2, [r7, #12]
 8007ee2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	689a      	ldr	r2, [r3, #8]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a10      	ldr	r2, [pc, #64]	; (8007f38 <TIM_Base_SetConfig+0x114>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d00f      	beq.n	8007f1c <TIM_Base_SetConfig+0xf8>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a12      	ldr	r2, [pc, #72]	; (8007f48 <TIM_Base_SetConfig+0x124>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d00b      	beq.n	8007f1c <TIM_Base_SetConfig+0xf8>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	4a11      	ldr	r2, [pc, #68]	; (8007f4c <TIM_Base_SetConfig+0x128>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d007      	beq.n	8007f1c <TIM_Base_SetConfig+0xf8>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a10      	ldr	r2, [pc, #64]	; (8007f50 <TIM_Base_SetConfig+0x12c>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d003      	beq.n	8007f1c <TIM_Base_SetConfig+0xf8>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	4a0f      	ldr	r2, [pc, #60]	; (8007f54 <TIM_Base_SetConfig+0x130>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d103      	bne.n	8007f24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	691a      	ldr	r2, [r3, #16]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2201      	movs	r2, #1
 8007f28:	615a      	str	r2, [r3, #20]
}
 8007f2a:	bf00      	nop
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	40012c00 	.word	0x40012c00
 8007f3c:	40000400 	.word	0x40000400
 8007f40:	40000800 	.word	0x40000800
 8007f44:	40000c00 	.word	0x40000c00
 8007f48:	40013400 	.word	0x40013400
 8007f4c:	40014000 	.word	0x40014000
 8007f50:	40014400 	.word	0x40014400
 8007f54:	40014800 	.word	0x40014800

08007f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d101      	bne.n	8007f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007f6c:	2302      	movs	r3, #2
 8007f6e:	e068      	b.n	8008042 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2202      	movs	r2, #2
 8007f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a2e      	ldr	r2, [pc, #184]	; (8008050 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d004      	beq.n	8007fa4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a2d      	ldr	r2, [pc, #180]	; (8008054 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d108      	bne.n	8007fb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007faa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fbc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a1e      	ldr	r2, [pc, #120]	; (8008050 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d01d      	beq.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fe2:	d018      	beq.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a1b      	ldr	r2, [pc, #108]	; (8008058 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d013      	beq.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a1a      	ldr	r2, [pc, #104]	; (800805c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d00e      	beq.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a18      	ldr	r2, [pc, #96]	; (8008060 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d009      	beq.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a13      	ldr	r2, [pc, #76]	; (8008054 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d004      	beq.n	8008016 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a14      	ldr	r2, [pc, #80]	; (8008064 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d10c      	bne.n	8008030 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800801c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	68ba      	ldr	r2, [r7, #8]
 8008024:	4313      	orrs	r3, r2
 8008026:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68ba      	ldr	r2, [r7, #8]
 800802e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2200      	movs	r2, #0
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	3714      	adds	r7, #20
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	40012c00 	.word	0x40012c00
 8008054:	40013400 	.word	0x40013400
 8008058:	40000400 	.word	0x40000400
 800805c:	40000800 	.word	0x40000800
 8008060:	40000c00 	.word	0x40000c00
 8008064:	40014000 	.word	0x40014000

08008068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008098:	bf00      	nop
 800809a:	370c      	adds	r7, #12
 800809c:	46bd      	mov	sp, r7
 800809e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a2:	4770      	bx	lr

080080a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b082      	sub	sp, #8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e040      	b.n	8008138 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d106      	bne.n	80080cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7fa fa1a 	bl	8002500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2224      	movs	r2, #36	; 0x24
 80080d0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f022 0201 	bic.w	r2, r2, #1
 80080e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d002      	beq.n	80080f0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fae0 	bl	80086b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f000 f825 	bl	8008140 <UART_SetConfig>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d101      	bne.n	8008100 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e01b      	b.n	8008138 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	685a      	ldr	r2, [r3, #4]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800810e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689a      	ldr	r2, [r3, #8]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800811e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0201 	orr.w	r2, r2, #1
 800812e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f000 fb5f 	bl	80087f4 <UART_CheckIdleState>
 8008136:	4603      	mov	r3, r0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008140:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008144:	b08a      	sub	sp, #40	; 0x28
 8008146:	af00      	add	r7, sp, #0
 8008148:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	689a      	ldr	r2, [r3, #8]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	691b      	ldr	r3, [r3, #16]
 8008158:	431a      	orrs	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	431a      	orrs	r2, r3
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	4313      	orrs	r3, r2
 8008166:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	4ba4      	ldr	r3, [pc, #656]	; (8008400 <UART_SetConfig+0x2c0>)
 8008170:	4013      	ands	r3, r2
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	6812      	ldr	r2, [r2, #0]
 8008176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008178:	430b      	orrs	r3, r1
 800817a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	68da      	ldr	r2, [r3, #12]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	430a      	orrs	r2, r1
 8008190:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a99      	ldr	r2, [pc, #612]	; (8008404 <UART_SetConfig+0x2c4>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d004      	beq.n	80081ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081a8:	4313      	orrs	r3, r2
 80081aa:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081bc:	430a      	orrs	r2, r1
 80081be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a90      	ldr	r2, [pc, #576]	; (8008408 <UART_SetConfig+0x2c8>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d126      	bne.n	8008218 <UART_SetConfig+0xd8>
 80081ca:	4b90      	ldr	r3, [pc, #576]	; (800840c <UART_SetConfig+0x2cc>)
 80081cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081d0:	f003 0303 	and.w	r3, r3, #3
 80081d4:	2b03      	cmp	r3, #3
 80081d6:	d81b      	bhi.n	8008210 <UART_SetConfig+0xd0>
 80081d8:	a201      	add	r2, pc, #4	; (adr r2, 80081e0 <UART_SetConfig+0xa0>)
 80081da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081de:	bf00      	nop
 80081e0:	080081f1 	.word	0x080081f1
 80081e4:	08008201 	.word	0x08008201
 80081e8:	080081f9 	.word	0x080081f9
 80081ec:	08008209 	.word	0x08008209
 80081f0:	2301      	movs	r3, #1
 80081f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081f6:	e116      	b.n	8008426 <UART_SetConfig+0x2e6>
 80081f8:	2302      	movs	r3, #2
 80081fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081fe:	e112      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008200:	2304      	movs	r3, #4
 8008202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008206:	e10e      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008208:	2308      	movs	r3, #8
 800820a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800820e:	e10a      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008210:	2310      	movs	r3, #16
 8008212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008216:	e106      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a7c      	ldr	r2, [pc, #496]	; (8008410 <UART_SetConfig+0x2d0>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d138      	bne.n	8008294 <UART_SetConfig+0x154>
 8008222:	4b7a      	ldr	r3, [pc, #488]	; (800840c <UART_SetConfig+0x2cc>)
 8008224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008228:	f003 030c 	and.w	r3, r3, #12
 800822c:	2b0c      	cmp	r3, #12
 800822e:	d82d      	bhi.n	800828c <UART_SetConfig+0x14c>
 8008230:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <UART_SetConfig+0xf8>)
 8008232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008236:	bf00      	nop
 8008238:	0800826d 	.word	0x0800826d
 800823c:	0800828d 	.word	0x0800828d
 8008240:	0800828d 	.word	0x0800828d
 8008244:	0800828d 	.word	0x0800828d
 8008248:	0800827d 	.word	0x0800827d
 800824c:	0800828d 	.word	0x0800828d
 8008250:	0800828d 	.word	0x0800828d
 8008254:	0800828d 	.word	0x0800828d
 8008258:	08008275 	.word	0x08008275
 800825c:	0800828d 	.word	0x0800828d
 8008260:	0800828d 	.word	0x0800828d
 8008264:	0800828d 	.word	0x0800828d
 8008268:	08008285 	.word	0x08008285
 800826c:	2300      	movs	r3, #0
 800826e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008272:	e0d8      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008274:	2302      	movs	r3, #2
 8008276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800827a:	e0d4      	b.n	8008426 <UART_SetConfig+0x2e6>
 800827c:	2304      	movs	r3, #4
 800827e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008282:	e0d0      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008284:	2308      	movs	r3, #8
 8008286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800828a:	e0cc      	b.n	8008426 <UART_SetConfig+0x2e6>
 800828c:	2310      	movs	r3, #16
 800828e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008292:	e0c8      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a5e      	ldr	r2, [pc, #376]	; (8008414 <UART_SetConfig+0x2d4>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d125      	bne.n	80082ea <UART_SetConfig+0x1aa>
 800829e:	4b5b      	ldr	r3, [pc, #364]	; (800840c <UART_SetConfig+0x2cc>)
 80082a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80082a8:	2b30      	cmp	r3, #48	; 0x30
 80082aa:	d016      	beq.n	80082da <UART_SetConfig+0x19a>
 80082ac:	2b30      	cmp	r3, #48	; 0x30
 80082ae:	d818      	bhi.n	80082e2 <UART_SetConfig+0x1a2>
 80082b0:	2b20      	cmp	r3, #32
 80082b2:	d00a      	beq.n	80082ca <UART_SetConfig+0x18a>
 80082b4:	2b20      	cmp	r3, #32
 80082b6:	d814      	bhi.n	80082e2 <UART_SetConfig+0x1a2>
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d002      	beq.n	80082c2 <UART_SetConfig+0x182>
 80082bc:	2b10      	cmp	r3, #16
 80082be:	d008      	beq.n	80082d2 <UART_SetConfig+0x192>
 80082c0:	e00f      	b.n	80082e2 <UART_SetConfig+0x1a2>
 80082c2:	2300      	movs	r3, #0
 80082c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082c8:	e0ad      	b.n	8008426 <UART_SetConfig+0x2e6>
 80082ca:	2302      	movs	r3, #2
 80082cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082d0:	e0a9      	b.n	8008426 <UART_SetConfig+0x2e6>
 80082d2:	2304      	movs	r3, #4
 80082d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082d8:	e0a5      	b.n	8008426 <UART_SetConfig+0x2e6>
 80082da:	2308      	movs	r3, #8
 80082dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082e0:	e0a1      	b.n	8008426 <UART_SetConfig+0x2e6>
 80082e2:	2310      	movs	r3, #16
 80082e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80082e8:	e09d      	b.n	8008426 <UART_SetConfig+0x2e6>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a4a      	ldr	r2, [pc, #296]	; (8008418 <UART_SetConfig+0x2d8>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d125      	bne.n	8008340 <UART_SetConfig+0x200>
 80082f4:	4b45      	ldr	r3, [pc, #276]	; (800840c <UART_SetConfig+0x2cc>)
 80082f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082fa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80082fe:	2bc0      	cmp	r3, #192	; 0xc0
 8008300:	d016      	beq.n	8008330 <UART_SetConfig+0x1f0>
 8008302:	2bc0      	cmp	r3, #192	; 0xc0
 8008304:	d818      	bhi.n	8008338 <UART_SetConfig+0x1f8>
 8008306:	2b80      	cmp	r3, #128	; 0x80
 8008308:	d00a      	beq.n	8008320 <UART_SetConfig+0x1e0>
 800830a:	2b80      	cmp	r3, #128	; 0x80
 800830c:	d814      	bhi.n	8008338 <UART_SetConfig+0x1f8>
 800830e:	2b00      	cmp	r3, #0
 8008310:	d002      	beq.n	8008318 <UART_SetConfig+0x1d8>
 8008312:	2b40      	cmp	r3, #64	; 0x40
 8008314:	d008      	beq.n	8008328 <UART_SetConfig+0x1e8>
 8008316:	e00f      	b.n	8008338 <UART_SetConfig+0x1f8>
 8008318:	2300      	movs	r3, #0
 800831a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800831e:	e082      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008320:	2302      	movs	r3, #2
 8008322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008326:	e07e      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008328:	2304      	movs	r3, #4
 800832a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800832e:	e07a      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008330:	2308      	movs	r3, #8
 8008332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008336:	e076      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008338:	2310      	movs	r3, #16
 800833a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800833e:	e072      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a35      	ldr	r2, [pc, #212]	; (800841c <UART_SetConfig+0x2dc>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d12a      	bne.n	80083a0 <UART_SetConfig+0x260>
 800834a:	4b30      	ldr	r3, [pc, #192]	; (800840c <UART_SetConfig+0x2cc>)
 800834c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008354:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008358:	d01a      	beq.n	8008390 <UART_SetConfig+0x250>
 800835a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800835e:	d81b      	bhi.n	8008398 <UART_SetConfig+0x258>
 8008360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008364:	d00c      	beq.n	8008380 <UART_SetConfig+0x240>
 8008366:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800836a:	d815      	bhi.n	8008398 <UART_SetConfig+0x258>
 800836c:	2b00      	cmp	r3, #0
 800836e:	d003      	beq.n	8008378 <UART_SetConfig+0x238>
 8008370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008374:	d008      	beq.n	8008388 <UART_SetConfig+0x248>
 8008376:	e00f      	b.n	8008398 <UART_SetConfig+0x258>
 8008378:	2300      	movs	r3, #0
 800837a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800837e:	e052      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008380:	2302      	movs	r3, #2
 8008382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008386:	e04e      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008388:	2304      	movs	r3, #4
 800838a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800838e:	e04a      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008390:	2308      	movs	r3, #8
 8008392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008396:	e046      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008398:	2310      	movs	r3, #16
 800839a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800839e:	e042      	b.n	8008426 <UART_SetConfig+0x2e6>
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a17      	ldr	r2, [pc, #92]	; (8008404 <UART_SetConfig+0x2c4>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d13a      	bne.n	8008420 <UART_SetConfig+0x2e0>
 80083aa:	4b18      	ldr	r3, [pc, #96]	; (800840c <UART_SetConfig+0x2cc>)
 80083ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80083b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083b8:	d01a      	beq.n	80083f0 <UART_SetConfig+0x2b0>
 80083ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083be:	d81b      	bhi.n	80083f8 <UART_SetConfig+0x2b8>
 80083c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083c4:	d00c      	beq.n	80083e0 <UART_SetConfig+0x2a0>
 80083c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ca:	d815      	bhi.n	80083f8 <UART_SetConfig+0x2b8>
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d003      	beq.n	80083d8 <UART_SetConfig+0x298>
 80083d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083d4:	d008      	beq.n	80083e8 <UART_SetConfig+0x2a8>
 80083d6:	e00f      	b.n	80083f8 <UART_SetConfig+0x2b8>
 80083d8:	2300      	movs	r3, #0
 80083da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083de:	e022      	b.n	8008426 <UART_SetConfig+0x2e6>
 80083e0:	2302      	movs	r3, #2
 80083e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083e6:	e01e      	b.n	8008426 <UART_SetConfig+0x2e6>
 80083e8:	2304      	movs	r3, #4
 80083ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ee:	e01a      	b.n	8008426 <UART_SetConfig+0x2e6>
 80083f0:	2308      	movs	r3, #8
 80083f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083f6:	e016      	b.n	8008426 <UART_SetConfig+0x2e6>
 80083f8:	2310      	movs	r3, #16
 80083fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083fe:	e012      	b.n	8008426 <UART_SetConfig+0x2e6>
 8008400:	efff69f3 	.word	0xefff69f3
 8008404:	40008000 	.word	0x40008000
 8008408:	40013800 	.word	0x40013800
 800840c:	40021000 	.word	0x40021000
 8008410:	40004400 	.word	0x40004400
 8008414:	40004800 	.word	0x40004800
 8008418:	40004c00 	.word	0x40004c00
 800841c:	40005000 	.word	0x40005000
 8008420:	2310      	movs	r3, #16
 8008422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a9f      	ldr	r2, [pc, #636]	; (80086a8 <UART_SetConfig+0x568>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d17a      	bne.n	8008526 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008430:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008434:	2b08      	cmp	r3, #8
 8008436:	d824      	bhi.n	8008482 <UART_SetConfig+0x342>
 8008438:	a201      	add	r2, pc, #4	; (adr r2, 8008440 <UART_SetConfig+0x300>)
 800843a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800843e:	bf00      	nop
 8008440:	08008465 	.word	0x08008465
 8008444:	08008483 	.word	0x08008483
 8008448:	0800846d 	.word	0x0800846d
 800844c:	08008483 	.word	0x08008483
 8008450:	08008473 	.word	0x08008473
 8008454:	08008483 	.word	0x08008483
 8008458:	08008483 	.word	0x08008483
 800845c:	08008483 	.word	0x08008483
 8008460:	0800847b 	.word	0x0800847b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008464:	f7fe fce8 	bl	8006e38 <HAL_RCC_GetPCLK1Freq>
 8008468:	61f8      	str	r0, [r7, #28]
        break;
 800846a:	e010      	b.n	800848e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800846c:	4b8f      	ldr	r3, [pc, #572]	; (80086ac <UART_SetConfig+0x56c>)
 800846e:	61fb      	str	r3, [r7, #28]
        break;
 8008470:	e00d      	b.n	800848e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008472:	f7fe fc49 	bl	8006d08 <HAL_RCC_GetSysClockFreq>
 8008476:	61f8      	str	r0, [r7, #28]
        break;
 8008478:	e009      	b.n	800848e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800847a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800847e:	61fb      	str	r3, [r7, #28]
        break;
 8008480:	e005      	b.n	800848e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8008482:	2300      	movs	r3, #0
 8008484:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800848c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800848e:	69fb      	ldr	r3, [r7, #28]
 8008490:	2b00      	cmp	r3, #0
 8008492:	f000 80fb 	beq.w	800868c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	685a      	ldr	r2, [r3, #4]
 800849a:	4613      	mov	r3, r2
 800849c:	005b      	lsls	r3, r3, #1
 800849e:	4413      	add	r3, r2
 80084a0:	69fa      	ldr	r2, [r7, #28]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d305      	bcc.n	80084b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80084ac:	69fa      	ldr	r2, [r7, #28]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d903      	bls.n	80084ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80084b8:	e0e8      	b.n	800868c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	2200      	movs	r2, #0
 80084be:	461c      	mov	r4, r3
 80084c0:	4615      	mov	r5, r2
 80084c2:	f04f 0200 	mov.w	r2, #0
 80084c6:	f04f 0300 	mov.w	r3, #0
 80084ca:	022b      	lsls	r3, r5, #8
 80084cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80084d0:	0222      	lsls	r2, r4, #8
 80084d2:	68f9      	ldr	r1, [r7, #12]
 80084d4:	6849      	ldr	r1, [r1, #4]
 80084d6:	0849      	lsrs	r1, r1, #1
 80084d8:	2000      	movs	r0, #0
 80084da:	4688      	mov	r8, r1
 80084dc:	4681      	mov	r9, r0
 80084de:	eb12 0a08 	adds.w	sl, r2, r8
 80084e2:	eb43 0b09 	adc.w	fp, r3, r9
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	685b      	ldr	r3, [r3, #4]
 80084ea:	2200      	movs	r2, #0
 80084ec:	603b      	str	r3, [r7, #0]
 80084ee:	607a      	str	r2, [r7, #4]
 80084f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084f4:	4650      	mov	r0, sl
 80084f6:	4659      	mov	r1, fp
 80084f8:	f7f8 fba6 	bl	8000c48 <__aeabi_uldivmod>
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	4613      	mov	r3, r2
 8008502:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800850a:	d308      	bcc.n	800851e <UART_SetConfig+0x3de>
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008512:	d204      	bcs.n	800851e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	69ba      	ldr	r2, [r7, #24]
 800851a:	60da      	str	r2, [r3, #12]
 800851c:	e0b6      	b.n	800868c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008524:	e0b2      	b.n	800868c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	69db      	ldr	r3, [r3, #28]
 800852a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800852e:	d15e      	bne.n	80085ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8008530:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008534:	2b08      	cmp	r3, #8
 8008536:	d828      	bhi.n	800858a <UART_SetConfig+0x44a>
 8008538:	a201      	add	r2, pc, #4	; (adr r2, 8008540 <UART_SetConfig+0x400>)
 800853a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800853e:	bf00      	nop
 8008540:	08008565 	.word	0x08008565
 8008544:	0800856d 	.word	0x0800856d
 8008548:	08008575 	.word	0x08008575
 800854c:	0800858b 	.word	0x0800858b
 8008550:	0800857b 	.word	0x0800857b
 8008554:	0800858b 	.word	0x0800858b
 8008558:	0800858b 	.word	0x0800858b
 800855c:	0800858b 	.word	0x0800858b
 8008560:	08008583 	.word	0x08008583
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008564:	f7fe fc68 	bl	8006e38 <HAL_RCC_GetPCLK1Freq>
 8008568:	61f8      	str	r0, [r7, #28]
        break;
 800856a:	e014      	b.n	8008596 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800856c:	f7fe fc7a 	bl	8006e64 <HAL_RCC_GetPCLK2Freq>
 8008570:	61f8      	str	r0, [r7, #28]
        break;
 8008572:	e010      	b.n	8008596 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008574:	4b4d      	ldr	r3, [pc, #308]	; (80086ac <UART_SetConfig+0x56c>)
 8008576:	61fb      	str	r3, [r7, #28]
        break;
 8008578:	e00d      	b.n	8008596 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800857a:	f7fe fbc5 	bl	8006d08 <HAL_RCC_GetSysClockFreq>
 800857e:	61f8      	str	r0, [r7, #28]
        break;
 8008580:	e009      	b.n	8008596 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008582:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008586:	61fb      	str	r3, [r7, #28]
        break;
 8008588:	e005      	b.n	8008596 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800858a:	2300      	movs	r3, #0
 800858c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008594:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d077      	beq.n	800868c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	005a      	lsls	r2, r3, #1
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	085b      	lsrs	r3, r3, #1
 80085a6:	441a      	add	r2, r3
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	2b0f      	cmp	r3, #15
 80085b6:	d916      	bls.n	80085e6 <UART_SetConfig+0x4a6>
 80085b8:	69bb      	ldr	r3, [r7, #24]
 80085ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085be:	d212      	bcs.n	80085e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085c0:	69bb      	ldr	r3, [r7, #24]
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	f023 030f 	bic.w	r3, r3, #15
 80085c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	085b      	lsrs	r3, r3, #1
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	f003 0307 	and.w	r3, r3, #7
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	8afb      	ldrh	r3, [r7, #22]
 80085d8:	4313      	orrs	r3, r2
 80085da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	8afa      	ldrh	r2, [r7, #22]
 80085e2:	60da      	str	r2, [r3, #12]
 80085e4:	e052      	b.n	800868c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80085ec:	e04e      	b.n	800868c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80085ee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085f2:	2b08      	cmp	r3, #8
 80085f4:	d827      	bhi.n	8008646 <UART_SetConfig+0x506>
 80085f6:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <UART_SetConfig+0x4bc>)
 80085f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fc:	08008621 	.word	0x08008621
 8008600:	08008629 	.word	0x08008629
 8008604:	08008631 	.word	0x08008631
 8008608:	08008647 	.word	0x08008647
 800860c:	08008637 	.word	0x08008637
 8008610:	08008647 	.word	0x08008647
 8008614:	08008647 	.word	0x08008647
 8008618:	08008647 	.word	0x08008647
 800861c:	0800863f 	.word	0x0800863f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008620:	f7fe fc0a 	bl	8006e38 <HAL_RCC_GetPCLK1Freq>
 8008624:	61f8      	str	r0, [r7, #28]
        break;
 8008626:	e014      	b.n	8008652 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008628:	f7fe fc1c 	bl	8006e64 <HAL_RCC_GetPCLK2Freq>
 800862c:	61f8      	str	r0, [r7, #28]
        break;
 800862e:	e010      	b.n	8008652 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008630:	4b1e      	ldr	r3, [pc, #120]	; (80086ac <UART_SetConfig+0x56c>)
 8008632:	61fb      	str	r3, [r7, #28]
        break;
 8008634:	e00d      	b.n	8008652 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008636:	f7fe fb67 	bl	8006d08 <HAL_RCC_GetSysClockFreq>
 800863a:	61f8      	str	r0, [r7, #28]
        break;
 800863c:	e009      	b.n	8008652 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800863e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008642:	61fb      	str	r3, [r7, #28]
        break;
 8008644:	e005      	b.n	8008652 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008650:	bf00      	nop
    }

    if (pclk != 0U)
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d019      	beq.n	800868c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	085a      	lsrs	r2, r3, #1
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	441a      	add	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	fbb2 f3f3 	udiv	r3, r2, r3
 800866a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	2b0f      	cmp	r3, #15
 8008670:	d909      	bls.n	8008686 <UART_SetConfig+0x546>
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008678:	d205      	bcs.n	8008686 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	b29a      	uxth	r2, r3
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	60da      	str	r2, [r3, #12]
 8008684:	e002      	b.n	800868c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008686:	2301      	movs	r3, #1
 8008688:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008698:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800869c:	4618      	mov	r0, r3
 800869e:	3728      	adds	r7, #40	; 0x28
 80086a0:	46bd      	mov	sp, r7
 80086a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086a6:	bf00      	nop
 80086a8:	40008000 	.word	0x40008000
 80086ac:	00f42400 	.word	0x00f42400

080086b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	f003 0308 	and.w	r3, r3, #8
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00a      	beq.n	80086da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	685b      	ldr	r3, [r3, #4]
 80086ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	430a      	orrs	r2, r1
 80086d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086de:	f003 0301 	and.w	r3, r3, #1
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00a      	beq.n	80086fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	430a      	orrs	r2, r1
 80086fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008700:	f003 0302 	and.w	r3, r3, #2
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00a      	beq.n	800871e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	430a      	orrs	r2, r1
 800871c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008722:	f003 0304 	and.w	r3, r3, #4
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008744:	f003 0310 	and.w	r3, r3, #16
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00a      	beq.n	8008762 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	430a      	orrs	r2, r1
 8008760:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008766:	f003 0320 	and.w	r3, r3, #32
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00a      	beq.n	8008784 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	689b      	ldr	r3, [r3, #8]
 8008774:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	430a      	orrs	r2, r1
 8008782:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800878c:	2b00      	cmp	r3, #0
 800878e:	d01a      	beq.n	80087c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	430a      	orrs	r2, r1
 80087a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087ae:	d10a      	bne.n	80087c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	430a      	orrs	r2, r1
 80087c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d00a      	beq.n	80087e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	430a      	orrs	r2, r1
 80087e6:	605a      	str	r2, [r3, #4]
  }
}
 80087e8:	bf00      	nop
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b098      	sub	sp, #96	; 0x60
 80087f8:	af02      	add	r7, sp, #8
 80087fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008804:	f7fa f994 	bl	8002b30 <HAL_GetTick>
 8008808:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0308 	and.w	r3, r3, #8
 8008814:	2b08      	cmp	r3, #8
 8008816:	d12e      	bne.n	8008876 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008818:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008820:	2200      	movs	r2, #0
 8008822:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 f88c 	bl	8008944 <UART_WaitOnFlagUntilTimeout>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d021      	beq.n	8008876 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008846:	653b      	str	r3, [r7, #80]	; 0x50
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	461a      	mov	r2, r3
 800884e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008850:	647b      	str	r3, [r7, #68]	; 0x44
 8008852:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008854:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008856:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008858:	e841 2300 	strex	r3, r2, [r1]
 800885c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800885e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1e6      	bne.n	8008832 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2220      	movs	r2, #32
 8008868:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e062      	b.n	800893c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f003 0304 	and.w	r3, r3, #4
 8008880:	2b04      	cmp	r3, #4
 8008882:	d149      	bne.n	8008918 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800888c:	2200      	movs	r2, #0
 800888e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f856 	bl	8008944 <UART_WaitOnFlagUntilTimeout>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d03c      	beq.n	8008918 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a6:	e853 3f00 	ldrex	r3, [r3]
 80088aa:	623b      	str	r3, [r7, #32]
   return(result);
 80088ac:	6a3b      	ldr	r3, [r7, #32]
 80088ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	461a      	mov	r2, r3
 80088ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088bc:	633b      	str	r3, [r7, #48]	; 0x30
 80088be:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088c4:	e841 2300 	strex	r3, r2, [r1]
 80088c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d1e6      	bne.n	800889e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3308      	adds	r3, #8
 80088d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	e853 3f00 	ldrex	r3, [r3]
 80088de:	60fb      	str	r3, [r7, #12]
   return(result);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f023 0301 	bic.w	r3, r3, #1
 80088e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3308      	adds	r3, #8
 80088ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088f0:	61fa      	str	r2, [r7, #28]
 80088f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f4:	69b9      	ldr	r1, [r7, #24]
 80088f6:	69fa      	ldr	r2, [r7, #28]
 80088f8:	e841 2300 	strex	r3, r2, [r1]
 80088fc:	617b      	str	r3, [r7, #20]
   return(result);
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d1e5      	bne.n	80088d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2220      	movs	r2, #32
 8008908:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e011      	b.n	800893c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2220      	movs	r2, #32
 800891c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2220      	movs	r2, #32
 8008922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2200      	movs	r2, #0
 800892a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800893a:	2300      	movs	r3, #0
}
 800893c:	4618      	mov	r0, r3
 800893e:	3758      	adds	r7, #88	; 0x58
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	60f8      	str	r0, [r7, #12]
 800894c:	60b9      	str	r1, [r7, #8]
 800894e:	603b      	str	r3, [r7, #0]
 8008950:	4613      	mov	r3, r2
 8008952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008954:	e049      	b.n	80089ea <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895c:	d045      	beq.n	80089ea <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800895e:	f7fa f8e7 	bl	8002b30 <HAL_GetTick>
 8008962:	4602      	mov	r2, r0
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	69ba      	ldr	r2, [r7, #24]
 800896a:	429a      	cmp	r2, r3
 800896c:	d302      	bcc.n	8008974 <UART_WaitOnFlagUntilTimeout+0x30>
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d101      	bne.n	8008978 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008974:	2303      	movs	r3, #3
 8008976:	e048      	b.n	8008a0a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f003 0304 	and.w	r3, r3, #4
 8008982:	2b00      	cmp	r3, #0
 8008984:	d031      	beq.n	80089ea <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	69db      	ldr	r3, [r3, #28]
 800898c:	f003 0308 	and.w	r3, r3, #8
 8008990:	2b08      	cmp	r3, #8
 8008992:	d110      	bne.n	80089b6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2208      	movs	r2, #8
 800899a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800899c:	68f8      	ldr	r0, [r7, #12]
 800899e:	f000 f838 	bl	8008a12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2208      	movs	r2, #8
 80089a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2200      	movs	r2, #0
 80089ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80089b2:	2301      	movs	r3, #1
 80089b4:	e029      	b.n	8008a0a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	69db      	ldr	r3, [r3, #28]
 80089bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089c4:	d111      	bne.n	80089ea <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80089d0:	68f8      	ldr	r0, [r7, #12]
 80089d2:	f000 f81e 	bl	8008a12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2220      	movs	r2, #32
 80089da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e00f      	b.n	8008a0a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	69da      	ldr	r2, [r3, #28]
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	4013      	ands	r3, r2
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	bf0c      	ite	eq
 80089fa:	2301      	moveq	r3, #1
 80089fc:	2300      	movne	r3, #0
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	461a      	mov	r2, r3
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d0a6      	beq.n	8008956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}

08008a12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a12:	b480      	push	{r7}
 8008a14:	b095      	sub	sp, #84	; 0x54
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a22:	e853 3f00 	ldrex	r3, [r3]
 8008a26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a2a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	461a      	mov	r2, r3
 8008a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a38:	643b      	str	r3, [r7, #64]	; 0x40
 8008a3a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a40:	e841 2300 	strex	r3, r2, [r1]
 8008a44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d1e6      	bne.n	8008a1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3308      	adds	r3, #8
 8008a52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a54:	6a3b      	ldr	r3, [r7, #32]
 8008a56:	e853 3f00 	ldrex	r3, [r3]
 8008a5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	f023 0301 	bic.w	r3, r3, #1
 8008a62:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	3308      	adds	r3, #8
 8008a6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a6c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a74:	e841 2300 	strex	r3, r2, [r1]
 8008a78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1e5      	bne.n	8008a4c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d118      	bne.n	8008aba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	f023 0310 	bic.w	r3, r3, #16
 8008a9c:	647b      	str	r3, [r7, #68]	; 0x44
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aa6:	61bb      	str	r3, [r7, #24]
 8008aa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	6979      	ldr	r1, [r7, #20]
 8008aac:	69ba      	ldr	r2, [r7, #24]
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e6      	bne.n	8008a88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2220      	movs	r2, #32
 8008abe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008ace:	bf00      	nop
 8008ad0:	3754      	adds	r7, #84	; 0x54
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ada:	b084      	sub	sp, #16
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	f107 001c 	add.w	r0, r7, #28
 8008ae8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008af8:	6878      	ldr	r0, [r7, #4]
 8008afa:	f001 fa1d 	bl	8009f38 <USB_CoreReset>
 8008afe:	4603      	mov	r3, r0
 8008b00:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d106      	bne.n	8008b16 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38
 8008b14:	e005      	b.n	8008b22 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b2e:	b004      	add	sp, #16
 8008b30:	4770      	bx	lr
	...

08008b34 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b087      	sub	sp, #28
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	60b9      	str	r1, [r7, #8]
 8008b3e:	4613      	mov	r3, r2
 8008b40:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008b42:	79fb      	ldrb	r3, [r7, #7]
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d165      	bne.n	8008c14 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	4a3e      	ldr	r2, [pc, #248]	; (8008c44 <USB_SetTurnaroundTime+0x110>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d906      	bls.n	8008b5e <USB_SetTurnaroundTime+0x2a>
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	4a3d      	ldr	r2, [pc, #244]	; (8008c48 <USB_SetTurnaroundTime+0x114>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d202      	bcs.n	8008b5e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008b58:	230f      	movs	r3, #15
 8008b5a:	617b      	str	r3, [r7, #20]
 8008b5c:	e05c      	b.n	8008c18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008b5e:	68bb      	ldr	r3, [r7, #8]
 8008b60:	4a39      	ldr	r2, [pc, #228]	; (8008c48 <USB_SetTurnaroundTime+0x114>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d306      	bcc.n	8008b74 <USB_SetTurnaroundTime+0x40>
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	4a38      	ldr	r2, [pc, #224]	; (8008c4c <USB_SetTurnaroundTime+0x118>)
 8008b6a:	4293      	cmp	r3, r2
 8008b6c:	d202      	bcs.n	8008b74 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b6e:	230e      	movs	r3, #14
 8008b70:	617b      	str	r3, [r7, #20]
 8008b72:	e051      	b.n	8008c18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	4a35      	ldr	r2, [pc, #212]	; (8008c4c <USB_SetTurnaroundTime+0x118>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d306      	bcc.n	8008b8a <USB_SetTurnaroundTime+0x56>
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	4a34      	ldr	r2, [pc, #208]	; (8008c50 <USB_SetTurnaroundTime+0x11c>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d202      	bcs.n	8008b8a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b84:	230d      	movs	r3, #13
 8008b86:	617b      	str	r3, [r7, #20]
 8008b88:	e046      	b.n	8008c18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	4a30      	ldr	r2, [pc, #192]	; (8008c50 <USB_SetTurnaroundTime+0x11c>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d306      	bcc.n	8008ba0 <USB_SetTurnaroundTime+0x6c>
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	4a2f      	ldr	r2, [pc, #188]	; (8008c54 <USB_SetTurnaroundTime+0x120>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d802      	bhi.n	8008ba0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b9a:	230c      	movs	r3, #12
 8008b9c:	617b      	str	r3, [r7, #20]
 8008b9e:	e03b      	b.n	8008c18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	4a2c      	ldr	r2, [pc, #176]	; (8008c54 <USB_SetTurnaroundTime+0x120>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d906      	bls.n	8008bb6 <USB_SetTurnaroundTime+0x82>
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	4a2b      	ldr	r2, [pc, #172]	; (8008c58 <USB_SetTurnaroundTime+0x124>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d802      	bhi.n	8008bb6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008bb0:	230b      	movs	r3, #11
 8008bb2:	617b      	str	r3, [r7, #20]
 8008bb4:	e030      	b.n	8008c18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	4a27      	ldr	r2, [pc, #156]	; (8008c58 <USB_SetTurnaroundTime+0x124>)
 8008bba:	4293      	cmp	r3, r2
 8008bbc:	d906      	bls.n	8008bcc <USB_SetTurnaroundTime+0x98>
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	4a26      	ldr	r2, [pc, #152]	; (8008c5c <USB_SetTurnaroundTime+0x128>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d802      	bhi.n	8008bcc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008bc6:	230a      	movs	r3, #10
 8008bc8:	617b      	str	r3, [r7, #20]
 8008bca:	e025      	b.n	8008c18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	4a23      	ldr	r2, [pc, #140]	; (8008c5c <USB_SetTurnaroundTime+0x128>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d906      	bls.n	8008be2 <USB_SetTurnaroundTime+0xae>
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	4a22      	ldr	r2, [pc, #136]	; (8008c60 <USB_SetTurnaroundTime+0x12c>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d202      	bcs.n	8008be2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008bdc:	2309      	movs	r3, #9
 8008bde:	617b      	str	r3, [r7, #20]
 8008be0:	e01a      	b.n	8008c18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	4a1e      	ldr	r2, [pc, #120]	; (8008c60 <USB_SetTurnaroundTime+0x12c>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d306      	bcc.n	8008bf8 <USB_SetTurnaroundTime+0xc4>
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	4a1d      	ldr	r2, [pc, #116]	; (8008c64 <USB_SetTurnaroundTime+0x130>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d802      	bhi.n	8008bf8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008bf2:	2308      	movs	r3, #8
 8008bf4:	617b      	str	r3, [r7, #20]
 8008bf6:	e00f      	b.n	8008c18 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	4a1a      	ldr	r2, [pc, #104]	; (8008c64 <USB_SetTurnaroundTime+0x130>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d906      	bls.n	8008c0e <USB_SetTurnaroundTime+0xda>
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	4a19      	ldr	r2, [pc, #100]	; (8008c68 <USB_SetTurnaroundTime+0x134>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d202      	bcs.n	8008c0e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008c08:	2307      	movs	r3, #7
 8008c0a:	617b      	str	r3, [r7, #20]
 8008c0c:	e004      	b.n	8008c18 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008c0e:	2306      	movs	r3, #6
 8008c10:	617b      	str	r3, [r7, #20]
 8008c12:	e001      	b.n	8008c18 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008c14:	2309      	movs	r3, #9
 8008c16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	68da      	ldr	r2, [r3, #12]
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	029b      	lsls	r3, r3, #10
 8008c2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008c30:	431a      	orrs	r2, r3
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	371c      	adds	r7, #28
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	00d8acbf 	.word	0x00d8acbf
 8008c48:	00e4e1c0 	.word	0x00e4e1c0
 8008c4c:	00f42400 	.word	0x00f42400
 8008c50:	01067380 	.word	0x01067380
 8008c54:	011a499f 	.word	0x011a499f
 8008c58:	01312cff 	.word	0x01312cff
 8008c5c:	014ca43f 	.word	0x014ca43f
 8008c60:	016e3600 	.word	0x016e3600
 8008c64:	01a6ab1f 	.word	0x01a6ab1f
 8008c68:	01e84800 	.word	0x01e84800

08008c6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f043 0201 	orr.w	r2, r3, #1
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c80:	2300      	movs	r3, #0
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	f023 0201 	bic.w	r2, r3, #1
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	370c      	adds	r7, #12
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008ccc:	78fb      	ldrb	r3, [r7, #3]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d115      	bne.n	8008cfe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	68db      	ldr	r3, [r3, #12]
 8008cd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cde:	2001      	movs	r0, #1
 8008ce0:	f7f9 ff32 	bl	8002b48 <HAL_Delay>
      ms++;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	3301      	adds	r3, #1
 8008ce8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f001 f8ab 	bl	8009e46 <USB_GetMode>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d01e      	beq.n	8008d34 <USB_SetCurrentMode+0x84>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b31      	cmp	r3, #49	; 0x31
 8008cfa:	d9f0      	bls.n	8008cde <USB_SetCurrentMode+0x2e>
 8008cfc:	e01a      	b.n	8008d34 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008cfe:	78fb      	ldrb	r3, [r7, #3]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d115      	bne.n	8008d30 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d10:	2001      	movs	r0, #1
 8008d12:	f7f9 ff19 	bl	8002b48 <HAL_Delay>
      ms++;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f001 f892 	bl	8009e46 <USB_GetMode>
 8008d22:	4603      	mov	r3, r0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d005      	beq.n	8008d34 <USB_SetCurrentMode+0x84>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	2b31      	cmp	r3, #49	; 0x31
 8008d2c:	d9f0      	bls.n	8008d10 <USB_SetCurrentMode+0x60>
 8008d2e:	e001      	b.n	8008d34 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e005      	b.n	8008d40 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b32      	cmp	r3, #50	; 0x32
 8008d38:	d101      	bne.n	8008d3e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e000      	b.n	8008d40 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d3e:	2300      	movs	r3, #0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d48:	b084      	sub	sp, #16
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b086      	sub	sp, #24
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d62:	2300      	movs	r3, #0
 8008d64:	613b      	str	r3, [r7, #16]
 8008d66:	e009      	b.n	8008d7c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d68:	687a      	ldr	r2, [r7, #4]
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	3340      	adds	r3, #64	; 0x40
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	4413      	add	r3, r2
 8008d72:	2200      	movs	r2, #0
 8008d74:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	613b      	str	r3, [r7, #16]
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	2b0e      	cmp	r3, #14
 8008d80:	d9f2      	bls.n	8008d68 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d11c      	bne.n	8008dc2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d96:	f043 0302 	orr.w	r3, r3, #2
 8008d9a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	601a      	str	r2, [r3, #0]
 8008dc0:	e005      	b.n	8008dce <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008dd4:	461a      	mov	r2, r3
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008dda:	2103      	movs	r1, #3
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 f959 	bl	8009094 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008de2:	2110      	movs	r1, #16
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 f8f1 	bl	8008fcc <USB_FlushTxFifo>
 8008dea:	4603      	mov	r3, r0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d001      	beq.n	8008df4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f91d 	bl	8009034 <USB_FlushRxFifo>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e16:	461a      	mov	r2, r3
 8008e18:	2300      	movs	r3, #0
 8008e1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e22:	461a      	mov	r2, r3
 8008e24:	2300      	movs	r3, #0
 8008e26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e28:	2300      	movs	r3, #0
 8008e2a:	613b      	str	r3, [r7, #16]
 8008e2c:	e043      	b.n	8008eb6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e44:	d118      	bne.n	8008e78 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10a      	bne.n	8008e62 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e58:	461a      	mov	r2, r3
 8008e5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e5e:	6013      	str	r3, [r2, #0]
 8008e60:	e013      	b.n	8008e8a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	015a      	lsls	r2, r3, #5
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	4413      	add	r3, r2
 8008e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	e008      	b.n	8008e8a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	015a      	lsls	r2, r3, #5
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	4413      	add	r3, r2
 8008e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e84:	461a      	mov	r2, r3
 8008e86:	2300      	movs	r3, #0
 8008e88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e96:	461a      	mov	r2, r3
 8008e98:	2300      	movs	r3, #0
 8008e9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	015a      	lsls	r2, r3, #5
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008eae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	613b      	str	r3, [r7, #16]
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb8:	693a      	ldr	r2, [r7, #16]
 8008eba:	429a      	cmp	r2, r3
 8008ebc:	d3b7      	bcc.n	8008e2e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	613b      	str	r3, [r7, #16]
 8008ec2:	e043      	b.n	8008f4c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ec4:	693b      	ldr	r3, [r7, #16]
 8008ec6:	015a      	lsls	r2, r3, #5
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	4413      	add	r3, r2
 8008ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eda:	d118      	bne.n	8008f0e <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10a      	bne.n	8008ef8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	015a      	lsls	r2, r3, #5
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	4413      	add	r3, r2
 8008eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eee:	461a      	mov	r2, r3
 8008ef0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008ef4:	6013      	str	r3, [r2, #0]
 8008ef6:	e013      	b.n	8008f20 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f04:	461a      	mov	r2, r3
 8008f06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f0a:	6013      	str	r3, [r2, #0]
 8008f0c:	e008      	b.n	8008f20 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f0e:	693b      	ldr	r3, [r7, #16]
 8008f10:	015a      	lsls	r2, r3, #5
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	4413      	add	r3, r2
 8008f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	015a      	lsls	r2, r3, #5
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f2c:	461a      	mov	r2, r3
 8008f2e:	2300      	movs	r3, #0
 8008f30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3e:	461a      	mov	r2, r3
 8008f40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	3301      	adds	r3, #1
 8008f4a:	613b      	str	r3, [r7, #16]
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f4e:	693a      	ldr	r2, [r7, #16]
 8008f50:	429a      	cmp	r2, r3
 8008f52:	d3b7      	bcc.n	8008ec4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	699b      	ldr	r3, [r3, #24]
 8008f7a:	f043 0210 	orr.w	r2, r3, #16
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	699a      	ldr	r2, [r3, #24]
 8008f86:	4b10      	ldr	r3, [pc, #64]	; (8008fc8 <USB_DevInit+0x280>)
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d005      	beq.n	8008fa0 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	f043 0208 	orr.w	r2, r3, #8
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	d107      	bne.n	8008fb6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008fae:	f043 0304 	orr.w	r3, r3, #4
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3718      	adds	r7, #24
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fc2:	b004      	add	sp, #16
 8008fc4:	4770      	bx	lr
 8008fc6:	bf00      	nop
 8008fc8:	803c3800 	.word	0x803c3800

08008fcc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
 8008fd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	4a13      	ldr	r2, [pc, #76]	; (8009030 <USB_FlushTxFifo+0x64>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d901      	bls.n	8008fec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	e01b      	b.n	8009024 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	daf2      	bge.n	8008fda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	019b      	lsls	r3, r3, #6
 8008ffc:	f043 0220 	orr.w	r2, r3, #32
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	3301      	adds	r3, #1
 8009008:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	4a08      	ldr	r2, [pc, #32]	; (8009030 <USB_FlushTxFifo+0x64>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d901      	bls.n	8009016 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009012:	2303      	movs	r3, #3
 8009014:	e006      	b.n	8009024 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	f003 0320 	and.w	r3, r3, #32
 800901e:	2b20      	cmp	r3, #32
 8009020:	d0f0      	beq.n	8009004 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3714      	adds	r7, #20
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	00030d40 	.word	0x00030d40

08009034 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009034:	b480      	push	{r7}
 8009036:	b085      	sub	sp, #20
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800903c:	2300      	movs	r3, #0
 800903e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	3301      	adds	r3, #1
 8009044:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	4a11      	ldr	r2, [pc, #68]	; (8009090 <USB_FlushRxFifo+0x5c>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d901      	bls.n	8009052 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800904e:	2303      	movs	r3, #3
 8009050:	e018      	b.n	8009084 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	2b00      	cmp	r3, #0
 8009058:	daf2      	bge.n	8009040 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2210      	movs	r2, #16
 8009062:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	3301      	adds	r3, #1
 8009068:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	4a08      	ldr	r2, [pc, #32]	; (8009090 <USB_FlushRxFifo+0x5c>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d901      	bls.n	8009076 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009072:	2303      	movs	r3, #3
 8009074:	e006      	b.n	8009084 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	691b      	ldr	r3, [r3, #16]
 800907a:	f003 0310 	and.w	r3, r3, #16
 800907e:	2b10      	cmp	r3, #16
 8009080:	d0f0      	beq.n	8009064 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr
 8009090:	00030d40 	.word	0x00030d40

08009094 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009094:	b480      	push	{r7}
 8009096:	b085      	sub	sp, #20
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	78fb      	ldrb	r3, [r7, #3]
 80090ae:	68f9      	ldr	r1, [r7, #12]
 80090b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090b4:	4313      	orrs	r3, r2
 80090b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b087      	sub	sp, #28
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d8:	689b      	ldr	r3, [r3, #8]
 80090da:	f003 0306 	and.w	r3, r3, #6
 80090de:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2b02      	cmp	r3, #2
 80090e4:	d002      	beq.n	80090ec <USB_GetDevSpeed+0x26>
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	2b06      	cmp	r3, #6
 80090ea:	d102      	bne.n	80090f2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80090ec:	2302      	movs	r3, #2
 80090ee:	75fb      	strb	r3, [r7, #23]
 80090f0:	e001      	b.n	80090f6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80090f2:	230f      	movs	r3, #15
 80090f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80090f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	371c      	adds	r7, #28
 80090fc:	46bd      	mov	sp, r7
 80090fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009102:	4770      	bx	lr

08009104 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009104:	b480      	push	{r7}
 8009106:	b085      	sub	sp, #20
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	785b      	ldrb	r3, [r3, #1]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d13a      	bne.n	8009196 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009126:	69da      	ldr	r2, [r3, #28]
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	f003 030f 	and.w	r3, r3, #15
 8009130:	2101      	movs	r1, #1
 8009132:	fa01 f303 	lsl.w	r3, r1, r3
 8009136:	b29b      	uxth	r3, r3
 8009138:	68f9      	ldr	r1, [r7, #12]
 800913a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800913e:	4313      	orrs	r3, r2
 8009140:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	015a      	lsls	r2, r3, #5
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	4413      	add	r3, r2
 800914a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009154:	2b00      	cmp	r3, #0
 8009156:	d155      	bne.n	8009204 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	015a      	lsls	r2, r3, #5
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	4413      	add	r3, r2
 8009160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009164:	681a      	ldr	r2, [r3, #0]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	791b      	ldrb	r3, [r3, #4]
 8009172:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009174:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	059b      	lsls	r3, r3, #22
 800917a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800917c:	4313      	orrs	r3, r2
 800917e:	68ba      	ldr	r2, [r7, #8]
 8009180:	0151      	lsls	r1, r2, #5
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	440a      	add	r2, r1
 8009186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800918a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800918e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009192:	6013      	str	r3, [r2, #0]
 8009194:	e036      	b.n	8009204 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800919c:	69da      	ldr	r2, [r3, #28]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	f003 030f 	and.w	r3, r3, #15
 80091a6:	2101      	movs	r1, #1
 80091a8:	fa01 f303 	lsl.w	r3, r1, r3
 80091ac:	041b      	lsls	r3, r3, #16
 80091ae:	68f9      	ldr	r1, [r7, #12]
 80091b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091b4:	4313      	orrs	r3, r2
 80091b6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	015a      	lsls	r2, r3, #5
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	4413      	add	r3, r2
 80091c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d11a      	bne.n	8009204 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	015a      	lsls	r2, r3, #5
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	4413      	add	r3, r2
 80091d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091da:	681a      	ldr	r2, [r3, #0]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	791b      	ldrb	r3, [r3, #4]
 80091e8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091ea:	430b      	orrs	r3, r1
 80091ec:	4313      	orrs	r3, r2
 80091ee:	68ba      	ldr	r2, [r7, #8]
 80091f0:	0151      	lsls	r1, r2, #5
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	440a      	add	r2, r1
 80091f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009202:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr
	...

08009214 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
 800921c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	781b      	ldrb	r3, [r3, #0]
 8009226:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	785b      	ldrb	r3, [r3, #1]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d161      	bne.n	80092f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	015a      	lsls	r2, r3, #5
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	4413      	add	r3, r2
 8009238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009242:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009246:	d11f      	bne.n	8009288 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	015a      	lsls	r2, r3, #5
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	4413      	add	r3, r2
 8009250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	0151      	lsls	r1, r2, #5
 800925a:	68fa      	ldr	r2, [r7, #12]
 800925c:	440a      	add	r2, r1
 800925e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009262:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009266:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	015a      	lsls	r2, r3, #5
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4413      	add	r3, r2
 8009270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	0151      	lsls	r1, r2, #5
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	440a      	add	r2, r1
 800927e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009282:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009286:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800928e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	781b      	ldrb	r3, [r3, #0]
 8009294:	f003 030f 	and.w	r3, r3, #15
 8009298:	2101      	movs	r1, #1
 800929a:	fa01 f303 	lsl.w	r3, r1, r3
 800929e:	b29b      	uxth	r3, r3
 80092a0:	43db      	mvns	r3, r3
 80092a2:	68f9      	ldr	r1, [r7, #12]
 80092a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092a8:	4013      	ands	r3, r2
 80092aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b2:	69da      	ldr	r2, [r3, #28]
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	f003 030f 	and.w	r3, r3, #15
 80092bc:	2101      	movs	r1, #1
 80092be:	fa01 f303 	lsl.w	r3, r1, r3
 80092c2:	b29b      	uxth	r3, r3
 80092c4:	43db      	mvns	r3, r3
 80092c6:	68f9      	ldr	r1, [r7, #12]
 80092c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092cc:	4013      	ands	r3, r2
 80092ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	015a      	lsls	r2, r3, #5
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	0159      	lsls	r1, r3, #5
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	440b      	add	r3, r1
 80092e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092ea:	4619      	mov	r1, r3
 80092ec:	4b35      	ldr	r3, [pc, #212]	; (80093c4 <USB_DeactivateEndpoint+0x1b0>)
 80092ee:	4013      	ands	r3, r2
 80092f0:	600b      	str	r3, [r1, #0]
 80092f2:	e060      	b.n	80093b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	015a      	lsls	r2, r3, #5
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	4413      	add	r3, r2
 80092fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800930a:	d11f      	bne.n	800934c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	015a      	lsls	r2, r3, #5
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	4413      	add	r3, r2
 8009314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	0151      	lsls	r1, r2, #5
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	440a      	add	r2, r1
 8009322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009326:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800932a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	015a      	lsls	r2, r3, #5
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	4413      	add	r3, r2
 8009334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	0151      	lsls	r1, r2, #5
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	440a      	add	r2, r1
 8009342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009346:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800934a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009352:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	781b      	ldrb	r3, [r3, #0]
 8009358:	f003 030f 	and.w	r3, r3, #15
 800935c:	2101      	movs	r1, #1
 800935e:	fa01 f303 	lsl.w	r3, r1, r3
 8009362:	041b      	lsls	r3, r3, #16
 8009364:	43db      	mvns	r3, r3
 8009366:	68f9      	ldr	r1, [r7, #12]
 8009368:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800936c:	4013      	ands	r3, r2
 800936e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009376:	69da      	ldr	r2, [r3, #28]
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	781b      	ldrb	r3, [r3, #0]
 800937c:	f003 030f 	and.w	r3, r3, #15
 8009380:	2101      	movs	r1, #1
 8009382:	fa01 f303 	lsl.w	r3, r1, r3
 8009386:	041b      	lsls	r3, r3, #16
 8009388:	43db      	mvns	r3, r3
 800938a:	68f9      	ldr	r1, [r7, #12]
 800938c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009390:	4013      	ands	r3, r2
 8009392:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	015a      	lsls	r2, r3, #5
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	4413      	add	r3, r2
 800939c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	0159      	lsls	r1, r3, #5
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	440b      	add	r3, r1
 80093aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ae:	4619      	mov	r1, r3
 80093b0:	4b05      	ldr	r3, [pc, #20]	; (80093c8 <USB_DeactivateEndpoint+0x1b4>)
 80093b2:	4013      	ands	r3, r2
 80093b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3714      	adds	r7, #20
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	ec337800 	.word	0xec337800
 80093c8:	eff37800 	.word	0xeff37800

080093cc <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	785b      	ldrb	r3, [r3, #1]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	f040 8128 	bne.w	800963a <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	691b      	ldr	r3, [r3, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d132      	bne.n	8009458 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	015a      	lsls	r2, r3, #5
 80093f6:	697b      	ldr	r3, [r7, #20]
 80093f8:	4413      	add	r3, r2
 80093fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	693a      	ldr	r2, [r7, #16]
 8009402:	0151      	lsls	r1, r2, #5
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	440a      	add	r2, r1
 8009408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800940c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009410:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009414:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009416:	693b      	ldr	r3, [r7, #16]
 8009418:	015a      	lsls	r2, r3, #5
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	4413      	add	r3, r2
 800941e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009422:	691b      	ldr	r3, [r3, #16]
 8009424:	693a      	ldr	r2, [r7, #16]
 8009426:	0151      	lsls	r1, r2, #5
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	440a      	add	r2, r1
 800942c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009430:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009434:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009436:	693b      	ldr	r3, [r7, #16]
 8009438:	015a      	lsls	r2, r3, #5
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	4413      	add	r3, r2
 800943e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009442:	691b      	ldr	r3, [r3, #16]
 8009444:	693a      	ldr	r2, [r7, #16]
 8009446:	0151      	lsls	r1, r2, #5
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	440a      	add	r2, r1
 800944c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009450:	0cdb      	lsrs	r3, r3, #19
 8009452:	04db      	lsls	r3, r3, #19
 8009454:	6113      	str	r3, [r2, #16]
 8009456:	e092      	b.n	800957e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	015a      	lsls	r2, r3, #5
 800945c:	697b      	ldr	r3, [r7, #20]
 800945e:	4413      	add	r3, r2
 8009460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009464:	691b      	ldr	r3, [r3, #16]
 8009466:	693a      	ldr	r2, [r7, #16]
 8009468:	0151      	lsls	r1, r2, #5
 800946a:	697a      	ldr	r2, [r7, #20]
 800946c:	440a      	add	r2, r1
 800946e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009472:	0cdb      	lsrs	r3, r3, #19
 8009474:	04db      	lsls	r3, r3, #19
 8009476:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	015a      	lsls	r2, r3, #5
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	4413      	add	r3, r2
 8009480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009484:	691b      	ldr	r3, [r3, #16]
 8009486:	693a      	ldr	r2, [r7, #16]
 8009488:	0151      	lsls	r1, r2, #5
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	440a      	add	r2, r1
 800948e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009492:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009496:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800949a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d11a      	bne.n	80094d8 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	691a      	ldr	r2, [r3, #16]
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	689b      	ldr	r3, [r3, #8]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d903      	bls.n	80094b6 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	689a      	ldr	r2, [r3, #8]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	697b      	ldr	r3, [r7, #20]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	0151      	lsls	r1, r2, #5
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	440a      	add	r2, r1
 80094cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80094d4:	6113      	str	r3, [r2, #16]
 80094d6:	e01b      	b.n	8009510 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	015a      	lsls	r2, r3, #5
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	4413      	add	r3, r2
 80094e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094e4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	6919      	ldr	r1, [r3, #16]
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	440b      	add	r3, r1
 80094f0:	1e59      	subs	r1, r3, #1
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80094fa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094fc:	4b8d      	ldr	r3, [pc, #564]	; (8009734 <USB_EPStartXfer+0x368>)
 80094fe:	400b      	ands	r3, r1
 8009500:	6939      	ldr	r1, [r7, #16]
 8009502:	0148      	lsls	r0, r1, #5
 8009504:	6979      	ldr	r1, [r7, #20]
 8009506:	4401      	add	r1, r0
 8009508:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800950c:	4313      	orrs	r3, r2
 800950e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	015a      	lsls	r2, r3, #5
 8009514:	697b      	ldr	r3, [r7, #20]
 8009516:	4413      	add	r3, r2
 8009518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800951c:	691a      	ldr	r2, [r3, #16]
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	691b      	ldr	r3, [r3, #16]
 8009522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009526:	6939      	ldr	r1, [r7, #16]
 8009528:	0148      	lsls	r0, r1, #5
 800952a:	6979      	ldr	r1, [r7, #20]
 800952c:	4401      	add	r1, r0
 800952e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009532:	4313      	orrs	r3, r2
 8009534:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	791b      	ldrb	r3, [r3, #4]
 800953a:	2b01      	cmp	r3, #1
 800953c:	d11f      	bne.n	800957e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	015a      	lsls	r2, r3, #5
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	4413      	add	r3, r2
 8009546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800954a:	691b      	ldr	r3, [r3, #16]
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	0151      	lsls	r1, r2, #5
 8009550:	697a      	ldr	r2, [r7, #20]
 8009552:	440a      	add	r2, r1
 8009554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009558:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800955c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	015a      	lsls	r2, r3, #5
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	4413      	add	r3, r2
 8009566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800956a:	691b      	ldr	r3, [r3, #16]
 800956c:	693a      	ldr	r2, [r7, #16]
 800956e:	0151      	lsls	r1, r2, #5
 8009570:	697a      	ldr	r2, [r7, #20]
 8009572:	440a      	add	r2, r1
 8009574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009578:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800957c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	015a      	lsls	r2, r3, #5
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	4413      	add	r3, r2
 8009586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	0151      	lsls	r1, r2, #5
 8009590:	697a      	ldr	r2, [r7, #20]
 8009592:	440a      	add	r2, r1
 8009594:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009598:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800959c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	791b      	ldrb	r3, [r3, #4]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d015      	beq.n	80095d2 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	691b      	ldr	r3, [r3, #16]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f000 8139 	beq.w	8009822 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	f003 030f 	and.w	r3, r3, #15
 80095c0:	2101      	movs	r1, #1
 80095c2:	fa01 f303 	lsl.w	r3, r1, r3
 80095c6:	6979      	ldr	r1, [r7, #20]
 80095c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095cc:	4313      	orrs	r3, r2
 80095ce:	634b      	str	r3, [r1, #52]	; 0x34
 80095d0:	e127      	b.n	8009822 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095d8:	689b      	ldr	r3, [r3, #8]
 80095da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d110      	bne.n	8009604 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	015a      	lsls	r2, r3, #5
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	4413      	add	r3, r2
 80095ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	0151      	lsls	r1, r2, #5
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	440a      	add	r2, r1
 80095f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	e00f      	b.n	8009624 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009604:	693b      	ldr	r3, [r7, #16]
 8009606:	015a      	lsls	r2, r3, #5
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	4413      	add	r3, r2
 800960c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	693a      	ldr	r2, [r7, #16]
 8009614:	0151      	lsls	r1, r2, #5
 8009616:	697a      	ldr	r2, [r7, #20]
 8009618:	440a      	add	r2, r1
 800961a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800961e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009622:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	68d9      	ldr	r1, [r3, #12]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	781a      	ldrb	r2, [r3, #0]
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	b29b      	uxth	r3, r3
 8009632:	6878      	ldr	r0, [r7, #4]
 8009634:	f000 f9a6 	bl	8009984 <USB_WritePacket>
 8009638:	e0f3      	b.n	8009822 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	0151      	lsls	r1, r2, #5
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	440a      	add	r2, r1
 8009650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009654:	0cdb      	lsrs	r3, r3, #19
 8009656:	04db      	lsls	r3, r3, #19
 8009658:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	4413      	add	r3, r2
 8009662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	0151      	lsls	r1, r2, #5
 800966c:	697a      	ldr	r2, [r7, #20]
 800966e:	440a      	add	r2, r1
 8009670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009674:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009678:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800967c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d12f      	bne.n	80096e4 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d003      	beq.n	8009694 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	689a      	ldr	r2, [r3, #8]
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	689a      	ldr	r2, [r3, #8]
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096a8:	691a      	ldr	r2, [r3, #16]
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80096b2:	6939      	ldr	r1, [r7, #16]
 80096b4:	0148      	lsls	r0, r1, #5
 80096b6:	6979      	ldr	r1, [r7, #20]
 80096b8:	4401      	add	r1, r0
 80096ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80096be:	4313      	orrs	r3, r2
 80096c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	015a      	lsls	r2, r3, #5
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	4413      	add	r3, r2
 80096ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ce:	691b      	ldr	r3, [r3, #16]
 80096d0:	693a      	ldr	r2, [r7, #16]
 80096d2:	0151      	lsls	r1, r2, #5
 80096d4:	697a      	ldr	r2, [r7, #20]
 80096d6:	440a      	add	r2, r1
 80096d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80096e0:	6113      	str	r3, [r2, #16]
 80096e2:	e061      	b.n	80097a8 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	691b      	ldr	r3, [r3, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d125      	bne.n	8009738 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f8:	691a      	ldr	r2, [r3, #16]
 80096fa:	683b      	ldr	r3, [r7, #0]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009702:	6939      	ldr	r1, [r7, #16]
 8009704:	0148      	lsls	r0, r1, #5
 8009706:	6979      	ldr	r1, [r7, #20]
 8009708:	4401      	add	r1, r0
 800970a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800970e:	4313      	orrs	r3, r2
 8009710:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	015a      	lsls	r2, r3, #5
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	4413      	add	r3, r2
 800971a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971e:	691b      	ldr	r3, [r3, #16]
 8009720:	693a      	ldr	r2, [r7, #16]
 8009722:	0151      	lsls	r1, r2, #5
 8009724:	697a      	ldr	r2, [r7, #20]
 8009726:	440a      	add	r2, r1
 8009728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800972c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009730:	6113      	str	r3, [r2, #16]
 8009732:	e039      	b.n	80097a8 <USB_EPStartXfer+0x3dc>
 8009734:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	691a      	ldr	r2, [r3, #16]
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	689b      	ldr	r3, [r3, #8]
 8009740:	4413      	add	r3, r2
 8009742:	1e5a      	subs	r2, r3, #1
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	fbb2 f3f3 	udiv	r3, r2, r3
 800974c:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	89fa      	ldrh	r2, [r7, #14]
 8009754:	fb03 f202 	mul.w	r2, r3, r2
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	4413      	add	r3, r2
 8009764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009768:	691a      	ldr	r2, [r3, #16]
 800976a:	89fb      	ldrh	r3, [r7, #14]
 800976c:	04d9      	lsls	r1, r3, #19
 800976e:	4b2f      	ldr	r3, [pc, #188]	; (800982c <USB_EPStartXfer+0x460>)
 8009770:	400b      	ands	r3, r1
 8009772:	6939      	ldr	r1, [r7, #16]
 8009774:	0148      	lsls	r0, r1, #5
 8009776:	6979      	ldr	r1, [r7, #20]
 8009778:	4401      	add	r1, r0
 800977a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800977e:	4313      	orrs	r3, r2
 8009780:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978e:	691a      	ldr	r2, [r3, #16]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	6a1b      	ldr	r3, [r3, #32]
 8009794:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009798:	6939      	ldr	r1, [r7, #16]
 800979a:	0148      	lsls	r0, r1, #5
 800979c:	6979      	ldr	r1, [r7, #20]
 800979e:	4401      	add	r1, r0
 80097a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097a4:	4313      	orrs	r3, r2
 80097a6:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	791b      	ldrb	r3, [r3, #4]
 80097ac:	2b01      	cmp	r3, #1
 80097ae:	d128      	bne.n	8009802 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097b6:	689b      	ldr	r3, [r3, #8]
 80097b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d110      	bne.n	80097e2 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	015a      	lsls	r2, r3, #5
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	4413      	add	r3, r2
 80097c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	693a      	ldr	r2, [r7, #16]
 80097d0:	0151      	lsls	r1, r2, #5
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	440a      	add	r2, r1
 80097d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	e00f      	b.n	8009802 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	015a      	lsls	r2, r3, #5
 80097e6:	697b      	ldr	r3, [r7, #20]
 80097e8:	4413      	add	r3, r2
 80097ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	0151      	lsls	r1, r2, #5
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	440a      	add	r2, r1
 80097f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009800:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	4413      	add	r3, r2
 800980a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	0151      	lsls	r1, r2, #5
 8009814:	697a      	ldr	r2, [r7, #20]
 8009816:	440a      	add	r2, r1
 8009818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800981c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009820:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3718      	adds	r7, #24
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	1ff80000 	.word	0x1ff80000

08009830 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009830:	b480      	push	{r7}
 8009832:	b087      	sub	sp, #28
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800983a:	2300      	movs	r3, #0
 800983c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	785b      	ldrb	r3, [r3, #1]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d14a      	bne.n	80098e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	4413      	add	r3, r2
 8009858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009862:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009866:	f040 8086 	bne.w	8009976 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	683a      	ldr	r2, [r7, #0]
 800987c:	7812      	ldrb	r2, [r2, #0]
 800987e:	0151      	lsls	r1, r2, #5
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	440a      	add	r2, r1
 8009884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009888:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800988c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	015a      	lsls	r2, r3, #5
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	4413      	add	r3, r2
 8009898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	683a      	ldr	r2, [r7, #0]
 80098a0:	7812      	ldrb	r2, [r2, #0]
 80098a2:	0151      	lsls	r1, r2, #5
 80098a4:	693a      	ldr	r2, [r7, #16]
 80098a6:	440a      	add	r2, r1
 80098a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80098b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3301      	adds	r3, #1
 80098b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f242 7210 	movw	r2, #10000	; 0x2710
 80098be:	4293      	cmp	r3, r2
 80098c0:	d902      	bls.n	80098c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80098c2:	2301      	movs	r3, #1
 80098c4:	75fb      	strb	r3, [r7, #23]
          break;
 80098c6:	e056      	b.n	8009976 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	015a      	lsls	r2, r3, #5
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	4413      	add	r3, r2
 80098d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098e0:	d0e7      	beq.n	80098b2 <USB_EPStopXfer+0x82>
 80098e2:	e048      	b.n	8009976 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	015a      	lsls	r2, r3, #5
 80098ea:	693b      	ldr	r3, [r7, #16]
 80098ec:	4413      	add	r3, r2
 80098ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098fc:	d13b      	bne.n	8009976 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	781b      	ldrb	r3, [r3, #0]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	4413      	add	r3, r2
 8009908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	683a      	ldr	r2, [r7, #0]
 8009910:	7812      	ldrb	r2, [r2, #0]
 8009912:	0151      	lsls	r1, r2, #5
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	440a      	add	r2, r1
 8009918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800991c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009920:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	683a      	ldr	r2, [r7, #0]
 8009934:	7812      	ldrb	r2, [r2, #0]
 8009936:	0151      	lsls	r1, r2, #5
 8009938:	693a      	ldr	r2, [r7, #16]
 800993a:	440a      	add	r2, r1
 800993c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009940:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009944:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	3301      	adds	r3, #1
 800994a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009952:	4293      	cmp	r3, r2
 8009954:	d902      	bls.n	800995c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	75fb      	strb	r3, [r7, #23]
          break;
 800995a:	e00c      	b.n	8009976 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	015a      	lsls	r2, r3, #5
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	4413      	add	r3, r2
 8009966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009974:	d0e7      	beq.n	8009946 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009976:	7dfb      	ldrb	r3, [r7, #23]
}
 8009978:	4618      	mov	r0, r3
 800997a:	371c      	adds	r7, #28
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8009984:	b480      	push	{r7}
 8009986:	b089      	sub	sp, #36	; 0x24
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	4611      	mov	r1, r2
 8009990:	461a      	mov	r2, r3
 8009992:	460b      	mov	r3, r1
 8009994:	71fb      	strb	r3, [r7, #7]
 8009996:	4613      	mov	r3, r2
 8009998:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80099a2:	88bb      	ldrh	r3, [r7, #4]
 80099a4:	3303      	adds	r3, #3
 80099a6:	089b      	lsrs	r3, r3, #2
 80099a8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80099aa:	2300      	movs	r3, #0
 80099ac:	61bb      	str	r3, [r7, #24]
 80099ae:	e018      	b.n	80099e2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80099b0:	79fb      	ldrb	r3, [r7, #7]
 80099b2:	031a      	lsls	r2, r3, #12
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	4413      	add	r3, r2
 80099b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099bc:	461a      	mov	r2, r3
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	6013      	str	r3, [r2, #0]
    pSrc++;
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	3301      	adds	r3, #1
 80099c8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80099ca:	69fb      	ldr	r3, [r7, #28]
 80099cc:	3301      	adds	r3, #1
 80099ce:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	3301      	adds	r3, #1
 80099d4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80099d6:	69fb      	ldr	r3, [r7, #28]
 80099d8:	3301      	adds	r3, #1
 80099da:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80099dc:	69bb      	ldr	r3, [r7, #24]
 80099de:	3301      	adds	r3, #1
 80099e0:	61bb      	str	r3, [r7, #24]
 80099e2:	69ba      	ldr	r2, [r7, #24]
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d3e2      	bcc.n	80099b0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80099ea:	2300      	movs	r3, #0
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3724      	adds	r7, #36	; 0x24
 80099f0:	46bd      	mov	sp, r7
 80099f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f6:	4770      	bx	lr

080099f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80099f8:	b480      	push	{r7}
 80099fa:	b08b      	sub	sp, #44	; 0x2c
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	4613      	mov	r3, r2
 8009a04:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009a0e:	88fb      	ldrh	r3, [r7, #6]
 8009a10:	089b      	lsrs	r3, r3, #2
 8009a12:	b29b      	uxth	r3, r3
 8009a14:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009a16:	88fb      	ldrh	r3, [r7, #6]
 8009a18:	f003 0303 	and.w	r3, r3, #3
 8009a1c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009a1e:	2300      	movs	r3, #0
 8009a20:	623b      	str	r3, [r7, #32]
 8009a22:	e014      	b.n	8009a4e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a32:	3301      	adds	r3, #1
 8009a34:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a38:	3301      	adds	r3, #1
 8009a3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	3301      	adds	r3, #1
 8009a40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	3301      	adds	r3, #1
 8009a46:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009a48:	6a3b      	ldr	r3, [r7, #32]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	623b      	str	r3, [r7, #32]
 8009a4e:	6a3a      	ldr	r2, [r7, #32]
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d3e6      	bcc.n	8009a24 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009a56:	8bfb      	ldrh	r3, [r7, #30]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d01e      	beq.n	8009a9a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a66:	461a      	mov	r2, r3
 8009a68:	f107 0310 	add.w	r3, r7, #16
 8009a6c:	6812      	ldr	r2, [r2, #0]
 8009a6e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	6a3b      	ldr	r3, [r7, #32]
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	00db      	lsls	r3, r3, #3
 8009a78:	fa22 f303 	lsr.w	r3, r2, r3
 8009a7c:	b2da      	uxtb	r2, r3
 8009a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a80:	701a      	strb	r2, [r3, #0]
      i++;
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	3301      	adds	r3, #1
 8009a86:	623b      	str	r3, [r7, #32]
      pDest++;
 8009a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009a8e:	8bfb      	ldrh	r3, [r7, #30]
 8009a90:	3b01      	subs	r3, #1
 8009a92:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009a94:	8bfb      	ldrh	r3, [r7, #30]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1ea      	bne.n	8009a70 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	372c      	adds	r7, #44	; 0x2c
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b085      	sub	sp, #20
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	785b      	ldrb	r3, [r3, #1]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d12c      	bne.n	8009b1e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ac4:	68bb      	ldr	r3, [r7, #8]
 8009ac6:	015a      	lsls	r2, r3, #5
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	4413      	add	r3, r2
 8009acc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	db12      	blt.n	8009afc <USB_EPSetStall+0x54>
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d00f      	beq.n	8009afc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	015a      	lsls	r2, r3, #5
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	0151      	lsls	r1, r2, #5
 8009aee:	68fa      	ldr	r2, [r7, #12]
 8009af0:	440a      	add	r2, r1
 8009af2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009af6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009afa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	015a      	lsls	r2, r3, #5
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	4413      	add	r3, r2
 8009b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	0151      	lsls	r1, r2, #5
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	440a      	add	r2, r1
 8009b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009b16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b1a:	6013      	str	r3, [r2, #0]
 8009b1c:	e02b      	b.n	8009b76 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	db12      	blt.n	8009b56 <USB_EPSetStall+0xae>
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00f      	beq.n	8009b56 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	015a      	lsls	r2, r3, #5
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	68ba      	ldr	r2, [r7, #8]
 8009b46:	0151      	lsls	r1, r2, #5
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	440a      	add	r2, r1
 8009b4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009b54:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	0151      	lsls	r1, r2, #5
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	440a      	add	r2, r1
 8009b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009b74:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3714      	adds	r7, #20
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	781b      	ldrb	r3, [r3, #0]
 8009b96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	785b      	ldrb	r3, [r3, #1]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d128      	bne.n	8009bf2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	0151      	lsls	r1, r2, #5
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	440a      	add	r2, r1
 8009bb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bbe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	791b      	ldrb	r3, [r3, #4]
 8009bc4:	2b03      	cmp	r3, #3
 8009bc6:	d003      	beq.n	8009bd0 <USB_EPClearStall+0x4c>
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	791b      	ldrb	r3, [r3, #4]
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d138      	bne.n	8009c42 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	015a      	lsls	r2, r3, #5
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68ba      	ldr	r2, [r7, #8]
 8009be0:	0151      	lsls	r1, r2, #5
 8009be2:	68fa      	ldr	r2, [r7, #12]
 8009be4:	440a      	add	r2, r1
 8009be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009bee:	6013      	str	r3, [r2, #0]
 8009bf0:	e027      	b.n	8009c42 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	015a      	lsls	r2, r3, #5
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	68ba      	ldr	r2, [r7, #8]
 8009c02:	0151      	lsls	r1, r2, #5
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	440a      	add	r2, r1
 8009c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009c10:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	791b      	ldrb	r3, [r3, #4]
 8009c16:	2b03      	cmp	r3, #3
 8009c18:	d003      	beq.n	8009c22 <USB_EPClearStall+0x9e>
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	791b      	ldrb	r3, [r3, #4]
 8009c1e:	2b02      	cmp	r3, #2
 8009c20:	d10f      	bne.n	8009c42 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	015a      	lsls	r2, r3, #5
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	4413      	add	r3, r2
 8009c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	68ba      	ldr	r2, [r7, #8]
 8009c32:	0151      	lsls	r1, r2, #5
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	440a      	add	r2, r1
 8009c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c40:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009c42:	2300      	movs	r3, #0
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b085      	sub	sp, #20
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009c72:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	78fb      	ldrb	r3, [r7, #3]
 8009c7e:	011b      	lsls	r3, r3, #4
 8009c80:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009c84:	68f9      	ldr	r1, [r7, #12]
 8009c86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009c8e:	2300      	movs	r3, #0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3714      	adds	r7, #20
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b085      	sub	sp, #20
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009cb6:	f023 0303 	bic.w	r3, r3, #3
 8009cba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009cca:	f023 0302 	bic.w	r3, r3, #2
 8009cce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b085      	sub	sp, #20
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	68fa      	ldr	r2, [r7, #12]
 8009cf4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009cf8:	f023 0303 	bic.w	r3, r3, #3
 8009cfc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d0c:	f043 0302 	orr.w	r3, r3, #2
 8009d10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	695b      	ldr	r3, [r3, #20]
 8009d2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	699b      	ldr	r3, [r3, #24]
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	4013      	ands	r3, r2
 8009d36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009d38:	68fb      	ldr	r3, [r7, #12]
}
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr

08009d46 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d46:	b480      	push	{r7}
 8009d48:	b085      	sub	sp, #20
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d58:	699b      	ldr	r3, [r3, #24]
 8009d5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d62:	69db      	ldr	r3, [r3, #28]
 8009d64:	68ba      	ldr	r2, [r7, #8]
 8009d66:	4013      	ands	r3, r2
 8009d68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009d6a:	68bb      	ldr	r3, [r7, #8]
 8009d6c:	0c1b      	lsrs	r3, r3, #16
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3714      	adds	r7, #20
 8009d72:	46bd      	mov	sp, r7
 8009d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d78:	4770      	bx	lr

08009d7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009d7a:	b480      	push	{r7}
 8009d7c:	b085      	sub	sp, #20
 8009d7e:	af00      	add	r7, sp, #0
 8009d80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d8c:	699b      	ldr	r3, [r3, #24]
 8009d8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d96:	69db      	ldr	r3, [r3, #28]
 8009d98:	68ba      	ldr	r2, [r7, #8]
 8009d9a:	4013      	ands	r3, r2
 8009d9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	b29b      	uxth	r3, r3
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3714      	adds	r7, #20
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr

08009dae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009dae:	b480      	push	{r7}
 8009db0:	b085      	sub	sp, #20
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
 8009db6:	460b      	mov	r3, r1
 8009db8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009dbe:	78fb      	ldrb	r3, [r7, #3]
 8009dc0:	015a      	lsls	r2, r3, #5
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	4413      	add	r3, r2
 8009dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd4:	695b      	ldr	r3, [r3, #20]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	4013      	ands	r3, r2
 8009dda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009ddc:	68bb      	ldr	r3, [r7, #8]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009dea:	b480      	push	{r7}
 8009dec:	b087      	sub	sp, #28
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	6078      	str	r0, [r7, #4]
 8009df2:	460b      	mov	r3, r1
 8009df4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e00:	691b      	ldr	r3, [r3, #16]
 8009e02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009e0e:	78fb      	ldrb	r3, [r7, #3]
 8009e10:	f003 030f 	and.w	r3, r3, #15
 8009e14:	68fa      	ldr	r2, [r7, #12]
 8009e16:	fa22 f303 	lsr.w	r3, r2, r3
 8009e1a:	01db      	lsls	r3, r3, #7
 8009e1c:	b2db      	uxtb	r3, r3
 8009e1e:	693a      	ldr	r2, [r7, #16]
 8009e20:	4313      	orrs	r3, r2
 8009e22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009e24:	78fb      	ldrb	r3, [r7, #3]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	697b      	ldr	r3, [r7, #20]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e30:	689b      	ldr	r3, [r3, #8]
 8009e32:	693a      	ldr	r2, [r7, #16]
 8009e34:	4013      	ands	r3, r2
 8009e36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009e38:	68bb      	ldr	r3, [r7, #8]
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	371c      	adds	r7, #28
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr

08009e46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b083      	sub	sp, #12
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	695b      	ldr	r3, [r3, #20]
 8009e52:	f003 0301 	and.w	r3, r3, #1
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	370c      	adds	r7, #12
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e60:	4770      	bx	lr

08009e62 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009e62:	b480      	push	{r7}
 8009e64:	b085      	sub	sp, #20
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	68fa      	ldr	r2, [r7, #12]
 8009e78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e7c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009e80:	f023 0307 	bic.w	r3, r3, #7
 8009e84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e8c:	685b      	ldr	r3, [r3, #4]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	333c      	adds	r3, #60	; 0x3c
 8009eba:	3304      	adds	r3, #4
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	4a1c      	ldr	r2, [pc, #112]	; (8009f34 <USB_EP0_OutStart+0x8c>)
 8009ec4:	4293      	cmp	r3, r2
 8009ec6:	d90a      	bls.n	8009ede <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ed8:	d101      	bne.n	8009ede <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009eda:	2300      	movs	r3, #0
 8009edc:	e024      	b.n	8009f28 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee4:	461a      	mov	r2, r3
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	68fa      	ldr	r2, [r7, #12]
 8009ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ef8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009efc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f04:	691b      	ldr	r3, [r3, #16]
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f0c:	f043 0318 	orr.w	r3, r3, #24
 8009f10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009f24:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3714      	adds	r7, #20
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr
 8009f34:	4f54300a 	.word	0x4f54300a

08009f38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009f40:	2300      	movs	r3, #0
 8009f42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	3301      	adds	r3, #1
 8009f48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	4a13      	ldr	r2, [pc, #76]	; (8009f9c <USB_CoreReset+0x64>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d901      	bls.n	8009f56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009f52:	2303      	movs	r3, #3
 8009f54:	e01b      	b.n	8009f8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	daf2      	bge.n	8009f44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009f5e:	2300      	movs	r3, #0
 8009f60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	691b      	ldr	r3, [r3, #16]
 8009f66:	f043 0201 	orr.w	r2, r3, #1
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	3301      	adds	r3, #1
 8009f72:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	4a09      	ldr	r2, [pc, #36]	; (8009f9c <USB_CoreReset+0x64>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d901      	bls.n	8009f80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	e006      	b.n	8009f8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	f003 0301 	and.w	r3, r3, #1
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d0f0      	beq.n	8009f6e <USB_CoreReset+0x36>

  return HAL_OK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3714      	adds	r7, #20
 8009f92:	46bd      	mov	sp, r7
 8009f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f98:	4770      	bx	lr
 8009f9a:	bf00      	nop
 8009f9c:	00030d40 	.word	0x00030d40

08009fa0 <USBD_AUDIO_Init>:
 *         Initialize the AUDIO interface
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	70fb      	strb	r3, [r7, #3]
	UNUSED(cfgidx);
	USBD_AUDIO_HandleTypeDef *haudio;

	/* Allocate Audio structure */
	haudio = (USBD_AUDIO_HandleTypeDef*) USBD_malloc (
 8009fac:	f641 6050 	movw	r0, #7760	; 0x1e50
 8009fb0:	f005 fee4 	bl	800fd7c <USBD_static_malloc>
 8009fb4:	60f8      	str	r0, [r7, #12]
			sizeof(USBD_AUDIO_HandleTypeDef));

	if (haudio == NULL) {
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d109      	bne.n	8009fd0 <USBD_AUDIO_Init+0x30>
		pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	32b0      	adds	r2, #176	; 0xb0
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		return (uint8_t) USBD_EMEM;
 8009fcc:	2302      	movs	r3, #2
 8009fce:	e07e      	b.n	800a0ce <USBD_AUDIO_Init+0x12e>
	}

	pdev->pClassDataCmsit[pdev->classId] = (void*) haudio;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	32b0      	adds	r2, #176	; 0xb0
 8009fda:	68f9      	ldr	r1, [r7, #12]
 8009fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	32b0      	adds	r2, #176	; 0xb0
 8009fea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

	if (pdev->dev_speed == USBD_SPEED_HIGH) {
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	7c1b      	ldrb	r3, [r3, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d10e      	bne.n	800a01a <USBD_AUDIO_Init+0x7a>
		pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 8009ffc:	4b36      	ldr	r3, [pc, #216]	; (800a0d8 <USBD_AUDIO_Init+0x138>)
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	f003 020f 	and.w	r2, r3, #15
 800a004:	6879      	ldr	r1, [r7, #4]
 800a006:	4613      	mov	r3, r2
 800a008:	009b      	lsls	r3, r3, #2
 800a00a:	4413      	add	r3, r2
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	440b      	add	r3, r1
 800a010:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a014:	2201      	movs	r2, #1
 800a016:	801a      	strh	r2, [r3, #0]
 800a018:	e00d      	b.n	800a036 <USBD_AUDIO_Init+0x96>
	} else /* LOW and FULL-speed endpoints */
	{
		pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 800a01a:	4b2f      	ldr	r3, [pc, #188]	; (800a0d8 <USBD_AUDIO_Init+0x138>)
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	f003 020f 	and.w	r2, r3, #15
 800a022:	6879      	ldr	r1, [r7, #4]
 800a024:	4613      	mov	r3, r2
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4413      	add	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	440b      	add	r3, r1
 800a02e:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a032:	2201      	movs	r2, #1
 800a034:	801a      	strh	r2, [r3, #0]
	}

	/* Open EP OUT */
	(void) USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC,
 800a036:	4b28      	ldr	r3, [pc, #160]	; (800a0d8 <USBD_AUDIO_Init+0x138>)
 800a038:	7819      	ldrb	r1, [r3, #0]
 800a03a:	2360      	movs	r3, #96	; 0x60
 800a03c:	2201      	movs	r2, #1
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f005 fc9c 	bl	800f97c <USBD_LL_OpenEP>
			AUDIO_OUT_PACKET);
	pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 800a044:	4b24      	ldr	r3, [pc, #144]	; (800a0d8 <USBD_AUDIO_Init+0x138>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	f003 020f 	and.w	r2, r3, #15
 800a04c:	6879      	ldr	r1, [r7, #4]
 800a04e:	4613      	mov	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	4413      	add	r3, r2
 800a054:	009b      	lsls	r3, r3, #2
 800a056:	440b      	add	r3, r1
 800a058:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a05c:	2201      	movs	r2, #1
 800a05e:	801a      	strh	r2, [r3, #0]

	haudio->alt_setting = 0U;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	601a      	str	r2, [r3, #0]
	haudio->offset = AUDIO_OFFSET_UNKNOWN;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a06c:	2203      	movs	r2, #3
 800a06e:	f883 2e04 	strb.w	r2, [r3, #3588]	; 0xe04
	haudio->wr_ptr = 0U;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a078:	2200      	movs	r2, #0
 800a07a:	f8a3 2e08 	strh.w	r2, [r3, #3592]	; 0xe08
	haudio->rd_ptr = 0U;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a084:	2200      	movs	r2, #0
 800a086:	f8a3 2e06 	strh.w	r2, [r3, #3590]	; 0xe06
	haudio->rd_enable = 0U;
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a090:	2200      	movs	r2, #0
 800a092:	f883 2e05 	strb.w	r2, [r3, #3589]	; 0xe05

	/* Initialize the Audio output Hardware layer */
	if (((USBD_AUDIO_ItfTypeDef*) pdev->pUserData[pdev->classId])->Init(
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	33b0      	adds	r3, #176	; 0xb0
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	685b      	ldr	r3, [r3, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	2146      	movs	r1, #70	; 0x46
 800a0ac:	f645 50c0 	movw	r0, #24000	; 0x5dc0
 800a0b0:	4798      	blx	r3
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d001      	beq.n	800a0bc <USBD_AUDIO_Init+0x11c>
			USBD_AUDIO_FREQ,
			AUDIO_DEFAULT_VOLUME, 0U) != 0U) {
		return (uint8_t) USBD_FAIL;
 800a0b8:	2303      	movs	r3, #3
 800a0ba:	e008      	b.n	800a0ce <USBD_AUDIO_Init+0x12e>
	}

	/* Prepare Out endpoint to receive 1st packet */
	(void) USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 800a0bc:	4b06      	ldr	r3, [pc, #24]	; (800a0d8 <USBD_AUDIO_Init+0x138>)
 800a0be:	7819      	ldrb	r1, [r3, #0]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	1d1a      	adds	r2, r3, #4
 800a0c4:	2360      	movs	r3, #96	; 0x60
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f005 fdd2 	bl	800fc70 <USBD_LL_PrepareReceive>
	AUDIO_OUT_PACKET);

	return (uint8_t) USBD_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
 800a0d6:	bf00      	nop
 800a0d8:	200000c6 	.word	0x200000c6

0800a0dc <USBD_AUDIO_DeInit>:
 *         DeInitialize the AUDIO layer
 * @param  pdev: device instance
 * @param  cfgidx: Configuration index
 * @retval status
 */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx) {
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

	/* Open EP OUT */
	(void) USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 800a0e8:	4b28      	ldr	r3, [pc, #160]	; (800a18c <USBD_AUDIO_DeInit+0xb0>)
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	4619      	mov	r1, r3
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f005 fc82 	bl	800f9f8 <USBD_LL_CloseEP>
	pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 800a0f4:	4b25      	ldr	r3, [pc, #148]	; (800a18c <USBD_AUDIO_DeInit+0xb0>)
 800a0f6:	781b      	ldrb	r3, [r3, #0]
 800a0f8:	f003 020f 	and.w	r2, r3, #15
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	440b      	add	r3, r1
 800a108:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a10c:	2200      	movs	r2, #0
 800a10e:	801a      	strh	r2, [r3, #0]
	pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 800a110:	4b1e      	ldr	r3, [pc, #120]	; (800a18c <USBD_AUDIO_DeInit+0xb0>)
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	f003 020f 	and.w	r2, r3, #15
 800a118:	6879      	ldr	r1, [r7, #4]
 800a11a:	4613      	mov	r3, r2
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4413      	add	r3, r2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	440b      	add	r3, r1
 800a124:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800a128:	2200      	movs	r2, #0
 800a12a:	801a      	strh	r2, [r3, #0]

	/* DeInit  physical Interface components */
	if (pdev->pClassDataCmsit[pdev->classId] != NULL) {
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	32b0      	adds	r2, #176	; 0xb0
 800a136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d020      	beq.n	800a180 <USBD_AUDIO_DeInit+0xa4>
		((USBD_AUDIO_ItfTypeDef*) pdev->pUserData[pdev->classId])->DeInit(0U);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	33b0      	adds	r3, #176	; 0xb0
 800a148:	009b      	lsls	r3, r3, #2
 800a14a:	4413      	add	r3, r2
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	685b      	ldr	r3, [r3, #4]
 800a150:	2000      	movs	r0, #0
 800a152:	4798      	blx	r3
		(void) USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	32b0      	adds	r2, #176	; 0xb0
 800a15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a162:	4618      	mov	r0, r3
 800a164:	f005 fe18 	bl	800fd98 <USBD_static_free>
		pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	32b0      	adds	r2, #176	; 0xb0
 800a172:	2100      	movs	r1, #0
 800a174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pdev->pClassData = NULL;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	}

	return (uint8_t) USBD_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	200000c6 	.word	0x200000c6

0800a190 <USBD_AUDIO_Setup>:
 * @param  pdev: instance
 * @param  req: usb requests
 * @retval status
 */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req) {
 800a190:	b580      	push	{r7, lr}
 800a192:	b086      	sub	sp, #24
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	6039      	str	r1, [r7, #0]
	USBD_AUDIO_HandleTypeDef *haudio;
	uint16_t len;
	uint8_t *pbuf;
	uint16_t status_info = 0U;
 800a19a:	2300      	movs	r3, #0
 800a19c:	813b      	strh	r3, [r7, #8]
	USBD_StatusTypeDef ret = USBD_OK;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	75fb      	strb	r3, [r7, #23]

	haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	32b0      	adds	r2, #176	; 0xb0
 800a1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1b0:	613b      	str	r3, [r7, #16]

	if (haudio == NULL) {
 800a1b2:	693b      	ldr	r3, [r7, #16]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <USBD_AUDIO_Setup+0x2c>
		return (uint8_t) USBD_FAIL;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e0c1      	b.n	800a340 <USBD_AUDIO_Setup+0x1b0>
	}

	switch (req->bmRequest & USB_REQ_TYPE_MASK) {
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d01a      	beq.n	800a1fe <USBD_AUDIO_Setup+0x6e>
 800a1c8:	2b20      	cmp	r3, #32
 800a1ca:	f040 80b1 	bne.w	800a330 <USBD_AUDIO_Setup+0x1a0>
	case USB_REQ_TYPE_CLASS:
		switch (req->bRequest) {
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	785b      	ldrb	r3, [r3, #1]
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d006      	beq.n	800a1e4 <USBD_AUDIO_Setup+0x54>
 800a1d6:	2b81      	cmp	r3, #129	; 0x81
 800a1d8:	d109      	bne.n	800a1ee <USBD_AUDIO_Setup+0x5e>
		case AUDIO_REQ_GET_CUR:
			AUDIO_REQ_GetCurrent(pdev, req);
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f9b3 	bl	800a548 <AUDIO_REQ_GetCurrent>
			break;
 800a1e2:	e00b      	b.n	800a1fc <USBD_AUDIO_Setup+0x6c>

		case AUDIO_REQ_SET_CUR:
			AUDIO_REQ_SetCurrent(pdev, req);
 800a1e4:	6839      	ldr	r1, [r7, #0]
 800a1e6:	6878      	ldr	r0, [r7, #4]
 800a1e8:	f000 f9da 	bl	800a5a0 <AUDIO_REQ_SetCurrent>
			break;
 800a1ec:	e006      	b.n	800a1fc <USBD_AUDIO_Setup+0x6c>

		default:
			USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f001 fc6e 	bl	800bad2 <USBD_CtlError>
			ret = USBD_FAIL;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	75fb      	strb	r3, [r7, #23]
			break;
 800a1fa:	bf00      	nop
		}
		break;
 800a1fc:	e09f      	b.n	800a33e <USBD_AUDIO_Setup+0x1ae>

	case USB_REQ_TYPE_STANDARD:
		switch (req->bRequest) {
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	785b      	ldrb	r3, [r3, #1]
 800a202:	2b0b      	cmp	r3, #11
 800a204:	f200 8089 	bhi.w	800a31a <USBD_AUDIO_Setup+0x18a>
 800a208:	a201      	add	r2, pc, #4	; (adr r2, 800a210 <USBD_AUDIO_Setup+0x80>)
 800a20a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20e:	bf00      	nop
 800a210:	0800a241 	.word	0x0800a241
 800a214:	0800a329 	.word	0x0800a329
 800a218:	0800a31b 	.word	0x0800a31b
 800a21c:	0800a31b 	.word	0x0800a31b
 800a220:	0800a31b 	.word	0x0800a31b
 800a224:	0800a31b 	.word	0x0800a31b
 800a228:	0800a26b 	.word	0x0800a26b
 800a22c:	0800a31b 	.word	0x0800a31b
 800a230:	0800a31b 	.word	0x0800a31b
 800a234:	0800a31b 	.word	0x0800a31b
 800a238:	0800a2b3 	.word	0x0800a2b3
 800a23c:	0800a2db 	.word	0x0800a2db
		case USB_REQ_GET_STATUS:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a246:	b2db      	uxtb	r3, r3
 800a248:	2b03      	cmp	r3, #3
 800a24a:	d107      	bne.n	800a25c <USBD_AUDIO_Setup+0xcc>
				(void) USBD_CtlSendData(pdev, (uint8_t*) &status_info, 2U);
 800a24c:	f107 0308 	add.w	r3, r7, #8
 800a250:	2202      	movs	r2, #2
 800a252:	4619      	mov	r1, r3
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f001 fcad 	bl	800bbb4 <USBD_CtlSendData>
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 800a25a:	e068      	b.n	800a32e <USBD_AUDIO_Setup+0x19e>
				USBD_CtlError(pdev, req);
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f001 fc37 	bl	800bad2 <USBD_CtlError>
				ret = USBD_FAIL;
 800a264:	2303      	movs	r3, #3
 800a266:	75fb      	strb	r3, [r7, #23]
			break;
 800a268:	e061      	b.n	800a32e <USBD_AUDIO_Setup+0x19e>

		case USB_REQ_GET_DESCRIPTOR:
			if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE) {
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	885b      	ldrh	r3, [r3, #2]
 800a26e:	0a1b      	lsrs	r3, r3, #8
 800a270:	b29b      	uxth	r3, r3
 800a272:	2b21      	cmp	r3, #33	; 0x21
 800a274:	d15a      	bne.n	800a32c <USBD_AUDIO_Setup+0x19c>
				pbuf = (uint8_t*) USBD_AUDIO_GetAudioHeaderDesc(
						pdev->pConfDesc);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
				pbuf = (uint8_t*) USBD_AUDIO_GetAudioHeaderDesc(
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 f9fd 	bl	800a67c <USBD_AUDIO_GetAudioHeaderDesc>
 800a282:	60f8      	str	r0, [r7, #12]
				if (pbuf != NULL) {
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b00      	cmp	r3, #0
 800a288:	d00c      	beq.n	800a2a4 <USBD_AUDIO_Setup+0x114>
					len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 800a28a:	683b      	ldr	r3, [r7, #0]
 800a28c:	88db      	ldrh	r3, [r3, #6]
 800a28e:	2b09      	cmp	r3, #9
 800a290:	bf28      	it	cs
 800a292:	2309      	movcs	r3, #9
 800a294:	817b      	strh	r3, [r7, #10]
					(void) USBD_CtlSendData(pdev, pbuf, len);
 800a296:	897b      	ldrh	r3, [r7, #10]
 800a298:	461a      	mov	r2, r3
 800a29a:	68f9      	ldr	r1, [r7, #12]
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	f001 fc89 	bl	800bbb4 <USBD_CtlSendData>
				} else {
					USBD_CtlError(pdev, req);
					ret = USBD_FAIL;
				}
			}
			break;
 800a2a2:	e043      	b.n	800a32c <USBD_AUDIO_Setup+0x19c>
					USBD_CtlError(pdev, req);
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f001 fc13 	bl	800bad2 <USBD_CtlError>
					ret = USBD_FAIL;
 800a2ac:	2303      	movs	r3, #3
 800a2ae:	75fb      	strb	r3, [r7, #23]
			break;
 800a2b0:	e03c      	b.n	800a32c <USBD_AUDIO_Setup+0x19c>

		case USB_REQ_GET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b03      	cmp	r3, #3
 800a2bc:	d106      	bne.n	800a2cc <USBD_AUDIO_Setup+0x13c>
				(void) USBD_CtlSendData(pdev, (uint8_t*) &haudio->alt_setting,
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	4619      	mov	r1, r3
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f001 fc75 	bl	800bbb4 <USBD_CtlSendData>
						1U);
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 800a2ca:	e030      	b.n	800a32e <USBD_AUDIO_Setup+0x19e>
				USBD_CtlError(pdev, req);
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f001 fbff 	bl	800bad2 <USBD_CtlError>
				ret = USBD_FAIL;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	75fb      	strb	r3, [r7, #23]
			break;
 800a2d8:	e029      	b.n	800a32e <USBD_AUDIO_Setup+0x19e>

		case USB_REQ_SET_INTERFACE:
			if (pdev->dev_state == USBD_STATE_CONFIGURED) {
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	2b03      	cmp	r3, #3
 800a2e4:	d112      	bne.n	800a30c <USBD_AUDIO_Setup+0x17c>
				if ((uint8_t) (req->wValue) <= USBD_MAX_NUM_INTERFACES) {
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	885b      	ldrh	r3, [r3, #2]
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d806      	bhi.n	800a2fe <USBD_AUDIO_Setup+0x16e>
					haudio->alt_setting = (uint8_t) (req->wValue);
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	885b      	ldrh	r3, [r3, #2]
 800a2f4:	b2db      	uxtb	r3, r3
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	601a      	str	r2, [r3, #0]
				}
			} else {
				USBD_CtlError(pdev, req);
				ret = USBD_FAIL;
			}
			break;
 800a2fc:	e017      	b.n	800a32e <USBD_AUDIO_Setup+0x19e>
					USBD_CtlError(pdev, req);
 800a2fe:	6839      	ldr	r1, [r7, #0]
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f001 fbe6 	bl	800bad2 <USBD_CtlError>
					ret = USBD_FAIL;
 800a306:	2303      	movs	r3, #3
 800a308:	75fb      	strb	r3, [r7, #23]
			break;
 800a30a:	e010      	b.n	800a32e <USBD_AUDIO_Setup+0x19e>
				USBD_CtlError(pdev, req);
 800a30c:	6839      	ldr	r1, [r7, #0]
 800a30e:	6878      	ldr	r0, [r7, #4]
 800a310:	f001 fbdf 	bl	800bad2 <USBD_CtlError>
				ret = USBD_FAIL;
 800a314:	2303      	movs	r3, #3
 800a316:	75fb      	strb	r3, [r7, #23]
			break;
 800a318:	e009      	b.n	800a32e <USBD_AUDIO_Setup+0x19e>

		case USB_REQ_CLEAR_FEATURE:
			break;

		default:
			USBD_CtlError(pdev, req);
 800a31a:	6839      	ldr	r1, [r7, #0]
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f001 fbd8 	bl	800bad2 <USBD_CtlError>
			ret = USBD_FAIL;
 800a322:	2303      	movs	r3, #3
 800a324:	75fb      	strb	r3, [r7, #23]
			break;
 800a326:	e002      	b.n	800a32e <USBD_AUDIO_Setup+0x19e>
			break;
 800a328:	bf00      	nop
 800a32a:	e008      	b.n	800a33e <USBD_AUDIO_Setup+0x1ae>
			break;
 800a32c:	bf00      	nop
		}
		break;
 800a32e:	e006      	b.n	800a33e <USBD_AUDIO_Setup+0x1ae>
	default:
		USBD_CtlError(pdev, req);
 800a330:	6839      	ldr	r1, [r7, #0]
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f001 fbcd 	bl	800bad2 <USBD_CtlError>
		ret = USBD_FAIL;
 800a338:	2303      	movs	r3, #3
 800a33a:	75fb      	strb	r3, [r7, #23]
		break;
 800a33c:	bf00      	nop
	}

	return (uint8_t) ret;
 800a33e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a340:	4618      	mov	r0, r3
 800a342:	3718      	adds	r7, #24
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <USBD_AUDIO_GetCfgDesc>:
 * @brief  USBD_AUDIO_GetCfgDesc
 *         return configuration descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_AUDIO_GetCfgDesc(uint16_t *length) {
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
	*length = (uint16_t) sizeof(USBD_AUDIO_CfgDesc);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	226d      	movs	r2, #109	; 0x6d
 800a354:	801a      	strh	r2, [r3, #0]

	return USBD_AUDIO_CfgDesc;
 800a356:	4b03      	ldr	r3, [pc, #12]	; (800a364 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 800a358:	4618      	mov	r0, r3
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr
 800a364:	2000004c 	.word	0x2000004c

0800a368 <USBD_AUDIO_DataIn>:
 *         handle data IN Stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	460b      	mov	r3, r1
 800a372:	70fb      	strb	r3, [r7, #3]
	UNUSED(pdev);
	UNUSED(epnum);

	/* Only OUT data are processed */
	return (uint8_t) USBD_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr

0800a382 <USBD_AUDIO_EP0_RxReady>:
 * @brief  USBD_AUDIO_EP0_RxReady
 *         handle EP0 Rx Ready event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev) {
 800a382:	b580      	push	{r7, lr}
 800a384:	b084      	sub	sp, #16
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
	USBD_AUDIO_HandleTypeDef *haudio;
	haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	32b0      	adds	r2, #176	; 0xb0
 800a394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a398:	60fb      	str	r3, [r7, #12]

	if (haudio == NULL) {
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d101      	bne.n	800a3a4 <USBD_AUDIO_EP0_RxReady+0x22>
		return (uint8_t) USBD_FAIL;
 800a3a0:	2303      	movs	r3, #3
 800a3a2:	e02a      	b.n	800a3fa <USBD_AUDIO_EP0_RxReady+0x78>
	}

	if (haudio->control.cmd == AUDIO_REQ_SET_CUR) {
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3aa:	f893 3e0a 	ldrb.w	r3, [r3, #3594]	; 0xe0a
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d122      	bne.n	800a3f8 <USBD_AUDIO_EP0_RxReady+0x76>
		/* In this driver, to simplify code, only SET_CUR request is managed */

		if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL) {
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b8:	f893 3e4c 	ldrb.w	r3, [r3, #3660]	; 0xe4c
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d11b      	bne.n	800a3f8 <USBD_AUDIO_EP0_RxReady+0x76>
			((USBD_AUDIO_ItfTypeDef*) pdev->pUserData[pdev->classId])->MuteCtl(
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3c6:	687a      	ldr	r2, [r7, #4]
 800a3c8:	33b0      	adds	r3, #176	; 0xb0
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	68fa      	ldr	r2, [r7, #12]
 800a3d4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3d8:	f892 2e0b 	ldrb.w	r2, [r2, #3595]	; 0xe0b
 800a3dc:	4610      	mov	r0, r2
 800a3de:	4798      	blx	r3
					haudio->control.data[0]);
			haudio->control.cmd = 0U;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f883 2e0a 	strb.w	r2, [r3, #3594]	; 0xe0a
			haudio->control.len = 0U;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f883 2e4b 	strb.w	r2, [r3, #3659]	; 0xe4b
		}
	}

	return (uint8_t) USBD_OK;
 800a3f8:	2300      	movs	r3, #0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3710      	adds	r7, #16
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <USBD_AUDIO_EP0_TxReady>:
 * @brief  USBD_AUDIO_EP0_TxReady
 *         handle EP0 TRx Ready event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev) {
 800a402:	b480      	push	{r7}
 800a404:	b083      	sub	sp, #12
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
	UNUSED(pdev);

	/* Only OUT control data are processed */
	return (uint8_t) USBD_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr

0800a418 <USBD_AUDIO_SOF>:
 * @brief  USBD_AUDIO_SOF
 *         handle SOF event
 * @param  pdev: device instance
 * @retval status
 */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev) {
 800a418:	b480      	push	{r7}
 800a41a:	b083      	sub	sp, #12
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
	UNUSED(pdev);

	return (uint8_t) USBD_OK;
 800a420:	2300      	movs	r3, #0
}
 800a422:	4618      	mov	r0, r3
 800a424:	370c      	adds	r7, #12
 800a426:	46bd      	mov	sp, r7
 800a428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42c:	4770      	bx	lr

0800a42e <USBD_AUDIO_IsoINIncomplete>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev,
		uint8_t epnum) {
 800a42e:	b480      	push	{r7}
 800a430:	b083      	sub	sp, #12
 800a432:	af00      	add	r7, sp, #0
 800a434:	6078      	str	r0, [r7, #4]
 800a436:	460b      	mov	r3, r1
 800a438:	70fb      	strb	r3, [r7, #3]
	UNUSED(pdev);
	UNUSED(epnum);

	return (uint8_t) USBD_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <USBD_AUDIO_IsoOutIncomplete>:
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev,
		uint8_t epnum) {
 800a448:	b480      	push	{r7}
 800a44a:	b083      	sub	sp, #12
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
 800a450:	460b      	mov	r3, r1
 800a452:	70fb      	strb	r3, [r7, #3]
	UNUSED(pdev);
	UNUSED(epnum);

	return (uint8_t) USBD_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	370c      	adds	r7, #12
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
	...

0800a464 <USBD_AUDIO_DataOut>:
 *         handle data OUT Stage
 * @param  pdev: device instance
 * @param  epnum: endpoint index
 * @retval status
 */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum) {
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	460b      	mov	r3, r1
 800a46e:	70fb      	strb	r3, [r7, #3]
	USBD_AUDIO_HandleTypeDef *haudio;
	haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassData;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a476:	60bb      	str	r3, [r7, #8]
	int i;
	if (epnum == AUDIO_OUT_EP) {
 800a478:	78fb      	ldrb	r3, [r7, #3]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d157      	bne.n	800a52e <USBD_AUDIO_DataOut+0xca>
		audiobuf = (int16_t*) &haudio->buffer[haudio->wr_ptr];
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a484:	f8b3 3e08 	ldrh.w	r3, [r3, #3592]	; 0xe08
 800a488:	461a      	mov	r2, r3
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	4413      	add	r3, r2
 800a48e:	3304      	adds	r3, #4
 800a490:	4a29      	ldr	r2, [pc, #164]	; (800a538 <USBD_AUDIO_DataOut+0xd4>)
 800a492:	6013      	str	r3, [r2, #0]
		for (i = 0; i < 24; i++)
 800a494:	2300      	movs	r3, #0
 800a496:	60fb      	str	r3, [r7, #12]
 800a498:	e015      	b.n	800a4c6 <USBD_AUDIO_DataOut+0x62>
			mibuf[jj][i] = audiobuf[i];
 800a49a:	4b27      	ldr	r3, [pc, #156]	; (800a538 <USBD_AUDIO_DataOut+0xd4>)
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	005b      	lsls	r3, r3, #1
 800a4a2:	4413      	add	r3, r2
 800a4a4:	4a25      	ldr	r2, [pc, #148]	; (800a53c <USBD_AUDIO_DataOut+0xd8>)
 800a4a6:	7812      	ldrb	r2, [r2, #0]
 800a4a8:	f9b3 0000 	ldrsh.w	r0, [r3]
 800a4ac:	4924      	ldr	r1, [pc, #144]	; (800a540 <USBD_AUDIO_DataOut+0xdc>)
 800a4ae:	4613      	mov	r3, r2
 800a4b0:	005b      	lsls	r3, r3, #1
 800a4b2:	4413      	add	r3, r2
 800a4b4:	00db      	lsls	r3, r3, #3
 800a4b6:	68fa      	ldr	r2, [r7, #12]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (i = 0; i < 24; i++)
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	3301      	adds	r3, #1
 800a4c4:	60fb      	str	r3, [r7, #12]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2b17      	cmp	r3, #23
 800a4ca:	dde6      	ble.n	800a49a <USBD_AUDIO_DataOut+0x36>
		jj++;
 800a4cc:	4b1b      	ldr	r3, [pc, #108]	; (800a53c <USBD_AUDIO_DataOut+0xd8>)
 800a4ce:	781b      	ldrb	r3, [r3, #0]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	b2da      	uxtb	r2, r3
 800a4d4:	4b19      	ldr	r3, [pc, #100]	; (800a53c <USBD_AUDIO_DataOut+0xd8>)
 800a4d6:	701a      	strb	r2, [r3, #0]
		disponible = 1;
 800a4d8:	4b1a      	ldr	r3, [pc, #104]	; (800a544 <USBD_AUDIO_DataOut+0xe0>)
 800a4da:	2201      	movs	r2, #1
 800a4dc:	701a      	strb	r2, [r3, #0]
		/* Increment the Buffer pointer or roll it back when all buffers are full */
		haudio->wr_ptr += AUDIO_OUT_PACKET;
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4e4:	f8b3 3e08 	ldrh.w	r3, [r3, #3592]	; 0xe08
 800a4e8:	3360      	adds	r3, #96	; 0x60
 800a4ea:	b29a      	uxth	r2, r3
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4f2:	f8a3 2e08 	strh.w	r2, [r3, #3592]	; 0xe08
		if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE) {
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4fc:	f8b3 3e08 	ldrh.w	r3, [r3, #3592]	; 0xe08
 800a500:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 800a504:	d105      	bne.n	800a512 <USBD_AUDIO_DataOut+0xae>
			/* All buffers are full: roll back */
			haudio->wr_ptr = 0U;
 800a506:	68bb      	ldr	r3, [r7, #8]
 800a508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a50c:	2200      	movs	r2, #0
 800a50e:	f8a3 2e08 	strh.w	r2, [r3, #3592]	; 0xe08
		}
		/* Prepare Out endpoint to receive next audio packet */
		USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
				&haudio->buffer[haudio->wr_ptr],
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a518:	f8b3 3e08 	ldrh.w	r3, [r3, #3592]	; 0xe08
 800a51c:	461a      	mov	r2, r3
		USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	4413      	add	r3, r2
 800a522:	1d1a      	adds	r2, r3, #4
 800a524:	2360      	movs	r3, #96	; 0x60
 800a526:	2101      	movs	r1, #1
 800a528:	6878      	ldr	r0, [r7, #4]
 800a52a:	f005 fba1 	bl	800fc70 <USBD_LL_PrepareReceive>
				AUDIO_OUT_PACKET);
	}
	return USBD_OK;
 800a52e:	2300      	movs	r3, #0
}
 800a530:	4618      	mov	r0, r3
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}
 800a538:	20000b7c 	.word	0x20000b7c
 800a53c:	20003b80 	.word	0x20003b80
 800a540:	20000b80 	.word	0x20000b80
 800a544:	20000b78 	.word	0x20000b78

0800a548 <AUDIO_REQ_GetCurrent>:
 * @param  pdev: device instance
 * @param  req: setup class request
 * @retval status
 */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req) {
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
	USBD_AUDIO_HandleTypeDef *haudio;
	haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	32b0      	adds	r2, #176	; 0xb0
 800a55c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a560:	60fb      	str	r3, [r7, #12]

	if (haudio == NULL) {
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d017      	beq.n	800a598 <AUDIO_REQ_GetCurrent+0x50>
		return;
	}

	(void) USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800a56e:	330b      	adds	r3, #11
 800a570:	2240      	movs	r2, #64	; 0x40
 800a572:	2100      	movs	r1, #0
 800a574:	4618      	mov	r0, r3
 800a576:	f005 fd32 	bl	800ffde <memset>

	/* Send the current mute state */
	(void) USBD_CtlSendData(pdev, haudio->control.data,
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800a580:	330b      	adds	r3, #11
			MIN(req->wLength, USB_MAX_EP0_SIZE));
 800a582:	683a      	ldr	r2, [r7, #0]
 800a584:	88d2      	ldrh	r2, [r2, #6]
 800a586:	2a40      	cmp	r2, #64	; 0x40
 800a588:	bf28      	it	cs
 800a58a:	2240      	movcs	r2, #64	; 0x40
 800a58c:	b292      	uxth	r2, r2
	(void) USBD_CtlSendData(pdev, haudio->control.data,
 800a58e:	4619      	mov	r1, r3
 800a590:	6878      	ldr	r0, [r7, #4]
 800a592:	f001 fb0f 	bl	800bbb4 <USBD_CtlSendData>
 800a596:	e000      	b.n	800a59a <AUDIO_REQ_GetCurrent+0x52>
		return;
 800a598:	bf00      	nop
}
 800a59a:	3710      	adds	r7, #16
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <AUDIO_REQ_SetCurrent>:
 * @param  pdev: device instance
 * @param  req: setup class request
 * @retval status
 */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev,
		USBD_SetupReqTypedef *req) {
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	6039      	str	r1, [r7, #0]
	USBD_AUDIO_HandleTypeDef *haudio;
	haudio = (USBD_AUDIO_HandleTypeDef*) pdev->pClassDataCmsit[pdev->classId];
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	32b0      	adds	r2, #176	; 0xb0
 800a5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b8:	60fb      	str	r3, [r7, #12]

	if (haudio == NULL) {
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d02f      	beq.n	800a620 <AUDIO_REQ_SetCurrent+0x80>
		return;
	}

	if (req->wLength != 0U) {
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	88db      	ldrh	r3, [r3, #6]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d02c      	beq.n	800a622 <AUDIO_REQ_SetCurrent+0x82>
		haudio->control.cmd = AUDIO_REQ_SET_CUR; /* Set the request value */
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ce:	2201      	movs	r2, #1
 800a5d0:	f883 2e0a 	strb.w	r2, [r3, #3594]	; 0xe0a
		haudio->control.len = (uint8_t) MIN(req->wLength, USB_MAX_EP0_SIZE); /* Set the request data length */
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	88db      	ldrh	r3, [r3, #6]
 800a5d8:	2b3f      	cmp	r3, #63	; 0x3f
 800a5da:	d803      	bhi.n	800a5e4 <AUDIO_REQ_SetCurrent+0x44>
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	88db      	ldrh	r3, [r3, #6]
 800a5e0:	b2da      	uxtb	r2, r3
 800a5e2:	e000      	b.n	800a5e6 <AUDIO_REQ_SetCurrent+0x46>
 800a5e4:	2240      	movs	r2, #64	; 0x40
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5ec:	f883 2e4b 	strb.w	r2, [r3, #3659]	; 0xe4b
		haudio->control.unit = HIBYTE(req->wIndex); /* Set the request target unit */
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	889b      	ldrh	r3, [r3, #4]
 800a5f4:	0a1b      	lsrs	r3, r3, #8
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	b2da      	uxtb	r2, r3
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a600:	f883 2e4c 	strb.w	r2, [r3, #3660]	; 0xe4c

		/* Prepare the reception of the buffer over EP0 */
		(void) USBD_CtlPrepareRx(pdev, haudio->control.data,
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f503 53f0 	add.w	r3, r3, #7680	; 0x1e00
 800a60a:	330b      	adds	r3, #11
				haudio->control.len);
 800a60c:	68fa      	ldr	r2, [r7, #12]
 800a60e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a612:	f892 2e4b 	ldrb.w	r2, [r2, #3659]	; 0xe4b
		(void) USBD_CtlPrepareRx(pdev, haudio->control.data,
 800a616:	4619      	mov	r1, r3
 800a618:	6878      	ldr	r0, [r7, #4]
 800a61a:	f001 faf7 	bl	800bc0c <USBD_CtlPrepareRx>
 800a61e:	e000      	b.n	800a622 <AUDIO_REQ_SetCurrent+0x82>
		return;
 800a620:	bf00      	nop
	}
}
 800a622:	3710      	adds	r7, #16
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBD_AUDIO_GetDeviceQualifierDesc>:
 * @brief  DeviceQualifierDescriptor
 *         return Device Qualifier descriptor
 * @param  length : pointer data length
 * @retval pointer to descriptor buffer
 */
static uint8_t* USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length) {
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
	*length = (uint16_t) sizeof(USBD_AUDIO_DeviceQualifierDesc);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	220a      	movs	r2, #10
 800a634:	801a      	strh	r2, [r3, #0]

	return USBD_AUDIO_DeviceQualifierDesc;
 800a636:	4b03      	ldr	r3, [pc, #12]	; (800a644 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800a638:	4618      	mov	r0, r3
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr
 800a644:	200000bc 	.word	0x200000bc

0800a648 <USBD_AUDIO_RegisterInterface>:
 * @param  pdev: device instance
 * @param  fops: Audio interface callback
 * @retval status
 */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
		USBD_AUDIO_ItfTypeDef *fops) {
 800a648:	b480      	push	{r7}
 800a64a:	b083      	sub	sp, #12
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
 800a650:	6039      	str	r1, [r7, #0]
	if (fops == NULL) {
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d101      	bne.n	800a65c <USBD_AUDIO_RegisterInterface+0x14>
		return (uint8_t) USBD_FAIL;
 800a658:	2303      	movs	r3, #3
 800a65a:	e009      	b.n	800a670 <USBD_AUDIO_RegisterInterface+0x28>
	}

	pdev->pUserData[pdev->classId] = fops;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	33b0      	adds	r3, #176	; 0xb0
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	4413      	add	r3, r2
 800a66a:	683a      	ldr	r2, [r7, #0]
 800a66c:	605a      	str	r2, [r3, #4]

	return (uint8_t) USBD_OK;
 800a66e:	2300      	movs	r3, #0
}
 800a670:	4618      	mov	r0, r3
 800a672:	370c      	adds	r7, #12
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <USBD_AUDIO_GetAudioHeaderDesc>:
 *         This function return the Audio descriptor
 * @param  pdev: device instance
 * @param  pConfDesc:  pointer to Bos descriptor
 * @retval pointer to the Audio AC Header descriptor
 */
static void* USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc) {
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b086      	sub	sp, #24
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
	USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef*) (void*) pConfDesc;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	60fb      	str	r3, [r7, #12]
	USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef*) (void*) pConfDesc;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	617b      	str	r3, [r7, #20]
	uint8_t *pAudioDesc = NULL;
 800a68c:	2300      	movs	r3, #0
 800a68e:	613b      	str	r3, [r7, #16]
	uint16_t ptr;

	if (desc->wTotalLength > desc->bLength) {
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	885b      	ldrh	r3, [r3, #2]
 800a694:	b29a      	uxth	r2, r3
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d91c      	bls.n	800a6da <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
		ptr = desc->bLength;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	817b      	strh	r3, [r7, #10]

		while (ptr < desc->wTotalLength) {
 800a6a8:	e011      	b.n	800a6ce <USBD_AUDIO_GetAudioHeaderDesc+0x52>
			pdesc = USBD_GetNextDesc((uint8_t*) pdesc, &ptr);
 800a6aa:	f107 030a 	add.w	r3, r7, #10
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	6978      	ldr	r0, [r7, #20]
 800a6b2:	f000 fbe6 	bl	800ae82 <USBD_GetNextDesc>
 800a6b6:	6178      	str	r0, [r7, #20]
			if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE)
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	785b      	ldrb	r3, [r3, #1]
 800a6bc:	2b24      	cmp	r3, #36	; 0x24
 800a6be:	d106      	bne.n	800a6ce <USBD_AUDIO_GetAudioHeaderDesc+0x52>
					&& (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER)) {
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	789b      	ldrb	r3, [r3, #2]
 800a6c4:	2b01      	cmp	r3, #1
 800a6c6:	d102      	bne.n	800a6ce <USBD_AUDIO_GetAudioHeaderDesc+0x52>
				pAudioDesc = (uint8_t*) pdesc;
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	613b      	str	r3, [r7, #16]
				break;
 800a6cc:	e005      	b.n	800a6da <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
		while (ptr < desc->wTotalLength) {
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	885b      	ldrh	r3, [r3, #2]
 800a6d2:	b29a      	uxth	r2, r3
 800a6d4:	897b      	ldrh	r3, [r7, #10]
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d8e7      	bhi.n	800a6aa <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
			}
		}
	}
	return pAudioDesc;
 800a6da:	693b      	ldr	r3, [r7, #16]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3718      	adds	r7, #24
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d101      	bne.n	800a6fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	e01f      	b.n	800a73c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2200      	movs	r2, #0
 800a700:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	2200      	movs	r2, #0
 800a708:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2200      	movs	r2, #0
 800a710:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d003      	beq.n	800a722 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	68ba      	ldr	r2, [r7, #8]
 800a71e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2201      	movs	r2, #1
 800a726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	79fa      	ldrb	r2, [r7, #7]
 800a72e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	f005 f8a5 	bl	800f880 <USBD_LL_Init>
 800a736:	4603      	mov	r3, r0
 800a738:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a74e:	2300      	movs	r3, #0
 800a750:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d101      	bne.n	800a75c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a758:	2303      	movs	r3, #3
 800a75a:	e025      	b.n	800a7a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	32ae      	adds	r2, #174	; 0xae
 800a76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a774:	2b00      	cmp	r3, #0
 800a776:	d00f      	beq.n	800a798 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	32ae      	adds	r2, #174	; 0xae
 800a782:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a788:	f107 020e 	add.w	r2, r7, #14
 800a78c:	4610      	mov	r0, r2
 800a78e:	4798      	blx	r3
 800a790:	4602      	mov	r2, r0
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a79e:	1c5a      	adds	r2, r3, #1
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}

0800a7b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a7b8:	6878      	ldr	r0, [r7, #4]
 800a7ba:	f005 f8ad 	bl	800f918 <USBD_LL_Start>
 800a7be:	4603      	mov	r3, r0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a7d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	370c      	adds	r7, #12
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a7de:	b580      	push	{r7, lr}
 800a7e0:	b084      	sub	sp, #16
 800a7e2:	af00      	add	r7, sp, #0
 800a7e4:	6078      	str	r0, [r7, #4]
 800a7e6:	460b      	mov	r3, r1
 800a7e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d009      	beq.n	800a80c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	78fa      	ldrb	r2, [r7, #3]
 800a802:	4611      	mov	r1, r2
 800a804:	6878      	ldr	r0, [r7, #4]
 800a806:	4798      	blx	r3
 800a808:	4603      	mov	r3, r0
 800a80a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3710      	adds	r7, #16
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b084      	sub	sp, #16
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	460b      	mov	r3, r1
 800a820:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	78fa      	ldrb	r2, [r7, #3]
 800a830:	4611      	mov	r1, r2
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	4798      	blx	r3
 800a836:	4603      	mov	r3, r0
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d001      	beq.n	800a840 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a83c:	2303      	movs	r3, #3
 800a83e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a840:	7bfb      	ldrb	r3, [r7, #15]
}
 800a842:	4618      	mov	r0, r3
 800a844:	3710      	adds	r7, #16
 800a846:	46bd      	mov	sp, r7
 800a848:	bd80      	pop	{r7, pc}

0800a84a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a84a:	b580      	push	{r7, lr}
 800a84c:	b084      	sub	sp, #16
 800a84e:	af00      	add	r7, sp, #0
 800a850:	6078      	str	r0, [r7, #4]
 800a852:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a85a:	6839      	ldr	r1, [r7, #0]
 800a85c:	4618      	mov	r0, r3
 800a85e:	f001 f8fe 	bl	800ba5e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2201      	movs	r2, #1
 800a866:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a870:	461a      	mov	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a87e:	f003 031f 	and.w	r3, r3, #31
 800a882:	2b02      	cmp	r3, #2
 800a884:	d01a      	beq.n	800a8bc <USBD_LL_SetupStage+0x72>
 800a886:	2b02      	cmp	r3, #2
 800a888:	d822      	bhi.n	800a8d0 <USBD_LL_SetupStage+0x86>
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d002      	beq.n	800a894 <USBD_LL_SetupStage+0x4a>
 800a88e:	2b01      	cmp	r3, #1
 800a890:	d00a      	beq.n	800a8a8 <USBD_LL_SetupStage+0x5e>
 800a892:	e01d      	b.n	800a8d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a89a:	4619      	mov	r1, r3
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 fb2b 	bl	800aef8 <USBD_StdDevReq>
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8a6:	e020      	b.n	800a8ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	f000 fb93 	bl	800afdc <USBD_StdItfReq>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ba:	e016      	b.n	800a8ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	6878      	ldr	r0, [r7, #4]
 800a8c6:	f000 fbf5 	bl	800b0b4 <USBD_StdEPReq>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	73fb      	strb	r3, [r7, #15]
      break;
 800a8ce:	e00c      	b.n	800a8ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a8d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	4619      	mov	r1, r3
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	f005 f8c0 	bl	800fa64 <USBD_LL_StallEP>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	73fb      	strb	r3, [r7, #15]
      break;
 800a8e8:	bf00      	nop
  }

  return ret;
 800a8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3710      	adds	r7, #16
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b086      	sub	sp, #24
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	607a      	str	r2, [r7, #4]
 800a900:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a906:	7afb      	ldrb	r3, [r7, #11]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d16e      	bne.n	800a9ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a912:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a91a:	2b03      	cmp	r3, #3
 800a91c:	f040 8098 	bne.w	800aa50 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	689a      	ldr	r2, [r3, #8]
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	68db      	ldr	r3, [r3, #12]
 800a928:	429a      	cmp	r2, r3
 800a92a:	d913      	bls.n	800a954 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	689a      	ldr	r2, [r3, #8]
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	68db      	ldr	r3, [r3, #12]
 800a934:	1ad2      	subs	r2, r2, r3
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	68da      	ldr	r2, [r3, #12]
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	4293      	cmp	r3, r2
 800a944:	bf28      	it	cs
 800a946:	4613      	movcs	r3, r2
 800a948:	461a      	mov	r2, r3
 800a94a:	6879      	ldr	r1, [r7, #4]
 800a94c:	68f8      	ldr	r0, [r7, #12]
 800a94e:	f001 f97a 	bl	800bc46 <USBD_CtlContinueRx>
 800a952:	e07d      	b.n	800aa50 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a95a:	f003 031f 	and.w	r3, r3, #31
 800a95e:	2b02      	cmp	r3, #2
 800a960:	d014      	beq.n	800a98c <USBD_LL_DataOutStage+0x98>
 800a962:	2b02      	cmp	r3, #2
 800a964:	d81d      	bhi.n	800a9a2 <USBD_LL_DataOutStage+0xae>
 800a966:	2b00      	cmp	r3, #0
 800a968:	d002      	beq.n	800a970 <USBD_LL_DataOutStage+0x7c>
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d003      	beq.n	800a976 <USBD_LL_DataOutStage+0x82>
 800a96e:	e018      	b.n	800a9a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a970:	2300      	movs	r3, #0
 800a972:	75bb      	strb	r3, [r7, #22]
            break;
 800a974:	e018      	b.n	800a9a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	4619      	mov	r1, r3
 800a980:	68f8      	ldr	r0, [r7, #12]
 800a982:	f000 fa64 	bl	800ae4e <USBD_CoreFindIF>
 800a986:	4603      	mov	r3, r0
 800a988:	75bb      	strb	r3, [r7, #22]
            break;
 800a98a:	e00d      	b.n	800a9a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a992:	b2db      	uxtb	r3, r3
 800a994:	4619      	mov	r1, r3
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f000 fa66 	bl	800ae68 <USBD_CoreFindEP>
 800a99c:	4603      	mov	r3, r0
 800a99e:	75bb      	strb	r3, [r7, #22]
            break;
 800a9a0:	e002      	b.n	800a9a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	75bb      	strb	r3, [r7, #22]
            break;
 800a9a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a9a8:	7dbb      	ldrb	r3, [r7, #22]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d119      	bne.n	800a9e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9b4:	b2db      	uxtb	r3, r3
 800a9b6:	2b03      	cmp	r3, #3
 800a9b8:	d113      	bne.n	800a9e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a9ba:	7dba      	ldrb	r2, [r7, #22]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	32ae      	adds	r2, #174	; 0xae
 800a9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00b      	beq.n	800a9e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a9ca:	7dba      	ldrb	r2, [r7, #22]
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a9d2:	7dba      	ldrb	r2, [r7, #22]
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	32ae      	adds	r2, #174	; 0xae
 800a9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	68f8      	ldr	r0, [r7, #12]
 800a9e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a9e2:	68f8      	ldr	r0, [r7, #12]
 800a9e4:	f001 f940 	bl	800bc68 <USBD_CtlSendStatus>
 800a9e8:	e032      	b.n	800aa50 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a9ea:	7afb      	ldrb	r3, [r7, #11]
 800a9ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9f0:	b2db      	uxtb	r3, r3
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f000 fa37 	bl	800ae68 <USBD_CoreFindEP>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a9fe:	7dbb      	ldrb	r3, [r7, #22]
 800aa00:	2bff      	cmp	r3, #255	; 0xff
 800aa02:	d025      	beq.n	800aa50 <USBD_LL_DataOutStage+0x15c>
 800aa04:	7dbb      	ldrb	r3, [r7, #22]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d122      	bne.n	800aa50 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa10:	b2db      	uxtb	r3, r3
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	d117      	bne.n	800aa46 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800aa16:	7dba      	ldrb	r2, [r7, #22]
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	32ae      	adds	r2, #174	; 0xae
 800aa1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa20:	699b      	ldr	r3, [r3, #24]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d00f      	beq.n	800aa46 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800aa26:	7dba      	ldrb	r2, [r7, #22]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800aa2e:	7dba      	ldrb	r2, [r7, #22]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	32ae      	adds	r2, #174	; 0xae
 800aa34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa38:	699b      	ldr	r3, [r3, #24]
 800aa3a:	7afa      	ldrb	r2, [r7, #11]
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	4798      	blx	r3
 800aa42:	4603      	mov	r3, r0
 800aa44:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800aa46:	7dfb      	ldrb	r3, [r7, #23]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d001      	beq.n	800aa50 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800aa4c:	7dfb      	ldrb	r3, [r7, #23]
 800aa4e:	e000      	b.n	800aa52 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800aa50:	2300      	movs	r3, #0
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	3718      	adds	r7, #24
 800aa56:	46bd      	mov	sp, r7
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b086      	sub	sp, #24
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	60f8      	str	r0, [r7, #12]
 800aa62:	460b      	mov	r3, r1
 800aa64:	607a      	str	r2, [r7, #4]
 800aa66:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800aa68:	7afb      	ldrb	r3, [r7, #11]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d16f      	bne.n	800ab4e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	3314      	adds	r3, #20
 800aa72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d15a      	bne.n	800ab34 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	689a      	ldr	r2, [r3, #8]
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	68db      	ldr	r3, [r3, #12]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d914      	bls.n	800aab4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800aa8a:	693b      	ldr	r3, [r7, #16]
 800aa8c:	689a      	ldr	r2, [r3, #8]
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	68db      	ldr	r3, [r3, #12]
 800aa92:	1ad2      	subs	r2, r2, r3
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800aa98:	693b      	ldr	r3, [r7, #16]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	6879      	ldr	r1, [r7, #4]
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f001 f8a2 	bl	800bbea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	2100      	movs	r1, #0
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f005 f8df 	bl	800fc70 <USBD_LL_PrepareReceive>
 800aab2:	e03f      	b.n	800ab34 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aab4:	693b      	ldr	r3, [r7, #16]
 800aab6:	68da      	ldr	r2, [r3, #12]
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d11c      	bne.n	800aafa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	685a      	ldr	r2, [r3, #4]
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aac8:	429a      	cmp	r2, r3
 800aaca:	d316      	bcc.n	800aafa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d20f      	bcs.n	800aafa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aada:	2200      	movs	r2, #0
 800aadc:	2100      	movs	r1, #0
 800aade:	68f8      	ldr	r0, [r7, #12]
 800aae0:	f001 f883 	bl	800bbea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2200      	movs	r2, #0
 800aae8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800aaec:	2300      	movs	r3, #0
 800aaee:	2200      	movs	r2, #0
 800aaf0:	2100      	movs	r1, #0
 800aaf2:	68f8      	ldr	r0, [r7, #12]
 800aaf4:	f005 f8bc 	bl	800fc70 <USBD_LL_PrepareReceive>
 800aaf8:	e01c      	b.n	800ab34 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b03      	cmp	r3, #3
 800ab04:	d10f      	bne.n	800ab26 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab0c:	68db      	ldr	r3, [r3, #12]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d009      	beq.n	800ab26 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab20:	68db      	ldr	r3, [r3, #12]
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab26:	2180      	movs	r1, #128	; 0x80
 800ab28:	68f8      	ldr	r0, [r7, #12]
 800ab2a:	f004 ff9b 	bl	800fa64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f001 f8ad 	bl	800bc8e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d03a      	beq.n	800abb4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ab3e:	68f8      	ldr	r0, [r7, #12]
 800ab40:	f7ff fe42 	bl	800a7c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ab4c:	e032      	b.n	800abb4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ab4e:	7afb      	ldrb	r3, [r7, #11]
 800ab50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	4619      	mov	r1, r3
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	f000 f985 	bl	800ae68 <USBD_CoreFindEP>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
 800ab64:	2bff      	cmp	r3, #255	; 0xff
 800ab66:	d025      	beq.n	800abb4 <USBD_LL_DataInStage+0x15a>
 800ab68:	7dfb      	ldrb	r3, [r7, #23]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d122      	bne.n	800abb4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	d11c      	bne.n	800abb4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ab7a:	7dfa      	ldrb	r2, [r7, #23]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	32ae      	adds	r2, #174	; 0xae
 800ab80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab84:	695b      	ldr	r3, [r3, #20]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d014      	beq.n	800abb4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ab8a:	7dfa      	ldrb	r2, [r7, #23]
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ab92:	7dfa      	ldrb	r2, [r7, #23]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	32ae      	adds	r2, #174	; 0xae
 800ab98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab9c:	695b      	ldr	r3, [r3, #20]
 800ab9e:	7afa      	ldrb	r2, [r7, #11]
 800aba0:	4611      	mov	r1, r2
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	4798      	blx	r3
 800aba6:	4603      	mov	r3, r0
 800aba8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800abaa:	7dbb      	ldrb	r3, [r7, #22]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d001      	beq.n	800abb4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800abb0:	7dbb      	ldrb	r3, [r7, #22]
 800abb2:	e000      	b.n	800abb6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3718      	adds	r7, #24
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800abc6:	2300      	movs	r3, #0
 800abc8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2201      	movs	r2, #1
 800abce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	2200      	movs	r2, #0
 800abde:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2200      	movs	r2, #0
 800abec:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d014      	beq.n	800ac24 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00e      	beq.n	800ac24 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	6852      	ldr	r2, [r2, #4]
 800ac12:	b2d2      	uxtb	r2, r2
 800ac14:	4611      	mov	r1, r2
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	4798      	blx	r3
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d001      	beq.n	800ac24 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ac20:	2303      	movs	r3, #3
 800ac22:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac24:	2340      	movs	r3, #64	; 0x40
 800ac26:	2200      	movs	r2, #0
 800ac28:	2100      	movs	r1, #0
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f004 fea6 	bl	800f97c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2240      	movs	r2, #64	; 0x40
 800ac3c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ac40:	2340      	movs	r3, #64	; 0x40
 800ac42:	2200      	movs	r2, #0
 800ac44:	2180      	movs	r1, #128	; 0x80
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f004 fe98 	bl	800f97c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	2201      	movs	r2, #1
 800ac50:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2240      	movs	r2, #64	; 0x40
 800ac56:	621a      	str	r2, [r3, #32]

  return ret;
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	3710      	adds	r7, #16
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}

0800ac62 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ac62:	b480      	push	{r7}
 800ac64:	b083      	sub	sp, #12
 800ac66:	af00      	add	r7, sp, #0
 800ac68:	6078      	str	r0, [r7, #4]
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	78fa      	ldrb	r2, [r7, #3]
 800ac72:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ac74:	2300      	movs	r3, #0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	370c      	adds	r7, #12
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ac82:	b480      	push	{r7}
 800ac84:	b083      	sub	sp, #12
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	2b04      	cmp	r3, #4
 800ac94:	d006      	beq.n	800aca4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac9c:	b2da      	uxtb	r2, r3
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2204      	movs	r2, #4
 800aca8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800acac:	2300      	movs	r3, #0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	370c      	adds	r7, #12
 800acb2:	46bd      	mov	sp, r7
 800acb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb8:	4770      	bx	lr

0800acba <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800acba:	b480      	push	{r7}
 800acbc:	b083      	sub	sp, #12
 800acbe:	af00      	add	r7, sp, #0
 800acc0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	2b04      	cmp	r3, #4
 800accc:	d106      	bne.n	800acdc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800acd4:	b2da      	uxtb	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800acdc:	2300      	movs	r3, #0
}
 800acde:	4618      	mov	r0, r3
 800ace0:	370c      	adds	r7, #12
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800acea:	b580      	push	{r7, lr}
 800acec:	b082      	sub	sp, #8
 800acee:	af00      	add	r7, sp, #0
 800acf0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acf8:	b2db      	uxtb	r3, r3
 800acfa:	2b03      	cmp	r3, #3
 800acfc:	d110      	bne.n	800ad20 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d00b      	beq.n	800ad20 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad0e:	69db      	ldr	r3, [r3, #28]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d005      	beq.n	800ad20 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad1a:	69db      	ldr	r3, [r3, #28]
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b082      	sub	sp, #8
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
 800ad32:	460b      	mov	r3, r1
 800ad34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	32ae      	adds	r2, #174	; 0xae
 800ad40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d101      	bne.n	800ad4c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e01c      	b.n	800ad86 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	2b03      	cmp	r3, #3
 800ad56:	d115      	bne.n	800ad84 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	32ae      	adds	r2, #174	; 0xae
 800ad62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad66:	6a1b      	ldr	r3, [r3, #32]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00b      	beq.n	800ad84 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	32ae      	adds	r2, #174	; 0xae
 800ad76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7a:	6a1b      	ldr	r3, [r3, #32]
 800ad7c:	78fa      	ldrb	r2, [r7, #3]
 800ad7e:	4611      	mov	r1, r2
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ad84:	2300      	movs	r3, #0
}
 800ad86:	4618      	mov	r0, r3
 800ad88:	3708      	adds	r7, #8
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}

0800ad8e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ad8e:	b580      	push	{r7, lr}
 800ad90:	b082      	sub	sp, #8
 800ad92:	af00      	add	r7, sp, #0
 800ad94:	6078      	str	r0, [r7, #4]
 800ad96:	460b      	mov	r3, r1
 800ad98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	32ae      	adds	r2, #174	; 0xae
 800ada4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d101      	bne.n	800adb0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800adac:	2303      	movs	r3, #3
 800adae:	e01c      	b.n	800adea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	2b03      	cmp	r3, #3
 800adba:	d115      	bne.n	800ade8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	32ae      	adds	r2, #174	; 0xae
 800adc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d00b      	beq.n	800ade8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	32ae      	adds	r2, #174	; 0xae
 800adda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ade0:	78fa      	ldrb	r2, [r7, #3]
 800ade2:	4611      	mov	r1, r2
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	4618      	mov	r0, r3
 800adec:	3708      	adds	r7, #8
 800adee:	46bd      	mov	sp, r7
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800adf2:	b480      	push	{r7}
 800adf4:	b083      	sub	sp, #12
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ae10:	2300      	movs	r3, #0
 800ae12:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2201      	movs	r2, #1
 800ae18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00e      	beq.n	800ae44 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	6852      	ldr	r2, [r2, #4]
 800ae32:	b2d2      	uxtb	r2, r2
 800ae34:	4611      	mov	r1, r2
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	4798      	blx	r3
 800ae3a:	4603      	mov	r3, r0
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d001      	beq.n	800ae44 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ae40:	2303      	movs	r3, #3
 800ae42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae46:	4618      	mov	r0, r3
 800ae48:	3710      	adds	r7, #16
 800ae4a:	46bd      	mov	sp, r7
 800ae4c:	bd80      	pop	{r7, pc}

0800ae4e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae4e:	b480      	push	{r7}
 800ae50:	b083      	sub	sp, #12
 800ae52:	af00      	add	r7, sp, #0
 800ae54:	6078      	str	r0, [r7, #4]
 800ae56:	460b      	mov	r3, r1
 800ae58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	460b      	mov	r3, r1
 800ae72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ae74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	370c      	adds	r7, #12
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr

0800ae82 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ae82:	b480      	push	{r7}
 800ae84:	b085      	sub	sp, #20
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ae90:	683b      	ldr	r3, [r7, #0]
 800ae92:	881a      	ldrh	r2, [r3, #0]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	781b      	ldrb	r3, [r3, #0]
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	4413      	add	r3, r2
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	461a      	mov	r2, r3
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	4413      	add	r3, r2
 800aeac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800aeae:	68fb      	ldr	r3, [r7, #12]
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3714      	adds	r7, #20
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeba:	4770      	bx	lr

0800aebc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aebc:	b480      	push	{r7}
 800aebe:	b087      	sub	sp, #28
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	3301      	adds	r3, #1
 800aed2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aeda:	8a3b      	ldrh	r3, [r7, #16]
 800aedc:	021b      	lsls	r3, r3, #8
 800aede:	b21a      	sxth	r2, r3
 800aee0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aee4:	4313      	orrs	r3, r2
 800aee6:	b21b      	sxth	r3, r3
 800aee8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aeea:	89fb      	ldrh	r3, [r7, #14]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	371c      	adds	r7, #28
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af02:	2300      	movs	r3, #0
 800af04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af0e:	2b40      	cmp	r3, #64	; 0x40
 800af10:	d005      	beq.n	800af1e <USBD_StdDevReq+0x26>
 800af12:	2b40      	cmp	r3, #64	; 0x40
 800af14:	d857      	bhi.n	800afc6 <USBD_StdDevReq+0xce>
 800af16:	2b00      	cmp	r3, #0
 800af18:	d00f      	beq.n	800af3a <USBD_StdDevReq+0x42>
 800af1a:	2b20      	cmp	r3, #32
 800af1c:	d153      	bne.n	800afc6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	32ae      	adds	r2, #174	; 0xae
 800af28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	6839      	ldr	r1, [r7, #0]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	4798      	blx	r3
 800af34:	4603      	mov	r3, r0
 800af36:	73fb      	strb	r3, [r7, #15]
      break;
 800af38:	e04a      	b.n	800afd0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	785b      	ldrb	r3, [r3, #1]
 800af3e:	2b09      	cmp	r3, #9
 800af40:	d83b      	bhi.n	800afba <USBD_StdDevReq+0xc2>
 800af42:	a201      	add	r2, pc, #4	; (adr r2, 800af48 <USBD_StdDevReq+0x50>)
 800af44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af48:	0800af9d 	.word	0x0800af9d
 800af4c:	0800afb1 	.word	0x0800afb1
 800af50:	0800afbb 	.word	0x0800afbb
 800af54:	0800afa7 	.word	0x0800afa7
 800af58:	0800afbb 	.word	0x0800afbb
 800af5c:	0800af7b 	.word	0x0800af7b
 800af60:	0800af71 	.word	0x0800af71
 800af64:	0800afbb 	.word	0x0800afbb
 800af68:	0800af93 	.word	0x0800af93
 800af6c:	0800af85 	.word	0x0800af85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800af70:	6839      	ldr	r1, [r7, #0]
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fa3c 	bl	800b3f0 <USBD_GetDescriptor>
          break;
 800af78:	e024      	b.n	800afc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 fbcb 	bl	800b718 <USBD_SetAddress>
          break;
 800af82:	e01f      	b.n	800afc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800af84:	6839      	ldr	r1, [r7, #0]
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fc0a 	bl	800b7a0 <USBD_SetConfig>
 800af8c:	4603      	mov	r3, r0
 800af8e:	73fb      	strb	r3, [r7, #15]
          break;
 800af90:	e018      	b.n	800afc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 fcad 	bl	800b8f4 <USBD_GetConfig>
          break;
 800af9a:	e013      	b.n	800afc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800af9c:	6839      	ldr	r1, [r7, #0]
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 fcde 	bl	800b960 <USBD_GetStatus>
          break;
 800afa4:	e00e      	b.n	800afc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fd0d 	bl	800b9c8 <USBD_SetFeature>
          break;
 800afae:	e009      	b.n	800afc4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800afb0:	6839      	ldr	r1, [r7, #0]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 fd31 	bl	800ba1a <USBD_ClrFeature>
          break;
 800afb8:	e004      	b.n	800afc4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 fd88 	bl	800bad2 <USBD_CtlError>
          break;
 800afc2:	bf00      	nop
      }
      break;
 800afc4:	e004      	b.n	800afd0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800afc6:	6839      	ldr	r1, [r7, #0]
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f000 fd82 	bl	800bad2 <USBD_CtlError>
      break;
 800afce:	bf00      	nop
  }

  return ret;
 800afd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3710      	adds	r7, #16
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}
 800afda:	bf00      	nop

0800afdc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
 800afe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afe6:	2300      	movs	r3, #0
 800afe8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afea:	683b      	ldr	r3, [r7, #0]
 800afec:	781b      	ldrb	r3, [r3, #0]
 800afee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aff2:	2b40      	cmp	r3, #64	; 0x40
 800aff4:	d005      	beq.n	800b002 <USBD_StdItfReq+0x26>
 800aff6:	2b40      	cmp	r3, #64	; 0x40
 800aff8:	d852      	bhi.n	800b0a0 <USBD_StdItfReq+0xc4>
 800affa:	2b00      	cmp	r3, #0
 800affc:	d001      	beq.n	800b002 <USBD_StdItfReq+0x26>
 800affe:	2b20      	cmp	r3, #32
 800b000:	d14e      	bne.n	800b0a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b008:	b2db      	uxtb	r3, r3
 800b00a:	3b01      	subs	r3, #1
 800b00c:	2b02      	cmp	r3, #2
 800b00e:	d840      	bhi.n	800b092 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b010:	683b      	ldr	r3, [r7, #0]
 800b012:	889b      	ldrh	r3, [r3, #4]
 800b014:	b2db      	uxtb	r3, r3
 800b016:	2b01      	cmp	r3, #1
 800b018:	d836      	bhi.n	800b088 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	889b      	ldrh	r3, [r3, #4]
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	4619      	mov	r1, r3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f7ff ff13 	bl	800ae4e <USBD_CoreFindIF>
 800b028:	4603      	mov	r3, r0
 800b02a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b02c:	7bbb      	ldrb	r3, [r7, #14]
 800b02e:	2bff      	cmp	r3, #255	; 0xff
 800b030:	d01d      	beq.n	800b06e <USBD_StdItfReq+0x92>
 800b032:	7bbb      	ldrb	r3, [r7, #14]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d11a      	bne.n	800b06e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b038:	7bba      	ldrb	r2, [r7, #14]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	32ae      	adds	r2, #174	; 0xae
 800b03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00f      	beq.n	800b068 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b048:	7bba      	ldrb	r2, [r7, #14]
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b050:	7bba      	ldrb	r2, [r7, #14]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	32ae      	adds	r2, #174	; 0xae
 800b056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	6839      	ldr	r1, [r7, #0]
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	4798      	blx	r3
 800b062:	4603      	mov	r3, r0
 800b064:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b066:	e004      	b.n	800b072 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b068:	2303      	movs	r3, #3
 800b06a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b06c:	e001      	b.n	800b072 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b06e:	2303      	movs	r3, #3
 800b070:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	88db      	ldrh	r3, [r3, #6]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d110      	bne.n	800b09c <USBD_StdItfReq+0xc0>
 800b07a:	7bfb      	ldrb	r3, [r7, #15]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d10d      	bne.n	800b09c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 fdf1 	bl	800bc68 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b086:	e009      	b.n	800b09c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 fd21 	bl	800bad2 <USBD_CtlError>
          break;
 800b090:	e004      	b.n	800b09c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b092:	6839      	ldr	r1, [r7, #0]
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 fd1c 	bl	800bad2 <USBD_CtlError>
          break;
 800b09a:	e000      	b.n	800b09e <USBD_StdItfReq+0xc2>
          break;
 800b09c:	bf00      	nop
      }
      break;
 800b09e:	e004      	b.n	800b0aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b0a0:	6839      	ldr	r1, [r7, #0]
 800b0a2:	6878      	ldr	r0, [r7, #4]
 800b0a4:	f000 fd15 	bl	800bad2 <USBD_CtlError>
      break;
 800b0a8:	bf00      	nop
  }

  return ret;
 800b0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	889b      	ldrh	r3, [r3, #4]
 800b0c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0c8:	683b      	ldr	r3, [r7, #0]
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b0d0:	2b40      	cmp	r3, #64	; 0x40
 800b0d2:	d007      	beq.n	800b0e4 <USBD_StdEPReq+0x30>
 800b0d4:	2b40      	cmp	r3, #64	; 0x40
 800b0d6:	f200 817f 	bhi.w	800b3d8 <USBD_StdEPReq+0x324>
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d02a      	beq.n	800b134 <USBD_StdEPReq+0x80>
 800b0de:	2b20      	cmp	r3, #32
 800b0e0:	f040 817a 	bne.w	800b3d8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b0e4:	7bbb      	ldrb	r3, [r7, #14]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f7ff febd 	bl	800ae68 <USBD_CoreFindEP>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b0f2:	7b7b      	ldrb	r3, [r7, #13]
 800b0f4:	2bff      	cmp	r3, #255	; 0xff
 800b0f6:	f000 8174 	beq.w	800b3e2 <USBD_StdEPReq+0x32e>
 800b0fa:	7b7b      	ldrb	r3, [r7, #13]
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	f040 8170 	bne.w	800b3e2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b102:	7b7a      	ldrb	r2, [r7, #13]
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b10a:	7b7a      	ldrb	r2, [r7, #13]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	32ae      	adds	r2, #174	; 0xae
 800b110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	2b00      	cmp	r3, #0
 800b118:	f000 8163 	beq.w	800b3e2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b11c:	7b7a      	ldrb	r2, [r7, #13]
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	32ae      	adds	r2, #174	; 0xae
 800b122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6878      	ldr	r0, [r7, #4]
 800b12c:	4798      	blx	r3
 800b12e:	4603      	mov	r3, r0
 800b130:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b132:	e156      	b.n	800b3e2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	785b      	ldrb	r3, [r3, #1]
 800b138:	2b03      	cmp	r3, #3
 800b13a:	d008      	beq.n	800b14e <USBD_StdEPReq+0x9a>
 800b13c:	2b03      	cmp	r3, #3
 800b13e:	f300 8145 	bgt.w	800b3cc <USBD_StdEPReq+0x318>
 800b142:	2b00      	cmp	r3, #0
 800b144:	f000 809b 	beq.w	800b27e <USBD_StdEPReq+0x1ca>
 800b148:	2b01      	cmp	r3, #1
 800b14a:	d03c      	beq.n	800b1c6 <USBD_StdEPReq+0x112>
 800b14c:	e13e      	b.n	800b3cc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b154:	b2db      	uxtb	r3, r3
 800b156:	2b02      	cmp	r3, #2
 800b158:	d002      	beq.n	800b160 <USBD_StdEPReq+0xac>
 800b15a:	2b03      	cmp	r3, #3
 800b15c:	d016      	beq.n	800b18c <USBD_StdEPReq+0xd8>
 800b15e:	e02c      	b.n	800b1ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b160:	7bbb      	ldrb	r3, [r7, #14]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d00d      	beq.n	800b182 <USBD_StdEPReq+0xce>
 800b166:	7bbb      	ldrb	r3, [r7, #14]
 800b168:	2b80      	cmp	r3, #128	; 0x80
 800b16a:	d00a      	beq.n	800b182 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b16c:	7bbb      	ldrb	r3, [r7, #14]
 800b16e:	4619      	mov	r1, r3
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f004 fc77 	bl	800fa64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b176:	2180      	movs	r1, #128	; 0x80
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f004 fc73 	bl	800fa64 <USBD_LL_StallEP>
 800b17e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b180:	e020      	b.n	800b1c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b182:	6839      	ldr	r1, [r7, #0]
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 fca4 	bl	800bad2 <USBD_CtlError>
              break;
 800b18a:	e01b      	b.n	800b1c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	885b      	ldrh	r3, [r3, #2]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10e      	bne.n	800b1b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b194:	7bbb      	ldrb	r3, [r7, #14]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d00b      	beq.n	800b1b2 <USBD_StdEPReq+0xfe>
 800b19a:	7bbb      	ldrb	r3, [r7, #14]
 800b19c:	2b80      	cmp	r3, #128	; 0x80
 800b19e:	d008      	beq.n	800b1b2 <USBD_StdEPReq+0xfe>
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	88db      	ldrh	r3, [r3, #6]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d104      	bne.n	800b1b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1a8:	7bbb      	ldrb	r3, [r7, #14]
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f004 fc59 	bl	800fa64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 fd58 	bl	800bc68 <USBD_CtlSendStatus>

              break;
 800b1b8:	e004      	b.n	800b1c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b1ba:	6839      	ldr	r1, [r7, #0]
 800b1bc:	6878      	ldr	r0, [r7, #4]
 800b1be:	f000 fc88 	bl	800bad2 <USBD_CtlError>
              break;
 800b1c2:	bf00      	nop
          }
          break;
 800b1c4:	e107      	b.n	800b3d6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	2b02      	cmp	r3, #2
 800b1d0:	d002      	beq.n	800b1d8 <USBD_StdEPReq+0x124>
 800b1d2:	2b03      	cmp	r3, #3
 800b1d4:	d016      	beq.n	800b204 <USBD_StdEPReq+0x150>
 800b1d6:	e04b      	b.n	800b270 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1d8:	7bbb      	ldrb	r3, [r7, #14]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00d      	beq.n	800b1fa <USBD_StdEPReq+0x146>
 800b1de:	7bbb      	ldrb	r3, [r7, #14]
 800b1e0:	2b80      	cmp	r3, #128	; 0x80
 800b1e2:	d00a      	beq.n	800b1fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b1e4:	7bbb      	ldrb	r3, [r7, #14]
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f004 fc3b 	bl	800fa64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1ee:	2180      	movs	r1, #128	; 0x80
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f004 fc37 	bl	800fa64 <USBD_LL_StallEP>
 800b1f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1f8:	e040      	b.n	800b27c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b1fa:	6839      	ldr	r1, [r7, #0]
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 fc68 	bl	800bad2 <USBD_CtlError>
              break;
 800b202:	e03b      	b.n	800b27c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	885b      	ldrh	r3, [r3, #2]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d136      	bne.n	800b27a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b20c:	7bbb      	ldrb	r3, [r7, #14]
 800b20e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b212:	2b00      	cmp	r3, #0
 800b214:	d004      	beq.n	800b220 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b216:	7bbb      	ldrb	r3, [r7, #14]
 800b218:	4619      	mov	r1, r3
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f004 fc58 	bl	800fad0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 fd21 	bl	800bc68 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b226:	7bbb      	ldrb	r3, [r7, #14]
 800b228:	4619      	mov	r1, r3
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f7ff fe1c 	bl	800ae68 <USBD_CoreFindEP>
 800b230:	4603      	mov	r3, r0
 800b232:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b234:	7b7b      	ldrb	r3, [r7, #13]
 800b236:	2bff      	cmp	r3, #255	; 0xff
 800b238:	d01f      	beq.n	800b27a <USBD_StdEPReq+0x1c6>
 800b23a:	7b7b      	ldrb	r3, [r7, #13]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d11c      	bne.n	800b27a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b240:	7b7a      	ldrb	r2, [r7, #13]
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b248:	7b7a      	ldrb	r2, [r7, #13]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	32ae      	adds	r2, #174	; 0xae
 800b24e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b252:	689b      	ldr	r3, [r3, #8]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d010      	beq.n	800b27a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b258:	7b7a      	ldrb	r2, [r7, #13]
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	32ae      	adds	r2, #174	; 0xae
 800b25e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b262:	689b      	ldr	r3, [r3, #8]
 800b264:	6839      	ldr	r1, [r7, #0]
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	4798      	blx	r3
 800b26a:	4603      	mov	r3, r0
 800b26c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b26e:	e004      	b.n	800b27a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b270:	6839      	ldr	r1, [r7, #0]
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f000 fc2d 	bl	800bad2 <USBD_CtlError>
              break;
 800b278:	e000      	b.n	800b27c <USBD_StdEPReq+0x1c8>
              break;
 800b27a:	bf00      	nop
          }
          break;
 800b27c:	e0ab      	b.n	800b3d6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b284:	b2db      	uxtb	r3, r3
 800b286:	2b02      	cmp	r3, #2
 800b288:	d002      	beq.n	800b290 <USBD_StdEPReq+0x1dc>
 800b28a:	2b03      	cmp	r3, #3
 800b28c:	d032      	beq.n	800b2f4 <USBD_StdEPReq+0x240>
 800b28e:	e097      	b.n	800b3c0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b290:	7bbb      	ldrb	r3, [r7, #14]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d007      	beq.n	800b2a6 <USBD_StdEPReq+0x1f2>
 800b296:	7bbb      	ldrb	r3, [r7, #14]
 800b298:	2b80      	cmp	r3, #128	; 0x80
 800b29a:	d004      	beq.n	800b2a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b29c:	6839      	ldr	r1, [r7, #0]
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 fc17 	bl	800bad2 <USBD_CtlError>
                break;
 800b2a4:	e091      	b.n	800b3ca <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	da0b      	bge.n	800b2c6 <USBD_StdEPReq+0x212>
 800b2ae:	7bbb      	ldrb	r3, [r7, #14]
 800b2b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	009b      	lsls	r3, r3, #2
 800b2b8:	4413      	add	r3, r2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	3310      	adds	r3, #16
 800b2be:	687a      	ldr	r2, [r7, #4]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	3304      	adds	r3, #4
 800b2c4:	e00b      	b.n	800b2de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b2c6:	7bbb      	ldrb	r3, [r7, #14]
 800b2c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2cc:	4613      	mov	r3, r2
 800b2ce:	009b      	lsls	r3, r3, #2
 800b2d0:	4413      	add	r3, r2
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	4413      	add	r3, r2
 800b2dc:	3304      	adds	r3, #4
 800b2de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2e6:	68bb      	ldr	r3, [r7, #8]
 800b2e8:	2202      	movs	r2, #2
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 fc61 	bl	800bbb4 <USBD_CtlSendData>
              break;
 800b2f2:	e06a      	b.n	800b3ca <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b2f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	da11      	bge.n	800b320 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b2fc:	7bbb      	ldrb	r3, [r7, #14]
 800b2fe:	f003 020f 	and.w	r2, r3, #15
 800b302:	6879      	ldr	r1, [r7, #4]
 800b304:	4613      	mov	r3, r2
 800b306:	009b      	lsls	r3, r3, #2
 800b308:	4413      	add	r3, r2
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	440b      	add	r3, r1
 800b30e:	3324      	adds	r3, #36	; 0x24
 800b310:	881b      	ldrh	r3, [r3, #0]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d117      	bne.n	800b346 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b316:	6839      	ldr	r1, [r7, #0]
 800b318:	6878      	ldr	r0, [r7, #4]
 800b31a:	f000 fbda 	bl	800bad2 <USBD_CtlError>
                  break;
 800b31e:	e054      	b.n	800b3ca <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b320:	7bbb      	ldrb	r3, [r7, #14]
 800b322:	f003 020f 	and.w	r2, r3, #15
 800b326:	6879      	ldr	r1, [r7, #4]
 800b328:	4613      	mov	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4413      	add	r3, r2
 800b32e:	009b      	lsls	r3, r3, #2
 800b330:	440b      	add	r3, r1
 800b332:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b336:	881b      	ldrh	r3, [r3, #0]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d104      	bne.n	800b346 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b33c:	6839      	ldr	r1, [r7, #0]
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f000 fbc7 	bl	800bad2 <USBD_CtlError>
                  break;
 800b344:	e041      	b.n	800b3ca <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b346:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	da0b      	bge.n	800b366 <USBD_StdEPReq+0x2b2>
 800b34e:	7bbb      	ldrb	r3, [r7, #14]
 800b350:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b354:	4613      	mov	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4413      	add	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	3310      	adds	r3, #16
 800b35e:	687a      	ldr	r2, [r7, #4]
 800b360:	4413      	add	r3, r2
 800b362:	3304      	adds	r3, #4
 800b364:	e00b      	b.n	800b37e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b366:	7bbb      	ldrb	r3, [r7, #14]
 800b368:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b36c:	4613      	mov	r3, r2
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	4413      	add	r3, r2
 800b372:	009b      	lsls	r3, r3, #2
 800b374:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b378:	687a      	ldr	r2, [r7, #4]
 800b37a:	4413      	add	r3, r2
 800b37c:	3304      	adds	r3, #4
 800b37e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b380:	7bbb      	ldrb	r3, [r7, #14]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d002      	beq.n	800b38c <USBD_StdEPReq+0x2d8>
 800b386:	7bbb      	ldrb	r3, [r7, #14]
 800b388:	2b80      	cmp	r3, #128	; 0x80
 800b38a:	d103      	bne.n	800b394 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	2200      	movs	r2, #0
 800b390:	601a      	str	r2, [r3, #0]
 800b392:	e00e      	b.n	800b3b2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b394:	7bbb      	ldrb	r3, [r7, #14]
 800b396:	4619      	mov	r1, r3
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f004 fbcf 	bl	800fb3c <USBD_LL_IsStallEP>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d003      	beq.n	800b3ac <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	2201      	movs	r2, #1
 800b3a8:	601a      	str	r2, [r3, #0]
 800b3aa:	e002      	b.n	800b3b2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	2202      	movs	r2, #2
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	6878      	ldr	r0, [r7, #4]
 800b3ba:	f000 fbfb 	bl	800bbb4 <USBD_CtlSendData>
              break;
 800b3be:	e004      	b.n	800b3ca <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b3c0:	6839      	ldr	r1, [r7, #0]
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 fb85 	bl	800bad2 <USBD_CtlError>
              break;
 800b3c8:	bf00      	nop
          }
          break;
 800b3ca:	e004      	b.n	800b3d6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b3cc:	6839      	ldr	r1, [r7, #0]
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f000 fb7f 	bl	800bad2 <USBD_CtlError>
          break;
 800b3d4:	bf00      	nop
      }
      break;
 800b3d6:	e005      	b.n	800b3e4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 fb79 	bl	800bad2 <USBD_CtlError>
      break;
 800b3e0:	e000      	b.n	800b3e4 <USBD_StdEPReq+0x330>
      break;
 800b3e2:	bf00      	nop
  }

  return ret;
 800b3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3710      	adds	r7, #16
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}
	...

0800b3f0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b3fe:	2300      	movs	r3, #0
 800b400:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b402:	2300      	movs	r3, #0
 800b404:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	885b      	ldrh	r3, [r3, #2]
 800b40a:	0a1b      	lsrs	r3, r3, #8
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	3b01      	subs	r3, #1
 800b410:	2b0e      	cmp	r3, #14
 800b412:	f200 8152 	bhi.w	800b6ba <USBD_GetDescriptor+0x2ca>
 800b416:	a201      	add	r2, pc, #4	; (adr r2, 800b41c <USBD_GetDescriptor+0x2c>)
 800b418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b41c:	0800b48d 	.word	0x0800b48d
 800b420:	0800b4a5 	.word	0x0800b4a5
 800b424:	0800b4e5 	.word	0x0800b4e5
 800b428:	0800b6bb 	.word	0x0800b6bb
 800b42c:	0800b6bb 	.word	0x0800b6bb
 800b430:	0800b65b 	.word	0x0800b65b
 800b434:	0800b687 	.word	0x0800b687
 800b438:	0800b6bb 	.word	0x0800b6bb
 800b43c:	0800b6bb 	.word	0x0800b6bb
 800b440:	0800b6bb 	.word	0x0800b6bb
 800b444:	0800b6bb 	.word	0x0800b6bb
 800b448:	0800b6bb 	.word	0x0800b6bb
 800b44c:	0800b6bb 	.word	0x0800b6bb
 800b450:	0800b6bb 	.word	0x0800b6bb
 800b454:	0800b459 	.word	0x0800b459
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b45e:	69db      	ldr	r3, [r3, #28]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00b      	beq.n	800b47c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b46a:	69db      	ldr	r3, [r3, #28]
 800b46c:	687a      	ldr	r2, [r7, #4]
 800b46e:	7c12      	ldrb	r2, [r2, #16]
 800b470:	f107 0108 	add.w	r1, r7, #8
 800b474:	4610      	mov	r0, r2
 800b476:	4798      	blx	r3
 800b478:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b47a:	e126      	b.n	800b6ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b47c:	6839      	ldr	r1, [r7, #0]
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 fb27 	bl	800bad2 <USBD_CtlError>
        err++;
 800b484:	7afb      	ldrb	r3, [r7, #11]
 800b486:	3301      	adds	r3, #1
 800b488:	72fb      	strb	r3, [r7, #11]
      break;
 800b48a:	e11e      	b.n	800b6ca <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	687a      	ldr	r2, [r7, #4]
 800b496:	7c12      	ldrb	r2, [r2, #16]
 800b498:	f107 0108 	add.w	r1, r7, #8
 800b49c:	4610      	mov	r0, r2
 800b49e:	4798      	blx	r3
 800b4a0:	60f8      	str	r0, [r7, #12]
      break;
 800b4a2:	e112      	b.n	800b6ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	7c1b      	ldrb	r3, [r3, #16]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d10d      	bne.n	800b4c8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b4:	f107 0208 	add.w	r2, r7, #8
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	4798      	blx	r3
 800b4bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	3301      	adds	r3, #1
 800b4c2:	2202      	movs	r2, #2
 800b4c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b4c6:	e100      	b.n	800b6ca <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4d0:	f107 0208 	add.w	r2, r7, #8
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	4798      	blx	r3
 800b4d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	3301      	adds	r3, #1
 800b4de:	2202      	movs	r2, #2
 800b4e0:	701a      	strb	r2, [r3, #0]
      break;
 800b4e2:	e0f2      	b.n	800b6ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	885b      	ldrh	r3, [r3, #2]
 800b4e8:	b2db      	uxtb	r3, r3
 800b4ea:	2b05      	cmp	r3, #5
 800b4ec:	f200 80ac 	bhi.w	800b648 <USBD_GetDescriptor+0x258>
 800b4f0:	a201      	add	r2, pc, #4	; (adr r2, 800b4f8 <USBD_GetDescriptor+0x108>)
 800b4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4f6:	bf00      	nop
 800b4f8:	0800b511 	.word	0x0800b511
 800b4fc:	0800b545 	.word	0x0800b545
 800b500:	0800b579 	.word	0x0800b579
 800b504:	0800b5ad 	.word	0x0800b5ad
 800b508:	0800b5e1 	.word	0x0800b5e1
 800b50c:	0800b615 	.word	0x0800b615
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00b      	beq.n	800b534 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	687a      	ldr	r2, [r7, #4]
 800b526:	7c12      	ldrb	r2, [r2, #16]
 800b528:	f107 0108 	add.w	r1, r7, #8
 800b52c:	4610      	mov	r0, r2
 800b52e:	4798      	blx	r3
 800b530:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b532:	e091      	b.n	800b658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 facb 	bl	800bad2 <USBD_CtlError>
            err++;
 800b53c:	7afb      	ldrb	r3, [r7, #11]
 800b53e:	3301      	adds	r3, #1
 800b540:	72fb      	strb	r3, [r7, #11]
          break;
 800b542:	e089      	b.n	800b658 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b54a:	689b      	ldr	r3, [r3, #8]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00b      	beq.n	800b568 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b556:	689b      	ldr	r3, [r3, #8]
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	7c12      	ldrb	r2, [r2, #16]
 800b55c:	f107 0108 	add.w	r1, r7, #8
 800b560:	4610      	mov	r0, r2
 800b562:	4798      	blx	r3
 800b564:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b566:	e077      	b.n	800b658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b568:	6839      	ldr	r1, [r7, #0]
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f000 fab1 	bl	800bad2 <USBD_CtlError>
            err++;
 800b570:	7afb      	ldrb	r3, [r7, #11]
 800b572:	3301      	adds	r3, #1
 800b574:	72fb      	strb	r3, [r7, #11]
          break;
 800b576:	e06f      	b.n	800b658 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d00b      	beq.n	800b59c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	687a      	ldr	r2, [r7, #4]
 800b58e:	7c12      	ldrb	r2, [r2, #16]
 800b590:	f107 0108 	add.w	r1, r7, #8
 800b594:	4610      	mov	r0, r2
 800b596:	4798      	blx	r3
 800b598:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b59a:	e05d      	b.n	800b658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b59c:	6839      	ldr	r1, [r7, #0]
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 fa97 	bl	800bad2 <USBD_CtlError>
            err++;
 800b5a4:	7afb      	ldrb	r3, [r7, #11]
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	72fb      	strb	r3, [r7, #11]
          break;
 800b5aa:	e055      	b.n	800b658 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5b2:	691b      	ldr	r3, [r3, #16]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d00b      	beq.n	800b5d0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5be:	691b      	ldr	r3, [r3, #16]
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	7c12      	ldrb	r2, [r2, #16]
 800b5c4:	f107 0108 	add.w	r1, r7, #8
 800b5c8:	4610      	mov	r0, r2
 800b5ca:	4798      	blx	r3
 800b5cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5ce:	e043      	b.n	800b658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b5d0:	6839      	ldr	r1, [r7, #0]
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f000 fa7d 	bl	800bad2 <USBD_CtlError>
            err++;
 800b5d8:	7afb      	ldrb	r3, [r7, #11]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	72fb      	strb	r3, [r7, #11]
          break;
 800b5de:	e03b      	b.n	800b658 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5e6:	695b      	ldr	r3, [r3, #20]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d00b      	beq.n	800b604 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5f2:	695b      	ldr	r3, [r3, #20]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	7c12      	ldrb	r2, [r2, #16]
 800b5f8:	f107 0108 	add.w	r1, r7, #8
 800b5fc:	4610      	mov	r0, r2
 800b5fe:	4798      	blx	r3
 800b600:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b602:	e029      	b.n	800b658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b604:	6839      	ldr	r1, [r7, #0]
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f000 fa63 	bl	800bad2 <USBD_CtlError>
            err++;
 800b60c:	7afb      	ldrb	r3, [r7, #11]
 800b60e:	3301      	adds	r3, #1
 800b610:	72fb      	strb	r3, [r7, #11]
          break;
 800b612:	e021      	b.n	800b658 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b61a:	699b      	ldr	r3, [r3, #24]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d00b      	beq.n	800b638 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b626:	699b      	ldr	r3, [r3, #24]
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	7c12      	ldrb	r2, [r2, #16]
 800b62c:	f107 0108 	add.w	r1, r7, #8
 800b630:	4610      	mov	r0, r2
 800b632:	4798      	blx	r3
 800b634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b636:	e00f      	b.n	800b658 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b638:	6839      	ldr	r1, [r7, #0]
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fa49 	bl	800bad2 <USBD_CtlError>
            err++;
 800b640:	7afb      	ldrb	r3, [r7, #11]
 800b642:	3301      	adds	r3, #1
 800b644:	72fb      	strb	r3, [r7, #11]
          break;
 800b646:	e007      	b.n	800b658 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 fa41 	bl	800bad2 <USBD_CtlError>
          err++;
 800b650:	7afb      	ldrb	r3, [r7, #11]
 800b652:	3301      	adds	r3, #1
 800b654:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b656:	bf00      	nop
      }
      break;
 800b658:	e037      	b.n	800b6ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	7c1b      	ldrb	r3, [r3, #16]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d109      	bne.n	800b676 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b66a:	f107 0208 	add.w	r2, r7, #8
 800b66e:	4610      	mov	r0, r2
 800b670:	4798      	blx	r3
 800b672:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b674:	e029      	b.n	800b6ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b676:	6839      	ldr	r1, [r7, #0]
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f000 fa2a 	bl	800bad2 <USBD_CtlError>
        err++;
 800b67e:	7afb      	ldrb	r3, [r7, #11]
 800b680:	3301      	adds	r3, #1
 800b682:	72fb      	strb	r3, [r7, #11]
      break;
 800b684:	e021      	b.n	800b6ca <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	7c1b      	ldrb	r3, [r3, #16]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d10d      	bne.n	800b6aa <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b696:	f107 0208 	add.w	r2, r7, #8
 800b69a:	4610      	mov	r0, r2
 800b69c:	4798      	blx	r3
 800b69e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	2207      	movs	r2, #7
 800b6a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b6a8:	e00f      	b.n	800b6ca <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b6aa:	6839      	ldr	r1, [r7, #0]
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 fa10 	bl	800bad2 <USBD_CtlError>
        err++;
 800b6b2:	7afb      	ldrb	r3, [r7, #11]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	72fb      	strb	r3, [r7, #11]
      break;
 800b6b8:	e007      	b.n	800b6ca <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b6ba:	6839      	ldr	r1, [r7, #0]
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fa08 	bl	800bad2 <USBD_CtlError>
      err++;
 800b6c2:	7afb      	ldrb	r3, [r7, #11]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	72fb      	strb	r3, [r7, #11]
      break;
 800b6c8:	bf00      	nop
  }

  if (err != 0U)
 800b6ca:	7afb      	ldrb	r3, [r7, #11]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d11e      	bne.n	800b70e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	88db      	ldrh	r3, [r3, #6]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d016      	beq.n	800b706 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b6d8:	893b      	ldrh	r3, [r7, #8]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00e      	beq.n	800b6fc <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	88da      	ldrh	r2, [r3, #6]
 800b6e2:	893b      	ldrh	r3, [r7, #8]
 800b6e4:	4293      	cmp	r3, r2
 800b6e6:	bf28      	it	cs
 800b6e8:	4613      	movcs	r3, r2
 800b6ea:	b29b      	uxth	r3, r3
 800b6ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b6ee:	893b      	ldrh	r3, [r7, #8]
 800b6f0:	461a      	mov	r2, r3
 800b6f2:	68f9      	ldr	r1, [r7, #12]
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f000 fa5d 	bl	800bbb4 <USBD_CtlSendData>
 800b6fa:	e009      	b.n	800b710 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b6fc:	6839      	ldr	r1, [r7, #0]
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f9e7 	bl	800bad2 <USBD_CtlError>
 800b704:	e004      	b.n	800b710 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 faae 	bl	800bc68 <USBD_CtlSendStatus>
 800b70c:	e000      	b.n	800b710 <USBD_GetDescriptor+0x320>
    return;
 800b70e:	bf00      	nop
  }
}
 800b710:	3710      	adds	r7, #16
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop

0800b718 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	889b      	ldrh	r3, [r3, #4]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d131      	bne.n	800b78e <USBD_SetAddress+0x76>
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	88db      	ldrh	r3, [r3, #6]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d12d      	bne.n	800b78e <USBD_SetAddress+0x76>
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	885b      	ldrh	r3, [r3, #2]
 800b736:	2b7f      	cmp	r3, #127	; 0x7f
 800b738:	d829      	bhi.n	800b78e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	885b      	ldrh	r3, [r3, #2]
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b744:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	2b03      	cmp	r3, #3
 800b750:	d104      	bne.n	800b75c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b752:	6839      	ldr	r1, [r7, #0]
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f9bc 	bl	800bad2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b75a:	e01d      	b.n	800b798 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	7bfa      	ldrb	r2, [r7, #15]
 800b760:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b764:	7bfb      	ldrb	r3, [r7, #15]
 800b766:	4619      	mov	r1, r3
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f004 fa13 	bl	800fb94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b76e:	6878      	ldr	r0, [r7, #4]
 800b770:	f000 fa7a 	bl	800bc68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b774:	7bfb      	ldrb	r3, [r7, #15]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d004      	beq.n	800b784 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2202      	movs	r2, #2
 800b77e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b782:	e009      	b.n	800b798 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2201      	movs	r2, #1
 800b788:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b78c:	e004      	b.n	800b798 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b78e:	6839      	ldr	r1, [r7, #0]
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	f000 f99e 	bl	800bad2 <USBD_CtlError>
  }
}
 800b796:	bf00      	nop
 800b798:	bf00      	nop
 800b79a:	3710      	adds	r7, #16
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b084      	sub	sp, #16
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	885b      	ldrh	r3, [r3, #2]
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	4b4e      	ldr	r3, [pc, #312]	; (800b8f0 <USBD_SetConfig+0x150>)
 800b7b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b7b8:	4b4d      	ldr	r3, [pc, #308]	; (800b8f0 <USBD_SetConfig+0x150>)
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d905      	bls.n	800b7cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b7c0:	6839      	ldr	r1, [r7, #0]
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f000 f985 	bl	800bad2 <USBD_CtlError>
    return USBD_FAIL;
 800b7c8:	2303      	movs	r3, #3
 800b7ca:	e08c      	b.n	800b8e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7d2:	b2db      	uxtb	r3, r3
 800b7d4:	2b02      	cmp	r3, #2
 800b7d6:	d002      	beq.n	800b7de <USBD_SetConfig+0x3e>
 800b7d8:	2b03      	cmp	r3, #3
 800b7da:	d029      	beq.n	800b830 <USBD_SetConfig+0x90>
 800b7dc:	e075      	b.n	800b8ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b7de:	4b44      	ldr	r3, [pc, #272]	; (800b8f0 <USBD_SetConfig+0x150>)
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d020      	beq.n	800b828 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b7e6:	4b42      	ldr	r3, [pc, #264]	; (800b8f0 <USBD_SetConfig+0x150>)
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7f0:	4b3f      	ldr	r3, [pc, #252]	; (800b8f0 <USBD_SetConfig+0x150>)
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7fe fff1 	bl	800a7de <USBD_SetClassConfig>
 800b7fc:	4603      	mov	r3, r0
 800b7fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b800:	7bfb      	ldrb	r3, [r7, #15]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d008      	beq.n	800b818 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b806:	6839      	ldr	r1, [r7, #0]
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 f962 	bl	800bad2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2202      	movs	r2, #2
 800b812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b816:	e065      	b.n	800b8e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 fa25 	bl	800bc68 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2203      	movs	r2, #3
 800b822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b826:	e05d      	b.n	800b8e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 fa1d 	bl	800bc68 <USBD_CtlSendStatus>
      break;
 800b82e:	e059      	b.n	800b8e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b830:	4b2f      	ldr	r3, [pc, #188]	; (800b8f0 <USBD_SetConfig+0x150>)
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d112      	bne.n	800b85e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	2202      	movs	r2, #2
 800b83c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b840:	4b2b      	ldr	r3, [pc, #172]	; (800b8f0 <USBD_SetConfig+0x150>)
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	461a      	mov	r2, r3
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b84a:	4b29      	ldr	r3, [pc, #164]	; (800b8f0 <USBD_SetConfig+0x150>)
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	4619      	mov	r1, r3
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f7fe ffe0 	bl	800a816 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f000 fa06 	bl	800bc68 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b85c:	e042      	b.n	800b8e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b85e:	4b24      	ldr	r3, [pc, #144]	; (800b8f0 <USBD_SetConfig+0x150>)
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	461a      	mov	r2, r3
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	429a      	cmp	r2, r3
 800b86a:	d02a      	beq.n	800b8c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	b2db      	uxtb	r3, r3
 800b872:	4619      	mov	r1, r3
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f7fe ffce 	bl	800a816 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b87a:	4b1d      	ldr	r3, [pc, #116]	; (800b8f0 <USBD_SetConfig+0x150>)
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	461a      	mov	r2, r3
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b884:	4b1a      	ldr	r3, [pc, #104]	; (800b8f0 <USBD_SetConfig+0x150>)
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	4619      	mov	r1, r3
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7fe ffa7 	bl	800a7de <USBD_SetClassConfig>
 800b890:	4603      	mov	r3, r0
 800b892:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b894:	7bfb      	ldrb	r3, [r7, #15]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d00f      	beq.n	800b8ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b89a:	6839      	ldr	r1, [r7, #0]
 800b89c:	6878      	ldr	r0, [r7, #4]
 800b89e:	f000 f918 	bl	800bad2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	b2db      	uxtb	r3, r3
 800b8a8:	4619      	mov	r1, r3
 800b8aa:	6878      	ldr	r0, [r7, #4]
 800b8ac:	f7fe ffb3 	bl	800a816 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2202      	movs	r2, #2
 800b8b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b8b8:	e014      	b.n	800b8e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f9d4 	bl	800bc68 <USBD_CtlSendStatus>
      break;
 800b8c0:	e010      	b.n	800b8e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 f9d0 	bl	800bc68 <USBD_CtlSendStatus>
      break;
 800b8c8:	e00c      	b.n	800b8e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b8ca:	6839      	ldr	r1, [r7, #0]
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 f900 	bl	800bad2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b8d2:	4b07      	ldr	r3, [pc, #28]	; (800b8f0 <USBD_SetConfig+0x150>)
 800b8d4:	781b      	ldrb	r3, [r3, #0]
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f7fe ff9c 	bl	800a816 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b8e2:	bf00      	nop
  }

  return ret;
 800b8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	20003b81 	.word	0x20003b81

0800b8f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	88db      	ldrh	r3, [r3, #6]
 800b902:	2b01      	cmp	r3, #1
 800b904:	d004      	beq.n	800b910 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f8e2 	bl	800bad2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b90e:	e023      	b.n	800b958 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b916:	b2db      	uxtb	r3, r3
 800b918:	2b02      	cmp	r3, #2
 800b91a:	dc02      	bgt.n	800b922 <USBD_GetConfig+0x2e>
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	dc03      	bgt.n	800b928 <USBD_GetConfig+0x34>
 800b920:	e015      	b.n	800b94e <USBD_GetConfig+0x5a>
 800b922:	2b03      	cmp	r3, #3
 800b924:	d00b      	beq.n	800b93e <USBD_GetConfig+0x4a>
 800b926:	e012      	b.n	800b94e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	3308      	adds	r3, #8
 800b932:	2201      	movs	r2, #1
 800b934:	4619      	mov	r1, r3
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 f93c 	bl	800bbb4 <USBD_CtlSendData>
        break;
 800b93c:	e00c      	b.n	800b958 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	3304      	adds	r3, #4
 800b942:	2201      	movs	r2, #1
 800b944:	4619      	mov	r1, r3
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f934 	bl	800bbb4 <USBD_CtlSendData>
        break;
 800b94c:	e004      	b.n	800b958 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b94e:	6839      	ldr	r1, [r7, #0]
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 f8be 	bl	800bad2 <USBD_CtlError>
        break;
 800b956:	bf00      	nop
}
 800b958:	bf00      	nop
 800b95a:	3708      	adds	r7, #8
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b970:	b2db      	uxtb	r3, r3
 800b972:	3b01      	subs	r3, #1
 800b974:	2b02      	cmp	r3, #2
 800b976:	d81e      	bhi.n	800b9b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	88db      	ldrh	r3, [r3, #6]
 800b97c:	2b02      	cmp	r3, #2
 800b97e:	d004      	beq.n	800b98a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f8a5 	bl	800bad2 <USBD_CtlError>
        break;
 800b988:	e01a      	b.n	800b9c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2201      	movs	r2, #1
 800b98e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b996:	2b00      	cmp	r3, #0
 800b998:	d005      	beq.n	800b9a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	68db      	ldr	r3, [r3, #12]
 800b99e:	f043 0202 	orr.w	r2, r3, #2
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	330c      	adds	r3, #12
 800b9aa:	2202      	movs	r2, #2
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f000 f900 	bl	800bbb4 <USBD_CtlSendData>
      break;
 800b9b4:	e004      	b.n	800b9c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b9b6:	6839      	ldr	r1, [r7, #0]
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 f88a 	bl	800bad2 <USBD_CtlError>
      break;
 800b9be:	bf00      	nop
  }
}
 800b9c0:	bf00      	nop
 800b9c2:	3708      	adds	r7, #8
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	b082      	sub	sp, #8
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9d2:	683b      	ldr	r3, [r7, #0]
 800b9d4:	885b      	ldrh	r3, [r3, #2]
 800b9d6:	2b01      	cmp	r3, #1
 800b9d8:	d107      	bne.n	800b9ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2201      	movs	r2, #1
 800b9de:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 f940 	bl	800bc68 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b9e8:	e013      	b.n	800ba12 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	885b      	ldrh	r3, [r3, #2]
 800b9ee:	2b02      	cmp	r3, #2
 800b9f0:	d10b      	bne.n	800ba0a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	889b      	ldrh	r3, [r3, #4]
 800b9f6:	0a1b      	lsrs	r3, r3, #8
 800b9f8:	b29b      	uxth	r3, r3
 800b9fa:	b2da      	uxtb	r2, r3
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f000 f930 	bl	800bc68 <USBD_CtlSendStatus>
}
 800ba08:	e003      	b.n	800ba12 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ba0a:	6839      	ldr	r1, [r7, #0]
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 f860 	bl	800bad2 <USBD_CtlError>
}
 800ba12:	bf00      	nop
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b082      	sub	sp, #8
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
 800ba22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba2a:	b2db      	uxtb	r3, r3
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d80b      	bhi.n	800ba4a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	885b      	ldrh	r3, [r3, #2]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d10c      	bne.n	800ba54 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f910 	bl	800bc68 <USBD_CtlSendStatus>
      }
      break;
 800ba48:	e004      	b.n	800ba54 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ba4a:	6839      	ldr	r1, [r7, #0]
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 f840 	bl	800bad2 <USBD_CtlError>
      break;
 800ba52:	e000      	b.n	800ba56 <USBD_ClrFeature+0x3c>
      break;
 800ba54:	bf00      	nop
  }
}
 800ba56:	bf00      	nop
 800ba58:	3708      	adds	r7, #8
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b084      	sub	sp, #16
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	6078      	str	r0, [r7, #4]
 800ba66:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	781a      	ldrb	r2, [r3, #0]
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	3301      	adds	r3, #1
 800ba78:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	781a      	ldrb	r2, [r3, #0]
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	3301      	adds	r3, #1
 800ba86:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f7ff fa17 	bl	800aebc <SWAPBYTE>
 800ba8e:	4603      	mov	r3, r0
 800ba90:	461a      	mov	r2, r3
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	3301      	adds	r3, #1
 800ba9a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	3301      	adds	r3, #1
 800baa0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800baa2:	68f8      	ldr	r0, [r7, #12]
 800baa4:	f7ff fa0a 	bl	800aebc <SWAPBYTE>
 800baa8:	4603      	mov	r3, r0
 800baaa:	461a      	mov	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	3301      	adds	r3, #1
 800bab4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	3301      	adds	r3, #1
 800baba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	f7ff f9fd 	bl	800aebc <SWAPBYTE>
 800bac2:	4603      	mov	r3, r0
 800bac4:	461a      	mov	r2, r3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	80da      	strh	r2, [r3, #6]
}
 800baca:	bf00      	nop
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b082      	sub	sp, #8
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
 800bada:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800badc:	2180      	movs	r1, #128	; 0x80
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f003 ffc0 	bl	800fa64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bae4:	2100      	movs	r1, #0
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f003 ffbc 	bl	800fa64 <USBD_LL_StallEP>
}
 800baec:	bf00      	nop
 800baee:	3708      	adds	r7, #8
 800baf0:	46bd      	mov	sp, r7
 800baf2:	bd80      	pop	{r7, pc}

0800baf4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b086      	sub	sp, #24
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bb00:	2300      	movs	r3, #0
 800bb02:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d036      	beq.n	800bb78 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bb0e:	6938      	ldr	r0, [r7, #16]
 800bb10:	f000 f836 	bl	800bb80 <USBD_GetLen>
 800bb14:	4603      	mov	r3, r0
 800bb16:	3301      	adds	r3, #1
 800bb18:	b29b      	uxth	r3, r3
 800bb1a:	005b      	lsls	r3, r3, #1
 800bb1c:	b29a      	uxth	r2, r3
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bb22:	7dfb      	ldrb	r3, [r7, #23]
 800bb24:	68ba      	ldr	r2, [r7, #8]
 800bb26:	4413      	add	r3, r2
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	7812      	ldrb	r2, [r2, #0]
 800bb2c:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb2e:	7dfb      	ldrb	r3, [r7, #23]
 800bb30:	3301      	adds	r3, #1
 800bb32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bb34:	7dfb      	ldrb	r3, [r7, #23]
 800bb36:	68ba      	ldr	r2, [r7, #8]
 800bb38:	4413      	add	r3, r2
 800bb3a:	2203      	movs	r2, #3
 800bb3c:	701a      	strb	r2, [r3, #0]
  idx++;
 800bb3e:	7dfb      	ldrb	r3, [r7, #23]
 800bb40:	3301      	adds	r3, #1
 800bb42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bb44:	e013      	b.n	800bb6e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bb46:	7dfb      	ldrb	r3, [r7, #23]
 800bb48:	68ba      	ldr	r2, [r7, #8]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	693a      	ldr	r2, [r7, #16]
 800bb4e:	7812      	ldrb	r2, [r2, #0]
 800bb50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	3301      	adds	r3, #1
 800bb56:	613b      	str	r3, [r7, #16]
    idx++;
 800bb58:	7dfb      	ldrb	r3, [r7, #23]
 800bb5a:	3301      	adds	r3, #1
 800bb5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
 800bb60:	68ba      	ldr	r2, [r7, #8]
 800bb62:	4413      	add	r3, r2
 800bb64:	2200      	movs	r2, #0
 800bb66:	701a      	strb	r2, [r3, #0]
    idx++;
 800bb68:	7dfb      	ldrb	r3, [r7, #23]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	781b      	ldrb	r3, [r3, #0]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d1e7      	bne.n	800bb46 <USBD_GetString+0x52>
 800bb76:	e000      	b.n	800bb7a <USBD_GetString+0x86>
    return;
 800bb78:	bf00      	nop
  }
}
 800bb7a:	3718      	adds	r7, #24
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b085      	sub	sp, #20
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bb90:	e005      	b.n	800bb9e <USBD_GetLen+0x1e>
  {
    len++;
 800bb92:	7bfb      	ldrb	r3, [r7, #15]
 800bb94:	3301      	adds	r3, #1
 800bb96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bb98:	68bb      	ldr	r3, [r7, #8]
 800bb9a:	3301      	adds	r3, #1
 800bb9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	781b      	ldrb	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d1f5      	bne.n	800bb92 <USBD_GetLen+0x12>
  }

  return len;
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3714      	adds	r7, #20
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2202      	movs	r2, #2
 800bbc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	687a      	ldr	r2, [r7, #4]
 800bbcc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	687a      	ldr	r2, [r7, #4]
 800bbd2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	2100      	movs	r1, #0
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	f004 f810 	bl	800fc00 <USBD_LL_Transmit>

  return USBD_OK;
 800bbe0:	2300      	movs	r3, #0
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}

0800bbea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bbea:	b580      	push	{r7, lr}
 800bbec:	b084      	sub	sp, #16
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	60f8      	str	r0, [r7, #12]
 800bbf2:	60b9      	str	r1, [r7, #8]
 800bbf4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	68ba      	ldr	r2, [r7, #8]
 800bbfa:	2100      	movs	r1, #0
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f003 ffff 	bl	800fc00 <USBD_LL_Transmit>

  return USBD_OK;
 800bc02:	2300      	movs	r3, #0
}
 800bc04:	4618      	mov	r0, r3
 800bc06:	3710      	adds	r7, #16
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bd80      	pop	{r7, pc}

0800bc0c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2203      	movs	r2, #3
 800bc1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	687a      	ldr	r2, [r7, #4]
 800bc24:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	68ba      	ldr	r2, [r7, #8]
 800bc34:	2100      	movs	r1, #0
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f004 f81a 	bl	800fc70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc3c:	2300      	movs	r3, #0
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3710      	adds	r7, #16
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b084      	sub	sp, #16
 800bc4a:	af00      	add	r7, sp, #0
 800bc4c:	60f8      	str	r0, [r7, #12]
 800bc4e:	60b9      	str	r1, [r7, #8]
 800bc50:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	68ba      	ldr	r2, [r7, #8]
 800bc56:	2100      	movs	r1, #0
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	f004 f809 	bl	800fc70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b082      	sub	sp, #8
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	2204      	movs	r2, #4
 800bc74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bc78:	2300      	movs	r3, #0
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	2100      	movs	r1, #0
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f003 ffbe 	bl	800fc00 <USBD_LL_Transmit>

  return USBD_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3708      	adds	r7, #8
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	bd80      	pop	{r7, pc}

0800bc8e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bc8e:	b580      	push	{r7, lr}
 800bc90:	b082      	sub	sp, #8
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2205      	movs	r2, #5
 800bc9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc9e:	2300      	movs	r3, #0
 800bca0:	2200      	movs	r2, #0
 800bca2:	2100      	movs	r1, #0
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f003 ffe3 	bl	800fc70 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcaa:	2300      	movs	r3, #0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <__NVIC_SetPriority>:
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	4603      	mov	r3, r0
 800bcbc:	6039      	str	r1, [r7, #0]
 800bcbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bcc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	db0a      	blt.n	800bcde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	b2da      	uxtb	r2, r3
 800bccc:	490c      	ldr	r1, [pc, #48]	; (800bd00 <__NVIC_SetPriority+0x4c>)
 800bcce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bcd2:	0112      	lsls	r2, r2, #4
 800bcd4:	b2d2      	uxtb	r2, r2
 800bcd6:	440b      	add	r3, r1
 800bcd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bcdc:	e00a      	b.n	800bcf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	b2da      	uxtb	r2, r3
 800bce2:	4908      	ldr	r1, [pc, #32]	; (800bd04 <__NVIC_SetPriority+0x50>)
 800bce4:	79fb      	ldrb	r3, [r7, #7]
 800bce6:	f003 030f 	and.w	r3, r3, #15
 800bcea:	3b04      	subs	r3, #4
 800bcec:	0112      	lsls	r2, r2, #4
 800bcee:	b2d2      	uxtb	r2, r2
 800bcf0:	440b      	add	r3, r1
 800bcf2:	761a      	strb	r2, [r3, #24]
}
 800bcf4:	bf00      	nop
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr
 800bd00:	e000e100 	.word	0xe000e100
 800bd04:	e000ed00 	.word	0xe000ed00

0800bd08 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	f06f 0004 	mvn.w	r0, #4
 800bd12:	f7ff ffcf 	bl	800bcb4 <__NVIC_SetPriority>
#endif
}
 800bd16:	bf00      	nop
 800bd18:	bd80      	pop	{r7, pc}
	...

0800bd1c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bd1c:	b480      	push	{r7}
 800bd1e:	b083      	sub	sp, #12
 800bd20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd22:	f3ef 8305 	mrs	r3, IPSR
 800bd26:	603b      	str	r3, [r7, #0]
  return(result);
 800bd28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d003      	beq.n	800bd36 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bd2e:	f06f 0305 	mvn.w	r3, #5
 800bd32:	607b      	str	r3, [r7, #4]
 800bd34:	e00c      	b.n	800bd50 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bd36:	4b0a      	ldr	r3, [pc, #40]	; (800bd60 <osKernelInitialize+0x44>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d105      	bne.n	800bd4a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bd3e:	4b08      	ldr	r3, [pc, #32]	; (800bd60 <osKernelInitialize+0x44>)
 800bd40:	2201      	movs	r2, #1
 800bd42:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	607b      	str	r3, [r7, #4]
 800bd48:	e002      	b.n	800bd50 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bd4a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bd50:	687b      	ldr	r3, [r7, #4]
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	370c      	adds	r7, #12
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr
 800bd5e:	bf00      	nop
 800bd60:	20003b84 	.word	0x20003b84

0800bd64 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b082      	sub	sp, #8
 800bd68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd6a:	f3ef 8305 	mrs	r3, IPSR
 800bd6e:	603b      	str	r3, [r7, #0]
  return(result);
 800bd70:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d003      	beq.n	800bd7e <osKernelStart+0x1a>
    stat = osErrorISR;
 800bd76:	f06f 0305 	mvn.w	r3, #5
 800bd7a:	607b      	str	r3, [r7, #4]
 800bd7c:	e010      	b.n	800bda0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bd7e:	4b0b      	ldr	r3, [pc, #44]	; (800bdac <osKernelStart+0x48>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2b01      	cmp	r3, #1
 800bd84:	d109      	bne.n	800bd9a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bd86:	f7ff ffbf 	bl	800bd08 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bd8a:	4b08      	ldr	r3, [pc, #32]	; (800bdac <osKernelStart+0x48>)
 800bd8c:	2202      	movs	r2, #2
 800bd8e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bd90:	f001 fca6 	bl	800d6e0 <vTaskStartScheduler>
      stat = osOK;
 800bd94:	2300      	movs	r3, #0
 800bd96:	607b      	str	r3, [r7, #4]
 800bd98:	e002      	b.n	800bda0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bd9a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bda0:	687b      	ldr	r3, [r7, #4]
}
 800bda2:	4618      	mov	r0, r3
 800bda4:	3708      	adds	r7, #8
 800bda6:	46bd      	mov	sp, r7
 800bda8:	bd80      	pop	{r7, pc}
 800bdaa:	bf00      	nop
 800bdac:	20003b84 	.word	0x20003b84

0800bdb0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b08e      	sub	sp, #56	; 0x38
 800bdb4:	af04      	add	r7, sp, #16
 800bdb6:	60f8      	str	r0, [r7, #12]
 800bdb8:	60b9      	str	r1, [r7, #8]
 800bdba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdc0:	f3ef 8305 	mrs	r3, IPSR
 800bdc4:	617b      	str	r3, [r7, #20]
  return(result);
 800bdc6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d17e      	bne.n	800beca <osThreadNew+0x11a>
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d07b      	beq.n	800beca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bdd2:	2380      	movs	r3, #128	; 0x80
 800bdd4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bdd6:	2318      	movs	r3, #24
 800bdd8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bdda:	2300      	movs	r3, #0
 800bddc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bdde:	f04f 33ff 	mov.w	r3, #4294967295
 800bde2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d045      	beq.n	800be76 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d002      	beq.n	800bdf8 <osThreadNew+0x48>
        name = attr->name;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	699b      	ldr	r3, [r3, #24]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d002      	beq.n	800be06 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	699b      	ldr	r3, [r3, #24]
 800be04:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800be06:	69fb      	ldr	r3, [r7, #28]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d008      	beq.n	800be1e <osThreadNew+0x6e>
 800be0c:	69fb      	ldr	r3, [r7, #28]
 800be0e:	2b38      	cmp	r3, #56	; 0x38
 800be10:	d805      	bhi.n	800be1e <osThreadNew+0x6e>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	f003 0301 	and.w	r3, r3, #1
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d001      	beq.n	800be22 <osThreadNew+0x72>
        return (NULL);
 800be1e:	2300      	movs	r3, #0
 800be20:	e054      	b.n	800becc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	695b      	ldr	r3, [r3, #20]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d003      	beq.n	800be32 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	695b      	ldr	r3, [r3, #20]
 800be2e:	089b      	lsrs	r3, r3, #2
 800be30:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	689b      	ldr	r3, [r3, #8]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d00e      	beq.n	800be58 <osThreadNew+0xa8>
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	68db      	ldr	r3, [r3, #12]
 800be3e:	2b5b      	cmp	r3, #91	; 0x5b
 800be40:	d90a      	bls.n	800be58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800be46:	2b00      	cmp	r3, #0
 800be48:	d006      	beq.n	800be58 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	695b      	ldr	r3, [r3, #20]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d002      	beq.n	800be58 <osThreadNew+0xa8>
        mem = 1;
 800be52:	2301      	movs	r3, #1
 800be54:	61bb      	str	r3, [r7, #24]
 800be56:	e010      	b.n	800be7a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d10c      	bne.n	800be7a <osThreadNew+0xca>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d108      	bne.n	800be7a <osThreadNew+0xca>
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d104      	bne.n	800be7a <osThreadNew+0xca>
          mem = 0;
 800be70:	2300      	movs	r3, #0
 800be72:	61bb      	str	r3, [r7, #24]
 800be74:	e001      	b.n	800be7a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800be76:	2300      	movs	r3, #0
 800be78:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d110      	bne.n	800bea2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800be88:	9202      	str	r2, [sp, #8]
 800be8a:	9301      	str	r3, [sp, #4]
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	6a3a      	ldr	r2, [r7, #32]
 800be94:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800be96:	68f8      	ldr	r0, [r7, #12]
 800be98:	f001 fa4c 	bl	800d334 <xTaskCreateStatic>
 800be9c:	4603      	mov	r3, r0
 800be9e:	613b      	str	r3, [r7, #16]
 800bea0:	e013      	b.n	800beca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d110      	bne.n	800beca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bea8:	6a3b      	ldr	r3, [r7, #32]
 800beaa:	b29a      	uxth	r2, r3
 800beac:	f107 0310 	add.w	r3, r7, #16
 800beb0:	9301      	str	r3, [sp, #4]
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	9300      	str	r3, [sp, #0]
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f001 fa97 	bl	800d3ee <xTaskCreate>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d001      	beq.n	800beca <osThreadNew+0x11a>
            hTask = NULL;
 800bec6:	2300      	movs	r3, #0
 800bec8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800beca:	693b      	ldr	r3, [r7, #16]
}
 800becc:	4618      	mov	r0, r3
 800bece:	3728      	adds	r7, #40	; 0x28
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bed4:	b580      	push	{r7, lr}
 800bed6:	b084      	sub	sp, #16
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bedc:	f3ef 8305 	mrs	r3, IPSR
 800bee0:	60bb      	str	r3, [r7, #8]
  return(result);
 800bee2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d003      	beq.n	800bef0 <osDelay+0x1c>
    stat = osErrorISR;
 800bee8:	f06f 0305 	mvn.w	r3, #5
 800beec:	60fb      	str	r3, [r7, #12]
 800beee:	e007      	b.n	800bf00 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bef0:	2300      	movs	r3, #0
 800bef2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d002      	beq.n	800bf00 <osDelay+0x2c>
      vTaskDelay(ticks);
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f001 fbbc 	bl	800d678 <vTaskDelay>
    }
  }

  return (stat);
 800bf00:	68fb      	ldr	r3, [r7, #12]
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3710      	adds	r7, #16
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}

0800bf0a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b08a      	sub	sp, #40	; 0x28
 800bf0e:	af02      	add	r7, sp, #8
 800bf10:	60f8      	str	r0, [r7, #12]
 800bf12:	60b9      	str	r1, [r7, #8]
 800bf14:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800bf16:	2300      	movs	r3, #0
 800bf18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf1a:	f3ef 8305 	mrs	r3, IPSR
 800bf1e:	613b      	str	r3, [r7, #16]
  return(result);
 800bf20:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d175      	bne.n	800c012 <osSemaphoreNew+0x108>
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d072      	beq.n	800c012 <osSemaphoreNew+0x108>
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d86e      	bhi.n	800c012 <osSemaphoreNew+0x108>
    mem = -1;
 800bf34:	f04f 33ff 	mov.w	r3, #4294967295
 800bf38:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d015      	beq.n	800bf6c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	689b      	ldr	r3, [r3, #8]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d006      	beq.n	800bf56 <osSemaphoreNew+0x4c>
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	68db      	ldr	r3, [r3, #12]
 800bf4c:	2b4f      	cmp	r3, #79	; 0x4f
 800bf4e:	d902      	bls.n	800bf56 <osSemaphoreNew+0x4c>
        mem = 1;
 800bf50:	2301      	movs	r3, #1
 800bf52:	61bb      	str	r3, [r7, #24]
 800bf54:	e00c      	b.n	800bf70 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d108      	bne.n	800bf70 <osSemaphoreNew+0x66>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d104      	bne.n	800bf70 <osSemaphoreNew+0x66>
          mem = 0;
 800bf66:	2300      	movs	r3, #0
 800bf68:	61bb      	str	r3, [r7, #24]
 800bf6a:	e001      	b.n	800bf70 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800bf70:	69bb      	ldr	r3, [r7, #24]
 800bf72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf76:	d04c      	beq.n	800c012 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2b01      	cmp	r3, #1
 800bf7c:	d128      	bne.n	800bfd0 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d10a      	bne.n	800bf9a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	2203      	movs	r2, #3
 800bf8a:	9200      	str	r2, [sp, #0]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	2100      	movs	r1, #0
 800bf90:	2001      	movs	r0, #1
 800bf92:	f000 fa29 	bl	800c3e8 <xQueueGenericCreateStatic>
 800bf96:	61f8      	str	r0, [r7, #28]
 800bf98:	e005      	b.n	800bfa6 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800bf9a:	2203      	movs	r2, #3
 800bf9c:	2100      	movs	r1, #0
 800bf9e:	2001      	movs	r0, #1
 800bfa0:	f000 fa9a 	bl	800c4d8 <xQueueGenericCreate>
 800bfa4:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d022      	beq.n	800bff2 <osSemaphoreNew+0xe8>
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d01f      	beq.n	800bff2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	2100      	movs	r1, #0
 800bfb8:	69f8      	ldr	r0, [r7, #28]
 800bfba:	f000 fb55 	bl	800c668 <xQueueGenericSend>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d016      	beq.n	800bff2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800bfc4:	69f8      	ldr	r0, [r7, #28]
 800bfc6:	f000 ffe1 	bl	800cf8c <vQueueDelete>
            hSemaphore = NULL;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	61fb      	str	r3, [r7, #28]
 800bfce:	e010      	b.n	800bff2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800bfd0:	69bb      	ldr	r3, [r7, #24]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d108      	bne.n	800bfe8 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	461a      	mov	r2, r3
 800bfdc:	68b9      	ldr	r1, [r7, #8]
 800bfde:	68f8      	ldr	r0, [r7, #12]
 800bfe0:	f000 fad7 	bl	800c592 <xQueueCreateCountingSemaphoreStatic>
 800bfe4:	61f8      	str	r0, [r7, #28]
 800bfe6:	e004      	b.n	800bff2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bfe8:	68b9      	ldr	r1, [r7, #8]
 800bfea:	68f8      	ldr	r0, [r7, #12]
 800bfec:	f000 fb08 	bl	800c600 <xQueueCreateCountingSemaphore>
 800bff0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bff2:	69fb      	ldr	r3, [r7, #28]
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d00c      	beq.n	800c012 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d003      	beq.n	800c006 <osSemaphoreNew+0xfc>
          name = attr->name;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	617b      	str	r3, [r7, #20]
 800c004:	e001      	b.n	800c00a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c006:	2300      	movs	r3, #0
 800c008:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c00a:	6979      	ldr	r1, [r7, #20]
 800c00c:	69f8      	ldr	r0, [r7, #28]
 800c00e:	f001 f909 	bl	800d224 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c012:	69fb      	ldr	r3, [r7, #28]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3720      	adds	r7, #32
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b086      	sub	sp, #24
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c02a:	2300      	movs	r3, #0
 800c02c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d103      	bne.n	800c03c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c034:	f06f 0303 	mvn.w	r3, #3
 800c038:	617b      	str	r3, [r7, #20]
 800c03a:	e039      	b.n	800c0b0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c03c:	f3ef 8305 	mrs	r3, IPSR
 800c040:	60fb      	str	r3, [r7, #12]
  return(result);
 800c042:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c044:	2b00      	cmp	r3, #0
 800c046:	d022      	beq.n	800c08e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d003      	beq.n	800c056 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c04e:	f06f 0303 	mvn.w	r3, #3
 800c052:	617b      	str	r3, [r7, #20]
 800c054:	e02c      	b.n	800c0b0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c056:	2300      	movs	r3, #0
 800c058:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c05a:	f107 0308 	add.w	r3, r7, #8
 800c05e:	461a      	mov	r2, r3
 800c060:	2100      	movs	r1, #0
 800c062:	6938      	ldr	r0, [r7, #16]
 800c064:	f000 ff12 	bl	800ce8c <xQueueReceiveFromISR>
 800c068:	4603      	mov	r3, r0
 800c06a:	2b01      	cmp	r3, #1
 800c06c:	d003      	beq.n	800c076 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c06e:	f06f 0302 	mvn.w	r3, #2
 800c072:	617b      	str	r3, [r7, #20]
 800c074:	e01c      	b.n	800c0b0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c076:	68bb      	ldr	r3, [r7, #8]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d019      	beq.n	800c0b0 <osSemaphoreAcquire+0x94>
 800c07c:	4b0f      	ldr	r3, [pc, #60]	; (800c0bc <osSemaphoreAcquire+0xa0>)
 800c07e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c082:	601a      	str	r2, [r3, #0]
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	f3bf 8f6f 	isb	sy
 800c08c:	e010      	b.n	800c0b0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c08e:	6839      	ldr	r1, [r7, #0]
 800c090:	6938      	ldr	r0, [r7, #16]
 800c092:	f000 fdef 	bl	800cc74 <xQueueSemaphoreTake>
 800c096:	4603      	mov	r3, r0
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d009      	beq.n	800c0b0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c09c:	683b      	ldr	r3, [r7, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d003      	beq.n	800c0aa <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c0a2:	f06f 0301 	mvn.w	r3, #1
 800c0a6:	617b      	str	r3, [r7, #20]
 800c0a8:	e002      	b.n	800c0b0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c0aa:	f06f 0302 	mvn.w	r3, #2
 800c0ae:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c0b0:	697b      	ldr	r3, [r7, #20]
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3718      	adds	r7, #24
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	e000ed04 	.word	0xe000ed04

0800c0c0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b086      	sub	sp, #24
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d103      	bne.n	800c0de <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c0d6:	f06f 0303 	mvn.w	r3, #3
 800c0da:	617b      	str	r3, [r7, #20]
 800c0dc:	e02c      	b.n	800c138 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0de:	f3ef 8305 	mrs	r3, IPSR
 800c0e2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c0e4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d01a      	beq.n	800c120 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c0ee:	f107 0308 	add.w	r3, r7, #8
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6938      	ldr	r0, [r7, #16]
 800c0f6:	f000 fc50 	bl	800c99a <xQueueGiveFromISR>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b01      	cmp	r3, #1
 800c0fe:	d003      	beq.n	800c108 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c100:	f06f 0302 	mvn.w	r3, #2
 800c104:	617b      	str	r3, [r7, #20]
 800c106:	e017      	b.n	800c138 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d014      	beq.n	800c138 <osSemaphoreRelease+0x78>
 800c10e:	4b0d      	ldr	r3, [pc, #52]	; (800c144 <osSemaphoreRelease+0x84>)
 800c110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c114:	601a      	str	r2, [r3, #0]
 800c116:	f3bf 8f4f 	dsb	sy
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	e00b      	b.n	800c138 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c120:	2300      	movs	r3, #0
 800c122:	2200      	movs	r2, #0
 800c124:	2100      	movs	r1, #0
 800c126:	6938      	ldr	r0, [r7, #16]
 800c128:	f000 fa9e 	bl	800c668 <xQueueGenericSend>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d002      	beq.n	800c138 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c132:	f06f 0302 	mvn.w	r3, #2
 800c136:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c138:	697b      	ldr	r3, [r7, #20]
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3718      	adds	r7, #24
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
 800c142:	bf00      	nop
 800c144:	e000ed04 	.word	0xe000ed04

0800c148 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c148:	b480      	push	{r7}
 800c14a:	b085      	sub	sp, #20
 800c14c:	af00      	add	r7, sp, #0
 800c14e:	60f8      	str	r0, [r7, #12]
 800c150:	60b9      	str	r1, [r7, #8]
 800c152:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	4a07      	ldr	r2, [pc, #28]	; (800c174 <vApplicationGetIdleTaskMemory+0x2c>)
 800c158:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	4a06      	ldr	r2, [pc, #24]	; (800c178 <vApplicationGetIdleTaskMemory+0x30>)
 800c15e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2280      	movs	r2, #128	; 0x80
 800c164:	601a      	str	r2, [r3, #0]
}
 800c166:	bf00      	nop
 800c168:	3714      	adds	r7, #20
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	20003b88 	.word	0x20003b88
 800c178:	20003be4 	.word	0x20003be4

0800c17c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c17c:	b480      	push	{r7}
 800c17e:	b085      	sub	sp, #20
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	60b9      	str	r1, [r7, #8]
 800c186:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	4a07      	ldr	r2, [pc, #28]	; (800c1a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800c18c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	4a06      	ldr	r2, [pc, #24]	; (800c1ac <vApplicationGetTimerTaskMemory+0x30>)
 800c192:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c19a:	601a      	str	r2, [r3, #0]
}
 800c19c:	bf00      	nop
 800c19e:	3714      	adds	r7, #20
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr
 800c1a8:	20003de4 	.word	0x20003de4
 800c1ac:	20003e40 	.word	0x20003e40

0800c1b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f103 0208 	add.w	r2, r3, #8
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	f103 0208 	add.w	r2, r3, #8
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f103 0208 	add.w	r2, r3, #8
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c1e4:	bf00      	nop
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c1fe:	bf00      	nop
 800c200:	370c      	adds	r7, #12
 800c202:	46bd      	mov	sp, r7
 800c204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c208:	4770      	bx	lr

0800c20a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c20a:	b480      	push	{r7}
 800c20c:	b085      	sub	sp, #20
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
 800c212:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	68fa      	ldr	r2, [r7, #12]
 800c21e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	689a      	ldr	r2, [r3, #8]
 800c224:	683b      	ldr	r3, [r7, #0]
 800c226:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	689b      	ldr	r3, [r3, #8]
 800c22c:	683a      	ldr	r2, [r7, #0]
 800c22e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	683a      	ldr	r2, [r7, #0]
 800c234:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	687a      	ldr	r2, [r7, #4]
 800c23a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	1c5a      	adds	r2, r3, #1
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	601a      	str	r2, [r3, #0]
}
 800c246:	bf00      	nop
 800c248:	3714      	adds	r7, #20
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr

0800c252 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c252:	b480      	push	{r7}
 800c254:	b085      	sub	sp, #20
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c268:	d103      	bne.n	800c272 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	60fb      	str	r3, [r7, #12]
 800c270:	e00c      	b.n	800c28c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	3308      	adds	r3, #8
 800c276:	60fb      	str	r3, [r7, #12]
 800c278:	e002      	b.n	800c280 <vListInsert+0x2e>
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	60fb      	str	r3, [r7, #12]
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68ba      	ldr	r2, [r7, #8]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d2f6      	bcs.n	800c27a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	685a      	ldr	r2, [r3, #4]
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	683a      	ldr	r2, [r7, #0]
 800c29a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	683a      	ldr	r2, [r7, #0]
 800c2a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	1c5a      	adds	r2, r3, #1
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	601a      	str	r2, [r3, #0]
}
 800c2b8:	bf00      	nop
 800c2ba:	3714      	adds	r7, #20
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c2c4:	b480      	push	{r7}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	691b      	ldr	r3, [r3, #16]
 800c2d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	687a      	ldr	r2, [r7, #4]
 800c2d8:	6892      	ldr	r2, [r2, #8]
 800c2da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	689b      	ldr	r3, [r3, #8]
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	6852      	ldr	r2, [r2, #4]
 800c2e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d103      	bne.n	800c2f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	689a      	ldr	r2, [r3, #8]
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	1e5a      	subs	r2, r3, #1
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3714      	adds	r7, #20
 800c310:	46bd      	mov	sp, r7
 800c312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c316:	4770      	bx	lr

0800c318 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10a      	bne.n	800c342 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c330:	f383 8811 	msr	BASEPRI, r3
 800c334:	f3bf 8f6f 	isb	sy
 800c338:	f3bf 8f4f 	dsb	sy
 800c33c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c33e:	bf00      	nop
 800c340:	e7fe      	b.n	800c340 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c342:	f002 fc6f 	bl	800ec24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681a      	ldr	r2, [r3, #0]
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c34e:	68f9      	ldr	r1, [r7, #12]
 800c350:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c352:	fb01 f303 	mul.w	r3, r1, r3
 800c356:	441a      	add	r2, r3
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2200      	movs	r2, #0
 800c360:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c372:	3b01      	subs	r3, #1
 800c374:	68f9      	ldr	r1, [r7, #12]
 800c376:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c378:	fb01 f303 	mul.w	r3, r1, r3
 800c37c:	441a      	add	r2, r3
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	22ff      	movs	r2, #255	; 0xff
 800c386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	22ff      	movs	r2, #255	; 0xff
 800c38e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d114      	bne.n	800c3c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d01a      	beq.n	800c3d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	3310      	adds	r3, #16
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	f001 fc25 	bl	800dbf4 <xTaskRemoveFromEventList>
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d012      	beq.n	800c3d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c3b0:	4b0c      	ldr	r3, [pc, #48]	; (800c3e4 <xQueueGenericReset+0xcc>)
 800c3b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3b6:	601a      	str	r2, [r3, #0]
 800c3b8:	f3bf 8f4f 	dsb	sy
 800c3bc:	f3bf 8f6f 	isb	sy
 800c3c0:	e009      	b.n	800c3d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	3310      	adds	r3, #16
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f7ff fef2 	bl	800c1b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	3324      	adds	r3, #36	; 0x24
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	f7ff feed 	bl	800c1b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c3d6:	f002 fc55 	bl	800ec84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c3da:	2301      	movs	r3, #1
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3710      	adds	r7, #16
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}
 800c3e4:	e000ed04 	.word	0xe000ed04

0800c3e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b08e      	sub	sp, #56	; 0x38
 800c3ec:	af02      	add	r7, sp, #8
 800c3ee:	60f8      	str	r0, [r7, #12]
 800c3f0:	60b9      	str	r1, [r7, #8]
 800c3f2:	607a      	str	r2, [r7, #4]
 800c3f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d10a      	bne.n	800c412 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c3fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c40e:	bf00      	nop
 800c410:	e7fe      	b.n	800c410 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d10a      	bne.n	800c42e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c41c:	f383 8811 	msr	BASEPRI, r3
 800c420:	f3bf 8f6f 	isb	sy
 800c424:	f3bf 8f4f 	dsb	sy
 800c428:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c42a:	bf00      	nop
 800c42c:	e7fe      	b.n	800c42c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d002      	beq.n	800c43a <xQueueGenericCreateStatic+0x52>
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d001      	beq.n	800c43e <xQueueGenericCreateStatic+0x56>
 800c43a:	2301      	movs	r3, #1
 800c43c:	e000      	b.n	800c440 <xQueueGenericCreateStatic+0x58>
 800c43e:	2300      	movs	r3, #0
 800c440:	2b00      	cmp	r3, #0
 800c442:	d10a      	bne.n	800c45a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	623b      	str	r3, [r7, #32]
}
 800c456:	bf00      	nop
 800c458:	e7fe      	b.n	800c458 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d102      	bne.n	800c466 <xQueueGenericCreateStatic+0x7e>
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	2b00      	cmp	r3, #0
 800c464:	d101      	bne.n	800c46a <xQueueGenericCreateStatic+0x82>
 800c466:	2301      	movs	r3, #1
 800c468:	e000      	b.n	800c46c <xQueueGenericCreateStatic+0x84>
 800c46a:	2300      	movs	r3, #0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d10a      	bne.n	800c486 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c470:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c474:	f383 8811 	msr	BASEPRI, r3
 800c478:	f3bf 8f6f 	isb	sy
 800c47c:	f3bf 8f4f 	dsb	sy
 800c480:	61fb      	str	r3, [r7, #28]
}
 800c482:	bf00      	nop
 800c484:	e7fe      	b.n	800c484 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c486:	2350      	movs	r3, #80	; 0x50
 800c488:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	2b50      	cmp	r3, #80	; 0x50
 800c48e:	d00a      	beq.n	800c4a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c490:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c494:	f383 8811 	msr	BASEPRI, r3
 800c498:	f3bf 8f6f 	isb	sy
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	61bb      	str	r3, [r7, #24]
}
 800c4a2:	bf00      	nop
 800c4a4:	e7fe      	b.n	800c4a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c4a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d00d      	beq.n	800c4ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c0:	9300      	str	r3, [sp, #0]
 800c4c2:	4613      	mov	r3, r2
 800c4c4:	687a      	ldr	r2, [r7, #4]
 800c4c6:	68b9      	ldr	r1, [r7, #8]
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f000 f83f 	bl	800c54c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3730      	adds	r7, #48	; 0x30
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b08a      	sub	sp, #40	; 0x28
 800c4dc:	af02      	add	r7, sp, #8
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	4613      	mov	r3, r2
 800c4e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d10a      	bne.n	800c502 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f0:	f383 8811 	msr	BASEPRI, r3
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	613b      	str	r3, [r7, #16]
}
 800c4fe:	bf00      	nop
 800c500:	e7fe      	b.n	800c500 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	fb02 f303 	mul.w	r3, r2, r3
 800c50a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c50c:	69fb      	ldr	r3, [r7, #28]
 800c50e:	3350      	adds	r3, #80	; 0x50
 800c510:	4618      	mov	r0, r3
 800c512:	f002 fca9 	bl	800ee68 <pvPortMalloc>
 800c516:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c518:	69bb      	ldr	r3, [r7, #24]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d011      	beq.n	800c542 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	3350      	adds	r3, #80	; 0x50
 800c526:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c528:	69bb      	ldr	r3, [r7, #24]
 800c52a:	2200      	movs	r2, #0
 800c52c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c530:	79fa      	ldrb	r2, [r7, #7]
 800c532:	69bb      	ldr	r3, [r7, #24]
 800c534:	9300      	str	r3, [sp, #0]
 800c536:	4613      	mov	r3, r2
 800c538:	697a      	ldr	r2, [r7, #20]
 800c53a:	68b9      	ldr	r1, [r7, #8]
 800c53c:	68f8      	ldr	r0, [r7, #12]
 800c53e:	f000 f805 	bl	800c54c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c542:	69bb      	ldr	r3, [r7, #24]
	}
 800c544:	4618      	mov	r0, r3
 800c546:	3720      	adds	r7, #32
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	60f8      	str	r0, [r7, #12]
 800c554:	60b9      	str	r1, [r7, #8]
 800c556:	607a      	str	r2, [r7, #4]
 800c558:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d103      	bne.n	800c568 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	69ba      	ldr	r2, [r7, #24]
 800c564:	601a      	str	r2, [r3, #0]
 800c566:	e002      	b.n	800c56e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c568:	69bb      	ldr	r3, [r7, #24]
 800c56a:	687a      	ldr	r2, [r7, #4]
 800c56c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c56e:	69bb      	ldr	r3, [r7, #24]
 800c570:	68fa      	ldr	r2, [r7, #12]
 800c572:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c574:	69bb      	ldr	r3, [r7, #24]
 800c576:	68ba      	ldr	r2, [r7, #8]
 800c578:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c57a:	2101      	movs	r1, #1
 800c57c:	69b8      	ldr	r0, [r7, #24]
 800c57e:	f7ff fecb 	bl	800c318 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	78fa      	ldrb	r2, [r7, #3]
 800c586:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c58a:	bf00      	nop
 800c58c:	3710      	adds	r7, #16
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c592:	b580      	push	{r7, lr}
 800c594:	b08a      	sub	sp, #40	; 0x28
 800c596:	af02      	add	r7, sp, #8
 800c598:	60f8      	str	r0, [r7, #12]
 800c59a:	60b9      	str	r1, [r7, #8]
 800c59c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d10a      	bne.n	800c5ba <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c5a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5a8:	f383 8811 	msr	BASEPRI, r3
 800c5ac:	f3bf 8f6f 	isb	sy
 800c5b0:	f3bf 8f4f 	dsb	sy
 800c5b4:	61bb      	str	r3, [r7, #24]
}
 800c5b6:	bf00      	nop
 800c5b8:	e7fe      	b.n	800c5b8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c5ba:	68ba      	ldr	r2, [r7, #8]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	429a      	cmp	r2, r3
 800c5c0:	d90a      	bls.n	800c5d8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c5c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c6:	f383 8811 	msr	BASEPRI, r3
 800c5ca:	f3bf 8f6f 	isb	sy
 800c5ce:	f3bf 8f4f 	dsb	sy
 800c5d2:	617b      	str	r3, [r7, #20]
}
 800c5d4:	bf00      	nop
 800c5d6:	e7fe      	b.n	800c5d6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c5d8:	2302      	movs	r3, #2
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2200      	movs	r2, #0
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	68f8      	ldr	r0, [r7, #12]
 800c5e4:	f7ff ff00 	bl	800c3e8 <xQueueGenericCreateStatic>
 800c5e8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c5ea:	69fb      	ldr	r3, [r7, #28]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d002      	beq.n	800c5f6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	68ba      	ldr	r2, [r7, #8]
 800c5f4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c5f6:	69fb      	ldr	r3, [r7, #28]
	}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3720      	adds	r7, #32
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
 800c608:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d10a      	bne.n	800c626 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c610:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c614:	f383 8811 	msr	BASEPRI, r3
 800c618:	f3bf 8f6f 	isb	sy
 800c61c:	f3bf 8f4f 	dsb	sy
 800c620:	613b      	str	r3, [r7, #16]
}
 800c622:	bf00      	nop
 800c624:	e7fe      	b.n	800c624 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c626:	683a      	ldr	r2, [r7, #0]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d90a      	bls.n	800c644 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c632:	f383 8811 	msr	BASEPRI, r3
 800c636:	f3bf 8f6f 	isb	sy
 800c63a:	f3bf 8f4f 	dsb	sy
 800c63e:	60fb      	str	r3, [r7, #12]
}
 800c640:	bf00      	nop
 800c642:	e7fe      	b.n	800c642 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c644:	2202      	movs	r2, #2
 800c646:	2100      	movs	r1, #0
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7ff ff45 	bl	800c4d8 <xQueueGenericCreate>
 800c64e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d002      	beq.n	800c65c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c656:	697b      	ldr	r3, [r7, #20]
 800c658:	683a      	ldr	r2, [r7, #0]
 800c65a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c65c:	697b      	ldr	r3, [r7, #20]
	}
 800c65e:	4618      	mov	r0, r3
 800c660:	3718      	adds	r7, #24
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}
	...

0800c668 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b08e      	sub	sp, #56	; 0x38
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	607a      	str	r2, [r7, #4]
 800c674:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c676:	2300      	movs	r3, #0
 800c678:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c67e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c680:	2b00      	cmp	r3, #0
 800c682:	d10a      	bne.n	800c69a <xQueueGenericSend+0x32>
	__asm volatile
 800c684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c688:	f383 8811 	msr	BASEPRI, r3
 800c68c:	f3bf 8f6f 	isb	sy
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c696:	bf00      	nop
 800c698:	e7fe      	b.n	800c698 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d103      	bne.n	800c6a8 <xQueueGenericSend+0x40>
 800c6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d101      	bne.n	800c6ac <xQueueGenericSend+0x44>
 800c6a8:	2301      	movs	r3, #1
 800c6aa:	e000      	b.n	800c6ae <xQueueGenericSend+0x46>
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d10a      	bne.n	800c6c8 <xQueueGenericSend+0x60>
	__asm volatile
 800c6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b6:	f383 8811 	msr	BASEPRI, r3
 800c6ba:	f3bf 8f6f 	isb	sy
 800c6be:	f3bf 8f4f 	dsb	sy
 800c6c2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c6c4:	bf00      	nop
 800c6c6:	e7fe      	b.n	800c6c6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	2b02      	cmp	r3, #2
 800c6cc:	d103      	bne.n	800c6d6 <xQueueGenericSend+0x6e>
 800c6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6d2:	2b01      	cmp	r3, #1
 800c6d4:	d101      	bne.n	800c6da <xQueueGenericSend+0x72>
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	e000      	b.n	800c6dc <xQueueGenericSend+0x74>
 800c6da:	2300      	movs	r3, #0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d10a      	bne.n	800c6f6 <xQueueGenericSend+0x8e>
	__asm volatile
 800c6e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e4:	f383 8811 	msr	BASEPRI, r3
 800c6e8:	f3bf 8f6f 	isb	sy
 800c6ec:	f3bf 8f4f 	dsb	sy
 800c6f0:	623b      	str	r3, [r7, #32]
}
 800c6f2:	bf00      	nop
 800c6f4:	e7fe      	b.n	800c6f4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c6f6:	f001 fc3b 	bl	800df70 <xTaskGetSchedulerState>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d102      	bne.n	800c706 <xQueueGenericSend+0x9e>
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d101      	bne.n	800c70a <xQueueGenericSend+0xa2>
 800c706:	2301      	movs	r3, #1
 800c708:	e000      	b.n	800c70c <xQueueGenericSend+0xa4>
 800c70a:	2300      	movs	r3, #0
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10a      	bne.n	800c726 <xQueueGenericSend+0xbe>
	__asm volatile
 800c710:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c714:	f383 8811 	msr	BASEPRI, r3
 800c718:	f3bf 8f6f 	isb	sy
 800c71c:	f3bf 8f4f 	dsb	sy
 800c720:	61fb      	str	r3, [r7, #28]
}
 800c722:	bf00      	nop
 800c724:	e7fe      	b.n	800c724 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c726:	f002 fa7d 	bl	800ec24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c72a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c72e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c732:	429a      	cmp	r2, r3
 800c734:	d302      	bcc.n	800c73c <xQueueGenericSend+0xd4>
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	2b02      	cmp	r3, #2
 800c73a:	d129      	bne.n	800c790 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c73c:	683a      	ldr	r2, [r7, #0]
 800c73e:	68b9      	ldr	r1, [r7, #8]
 800c740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c742:	f000 fc5e 	bl	800d002 <prvCopyDataToQueue>
 800c746:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d010      	beq.n	800c772 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c752:	3324      	adds	r3, #36	; 0x24
 800c754:	4618      	mov	r0, r3
 800c756:	f001 fa4d 	bl	800dbf4 <xTaskRemoveFromEventList>
 800c75a:	4603      	mov	r3, r0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d013      	beq.n	800c788 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c760:	4b3f      	ldr	r3, [pc, #252]	; (800c860 <xQueueGenericSend+0x1f8>)
 800c762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c766:	601a      	str	r2, [r3, #0]
 800c768:	f3bf 8f4f 	dsb	sy
 800c76c:	f3bf 8f6f 	isb	sy
 800c770:	e00a      	b.n	800c788 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c774:	2b00      	cmp	r3, #0
 800c776:	d007      	beq.n	800c788 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c778:	4b39      	ldr	r3, [pc, #228]	; (800c860 <xQueueGenericSend+0x1f8>)
 800c77a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c77e:	601a      	str	r2, [r3, #0]
 800c780:	f3bf 8f4f 	dsb	sy
 800c784:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c788:	f002 fa7c 	bl	800ec84 <vPortExitCritical>
				return pdPASS;
 800c78c:	2301      	movs	r3, #1
 800c78e:	e063      	b.n	800c858 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d103      	bne.n	800c79e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c796:	f002 fa75 	bl	800ec84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c79a:	2300      	movs	r3, #0
 800c79c:	e05c      	b.n	800c858 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d106      	bne.n	800c7b2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c7a4:	f107 0314 	add.w	r3, r7, #20
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f001 fa87 	bl	800dcbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c7b2:	f002 fa67 	bl	800ec84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c7b6:	f000 fff9 	bl	800d7ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c7ba:	f002 fa33 	bl	800ec24 <vPortEnterCritical>
 800c7be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c7c4:	b25b      	sxtb	r3, r3
 800c7c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7ca:	d103      	bne.n	800c7d4 <xQueueGenericSend+0x16c>
 800c7cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7da:	b25b      	sxtb	r3, r3
 800c7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e0:	d103      	bne.n	800c7ea <xQueueGenericSend+0x182>
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e4:	2200      	movs	r2, #0
 800c7e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c7ea:	f002 fa4b 	bl	800ec84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c7ee:	1d3a      	adds	r2, r7, #4
 800c7f0:	f107 0314 	add.w	r3, r7, #20
 800c7f4:	4611      	mov	r1, r2
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f001 fa76 	bl	800dce8 <xTaskCheckForTimeOut>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d124      	bne.n	800c84c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c804:	f000 fcf5 	bl	800d1f2 <prvIsQueueFull>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d018      	beq.n	800c840 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c80e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c810:	3310      	adds	r3, #16
 800c812:	687a      	ldr	r2, [r7, #4]
 800c814:	4611      	mov	r1, r2
 800c816:	4618      	mov	r0, r3
 800c818:	f001 f99c 	bl	800db54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c81c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c81e:	f000 fc80 	bl	800d122 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c822:	f000 ffd1 	bl	800d7c8 <xTaskResumeAll>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	f47f af7c 	bne.w	800c726 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c82e:	4b0c      	ldr	r3, [pc, #48]	; (800c860 <xQueueGenericSend+0x1f8>)
 800c830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c834:	601a      	str	r2, [r3, #0]
 800c836:	f3bf 8f4f 	dsb	sy
 800c83a:	f3bf 8f6f 	isb	sy
 800c83e:	e772      	b.n	800c726 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c842:	f000 fc6e 	bl	800d122 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c846:	f000 ffbf 	bl	800d7c8 <xTaskResumeAll>
 800c84a:	e76c      	b.n	800c726 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c84c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c84e:	f000 fc68 	bl	800d122 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c852:	f000 ffb9 	bl	800d7c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c856:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c858:	4618      	mov	r0, r3
 800c85a:	3738      	adds	r7, #56	; 0x38
 800c85c:	46bd      	mov	sp, r7
 800c85e:	bd80      	pop	{r7, pc}
 800c860:	e000ed04 	.word	0xe000ed04

0800c864 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b090      	sub	sp, #64	; 0x40
 800c868:	af00      	add	r7, sp, #0
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
 800c870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d10a      	bne.n	800c892 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c880:	f383 8811 	msr	BASEPRI, r3
 800c884:	f3bf 8f6f 	isb	sy
 800c888:	f3bf 8f4f 	dsb	sy
 800c88c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c88e:	bf00      	nop
 800c890:	e7fe      	b.n	800c890 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d103      	bne.n	800c8a0 <xQueueGenericSendFromISR+0x3c>
 800c898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d101      	bne.n	800c8a4 <xQueueGenericSendFromISR+0x40>
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	e000      	b.n	800c8a6 <xQueueGenericSendFromISR+0x42>
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d10a      	bne.n	800c8c0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8ae:	f383 8811 	msr	BASEPRI, r3
 800c8b2:	f3bf 8f6f 	isb	sy
 800c8b6:	f3bf 8f4f 	dsb	sy
 800c8ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c8bc:	bf00      	nop
 800c8be:	e7fe      	b.n	800c8be <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	2b02      	cmp	r3, #2
 800c8c4:	d103      	bne.n	800c8ce <xQueueGenericSendFromISR+0x6a>
 800c8c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d101      	bne.n	800c8d2 <xQueueGenericSendFromISR+0x6e>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e000      	b.n	800c8d4 <xQueueGenericSendFromISR+0x70>
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d10a      	bne.n	800c8ee <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c8d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8dc:	f383 8811 	msr	BASEPRI, r3
 800c8e0:	f3bf 8f6f 	isb	sy
 800c8e4:	f3bf 8f4f 	dsb	sy
 800c8e8:	623b      	str	r3, [r7, #32]
}
 800c8ea:	bf00      	nop
 800c8ec:	e7fe      	b.n	800c8ec <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c8ee:	f002 fa7b 	bl	800ede8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c8f2:	f3ef 8211 	mrs	r2, BASEPRI
 800c8f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8fa:	f383 8811 	msr	BASEPRI, r3
 800c8fe:	f3bf 8f6f 	isb	sy
 800c902:	f3bf 8f4f 	dsb	sy
 800c906:	61fa      	str	r2, [r7, #28]
 800c908:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c90a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c90c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c916:	429a      	cmp	r2, r3
 800c918:	d302      	bcc.n	800c920 <xQueueGenericSendFromISR+0xbc>
 800c91a:	683b      	ldr	r3, [r7, #0]
 800c91c:	2b02      	cmp	r3, #2
 800c91e:	d12f      	bne.n	800c980 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c922:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c92e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c930:	683a      	ldr	r2, [r7, #0]
 800c932:	68b9      	ldr	r1, [r7, #8]
 800c934:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c936:	f000 fb64 	bl	800d002 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c93a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c93e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c942:	d112      	bne.n	800c96a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d016      	beq.n	800c97a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c94e:	3324      	adds	r3, #36	; 0x24
 800c950:	4618      	mov	r0, r3
 800c952:	f001 f94f 	bl	800dbf4 <xTaskRemoveFromEventList>
 800c956:	4603      	mov	r3, r0
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d00e      	beq.n	800c97a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d00b      	beq.n	800c97a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	2201      	movs	r2, #1
 800c966:	601a      	str	r2, [r3, #0]
 800c968:	e007      	b.n	800c97a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c96a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c96e:	3301      	adds	r3, #1
 800c970:	b2db      	uxtb	r3, r3
 800c972:	b25a      	sxtb	r2, r3
 800c974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c976:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c97a:	2301      	movs	r3, #1
 800c97c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c97e:	e001      	b.n	800c984 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c980:	2300      	movs	r3, #0
 800c982:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c986:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c98e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c992:	4618      	mov	r0, r3
 800c994:	3740      	adds	r7, #64	; 0x40
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}

0800c99a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c99a:	b580      	push	{r7, lr}
 800c99c:	b08e      	sub	sp, #56	; 0x38
 800c99e:	af00      	add	r7, sp, #0
 800c9a0:	6078      	str	r0, [r7, #4]
 800c9a2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d10a      	bne.n	800c9c4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b2:	f383 8811 	msr	BASEPRI, r3
 800c9b6:	f3bf 8f6f 	isb	sy
 800c9ba:	f3bf 8f4f 	dsb	sy
 800c9be:	623b      	str	r3, [r7, #32]
}
 800c9c0:	bf00      	nop
 800c9c2:	e7fe      	b.n	800c9c2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d00a      	beq.n	800c9e2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c9cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9d0:	f383 8811 	msr	BASEPRI, r3
 800c9d4:	f3bf 8f6f 	isb	sy
 800c9d8:	f3bf 8f4f 	dsb	sy
 800c9dc:	61fb      	str	r3, [r7, #28]
}
 800c9de:	bf00      	nop
 800c9e0:	e7fe      	b.n	800c9e0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c9e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d103      	bne.n	800c9f2 <xQueueGiveFromISR+0x58>
 800c9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ec:	689b      	ldr	r3, [r3, #8]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d101      	bne.n	800c9f6 <xQueueGiveFromISR+0x5c>
 800c9f2:	2301      	movs	r3, #1
 800c9f4:	e000      	b.n	800c9f8 <xQueueGiveFromISR+0x5e>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d10a      	bne.n	800ca12 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca00:	f383 8811 	msr	BASEPRI, r3
 800ca04:	f3bf 8f6f 	isb	sy
 800ca08:	f3bf 8f4f 	dsb	sy
 800ca0c:	61bb      	str	r3, [r7, #24]
}
 800ca0e:	bf00      	nop
 800ca10:	e7fe      	b.n	800ca10 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca12:	f002 f9e9 	bl	800ede8 <vPortValidateInterruptPriority>
	__asm volatile
 800ca16:	f3ef 8211 	mrs	r2, BASEPRI
 800ca1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca1e:	f383 8811 	msr	BASEPRI, r3
 800ca22:	f3bf 8f6f 	isb	sy
 800ca26:	f3bf 8f4f 	dsb	sy
 800ca2a:	617a      	str	r2, [r7, #20]
 800ca2c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ca2e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca30:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca36:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ca38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca3e:	429a      	cmp	r2, r3
 800ca40:	d22b      	bcs.n	800ca9a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ca42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ca48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4e:	1c5a      	adds	r2, r3, #1
 800ca50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca52:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ca54:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ca58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca5c:	d112      	bne.n	800ca84 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d016      	beq.n	800ca94 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca68:	3324      	adds	r3, #36	; 0x24
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f001 f8c2 	bl	800dbf4 <xTaskRemoveFromEventList>
 800ca70:	4603      	mov	r3, r0
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d00e      	beq.n	800ca94 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ca76:	683b      	ldr	r3, [r7, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d00b      	beq.n	800ca94 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	2201      	movs	r2, #1
 800ca80:	601a      	str	r2, [r3, #0]
 800ca82:	e007      	b.n	800ca94 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ca84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca88:	3301      	adds	r3, #1
 800ca8a:	b2db      	uxtb	r3, r3
 800ca8c:	b25a      	sxtb	r2, r3
 800ca8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ca94:	2301      	movs	r3, #1
 800ca96:	637b      	str	r3, [r7, #52]	; 0x34
 800ca98:	e001      	b.n	800ca9e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	637b      	str	r3, [r7, #52]	; 0x34
 800ca9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	f383 8811 	msr	BASEPRI, r3
}
 800caa8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800caaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800caac:	4618      	mov	r0, r3
 800caae:	3738      	adds	r7, #56	; 0x38
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b08c      	sub	sp, #48	; 0x30
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cac0:	2300      	movs	r3, #0
 800cac2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d10a      	bne.n	800cae4 <xQueueReceive+0x30>
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	623b      	str	r3, [r7, #32]
}
 800cae0:	bf00      	nop
 800cae2:	e7fe      	b.n	800cae2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cae4:	68bb      	ldr	r3, [r7, #8]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d103      	bne.n	800caf2 <xQueueReceive+0x3e>
 800caea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d101      	bne.n	800caf6 <xQueueReceive+0x42>
 800caf2:	2301      	movs	r3, #1
 800caf4:	e000      	b.n	800caf8 <xQueueReceive+0x44>
 800caf6:	2300      	movs	r3, #0
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d10a      	bne.n	800cb12 <xQueueReceive+0x5e>
	__asm volatile
 800cafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb00:	f383 8811 	msr	BASEPRI, r3
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	61fb      	str	r3, [r7, #28]
}
 800cb0e:	bf00      	nop
 800cb10:	e7fe      	b.n	800cb10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb12:	f001 fa2d 	bl	800df70 <xTaskGetSchedulerState>
 800cb16:	4603      	mov	r3, r0
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d102      	bne.n	800cb22 <xQueueReceive+0x6e>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d101      	bne.n	800cb26 <xQueueReceive+0x72>
 800cb22:	2301      	movs	r3, #1
 800cb24:	e000      	b.n	800cb28 <xQueueReceive+0x74>
 800cb26:	2300      	movs	r3, #0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d10a      	bne.n	800cb42 <xQueueReceive+0x8e>
	__asm volatile
 800cb2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb30:	f383 8811 	msr	BASEPRI, r3
 800cb34:	f3bf 8f6f 	isb	sy
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	61bb      	str	r3, [r7, #24]
}
 800cb3e:	bf00      	nop
 800cb40:	e7fe      	b.n	800cb40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb42:	f002 f86f 	bl	800ec24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d01f      	beq.n	800cb92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cb52:	68b9      	ldr	r1, [r7, #8]
 800cb54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cb56:	f000 fabe 	bl	800d0d6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5c:	1e5a      	subs	r2, r3, #1
 800cb5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb64:	691b      	ldr	r3, [r3, #16]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d00f      	beq.n	800cb8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb6c:	3310      	adds	r3, #16
 800cb6e:	4618      	mov	r0, r3
 800cb70:	f001 f840 	bl	800dbf4 <xTaskRemoveFromEventList>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d007      	beq.n	800cb8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cb7a:	4b3d      	ldr	r3, [pc, #244]	; (800cc70 <xQueueReceive+0x1bc>)
 800cb7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	f3bf 8f4f 	dsb	sy
 800cb86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cb8a:	f002 f87b 	bl	800ec84 <vPortExitCritical>
				return pdPASS;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	e069      	b.n	800cc66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d103      	bne.n	800cba0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cb98:	f002 f874 	bl	800ec84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	e062      	b.n	800cc66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d106      	bne.n	800cbb4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cba6:	f107 0310 	add.w	r3, r7, #16
 800cbaa:	4618      	mov	r0, r3
 800cbac:	f001 f886 	bl	800dcbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cbb4:	f002 f866 	bl	800ec84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cbb8:	f000 fdf8 	bl	800d7ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cbbc:	f002 f832 	bl	800ec24 <vPortEnterCritical>
 800cbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cbc6:	b25b      	sxtb	r3, r3
 800cbc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbcc:	d103      	bne.n	800cbd6 <xQueueReceive+0x122>
 800cbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cbdc:	b25b      	sxtb	r3, r3
 800cbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe2:	d103      	bne.n	800cbec <xQueueReceive+0x138>
 800cbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cbec:	f002 f84a 	bl	800ec84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cbf0:	1d3a      	adds	r2, r7, #4
 800cbf2:	f107 0310 	add.w	r3, r7, #16
 800cbf6:	4611      	mov	r1, r2
 800cbf8:	4618      	mov	r0, r3
 800cbfa:	f001 f875 	bl	800dce8 <xTaskCheckForTimeOut>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d123      	bne.n	800cc4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc06:	f000 fade 	bl	800d1c6 <prvIsQueueEmpty>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d017      	beq.n	800cc40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc12:	3324      	adds	r3, #36	; 0x24
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	4611      	mov	r1, r2
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f000 ff9b 	bl	800db54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cc1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc20:	f000 fa7f 	bl	800d122 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc24:	f000 fdd0 	bl	800d7c8 <xTaskResumeAll>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d189      	bne.n	800cb42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cc2e:	4b10      	ldr	r3, [pc, #64]	; (800cc70 <xQueueReceive+0x1bc>)
 800cc30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc34:	601a      	str	r2, [r3, #0]
 800cc36:	f3bf 8f4f 	dsb	sy
 800cc3a:	f3bf 8f6f 	isb	sy
 800cc3e:	e780      	b.n	800cb42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cc40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc42:	f000 fa6e 	bl	800d122 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc46:	f000 fdbf 	bl	800d7c8 <xTaskResumeAll>
 800cc4a:	e77a      	b.n	800cb42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cc4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc4e:	f000 fa68 	bl	800d122 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc52:	f000 fdb9 	bl	800d7c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc58:	f000 fab5 	bl	800d1c6 <prvIsQueueEmpty>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	f43f af6f 	beq.w	800cb42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cc64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3730      	adds	r7, #48	; 0x30
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}
 800cc6e:	bf00      	nop
 800cc70:	e000ed04 	.word	0xe000ed04

0800cc74 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b08e      	sub	sp, #56	; 0x38
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cc86:	2300      	movs	r3, #0
 800cc88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cc8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d10a      	bne.n	800cca6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800cc90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc94:	f383 8811 	msr	BASEPRI, r3
 800cc98:	f3bf 8f6f 	isb	sy
 800cc9c:	f3bf 8f4f 	dsb	sy
 800cca0:	623b      	str	r3, [r7, #32]
}
 800cca2:	bf00      	nop
 800cca4:	e7fe      	b.n	800cca4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d00a      	beq.n	800ccc4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ccae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccb2:	f383 8811 	msr	BASEPRI, r3
 800ccb6:	f3bf 8f6f 	isb	sy
 800ccba:	f3bf 8f4f 	dsb	sy
 800ccbe:	61fb      	str	r3, [r7, #28]
}
 800ccc0:	bf00      	nop
 800ccc2:	e7fe      	b.n	800ccc2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ccc4:	f001 f954 	bl	800df70 <xTaskGetSchedulerState>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d102      	bne.n	800ccd4 <xQueueSemaphoreTake+0x60>
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d101      	bne.n	800ccd8 <xQueueSemaphoreTake+0x64>
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e000      	b.n	800ccda <xQueueSemaphoreTake+0x66>
 800ccd8:	2300      	movs	r3, #0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d10a      	bne.n	800ccf4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ccde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	61bb      	str	r3, [r7, #24]
}
 800ccf0:	bf00      	nop
 800ccf2:	e7fe      	b.n	800ccf2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ccf4:	f001 ff96 	bl	800ec24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ccf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccfc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ccfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d024      	beq.n	800cd4e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd06:	1e5a      	subs	r2, r3, #1
 800cd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d104      	bne.n	800cd1e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cd14:	f001 faa2 	bl	800e25c <pvTaskIncrementMutexHeldCount>
 800cd18:	4602      	mov	r2, r0
 800cd1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd20:	691b      	ldr	r3, [r3, #16]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d00f      	beq.n	800cd46 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd28:	3310      	adds	r3, #16
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f000 ff62 	bl	800dbf4 <xTaskRemoveFromEventList>
 800cd30:	4603      	mov	r3, r0
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d007      	beq.n	800cd46 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cd36:	4b54      	ldr	r3, [pc, #336]	; (800ce88 <xQueueSemaphoreTake+0x214>)
 800cd38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd3c:	601a      	str	r2, [r3, #0]
 800cd3e:	f3bf 8f4f 	dsb	sy
 800cd42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cd46:	f001 ff9d 	bl	800ec84 <vPortExitCritical>
				return pdPASS;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	e097      	b.n	800ce7e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd4e:	683b      	ldr	r3, [r7, #0]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d111      	bne.n	800cd78 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cd54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d00a      	beq.n	800cd70 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800cd5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd5e:	f383 8811 	msr	BASEPRI, r3
 800cd62:	f3bf 8f6f 	isb	sy
 800cd66:	f3bf 8f4f 	dsb	sy
 800cd6a:	617b      	str	r3, [r7, #20]
}
 800cd6c:	bf00      	nop
 800cd6e:	e7fe      	b.n	800cd6e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cd70:	f001 ff88 	bl	800ec84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cd74:	2300      	movs	r3, #0
 800cd76:	e082      	b.n	800ce7e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cd78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d106      	bne.n	800cd8c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd7e:	f107 030c 	add.w	r3, r7, #12
 800cd82:	4618      	mov	r0, r3
 800cd84:	f000 ff9a 	bl	800dcbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd8c:	f001 ff7a 	bl	800ec84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd90:	f000 fd0c 	bl	800d7ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd94:	f001 ff46 	bl	800ec24 <vPortEnterCritical>
 800cd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd9e:	b25b      	sxtb	r3, r3
 800cda0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cda4:	d103      	bne.n	800cdae <xQueueSemaphoreTake+0x13a>
 800cda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cda8:	2200      	movs	r2, #0
 800cdaa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdb4:	b25b      	sxtb	r3, r3
 800cdb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdba:	d103      	bne.n	800cdc4 <xQueueSemaphoreTake+0x150>
 800cdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cdc4:	f001 ff5e 	bl	800ec84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cdc8:	463a      	mov	r2, r7
 800cdca:	f107 030c 	add.w	r3, r7, #12
 800cdce:	4611      	mov	r1, r2
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	f000 ff89 	bl	800dce8 <xTaskCheckForTimeOut>
 800cdd6:	4603      	mov	r3, r0
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d132      	bne.n	800ce42 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdde:	f000 f9f2 	bl	800d1c6 <prvIsQueueEmpty>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d026      	beq.n	800ce36 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d109      	bne.n	800ce04 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cdf0:	f001 ff18 	bl	800ec24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf6:	689b      	ldr	r3, [r3, #8]
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f001 f8d7 	bl	800dfac <xTaskPriorityInherit>
 800cdfe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ce00:	f001 ff40 	bl	800ec84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce06:	3324      	adds	r3, #36	; 0x24
 800ce08:	683a      	ldr	r2, [r7, #0]
 800ce0a:	4611      	mov	r1, r2
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f000 fea1 	bl	800db54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce14:	f000 f985 	bl	800d122 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce18:	f000 fcd6 	bl	800d7c8 <xTaskResumeAll>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	f47f af68 	bne.w	800ccf4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800ce24:	4b18      	ldr	r3, [pc, #96]	; (800ce88 <xQueueSemaphoreTake+0x214>)
 800ce26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce2a:	601a      	str	r2, [r3, #0]
 800ce2c:	f3bf 8f4f 	dsb	sy
 800ce30:	f3bf 8f6f 	isb	sy
 800ce34:	e75e      	b.n	800ccf4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ce36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce38:	f000 f973 	bl	800d122 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce3c:	f000 fcc4 	bl	800d7c8 <xTaskResumeAll>
 800ce40:	e758      	b.n	800ccf4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ce42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce44:	f000 f96d 	bl	800d122 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce48:	f000 fcbe 	bl	800d7c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce4c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce4e:	f000 f9ba 	bl	800d1c6 <prvIsQueueEmpty>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	f43f af4d 	beq.w	800ccf4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ce5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d00d      	beq.n	800ce7c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800ce60:	f001 fee0 	bl	800ec24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ce64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce66:	f000 f8b4 	bl	800cfd2 <prvGetDisinheritPriorityAfterTimeout>
 800ce6a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ce6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ce72:	4618      	mov	r0, r3
 800ce74:	f001 f970 	bl	800e158 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ce78:	f001 ff04 	bl	800ec84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ce7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3738      	adds	r7, #56	; 0x38
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	e000ed04 	.word	0xe000ed04

0800ce8c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b08e      	sub	sp, #56	; 0x38
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ce9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d10a      	bne.n	800ceb8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cea6:	f383 8811 	msr	BASEPRI, r3
 800ceaa:	f3bf 8f6f 	isb	sy
 800ceae:	f3bf 8f4f 	dsb	sy
 800ceb2:	623b      	str	r3, [r7, #32]
}
 800ceb4:	bf00      	nop
 800ceb6:	e7fe      	b.n	800ceb6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d103      	bne.n	800cec6 <xQueueReceiveFromISR+0x3a>
 800cebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d101      	bne.n	800ceca <xQueueReceiveFromISR+0x3e>
 800cec6:	2301      	movs	r3, #1
 800cec8:	e000      	b.n	800cecc <xQueueReceiveFromISR+0x40>
 800ceca:	2300      	movs	r3, #0
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d10a      	bne.n	800cee6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800ced0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced4:	f383 8811 	msr	BASEPRI, r3
 800ced8:	f3bf 8f6f 	isb	sy
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	61fb      	str	r3, [r7, #28]
}
 800cee2:	bf00      	nop
 800cee4:	e7fe      	b.n	800cee4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cee6:	f001 ff7f 	bl	800ede8 <vPortValidateInterruptPriority>
	__asm volatile
 800ceea:	f3ef 8211 	mrs	r2, BASEPRI
 800ceee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cef2:	f383 8811 	msr	BASEPRI, r3
 800cef6:	f3bf 8f6f 	isb	sy
 800cefa:	f3bf 8f4f 	dsb	sy
 800cefe:	61ba      	str	r2, [r7, #24]
 800cf00:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cf02:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cf04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cf0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d02f      	beq.n	800cf72 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cf18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cf1c:	68b9      	ldr	r1, [r7, #8]
 800cf1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf20:	f000 f8d9 	bl	800d0d6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf26:	1e5a      	subs	r2, r3, #1
 800cf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf2a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cf2c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf34:	d112      	bne.n	800cf5c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d016      	beq.n	800cf6c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf40:	3310      	adds	r3, #16
 800cf42:	4618      	mov	r0, r3
 800cf44:	f000 fe56 	bl	800dbf4 <xTaskRemoveFromEventList>
 800cf48:	4603      	mov	r3, r0
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d00e      	beq.n	800cf6c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d00b      	beq.n	800cf6c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2201      	movs	r2, #1
 800cf58:	601a      	str	r2, [r3, #0]
 800cf5a:	e007      	b.n	800cf6c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cf5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf60:	3301      	adds	r3, #1
 800cf62:	b2db      	uxtb	r3, r3
 800cf64:	b25a      	sxtb	r2, r3
 800cf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	637b      	str	r3, [r7, #52]	; 0x34
 800cf70:	e001      	b.n	800cf76 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cf72:	2300      	movs	r3, #0
 800cf74:	637b      	str	r3, [r7, #52]	; 0x34
 800cf76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf78:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	f383 8811 	msr	BASEPRI, r3
}
 800cf80:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cf84:	4618      	mov	r0, r3
 800cf86:	3738      	adds	r7, #56	; 0x38
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	bd80      	pop	{r7, pc}

0800cf8c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b084      	sub	sp, #16
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d10a      	bne.n	800cfb4 <vQueueDelete+0x28>
	__asm volatile
 800cf9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa2:	f383 8811 	msr	BASEPRI, r3
 800cfa6:	f3bf 8f6f 	isb	sy
 800cfaa:	f3bf 8f4f 	dsb	sy
 800cfae:	60bb      	str	r3, [r7, #8]
}
 800cfb0:	bf00      	nop
 800cfb2:	e7fe      	b.n	800cfb2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800cfb4:	68f8      	ldr	r0, [r7, #12]
 800cfb6:	f000 f95f 	bl	800d278 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d102      	bne.n	800cfca <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800cfc4:	68f8      	ldr	r0, [r7, #12]
 800cfc6:	f002 f81b 	bl	800f000 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800cfca:	bf00      	nop
 800cfcc:	3710      	adds	r7, #16
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}

0800cfd2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cfd2:	b480      	push	{r7}
 800cfd4:	b085      	sub	sp, #20
 800cfd6:	af00      	add	r7, sp, #0
 800cfd8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d006      	beq.n	800cff0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800cfec:	60fb      	str	r3, [r7, #12]
 800cfee:	e001      	b.n	800cff4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800cff0:	2300      	movs	r3, #0
 800cff2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800cff4:	68fb      	ldr	r3, [r7, #12]
	}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3714      	adds	r7, #20
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr

0800d002 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b086      	sub	sp, #24
 800d006:	af00      	add	r7, sp, #0
 800d008:	60f8      	str	r0, [r7, #12]
 800d00a:	60b9      	str	r1, [r7, #8]
 800d00c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d00e:	2300      	movs	r3, #0
 800d010:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d016:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d10d      	bne.n	800d03c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d14d      	bne.n	800d0c4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	689b      	ldr	r3, [r3, #8]
 800d02c:	4618      	mov	r0, r3
 800d02e:	f001 f825 	bl	800e07c <xTaskPriorityDisinherit>
 800d032:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	2200      	movs	r2, #0
 800d038:	609a      	str	r2, [r3, #8]
 800d03a:	e043      	b.n	800d0c4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d119      	bne.n	800d076 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	6858      	ldr	r0, [r3, #4]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d04a:	461a      	mov	r2, r3
 800d04c:	68b9      	ldr	r1, [r7, #8]
 800d04e:	f003 f843 	bl	80100d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	685a      	ldr	r2, [r3, #4]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d05a:	441a      	add	r2, r3
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	685a      	ldr	r2, [r3, #4]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d32b      	bcc.n	800d0c4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681a      	ldr	r2, [r3, #0]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	605a      	str	r2, [r3, #4]
 800d074:	e026      	b.n	800d0c4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	68d8      	ldr	r0, [r3, #12]
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d07e:	461a      	mov	r2, r3
 800d080:	68b9      	ldr	r1, [r7, #8]
 800d082:	f003 f829 	bl	80100d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	68da      	ldr	r2, [r3, #12]
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d08e:	425b      	negs	r3, r3
 800d090:	441a      	add	r2, r3
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	68da      	ldr	r2, [r3, #12]
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d207      	bcs.n	800d0b2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	689a      	ldr	r2, [r3, #8]
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0aa:	425b      	negs	r3, r3
 800d0ac:	441a      	add	r2, r3
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2b02      	cmp	r3, #2
 800d0b6:	d105      	bne.n	800d0c4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0b8:	693b      	ldr	r3, [r7, #16]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d002      	beq.n	800d0c4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d0be:	693b      	ldr	r3, [r7, #16]
 800d0c0:	3b01      	subs	r3, #1
 800d0c2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d0c4:	693b      	ldr	r3, [r7, #16]
 800d0c6:	1c5a      	adds	r2, r3, #1
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d0cc:	697b      	ldr	r3, [r7, #20]
}
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	3718      	adds	r7, #24
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	bd80      	pop	{r7, pc}

0800d0d6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d0d6:	b580      	push	{r7, lr}
 800d0d8:	b082      	sub	sp, #8
 800d0da:	af00      	add	r7, sp, #0
 800d0dc:	6078      	str	r0, [r7, #4]
 800d0de:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d018      	beq.n	800d11a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	68da      	ldr	r2, [r3, #12]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0f0:	441a      	add	r2, r3
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	68da      	ldr	r2, [r3, #12]
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	689b      	ldr	r3, [r3, #8]
 800d0fe:	429a      	cmp	r2, r3
 800d100:	d303      	bcc.n	800d10a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681a      	ldr	r2, [r3, #0]
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	68d9      	ldr	r1, [r3, #12]
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d112:	461a      	mov	r2, r3
 800d114:	6838      	ldr	r0, [r7, #0]
 800d116:	f002 ffdf 	bl	80100d8 <memcpy>
	}
}
 800d11a:	bf00      	nop
 800d11c:	3708      	adds	r7, #8
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}

0800d122 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d122:	b580      	push	{r7, lr}
 800d124:	b084      	sub	sp, #16
 800d126:	af00      	add	r7, sp, #0
 800d128:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d12a:	f001 fd7b 	bl	800ec24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d134:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d136:	e011      	b.n	800d15c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d012      	beq.n	800d166 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	3324      	adds	r3, #36	; 0x24
 800d144:	4618      	mov	r0, r3
 800d146:	f000 fd55 	bl	800dbf4 <xTaskRemoveFromEventList>
 800d14a:	4603      	mov	r3, r0
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d001      	beq.n	800d154 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d150:	f000 fe2c 	bl	800ddac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d154:	7bfb      	ldrb	r3, [r7, #15]
 800d156:	3b01      	subs	r3, #1
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d15c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d160:	2b00      	cmp	r3, #0
 800d162:	dce9      	bgt.n	800d138 <prvUnlockQueue+0x16>
 800d164:	e000      	b.n	800d168 <prvUnlockQueue+0x46>
					break;
 800d166:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	22ff      	movs	r2, #255	; 0xff
 800d16c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d170:	f001 fd88 	bl	800ec84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d174:	f001 fd56 	bl	800ec24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d17e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d180:	e011      	b.n	800d1a6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d012      	beq.n	800d1b0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	3310      	adds	r3, #16
 800d18e:	4618      	mov	r0, r3
 800d190:	f000 fd30 	bl	800dbf4 <xTaskRemoveFromEventList>
 800d194:	4603      	mov	r3, r0
 800d196:	2b00      	cmp	r3, #0
 800d198:	d001      	beq.n	800d19e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d19a:	f000 fe07 	bl	800ddac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d19e:	7bbb      	ldrb	r3, [r7, #14]
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d1a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	dce9      	bgt.n	800d182 <prvUnlockQueue+0x60>
 800d1ae:	e000      	b.n	800d1b2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d1b0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	22ff      	movs	r2, #255	; 0xff
 800d1b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d1ba:	f001 fd63 	bl	800ec84 <vPortExitCritical>
}
 800d1be:	bf00      	nop
 800d1c0:	3710      	adds	r7, #16
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}

0800d1c6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d1c6:	b580      	push	{r7, lr}
 800d1c8:	b084      	sub	sp, #16
 800d1ca:	af00      	add	r7, sp, #0
 800d1cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d1ce:	f001 fd29 	bl	800ec24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d102      	bne.n	800d1e0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	60fb      	str	r3, [r7, #12]
 800d1de:	e001      	b.n	800d1e4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d1e4:	f001 fd4e 	bl	800ec84 <vPortExitCritical>

	return xReturn;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3710      	adds	r7, #16
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b084      	sub	sp, #16
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d1fa:	f001 fd13 	bl	800ec24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d206:	429a      	cmp	r2, r3
 800d208:	d102      	bne.n	800d210 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d20a:	2301      	movs	r3, #1
 800d20c:	60fb      	str	r3, [r7, #12]
 800d20e:	e001      	b.n	800d214 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d210:	2300      	movs	r3, #0
 800d212:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d214:	f001 fd36 	bl	800ec84 <vPortExitCritical>

	return xReturn;
 800d218:	68fb      	ldr	r3, [r7, #12]
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
	...

0800d224 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d224:	b480      	push	{r7}
 800d226:	b085      	sub	sp, #20
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
 800d22c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d22e:	2300      	movs	r3, #0
 800d230:	60fb      	str	r3, [r7, #12]
 800d232:	e014      	b.n	800d25e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d234:	4a0f      	ldr	r2, [pc, #60]	; (800d274 <vQueueAddToRegistry+0x50>)
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d10b      	bne.n	800d258 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d240:	490c      	ldr	r1, [pc, #48]	; (800d274 <vQueueAddToRegistry+0x50>)
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	683a      	ldr	r2, [r7, #0]
 800d246:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d24a:	4a0a      	ldr	r2, [pc, #40]	; (800d274 <vQueueAddToRegistry+0x50>)
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	00db      	lsls	r3, r3, #3
 800d250:	4413      	add	r3, r2
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d256:	e006      	b.n	800d266 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	3301      	adds	r3, #1
 800d25c:	60fb      	str	r3, [r7, #12]
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	2b07      	cmp	r3, #7
 800d262:	d9e7      	bls.n	800d234 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d264:	bf00      	nop
 800d266:	bf00      	nop
 800d268:	3714      	adds	r7, #20
 800d26a:	46bd      	mov	sp, r7
 800d26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d270:	4770      	bx	lr
 800d272:	bf00      	nop
 800d274:	20004240 	.word	0x20004240

0800d278 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d278:	b480      	push	{r7}
 800d27a:	b085      	sub	sp, #20
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d280:	2300      	movs	r3, #0
 800d282:	60fb      	str	r3, [r7, #12]
 800d284:	e016      	b.n	800d2b4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d286:	4a10      	ldr	r2, [pc, #64]	; (800d2c8 <vQueueUnregisterQueue+0x50>)
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	00db      	lsls	r3, r3, #3
 800d28c:	4413      	add	r3, r2
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	687a      	ldr	r2, [r7, #4]
 800d292:	429a      	cmp	r2, r3
 800d294:	d10b      	bne.n	800d2ae <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d296:	4a0c      	ldr	r2, [pc, #48]	; (800d2c8 <vQueueUnregisterQueue+0x50>)
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	2100      	movs	r1, #0
 800d29c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d2a0:	4a09      	ldr	r2, [pc, #36]	; (800d2c8 <vQueueUnregisterQueue+0x50>)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	00db      	lsls	r3, r3, #3
 800d2a6:	4413      	add	r3, r2
 800d2a8:	2200      	movs	r2, #0
 800d2aa:	605a      	str	r2, [r3, #4]
				break;
 800d2ac:	e006      	b.n	800d2bc <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	60fb      	str	r3, [r7, #12]
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	2b07      	cmp	r3, #7
 800d2b8:	d9e5      	bls.n	800d286 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d2ba:	bf00      	nop
 800d2bc:	bf00      	nop
 800d2be:	3714      	adds	r7, #20
 800d2c0:	46bd      	mov	sp, r7
 800d2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c6:	4770      	bx	lr
 800d2c8:	20004240 	.word	0x20004240

0800d2cc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b086      	sub	sp, #24
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d2dc:	f001 fca2 	bl	800ec24 <vPortEnterCritical>
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d2e6:	b25b      	sxtb	r3, r3
 800d2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2ec:	d103      	bne.n	800d2f6 <vQueueWaitForMessageRestricted+0x2a>
 800d2ee:	697b      	ldr	r3, [r7, #20]
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d2fc:	b25b      	sxtb	r3, r3
 800d2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d302:	d103      	bne.n	800d30c <vQueueWaitForMessageRestricted+0x40>
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	2200      	movs	r2, #0
 800d308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d30c:	f001 fcba 	bl	800ec84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d314:	2b00      	cmp	r3, #0
 800d316:	d106      	bne.n	800d326 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	3324      	adds	r3, #36	; 0x24
 800d31c:	687a      	ldr	r2, [r7, #4]
 800d31e:	68b9      	ldr	r1, [r7, #8]
 800d320:	4618      	mov	r0, r3
 800d322:	f000 fc3b 	bl	800db9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d326:	6978      	ldr	r0, [r7, #20]
 800d328:	f7ff fefb 	bl	800d122 <prvUnlockQueue>
	}
 800d32c:	bf00      	nop
 800d32e:	3718      	adds	r7, #24
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d334:	b580      	push	{r7, lr}
 800d336:	b08e      	sub	sp, #56	; 0x38
 800d338:	af04      	add	r7, sp, #16
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	607a      	str	r2, [r7, #4]
 800d340:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10a      	bne.n	800d35e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34c:	f383 8811 	msr	BASEPRI, r3
 800d350:	f3bf 8f6f 	isb	sy
 800d354:	f3bf 8f4f 	dsb	sy
 800d358:	623b      	str	r3, [r7, #32]
}
 800d35a:	bf00      	nop
 800d35c:	e7fe      	b.n	800d35c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d35e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10a      	bne.n	800d37a <xTaskCreateStatic+0x46>
	__asm volatile
 800d364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d368:	f383 8811 	msr	BASEPRI, r3
 800d36c:	f3bf 8f6f 	isb	sy
 800d370:	f3bf 8f4f 	dsb	sy
 800d374:	61fb      	str	r3, [r7, #28]
}
 800d376:	bf00      	nop
 800d378:	e7fe      	b.n	800d378 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d37a:	235c      	movs	r3, #92	; 0x5c
 800d37c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	2b5c      	cmp	r3, #92	; 0x5c
 800d382:	d00a      	beq.n	800d39a <xTaskCreateStatic+0x66>
	__asm volatile
 800d384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	61bb      	str	r3, [r7, #24]
}
 800d396:	bf00      	nop
 800d398:	e7fe      	b.n	800d398 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d39a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d39c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d01e      	beq.n	800d3e0 <xTaskCreateStatic+0xac>
 800d3a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d01b      	beq.n	800d3e0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d3a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3aa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d3b0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3b4:	2202      	movs	r2, #2
 800d3b6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	9303      	str	r3, [sp, #12]
 800d3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c0:	9302      	str	r3, [sp, #8]
 800d3c2:	f107 0314 	add.w	r3, r7, #20
 800d3c6:	9301      	str	r3, [sp, #4]
 800d3c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3ca:	9300      	str	r3, [sp, #0]
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	687a      	ldr	r2, [r7, #4]
 800d3d0:	68b9      	ldr	r1, [r7, #8]
 800d3d2:	68f8      	ldr	r0, [r7, #12]
 800d3d4:	f000 f850 	bl	800d478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d3d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d3da:	f000 f8dd 	bl	800d598 <prvAddNewTaskToReadyList>
 800d3de:	e001      	b.n	800d3e4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d3e4:	697b      	ldr	r3, [r7, #20]
	}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	3728      	adds	r7, #40	; 0x28
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}

0800d3ee <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d3ee:	b580      	push	{r7, lr}
 800d3f0:	b08c      	sub	sp, #48	; 0x30
 800d3f2:	af04      	add	r7, sp, #16
 800d3f4:	60f8      	str	r0, [r7, #12]
 800d3f6:	60b9      	str	r1, [r7, #8]
 800d3f8:	603b      	str	r3, [r7, #0]
 800d3fa:	4613      	mov	r3, r2
 800d3fc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d3fe:	88fb      	ldrh	r3, [r7, #6]
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4618      	mov	r0, r3
 800d404:	f001 fd30 	bl	800ee68 <pvPortMalloc>
 800d408:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d00e      	beq.n	800d42e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d410:	205c      	movs	r0, #92	; 0x5c
 800d412:	f001 fd29 	bl	800ee68 <pvPortMalloc>
 800d416:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d418:	69fb      	ldr	r3, [r7, #28]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d003      	beq.n	800d426 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d41e:	69fb      	ldr	r3, [r7, #28]
 800d420:	697a      	ldr	r2, [r7, #20]
 800d422:	631a      	str	r2, [r3, #48]	; 0x30
 800d424:	e005      	b.n	800d432 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d426:	6978      	ldr	r0, [r7, #20]
 800d428:	f001 fdea 	bl	800f000 <vPortFree>
 800d42c:	e001      	b.n	800d432 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d42e:	2300      	movs	r3, #0
 800d430:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d432:	69fb      	ldr	r3, [r7, #28]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d017      	beq.n	800d468 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	2200      	movs	r2, #0
 800d43c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d440:	88fa      	ldrh	r2, [r7, #6]
 800d442:	2300      	movs	r3, #0
 800d444:	9303      	str	r3, [sp, #12]
 800d446:	69fb      	ldr	r3, [r7, #28]
 800d448:	9302      	str	r3, [sp, #8]
 800d44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44c:	9301      	str	r3, [sp, #4]
 800d44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d450:	9300      	str	r3, [sp, #0]
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	68b9      	ldr	r1, [r7, #8]
 800d456:	68f8      	ldr	r0, [r7, #12]
 800d458:	f000 f80e 	bl	800d478 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d45c:	69f8      	ldr	r0, [r7, #28]
 800d45e:	f000 f89b 	bl	800d598 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d462:	2301      	movs	r3, #1
 800d464:	61bb      	str	r3, [r7, #24]
 800d466:	e002      	b.n	800d46e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d468:	f04f 33ff 	mov.w	r3, #4294967295
 800d46c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d46e:	69bb      	ldr	r3, [r7, #24]
	}
 800d470:	4618      	mov	r0, r3
 800d472:	3720      	adds	r7, #32
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b088      	sub	sp, #32
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
 800d484:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d488:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	009b      	lsls	r3, r3, #2
 800d48e:	461a      	mov	r2, r3
 800d490:	21a5      	movs	r1, #165	; 0xa5
 800d492:	f002 fda4 	bl	800ffde <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d498:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800d4a0:	3b01      	subs	r3, #1
 800d4a2:	009b      	lsls	r3, r3, #2
 800d4a4:	4413      	add	r3, r2
 800d4a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d4a8:	69bb      	ldr	r3, [r7, #24]
 800d4aa:	f023 0307 	bic.w	r3, r3, #7
 800d4ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d4b0:	69bb      	ldr	r3, [r7, #24]
 800d4b2:	f003 0307 	and.w	r3, r3, #7
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d00a      	beq.n	800d4d0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4be:	f383 8811 	msr	BASEPRI, r3
 800d4c2:	f3bf 8f6f 	isb	sy
 800d4c6:	f3bf 8f4f 	dsb	sy
 800d4ca:	617b      	str	r3, [r7, #20]
}
 800d4cc:	bf00      	nop
 800d4ce:	e7fe      	b.n	800d4ce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d01f      	beq.n	800d516 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	61fb      	str	r3, [r7, #28]
 800d4da:	e012      	b.n	800d502 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d4dc:	68ba      	ldr	r2, [r7, #8]
 800d4de:	69fb      	ldr	r3, [r7, #28]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	7819      	ldrb	r1, [r3, #0]
 800d4e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	4413      	add	r3, r2
 800d4ea:	3334      	adds	r3, #52	; 0x34
 800d4ec:	460a      	mov	r2, r1
 800d4ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d4f0:	68ba      	ldr	r2, [r7, #8]
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	781b      	ldrb	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d006      	beq.n	800d50a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d4fc:	69fb      	ldr	r3, [r7, #28]
 800d4fe:	3301      	adds	r3, #1
 800d500:	61fb      	str	r3, [r7, #28]
 800d502:	69fb      	ldr	r3, [r7, #28]
 800d504:	2b0f      	cmp	r3, #15
 800d506:	d9e9      	bls.n	800d4dc <prvInitialiseNewTask+0x64>
 800d508:	e000      	b.n	800d50c <prvInitialiseNewTask+0x94>
			{
				break;
 800d50a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d50e:	2200      	movs	r2, #0
 800d510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d514:	e003      	b.n	800d51e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d518:	2200      	movs	r2, #0
 800d51a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d51e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d520:	2b37      	cmp	r3, #55	; 0x37
 800d522:	d901      	bls.n	800d528 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d524:	2337      	movs	r3, #55	; 0x37
 800d526:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d52c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d530:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d532:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d536:	2200      	movs	r2, #0
 800d538:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	3304      	adds	r3, #4
 800d53e:	4618      	mov	r0, r3
 800d540:	f7fe fe56 	bl	800c1f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d546:	3318      	adds	r3, #24
 800d548:	4618      	mov	r0, r3
 800d54a:	f7fe fe51 	bl	800c1f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d552:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d556:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d55c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d55e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d562:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d566:	2200      	movs	r2, #0
 800d568:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d56a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56c:	2200      	movs	r2, #0
 800d56e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d572:	683a      	ldr	r2, [r7, #0]
 800d574:	68f9      	ldr	r1, [r7, #12]
 800d576:	69b8      	ldr	r0, [r7, #24]
 800d578:	f001 fa26 	bl	800e9c8 <pxPortInitialiseStack>
 800d57c:	4602      	mov	r2, r0
 800d57e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d580:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d584:	2b00      	cmp	r3, #0
 800d586:	d002      	beq.n	800d58e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d58c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d58e:	bf00      	nop
 800d590:	3720      	adds	r7, #32
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
	...

0800d598 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d598:	b580      	push	{r7, lr}
 800d59a:	b082      	sub	sp, #8
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d5a0:	f001 fb40 	bl	800ec24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d5a4:	4b2d      	ldr	r3, [pc, #180]	; (800d65c <prvAddNewTaskToReadyList+0xc4>)
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	3301      	adds	r3, #1
 800d5aa:	4a2c      	ldr	r2, [pc, #176]	; (800d65c <prvAddNewTaskToReadyList+0xc4>)
 800d5ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d5ae:	4b2c      	ldr	r3, [pc, #176]	; (800d660 <prvAddNewTaskToReadyList+0xc8>)
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d109      	bne.n	800d5ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d5b6:	4a2a      	ldr	r2, [pc, #168]	; (800d660 <prvAddNewTaskToReadyList+0xc8>)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d5bc:	4b27      	ldr	r3, [pc, #156]	; (800d65c <prvAddNewTaskToReadyList+0xc4>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d110      	bne.n	800d5e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d5c4:	f000 fc16 	bl	800ddf4 <prvInitialiseTaskLists>
 800d5c8:	e00d      	b.n	800d5e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d5ca:	4b26      	ldr	r3, [pc, #152]	; (800d664 <prvAddNewTaskToReadyList+0xcc>)
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d109      	bne.n	800d5e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d5d2:	4b23      	ldr	r3, [pc, #140]	; (800d660 <prvAddNewTaskToReadyList+0xc8>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d802      	bhi.n	800d5e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d5e0:	4a1f      	ldr	r2, [pc, #124]	; (800d660 <prvAddNewTaskToReadyList+0xc8>)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d5e6:	4b20      	ldr	r3, [pc, #128]	; (800d668 <prvAddNewTaskToReadyList+0xd0>)
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	3301      	adds	r3, #1
 800d5ec:	4a1e      	ldr	r2, [pc, #120]	; (800d668 <prvAddNewTaskToReadyList+0xd0>)
 800d5ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d5f0:	4b1d      	ldr	r3, [pc, #116]	; (800d668 <prvAddNewTaskToReadyList+0xd0>)
 800d5f2:	681a      	ldr	r2, [r3, #0]
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5fc:	4b1b      	ldr	r3, [pc, #108]	; (800d66c <prvAddNewTaskToReadyList+0xd4>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	429a      	cmp	r2, r3
 800d602:	d903      	bls.n	800d60c <prvAddNewTaskToReadyList+0x74>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d608:	4a18      	ldr	r2, [pc, #96]	; (800d66c <prvAddNewTaskToReadyList+0xd4>)
 800d60a:	6013      	str	r3, [r2, #0]
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d610:	4613      	mov	r3, r2
 800d612:	009b      	lsls	r3, r3, #2
 800d614:	4413      	add	r3, r2
 800d616:	009b      	lsls	r3, r3, #2
 800d618:	4a15      	ldr	r2, [pc, #84]	; (800d670 <prvAddNewTaskToReadyList+0xd8>)
 800d61a:	441a      	add	r2, r3
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	3304      	adds	r3, #4
 800d620:	4619      	mov	r1, r3
 800d622:	4610      	mov	r0, r2
 800d624:	f7fe fdf1 	bl	800c20a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d628:	f001 fb2c 	bl	800ec84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d62c:	4b0d      	ldr	r3, [pc, #52]	; (800d664 <prvAddNewTaskToReadyList+0xcc>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00e      	beq.n	800d652 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d634:	4b0a      	ldr	r3, [pc, #40]	; (800d660 <prvAddNewTaskToReadyList+0xc8>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63e:	429a      	cmp	r2, r3
 800d640:	d207      	bcs.n	800d652 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d642:	4b0c      	ldr	r3, [pc, #48]	; (800d674 <prvAddNewTaskToReadyList+0xdc>)
 800d644:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d648:	601a      	str	r2, [r3, #0]
 800d64a:	f3bf 8f4f 	dsb	sy
 800d64e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d652:	bf00      	nop
 800d654:	3708      	adds	r7, #8
 800d656:	46bd      	mov	sp, r7
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	20004754 	.word	0x20004754
 800d660:	20004280 	.word	0x20004280
 800d664:	20004760 	.word	0x20004760
 800d668:	20004770 	.word	0x20004770
 800d66c:	2000475c 	.word	0x2000475c
 800d670:	20004284 	.word	0x20004284
 800d674:	e000ed04 	.word	0xe000ed04

0800d678 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b084      	sub	sp, #16
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d680:	2300      	movs	r3, #0
 800d682:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d017      	beq.n	800d6ba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d68a:	4b13      	ldr	r3, [pc, #76]	; (800d6d8 <vTaskDelay+0x60>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d00a      	beq.n	800d6a8 <vTaskDelay+0x30>
	__asm volatile
 800d692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d696:	f383 8811 	msr	BASEPRI, r3
 800d69a:	f3bf 8f6f 	isb	sy
 800d69e:	f3bf 8f4f 	dsb	sy
 800d6a2:	60bb      	str	r3, [r7, #8]
}
 800d6a4:	bf00      	nop
 800d6a6:	e7fe      	b.n	800d6a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d6a8:	f000 f880 	bl	800d7ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 fde8 	bl	800e284 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d6b4:	f000 f888 	bl	800d7c8 <xTaskResumeAll>
 800d6b8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d107      	bne.n	800d6d0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d6c0:	4b06      	ldr	r3, [pc, #24]	; (800d6dc <vTaskDelay+0x64>)
 800d6c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6c6:	601a      	str	r2, [r3, #0]
 800d6c8:	f3bf 8f4f 	dsb	sy
 800d6cc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d6d0:	bf00      	nop
 800d6d2:	3710      	adds	r7, #16
 800d6d4:	46bd      	mov	sp, r7
 800d6d6:	bd80      	pop	{r7, pc}
 800d6d8:	2000477c 	.word	0x2000477c
 800d6dc:	e000ed04 	.word	0xe000ed04

0800d6e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d6e0:	b580      	push	{r7, lr}
 800d6e2:	b08a      	sub	sp, #40	; 0x28
 800d6e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d6e6:	2300      	movs	r3, #0
 800d6e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d6ee:	463a      	mov	r2, r7
 800d6f0:	1d39      	adds	r1, r7, #4
 800d6f2:	f107 0308 	add.w	r3, r7, #8
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7fe fd26 	bl	800c148 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d6fc:	6839      	ldr	r1, [r7, #0]
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	68ba      	ldr	r2, [r7, #8]
 800d702:	9202      	str	r2, [sp, #8]
 800d704:	9301      	str	r3, [sp, #4]
 800d706:	2300      	movs	r3, #0
 800d708:	9300      	str	r3, [sp, #0]
 800d70a:	2300      	movs	r3, #0
 800d70c:	460a      	mov	r2, r1
 800d70e:	4921      	ldr	r1, [pc, #132]	; (800d794 <vTaskStartScheduler+0xb4>)
 800d710:	4821      	ldr	r0, [pc, #132]	; (800d798 <vTaskStartScheduler+0xb8>)
 800d712:	f7ff fe0f 	bl	800d334 <xTaskCreateStatic>
 800d716:	4603      	mov	r3, r0
 800d718:	4a20      	ldr	r2, [pc, #128]	; (800d79c <vTaskStartScheduler+0xbc>)
 800d71a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d71c:	4b1f      	ldr	r3, [pc, #124]	; (800d79c <vTaskStartScheduler+0xbc>)
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d002      	beq.n	800d72a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d724:	2301      	movs	r3, #1
 800d726:	617b      	str	r3, [r7, #20]
 800d728:	e001      	b.n	800d72e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d72a:	2300      	movs	r3, #0
 800d72c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d72e:	697b      	ldr	r3, [r7, #20]
 800d730:	2b01      	cmp	r3, #1
 800d732:	d102      	bne.n	800d73a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d734:	f000 fdfa 	bl	800e32c <xTimerCreateTimerTask>
 800d738:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	d116      	bne.n	800d76e <vTaskStartScheduler+0x8e>
	__asm volatile
 800d740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d744:	f383 8811 	msr	BASEPRI, r3
 800d748:	f3bf 8f6f 	isb	sy
 800d74c:	f3bf 8f4f 	dsb	sy
 800d750:	613b      	str	r3, [r7, #16]
}
 800d752:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d754:	4b12      	ldr	r3, [pc, #72]	; (800d7a0 <vTaskStartScheduler+0xc0>)
 800d756:	f04f 32ff 	mov.w	r2, #4294967295
 800d75a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d75c:	4b11      	ldr	r3, [pc, #68]	; (800d7a4 <vTaskStartScheduler+0xc4>)
 800d75e:	2201      	movs	r2, #1
 800d760:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d762:	4b11      	ldr	r3, [pc, #68]	; (800d7a8 <vTaskStartScheduler+0xc8>)
 800d764:	2200      	movs	r2, #0
 800d766:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d768:	f001 f9ba 	bl	800eae0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d76c:	e00e      	b.n	800d78c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d76e:	697b      	ldr	r3, [r7, #20]
 800d770:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d774:	d10a      	bne.n	800d78c <vTaskStartScheduler+0xac>
	__asm volatile
 800d776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77a:	f383 8811 	msr	BASEPRI, r3
 800d77e:	f3bf 8f6f 	isb	sy
 800d782:	f3bf 8f4f 	dsb	sy
 800d786:	60fb      	str	r3, [r7, #12]
}
 800d788:	bf00      	nop
 800d78a:	e7fe      	b.n	800d78a <vTaskStartScheduler+0xaa>
}
 800d78c:	bf00      	nop
 800d78e:	3718      	adds	r7, #24
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}
 800d794:	080148e4 	.word	0x080148e4
 800d798:	0800ddc5 	.word	0x0800ddc5
 800d79c:	20004778 	.word	0x20004778
 800d7a0:	20004774 	.word	0x20004774
 800d7a4:	20004760 	.word	0x20004760
 800d7a8:	20004758 	.word	0x20004758

0800d7ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d7ac:	b480      	push	{r7}
 800d7ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d7b0:	4b04      	ldr	r3, [pc, #16]	; (800d7c4 <vTaskSuspendAll+0x18>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	4a03      	ldr	r2, [pc, #12]	; (800d7c4 <vTaskSuspendAll+0x18>)
 800d7b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d7ba:	bf00      	nop
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr
 800d7c4:	2000477c 	.word	0x2000477c

0800d7c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b084      	sub	sp, #16
 800d7cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d7d6:	4b42      	ldr	r3, [pc, #264]	; (800d8e0 <xTaskResumeAll+0x118>)
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d10a      	bne.n	800d7f4 <xTaskResumeAll+0x2c>
	__asm volatile
 800d7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e2:	f383 8811 	msr	BASEPRI, r3
 800d7e6:	f3bf 8f6f 	isb	sy
 800d7ea:	f3bf 8f4f 	dsb	sy
 800d7ee:	603b      	str	r3, [r7, #0]
}
 800d7f0:	bf00      	nop
 800d7f2:	e7fe      	b.n	800d7f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d7f4:	f001 fa16 	bl	800ec24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d7f8:	4b39      	ldr	r3, [pc, #228]	; (800d8e0 <xTaskResumeAll+0x118>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	3b01      	subs	r3, #1
 800d7fe:	4a38      	ldr	r2, [pc, #224]	; (800d8e0 <xTaskResumeAll+0x118>)
 800d800:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d802:	4b37      	ldr	r3, [pc, #220]	; (800d8e0 <xTaskResumeAll+0x118>)
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d162      	bne.n	800d8d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d80a:	4b36      	ldr	r3, [pc, #216]	; (800d8e4 <xTaskResumeAll+0x11c>)
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d05e      	beq.n	800d8d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d812:	e02f      	b.n	800d874 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d814:	4b34      	ldr	r3, [pc, #208]	; (800d8e8 <xTaskResumeAll+0x120>)
 800d816:	68db      	ldr	r3, [r3, #12]
 800d818:	68db      	ldr	r3, [r3, #12]
 800d81a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	3318      	adds	r3, #24
 800d820:	4618      	mov	r0, r3
 800d822:	f7fe fd4f 	bl	800c2c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	3304      	adds	r3, #4
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fe fd4a 	bl	800c2c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d830:	68fb      	ldr	r3, [r7, #12]
 800d832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d834:	4b2d      	ldr	r3, [pc, #180]	; (800d8ec <xTaskResumeAll+0x124>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	429a      	cmp	r2, r3
 800d83a:	d903      	bls.n	800d844 <xTaskResumeAll+0x7c>
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d840:	4a2a      	ldr	r2, [pc, #168]	; (800d8ec <xTaskResumeAll+0x124>)
 800d842:	6013      	str	r3, [r2, #0]
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d848:	4613      	mov	r3, r2
 800d84a:	009b      	lsls	r3, r3, #2
 800d84c:	4413      	add	r3, r2
 800d84e:	009b      	lsls	r3, r3, #2
 800d850:	4a27      	ldr	r2, [pc, #156]	; (800d8f0 <xTaskResumeAll+0x128>)
 800d852:	441a      	add	r2, r3
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	3304      	adds	r3, #4
 800d858:	4619      	mov	r1, r3
 800d85a:	4610      	mov	r0, r2
 800d85c:	f7fe fcd5 	bl	800c20a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d864:	4b23      	ldr	r3, [pc, #140]	; (800d8f4 <xTaskResumeAll+0x12c>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d86a:	429a      	cmp	r2, r3
 800d86c:	d302      	bcc.n	800d874 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d86e:	4b22      	ldr	r3, [pc, #136]	; (800d8f8 <xTaskResumeAll+0x130>)
 800d870:	2201      	movs	r2, #1
 800d872:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d874:	4b1c      	ldr	r3, [pc, #112]	; (800d8e8 <xTaskResumeAll+0x120>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d1cb      	bne.n	800d814 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d001      	beq.n	800d886 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d882:	f000 fb55 	bl	800df30 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d886:	4b1d      	ldr	r3, [pc, #116]	; (800d8fc <xTaskResumeAll+0x134>)
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d010      	beq.n	800d8b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d892:	f000 f847 	bl	800d924 <xTaskIncrementTick>
 800d896:	4603      	mov	r3, r0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d002      	beq.n	800d8a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d89c:	4b16      	ldr	r3, [pc, #88]	; (800d8f8 <xTaskResumeAll+0x130>)
 800d89e:	2201      	movs	r2, #1
 800d8a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	3b01      	subs	r3, #1
 800d8a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1f1      	bne.n	800d892 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d8ae:	4b13      	ldr	r3, [pc, #76]	; (800d8fc <xTaskResumeAll+0x134>)
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d8b4:	4b10      	ldr	r3, [pc, #64]	; (800d8f8 <xTaskResumeAll+0x130>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d009      	beq.n	800d8d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d8c0:	4b0f      	ldr	r3, [pc, #60]	; (800d900 <xTaskResumeAll+0x138>)
 800d8c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8c6:	601a      	str	r2, [r3, #0]
 800d8c8:	f3bf 8f4f 	dsb	sy
 800d8cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d8d0:	f001 f9d8 	bl	800ec84 <vPortExitCritical>

	return xAlreadyYielded;
 800d8d4:	68bb      	ldr	r3, [r7, #8]
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	2000477c 	.word	0x2000477c
 800d8e4:	20004754 	.word	0x20004754
 800d8e8:	20004714 	.word	0x20004714
 800d8ec:	2000475c 	.word	0x2000475c
 800d8f0:	20004284 	.word	0x20004284
 800d8f4:	20004280 	.word	0x20004280
 800d8f8:	20004768 	.word	0x20004768
 800d8fc:	20004764 	.word	0x20004764
 800d900:	e000ed04 	.word	0xe000ed04

0800d904 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d904:	b480      	push	{r7}
 800d906:	b083      	sub	sp, #12
 800d908:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d90a:	4b05      	ldr	r3, [pc, #20]	; (800d920 <xTaskGetTickCount+0x1c>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d910:	687b      	ldr	r3, [r7, #4]
}
 800d912:	4618      	mov	r0, r3
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr
 800d91e:	bf00      	nop
 800d920:	20004758 	.word	0x20004758

0800d924 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b086      	sub	sp, #24
 800d928:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d92a:	2300      	movs	r3, #0
 800d92c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d92e:	4b4f      	ldr	r3, [pc, #316]	; (800da6c <xTaskIncrementTick+0x148>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	f040 808f 	bne.w	800da56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d938:	4b4d      	ldr	r3, [pc, #308]	; (800da70 <xTaskIncrementTick+0x14c>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	3301      	adds	r3, #1
 800d93e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d940:	4a4b      	ldr	r2, [pc, #300]	; (800da70 <xTaskIncrementTick+0x14c>)
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d946:	693b      	ldr	r3, [r7, #16]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d120      	bne.n	800d98e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d94c:	4b49      	ldr	r3, [pc, #292]	; (800da74 <xTaskIncrementTick+0x150>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00a      	beq.n	800d96c <xTaskIncrementTick+0x48>
	__asm volatile
 800d956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d95a:	f383 8811 	msr	BASEPRI, r3
 800d95e:	f3bf 8f6f 	isb	sy
 800d962:	f3bf 8f4f 	dsb	sy
 800d966:	603b      	str	r3, [r7, #0]
}
 800d968:	bf00      	nop
 800d96a:	e7fe      	b.n	800d96a <xTaskIncrementTick+0x46>
 800d96c:	4b41      	ldr	r3, [pc, #260]	; (800da74 <xTaskIncrementTick+0x150>)
 800d96e:	681b      	ldr	r3, [r3, #0]
 800d970:	60fb      	str	r3, [r7, #12]
 800d972:	4b41      	ldr	r3, [pc, #260]	; (800da78 <xTaskIncrementTick+0x154>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	4a3f      	ldr	r2, [pc, #252]	; (800da74 <xTaskIncrementTick+0x150>)
 800d978:	6013      	str	r3, [r2, #0]
 800d97a:	4a3f      	ldr	r2, [pc, #252]	; (800da78 <xTaskIncrementTick+0x154>)
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	6013      	str	r3, [r2, #0]
 800d980:	4b3e      	ldr	r3, [pc, #248]	; (800da7c <xTaskIncrementTick+0x158>)
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	3301      	adds	r3, #1
 800d986:	4a3d      	ldr	r2, [pc, #244]	; (800da7c <xTaskIncrementTick+0x158>)
 800d988:	6013      	str	r3, [r2, #0]
 800d98a:	f000 fad1 	bl	800df30 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d98e:	4b3c      	ldr	r3, [pc, #240]	; (800da80 <xTaskIncrementTick+0x15c>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	693a      	ldr	r2, [r7, #16]
 800d994:	429a      	cmp	r2, r3
 800d996:	d349      	bcc.n	800da2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d998:	4b36      	ldr	r3, [pc, #216]	; (800da74 <xTaskIncrementTick+0x150>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d104      	bne.n	800d9ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d9a2:	4b37      	ldr	r3, [pc, #220]	; (800da80 <xTaskIncrementTick+0x15c>)
 800d9a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d9a8:	601a      	str	r2, [r3, #0]
					break;
 800d9aa:	e03f      	b.n	800da2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9ac:	4b31      	ldr	r3, [pc, #196]	; (800da74 <xTaskIncrementTick+0x150>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	68db      	ldr	r3, [r3, #12]
 800d9b2:	68db      	ldr	r3, [r3, #12]
 800d9b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	685b      	ldr	r3, [r3, #4]
 800d9ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d9bc:	693a      	ldr	r2, [r7, #16]
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	429a      	cmp	r2, r3
 800d9c2:	d203      	bcs.n	800d9cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d9c4:	4a2e      	ldr	r2, [pc, #184]	; (800da80 <xTaskIncrementTick+0x15c>)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d9ca:	e02f      	b.n	800da2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	3304      	adds	r3, #4
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	f7fe fc77 	bl	800c2c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d004      	beq.n	800d9e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	3318      	adds	r3, #24
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f7fe fc6e 	bl	800c2c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d9e8:	68bb      	ldr	r3, [r7, #8]
 800d9ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ec:	4b25      	ldr	r3, [pc, #148]	; (800da84 <xTaskIncrementTick+0x160>)
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d903      	bls.n	800d9fc <xTaskIncrementTick+0xd8>
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f8:	4a22      	ldr	r2, [pc, #136]	; (800da84 <xTaskIncrementTick+0x160>)
 800d9fa:	6013      	str	r3, [r2, #0]
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da00:	4613      	mov	r3, r2
 800da02:	009b      	lsls	r3, r3, #2
 800da04:	4413      	add	r3, r2
 800da06:	009b      	lsls	r3, r3, #2
 800da08:	4a1f      	ldr	r2, [pc, #124]	; (800da88 <xTaskIncrementTick+0x164>)
 800da0a:	441a      	add	r2, r3
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	3304      	adds	r3, #4
 800da10:	4619      	mov	r1, r3
 800da12:	4610      	mov	r0, r2
 800da14:	f7fe fbf9 	bl	800c20a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da1c:	4b1b      	ldr	r3, [pc, #108]	; (800da8c <xTaskIncrementTick+0x168>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da22:	429a      	cmp	r2, r3
 800da24:	d3b8      	bcc.n	800d998 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800da26:	2301      	movs	r3, #1
 800da28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da2a:	e7b5      	b.n	800d998 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800da2c:	4b17      	ldr	r3, [pc, #92]	; (800da8c <xTaskIncrementTick+0x168>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da32:	4915      	ldr	r1, [pc, #84]	; (800da88 <xTaskIncrementTick+0x164>)
 800da34:	4613      	mov	r3, r2
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	4413      	add	r3, r2
 800da3a:	009b      	lsls	r3, r3, #2
 800da3c:	440b      	add	r3, r1
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	2b01      	cmp	r3, #1
 800da42:	d901      	bls.n	800da48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800da44:	2301      	movs	r3, #1
 800da46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800da48:	4b11      	ldr	r3, [pc, #68]	; (800da90 <xTaskIncrementTick+0x16c>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d007      	beq.n	800da60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800da50:	2301      	movs	r3, #1
 800da52:	617b      	str	r3, [r7, #20]
 800da54:	e004      	b.n	800da60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800da56:	4b0f      	ldr	r3, [pc, #60]	; (800da94 <xTaskIncrementTick+0x170>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	3301      	adds	r3, #1
 800da5c:	4a0d      	ldr	r2, [pc, #52]	; (800da94 <xTaskIncrementTick+0x170>)
 800da5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800da60:	697b      	ldr	r3, [r7, #20]
}
 800da62:	4618      	mov	r0, r3
 800da64:	3718      	adds	r7, #24
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}
 800da6a:	bf00      	nop
 800da6c:	2000477c 	.word	0x2000477c
 800da70:	20004758 	.word	0x20004758
 800da74:	2000470c 	.word	0x2000470c
 800da78:	20004710 	.word	0x20004710
 800da7c:	2000476c 	.word	0x2000476c
 800da80:	20004774 	.word	0x20004774
 800da84:	2000475c 	.word	0x2000475c
 800da88:	20004284 	.word	0x20004284
 800da8c:	20004280 	.word	0x20004280
 800da90:	20004768 	.word	0x20004768
 800da94:	20004764 	.word	0x20004764

0800da98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800da98:	b480      	push	{r7}
 800da9a:	b085      	sub	sp, #20
 800da9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800da9e:	4b28      	ldr	r3, [pc, #160]	; (800db40 <vTaskSwitchContext+0xa8>)
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d003      	beq.n	800daae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800daa6:	4b27      	ldr	r3, [pc, #156]	; (800db44 <vTaskSwitchContext+0xac>)
 800daa8:	2201      	movs	r2, #1
 800daaa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800daac:	e041      	b.n	800db32 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800daae:	4b25      	ldr	r3, [pc, #148]	; (800db44 <vTaskSwitchContext+0xac>)
 800dab0:	2200      	movs	r2, #0
 800dab2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dab4:	4b24      	ldr	r3, [pc, #144]	; (800db48 <vTaskSwitchContext+0xb0>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	60fb      	str	r3, [r7, #12]
 800daba:	e010      	b.n	800dade <vTaskSwitchContext+0x46>
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d10a      	bne.n	800dad8 <vTaskSwitchContext+0x40>
	__asm volatile
 800dac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac6:	f383 8811 	msr	BASEPRI, r3
 800daca:	f3bf 8f6f 	isb	sy
 800dace:	f3bf 8f4f 	dsb	sy
 800dad2:	607b      	str	r3, [r7, #4]
}
 800dad4:	bf00      	nop
 800dad6:	e7fe      	b.n	800dad6 <vTaskSwitchContext+0x3e>
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	3b01      	subs	r3, #1
 800dadc:	60fb      	str	r3, [r7, #12]
 800dade:	491b      	ldr	r1, [pc, #108]	; (800db4c <vTaskSwitchContext+0xb4>)
 800dae0:	68fa      	ldr	r2, [r7, #12]
 800dae2:	4613      	mov	r3, r2
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	4413      	add	r3, r2
 800dae8:	009b      	lsls	r3, r3, #2
 800daea:	440b      	add	r3, r1
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d0e4      	beq.n	800dabc <vTaskSwitchContext+0x24>
 800daf2:	68fa      	ldr	r2, [r7, #12]
 800daf4:	4613      	mov	r3, r2
 800daf6:	009b      	lsls	r3, r3, #2
 800daf8:	4413      	add	r3, r2
 800dafa:	009b      	lsls	r3, r3, #2
 800dafc:	4a13      	ldr	r2, [pc, #76]	; (800db4c <vTaskSwitchContext+0xb4>)
 800dafe:	4413      	add	r3, r2
 800db00:	60bb      	str	r3, [r7, #8]
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	685a      	ldr	r2, [r3, #4]
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	605a      	str	r2, [r3, #4]
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	685a      	ldr	r2, [r3, #4]
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	3308      	adds	r3, #8
 800db14:	429a      	cmp	r2, r3
 800db16:	d104      	bne.n	800db22 <vTaskSwitchContext+0x8a>
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	685b      	ldr	r3, [r3, #4]
 800db1c:	685a      	ldr	r2, [r3, #4]
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	605a      	str	r2, [r3, #4]
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	68db      	ldr	r3, [r3, #12]
 800db28:	4a09      	ldr	r2, [pc, #36]	; (800db50 <vTaskSwitchContext+0xb8>)
 800db2a:	6013      	str	r3, [r2, #0]
 800db2c:	4a06      	ldr	r2, [pc, #24]	; (800db48 <vTaskSwitchContext+0xb0>)
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	6013      	str	r3, [r2, #0]
}
 800db32:	bf00      	nop
 800db34:	3714      	adds	r7, #20
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr
 800db3e:	bf00      	nop
 800db40:	2000477c 	.word	0x2000477c
 800db44:	20004768 	.word	0x20004768
 800db48:	2000475c 	.word	0x2000475c
 800db4c:	20004284 	.word	0x20004284
 800db50:	20004280 	.word	0x20004280

0800db54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b084      	sub	sp, #16
 800db58:	af00      	add	r7, sp, #0
 800db5a:	6078      	str	r0, [r7, #4]
 800db5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d10a      	bne.n	800db7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800db64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db68:	f383 8811 	msr	BASEPRI, r3
 800db6c:	f3bf 8f6f 	isb	sy
 800db70:	f3bf 8f4f 	dsb	sy
 800db74:	60fb      	str	r3, [r7, #12]
}
 800db76:	bf00      	nop
 800db78:	e7fe      	b.n	800db78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db7a:	4b07      	ldr	r3, [pc, #28]	; (800db98 <vTaskPlaceOnEventList+0x44>)
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	3318      	adds	r3, #24
 800db80:	4619      	mov	r1, r3
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f7fe fb65 	bl	800c252 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800db88:	2101      	movs	r1, #1
 800db8a:	6838      	ldr	r0, [r7, #0]
 800db8c:	f000 fb7a 	bl	800e284 <prvAddCurrentTaskToDelayedList>
}
 800db90:	bf00      	nop
 800db92:	3710      	adds	r7, #16
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}
 800db98:	20004280 	.word	0x20004280

0800db9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800db9c:	b580      	push	{r7, lr}
 800db9e:	b086      	sub	sp, #24
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	60f8      	str	r0, [r7, #12]
 800dba4:	60b9      	str	r1, [r7, #8]
 800dba6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d10a      	bne.n	800dbc4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800dbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	617b      	str	r3, [r7, #20]
}
 800dbc0:	bf00      	nop
 800dbc2:	e7fe      	b.n	800dbc2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dbc4:	4b0a      	ldr	r3, [pc, #40]	; (800dbf0 <vTaskPlaceOnEventListRestricted+0x54>)
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	3318      	adds	r3, #24
 800dbca:	4619      	mov	r1, r3
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f7fe fb1c 	bl	800c20a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d002      	beq.n	800dbde <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dbd8:	f04f 33ff 	mov.w	r3, #4294967295
 800dbdc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dbde:	6879      	ldr	r1, [r7, #4]
 800dbe0:	68b8      	ldr	r0, [r7, #8]
 800dbe2:	f000 fb4f 	bl	800e284 <prvAddCurrentTaskToDelayedList>
	}
 800dbe6:	bf00      	nop
 800dbe8:	3718      	adds	r7, #24
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	20004280 	.word	0x20004280

0800dbf4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b086      	sub	sp, #24
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	68db      	ldr	r3, [r3, #12]
 800dc00:	68db      	ldr	r3, [r3, #12]
 800dc02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dc04:	693b      	ldr	r3, [r7, #16]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d10a      	bne.n	800dc20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc0e:	f383 8811 	msr	BASEPRI, r3
 800dc12:	f3bf 8f6f 	isb	sy
 800dc16:	f3bf 8f4f 	dsb	sy
 800dc1a:	60fb      	str	r3, [r7, #12]
}
 800dc1c:	bf00      	nop
 800dc1e:	e7fe      	b.n	800dc1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	3318      	adds	r3, #24
 800dc24:	4618      	mov	r0, r3
 800dc26:	f7fe fb4d 	bl	800c2c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dc2a:	4b1e      	ldr	r3, [pc, #120]	; (800dca4 <xTaskRemoveFromEventList+0xb0>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d11d      	bne.n	800dc6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	3304      	adds	r3, #4
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7fe fb44 	bl	800c2c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc40:	4b19      	ldr	r3, [pc, #100]	; (800dca8 <xTaskRemoveFromEventList+0xb4>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d903      	bls.n	800dc50 <xTaskRemoveFromEventList+0x5c>
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc4c:	4a16      	ldr	r2, [pc, #88]	; (800dca8 <xTaskRemoveFromEventList+0xb4>)
 800dc4e:	6013      	str	r3, [r2, #0]
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc54:	4613      	mov	r3, r2
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	4413      	add	r3, r2
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	4a13      	ldr	r2, [pc, #76]	; (800dcac <xTaskRemoveFromEventList+0xb8>)
 800dc5e:	441a      	add	r2, r3
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	3304      	adds	r3, #4
 800dc64:	4619      	mov	r1, r3
 800dc66:	4610      	mov	r0, r2
 800dc68:	f7fe facf 	bl	800c20a <vListInsertEnd>
 800dc6c:	e005      	b.n	800dc7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dc6e:	693b      	ldr	r3, [r7, #16]
 800dc70:	3318      	adds	r3, #24
 800dc72:	4619      	mov	r1, r3
 800dc74:	480e      	ldr	r0, [pc, #56]	; (800dcb0 <xTaskRemoveFromEventList+0xbc>)
 800dc76:	f7fe fac8 	bl	800c20a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc7a:	693b      	ldr	r3, [r7, #16]
 800dc7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc7e:	4b0d      	ldr	r3, [pc, #52]	; (800dcb4 <xTaskRemoveFromEventList+0xc0>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc84:	429a      	cmp	r2, r3
 800dc86:	d905      	bls.n	800dc94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dc88:	2301      	movs	r3, #1
 800dc8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dc8c:	4b0a      	ldr	r3, [pc, #40]	; (800dcb8 <xTaskRemoveFromEventList+0xc4>)
 800dc8e:	2201      	movs	r2, #1
 800dc90:	601a      	str	r2, [r3, #0]
 800dc92:	e001      	b.n	800dc98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800dc94:	2300      	movs	r3, #0
 800dc96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dc98:	697b      	ldr	r3, [r7, #20]
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3718      	adds	r7, #24
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}
 800dca2:	bf00      	nop
 800dca4:	2000477c 	.word	0x2000477c
 800dca8:	2000475c 	.word	0x2000475c
 800dcac:	20004284 	.word	0x20004284
 800dcb0:	20004714 	.word	0x20004714
 800dcb4:	20004280 	.word	0x20004280
 800dcb8:	20004768 	.word	0x20004768

0800dcbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dcbc:	b480      	push	{r7}
 800dcbe:	b083      	sub	sp, #12
 800dcc0:	af00      	add	r7, sp, #0
 800dcc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dcc4:	4b06      	ldr	r3, [pc, #24]	; (800dce0 <vTaskInternalSetTimeOutState+0x24>)
 800dcc6:	681a      	ldr	r2, [r3, #0]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dccc:	4b05      	ldr	r3, [pc, #20]	; (800dce4 <vTaskInternalSetTimeOutState+0x28>)
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	605a      	str	r2, [r3, #4]
}
 800dcd4:	bf00      	nop
 800dcd6:	370c      	adds	r7, #12
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr
 800dce0:	2000476c 	.word	0x2000476c
 800dce4:	20004758 	.word	0x20004758

0800dce8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b088      	sub	sp, #32
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d10a      	bne.n	800dd0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800dcf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfc:	f383 8811 	msr	BASEPRI, r3
 800dd00:	f3bf 8f6f 	isb	sy
 800dd04:	f3bf 8f4f 	dsb	sy
 800dd08:	613b      	str	r3, [r7, #16]
}
 800dd0a:	bf00      	nop
 800dd0c:	e7fe      	b.n	800dd0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d10a      	bne.n	800dd2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800dd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd18:	f383 8811 	msr	BASEPRI, r3
 800dd1c:	f3bf 8f6f 	isb	sy
 800dd20:	f3bf 8f4f 	dsb	sy
 800dd24:	60fb      	str	r3, [r7, #12]
}
 800dd26:	bf00      	nop
 800dd28:	e7fe      	b.n	800dd28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800dd2a:	f000 ff7b 	bl	800ec24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dd2e:	4b1d      	ldr	r3, [pc, #116]	; (800dda4 <xTaskCheckForTimeOut+0xbc>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	69ba      	ldr	r2, [r7, #24]
 800dd3a:	1ad3      	subs	r3, r2, r3
 800dd3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dd3e:	683b      	ldr	r3, [r7, #0]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd46:	d102      	bne.n	800dd4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	61fb      	str	r3, [r7, #28]
 800dd4c:	e023      	b.n	800dd96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	4b15      	ldr	r3, [pc, #84]	; (800dda8 <xTaskCheckForTimeOut+0xc0>)
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d007      	beq.n	800dd6a <xTaskCheckForTimeOut+0x82>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	685b      	ldr	r3, [r3, #4]
 800dd5e:	69ba      	ldr	r2, [r7, #24]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d302      	bcc.n	800dd6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dd64:	2301      	movs	r3, #1
 800dd66:	61fb      	str	r3, [r7, #28]
 800dd68:	e015      	b.n	800dd96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	697a      	ldr	r2, [r7, #20]
 800dd70:	429a      	cmp	r2, r3
 800dd72:	d20b      	bcs.n	800dd8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	681a      	ldr	r2, [r3, #0]
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	1ad2      	subs	r2, r2, r3
 800dd7c:	683b      	ldr	r3, [r7, #0]
 800dd7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7ff ff9b 	bl	800dcbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dd86:	2300      	movs	r3, #0
 800dd88:	61fb      	str	r3, [r7, #28]
 800dd8a:	e004      	b.n	800dd96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	2200      	movs	r2, #0
 800dd90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dd92:	2301      	movs	r3, #1
 800dd94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dd96:	f000 ff75 	bl	800ec84 <vPortExitCritical>

	return xReturn;
 800dd9a:	69fb      	ldr	r3, [r7, #28]
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3720      	adds	r7, #32
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	20004758 	.word	0x20004758
 800dda8:	2000476c 	.word	0x2000476c

0800ddac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ddac:	b480      	push	{r7}
 800ddae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ddb0:	4b03      	ldr	r3, [pc, #12]	; (800ddc0 <vTaskMissedYield+0x14>)
 800ddb2:	2201      	movs	r2, #1
 800ddb4:	601a      	str	r2, [r3, #0]
}
 800ddb6:	bf00      	nop
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr
 800ddc0:	20004768 	.word	0x20004768

0800ddc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ddc4:	b580      	push	{r7, lr}
 800ddc6:	b082      	sub	sp, #8
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ddcc:	f000 f852 	bl	800de74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ddd0:	4b06      	ldr	r3, [pc, #24]	; (800ddec <prvIdleTask+0x28>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	2b01      	cmp	r3, #1
 800ddd6:	d9f9      	bls.n	800ddcc <prvIdleTask+0x8>
			{
				taskYIELD();
 800ddd8:	4b05      	ldr	r3, [pc, #20]	; (800ddf0 <prvIdleTask+0x2c>)
 800ddda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddde:	601a      	str	r2, [r3, #0]
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dde8:	e7f0      	b.n	800ddcc <prvIdleTask+0x8>
 800ddea:	bf00      	nop
 800ddec:	20004284 	.word	0x20004284
 800ddf0:	e000ed04 	.word	0xe000ed04

0800ddf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	607b      	str	r3, [r7, #4]
 800ddfe:	e00c      	b.n	800de1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	4613      	mov	r3, r2
 800de04:	009b      	lsls	r3, r3, #2
 800de06:	4413      	add	r3, r2
 800de08:	009b      	lsls	r3, r3, #2
 800de0a:	4a12      	ldr	r2, [pc, #72]	; (800de54 <prvInitialiseTaskLists+0x60>)
 800de0c:	4413      	add	r3, r2
 800de0e:	4618      	mov	r0, r3
 800de10:	f7fe f9ce 	bl	800c1b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	3301      	adds	r3, #1
 800de18:	607b      	str	r3, [r7, #4]
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	2b37      	cmp	r3, #55	; 0x37
 800de1e:	d9ef      	bls.n	800de00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800de20:	480d      	ldr	r0, [pc, #52]	; (800de58 <prvInitialiseTaskLists+0x64>)
 800de22:	f7fe f9c5 	bl	800c1b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800de26:	480d      	ldr	r0, [pc, #52]	; (800de5c <prvInitialiseTaskLists+0x68>)
 800de28:	f7fe f9c2 	bl	800c1b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800de2c:	480c      	ldr	r0, [pc, #48]	; (800de60 <prvInitialiseTaskLists+0x6c>)
 800de2e:	f7fe f9bf 	bl	800c1b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800de32:	480c      	ldr	r0, [pc, #48]	; (800de64 <prvInitialiseTaskLists+0x70>)
 800de34:	f7fe f9bc 	bl	800c1b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800de38:	480b      	ldr	r0, [pc, #44]	; (800de68 <prvInitialiseTaskLists+0x74>)
 800de3a:	f7fe f9b9 	bl	800c1b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800de3e:	4b0b      	ldr	r3, [pc, #44]	; (800de6c <prvInitialiseTaskLists+0x78>)
 800de40:	4a05      	ldr	r2, [pc, #20]	; (800de58 <prvInitialiseTaskLists+0x64>)
 800de42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800de44:	4b0a      	ldr	r3, [pc, #40]	; (800de70 <prvInitialiseTaskLists+0x7c>)
 800de46:	4a05      	ldr	r2, [pc, #20]	; (800de5c <prvInitialiseTaskLists+0x68>)
 800de48:	601a      	str	r2, [r3, #0]
}
 800de4a:	bf00      	nop
 800de4c:	3708      	adds	r7, #8
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	20004284 	.word	0x20004284
 800de58:	200046e4 	.word	0x200046e4
 800de5c:	200046f8 	.word	0x200046f8
 800de60:	20004714 	.word	0x20004714
 800de64:	20004728 	.word	0x20004728
 800de68:	20004740 	.word	0x20004740
 800de6c:	2000470c 	.word	0x2000470c
 800de70:	20004710 	.word	0x20004710

0800de74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b082      	sub	sp, #8
 800de78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de7a:	e019      	b.n	800deb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800de7c:	f000 fed2 	bl	800ec24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de80:	4b10      	ldr	r3, [pc, #64]	; (800dec4 <prvCheckTasksWaitingTermination+0x50>)
 800de82:	68db      	ldr	r3, [r3, #12]
 800de84:	68db      	ldr	r3, [r3, #12]
 800de86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	3304      	adds	r3, #4
 800de8c:	4618      	mov	r0, r3
 800de8e:	f7fe fa19 	bl	800c2c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800de92:	4b0d      	ldr	r3, [pc, #52]	; (800dec8 <prvCheckTasksWaitingTermination+0x54>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	3b01      	subs	r3, #1
 800de98:	4a0b      	ldr	r2, [pc, #44]	; (800dec8 <prvCheckTasksWaitingTermination+0x54>)
 800de9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800de9c:	4b0b      	ldr	r3, [pc, #44]	; (800decc <prvCheckTasksWaitingTermination+0x58>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	3b01      	subs	r3, #1
 800dea2:	4a0a      	ldr	r2, [pc, #40]	; (800decc <prvCheckTasksWaitingTermination+0x58>)
 800dea4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800dea6:	f000 feed 	bl	800ec84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 f810 	bl	800ded0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800deb0:	4b06      	ldr	r3, [pc, #24]	; (800decc <prvCheckTasksWaitingTermination+0x58>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d1e1      	bne.n	800de7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800deb8:	bf00      	nop
 800deba:	bf00      	nop
 800debc:	3708      	adds	r7, #8
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}
 800dec2:	bf00      	nop
 800dec4:	20004728 	.word	0x20004728
 800dec8:	20004754 	.word	0x20004754
 800decc:	2000473c 	.word	0x2000473c

0800ded0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b084      	sub	sp, #16
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d108      	bne.n	800def4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dee6:	4618      	mov	r0, r3
 800dee8:	f001 f88a 	bl	800f000 <vPortFree>
				vPortFree( pxTCB );
 800deec:	6878      	ldr	r0, [r7, #4]
 800deee:	f001 f887 	bl	800f000 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800def2:	e018      	b.n	800df26 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800defa:	2b01      	cmp	r3, #1
 800defc:	d103      	bne.n	800df06 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f001 f87e 	bl	800f000 <vPortFree>
	}
 800df04:	e00f      	b.n	800df26 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	d00a      	beq.n	800df26 <prvDeleteTCB+0x56>
	__asm volatile
 800df10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df14:	f383 8811 	msr	BASEPRI, r3
 800df18:	f3bf 8f6f 	isb	sy
 800df1c:	f3bf 8f4f 	dsb	sy
 800df20:	60fb      	str	r3, [r7, #12]
}
 800df22:	bf00      	nop
 800df24:	e7fe      	b.n	800df24 <prvDeleteTCB+0x54>
	}
 800df26:	bf00      	nop
 800df28:	3710      	adds	r7, #16
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
	...

0800df30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df30:	b480      	push	{r7}
 800df32:	b083      	sub	sp, #12
 800df34:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df36:	4b0c      	ldr	r3, [pc, #48]	; (800df68 <prvResetNextTaskUnblockTime+0x38>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d104      	bne.n	800df4a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800df40:	4b0a      	ldr	r3, [pc, #40]	; (800df6c <prvResetNextTaskUnblockTime+0x3c>)
 800df42:	f04f 32ff 	mov.w	r2, #4294967295
 800df46:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800df48:	e008      	b.n	800df5c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df4a:	4b07      	ldr	r3, [pc, #28]	; (800df68 <prvResetNextTaskUnblockTime+0x38>)
 800df4c:	681b      	ldr	r3, [r3, #0]
 800df4e:	68db      	ldr	r3, [r3, #12]
 800df50:	68db      	ldr	r3, [r3, #12]
 800df52:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	685b      	ldr	r3, [r3, #4]
 800df58:	4a04      	ldr	r2, [pc, #16]	; (800df6c <prvResetNextTaskUnblockTime+0x3c>)
 800df5a:	6013      	str	r3, [r2, #0]
}
 800df5c:	bf00      	nop
 800df5e:	370c      	adds	r7, #12
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr
 800df68:	2000470c 	.word	0x2000470c
 800df6c:	20004774 	.word	0x20004774

0800df70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800df76:	4b0b      	ldr	r3, [pc, #44]	; (800dfa4 <xTaskGetSchedulerState+0x34>)
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d102      	bne.n	800df84 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800df7e:	2301      	movs	r3, #1
 800df80:	607b      	str	r3, [r7, #4]
 800df82:	e008      	b.n	800df96 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df84:	4b08      	ldr	r3, [pc, #32]	; (800dfa8 <xTaskGetSchedulerState+0x38>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d102      	bne.n	800df92 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800df8c:	2302      	movs	r3, #2
 800df8e:	607b      	str	r3, [r7, #4]
 800df90:	e001      	b.n	800df96 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800df92:	2300      	movs	r3, #0
 800df94:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800df96:	687b      	ldr	r3, [r7, #4]
	}
 800df98:	4618      	mov	r0, r3
 800df9a:	370c      	adds	r7, #12
 800df9c:	46bd      	mov	sp, r7
 800df9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa2:	4770      	bx	lr
 800dfa4:	20004760 	.word	0x20004760
 800dfa8:	2000477c 	.word	0x2000477c

0800dfac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b084      	sub	sp, #16
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dfb8:	2300      	movs	r3, #0
 800dfba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d051      	beq.n	800e066 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dfc2:	68bb      	ldr	r3, [r7, #8]
 800dfc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfc6:	4b2a      	ldr	r3, [pc, #168]	; (800e070 <xTaskPriorityInherit+0xc4>)
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfcc:	429a      	cmp	r2, r3
 800dfce:	d241      	bcs.n	800e054 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	699b      	ldr	r3, [r3, #24]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	db06      	blt.n	800dfe6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfd8:	4b25      	ldr	r3, [pc, #148]	; (800e070 <xTaskPriorityInherit+0xc4>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfde:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800dfe2:	68bb      	ldr	r3, [r7, #8]
 800dfe4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	6959      	ldr	r1, [r3, #20]
 800dfea:	68bb      	ldr	r3, [r7, #8]
 800dfec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfee:	4613      	mov	r3, r2
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	4413      	add	r3, r2
 800dff4:	009b      	lsls	r3, r3, #2
 800dff6:	4a1f      	ldr	r2, [pc, #124]	; (800e074 <xTaskPriorityInherit+0xc8>)
 800dff8:	4413      	add	r3, r2
 800dffa:	4299      	cmp	r1, r3
 800dffc:	d122      	bne.n	800e044 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	3304      	adds	r3, #4
 800e002:	4618      	mov	r0, r3
 800e004:	f7fe f95e 	bl	800c2c4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e008:	4b19      	ldr	r3, [pc, #100]	; (800e070 <xTaskPriorityInherit+0xc4>)
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e016:	4b18      	ldr	r3, [pc, #96]	; (800e078 <xTaskPriorityInherit+0xcc>)
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d903      	bls.n	800e026 <xTaskPriorityInherit+0x7a>
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e022:	4a15      	ldr	r2, [pc, #84]	; (800e078 <xTaskPriorityInherit+0xcc>)
 800e024:	6013      	str	r3, [r2, #0]
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e02a:	4613      	mov	r3, r2
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	4413      	add	r3, r2
 800e030:	009b      	lsls	r3, r3, #2
 800e032:	4a10      	ldr	r2, [pc, #64]	; (800e074 <xTaskPriorityInherit+0xc8>)
 800e034:	441a      	add	r2, r3
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	3304      	adds	r3, #4
 800e03a:	4619      	mov	r1, r3
 800e03c:	4610      	mov	r0, r2
 800e03e:	f7fe f8e4 	bl	800c20a <vListInsertEnd>
 800e042:	e004      	b.n	800e04e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e044:	4b0a      	ldr	r3, [pc, #40]	; (800e070 <xTaskPriorityInherit+0xc4>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e04e:	2301      	movs	r3, #1
 800e050:	60fb      	str	r3, [r7, #12]
 800e052:	e008      	b.n	800e066 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e058:	4b05      	ldr	r3, [pc, #20]	; (800e070 <xTaskPriorityInherit+0xc4>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e05e:	429a      	cmp	r2, r3
 800e060:	d201      	bcs.n	800e066 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e062:	2301      	movs	r3, #1
 800e064:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e066:	68fb      	ldr	r3, [r7, #12]
	}
 800e068:	4618      	mov	r0, r3
 800e06a:	3710      	adds	r7, #16
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	20004280 	.word	0x20004280
 800e074:	20004284 	.word	0x20004284
 800e078:	2000475c 	.word	0x2000475c

0800e07c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b086      	sub	sp, #24
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e088:	2300      	movs	r3, #0
 800e08a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d056      	beq.n	800e140 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e092:	4b2e      	ldr	r3, [pc, #184]	; (800e14c <xTaskPriorityDisinherit+0xd0>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	693a      	ldr	r2, [r7, #16]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d00a      	beq.n	800e0b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a0:	f383 8811 	msr	BASEPRI, r3
 800e0a4:	f3bf 8f6f 	isb	sy
 800e0a8:	f3bf 8f4f 	dsb	sy
 800e0ac:	60fb      	str	r3, [r7, #12]
}
 800e0ae:	bf00      	nop
 800e0b0:	e7fe      	b.n	800e0b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e0b2:	693b      	ldr	r3, [r7, #16]
 800e0b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d10a      	bne.n	800e0d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0be:	f383 8811 	msr	BASEPRI, r3
 800e0c2:	f3bf 8f6f 	isb	sy
 800e0c6:	f3bf 8f4f 	dsb	sy
 800e0ca:	60bb      	str	r3, [r7, #8]
}
 800e0cc:	bf00      	nop
 800e0ce:	e7fe      	b.n	800e0ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0d4:	1e5a      	subs	r2, r3, #1
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e0da:	693b      	ldr	r3, [r7, #16]
 800e0dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e0e2:	429a      	cmp	r2, r3
 800e0e4:	d02c      	beq.n	800e140 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d128      	bne.n	800e140 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	3304      	adds	r3, #4
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fe f8e6 	bl	800c2c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e100:	693b      	ldr	r3, [r7, #16]
 800e102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e104:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e108:	693b      	ldr	r3, [r7, #16]
 800e10a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e110:	4b0f      	ldr	r3, [pc, #60]	; (800e150 <xTaskPriorityDisinherit+0xd4>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	429a      	cmp	r2, r3
 800e116:	d903      	bls.n	800e120 <xTaskPriorityDisinherit+0xa4>
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e11c:	4a0c      	ldr	r2, [pc, #48]	; (800e150 <xTaskPriorityDisinherit+0xd4>)
 800e11e:	6013      	str	r3, [r2, #0]
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e124:	4613      	mov	r3, r2
 800e126:	009b      	lsls	r3, r3, #2
 800e128:	4413      	add	r3, r2
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	4a09      	ldr	r2, [pc, #36]	; (800e154 <xTaskPriorityDisinherit+0xd8>)
 800e12e:	441a      	add	r2, r3
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	3304      	adds	r3, #4
 800e134:	4619      	mov	r1, r3
 800e136:	4610      	mov	r0, r2
 800e138:	f7fe f867 	bl	800c20a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e13c:	2301      	movs	r3, #1
 800e13e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e140:	697b      	ldr	r3, [r7, #20]
	}
 800e142:	4618      	mov	r0, r3
 800e144:	3718      	adds	r7, #24
 800e146:	46bd      	mov	sp, r7
 800e148:	bd80      	pop	{r7, pc}
 800e14a:	bf00      	nop
 800e14c:	20004280 	.word	0x20004280
 800e150:	2000475c 	.word	0x2000475c
 800e154:	20004284 	.word	0x20004284

0800e158 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b088      	sub	sp, #32
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e166:	2301      	movs	r3, #1
 800e168:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d06a      	beq.n	800e246 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e174:	2b00      	cmp	r3, #0
 800e176:	d10a      	bne.n	800e18e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e17c:	f383 8811 	msr	BASEPRI, r3
 800e180:	f3bf 8f6f 	isb	sy
 800e184:	f3bf 8f4f 	dsb	sy
 800e188:	60fb      	str	r3, [r7, #12]
}
 800e18a:	bf00      	nop
 800e18c:	e7fe      	b.n	800e18c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e18e:	69bb      	ldr	r3, [r7, #24]
 800e190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e192:	683a      	ldr	r2, [r7, #0]
 800e194:	429a      	cmp	r2, r3
 800e196:	d902      	bls.n	800e19e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	61fb      	str	r3, [r7, #28]
 800e19c:	e002      	b.n	800e1a4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e19e:	69bb      	ldr	r3, [r7, #24]
 800e1a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e1a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e1a4:	69bb      	ldr	r3, [r7, #24]
 800e1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1a8:	69fa      	ldr	r2, [r7, #28]
 800e1aa:	429a      	cmp	r2, r3
 800e1ac:	d04b      	beq.n	800e246 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e1ae:	69bb      	ldr	r3, [r7, #24]
 800e1b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1b2:	697a      	ldr	r2, [r7, #20]
 800e1b4:	429a      	cmp	r2, r3
 800e1b6:	d146      	bne.n	800e246 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e1b8:	4b25      	ldr	r3, [pc, #148]	; (800e250 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	69ba      	ldr	r2, [r7, #24]
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d10a      	bne.n	800e1d8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1c6:	f383 8811 	msr	BASEPRI, r3
 800e1ca:	f3bf 8f6f 	isb	sy
 800e1ce:	f3bf 8f4f 	dsb	sy
 800e1d2:	60bb      	str	r3, [r7, #8]
}
 800e1d4:	bf00      	nop
 800e1d6:	e7fe      	b.n	800e1d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1dc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e1de:	69bb      	ldr	r3, [r7, #24]
 800e1e0:	69fa      	ldr	r2, [r7, #28]
 800e1e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	699b      	ldr	r3, [r3, #24]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	db04      	blt.n	800e1f6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e1f2:	69bb      	ldr	r3, [r7, #24]
 800e1f4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e1f6:	69bb      	ldr	r3, [r7, #24]
 800e1f8:	6959      	ldr	r1, [r3, #20]
 800e1fa:	693a      	ldr	r2, [r7, #16]
 800e1fc:	4613      	mov	r3, r2
 800e1fe:	009b      	lsls	r3, r3, #2
 800e200:	4413      	add	r3, r2
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	4a13      	ldr	r2, [pc, #76]	; (800e254 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e206:	4413      	add	r3, r2
 800e208:	4299      	cmp	r1, r3
 800e20a:	d11c      	bne.n	800e246 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e20c:	69bb      	ldr	r3, [r7, #24]
 800e20e:	3304      	adds	r3, #4
 800e210:	4618      	mov	r0, r3
 800e212:	f7fe f857 	bl	800c2c4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e216:	69bb      	ldr	r3, [r7, #24]
 800e218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e21a:	4b0f      	ldr	r3, [pc, #60]	; (800e258 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	429a      	cmp	r2, r3
 800e220:	d903      	bls.n	800e22a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e222:	69bb      	ldr	r3, [r7, #24]
 800e224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e226:	4a0c      	ldr	r2, [pc, #48]	; (800e258 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e228:	6013      	str	r3, [r2, #0]
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e22e:	4613      	mov	r3, r2
 800e230:	009b      	lsls	r3, r3, #2
 800e232:	4413      	add	r3, r2
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	4a07      	ldr	r2, [pc, #28]	; (800e254 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e238:	441a      	add	r2, r3
 800e23a:	69bb      	ldr	r3, [r7, #24]
 800e23c:	3304      	adds	r3, #4
 800e23e:	4619      	mov	r1, r3
 800e240:	4610      	mov	r0, r2
 800e242:	f7fd ffe2 	bl	800c20a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e246:	bf00      	nop
 800e248:	3720      	adds	r7, #32
 800e24a:	46bd      	mov	sp, r7
 800e24c:	bd80      	pop	{r7, pc}
 800e24e:	bf00      	nop
 800e250:	20004280 	.word	0x20004280
 800e254:	20004284 	.word	0x20004284
 800e258:	2000475c 	.word	0x2000475c

0800e25c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e25c:	b480      	push	{r7}
 800e25e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e260:	4b07      	ldr	r3, [pc, #28]	; (800e280 <pvTaskIncrementMutexHeldCount+0x24>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d004      	beq.n	800e272 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e268:	4b05      	ldr	r3, [pc, #20]	; (800e280 <pvTaskIncrementMutexHeldCount+0x24>)
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e26e:	3201      	adds	r2, #1
 800e270:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e272:	4b03      	ldr	r3, [pc, #12]	; (800e280 <pvTaskIncrementMutexHeldCount+0x24>)
 800e274:	681b      	ldr	r3, [r3, #0]
	}
 800e276:	4618      	mov	r0, r3
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr
 800e280:	20004280 	.word	0x20004280

0800e284 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b084      	sub	sp, #16
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e28e:	4b21      	ldr	r3, [pc, #132]	; (800e314 <prvAddCurrentTaskToDelayedList+0x90>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e294:	4b20      	ldr	r3, [pc, #128]	; (800e318 <prvAddCurrentTaskToDelayedList+0x94>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	3304      	adds	r3, #4
 800e29a:	4618      	mov	r0, r3
 800e29c:	f7fe f812 	bl	800c2c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2a6:	d10a      	bne.n	800e2be <prvAddCurrentTaskToDelayedList+0x3a>
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d007      	beq.n	800e2be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2ae:	4b1a      	ldr	r3, [pc, #104]	; (800e318 <prvAddCurrentTaskToDelayedList+0x94>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	3304      	adds	r3, #4
 800e2b4:	4619      	mov	r1, r3
 800e2b6:	4819      	ldr	r0, [pc, #100]	; (800e31c <prvAddCurrentTaskToDelayedList+0x98>)
 800e2b8:	f7fd ffa7 	bl	800c20a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e2bc:	e026      	b.n	800e30c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e2be:	68fa      	ldr	r2, [r7, #12]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	4413      	add	r3, r2
 800e2c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e2c6:	4b14      	ldr	r3, [pc, #80]	; (800e318 <prvAddCurrentTaskToDelayedList+0x94>)
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	68ba      	ldr	r2, [r7, #8]
 800e2cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e2ce:	68ba      	ldr	r2, [r7, #8]
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d209      	bcs.n	800e2ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2d6:	4b12      	ldr	r3, [pc, #72]	; (800e320 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	4b0f      	ldr	r3, [pc, #60]	; (800e318 <prvAddCurrentTaskToDelayedList+0x94>)
 800e2dc:	681b      	ldr	r3, [r3, #0]
 800e2de:	3304      	adds	r3, #4
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	4610      	mov	r0, r2
 800e2e4:	f7fd ffb5 	bl	800c252 <vListInsert>
}
 800e2e8:	e010      	b.n	800e30c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e2ea:	4b0e      	ldr	r3, [pc, #56]	; (800e324 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e2ec:	681a      	ldr	r2, [r3, #0]
 800e2ee:	4b0a      	ldr	r3, [pc, #40]	; (800e318 <prvAddCurrentTaskToDelayedList+0x94>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	3304      	adds	r3, #4
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	f7fd ffab 	bl	800c252 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e2fc:	4b0a      	ldr	r3, [pc, #40]	; (800e328 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	429a      	cmp	r2, r3
 800e304:	d202      	bcs.n	800e30c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e306:	4a08      	ldr	r2, [pc, #32]	; (800e328 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	6013      	str	r3, [r2, #0]
}
 800e30c:	bf00      	nop
 800e30e:	3710      	adds	r7, #16
 800e310:	46bd      	mov	sp, r7
 800e312:	bd80      	pop	{r7, pc}
 800e314:	20004758 	.word	0x20004758
 800e318:	20004280 	.word	0x20004280
 800e31c:	20004740 	.word	0x20004740
 800e320:	20004710 	.word	0x20004710
 800e324:	2000470c 	.word	0x2000470c
 800e328:	20004774 	.word	0x20004774

0800e32c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b08a      	sub	sp, #40	; 0x28
 800e330:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e332:	2300      	movs	r3, #0
 800e334:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e336:	f000 fb07 	bl	800e948 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e33a:	4b1c      	ldr	r3, [pc, #112]	; (800e3ac <xTimerCreateTimerTask+0x80>)
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d021      	beq.n	800e386 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e342:	2300      	movs	r3, #0
 800e344:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e346:	2300      	movs	r3, #0
 800e348:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e34a:	1d3a      	adds	r2, r7, #4
 800e34c:	f107 0108 	add.w	r1, r7, #8
 800e350:	f107 030c 	add.w	r3, r7, #12
 800e354:	4618      	mov	r0, r3
 800e356:	f7fd ff11 	bl	800c17c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e35a:	6879      	ldr	r1, [r7, #4]
 800e35c:	68bb      	ldr	r3, [r7, #8]
 800e35e:	68fa      	ldr	r2, [r7, #12]
 800e360:	9202      	str	r2, [sp, #8]
 800e362:	9301      	str	r3, [sp, #4]
 800e364:	2302      	movs	r3, #2
 800e366:	9300      	str	r3, [sp, #0]
 800e368:	2300      	movs	r3, #0
 800e36a:	460a      	mov	r2, r1
 800e36c:	4910      	ldr	r1, [pc, #64]	; (800e3b0 <xTimerCreateTimerTask+0x84>)
 800e36e:	4811      	ldr	r0, [pc, #68]	; (800e3b4 <xTimerCreateTimerTask+0x88>)
 800e370:	f7fe ffe0 	bl	800d334 <xTaskCreateStatic>
 800e374:	4603      	mov	r3, r0
 800e376:	4a10      	ldr	r2, [pc, #64]	; (800e3b8 <xTimerCreateTimerTask+0x8c>)
 800e378:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e37a:	4b0f      	ldr	r3, [pc, #60]	; (800e3b8 <xTimerCreateTimerTask+0x8c>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d001      	beq.n	800e386 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e382:	2301      	movs	r3, #1
 800e384:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e386:	697b      	ldr	r3, [r7, #20]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d10a      	bne.n	800e3a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e390:	f383 8811 	msr	BASEPRI, r3
 800e394:	f3bf 8f6f 	isb	sy
 800e398:	f3bf 8f4f 	dsb	sy
 800e39c:	613b      	str	r3, [r7, #16]
}
 800e39e:	bf00      	nop
 800e3a0:	e7fe      	b.n	800e3a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e3a2:	697b      	ldr	r3, [r7, #20]
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3718      	adds	r7, #24
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	200047b0 	.word	0x200047b0
 800e3b0:	080148ec 	.word	0x080148ec
 800e3b4:	0800e4f1 	.word	0x0800e4f1
 800e3b8:	200047b4 	.word	0x200047b4

0800e3bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b08a      	sub	sp, #40	; 0x28
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	60f8      	str	r0, [r7, #12]
 800e3c4:	60b9      	str	r1, [r7, #8]
 800e3c6:	607a      	str	r2, [r7, #4]
 800e3c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d10a      	bne.n	800e3ea <xTimerGenericCommand+0x2e>
	__asm volatile
 800e3d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3d8:	f383 8811 	msr	BASEPRI, r3
 800e3dc:	f3bf 8f6f 	isb	sy
 800e3e0:	f3bf 8f4f 	dsb	sy
 800e3e4:	623b      	str	r3, [r7, #32]
}
 800e3e6:	bf00      	nop
 800e3e8:	e7fe      	b.n	800e3e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e3ea:	4b1a      	ldr	r3, [pc, #104]	; (800e454 <xTimerGenericCommand+0x98>)
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d02a      	beq.n	800e448 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	2b05      	cmp	r3, #5
 800e402:	dc18      	bgt.n	800e436 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e404:	f7ff fdb4 	bl	800df70 <xTaskGetSchedulerState>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b02      	cmp	r3, #2
 800e40c:	d109      	bne.n	800e422 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e40e:	4b11      	ldr	r3, [pc, #68]	; (800e454 <xTimerGenericCommand+0x98>)
 800e410:	6818      	ldr	r0, [r3, #0]
 800e412:	f107 0110 	add.w	r1, r7, #16
 800e416:	2300      	movs	r3, #0
 800e418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e41a:	f7fe f925 	bl	800c668 <xQueueGenericSend>
 800e41e:	6278      	str	r0, [r7, #36]	; 0x24
 800e420:	e012      	b.n	800e448 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e422:	4b0c      	ldr	r3, [pc, #48]	; (800e454 <xTimerGenericCommand+0x98>)
 800e424:	6818      	ldr	r0, [r3, #0]
 800e426:	f107 0110 	add.w	r1, r7, #16
 800e42a:	2300      	movs	r3, #0
 800e42c:	2200      	movs	r2, #0
 800e42e:	f7fe f91b 	bl	800c668 <xQueueGenericSend>
 800e432:	6278      	str	r0, [r7, #36]	; 0x24
 800e434:	e008      	b.n	800e448 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e436:	4b07      	ldr	r3, [pc, #28]	; (800e454 <xTimerGenericCommand+0x98>)
 800e438:	6818      	ldr	r0, [r3, #0]
 800e43a:	f107 0110 	add.w	r1, r7, #16
 800e43e:	2300      	movs	r3, #0
 800e440:	683a      	ldr	r2, [r7, #0]
 800e442:	f7fe fa0f 	bl	800c864 <xQueueGenericSendFromISR>
 800e446:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3728      	adds	r7, #40	; 0x28
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}
 800e452:	bf00      	nop
 800e454:	200047b0 	.word	0x200047b0

0800e458 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b088      	sub	sp, #32
 800e45c:	af02      	add	r7, sp, #8
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e462:	4b22      	ldr	r3, [pc, #136]	; (800e4ec <prvProcessExpiredTimer+0x94>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	68db      	ldr	r3, [r3, #12]
 800e468:	68db      	ldr	r3, [r3, #12]
 800e46a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e46c:	697b      	ldr	r3, [r7, #20]
 800e46e:	3304      	adds	r3, #4
 800e470:	4618      	mov	r0, r3
 800e472:	f7fd ff27 	bl	800c2c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e47c:	f003 0304 	and.w	r3, r3, #4
 800e480:	2b00      	cmp	r3, #0
 800e482:	d022      	beq.n	800e4ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	699a      	ldr	r2, [r3, #24]
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	18d1      	adds	r1, r2, r3
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	683a      	ldr	r2, [r7, #0]
 800e490:	6978      	ldr	r0, [r7, #20]
 800e492:	f000 f8d1 	bl	800e638 <prvInsertTimerInActiveList>
 800e496:	4603      	mov	r3, r0
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d01f      	beq.n	800e4dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e49c:	2300      	movs	r3, #0
 800e49e:	9300      	str	r3, [sp, #0]
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	687a      	ldr	r2, [r7, #4]
 800e4a4:	2100      	movs	r1, #0
 800e4a6:	6978      	ldr	r0, [r7, #20]
 800e4a8:	f7ff ff88 	bl	800e3bc <xTimerGenericCommand>
 800e4ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e4ae:	693b      	ldr	r3, [r7, #16]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d113      	bne.n	800e4dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 800e4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b8:	f383 8811 	msr	BASEPRI, r3
 800e4bc:	f3bf 8f6f 	isb	sy
 800e4c0:	f3bf 8f4f 	dsb	sy
 800e4c4:	60fb      	str	r3, [r7, #12]
}
 800e4c6:	bf00      	nop
 800e4c8:	e7fe      	b.n	800e4c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e4d0:	f023 0301 	bic.w	r3, r3, #1
 800e4d4:	b2da      	uxtb	r2, r3
 800e4d6:	697b      	ldr	r3, [r7, #20]
 800e4d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e4dc:	697b      	ldr	r3, [r7, #20]
 800e4de:	6a1b      	ldr	r3, [r3, #32]
 800e4e0:	6978      	ldr	r0, [r7, #20]
 800e4e2:	4798      	blx	r3
}
 800e4e4:	bf00      	nop
 800e4e6:	3718      	adds	r7, #24
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	200047a8 	.word	0x200047a8

0800e4f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b084      	sub	sp, #16
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e4f8:	f107 0308 	add.w	r3, r7, #8
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f000 f857 	bl	800e5b0 <prvGetNextExpireTime>
 800e502:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e504:	68bb      	ldr	r3, [r7, #8]
 800e506:	4619      	mov	r1, r3
 800e508:	68f8      	ldr	r0, [r7, #12]
 800e50a:	f000 f803 	bl	800e514 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e50e:	f000 f8d5 	bl	800e6bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e512:	e7f1      	b.n	800e4f8 <prvTimerTask+0x8>

0800e514 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b084      	sub	sp, #16
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e51e:	f7ff f945 	bl	800d7ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e522:	f107 0308 	add.w	r3, r7, #8
 800e526:	4618      	mov	r0, r3
 800e528:	f000 f866 	bl	800e5f8 <prvSampleTimeNow>
 800e52c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e52e:	68bb      	ldr	r3, [r7, #8]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d130      	bne.n	800e596 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d10a      	bne.n	800e550 <prvProcessTimerOrBlockTask+0x3c>
 800e53a:	687a      	ldr	r2, [r7, #4]
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	429a      	cmp	r2, r3
 800e540:	d806      	bhi.n	800e550 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e542:	f7ff f941 	bl	800d7c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e546:	68f9      	ldr	r1, [r7, #12]
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f7ff ff85 	bl	800e458 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e54e:	e024      	b.n	800e59a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e550:	683b      	ldr	r3, [r7, #0]
 800e552:	2b00      	cmp	r3, #0
 800e554:	d008      	beq.n	800e568 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e556:	4b13      	ldr	r3, [pc, #76]	; (800e5a4 <prvProcessTimerOrBlockTask+0x90>)
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d101      	bne.n	800e564 <prvProcessTimerOrBlockTask+0x50>
 800e560:	2301      	movs	r3, #1
 800e562:	e000      	b.n	800e566 <prvProcessTimerOrBlockTask+0x52>
 800e564:	2300      	movs	r3, #0
 800e566:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e568:	4b0f      	ldr	r3, [pc, #60]	; (800e5a8 <prvProcessTimerOrBlockTask+0x94>)
 800e56a:	6818      	ldr	r0, [r3, #0]
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	1ad3      	subs	r3, r2, r3
 800e572:	683a      	ldr	r2, [r7, #0]
 800e574:	4619      	mov	r1, r3
 800e576:	f7fe fea9 	bl	800d2cc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e57a:	f7ff f925 	bl	800d7c8 <xTaskResumeAll>
 800e57e:	4603      	mov	r3, r0
 800e580:	2b00      	cmp	r3, #0
 800e582:	d10a      	bne.n	800e59a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e584:	4b09      	ldr	r3, [pc, #36]	; (800e5ac <prvProcessTimerOrBlockTask+0x98>)
 800e586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e58a:	601a      	str	r2, [r3, #0]
 800e58c:	f3bf 8f4f 	dsb	sy
 800e590:	f3bf 8f6f 	isb	sy
}
 800e594:	e001      	b.n	800e59a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e596:	f7ff f917 	bl	800d7c8 <xTaskResumeAll>
}
 800e59a:	bf00      	nop
 800e59c:	3710      	adds	r7, #16
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	bd80      	pop	{r7, pc}
 800e5a2:	bf00      	nop
 800e5a4:	200047ac 	.word	0x200047ac
 800e5a8:	200047b0 	.word	0x200047b0
 800e5ac:	e000ed04 	.word	0xe000ed04

0800e5b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	b085      	sub	sp, #20
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e5b8:	4b0e      	ldr	r3, [pc, #56]	; (800e5f4 <prvGetNextExpireTime+0x44>)
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d101      	bne.n	800e5c6 <prvGetNextExpireTime+0x16>
 800e5c2:	2201      	movs	r2, #1
 800e5c4:	e000      	b.n	800e5c8 <prvGetNextExpireTime+0x18>
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	681b      	ldr	r3, [r3, #0]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d105      	bne.n	800e5e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e5d4:	4b07      	ldr	r3, [pc, #28]	; (800e5f4 <prvGetNextExpireTime+0x44>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	68db      	ldr	r3, [r3, #12]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	60fb      	str	r3, [r7, #12]
 800e5de:	e001      	b.n	800e5e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
}
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	3714      	adds	r7, #20
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr
 800e5f2:	bf00      	nop
 800e5f4:	200047a8 	.word	0x200047a8

0800e5f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b084      	sub	sp, #16
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e600:	f7ff f980 	bl	800d904 <xTaskGetTickCount>
 800e604:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e606:	4b0b      	ldr	r3, [pc, #44]	; (800e634 <prvSampleTimeNow+0x3c>)
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	429a      	cmp	r2, r3
 800e60e:	d205      	bcs.n	800e61c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e610:	f000 f936 	bl	800e880 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2201      	movs	r2, #1
 800e618:	601a      	str	r2, [r3, #0]
 800e61a:	e002      	b.n	800e622 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2200      	movs	r2, #0
 800e620:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e622:	4a04      	ldr	r2, [pc, #16]	; (800e634 <prvSampleTimeNow+0x3c>)
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e628:	68fb      	ldr	r3, [r7, #12]
}
 800e62a:	4618      	mov	r0, r3
 800e62c:	3710      	adds	r7, #16
 800e62e:	46bd      	mov	sp, r7
 800e630:	bd80      	pop	{r7, pc}
 800e632:	bf00      	nop
 800e634:	200047b8 	.word	0x200047b8

0800e638 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b086      	sub	sp, #24
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	60f8      	str	r0, [r7, #12]
 800e640:	60b9      	str	r1, [r7, #8]
 800e642:	607a      	str	r2, [r7, #4]
 800e644:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e646:	2300      	movs	r3, #0
 800e648:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	68ba      	ldr	r2, [r7, #8]
 800e64e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	68fa      	ldr	r2, [r7, #12]
 800e654:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e656:	68ba      	ldr	r2, [r7, #8]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	429a      	cmp	r2, r3
 800e65c:	d812      	bhi.n	800e684 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e65e:	687a      	ldr	r2, [r7, #4]
 800e660:	683b      	ldr	r3, [r7, #0]
 800e662:	1ad2      	subs	r2, r2, r3
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	699b      	ldr	r3, [r3, #24]
 800e668:	429a      	cmp	r2, r3
 800e66a:	d302      	bcc.n	800e672 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e66c:	2301      	movs	r3, #1
 800e66e:	617b      	str	r3, [r7, #20]
 800e670:	e01b      	b.n	800e6aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e672:	4b10      	ldr	r3, [pc, #64]	; (800e6b4 <prvInsertTimerInActiveList+0x7c>)
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	3304      	adds	r3, #4
 800e67a:	4619      	mov	r1, r3
 800e67c:	4610      	mov	r0, r2
 800e67e:	f7fd fde8 	bl	800c252 <vListInsert>
 800e682:	e012      	b.n	800e6aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e684:	687a      	ldr	r2, [r7, #4]
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	429a      	cmp	r2, r3
 800e68a:	d206      	bcs.n	800e69a <prvInsertTimerInActiveList+0x62>
 800e68c:	68ba      	ldr	r2, [r7, #8]
 800e68e:	683b      	ldr	r3, [r7, #0]
 800e690:	429a      	cmp	r2, r3
 800e692:	d302      	bcc.n	800e69a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e694:	2301      	movs	r3, #1
 800e696:	617b      	str	r3, [r7, #20]
 800e698:	e007      	b.n	800e6aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e69a:	4b07      	ldr	r3, [pc, #28]	; (800e6b8 <prvInsertTimerInActiveList+0x80>)
 800e69c:	681a      	ldr	r2, [r3, #0]
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	3304      	adds	r3, #4
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	4610      	mov	r0, r2
 800e6a6:	f7fd fdd4 	bl	800c252 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e6aa:	697b      	ldr	r3, [r7, #20]
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3718      	adds	r7, #24
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	200047ac 	.word	0x200047ac
 800e6b8:	200047a8 	.word	0x200047a8

0800e6bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e6bc:	b580      	push	{r7, lr}
 800e6be:	b08e      	sub	sp, #56	; 0x38
 800e6c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e6c2:	e0ca      	b.n	800e85a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	da18      	bge.n	800e6fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e6ca:	1d3b      	adds	r3, r7, #4
 800e6cc:	3304      	adds	r3, #4
 800e6ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d10a      	bne.n	800e6ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 800e6d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6da:	f383 8811 	msr	BASEPRI, r3
 800e6de:	f3bf 8f6f 	isb	sy
 800e6e2:	f3bf 8f4f 	dsb	sy
 800e6e6:	61fb      	str	r3, [r7, #28]
}
 800e6e8:	bf00      	nop
 800e6ea:	e7fe      	b.n	800e6ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6f2:	6850      	ldr	r0, [r2, #4]
 800e6f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6f6:	6892      	ldr	r2, [r2, #8]
 800e6f8:	4611      	mov	r1, r2
 800e6fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	f2c0 80ab 	blt.w	800e85a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e70a:	695b      	ldr	r3, [r3, #20]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d004      	beq.n	800e71a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e712:	3304      	adds	r3, #4
 800e714:	4618      	mov	r0, r3
 800e716:	f7fd fdd5 	bl	800c2c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e71a:	463b      	mov	r3, r7
 800e71c:	4618      	mov	r0, r3
 800e71e:	f7ff ff6b 	bl	800e5f8 <prvSampleTimeNow>
 800e722:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2b09      	cmp	r3, #9
 800e728:	f200 8096 	bhi.w	800e858 <prvProcessReceivedCommands+0x19c>
 800e72c:	a201      	add	r2, pc, #4	; (adr r2, 800e734 <prvProcessReceivedCommands+0x78>)
 800e72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e732:	bf00      	nop
 800e734:	0800e75d 	.word	0x0800e75d
 800e738:	0800e75d 	.word	0x0800e75d
 800e73c:	0800e75d 	.word	0x0800e75d
 800e740:	0800e7d1 	.word	0x0800e7d1
 800e744:	0800e7e5 	.word	0x0800e7e5
 800e748:	0800e82f 	.word	0x0800e82f
 800e74c:	0800e75d 	.word	0x0800e75d
 800e750:	0800e75d 	.word	0x0800e75d
 800e754:	0800e7d1 	.word	0x0800e7d1
 800e758:	0800e7e5 	.word	0x0800e7e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e75e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e762:	f043 0301 	orr.w	r3, r3, #1
 800e766:	b2da      	uxtb	r2, r3
 800e768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e76a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e76e:	68ba      	ldr	r2, [r7, #8]
 800e770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e772:	699b      	ldr	r3, [r3, #24]
 800e774:	18d1      	adds	r1, r2, r3
 800e776:	68bb      	ldr	r3, [r7, #8]
 800e778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e77a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e77c:	f7ff ff5c 	bl	800e638 <prvInsertTimerInActiveList>
 800e780:	4603      	mov	r3, r0
 800e782:	2b00      	cmp	r3, #0
 800e784:	d069      	beq.n	800e85a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e788:	6a1b      	ldr	r3, [r3, #32]
 800e78a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e78c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e794:	f003 0304 	and.w	r3, r3, #4
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d05e      	beq.n	800e85a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e79c:	68ba      	ldr	r2, [r7, #8]
 800e79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7a0:	699b      	ldr	r3, [r3, #24]
 800e7a2:	441a      	add	r2, r3
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	9300      	str	r3, [sp, #0]
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	2100      	movs	r1, #0
 800e7ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e7ae:	f7ff fe05 	bl	800e3bc <xTimerGenericCommand>
 800e7b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e7b4:	6a3b      	ldr	r3, [r7, #32]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d14f      	bne.n	800e85a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800e7ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7be:	f383 8811 	msr	BASEPRI, r3
 800e7c2:	f3bf 8f6f 	isb	sy
 800e7c6:	f3bf 8f4f 	dsb	sy
 800e7ca:	61bb      	str	r3, [r7, #24]
}
 800e7cc:	bf00      	nop
 800e7ce:	e7fe      	b.n	800e7ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7d6:	f023 0301 	bic.w	r3, r3, #1
 800e7da:	b2da      	uxtb	r2, r3
 800e7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e7e2:	e03a      	b.n	800e85a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e7ea:	f043 0301 	orr.w	r3, r3, #1
 800e7ee:	b2da      	uxtb	r2, r3
 800e7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e7f6:	68ba      	ldr	r2, [r7, #8]
 800e7f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7fe:	699b      	ldr	r3, [r3, #24]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d10a      	bne.n	800e81a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e804:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	617b      	str	r3, [r7, #20]
}
 800e816:	bf00      	nop
 800e818:	e7fe      	b.n	800e818 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e81a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e81c:	699a      	ldr	r2, [r3, #24]
 800e81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e820:	18d1      	adds	r1, r2, r3
 800e822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e828:	f7ff ff06 	bl	800e638 <prvInsertTimerInActiveList>
					break;
 800e82c:	e015      	b.n	800e85a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e834:	f003 0302 	and.w	r3, r3, #2
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d103      	bne.n	800e844 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e83c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e83e:	f000 fbdf 	bl	800f000 <vPortFree>
 800e842:	e00a      	b.n	800e85a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e84a:	f023 0301 	bic.w	r3, r3, #1
 800e84e:	b2da      	uxtb	r2, r3
 800e850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e856:	e000      	b.n	800e85a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800e858:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e85a:	4b08      	ldr	r3, [pc, #32]	; (800e87c <prvProcessReceivedCommands+0x1c0>)
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	1d39      	adds	r1, r7, #4
 800e860:	2200      	movs	r2, #0
 800e862:	4618      	mov	r0, r3
 800e864:	f7fe f926 	bl	800cab4 <xQueueReceive>
 800e868:	4603      	mov	r3, r0
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	f47f af2a 	bne.w	800e6c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e870:	bf00      	nop
 800e872:	bf00      	nop
 800e874:	3730      	adds	r7, #48	; 0x30
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	200047b0 	.word	0x200047b0

0800e880 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b088      	sub	sp, #32
 800e884:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e886:	e048      	b.n	800e91a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e888:	4b2d      	ldr	r3, [pc, #180]	; (800e940 <prvSwitchTimerLists+0xc0>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	68db      	ldr	r3, [r3, #12]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e892:	4b2b      	ldr	r3, [pc, #172]	; (800e940 <prvSwitchTimerLists+0xc0>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	68db      	ldr	r3, [r3, #12]
 800e898:	68db      	ldr	r3, [r3, #12]
 800e89a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	3304      	adds	r3, #4
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7fd fd0f 	bl	800c2c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	6a1b      	ldr	r3, [r3, #32]
 800e8aa:	68f8      	ldr	r0, [r7, #12]
 800e8ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e8b4:	f003 0304 	and.w	r3, r3, #4
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d02e      	beq.n	800e91a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	699b      	ldr	r3, [r3, #24]
 800e8c0:	693a      	ldr	r2, [r7, #16]
 800e8c2:	4413      	add	r3, r2
 800e8c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e8c6:	68ba      	ldr	r2, [r7, #8]
 800e8c8:	693b      	ldr	r3, [r7, #16]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d90e      	bls.n	800e8ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	68ba      	ldr	r2, [r7, #8]
 800e8d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	68fa      	ldr	r2, [r7, #12]
 800e8d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e8da:	4b19      	ldr	r3, [pc, #100]	; (800e940 <prvSwitchTimerLists+0xc0>)
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	3304      	adds	r3, #4
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	4610      	mov	r0, r2
 800e8e6:	f7fd fcb4 	bl	800c252 <vListInsert>
 800e8ea:	e016      	b.n	800e91a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	9300      	str	r3, [sp, #0]
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	693a      	ldr	r2, [r7, #16]
 800e8f4:	2100      	movs	r1, #0
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f7ff fd60 	bl	800e3bc <xTimerGenericCommand>
 800e8fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d10a      	bne.n	800e91a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e904:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e908:	f383 8811 	msr	BASEPRI, r3
 800e90c:	f3bf 8f6f 	isb	sy
 800e910:	f3bf 8f4f 	dsb	sy
 800e914:	603b      	str	r3, [r7, #0]
}
 800e916:	bf00      	nop
 800e918:	e7fe      	b.n	800e918 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e91a:	4b09      	ldr	r3, [pc, #36]	; (800e940 <prvSwitchTimerLists+0xc0>)
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d1b1      	bne.n	800e888 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e924:	4b06      	ldr	r3, [pc, #24]	; (800e940 <prvSwitchTimerLists+0xc0>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e92a:	4b06      	ldr	r3, [pc, #24]	; (800e944 <prvSwitchTimerLists+0xc4>)
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	4a04      	ldr	r2, [pc, #16]	; (800e940 <prvSwitchTimerLists+0xc0>)
 800e930:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e932:	4a04      	ldr	r2, [pc, #16]	; (800e944 <prvSwitchTimerLists+0xc4>)
 800e934:	697b      	ldr	r3, [r7, #20]
 800e936:	6013      	str	r3, [r2, #0]
}
 800e938:	bf00      	nop
 800e93a:	3718      	adds	r7, #24
 800e93c:	46bd      	mov	sp, r7
 800e93e:	bd80      	pop	{r7, pc}
 800e940:	200047a8 	.word	0x200047a8
 800e944:	200047ac 	.word	0x200047ac

0800e948 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e948:	b580      	push	{r7, lr}
 800e94a:	b082      	sub	sp, #8
 800e94c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e94e:	f000 f969 	bl	800ec24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e952:	4b15      	ldr	r3, [pc, #84]	; (800e9a8 <prvCheckForValidListAndQueue+0x60>)
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d120      	bne.n	800e99c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e95a:	4814      	ldr	r0, [pc, #80]	; (800e9ac <prvCheckForValidListAndQueue+0x64>)
 800e95c:	f7fd fc28 	bl	800c1b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e960:	4813      	ldr	r0, [pc, #76]	; (800e9b0 <prvCheckForValidListAndQueue+0x68>)
 800e962:	f7fd fc25 	bl	800c1b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e966:	4b13      	ldr	r3, [pc, #76]	; (800e9b4 <prvCheckForValidListAndQueue+0x6c>)
 800e968:	4a10      	ldr	r2, [pc, #64]	; (800e9ac <prvCheckForValidListAndQueue+0x64>)
 800e96a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e96c:	4b12      	ldr	r3, [pc, #72]	; (800e9b8 <prvCheckForValidListAndQueue+0x70>)
 800e96e:	4a10      	ldr	r2, [pc, #64]	; (800e9b0 <prvCheckForValidListAndQueue+0x68>)
 800e970:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e972:	2300      	movs	r3, #0
 800e974:	9300      	str	r3, [sp, #0]
 800e976:	4b11      	ldr	r3, [pc, #68]	; (800e9bc <prvCheckForValidListAndQueue+0x74>)
 800e978:	4a11      	ldr	r2, [pc, #68]	; (800e9c0 <prvCheckForValidListAndQueue+0x78>)
 800e97a:	2110      	movs	r1, #16
 800e97c:	200a      	movs	r0, #10
 800e97e:	f7fd fd33 	bl	800c3e8 <xQueueGenericCreateStatic>
 800e982:	4603      	mov	r3, r0
 800e984:	4a08      	ldr	r2, [pc, #32]	; (800e9a8 <prvCheckForValidListAndQueue+0x60>)
 800e986:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e988:	4b07      	ldr	r3, [pc, #28]	; (800e9a8 <prvCheckForValidListAndQueue+0x60>)
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d005      	beq.n	800e99c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e990:	4b05      	ldr	r3, [pc, #20]	; (800e9a8 <prvCheckForValidListAndQueue+0x60>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	490b      	ldr	r1, [pc, #44]	; (800e9c4 <prvCheckForValidListAndQueue+0x7c>)
 800e996:	4618      	mov	r0, r3
 800e998:	f7fe fc44 	bl	800d224 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e99c:	f000 f972 	bl	800ec84 <vPortExitCritical>
}
 800e9a0:	bf00      	nop
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	bd80      	pop	{r7, pc}
 800e9a6:	bf00      	nop
 800e9a8:	200047b0 	.word	0x200047b0
 800e9ac:	20004780 	.word	0x20004780
 800e9b0:	20004794 	.word	0x20004794
 800e9b4:	200047a8 	.word	0x200047a8
 800e9b8:	200047ac 	.word	0x200047ac
 800e9bc:	2000485c 	.word	0x2000485c
 800e9c0:	200047bc 	.word	0x200047bc
 800e9c4:	080148f4 	.word	0x080148f4

0800e9c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b085      	sub	sp, #20
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	3b04      	subs	r3, #4
 800e9d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e9e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	3b04      	subs	r3, #4
 800e9e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e9e8:	68bb      	ldr	r3, [r7, #8]
 800e9ea:	f023 0201 	bic.w	r2, r3, #1
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	3b04      	subs	r3, #4
 800e9f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e9f8:	4a0c      	ldr	r2, [pc, #48]	; (800ea2c <pxPortInitialiseStack+0x64>)
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	3b14      	subs	r3, #20
 800ea02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea04:	687a      	ldr	r2, [r7, #4]
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	3b04      	subs	r3, #4
 800ea0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	f06f 0202 	mvn.w	r2, #2
 800ea16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	3b20      	subs	r3, #32
 800ea1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	3714      	adds	r7, #20
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr
 800ea2c:	0800ea31 	.word	0x0800ea31

0800ea30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ea30:	b480      	push	{r7}
 800ea32:	b085      	sub	sp, #20
 800ea34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ea36:	2300      	movs	r3, #0
 800ea38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ea3a:	4b12      	ldr	r3, [pc, #72]	; (800ea84 <prvTaskExitError+0x54>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea42:	d00a      	beq.n	800ea5a <prvTaskExitError+0x2a>
	__asm volatile
 800ea44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea48:	f383 8811 	msr	BASEPRI, r3
 800ea4c:	f3bf 8f6f 	isb	sy
 800ea50:	f3bf 8f4f 	dsb	sy
 800ea54:	60fb      	str	r3, [r7, #12]
}
 800ea56:	bf00      	nop
 800ea58:	e7fe      	b.n	800ea58 <prvTaskExitError+0x28>
	__asm volatile
 800ea5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea5e:	f383 8811 	msr	BASEPRI, r3
 800ea62:	f3bf 8f6f 	isb	sy
 800ea66:	f3bf 8f4f 	dsb	sy
 800ea6a:	60bb      	str	r3, [r7, #8]
}
 800ea6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ea6e:	bf00      	nop
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d0fc      	beq.n	800ea70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ea76:	bf00      	nop
 800ea78:	bf00      	nop
 800ea7a:	3714      	adds	r7, #20
 800ea7c:	46bd      	mov	sp, r7
 800ea7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea82:	4770      	bx	lr
 800ea84:	200000c8 	.word	0x200000c8
	...

0800ea90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ea90:	4b07      	ldr	r3, [pc, #28]	; (800eab0 <pxCurrentTCBConst2>)
 800ea92:	6819      	ldr	r1, [r3, #0]
 800ea94:	6808      	ldr	r0, [r1, #0]
 800ea96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea9a:	f380 8809 	msr	PSP, r0
 800ea9e:	f3bf 8f6f 	isb	sy
 800eaa2:	f04f 0000 	mov.w	r0, #0
 800eaa6:	f380 8811 	msr	BASEPRI, r0
 800eaaa:	4770      	bx	lr
 800eaac:	f3af 8000 	nop.w

0800eab0 <pxCurrentTCBConst2>:
 800eab0:	20004280 	.word	0x20004280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eab4:	bf00      	nop
 800eab6:	bf00      	nop

0800eab8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eab8:	4808      	ldr	r0, [pc, #32]	; (800eadc <prvPortStartFirstTask+0x24>)
 800eaba:	6800      	ldr	r0, [r0, #0]
 800eabc:	6800      	ldr	r0, [r0, #0]
 800eabe:	f380 8808 	msr	MSP, r0
 800eac2:	f04f 0000 	mov.w	r0, #0
 800eac6:	f380 8814 	msr	CONTROL, r0
 800eaca:	b662      	cpsie	i
 800eacc:	b661      	cpsie	f
 800eace:	f3bf 8f4f 	dsb	sy
 800ead2:	f3bf 8f6f 	isb	sy
 800ead6:	df00      	svc	0
 800ead8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eada:	bf00      	nop
 800eadc:	e000ed08 	.word	0xe000ed08

0800eae0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b086      	sub	sp, #24
 800eae4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eae6:	4b46      	ldr	r3, [pc, #280]	; (800ec00 <xPortStartScheduler+0x120>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4a46      	ldr	r2, [pc, #280]	; (800ec04 <xPortStartScheduler+0x124>)
 800eaec:	4293      	cmp	r3, r2
 800eaee:	d10a      	bne.n	800eb06 <xPortStartScheduler+0x26>
	__asm volatile
 800eaf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaf4:	f383 8811 	msr	BASEPRI, r3
 800eaf8:	f3bf 8f6f 	isb	sy
 800eafc:	f3bf 8f4f 	dsb	sy
 800eb00:	613b      	str	r3, [r7, #16]
}
 800eb02:	bf00      	nop
 800eb04:	e7fe      	b.n	800eb04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eb06:	4b3e      	ldr	r3, [pc, #248]	; (800ec00 <xPortStartScheduler+0x120>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	4a3f      	ldr	r2, [pc, #252]	; (800ec08 <xPortStartScheduler+0x128>)
 800eb0c:	4293      	cmp	r3, r2
 800eb0e:	d10a      	bne.n	800eb26 <xPortStartScheduler+0x46>
	__asm volatile
 800eb10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb14:	f383 8811 	msr	BASEPRI, r3
 800eb18:	f3bf 8f6f 	isb	sy
 800eb1c:	f3bf 8f4f 	dsb	sy
 800eb20:	60fb      	str	r3, [r7, #12]
}
 800eb22:	bf00      	nop
 800eb24:	e7fe      	b.n	800eb24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eb26:	4b39      	ldr	r3, [pc, #228]	; (800ec0c <xPortStartScheduler+0x12c>)
 800eb28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	781b      	ldrb	r3, [r3, #0]
 800eb2e:	b2db      	uxtb	r3, r3
 800eb30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	22ff      	movs	r2, #255	; 0xff
 800eb36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb40:	78fb      	ldrb	r3, [r7, #3]
 800eb42:	b2db      	uxtb	r3, r3
 800eb44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eb48:	b2da      	uxtb	r2, r3
 800eb4a:	4b31      	ldr	r3, [pc, #196]	; (800ec10 <xPortStartScheduler+0x130>)
 800eb4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eb4e:	4b31      	ldr	r3, [pc, #196]	; (800ec14 <xPortStartScheduler+0x134>)
 800eb50:	2207      	movs	r2, #7
 800eb52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb54:	e009      	b.n	800eb6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800eb56:	4b2f      	ldr	r3, [pc, #188]	; (800ec14 <xPortStartScheduler+0x134>)
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	3b01      	subs	r3, #1
 800eb5c:	4a2d      	ldr	r2, [pc, #180]	; (800ec14 <xPortStartScheduler+0x134>)
 800eb5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb60:	78fb      	ldrb	r3, [r7, #3]
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	005b      	lsls	r3, r3, #1
 800eb66:	b2db      	uxtb	r3, r3
 800eb68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb6a:	78fb      	ldrb	r3, [r7, #3]
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb72:	2b80      	cmp	r3, #128	; 0x80
 800eb74:	d0ef      	beq.n	800eb56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eb76:	4b27      	ldr	r3, [pc, #156]	; (800ec14 <xPortStartScheduler+0x134>)
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f1c3 0307 	rsb	r3, r3, #7
 800eb7e:	2b04      	cmp	r3, #4
 800eb80:	d00a      	beq.n	800eb98 <xPortStartScheduler+0xb8>
	__asm volatile
 800eb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb86:	f383 8811 	msr	BASEPRI, r3
 800eb8a:	f3bf 8f6f 	isb	sy
 800eb8e:	f3bf 8f4f 	dsb	sy
 800eb92:	60bb      	str	r3, [r7, #8]
}
 800eb94:	bf00      	nop
 800eb96:	e7fe      	b.n	800eb96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eb98:	4b1e      	ldr	r3, [pc, #120]	; (800ec14 <xPortStartScheduler+0x134>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	021b      	lsls	r3, r3, #8
 800eb9e:	4a1d      	ldr	r2, [pc, #116]	; (800ec14 <xPortStartScheduler+0x134>)
 800eba0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800eba2:	4b1c      	ldr	r3, [pc, #112]	; (800ec14 <xPortStartScheduler+0x134>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ebaa:	4a1a      	ldr	r2, [pc, #104]	; (800ec14 <xPortStartScheduler+0x134>)
 800ebac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	b2da      	uxtb	r2, r3
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ebb6:	4b18      	ldr	r3, [pc, #96]	; (800ec18 <xPortStartScheduler+0x138>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	4a17      	ldr	r2, [pc, #92]	; (800ec18 <xPortStartScheduler+0x138>)
 800ebbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ebc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ebc2:	4b15      	ldr	r3, [pc, #84]	; (800ec18 <xPortStartScheduler+0x138>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	4a14      	ldr	r2, [pc, #80]	; (800ec18 <xPortStartScheduler+0x138>)
 800ebc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ebcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ebce:	f000 f8dd 	bl	800ed8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ebd2:	4b12      	ldr	r3, [pc, #72]	; (800ec1c <xPortStartScheduler+0x13c>)
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ebd8:	f000 f8fc 	bl	800edd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ebdc:	4b10      	ldr	r3, [pc, #64]	; (800ec20 <xPortStartScheduler+0x140>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	4a0f      	ldr	r2, [pc, #60]	; (800ec20 <xPortStartScheduler+0x140>)
 800ebe2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ebe6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ebe8:	f7ff ff66 	bl	800eab8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ebec:	f7fe ff54 	bl	800da98 <vTaskSwitchContext>
	prvTaskExitError();
 800ebf0:	f7ff ff1e 	bl	800ea30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ebf4:	2300      	movs	r3, #0
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3718      	adds	r7, #24
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}
 800ebfe:	bf00      	nop
 800ec00:	e000ed00 	.word	0xe000ed00
 800ec04:	410fc271 	.word	0x410fc271
 800ec08:	410fc270 	.word	0x410fc270
 800ec0c:	e000e400 	.word	0xe000e400
 800ec10:	200048ac 	.word	0x200048ac
 800ec14:	200048b0 	.word	0x200048b0
 800ec18:	e000ed20 	.word	0xe000ed20
 800ec1c:	200000c8 	.word	0x200000c8
 800ec20:	e000ef34 	.word	0xe000ef34

0800ec24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
	__asm volatile
 800ec2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec2e:	f383 8811 	msr	BASEPRI, r3
 800ec32:	f3bf 8f6f 	isb	sy
 800ec36:	f3bf 8f4f 	dsb	sy
 800ec3a:	607b      	str	r3, [r7, #4]
}
 800ec3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ec3e:	4b0f      	ldr	r3, [pc, #60]	; (800ec7c <vPortEnterCritical+0x58>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	3301      	adds	r3, #1
 800ec44:	4a0d      	ldr	r2, [pc, #52]	; (800ec7c <vPortEnterCritical+0x58>)
 800ec46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ec48:	4b0c      	ldr	r3, [pc, #48]	; (800ec7c <vPortEnterCritical+0x58>)
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	2b01      	cmp	r3, #1
 800ec4e:	d10f      	bne.n	800ec70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ec50:	4b0b      	ldr	r3, [pc, #44]	; (800ec80 <vPortEnterCritical+0x5c>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	b2db      	uxtb	r3, r3
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d00a      	beq.n	800ec70 <vPortEnterCritical+0x4c>
	__asm volatile
 800ec5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec5e:	f383 8811 	msr	BASEPRI, r3
 800ec62:	f3bf 8f6f 	isb	sy
 800ec66:	f3bf 8f4f 	dsb	sy
 800ec6a:	603b      	str	r3, [r7, #0]
}
 800ec6c:	bf00      	nop
 800ec6e:	e7fe      	b.n	800ec6e <vPortEnterCritical+0x4a>
	}
}
 800ec70:	bf00      	nop
 800ec72:	370c      	adds	r7, #12
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr
 800ec7c:	200000c8 	.word	0x200000c8
 800ec80:	e000ed04 	.word	0xe000ed04

0800ec84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ec8a:	4b12      	ldr	r3, [pc, #72]	; (800ecd4 <vPortExitCritical+0x50>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d10a      	bne.n	800eca8 <vPortExitCritical+0x24>
	__asm volatile
 800ec92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec96:	f383 8811 	msr	BASEPRI, r3
 800ec9a:	f3bf 8f6f 	isb	sy
 800ec9e:	f3bf 8f4f 	dsb	sy
 800eca2:	607b      	str	r3, [r7, #4]
}
 800eca4:	bf00      	nop
 800eca6:	e7fe      	b.n	800eca6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800eca8:	4b0a      	ldr	r3, [pc, #40]	; (800ecd4 <vPortExitCritical+0x50>)
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	3b01      	subs	r3, #1
 800ecae:	4a09      	ldr	r2, [pc, #36]	; (800ecd4 <vPortExitCritical+0x50>)
 800ecb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ecb2:	4b08      	ldr	r3, [pc, #32]	; (800ecd4 <vPortExitCritical+0x50>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d105      	bne.n	800ecc6 <vPortExitCritical+0x42>
 800ecba:	2300      	movs	r3, #0
 800ecbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	f383 8811 	msr	BASEPRI, r3
}
 800ecc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ecc6:	bf00      	nop
 800ecc8:	370c      	adds	r7, #12
 800ecca:	46bd      	mov	sp, r7
 800eccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd0:	4770      	bx	lr
 800ecd2:	bf00      	nop
 800ecd4:	200000c8 	.word	0x200000c8
	...

0800ece0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ece0:	f3ef 8009 	mrs	r0, PSP
 800ece4:	f3bf 8f6f 	isb	sy
 800ece8:	4b15      	ldr	r3, [pc, #84]	; (800ed40 <pxCurrentTCBConst>)
 800ecea:	681a      	ldr	r2, [r3, #0]
 800ecec:	f01e 0f10 	tst.w	lr, #16
 800ecf0:	bf08      	it	eq
 800ecf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ecf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecfa:	6010      	str	r0, [r2, #0]
 800ecfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ed00:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ed04:	f380 8811 	msr	BASEPRI, r0
 800ed08:	f3bf 8f4f 	dsb	sy
 800ed0c:	f3bf 8f6f 	isb	sy
 800ed10:	f7fe fec2 	bl	800da98 <vTaskSwitchContext>
 800ed14:	f04f 0000 	mov.w	r0, #0
 800ed18:	f380 8811 	msr	BASEPRI, r0
 800ed1c:	bc09      	pop	{r0, r3}
 800ed1e:	6819      	ldr	r1, [r3, #0]
 800ed20:	6808      	ldr	r0, [r1, #0]
 800ed22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed26:	f01e 0f10 	tst.w	lr, #16
 800ed2a:	bf08      	it	eq
 800ed2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ed30:	f380 8809 	msr	PSP, r0
 800ed34:	f3bf 8f6f 	isb	sy
 800ed38:	4770      	bx	lr
 800ed3a:	bf00      	nop
 800ed3c:	f3af 8000 	nop.w

0800ed40 <pxCurrentTCBConst>:
 800ed40:	20004280 	.word	0x20004280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ed44:	bf00      	nop
 800ed46:	bf00      	nop

0800ed48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
	__asm volatile
 800ed4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed52:	f383 8811 	msr	BASEPRI, r3
 800ed56:	f3bf 8f6f 	isb	sy
 800ed5a:	f3bf 8f4f 	dsb	sy
 800ed5e:	607b      	str	r3, [r7, #4]
}
 800ed60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ed62:	f7fe fddf 	bl	800d924 <xTaskIncrementTick>
 800ed66:	4603      	mov	r3, r0
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d003      	beq.n	800ed74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ed6c:	4b06      	ldr	r3, [pc, #24]	; (800ed88 <xPortSysTickHandler+0x40>)
 800ed6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed72:	601a      	str	r2, [r3, #0]
 800ed74:	2300      	movs	r3, #0
 800ed76:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed78:	683b      	ldr	r3, [r7, #0]
 800ed7a:	f383 8811 	msr	BASEPRI, r3
}
 800ed7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ed80:	bf00      	nop
 800ed82:	3708      	adds	r7, #8
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}
 800ed88:	e000ed04 	.word	0xe000ed04

0800ed8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ed90:	4b0b      	ldr	r3, [pc, #44]	; (800edc0 <vPortSetupTimerInterrupt+0x34>)
 800ed92:	2200      	movs	r2, #0
 800ed94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ed96:	4b0b      	ldr	r3, [pc, #44]	; (800edc4 <vPortSetupTimerInterrupt+0x38>)
 800ed98:	2200      	movs	r2, #0
 800ed9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ed9c:	4b0a      	ldr	r3, [pc, #40]	; (800edc8 <vPortSetupTimerInterrupt+0x3c>)
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	4a0a      	ldr	r2, [pc, #40]	; (800edcc <vPortSetupTimerInterrupt+0x40>)
 800eda2:	fba2 2303 	umull	r2, r3, r2, r3
 800eda6:	099b      	lsrs	r3, r3, #6
 800eda8:	4a09      	ldr	r2, [pc, #36]	; (800edd0 <vPortSetupTimerInterrupt+0x44>)
 800edaa:	3b01      	subs	r3, #1
 800edac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800edae:	4b04      	ldr	r3, [pc, #16]	; (800edc0 <vPortSetupTimerInterrupt+0x34>)
 800edb0:	2207      	movs	r2, #7
 800edb2:	601a      	str	r2, [r3, #0]
}
 800edb4:	bf00      	nop
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop
 800edc0:	e000e010 	.word	0xe000e010
 800edc4:	e000e018 	.word	0xe000e018
 800edc8:	20000008 	.word	0x20000008
 800edcc:	10624dd3 	.word	0x10624dd3
 800edd0:	e000e014 	.word	0xe000e014

0800edd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800edd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ede4 <vPortEnableVFP+0x10>
 800edd8:	6801      	ldr	r1, [r0, #0]
 800edda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800edde:	6001      	str	r1, [r0, #0]
 800ede0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ede2:	bf00      	nop
 800ede4:	e000ed88 	.word	0xe000ed88

0800ede8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ede8:	b480      	push	{r7}
 800edea:	b085      	sub	sp, #20
 800edec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800edee:	f3ef 8305 	mrs	r3, IPSR
 800edf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2b0f      	cmp	r3, #15
 800edf8:	d914      	bls.n	800ee24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800edfa:	4a17      	ldr	r2, [pc, #92]	; (800ee58 <vPortValidateInterruptPriority+0x70>)
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	4413      	add	r3, r2
 800ee00:	781b      	ldrb	r3, [r3, #0]
 800ee02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ee04:	4b15      	ldr	r3, [pc, #84]	; (800ee5c <vPortValidateInterruptPriority+0x74>)
 800ee06:	781b      	ldrb	r3, [r3, #0]
 800ee08:	7afa      	ldrb	r2, [r7, #11]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d20a      	bcs.n	800ee24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ee0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee12:	f383 8811 	msr	BASEPRI, r3
 800ee16:	f3bf 8f6f 	isb	sy
 800ee1a:	f3bf 8f4f 	dsb	sy
 800ee1e:	607b      	str	r3, [r7, #4]
}
 800ee20:	bf00      	nop
 800ee22:	e7fe      	b.n	800ee22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ee24:	4b0e      	ldr	r3, [pc, #56]	; (800ee60 <vPortValidateInterruptPriority+0x78>)
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ee2c:	4b0d      	ldr	r3, [pc, #52]	; (800ee64 <vPortValidateInterruptPriority+0x7c>)
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d90a      	bls.n	800ee4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ee34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee38:	f383 8811 	msr	BASEPRI, r3
 800ee3c:	f3bf 8f6f 	isb	sy
 800ee40:	f3bf 8f4f 	dsb	sy
 800ee44:	603b      	str	r3, [r7, #0]
}
 800ee46:	bf00      	nop
 800ee48:	e7fe      	b.n	800ee48 <vPortValidateInterruptPriority+0x60>
	}
 800ee4a:	bf00      	nop
 800ee4c:	3714      	adds	r7, #20
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee54:	4770      	bx	lr
 800ee56:	bf00      	nop
 800ee58:	e000e3f0 	.word	0xe000e3f0
 800ee5c:	200048ac 	.word	0x200048ac
 800ee60:	e000ed0c 	.word	0xe000ed0c
 800ee64:	200048b0 	.word	0x200048b0

0800ee68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b08a      	sub	sp, #40	; 0x28
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ee70:	2300      	movs	r3, #0
 800ee72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ee74:	f7fe fc9a 	bl	800d7ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ee78:	4b5b      	ldr	r3, [pc, #364]	; (800efe8 <pvPortMalloc+0x180>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d101      	bne.n	800ee84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ee80:	f000 f920 	bl	800f0c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ee84:	4b59      	ldr	r3, [pc, #356]	; (800efec <pvPortMalloc+0x184>)
 800ee86:	681a      	ldr	r2, [r3, #0]
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	4013      	ands	r3, r2
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f040 8093 	bne.w	800efb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d01d      	beq.n	800eed4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ee98:	2208      	movs	r2, #8
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	4413      	add	r3, r2
 800ee9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f003 0307 	and.w	r3, r3, #7
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d014      	beq.n	800eed4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	f023 0307 	bic.w	r3, r3, #7
 800eeb0:	3308      	adds	r3, #8
 800eeb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f003 0307 	and.w	r3, r3, #7
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d00a      	beq.n	800eed4 <pvPortMalloc+0x6c>
	__asm volatile
 800eebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eec2:	f383 8811 	msr	BASEPRI, r3
 800eec6:	f3bf 8f6f 	isb	sy
 800eeca:	f3bf 8f4f 	dsb	sy
 800eece:	617b      	str	r3, [r7, #20]
}
 800eed0:	bf00      	nop
 800eed2:	e7fe      	b.n	800eed2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d06e      	beq.n	800efb8 <pvPortMalloc+0x150>
 800eeda:	4b45      	ldr	r3, [pc, #276]	; (800eff0 <pvPortMalloc+0x188>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	429a      	cmp	r2, r3
 800eee2:	d869      	bhi.n	800efb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eee4:	4b43      	ldr	r3, [pc, #268]	; (800eff4 <pvPortMalloc+0x18c>)
 800eee6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eee8:	4b42      	ldr	r3, [pc, #264]	; (800eff4 <pvPortMalloc+0x18c>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eeee:	e004      	b.n	800eefa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800eef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eefa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	429a      	cmp	r2, r3
 800ef02:	d903      	bls.n	800ef0c <pvPortMalloc+0xa4>
 800ef04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	2b00      	cmp	r3, #0
 800ef0a:	d1f1      	bne.n	800eef0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ef0c:	4b36      	ldr	r3, [pc, #216]	; (800efe8 <pvPortMalloc+0x180>)
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d050      	beq.n	800efb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ef16:	6a3b      	ldr	r3, [r7, #32]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	2208      	movs	r2, #8
 800ef1c:	4413      	add	r3, r2
 800ef1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ef20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef22:	681a      	ldr	r2, [r3, #0]
 800ef24:	6a3b      	ldr	r3, [r7, #32]
 800ef26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ef28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2a:	685a      	ldr	r2, [r3, #4]
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	1ad2      	subs	r2, r2, r3
 800ef30:	2308      	movs	r3, #8
 800ef32:	005b      	lsls	r3, r3, #1
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d91f      	bls.n	800ef78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ef38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef40:	69bb      	ldr	r3, [r7, #24]
 800ef42:	f003 0307 	and.w	r3, r3, #7
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d00a      	beq.n	800ef60 <pvPortMalloc+0xf8>
	__asm volatile
 800ef4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef4e:	f383 8811 	msr	BASEPRI, r3
 800ef52:	f3bf 8f6f 	isb	sy
 800ef56:	f3bf 8f4f 	dsb	sy
 800ef5a:	613b      	str	r3, [r7, #16]
}
 800ef5c:	bf00      	nop
 800ef5e:	e7fe      	b.n	800ef5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ef60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef62:	685a      	ldr	r2, [r3, #4]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	1ad2      	subs	r2, r2, r3
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ef6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6e:	687a      	ldr	r2, [r7, #4]
 800ef70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ef72:	69b8      	ldr	r0, [r7, #24]
 800ef74:	f000 f908 	bl	800f188 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ef78:	4b1d      	ldr	r3, [pc, #116]	; (800eff0 <pvPortMalloc+0x188>)
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	1ad3      	subs	r3, r2, r3
 800ef82:	4a1b      	ldr	r2, [pc, #108]	; (800eff0 <pvPortMalloc+0x188>)
 800ef84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef86:	4b1a      	ldr	r3, [pc, #104]	; (800eff0 <pvPortMalloc+0x188>)
 800ef88:	681a      	ldr	r2, [r3, #0]
 800ef8a:	4b1b      	ldr	r3, [pc, #108]	; (800eff8 <pvPortMalloc+0x190>)
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	d203      	bcs.n	800ef9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ef92:	4b17      	ldr	r3, [pc, #92]	; (800eff0 <pvPortMalloc+0x188>)
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	4a18      	ldr	r2, [pc, #96]	; (800eff8 <pvPortMalloc+0x190>)
 800ef98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ef9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef9c:	685a      	ldr	r2, [r3, #4]
 800ef9e:	4b13      	ldr	r3, [pc, #76]	; (800efec <pvPortMalloc+0x184>)
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	431a      	orrs	r2, r3
 800efa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efa6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800efa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efaa:	2200      	movs	r2, #0
 800efac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800efae:	4b13      	ldr	r3, [pc, #76]	; (800effc <pvPortMalloc+0x194>)
 800efb0:	681b      	ldr	r3, [r3, #0]
 800efb2:	3301      	adds	r3, #1
 800efb4:	4a11      	ldr	r2, [pc, #68]	; (800effc <pvPortMalloc+0x194>)
 800efb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800efb8:	f7fe fc06 	bl	800d7c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	f003 0307 	and.w	r3, r3, #7
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d00a      	beq.n	800efdc <pvPortMalloc+0x174>
	__asm volatile
 800efc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efca:	f383 8811 	msr	BASEPRI, r3
 800efce:	f3bf 8f6f 	isb	sy
 800efd2:	f3bf 8f4f 	dsb	sy
 800efd6:	60fb      	str	r3, [r7, #12]
}
 800efd8:	bf00      	nop
 800efda:	e7fe      	b.n	800efda <pvPortMalloc+0x172>
	return pvReturn;
 800efdc:	69fb      	ldr	r3, [r7, #28]
}
 800efde:	4618      	mov	r0, r3
 800efe0:	3728      	adds	r7, #40	; 0x28
 800efe2:	46bd      	mov	sp, r7
 800efe4:	bd80      	pop	{r7, pc}
 800efe6:	bf00      	nop
 800efe8:	2000bdec 	.word	0x2000bdec
 800efec:	2000be00 	.word	0x2000be00
 800eff0:	2000bdf0 	.word	0x2000bdf0
 800eff4:	2000bde4 	.word	0x2000bde4
 800eff8:	2000bdf4 	.word	0x2000bdf4
 800effc:	2000bdf8 	.word	0x2000bdf8

0800f000 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b086      	sub	sp, #24
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d04d      	beq.n	800f0ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f012:	2308      	movs	r3, #8
 800f014:	425b      	negs	r3, r3
 800f016:	697a      	ldr	r2, [r7, #20]
 800f018:	4413      	add	r3, r2
 800f01a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f020:	693b      	ldr	r3, [r7, #16]
 800f022:	685a      	ldr	r2, [r3, #4]
 800f024:	4b24      	ldr	r3, [pc, #144]	; (800f0b8 <vPortFree+0xb8>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	4013      	ands	r3, r2
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d10a      	bne.n	800f044 <vPortFree+0x44>
	__asm volatile
 800f02e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f032:	f383 8811 	msr	BASEPRI, r3
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	f3bf 8f4f 	dsb	sy
 800f03e:	60fb      	str	r3, [r7, #12]
}
 800f040:	bf00      	nop
 800f042:	e7fe      	b.n	800f042 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d00a      	beq.n	800f062 <vPortFree+0x62>
	__asm volatile
 800f04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f050:	f383 8811 	msr	BASEPRI, r3
 800f054:	f3bf 8f6f 	isb	sy
 800f058:	f3bf 8f4f 	dsb	sy
 800f05c:	60bb      	str	r3, [r7, #8]
}
 800f05e:	bf00      	nop
 800f060:	e7fe      	b.n	800f060 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f062:	693b      	ldr	r3, [r7, #16]
 800f064:	685a      	ldr	r2, [r3, #4]
 800f066:	4b14      	ldr	r3, [pc, #80]	; (800f0b8 <vPortFree+0xb8>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	4013      	ands	r3, r2
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d01e      	beq.n	800f0ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f070:	693b      	ldr	r3, [r7, #16]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d11a      	bne.n	800f0ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f078:	693b      	ldr	r3, [r7, #16]
 800f07a:	685a      	ldr	r2, [r3, #4]
 800f07c:	4b0e      	ldr	r3, [pc, #56]	; (800f0b8 <vPortFree+0xb8>)
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	43db      	mvns	r3, r3
 800f082:	401a      	ands	r2, r3
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f088:	f7fe fb90 	bl	800d7ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	685a      	ldr	r2, [r3, #4]
 800f090:	4b0a      	ldr	r3, [pc, #40]	; (800f0bc <vPortFree+0xbc>)
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4413      	add	r3, r2
 800f096:	4a09      	ldr	r2, [pc, #36]	; (800f0bc <vPortFree+0xbc>)
 800f098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f09a:	6938      	ldr	r0, [r7, #16]
 800f09c:	f000 f874 	bl	800f188 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f0a0:	4b07      	ldr	r3, [pc, #28]	; (800f0c0 <vPortFree+0xc0>)
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	3301      	adds	r3, #1
 800f0a6:	4a06      	ldr	r2, [pc, #24]	; (800f0c0 <vPortFree+0xc0>)
 800f0a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f0aa:	f7fe fb8d 	bl	800d7c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f0ae:	bf00      	nop
 800f0b0:	3718      	adds	r7, #24
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	2000be00 	.word	0x2000be00
 800f0bc:	2000bdf0 	.word	0x2000bdf0
 800f0c0:	2000bdfc 	.word	0x2000bdfc

0800f0c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f0c4:	b480      	push	{r7}
 800f0c6:	b085      	sub	sp, #20
 800f0c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f0ca:	f247 5330 	movw	r3, #30000	; 0x7530
 800f0ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f0d0:	4b27      	ldr	r3, [pc, #156]	; (800f170 <prvHeapInit+0xac>)
 800f0d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	f003 0307 	and.w	r3, r3, #7
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d00c      	beq.n	800f0f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	3307      	adds	r3, #7
 800f0e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f023 0307 	bic.w	r3, r3, #7
 800f0ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f0ec:	68ba      	ldr	r2, [r7, #8]
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	1ad3      	subs	r3, r2, r3
 800f0f2:	4a1f      	ldr	r2, [pc, #124]	; (800f170 <prvHeapInit+0xac>)
 800f0f4:	4413      	add	r3, r2
 800f0f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f0fc:	4a1d      	ldr	r2, [pc, #116]	; (800f174 <prvHeapInit+0xb0>)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f102:	4b1c      	ldr	r3, [pc, #112]	; (800f174 <prvHeapInit+0xb0>)
 800f104:	2200      	movs	r2, #0
 800f106:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	68ba      	ldr	r2, [r7, #8]
 800f10c:	4413      	add	r3, r2
 800f10e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f110:	2208      	movs	r2, #8
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	1a9b      	subs	r3, r3, r2
 800f116:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f023 0307 	bic.w	r3, r3, #7
 800f11e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	4a15      	ldr	r2, [pc, #84]	; (800f178 <prvHeapInit+0xb4>)
 800f124:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f126:	4b14      	ldr	r3, [pc, #80]	; (800f178 <prvHeapInit+0xb4>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	2200      	movs	r2, #0
 800f12c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f12e:	4b12      	ldr	r3, [pc, #72]	; (800f178 <prvHeapInit+0xb4>)
 800f130:	681b      	ldr	r3, [r3, #0]
 800f132:	2200      	movs	r2, #0
 800f134:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	68fa      	ldr	r2, [r7, #12]
 800f13e:	1ad2      	subs	r2, r2, r3
 800f140:	683b      	ldr	r3, [r7, #0]
 800f142:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f144:	4b0c      	ldr	r3, [pc, #48]	; (800f178 <prvHeapInit+0xb4>)
 800f146:	681a      	ldr	r2, [r3, #0]
 800f148:	683b      	ldr	r3, [r7, #0]
 800f14a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	4a0a      	ldr	r2, [pc, #40]	; (800f17c <prvHeapInit+0xb8>)
 800f152:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	4a09      	ldr	r2, [pc, #36]	; (800f180 <prvHeapInit+0xbc>)
 800f15a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f15c:	4b09      	ldr	r3, [pc, #36]	; (800f184 <prvHeapInit+0xc0>)
 800f15e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f162:	601a      	str	r2, [r3, #0]
}
 800f164:	bf00      	nop
 800f166:	3714      	adds	r7, #20
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr
 800f170:	200048b4 	.word	0x200048b4
 800f174:	2000bde4 	.word	0x2000bde4
 800f178:	2000bdec 	.word	0x2000bdec
 800f17c:	2000bdf4 	.word	0x2000bdf4
 800f180:	2000bdf0 	.word	0x2000bdf0
 800f184:	2000be00 	.word	0x2000be00

0800f188 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f188:	b480      	push	{r7}
 800f18a:	b085      	sub	sp, #20
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f190:	4b28      	ldr	r3, [pc, #160]	; (800f234 <prvInsertBlockIntoFreeList+0xac>)
 800f192:	60fb      	str	r3, [r7, #12]
 800f194:	e002      	b.n	800f19c <prvInsertBlockIntoFreeList+0x14>
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	60fb      	str	r3, [r7, #12]
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	687a      	ldr	r2, [r7, #4]
 800f1a2:	429a      	cmp	r2, r3
 800f1a4:	d8f7      	bhi.n	800f196 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	685b      	ldr	r3, [r3, #4]
 800f1ae:	68ba      	ldr	r2, [r7, #8]
 800f1b0:	4413      	add	r3, r2
 800f1b2:	687a      	ldr	r2, [r7, #4]
 800f1b4:	429a      	cmp	r2, r3
 800f1b6:	d108      	bne.n	800f1ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	685a      	ldr	r2, [r3, #4]
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	685b      	ldr	r3, [r3, #4]
 800f1c0:	441a      	add	r2, r3
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	685b      	ldr	r3, [r3, #4]
 800f1d2:	68ba      	ldr	r2, [r7, #8]
 800f1d4:	441a      	add	r2, r3
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d118      	bne.n	800f210 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681a      	ldr	r2, [r3, #0]
 800f1e2:	4b15      	ldr	r3, [pc, #84]	; (800f238 <prvInsertBlockIntoFreeList+0xb0>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d00d      	beq.n	800f206 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	685a      	ldr	r2, [r3, #4]
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	685b      	ldr	r3, [r3, #4]
 800f1f4:	441a      	add	r2, r3
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	681b      	ldr	r3, [r3, #0]
 800f1fe:	681a      	ldr	r2, [r3, #0]
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	601a      	str	r2, [r3, #0]
 800f204:	e008      	b.n	800f218 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f206:	4b0c      	ldr	r3, [pc, #48]	; (800f238 <prvInsertBlockIntoFreeList+0xb0>)
 800f208:	681a      	ldr	r2, [r3, #0]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	601a      	str	r2, [r3, #0]
 800f20e:	e003      	b.n	800f218 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	681a      	ldr	r2, [r3, #0]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f218:	68fa      	ldr	r2, [r7, #12]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d002      	beq.n	800f226 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	687a      	ldr	r2, [r7, #4]
 800f224:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f226:	bf00      	nop
 800f228:	3714      	adds	r7, #20
 800f22a:	46bd      	mov	sp, r7
 800f22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f230:	4770      	bx	lr
 800f232:	bf00      	nop
 800f234:	2000bde4 	.word	0x2000bde4
 800f238:	2000bdec 	.word	0x2000bdec

0800f23c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f240:	2200      	movs	r2, #0
 800f242:	4912      	ldr	r1, [pc, #72]	; (800f28c <MX_USB_DEVICE_Init+0x50>)
 800f244:	4812      	ldr	r0, [pc, #72]	; (800f290 <MX_USB_DEVICE_Init+0x54>)
 800f246:	f7fb fa4d 	bl	800a6e4 <USBD_Init>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d001      	beq.n	800f254 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f250:	f7f2 ff3a 	bl	80020c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800f254:	490f      	ldr	r1, [pc, #60]	; (800f294 <MX_USB_DEVICE_Init+0x58>)
 800f256:	480e      	ldr	r0, [pc, #56]	; (800f290 <MX_USB_DEVICE_Init+0x54>)
 800f258:	f7fb fa74 	bl	800a744 <USBD_RegisterClass>
 800f25c:	4603      	mov	r3, r0
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d001      	beq.n	800f266 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f262:	f7f2 ff31 	bl	80020c8 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800f266:	490c      	ldr	r1, [pc, #48]	; (800f298 <MX_USB_DEVICE_Init+0x5c>)
 800f268:	4809      	ldr	r0, [pc, #36]	; (800f290 <MX_USB_DEVICE_Init+0x54>)
 800f26a:	f7fb f9ed 	bl	800a648 <USBD_AUDIO_RegisterInterface>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d001      	beq.n	800f278 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f274:	f7f2 ff28 	bl	80020c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f278:	4805      	ldr	r0, [pc, #20]	; (800f290 <MX_USB_DEVICE_Init+0x54>)
 800f27a:	f7fb fa99 	bl	800a7b0 <USBD_Start>
 800f27e:	4603      	mov	r3, r0
 800f280:	2b00      	cmp	r3, #0
 800f282:	d001      	beq.n	800f288 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f284:	f7f2 ff20 	bl	80020c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f288:	bf00      	nop
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	200000e8 	.word	0x200000e8
 800f290:	2000be04 	.word	0x2000be04
 800f294:	20000014 	.word	0x20000014
 800f298:	200000cc 	.word	0x200000cc

0800f29c <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800f29c:	b480      	push	{r7}
 800f29e:	b085      	sub	sp, #20
 800f2a0:	af00      	add	r7, sp, #0
 800f2a2:	60f8      	str	r0, [r7, #12]
 800f2a4:	60b9      	str	r1, [r7, #8]
 800f2a6:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800f2a8:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	3714      	adds	r7, #20
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr

0800f2b6 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800f2b6:	b480      	push	{r7}
 800f2b8:	b083      	sub	sp, #12
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800f2be:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	370c      	adds	r7, #12
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ca:	4770      	bx	lr

0800f2cc <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800f2cc:	b480      	push	{r7}
 800f2ce:	b085      	sub	sp, #20
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	60f8      	str	r0, [r7, #12]
 800f2d4:	60b9      	str	r1, [r7, #8]
 800f2d6:	4613      	mov	r3, r2
 800f2d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800f2da:	79fb      	ldrb	r3, [r7, #7]
 800f2dc:	2b01      	cmp	r3, #1
 800f2de:	d001      	beq.n	800f2e4 <AUDIO_AudioCmd_FS+0x18>
 800f2e0:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800f2e2:	e000      	b.n	800f2e6 <AUDIO_AudioCmd_FS+0x1a>
    break;
 800f2e4:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800f2e6:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	3714      	adds	r7, #20
 800f2ec:	46bd      	mov	sp, r7
 800f2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f2:	4770      	bx	lr

0800f2f4 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b083      	sub	sp, #12
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800f2fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f300:	4618      	mov	r0, r3
 800f302:	370c      	adds	r7, #12
 800f304:	46bd      	mov	sp, r7
 800f306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30a:	4770      	bx	lr

0800f30c <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
 800f312:	4603      	mov	r3, r0
 800f314:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800f316:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f318:	4618      	mov	r0, r3
 800f31a:	370c      	adds	r7, #12
 800f31c:	46bd      	mov	sp, r7
 800f31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f322:	4770      	bx	lr

0800f324 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800f324:	b480      	push	{r7}
 800f326:	b085      	sub	sp, #20
 800f328:	af00      	add	r7, sp, #0
 800f32a:	60f8      	str	r0, [r7, #12]
 800f32c:	60b9      	str	r1, [r7, #8]
 800f32e:	4613      	mov	r3, r2
 800f330:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800f332:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f334:	4618      	mov	r0, r3
 800f336:	3714      	adds	r7, #20
 800f338:	46bd      	mov	sp, r7
 800f33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f33e:	4770      	bx	lr

0800f340 <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800f340:	b480      	push	{r7}
 800f342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800f344:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f346:	4618      	mov	r0, r3
 800f348:	46bd      	mov	sp, r7
 800f34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34e:	4770      	bx	lr

0800f350 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f350:	b480      	push	{r7}
 800f352:	b083      	sub	sp, #12
 800f354:	af00      	add	r7, sp, #0
 800f356:	4603      	mov	r3, r0
 800f358:	6039      	str	r1, [r7, #0]
 800f35a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f35c:	683b      	ldr	r3, [r7, #0]
 800f35e:	2212      	movs	r2, #18
 800f360:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f362:	4b03      	ldr	r3, [pc, #12]	; (800f370 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f364:	4618      	mov	r0, r3
 800f366:	370c      	adds	r7, #12
 800f368:	46bd      	mov	sp, r7
 800f36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36e:	4770      	bx	lr
 800f370:	20000108 	.word	0x20000108

0800f374 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f374:	b480      	push	{r7}
 800f376:	b083      	sub	sp, #12
 800f378:	af00      	add	r7, sp, #0
 800f37a:	4603      	mov	r3, r0
 800f37c:	6039      	str	r1, [r7, #0]
 800f37e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	2204      	movs	r2, #4
 800f384:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f386:	4b03      	ldr	r3, [pc, #12]	; (800f394 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f388:	4618      	mov	r0, r3
 800f38a:	370c      	adds	r7, #12
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr
 800f394:	20000128 	.word	0x20000128

0800f398 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f398:	b580      	push	{r7, lr}
 800f39a:	b082      	sub	sp, #8
 800f39c:	af00      	add	r7, sp, #0
 800f39e:	4603      	mov	r3, r0
 800f3a0:	6039      	str	r1, [r7, #0]
 800f3a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f3a4:	79fb      	ldrb	r3, [r7, #7]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d105      	bne.n	800f3b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f3aa:	683a      	ldr	r2, [r7, #0]
 800f3ac:	4907      	ldr	r1, [pc, #28]	; (800f3cc <USBD_FS_ProductStrDescriptor+0x34>)
 800f3ae:	4808      	ldr	r0, [pc, #32]	; (800f3d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800f3b0:	f7fc fba0 	bl	800baf4 <USBD_GetString>
 800f3b4:	e004      	b.n	800f3c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f3b6:	683a      	ldr	r2, [r7, #0]
 800f3b8:	4904      	ldr	r1, [pc, #16]	; (800f3cc <USBD_FS_ProductStrDescriptor+0x34>)
 800f3ba:	4805      	ldr	r0, [pc, #20]	; (800f3d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800f3bc:	f7fc fb9a 	bl	800baf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f3c0:	4b02      	ldr	r3, [pc, #8]	; (800f3cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	3708      	adds	r7, #8
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	bd80      	pop	{r7, pc}
 800f3ca:	bf00      	nop
 800f3cc:	2000c0e0 	.word	0x2000c0e0
 800f3d0:	080148fc 	.word	0x080148fc

0800f3d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	4603      	mov	r3, r0
 800f3dc:	6039      	str	r1, [r7, #0]
 800f3de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f3e0:	683a      	ldr	r2, [r7, #0]
 800f3e2:	4904      	ldr	r1, [pc, #16]	; (800f3f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f3e4:	4804      	ldr	r0, [pc, #16]	; (800f3f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f3e6:	f7fc fb85 	bl	800baf4 <USBD_GetString>
  return USBD_StrDesc;
 800f3ea:	4b02      	ldr	r3, [pc, #8]	; (800f3f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3708      	adds	r7, #8
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}
 800f3f4:	2000c0e0 	.word	0x2000c0e0
 800f3f8:	08014910 	.word	0x08014910

0800f3fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b082      	sub	sp, #8
 800f400:	af00      	add	r7, sp, #0
 800f402:	4603      	mov	r3, r0
 800f404:	6039      	str	r1, [r7, #0]
 800f406:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	221a      	movs	r2, #26
 800f40c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f40e:	f000 f855 	bl	800f4bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f412:	4b02      	ldr	r3, [pc, #8]	; (800f41c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f414:	4618      	mov	r0, r3
 800f416:	3708      	adds	r7, #8
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	2000012c 	.word	0x2000012c

0800f420 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	4603      	mov	r3, r0
 800f428:	6039      	str	r1, [r7, #0]
 800f42a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f42c:	79fb      	ldrb	r3, [r7, #7]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d105      	bne.n	800f43e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f432:	683a      	ldr	r2, [r7, #0]
 800f434:	4907      	ldr	r1, [pc, #28]	; (800f454 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f436:	4808      	ldr	r0, [pc, #32]	; (800f458 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f438:	f7fc fb5c 	bl	800baf4 <USBD_GetString>
 800f43c:	e004      	b.n	800f448 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f43e:	683a      	ldr	r2, [r7, #0]
 800f440:	4904      	ldr	r1, [pc, #16]	; (800f454 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f442:	4805      	ldr	r0, [pc, #20]	; (800f458 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f444:	f7fc fb56 	bl	800baf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f448:	4b02      	ldr	r3, [pc, #8]	; (800f454 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f44a:	4618      	mov	r0, r3
 800f44c:	3708      	adds	r7, #8
 800f44e:	46bd      	mov	sp, r7
 800f450:	bd80      	pop	{r7, pc}
 800f452:	bf00      	nop
 800f454:	2000c0e0 	.word	0x2000c0e0
 800f458:	08014924 	.word	0x08014924

0800f45c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b082      	sub	sp, #8
 800f460:	af00      	add	r7, sp, #0
 800f462:	4603      	mov	r3, r0
 800f464:	6039      	str	r1, [r7, #0]
 800f466:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f468:	79fb      	ldrb	r3, [r7, #7]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d105      	bne.n	800f47a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f46e:	683a      	ldr	r2, [r7, #0]
 800f470:	4907      	ldr	r1, [pc, #28]	; (800f490 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f472:	4808      	ldr	r0, [pc, #32]	; (800f494 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f474:	f7fc fb3e 	bl	800baf4 <USBD_GetString>
 800f478:	e004      	b.n	800f484 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f47a:	683a      	ldr	r2, [r7, #0]
 800f47c:	4904      	ldr	r1, [pc, #16]	; (800f490 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f47e:	4805      	ldr	r0, [pc, #20]	; (800f494 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f480:	f7fc fb38 	bl	800baf4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f484:	4b02      	ldr	r3, [pc, #8]	; (800f490 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f486:	4618      	mov	r0, r3
 800f488:	3708      	adds	r7, #8
 800f48a:	46bd      	mov	sp, r7
 800f48c:	bd80      	pop	{r7, pc}
 800f48e:	bf00      	nop
 800f490:	2000c0e0 	.word	0x2000c0e0
 800f494:	08014934 	.word	0x08014934

0800f498 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f498:	b480      	push	{r7}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	4603      	mov	r3, r0
 800f4a0:	6039      	str	r1, [r7, #0]
 800f4a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	220c      	movs	r2, #12
 800f4a8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800f4aa:	4b03      	ldr	r3, [pc, #12]	; (800f4b8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	370c      	adds	r7, #12
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr
 800f4b8:	2000011c 	.word	0x2000011c

0800f4bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b084      	sub	sp, #16
 800f4c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f4c2:	4b0f      	ldr	r3, [pc, #60]	; (800f500 <Get_SerialNum+0x44>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f4c8:	4b0e      	ldr	r3, [pc, #56]	; (800f504 <Get_SerialNum+0x48>)
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f4ce:	4b0e      	ldr	r3, [pc, #56]	; (800f508 <Get_SerialNum+0x4c>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f4d4:	68fa      	ldr	r2, [r7, #12]
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	4413      	add	r3, r2
 800f4da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d009      	beq.n	800f4f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f4e2:	2208      	movs	r2, #8
 800f4e4:	4909      	ldr	r1, [pc, #36]	; (800f50c <Get_SerialNum+0x50>)
 800f4e6:	68f8      	ldr	r0, [r7, #12]
 800f4e8:	f000 f814 	bl	800f514 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f4ec:	2204      	movs	r2, #4
 800f4ee:	4908      	ldr	r1, [pc, #32]	; (800f510 <Get_SerialNum+0x54>)
 800f4f0:	68b8      	ldr	r0, [r7, #8]
 800f4f2:	f000 f80f 	bl	800f514 <IntToUnicode>
  }
}
 800f4f6:	bf00      	nop
 800f4f8:	3710      	adds	r7, #16
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	bd80      	pop	{r7, pc}
 800f4fe:	bf00      	nop
 800f500:	1fff7590 	.word	0x1fff7590
 800f504:	1fff7594 	.word	0x1fff7594
 800f508:	1fff7598 	.word	0x1fff7598
 800f50c:	2000012e 	.word	0x2000012e
 800f510:	2000013e 	.word	0x2000013e

0800f514 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f514:	b480      	push	{r7}
 800f516:	b087      	sub	sp, #28
 800f518:	af00      	add	r7, sp, #0
 800f51a:	60f8      	str	r0, [r7, #12]
 800f51c:	60b9      	str	r1, [r7, #8]
 800f51e:	4613      	mov	r3, r2
 800f520:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f522:	2300      	movs	r3, #0
 800f524:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f526:	2300      	movs	r3, #0
 800f528:	75fb      	strb	r3, [r7, #23]
 800f52a:	e027      	b.n	800f57c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	0f1b      	lsrs	r3, r3, #28
 800f530:	2b09      	cmp	r3, #9
 800f532:	d80b      	bhi.n	800f54c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	0f1b      	lsrs	r3, r3, #28
 800f538:	b2da      	uxtb	r2, r3
 800f53a:	7dfb      	ldrb	r3, [r7, #23]
 800f53c:	005b      	lsls	r3, r3, #1
 800f53e:	4619      	mov	r1, r3
 800f540:	68bb      	ldr	r3, [r7, #8]
 800f542:	440b      	add	r3, r1
 800f544:	3230      	adds	r2, #48	; 0x30
 800f546:	b2d2      	uxtb	r2, r2
 800f548:	701a      	strb	r2, [r3, #0]
 800f54a:	e00a      	b.n	800f562 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	0f1b      	lsrs	r3, r3, #28
 800f550:	b2da      	uxtb	r2, r3
 800f552:	7dfb      	ldrb	r3, [r7, #23]
 800f554:	005b      	lsls	r3, r3, #1
 800f556:	4619      	mov	r1, r3
 800f558:	68bb      	ldr	r3, [r7, #8]
 800f55a:	440b      	add	r3, r1
 800f55c:	3237      	adds	r2, #55	; 0x37
 800f55e:	b2d2      	uxtb	r2, r2
 800f560:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	011b      	lsls	r3, r3, #4
 800f566:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f568:	7dfb      	ldrb	r3, [r7, #23]
 800f56a:	005b      	lsls	r3, r3, #1
 800f56c:	3301      	adds	r3, #1
 800f56e:	68ba      	ldr	r2, [r7, #8]
 800f570:	4413      	add	r3, r2
 800f572:	2200      	movs	r2, #0
 800f574:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f576:	7dfb      	ldrb	r3, [r7, #23]
 800f578:	3301      	adds	r3, #1
 800f57a:	75fb      	strb	r3, [r7, #23]
 800f57c:	7dfa      	ldrb	r2, [r7, #23]
 800f57e:	79fb      	ldrb	r3, [r7, #7]
 800f580:	429a      	cmp	r2, r3
 800f582:	d3d3      	bcc.n	800f52c <IntToUnicode+0x18>
  }
}
 800f584:	bf00      	nop
 800f586:	bf00      	nop
 800f588:	371c      	adds	r7, #28
 800f58a:	46bd      	mov	sp, r7
 800f58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f590:	4770      	bx	lr
	...

0800f594 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b08a      	sub	sp, #40	; 0x28
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f59c:	f107 0314 	add.w	r3, r7, #20
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	601a      	str	r2, [r3, #0]
 800f5a4:	605a      	str	r2, [r3, #4]
 800f5a6:	609a      	str	r2, [r3, #8]
 800f5a8:	60da      	str	r2, [r3, #12]
 800f5aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f5b4:	d15c      	bne.n	800f670 <HAL_PCD_MspInit+0xdc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f5b6:	4b30      	ldr	r3, [pc, #192]	; (800f678 <HAL_PCD_MspInit+0xe4>)
 800f5b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5ba:	4a2f      	ldr	r2, [pc, #188]	; (800f678 <HAL_PCD_MspInit+0xe4>)
 800f5bc:	f043 0301 	orr.w	r3, r3, #1
 800f5c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f5c2:	4b2d      	ldr	r3, [pc, #180]	; (800f678 <HAL_PCD_MspInit+0xe4>)
 800f5c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f5c6:	f003 0301 	and.w	r3, r3, #1
 800f5ca:	613b      	str	r3, [r7, #16]
 800f5cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800f5ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f5d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800f5dc:	f107 0314 	add.w	r3, r7, #20
 800f5e0:	4619      	mov	r1, r3
 800f5e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f5e6:	f7f5 f8cd 	bl	8004784 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800f5ea:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800f5ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f5f0:	2302      	movs	r3, #2
 800f5f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f5f8:	2303      	movs	r3, #3
 800f5fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f5fc:	230a      	movs	r3, #10
 800f5fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f600:	f107 0314 	add.w	r3, r7, #20
 800f604:	4619      	mov	r1, r3
 800f606:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800f60a:	f7f5 f8bb 	bl	8004784 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f60e:	4b1a      	ldr	r3, [pc, #104]	; (800f678 <HAL_PCD_MspInit+0xe4>)
 800f610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f612:	4a19      	ldr	r2, [pc, #100]	; (800f678 <HAL_PCD_MspInit+0xe4>)
 800f614:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800f61a:	4b17      	ldr	r3, [pc, #92]	; (800f678 <HAL_PCD_MspInit+0xe4>)
 800f61c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f61e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f622:	60fb      	str	r3, [r7, #12]
 800f624:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f626:	4b14      	ldr	r3, [pc, #80]	; (800f678 <HAL_PCD_MspInit+0xe4>)
 800f628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f62a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d114      	bne.n	800f65c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f632:	4b11      	ldr	r3, [pc, #68]	; (800f678 <HAL_PCD_MspInit+0xe4>)
 800f634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f636:	4a10      	ldr	r2, [pc, #64]	; (800f678 <HAL_PCD_MspInit+0xe4>)
 800f638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f63c:	6593      	str	r3, [r2, #88]	; 0x58
 800f63e:	4b0e      	ldr	r3, [pc, #56]	; (800f678 <HAL_PCD_MspInit+0xe4>)
 800f640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f646:	60bb      	str	r3, [r7, #8]
 800f648:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800f64a:	f7f6 fdb5 	bl	80061b8 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800f64e:	4b0a      	ldr	r3, [pc, #40]	; (800f678 <HAL_PCD_MspInit+0xe4>)
 800f650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f652:	4a09      	ldr	r2, [pc, #36]	; (800f678 <HAL_PCD_MspInit+0xe4>)
 800f654:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f658:	6593      	str	r3, [r2, #88]	; 0x58
 800f65a:	e001      	b.n	800f660 <HAL_PCD_MspInit+0xcc>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800f65c:	f7f6 fdac 	bl	80061b8 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f660:	2200      	movs	r2, #0
 800f662:	2105      	movs	r1, #5
 800f664:	2043      	movs	r0, #67	; 0x43
 800f666:	f7f4 fd90 	bl	800418a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f66a:	2043      	movs	r0, #67	; 0x43
 800f66c:	f7f4 fda9 	bl	80041c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f670:	bf00      	nop
 800f672:	3728      	adds	r7, #40	; 0x28
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}
 800f678:	40021000 	.word	0x40021000

0800f67c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f690:	4619      	mov	r1, r3
 800f692:	4610      	mov	r0, r2
 800f694:	f7fb f8d9 	bl	800a84a <USBD_LL_SetupStage>
}
 800f698:	bf00      	nop
 800f69a:	3708      	adds	r7, #8
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}

0800f6a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b082      	sub	sp, #8
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	6078      	str	r0, [r7, #4]
 800f6a8:	460b      	mov	r3, r1
 800f6aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f6b2:	78fa      	ldrb	r2, [r7, #3]
 800f6b4:	6879      	ldr	r1, [r7, #4]
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	00db      	lsls	r3, r3, #3
 800f6ba:	4413      	add	r3, r2
 800f6bc:	009b      	lsls	r3, r3, #2
 800f6be:	440b      	add	r3, r1
 800f6c0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f6c4:	681a      	ldr	r2, [r3, #0]
 800f6c6:	78fb      	ldrb	r3, [r7, #3]
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	f7fb f913 	bl	800a8f4 <USBD_LL_DataOutStage>
}
 800f6ce:	bf00      	nop
 800f6d0:	3708      	adds	r7, #8
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}

0800f6d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6d6:	b580      	push	{r7, lr}
 800f6d8:	b082      	sub	sp, #8
 800f6da:	af00      	add	r7, sp, #0
 800f6dc:	6078      	str	r0, [r7, #4]
 800f6de:	460b      	mov	r3, r1
 800f6e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800f6e8:	78fa      	ldrb	r2, [r7, #3]
 800f6ea:	6879      	ldr	r1, [r7, #4]
 800f6ec:	4613      	mov	r3, r2
 800f6ee:	00db      	lsls	r3, r3, #3
 800f6f0:	4413      	add	r3, r2
 800f6f2:	009b      	lsls	r3, r3, #2
 800f6f4:	440b      	add	r3, r1
 800f6f6:	3348      	adds	r3, #72	; 0x48
 800f6f8:	681a      	ldr	r2, [r3, #0]
 800f6fa:	78fb      	ldrb	r3, [r7, #3]
 800f6fc:	4619      	mov	r1, r3
 800f6fe:	f7fb f9ac 	bl	800aa5a <USBD_LL_DataInStage>
}
 800f702:	bf00      	nop
 800f704:	3708      	adds	r7, #8
 800f706:	46bd      	mov	sp, r7
 800f708:	bd80      	pop	{r7, pc}

0800f70a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f70a:	b580      	push	{r7, lr}
 800f70c:	b082      	sub	sp, #8
 800f70e:	af00      	add	r7, sp, #0
 800f710:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f718:	4618      	mov	r0, r3
 800f71a:	f7fb fae6 	bl	800acea <USBD_LL_SOF>
}
 800f71e:	bf00      	nop
 800f720:	3708      	adds	r7, #8
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}

0800f726 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f726:	b580      	push	{r7, lr}
 800f728:	b084      	sub	sp, #16
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f72e:	2301      	movs	r3, #1
 800f730:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	691b      	ldr	r3, [r3, #16]
 800f736:	2b02      	cmp	r3, #2
 800f738:	d001      	beq.n	800f73e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f73a:	f7f2 fcc5 	bl	80020c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f744:	7bfa      	ldrb	r2, [r7, #15]
 800f746:	4611      	mov	r1, r2
 800f748:	4618      	mov	r0, r3
 800f74a:	f7fb fa8a 	bl	800ac62 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f754:	4618      	mov	r0, r3
 800f756:	f7fb fa32 	bl	800abbe <USBD_LL_Reset>
}
 800f75a:	bf00      	nop
 800f75c:	3710      	adds	r7, #16
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd80      	pop	{r7, pc}
	...

0800f764 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	687a      	ldr	r2, [r7, #4]
 800f778:	6812      	ldr	r2, [r2, #0]
 800f77a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f77e:	f043 0301 	orr.w	r3, r3, #1
 800f782:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f78a:	4618      	mov	r0, r3
 800f78c:	f7fb fa79 	bl	800ac82 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6a1b      	ldr	r3, [r3, #32]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d005      	beq.n	800f7a4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f798:	4b04      	ldr	r3, [pc, #16]	; (800f7ac <HAL_PCD_SuspendCallback+0x48>)
 800f79a:	691b      	ldr	r3, [r3, #16]
 800f79c:	4a03      	ldr	r2, [pc, #12]	; (800f7ac <HAL_PCD_SuspendCallback+0x48>)
 800f79e:	f043 0306 	orr.w	r3, r3, #6
 800f7a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f7a4:	bf00      	nop
 800f7a6:	3708      	adds	r7, #8
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}
 800f7ac:	e000ed00 	.word	0xe000ed00

0800f7b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7b0:	b580      	push	{r7, lr}
 800f7b2:	b082      	sub	sp, #8
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	687a      	ldr	r2, [r7, #4]
 800f7c4:	6812      	ldr	r2, [r2, #0]
 800f7c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f7ca:	f023 0301 	bic.w	r3, r3, #1
 800f7ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	6a1b      	ldr	r3, [r3, #32]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d007      	beq.n	800f7e8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f7d8:	4b08      	ldr	r3, [pc, #32]	; (800f7fc <HAL_PCD_ResumeCallback+0x4c>)
 800f7da:	691b      	ldr	r3, [r3, #16]
 800f7dc:	4a07      	ldr	r2, [pc, #28]	; (800f7fc <HAL_PCD_ResumeCallback+0x4c>)
 800f7de:	f023 0306 	bic.w	r3, r3, #6
 800f7e2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f7e4:	f000 fae2 	bl	800fdac <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fb fa63 	bl	800acba <USBD_LL_Resume>
}
 800f7f4:	bf00      	nop
 800f7f6:	3708      	adds	r7, #8
 800f7f8:	46bd      	mov	sp, r7
 800f7fa:	bd80      	pop	{r7, pc}
 800f7fc:	e000ed00 	.word	0xe000ed00

0800f800 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b082      	sub	sp, #8
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	460b      	mov	r3, r1
 800f80a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f812:	78fa      	ldrb	r2, [r7, #3]
 800f814:	4611      	mov	r1, r2
 800f816:	4618      	mov	r0, r3
 800f818:	f7fb fab9 	bl	800ad8e <USBD_LL_IsoOUTIncomplete>
}
 800f81c:	bf00      	nop
 800f81e:	3708      	adds	r7, #8
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}

0800f824 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b082      	sub	sp, #8
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	460b      	mov	r3, r1
 800f82e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f836:	78fa      	ldrb	r2, [r7, #3]
 800f838:	4611      	mov	r1, r2
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7fb fa75 	bl	800ad2a <USBD_LL_IsoINIncomplete>
}
 800f840:	bf00      	nop
 800f842:	3708      	adds	r7, #8
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}

0800f848 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f848:	b580      	push	{r7, lr}
 800f84a:	b082      	sub	sp, #8
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f856:	4618      	mov	r0, r3
 800f858:	f7fb facb 	bl	800adf2 <USBD_LL_DevConnected>
}
 800f85c:	bf00      	nop
 800f85e:	3708      	adds	r7, #8
 800f860:	46bd      	mov	sp, r7
 800f862:	bd80      	pop	{r7, pc}

0800f864 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f872:	4618      	mov	r0, r3
 800f874:	f7fb fac8 	bl	800ae08 <USBD_LL_DevDisconnected>
}
 800f878:	bf00      	nop
 800f87a:	3708      	adds	r7, #8
 800f87c:	46bd      	mov	sp, r7
 800f87e:	bd80      	pop	{r7, pc}

0800f880 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d13c      	bne.n	800f90a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f890:	4a20      	ldr	r2, [pc, #128]	; (800f914 <USBD_LL_Init+0x94>)
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	4a1e      	ldr	r2, [pc, #120]	; (800f914 <USBD_LL_Init+0x94>)
 800f89c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f8a0:	4b1c      	ldr	r3, [pc, #112]	; (800f914 <USBD_LL_Init+0x94>)
 800f8a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f8a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800f8a8:	4b1a      	ldr	r3, [pc, #104]	; (800f914 <USBD_LL_Init+0x94>)
 800f8aa:	2206      	movs	r2, #6
 800f8ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f8ae:	4b19      	ldr	r3, [pc, #100]	; (800f914 <USBD_LL_Init+0x94>)
 800f8b0:	2202      	movs	r2, #2
 800f8b2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f8b4:	4b17      	ldr	r3, [pc, #92]	; (800f914 <USBD_LL_Init+0x94>)
 800f8b6:	2202      	movs	r2, #2
 800f8b8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f8ba:	4b16      	ldr	r3, [pc, #88]	; (800f914 <USBD_LL_Init+0x94>)
 800f8bc:	2200      	movs	r2, #0
 800f8be:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f8c0:	4b14      	ldr	r3, [pc, #80]	; (800f914 <USBD_LL_Init+0x94>)
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f8c6:	4b13      	ldr	r3, [pc, #76]	; (800f914 <USBD_LL_Init+0x94>)
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f8cc:	4b11      	ldr	r3, [pc, #68]	; (800f914 <USBD_LL_Init+0x94>)
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f8d2:	4b10      	ldr	r3, [pc, #64]	; (800f914 <USBD_LL_Init+0x94>)
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f8d8:	4b0e      	ldr	r3, [pc, #56]	; (800f914 <USBD_LL_Init+0x94>)
 800f8da:	2200      	movs	r2, #0
 800f8dc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f8de:	480d      	ldr	r0, [pc, #52]	; (800f914 <USBD_LL_Init+0x94>)
 800f8e0:	f7f5 fa67 	bl	8004db2 <HAL_PCD_Init>
 800f8e4:	4603      	mov	r3, r0
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d001      	beq.n	800f8ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f8ea:	f7f2 fbed 	bl	80020c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f8ee:	2180      	movs	r1, #128	; 0x80
 800f8f0:	4808      	ldr	r0, [pc, #32]	; (800f914 <USBD_LL_Init+0x94>)
 800f8f2:	f7f6 fbb8 	bl	8006066 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f8f6:	2240      	movs	r2, #64	; 0x40
 800f8f8:	2100      	movs	r1, #0
 800f8fa:	4806      	ldr	r0, [pc, #24]	; (800f914 <USBD_LL_Init+0x94>)
 800f8fc:	f7f6 fb6c 	bl	8005fd8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f900:	2280      	movs	r2, #128	; 0x80
 800f902:	2101      	movs	r1, #1
 800f904:	4803      	ldr	r0, [pc, #12]	; (800f914 <USBD_LL_Init+0x94>)
 800f906:	f7f6 fb67 	bl	8005fd8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f90a:	2300      	movs	r3, #0
}
 800f90c:	4618      	mov	r0, r3
 800f90e:	3708      	adds	r7, #8
 800f910:	46bd      	mov	sp, r7
 800f912:	bd80      	pop	{r7, pc}
 800f914:	2000c2e0 	.word	0x2000c2e0

0800f918 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f918:	b580      	push	{r7, lr}
 800f91a:	b084      	sub	sp, #16
 800f91c:	af00      	add	r7, sp, #0
 800f91e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f920:	2300      	movs	r3, #0
 800f922:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f924:	2300      	movs	r3, #0
 800f926:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f92e:	4618      	mov	r0, r3
 800f930:	f7f5 fb63 	bl	8004ffa <HAL_PCD_Start>
 800f934:	4603      	mov	r3, r0
 800f936:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f938:	7bbb      	ldrb	r3, [r7, #14]
 800f93a:	2b03      	cmp	r3, #3
 800f93c:	d816      	bhi.n	800f96c <USBD_LL_Start+0x54>
 800f93e:	a201      	add	r2, pc, #4	; (adr r2, 800f944 <USBD_LL_Start+0x2c>)
 800f940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f944:	0800f955 	.word	0x0800f955
 800f948:	0800f95b 	.word	0x0800f95b
 800f94c:	0800f961 	.word	0x0800f961
 800f950:	0800f967 	.word	0x0800f967
    case HAL_OK :
      usb_status = USBD_OK;
 800f954:	2300      	movs	r3, #0
 800f956:	73fb      	strb	r3, [r7, #15]
    break;
 800f958:	e00b      	b.n	800f972 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f95a:	2303      	movs	r3, #3
 800f95c:	73fb      	strb	r3, [r7, #15]
    break;
 800f95e:	e008      	b.n	800f972 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f960:	2301      	movs	r3, #1
 800f962:	73fb      	strb	r3, [r7, #15]
    break;
 800f964:	e005      	b.n	800f972 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f966:	2303      	movs	r3, #3
 800f968:	73fb      	strb	r3, [r7, #15]
    break;
 800f96a:	e002      	b.n	800f972 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800f96c:	2303      	movs	r3, #3
 800f96e:	73fb      	strb	r3, [r7, #15]
    break;
 800f970:	bf00      	nop
  }
  return usb_status;
 800f972:	7bfb      	ldrb	r3, [r7, #15]
}
 800f974:	4618      	mov	r0, r3
 800f976:	3710      	adds	r7, #16
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
 800f984:	4608      	mov	r0, r1
 800f986:	4611      	mov	r1, r2
 800f988:	461a      	mov	r2, r3
 800f98a:	4603      	mov	r3, r0
 800f98c:	70fb      	strb	r3, [r7, #3]
 800f98e:	460b      	mov	r3, r1
 800f990:	70bb      	strb	r3, [r7, #2]
 800f992:	4613      	mov	r3, r2
 800f994:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f996:	2300      	movs	r3, #0
 800f998:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f99a:	2300      	movs	r3, #0
 800f99c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f9a4:	78bb      	ldrb	r3, [r7, #2]
 800f9a6:	883a      	ldrh	r2, [r7, #0]
 800f9a8:	78f9      	ldrb	r1, [r7, #3]
 800f9aa:	f7f6 f80d 	bl	80059c8 <HAL_PCD_EP_Open>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800f9b2:	7bbb      	ldrb	r3, [r7, #14]
 800f9b4:	2b03      	cmp	r3, #3
 800f9b6:	d817      	bhi.n	800f9e8 <USBD_LL_OpenEP+0x6c>
 800f9b8:	a201      	add	r2, pc, #4	; (adr r2, 800f9c0 <USBD_LL_OpenEP+0x44>)
 800f9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9be:	bf00      	nop
 800f9c0:	0800f9d1 	.word	0x0800f9d1
 800f9c4:	0800f9d7 	.word	0x0800f9d7
 800f9c8:	0800f9dd 	.word	0x0800f9dd
 800f9cc:	0800f9e3 	.word	0x0800f9e3
    case HAL_OK :
      usb_status = USBD_OK;
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800f9d4:	e00b      	b.n	800f9ee <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f9d6:	2303      	movs	r3, #3
 800f9d8:	73fb      	strb	r3, [r7, #15]
    break;
 800f9da:	e008      	b.n	800f9ee <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f9dc:	2301      	movs	r3, #1
 800f9de:	73fb      	strb	r3, [r7, #15]
    break;
 800f9e0:	e005      	b.n	800f9ee <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f9e2:	2303      	movs	r3, #3
 800f9e4:	73fb      	strb	r3, [r7, #15]
    break;
 800f9e6:	e002      	b.n	800f9ee <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800f9e8:	2303      	movs	r3, #3
 800f9ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f9ec:	bf00      	nop
  }
  return usb_status;
 800f9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3710      	adds	r7, #16
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}

0800f9f8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9f8:	b580      	push	{r7, lr}
 800f9fa:	b084      	sub	sp, #16
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	460b      	mov	r3, r1
 800fa02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa04:	2300      	movs	r3, #0
 800fa06:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa12:	78fa      	ldrb	r2, [r7, #3]
 800fa14:	4611      	mov	r1, r2
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7f6 f83e 	bl	8005a98 <HAL_PCD_EP_Close>
 800fa1c:	4603      	mov	r3, r0
 800fa1e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fa20:	7bbb      	ldrb	r3, [r7, #14]
 800fa22:	2b03      	cmp	r3, #3
 800fa24:	d816      	bhi.n	800fa54 <USBD_LL_CloseEP+0x5c>
 800fa26:	a201      	add	r2, pc, #4	; (adr r2, 800fa2c <USBD_LL_CloseEP+0x34>)
 800fa28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa2c:	0800fa3d 	.word	0x0800fa3d
 800fa30:	0800fa43 	.word	0x0800fa43
 800fa34:	0800fa49 	.word	0x0800fa49
 800fa38:	0800fa4f 	.word	0x0800fa4f
    case HAL_OK :
      usb_status = USBD_OK;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	73fb      	strb	r3, [r7, #15]
    break;
 800fa40:	e00b      	b.n	800fa5a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fa42:	2303      	movs	r3, #3
 800fa44:	73fb      	strb	r3, [r7, #15]
    break;
 800fa46:	e008      	b.n	800fa5a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fa48:	2301      	movs	r3, #1
 800fa4a:	73fb      	strb	r3, [r7, #15]
    break;
 800fa4c:	e005      	b.n	800fa5a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fa4e:	2303      	movs	r3, #3
 800fa50:	73fb      	strb	r3, [r7, #15]
    break;
 800fa52:	e002      	b.n	800fa5a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fa54:	2303      	movs	r3, #3
 800fa56:	73fb      	strb	r3, [r7, #15]
    break;
 800fa58:	bf00      	nop
  }
  return usb_status;
 800fa5a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3710      	adds	r7, #16
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa64:	b580      	push	{r7, lr}
 800fa66:	b084      	sub	sp, #16
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	460b      	mov	r3, r1
 800fa6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa70:	2300      	movs	r3, #0
 800fa72:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa74:	2300      	movs	r3, #0
 800fa76:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa7e:	78fa      	ldrb	r2, [r7, #3]
 800fa80:	4611      	mov	r1, r2
 800fa82:	4618      	mov	r0, r3
 800fa84:	f7f6 f8b5 	bl	8005bf2 <HAL_PCD_EP_SetStall>
 800fa88:	4603      	mov	r3, r0
 800fa8a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fa8c:	7bbb      	ldrb	r3, [r7, #14]
 800fa8e:	2b03      	cmp	r3, #3
 800fa90:	d816      	bhi.n	800fac0 <USBD_LL_StallEP+0x5c>
 800fa92:	a201      	add	r2, pc, #4	; (adr r2, 800fa98 <USBD_LL_StallEP+0x34>)
 800fa94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa98:	0800faa9 	.word	0x0800faa9
 800fa9c:	0800faaf 	.word	0x0800faaf
 800faa0:	0800fab5 	.word	0x0800fab5
 800faa4:	0800fabb 	.word	0x0800fabb
    case HAL_OK :
      usb_status = USBD_OK;
 800faa8:	2300      	movs	r3, #0
 800faaa:	73fb      	strb	r3, [r7, #15]
    break;
 800faac:	e00b      	b.n	800fac6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800faae:	2303      	movs	r3, #3
 800fab0:	73fb      	strb	r3, [r7, #15]
    break;
 800fab2:	e008      	b.n	800fac6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fab4:	2301      	movs	r3, #1
 800fab6:	73fb      	strb	r3, [r7, #15]
    break;
 800fab8:	e005      	b.n	800fac6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800faba:	2303      	movs	r3, #3
 800fabc:	73fb      	strb	r3, [r7, #15]
    break;
 800fabe:	e002      	b.n	800fac6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fac0:	2303      	movs	r3, #3
 800fac2:	73fb      	strb	r3, [r7, #15]
    break;
 800fac4:	bf00      	nop
  }
  return usb_status;
 800fac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fac8:	4618      	mov	r0, r3
 800faca:	3710      	adds	r7, #16
 800facc:	46bd      	mov	sp, r7
 800face:	bd80      	pop	{r7, pc}

0800fad0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fad0:	b580      	push	{r7, lr}
 800fad2:	b084      	sub	sp, #16
 800fad4:	af00      	add	r7, sp, #0
 800fad6:	6078      	str	r0, [r7, #4]
 800fad8:	460b      	mov	r3, r1
 800fada:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fadc:	2300      	movs	r3, #0
 800fade:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fae0:	2300      	movs	r3, #0
 800fae2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800faea:	78fa      	ldrb	r2, [r7, #3]
 800faec:	4611      	mov	r1, r2
 800faee:	4618      	mov	r0, r3
 800faf0:	f7f6 f8e1 	bl	8005cb6 <HAL_PCD_EP_ClrStall>
 800faf4:	4603      	mov	r3, r0
 800faf6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800faf8:	7bbb      	ldrb	r3, [r7, #14]
 800fafa:	2b03      	cmp	r3, #3
 800fafc:	d816      	bhi.n	800fb2c <USBD_LL_ClearStallEP+0x5c>
 800fafe:	a201      	add	r2, pc, #4	; (adr r2, 800fb04 <USBD_LL_ClearStallEP+0x34>)
 800fb00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb04:	0800fb15 	.word	0x0800fb15
 800fb08:	0800fb1b 	.word	0x0800fb1b
 800fb0c:	0800fb21 	.word	0x0800fb21
 800fb10:	0800fb27 	.word	0x0800fb27
    case HAL_OK :
      usb_status = USBD_OK;
 800fb14:	2300      	movs	r3, #0
 800fb16:	73fb      	strb	r3, [r7, #15]
    break;
 800fb18:	e00b      	b.n	800fb32 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fb1a:	2303      	movs	r3, #3
 800fb1c:	73fb      	strb	r3, [r7, #15]
    break;
 800fb1e:	e008      	b.n	800fb32 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fb20:	2301      	movs	r3, #1
 800fb22:	73fb      	strb	r3, [r7, #15]
    break;
 800fb24:	e005      	b.n	800fb32 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fb26:	2303      	movs	r3, #3
 800fb28:	73fb      	strb	r3, [r7, #15]
    break;
 800fb2a:	e002      	b.n	800fb32 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800fb2c:	2303      	movs	r3, #3
 800fb2e:	73fb      	strb	r3, [r7, #15]
    break;
 800fb30:	bf00      	nop
  }
  return usb_status;
 800fb32:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3710      	adds	r7, #16
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb3c:	b480      	push	{r7}
 800fb3e:	b085      	sub	sp, #20
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	6078      	str	r0, [r7, #4]
 800fb44:	460b      	mov	r3, r1
 800fb46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fb50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	da0b      	bge.n	800fb70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fb58:	78fb      	ldrb	r3, [r7, #3]
 800fb5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb5e:	68f9      	ldr	r1, [r7, #12]
 800fb60:	4613      	mov	r3, r2
 800fb62:	00db      	lsls	r3, r3, #3
 800fb64:	4413      	add	r3, r2
 800fb66:	009b      	lsls	r3, r3, #2
 800fb68:	440b      	add	r3, r1
 800fb6a:	333e      	adds	r3, #62	; 0x3e
 800fb6c:	781b      	ldrb	r3, [r3, #0]
 800fb6e:	e00b      	b.n	800fb88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fb70:	78fb      	ldrb	r3, [r7, #3]
 800fb72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fb76:	68f9      	ldr	r1, [r7, #12]
 800fb78:	4613      	mov	r3, r2
 800fb7a:	00db      	lsls	r3, r3, #3
 800fb7c:	4413      	add	r3, r2
 800fb7e:	009b      	lsls	r3, r3, #2
 800fb80:	440b      	add	r3, r1
 800fb82:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800fb86:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3714      	adds	r7, #20
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb92:	4770      	bx	lr

0800fb94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b084      	sub	sp, #16
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	6078      	str	r0, [r7, #4]
 800fb9c:	460b      	mov	r3, r1
 800fb9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fba0:	2300      	movs	r3, #0
 800fba2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fba4:	2300      	movs	r3, #0
 800fba6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fbae:	78fa      	ldrb	r2, [r7, #3]
 800fbb0:	4611      	mov	r1, r2
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7f5 fee3 	bl	800597e <HAL_PCD_SetAddress>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800fbbc:	7bbb      	ldrb	r3, [r7, #14]
 800fbbe:	2b03      	cmp	r3, #3
 800fbc0:	d816      	bhi.n	800fbf0 <USBD_LL_SetUSBAddress+0x5c>
 800fbc2:	a201      	add	r2, pc, #4	; (adr r2, 800fbc8 <USBD_LL_SetUSBAddress+0x34>)
 800fbc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbc8:	0800fbd9 	.word	0x0800fbd9
 800fbcc:	0800fbdf 	.word	0x0800fbdf
 800fbd0:	0800fbe5 	.word	0x0800fbe5
 800fbd4:	0800fbeb 	.word	0x0800fbeb
    case HAL_OK :
      usb_status = USBD_OK;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	73fb      	strb	r3, [r7, #15]
    break;
 800fbdc:	e00b      	b.n	800fbf6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fbde:	2303      	movs	r3, #3
 800fbe0:	73fb      	strb	r3, [r7, #15]
    break;
 800fbe2:	e008      	b.n	800fbf6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	73fb      	strb	r3, [r7, #15]
    break;
 800fbe8:	e005      	b.n	800fbf6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fbea:	2303      	movs	r3, #3
 800fbec:	73fb      	strb	r3, [r7, #15]
    break;
 800fbee:	e002      	b.n	800fbf6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800fbf0:	2303      	movs	r3, #3
 800fbf2:	73fb      	strb	r3, [r7, #15]
    break;
 800fbf4:	bf00      	nop
  }
  return usb_status;
 800fbf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3710      	adds	r7, #16
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc00:	b580      	push	{r7, lr}
 800fc02:	b086      	sub	sp, #24
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	60f8      	str	r0, [r7, #12]
 800fc08:	607a      	str	r2, [r7, #4]
 800fc0a:	603b      	str	r3, [r7, #0]
 800fc0c:	460b      	mov	r3, r1
 800fc0e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc10:	2300      	movs	r3, #0
 800fc12:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc14:	2300      	movs	r3, #0
 800fc16:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fc1e:	7af9      	ldrb	r1, [r7, #11]
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	687a      	ldr	r2, [r7, #4]
 800fc24:	f7f5 ffb4 	bl	8005b90 <HAL_PCD_EP_Transmit>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800fc2c:	7dbb      	ldrb	r3, [r7, #22]
 800fc2e:	2b03      	cmp	r3, #3
 800fc30:	d816      	bhi.n	800fc60 <USBD_LL_Transmit+0x60>
 800fc32:	a201      	add	r2, pc, #4	; (adr r2, 800fc38 <USBD_LL_Transmit+0x38>)
 800fc34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc38:	0800fc49 	.word	0x0800fc49
 800fc3c:	0800fc4f 	.word	0x0800fc4f
 800fc40:	0800fc55 	.word	0x0800fc55
 800fc44:	0800fc5b 	.word	0x0800fc5b
    case HAL_OK :
      usb_status = USBD_OK;
 800fc48:	2300      	movs	r3, #0
 800fc4a:	75fb      	strb	r3, [r7, #23]
    break;
 800fc4c:	e00b      	b.n	800fc66 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fc4e:	2303      	movs	r3, #3
 800fc50:	75fb      	strb	r3, [r7, #23]
    break;
 800fc52:	e008      	b.n	800fc66 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fc54:	2301      	movs	r3, #1
 800fc56:	75fb      	strb	r3, [r7, #23]
    break;
 800fc58:	e005      	b.n	800fc66 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fc5a:	2303      	movs	r3, #3
 800fc5c:	75fb      	strb	r3, [r7, #23]
    break;
 800fc5e:	e002      	b.n	800fc66 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800fc60:	2303      	movs	r3, #3
 800fc62:	75fb      	strb	r3, [r7, #23]
    break;
 800fc64:	bf00      	nop
  }
  return usb_status;
 800fc66:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3718      	adds	r7, #24
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	bd80      	pop	{r7, pc}

0800fc70 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b086      	sub	sp, #24
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	60f8      	str	r0, [r7, #12]
 800fc78:	607a      	str	r2, [r7, #4]
 800fc7a:	603b      	str	r3, [r7, #0]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fc80:	2300      	movs	r3, #0
 800fc82:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fc84:	2300      	movs	r3, #0
 800fc86:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fc8e:	7af9      	ldrb	r1, [r7, #11]
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	687a      	ldr	r2, [r7, #4]
 800fc94:	f7f5 ff4a 	bl	8005b2c <HAL_PCD_EP_Receive>
 800fc98:	4603      	mov	r3, r0
 800fc9a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800fc9c:	7dbb      	ldrb	r3, [r7, #22]
 800fc9e:	2b03      	cmp	r3, #3
 800fca0:	d816      	bhi.n	800fcd0 <USBD_LL_PrepareReceive+0x60>
 800fca2:	a201      	add	r2, pc, #4	; (adr r2, 800fca8 <USBD_LL_PrepareReceive+0x38>)
 800fca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fca8:	0800fcb9 	.word	0x0800fcb9
 800fcac:	0800fcbf 	.word	0x0800fcbf
 800fcb0:	0800fcc5 	.word	0x0800fcc5
 800fcb4:	0800fccb 	.word	0x0800fccb
    case HAL_OK :
      usb_status = USBD_OK;
 800fcb8:	2300      	movs	r3, #0
 800fcba:	75fb      	strb	r3, [r7, #23]
    break;
 800fcbc:	e00b      	b.n	800fcd6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fcbe:	2303      	movs	r3, #3
 800fcc0:	75fb      	strb	r3, [r7, #23]
    break;
 800fcc2:	e008      	b.n	800fcd6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fcc4:	2301      	movs	r3, #1
 800fcc6:	75fb      	strb	r3, [r7, #23]
    break;
 800fcc8:	e005      	b.n	800fcd6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fcca:	2303      	movs	r3, #3
 800fccc:	75fb      	strb	r3, [r7, #23]
    break;
 800fcce:	e002      	b.n	800fcd6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800fcd0:	2303      	movs	r3, #3
 800fcd2:	75fb      	strb	r3, [r7, #23]
    break;
 800fcd4:	bf00      	nop
  }
  return usb_status;
 800fcd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3718      	adds	r7, #24
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	bd80      	pop	{r7, pc}

0800fce0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800fce0:	b580      	push	{r7, lr}
 800fce2:	b082      	sub	sp, #8
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
 800fce8:	460b      	mov	r3, r1
 800fcea:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800fcec:	78fb      	ldrb	r3, [r7, #3]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d002      	beq.n	800fcf8 <HAL_PCDEx_LPM_Callback+0x18>
 800fcf2:	2b01      	cmp	r3, #1
 800fcf4:	d01f      	beq.n	800fd36 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800fcf6:	e03b      	b.n	800fd70 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6a1b      	ldr	r3, [r3, #32]
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	d007      	beq.n	800fd10 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800fd00:	f000 f854 	bl	800fdac <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fd04:	4b1c      	ldr	r3, [pc, #112]	; (800fd78 <HAL_PCDEx_LPM_Callback+0x98>)
 800fd06:	691b      	ldr	r3, [r3, #16]
 800fd08:	4a1b      	ldr	r2, [pc, #108]	; (800fd78 <HAL_PCDEx_LPM_Callback+0x98>)
 800fd0a:	f023 0306 	bic.w	r3, r3, #6
 800fd0e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	687a      	ldr	r2, [r7, #4]
 800fd1c:	6812      	ldr	r2, [r2, #0]
 800fd1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fd22:	f023 0301 	bic.w	r3, r3, #1
 800fd26:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fd2e:	4618      	mov	r0, r3
 800fd30:	f7fa ffc3 	bl	800acba <USBD_LL_Resume>
    break;
 800fd34:	e01c      	b.n	800fd70 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	687a      	ldr	r2, [r7, #4]
 800fd42:	6812      	ldr	r2, [r2, #0]
 800fd44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fd48:	f043 0301 	orr.w	r3, r3, #1
 800fd4c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800fd54:	4618      	mov	r0, r3
 800fd56:	f7fa ff94 	bl	800ac82 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	6a1b      	ldr	r3, [r3, #32]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d005      	beq.n	800fd6e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fd62:	4b05      	ldr	r3, [pc, #20]	; (800fd78 <HAL_PCDEx_LPM_Callback+0x98>)
 800fd64:	691b      	ldr	r3, [r3, #16]
 800fd66:	4a04      	ldr	r2, [pc, #16]	; (800fd78 <HAL_PCDEx_LPM_Callback+0x98>)
 800fd68:	f043 0306 	orr.w	r3, r3, #6
 800fd6c:	6113      	str	r3, [r2, #16]
    break;
 800fd6e:	bf00      	nop
}
 800fd70:	bf00      	nop
 800fd72:	3708      	adds	r7, #8
 800fd74:	46bd      	mov	sp, r7
 800fd76:	bd80      	pop	{r7, pc}
 800fd78:	e000ed00 	.word	0xe000ed00

0800fd7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fd7c:	b480      	push	{r7}
 800fd7e:	b083      	sub	sp, #12
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	6078      	str	r0, [r7, #4]
	Number of sub-packets in the audio transfer buffer. You can modify this value but always make sure
    that it is an even number and higher than 3
	AUDIO_OUT_PACKET_NUM = 80
  */
  /* USER CODE END 4 */
  return mem;
 800fd84:	4b03      	ldr	r3, [pc, #12]	; (800fd94 <USBD_static_malloc+0x18>)
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	370c      	adds	r7, #12
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd90:	4770      	bx	lr
 800fd92:	bf00      	nop
 800fd94:	2000c7ec 	.word	0x2000c7ec

0800fd98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b083      	sub	sp, #12
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	6078      	str	r0, [r7, #4]

}
 800fda0:	bf00      	nop
 800fda2:	370c      	adds	r7, #12
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr

0800fdac <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800fdb0:	f7f1 fc50 	bl	8001654 <SystemClock_Config>
}
 800fdb4:	bf00      	nop
 800fdb6:	bd80      	pop	{r7, pc}

0800fdb8 <std>:
 800fdb8:	2300      	movs	r3, #0
 800fdba:	b510      	push	{r4, lr}
 800fdbc:	4604      	mov	r4, r0
 800fdbe:	e9c0 3300 	strd	r3, r3, [r0]
 800fdc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fdc6:	6083      	str	r3, [r0, #8]
 800fdc8:	8181      	strh	r1, [r0, #12]
 800fdca:	6643      	str	r3, [r0, #100]	; 0x64
 800fdcc:	81c2      	strh	r2, [r0, #14]
 800fdce:	6183      	str	r3, [r0, #24]
 800fdd0:	4619      	mov	r1, r3
 800fdd2:	2208      	movs	r2, #8
 800fdd4:	305c      	adds	r0, #92	; 0x5c
 800fdd6:	f000 f902 	bl	800ffde <memset>
 800fdda:	4b05      	ldr	r3, [pc, #20]	; (800fdf0 <std+0x38>)
 800fddc:	6223      	str	r3, [r4, #32]
 800fdde:	4b05      	ldr	r3, [pc, #20]	; (800fdf4 <std+0x3c>)
 800fde0:	6263      	str	r3, [r4, #36]	; 0x24
 800fde2:	4b05      	ldr	r3, [pc, #20]	; (800fdf8 <std+0x40>)
 800fde4:	62a3      	str	r3, [r4, #40]	; 0x28
 800fde6:	4b05      	ldr	r3, [pc, #20]	; (800fdfc <std+0x44>)
 800fde8:	61e4      	str	r4, [r4, #28]
 800fdea:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fdec:	bd10      	pop	{r4, pc}
 800fdee:	bf00      	nop
 800fdf0:	0800ff59 	.word	0x0800ff59
 800fdf4:	0800ff7b 	.word	0x0800ff7b
 800fdf8:	0800ffb3 	.word	0x0800ffb3
 800fdfc:	0800ffd7 	.word	0x0800ffd7

0800fe00 <stdio_exit_handler>:
 800fe00:	4a02      	ldr	r2, [pc, #8]	; (800fe0c <stdio_exit_handler+0xc>)
 800fe02:	4903      	ldr	r1, [pc, #12]	; (800fe10 <stdio_exit_handler+0x10>)
 800fe04:	4803      	ldr	r0, [pc, #12]	; (800fe14 <stdio_exit_handler+0x14>)
 800fe06:	f000 b869 	b.w	800fedc <_fwalk_sglue>
 800fe0a:	bf00      	nop
 800fe0c:	20000148 	.word	0x20000148
 800fe10:	08011ba5 	.word	0x08011ba5
 800fe14:	20000158 	.word	0x20000158

0800fe18 <cleanup_stdio>:
 800fe18:	6841      	ldr	r1, [r0, #4]
 800fe1a:	4b0c      	ldr	r3, [pc, #48]	; (800fe4c <cleanup_stdio+0x34>)
 800fe1c:	4299      	cmp	r1, r3
 800fe1e:	b510      	push	{r4, lr}
 800fe20:	4604      	mov	r4, r0
 800fe22:	d001      	beq.n	800fe28 <cleanup_stdio+0x10>
 800fe24:	f001 febe 	bl	8011ba4 <_fclose_r>
 800fe28:	68a1      	ldr	r1, [r4, #8]
 800fe2a:	4b09      	ldr	r3, [pc, #36]	; (800fe50 <cleanup_stdio+0x38>)
 800fe2c:	4299      	cmp	r1, r3
 800fe2e:	d002      	beq.n	800fe36 <cleanup_stdio+0x1e>
 800fe30:	4620      	mov	r0, r4
 800fe32:	f001 feb7 	bl	8011ba4 <_fclose_r>
 800fe36:	68e1      	ldr	r1, [r4, #12]
 800fe38:	4b06      	ldr	r3, [pc, #24]	; (800fe54 <cleanup_stdio+0x3c>)
 800fe3a:	4299      	cmp	r1, r3
 800fe3c:	d004      	beq.n	800fe48 <cleanup_stdio+0x30>
 800fe3e:	4620      	mov	r0, r4
 800fe40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe44:	f001 beae 	b.w	8011ba4 <_fclose_r>
 800fe48:	bd10      	pop	{r4, pc}
 800fe4a:	bf00      	nop
 800fe4c:	2000e63c 	.word	0x2000e63c
 800fe50:	2000e6a4 	.word	0x2000e6a4
 800fe54:	2000e70c 	.word	0x2000e70c

0800fe58 <global_stdio_init.part.0>:
 800fe58:	b510      	push	{r4, lr}
 800fe5a:	4b0b      	ldr	r3, [pc, #44]	; (800fe88 <global_stdio_init.part.0+0x30>)
 800fe5c:	4c0b      	ldr	r4, [pc, #44]	; (800fe8c <global_stdio_init.part.0+0x34>)
 800fe5e:	4a0c      	ldr	r2, [pc, #48]	; (800fe90 <global_stdio_init.part.0+0x38>)
 800fe60:	601a      	str	r2, [r3, #0]
 800fe62:	4620      	mov	r0, r4
 800fe64:	2200      	movs	r2, #0
 800fe66:	2104      	movs	r1, #4
 800fe68:	f7ff ffa6 	bl	800fdb8 <std>
 800fe6c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800fe70:	2201      	movs	r2, #1
 800fe72:	2109      	movs	r1, #9
 800fe74:	f7ff ffa0 	bl	800fdb8 <std>
 800fe78:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800fe7c:	2202      	movs	r2, #2
 800fe7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fe82:	2112      	movs	r1, #18
 800fe84:	f7ff bf98 	b.w	800fdb8 <std>
 800fe88:	2000e774 	.word	0x2000e774
 800fe8c:	2000e63c 	.word	0x2000e63c
 800fe90:	0800fe01 	.word	0x0800fe01

0800fe94 <__sfp_lock_acquire>:
 800fe94:	4801      	ldr	r0, [pc, #4]	; (800fe9c <__sfp_lock_acquire+0x8>)
 800fe96:	f000 b91d 	b.w	80100d4 <__retarget_lock_acquire_recursive>
 800fe9a:	bf00      	nop
 800fe9c:	2000e77e 	.word	0x2000e77e

0800fea0 <__sfp_lock_release>:
 800fea0:	4801      	ldr	r0, [pc, #4]	; (800fea8 <__sfp_lock_release+0x8>)
 800fea2:	f000 b918 	b.w	80100d6 <__retarget_lock_release_recursive>
 800fea6:	bf00      	nop
 800fea8:	2000e77e 	.word	0x2000e77e

0800feac <__sinit>:
 800feac:	b510      	push	{r4, lr}
 800feae:	4604      	mov	r4, r0
 800feb0:	f7ff fff0 	bl	800fe94 <__sfp_lock_acquire>
 800feb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800feb6:	b11b      	cbz	r3, 800fec0 <__sinit+0x14>
 800feb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800febc:	f7ff bff0 	b.w	800fea0 <__sfp_lock_release>
 800fec0:	4b04      	ldr	r3, [pc, #16]	; (800fed4 <__sinit+0x28>)
 800fec2:	6363      	str	r3, [r4, #52]	; 0x34
 800fec4:	4b04      	ldr	r3, [pc, #16]	; (800fed8 <__sinit+0x2c>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d1f5      	bne.n	800feb8 <__sinit+0xc>
 800fecc:	f7ff ffc4 	bl	800fe58 <global_stdio_init.part.0>
 800fed0:	e7f2      	b.n	800feb8 <__sinit+0xc>
 800fed2:	bf00      	nop
 800fed4:	0800fe19 	.word	0x0800fe19
 800fed8:	2000e774 	.word	0x2000e774

0800fedc <_fwalk_sglue>:
 800fedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fee0:	4607      	mov	r7, r0
 800fee2:	4688      	mov	r8, r1
 800fee4:	4614      	mov	r4, r2
 800fee6:	2600      	movs	r6, #0
 800fee8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800feec:	f1b9 0901 	subs.w	r9, r9, #1
 800fef0:	d505      	bpl.n	800fefe <_fwalk_sglue+0x22>
 800fef2:	6824      	ldr	r4, [r4, #0]
 800fef4:	2c00      	cmp	r4, #0
 800fef6:	d1f7      	bne.n	800fee8 <_fwalk_sglue+0xc>
 800fef8:	4630      	mov	r0, r6
 800fefa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fefe:	89ab      	ldrh	r3, [r5, #12]
 800ff00:	2b01      	cmp	r3, #1
 800ff02:	d907      	bls.n	800ff14 <_fwalk_sglue+0x38>
 800ff04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ff08:	3301      	adds	r3, #1
 800ff0a:	d003      	beq.n	800ff14 <_fwalk_sglue+0x38>
 800ff0c:	4629      	mov	r1, r5
 800ff0e:	4638      	mov	r0, r7
 800ff10:	47c0      	blx	r8
 800ff12:	4306      	orrs	r6, r0
 800ff14:	3568      	adds	r5, #104	; 0x68
 800ff16:	e7e9      	b.n	800feec <_fwalk_sglue+0x10>

0800ff18 <sprintf>:
 800ff18:	b40e      	push	{r1, r2, r3}
 800ff1a:	b500      	push	{lr}
 800ff1c:	b09c      	sub	sp, #112	; 0x70
 800ff1e:	ab1d      	add	r3, sp, #116	; 0x74
 800ff20:	9002      	str	r0, [sp, #8]
 800ff22:	9006      	str	r0, [sp, #24]
 800ff24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ff28:	4809      	ldr	r0, [pc, #36]	; (800ff50 <sprintf+0x38>)
 800ff2a:	9107      	str	r1, [sp, #28]
 800ff2c:	9104      	str	r1, [sp, #16]
 800ff2e:	4909      	ldr	r1, [pc, #36]	; (800ff54 <sprintf+0x3c>)
 800ff30:	f853 2b04 	ldr.w	r2, [r3], #4
 800ff34:	9105      	str	r1, [sp, #20]
 800ff36:	6800      	ldr	r0, [r0, #0]
 800ff38:	9301      	str	r3, [sp, #4]
 800ff3a:	a902      	add	r1, sp, #8
 800ff3c:	f000 fc44 	bl	80107c8 <_svfprintf_r>
 800ff40:	9b02      	ldr	r3, [sp, #8]
 800ff42:	2200      	movs	r2, #0
 800ff44:	701a      	strb	r2, [r3, #0]
 800ff46:	b01c      	add	sp, #112	; 0x70
 800ff48:	f85d eb04 	ldr.w	lr, [sp], #4
 800ff4c:	b003      	add	sp, #12
 800ff4e:	4770      	bx	lr
 800ff50:	20000278 	.word	0x20000278
 800ff54:	ffff0208 	.word	0xffff0208

0800ff58 <__sread>:
 800ff58:	b510      	push	{r4, lr}
 800ff5a:	460c      	mov	r4, r1
 800ff5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff60:	f000 f868 	bl	8010034 <_read_r>
 800ff64:	2800      	cmp	r0, #0
 800ff66:	bfab      	itete	ge
 800ff68:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 800ff6a:	89a3      	ldrhlt	r3, [r4, #12]
 800ff6c:	181b      	addge	r3, r3, r0
 800ff6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ff72:	bfac      	ite	ge
 800ff74:	6523      	strge	r3, [r4, #80]	; 0x50
 800ff76:	81a3      	strhlt	r3, [r4, #12]
 800ff78:	bd10      	pop	{r4, pc}

0800ff7a <__swrite>:
 800ff7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff7e:	461f      	mov	r7, r3
 800ff80:	898b      	ldrh	r3, [r1, #12]
 800ff82:	05db      	lsls	r3, r3, #23
 800ff84:	4605      	mov	r5, r0
 800ff86:	460c      	mov	r4, r1
 800ff88:	4616      	mov	r6, r2
 800ff8a:	d505      	bpl.n	800ff98 <__swrite+0x1e>
 800ff8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff90:	2302      	movs	r3, #2
 800ff92:	2200      	movs	r2, #0
 800ff94:	f000 f83c 	bl	8010010 <_lseek_r>
 800ff98:	89a3      	ldrh	r3, [r4, #12]
 800ff9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ffa2:	81a3      	strh	r3, [r4, #12]
 800ffa4:	4632      	mov	r2, r6
 800ffa6:	463b      	mov	r3, r7
 800ffa8:	4628      	mov	r0, r5
 800ffaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ffae:	f000 b853 	b.w	8010058 <_write_r>

0800ffb2 <__sseek>:
 800ffb2:	b510      	push	{r4, lr}
 800ffb4:	460c      	mov	r4, r1
 800ffb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffba:	f000 f829 	bl	8010010 <_lseek_r>
 800ffbe:	1c43      	adds	r3, r0, #1
 800ffc0:	89a3      	ldrh	r3, [r4, #12]
 800ffc2:	bf15      	itete	ne
 800ffc4:	6520      	strne	r0, [r4, #80]	; 0x50
 800ffc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ffca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ffce:	81a3      	strheq	r3, [r4, #12]
 800ffd0:	bf18      	it	ne
 800ffd2:	81a3      	strhne	r3, [r4, #12]
 800ffd4:	bd10      	pop	{r4, pc}

0800ffd6 <__sclose>:
 800ffd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffda:	f000 b809 	b.w	800fff0 <_close_r>

0800ffde <memset>:
 800ffde:	4402      	add	r2, r0
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	4293      	cmp	r3, r2
 800ffe4:	d100      	bne.n	800ffe8 <memset+0xa>
 800ffe6:	4770      	bx	lr
 800ffe8:	f803 1b01 	strb.w	r1, [r3], #1
 800ffec:	e7f9      	b.n	800ffe2 <memset+0x4>
	...

0800fff0 <_close_r>:
 800fff0:	b538      	push	{r3, r4, r5, lr}
 800fff2:	4d06      	ldr	r5, [pc, #24]	; (801000c <_close_r+0x1c>)
 800fff4:	2300      	movs	r3, #0
 800fff6:	4604      	mov	r4, r0
 800fff8:	4608      	mov	r0, r1
 800fffa:	602b      	str	r3, [r5, #0]
 800fffc:	f7f2 fc89 	bl	8002912 <_close>
 8010000:	1c43      	adds	r3, r0, #1
 8010002:	d102      	bne.n	801000a <_close_r+0x1a>
 8010004:	682b      	ldr	r3, [r5, #0]
 8010006:	b103      	cbz	r3, 801000a <_close_r+0x1a>
 8010008:	6023      	str	r3, [r4, #0]
 801000a:	bd38      	pop	{r3, r4, r5, pc}
 801000c:	2000e778 	.word	0x2000e778

08010010 <_lseek_r>:
 8010010:	b538      	push	{r3, r4, r5, lr}
 8010012:	4d07      	ldr	r5, [pc, #28]	; (8010030 <_lseek_r+0x20>)
 8010014:	4604      	mov	r4, r0
 8010016:	4608      	mov	r0, r1
 8010018:	4611      	mov	r1, r2
 801001a:	2200      	movs	r2, #0
 801001c:	602a      	str	r2, [r5, #0]
 801001e:	461a      	mov	r2, r3
 8010020:	f7f2 fc9e 	bl	8002960 <_lseek>
 8010024:	1c43      	adds	r3, r0, #1
 8010026:	d102      	bne.n	801002e <_lseek_r+0x1e>
 8010028:	682b      	ldr	r3, [r5, #0]
 801002a:	b103      	cbz	r3, 801002e <_lseek_r+0x1e>
 801002c:	6023      	str	r3, [r4, #0]
 801002e:	bd38      	pop	{r3, r4, r5, pc}
 8010030:	2000e778 	.word	0x2000e778

08010034 <_read_r>:
 8010034:	b538      	push	{r3, r4, r5, lr}
 8010036:	4d07      	ldr	r5, [pc, #28]	; (8010054 <_read_r+0x20>)
 8010038:	4604      	mov	r4, r0
 801003a:	4608      	mov	r0, r1
 801003c:	4611      	mov	r1, r2
 801003e:	2200      	movs	r2, #0
 8010040:	602a      	str	r2, [r5, #0]
 8010042:	461a      	mov	r2, r3
 8010044:	f7f2 fc2c 	bl	80028a0 <_read>
 8010048:	1c43      	adds	r3, r0, #1
 801004a:	d102      	bne.n	8010052 <_read_r+0x1e>
 801004c:	682b      	ldr	r3, [r5, #0]
 801004e:	b103      	cbz	r3, 8010052 <_read_r+0x1e>
 8010050:	6023      	str	r3, [r4, #0]
 8010052:	bd38      	pop	{r3, r4, r5, pc}
 8010054:	2000e778 	.word	0x2000e778

08010058 <_write_r>:
 8010058:	b538      	push	{r3, r4, r5, lr}
 801005a:	4d07      	ldr	r5, [pc, #28]	; (8010078 <_write_r+0x20>)
 801005c:	4604      	mov	r4, r0
 801005e:	4608      	mov	r0, r1
 8010060:	4611      	mov	r1, r2
 8010062:	2200      	movs	r2, #0
 8010064:	602a      	str	r2, [r5, #0]
 8010066:	461a      	mov	r2, r3
 8010068:	f7f2 fc37 	bl	80028da <_write>
 801006c:	1c43      	adds	r3, r0, #1
 801006e:	d102      	bne.n	8010076 <_write_r+0x1e>
 8010070:	682b      	ldr	r3, [r5, #0]
 8010072:	b103      	cbz	r3, 8010076 <_write_r+0x1e>
 8010074:	6023      	str	r3, [r4, #0]
 8010076:	bd38      	pop	{r3, r4, r5, pc}
 8010078:	2000e778 	.word	0x2000e778

0801007c <__errno>:
 801007c:	4b01      	ldr	r3, [pc, #4]	; (8010084 <__errno+0x8>)
 801007e:	6818      	ldr	r0, [r3, #0]
 8010080:	4770      	bx	lr
 8010082:	bf00      	nop
 8010084:	20000278 	.word	0x20000278

08010088 <__libc_init_array>:
 8010088:	b570      	push	{r4, r5, r6, lr}
 801008a:	4d0d      	ldr	r5, [pc, #52]	; (80100c0 <__libc_init_array+0x38>)
 801008c:	4c0d      	ldr	r4, [pc, #52]	; (80100c4 <__libc_init_array+0x3c>)
 801008e:	1b64      	subs	r4, r4, r5
 8010090:	10a4      	asrs	r4, r4, #2
 8010092:	2600      	movs	r6, #0
 8010094:	42a6      	cmp	r6, r4
 8010096:	d109      	bne.n	80100ac <__libc_init_array+0x24>
 8010098:	4d0b      	ldr	r5, [pc, #44]	; (80100c8 <__libc_init_array+0x40>)
 801009a:	4c0c      	ldr	r4, [pc, #48]	; (80100cc <__libc_init_array+0x44>)
 801009c:	f004 fbe6 	bl	801486c <_init>
 80100a0:	1b64      	subs	r4, r4, r5
 80100a2:	10a4      	asrs	r4, r4, #2
 80100a4:	2600      	movs	r6, #0
 80100a6:	42a6      	cmp	r6, r4
 80100a8:	d105      	bne.n	80100b6 <__libc_init_array+0x2e>
 80100aa:	bd70      	pop	{r4, r5, r6, pc}
 80100ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80100b0:	4798      	blx	r3
 80100b2:	3601      	adds	r6, #1
 80100b4:	e7ee      	b.n	8010094 <__libc_init_array+0xc>
 80100b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80100ba:	4798      	blx	r3
 80100bc:	3601      	adds	r6, #1
 80100be:	e7f2      	b.n	80100a6 <__libc_init_array+0x1e>
 80100c0:	08014de4 	.word	0x08014de4
 80100c4:	08014de4 	.word	0x08014de4
 80100c8:	08014de4 	.word	0x08014de4
 80100cc:	08014dec 	.word	0x08014dec

080100d0 <__retarget_lock_init_recursive>:
 80100d0:	4770      	bx	lr

080100d2 <__retarget_lock_close_recursive>:
 80100d2:	4770      	bx	lr

080100d4 <__retarget_lock_acquire_recursive>:
 80100d4:	4770      	bx	lr

080100d6 <__retarget_lock_release_recursive>:
 80100d6:	4770      	bx	lr

080100d8 <memcpy>:
 80100d8:	440a      	add	r2, r1
 80100da:	4291      	cmp	r1, r2
 80100dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80100e0:	d100      	bne.n	80100e4 <memcpy+0xc>
 80100e2:	4770      	bx	lr
 80100e4:	b510      	push	{r4, lr}
 80100e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80100ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80100ee:	4291      	cmp	r1, r2
 80100f0:	d1f9      	bne.n	80100e6 <memcpy+0xe>
 80100f2:	bd10      	pop	{r4, pc}

080100f4 <register_fini>:
 80100f4:	4b02      	ldr	r3, [pc, #8]	; (8010100 <register_fini+0xc>)
 80100f6:	b113      	cbz	r3, 80100fe <register_fini+0xa>
 80100f8:	4802      	ldr	r0, [pc, #8]	; (8010104 <register_fini+0x10>)
 80100fa:	f000 b805 	b.w	8010108 <atexit>
 80100fe:	4770      	bx	lr
 8010100:	00000000 	.word	0x00000000
 8010104:	08011e09 	.word	0x08011e09

08010108 <atexit>:
 8010108:	2300      	movs	r3, #0
 801010a:	4601      	mov	r1, r0
 801010c:	461a      	mov	r2, r3
 801010e:	4618      	mov	r0, r3
 8010110:	f001 bed2 	b.w	8011eb8 <__register_exitproc>

08010114 <_malloc_trim_r>:
 8010114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010118:	4606      	mov	r6, r0
 801011a:	2008      	movs	r0, #8
 801011c:	460c      	mov	r4, r1
 801011e:	f001 fe87 	bl	8011e30 <sysconf>
 8010122:	4f23      	ldr	r7, [pc, #140]	; (80101b0 <_malloc_trim_r+0x9c>)
 8010124:	4680      	mov	r8, r0
 8010126:	4630      	mov	r0, r6
 8010128:	f000 fb42 	bl	80107b0 <__malloc_lock>
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	685d      	ldr	r5, [r3, #4]
 8010130:	f025 0503 	bic.w	r5, r5, #3
 8010134:	1b2c      	subs	r4, r5, r4
 8010136:	3c11      	subs	r4, #17
 8010138:	4444      	add	r4, r8
 801013a:	fbb4 f4f8 	udiv	r4, r4, r8
 801013e:	3c01      	subs	r4, #1
 8010140:	fb08 f404 	mul.w	r4, r8, r4
 8010144:	45a0      	cmp	r8, r4
 8010146:	dd05      	ble.n	8010154 <_malloc_trim_r+0x40>
 8010148:	4630      	mov	r0, r6
 801014a:	f000 fb37 	bl	80107bc <__malloc_unlock>
 801014e:	2000      	movs	r0, #0
 8010150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010154:	2100      	movs	r1, #0
 8010156:	4630      	mov	r0, r6
 8010158:	f001 fe46 	bl	8011de8 <_sbrk_r>
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	442b      	add	r3, r5
 8010160:	4298      	cmp	r0, r3
 8010162:	d1f1      	bne.n	8010148 <_malloc_trim_r+0x34>
 8010164:	4261      	negs	r1, r4
 8010166:	4630      	mov	r0, r6
 8010168:	f001 fe3e 	bl	8011de8 <_sbrk_r>
 801016c:	3001      	adds	r0, #1
 801016e:	d110      	bne.n	8010192 <_malloc_trim_r+0x7e>
 8010170:	2100      	movs	r1, #0
 8010172:	4630      	mov	r0, r6
 8010174:	f001 fe38 	bl	8011de8 <_sbrk_r>
 8010178:	68ba      	ldr	r2, [r7, #8]
 801017a:	1a83      	subs	r3, r0, r2
 801017c:	2b0f      	cmp	r3, #15
 801017e:	dde3      	ble.n	8010148 <_malloc_trim_r+0x34>
 8010180:	490c      	ldr	r1, [pc, #48]	; (80101b4 <_malloc_trim_r+0xa0>)
 8010182:	6809      	ldr	r1, [r1, #0]
 8010184:	1a40      	subs	r0, r0, r1
 8010186:	490c      	ldr	r1, [pc, #48]	; (80101b8 <_malloc_trim_r+0xa4>)
 8010188:	f043 0301 	orr.w	r3, r3, #1
 801018c:	6008      	str	r0, [r1, #0]
 801018e:	6053      	str	r3, [r2, #4]
 8010190:	e7da      	b.n	8010148 <_malloc_trim_r+0x34>
 8010192:	68bb      	ldr	r3, [r7, #8]
 8010194:	4a08      	ldr	r2, [pc, #32]	; (80101b8 <_malloc_trim_r+0xa4>)
 8010196:	1b2d      	subs	r5, r5, r4
 8010198:	f045 0501 	orr.w	r5, r5, #1
 801019c:	605d      	str	r5, [r3, #4]
 801019e:	6813      	ldr	r3, [r2, #0]
 80101a0:	4630      	mov	r0, r6
 80101a2:	1b1b      	subs	r3, r3, r4
 80101a4:	6013      	str	r3, [r2, #0]
 80101a6:	f000 fb09 	bl	80107bc <__malloc_unlock>
 80101aa:	2001      	movs	r0, #1
 80101ac:	e7d0      	b.n	8010150 <_malloc_trim_r+0x3c>
 80101ae:	bf00      	nop
 80101b0:	20000280 	.word	0x20000280
 80101b4:	20000688 	.word	0x20000688
 80101b8:	2000e784 	.word	0x2000e784

080101bc <_free_r>:
 80101bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101be:	4605      	mov	r5, r0
 80101c0:	460f      	mov	r7, r1
 80101c2:	2900      	cmp	r1, #0
 80101c4:	f000 80b1 	beq.w	801032a <_free_r+0x16e>
 80101c8:	f000 faf2 	bl	80107b0 <__malloc_lock>
 80101cc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80101d0:	4856      	ldr	r0, [pc, #344]	; (801032c <_free_r+0x170>)
 80101d2:	f022 0401 	bic.w	r4, r2, #1
 80101d6:	f1a7 0308 	sub.w	r3, r7, #8
 80101da:	eb03 0c04 	add.w	ip, r3, r4
 80101de:	6881      	ldr	r1, [r0, #8]
 80101e0:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80101e4:	4561      	cmp	r1, ip
 80101e6:	f026 0603 	bic.w	r6, r6, #3
 80101ea:	f002 0201 	and.w	r2, r2, #1
 80101ee:	d11b      	bne.n	8010228 <_free_r+0x6c>
 80101f0:	4426      	add	r6, r4
 80101f2:	b93a      	cbnz	r2, 8010204 <_free_r+0x48>
 80101f4:	f857 2c08 	ldr.w	r2, [r7, #-8]
 80101f8:	1a9b      	subs	r3, r3, r2
 80101fa:	4416      	add	r6, r2
 80101fc:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8010200:	60ca      	str	r2, [r1, #12]
 8010202:	6091      	str	r1, [r2, #8]
 8010204:	f046 0201 	orr.w	r2, r6, #1
 8010208:	605a      	str	r2, [r3, #4]
 801020a:	6083      	str	r3, [r0, #8]
 801020c:	4b48      	ldr	r3, [pc, #288]	; (8010330 <_free_r+0x174>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	42b3      	cmp	r3, r6
 8010212:	d804      	bhi.n	801021e <_free_r+0x62>
 8010214:	4b47      	ldr	r3, [pc, #284]	; (8010334 <_free_r+0x178>)
 8010216:	4628      	mov	r0, r5
 8010218:	6819      	ldr	r1, [r3, #0]
 801021a:	f7ff ff7b 	bl	8010114 <_malloc_trim_r>
 801021e:	4628      	mov	r0, r5
 8010220:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010224:	f000 baca 	b.w	80107bc <__malloc_unlock>
 8010228:	f8cc 6004 	str.w	r6, [ip, #4]
 801022c:	2a00      	cmp	r2, #0
 801022e:	d138      	bne.n	80102a2 <_free_r+0xe6>
 8010230:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8010234:	1a5b      	subs	r3, r3, r1
 8010236:	440c      	add	r4, r1
 8010238:	6899      	ldr	r1, [r3, #8]
 801023a:	f100 0708 	add.w	r7, r0, #8
 801023e:	42b9      	cmp	r1, r7
 8010240:	d031      	beq.n	80102a6 <_free_r+0xea>
 8010242:	68df      	ldr	r7, [r3, #12]
 8010244:	60cf      	str	r7, [r1, #12]
 8010246:	60b9      	str	r1, [r7, #8]
 8010248:	eb0c 0106 	add.w	r1, ip, r6
 801024c:	6849      	ldr	r1, [r1, #4]
 801024e:	07c9      	lsls	r1, r1, #31
 8010250:	d40b      	bmi.n	801026a <_free_r+0xae>
 8010252:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8010256:	4434      	add	r4, r6
 8010258:	bb3a      	cbnz	r2, 80102aa <_free_r+0xee>
 801025a:	4e37      	ldr	r6, [pc, #220]	; (8010338 <_free_r+0x17c>)
 801025c:	42b1      	cmp	r1, r6
 801025e:	d124      	bne.n	80102aa <_free_r+0xee>
 8010260:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010264:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8010268:	2201      	movs	r2, #1
 801026a:	f044 0101 	orr.w	r1, r4, #1
 801026e:	6059      	str	r1, [r3, #4]
 8010270:	511c      	str	r4, [r3, r4]
 8010272:	2a00      	cmp	r2, #0
 8010274:	d1d3      	bne.n	801021e <_free_r+0x62>
 8010276:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 801027a:	d21b      	bcs.n	80102b4 <_free_r+0xf8>
 801027c:	08e2      	lsrs	r2, r4, #3
 801027e:	2101      	movs	r1, #1
 8010280:	0964      	lsrs	r4, r4, #5
 8010282:	40a1      	lsls	r1, r4
 8010284:	6844      	ldr	r4, [r0, #4]
 8010286:	3201      	adds	r2, #1
 8010288:	4321      	orrs	r1, r4
 801028a:	6041      	str	r1, [r0, #4]
 801028c:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 8010290:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 8010294:	3908      	subs	r1, #8
 8010296:	e9c3 4102 	strd	r4, r1, [r3, #8]
 801029a:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 801029e:	60e3      	str	r3, [r4, #12]
 80102a0:	e7bd      	b.n	801021e <_free_r+0x62>
 80102a2:	2200      	movs	r2, #0
 80102a4:	e7d0      	b.n	8010248 <_free_r+0x8c>
 80102a6:	2201      	movs	r2, #1
 80102a8:	e7ce      	b.n	8010248 <_free_r+0x8c>
 80102aa:	f8dc 600c 	ldr.w	r6, [ip, #12]
 80102ae:	60ce      	str	r6, [r1, #12]
 80102b0:	60b1      	str	r1, [r6, #8]
 80102b2:	e7da      	b.n	801026a <_free_r+0xae>
 80102b4:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 80102b8:	ea4f 2254 	mov.w	r2, r4, lsr #9
 80102bc:	d214      	bcs.n	80102e8 <_free_r+0x12c>
 80102be:	09a2      	lsrs	r2, r4, #6
 80102c0:	3238      	adds	r2, #56	; 0x38
 80102c2:	1c51      	adds	r1, r2, #1
 80102c4:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 80102c8:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 80102cc:	428e      	cmp	r6, r1
 80102ce:	d125      	bne.n	801031c <_free_r+0x160>
 80102d0:	2401      	movs	r4, #1
 80102d2:	1092      	asrs	r2, r2, #2
 80102d4:	fa04 f202 	lsl.w	r2, r4, r2
 80102d8:	6844      	ldr	r4, [r0, #4]
 80102da:	4322      	orrs	r2, r4
 80102dc:	6042      	str	r2, [r0, #4]
 80102de:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80102e2:	60b3      	str	r3, [r6, #8]
 80102e4:	60cb      	str	r3, [r1, #12]
 80102e6:	e79a      	b.n	801021e <_free_r+0x62>
 80102e8:	2a14      	cmp	r2, #20
 80102ea:	d801      	bhi.n	80102f0 <_free_r+0x134>
 80102ec:	325b      	adds	r2, #91	; 0x5b
 80102ee:	e7e8      	b.n	80102c2 <_free_r+0x106>
 80102f0:	2a54      	cmp	r2, #84	; 0x54
 80102f2:	d802      	bhi.n	80102fa <_free_r+0x13e>
 80102f4:	0b22      	lsrs	r2, r4, #12
 80102f6:	326e      	adds	r2, #110	; 0x6e
 80102f8:	e7e3      	b.n	80102c2 <_free_r+0x106>
 80102fa:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80102fe:	d802      	bhi.n	8010306 <_free_r+0x14a>
 8010300:	0be2      	lsrs	r2, r4, #15
 8010302:	3277      	adds	r2, #119	; 0x77
 8010304:	e7dd      	b.n	80102c2 <_free_r+0x106>
 8010306:	f240 5154 	movw	r1, #1364	; 0x554
 801030a:	428a      	cmp	r2, r1
 801030c:	bf9a      	itte	ls
 801030e:	0ca2      	lsrls	r2, r4, #18
 8010310:	327c      	addls	r2, #124	; 0x7c
 8010312:	227e      	movhi	r2, #126	; 0x7e
 8010314:	e7d5      	b.n	80102c2 <_free_r+0x106>
 8010316:	6889      	ldr	r1, [r1, #8]
 8010318:	428e      	cmp	r6, r1
 801031a:	d004      	beq.n	8010326 <_free_r+0x16a>
 801031c:	684a      	ldr	r2, [r1, #4]
 801031e:	f022 0203 	bic.w	r2, r2, #3
 8010322:	42a2      	cmp	r2, r4
 8010324:	d8f7      	bhi.n	8010316 <_free_r+0x15a>
 8010326:	68ce      	ldr	r6, [r1, #12]
 8010328:	e7d9      	b.n	80102de <_free_r+0x122>
 801032a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801032c:	20000280 	.word	0x20000280
 8010330:	2000068c 	.word	0x2000068c
 8010334:	2000e7b4 	.word	0x2000e7b4
 8010338:	20000288 	.word	0x20000288

0801033c <_malloc_r>:
 801033c:	f101 030b 	add.w	r3, r1, #11
 8010340:	2b16      	cmp	r3, #22
 8010342:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010346:	4605      	mov	r5, r0
 8010348:	d906      	bls.n	8010358 <_malloc_r+0x1c>
 801034a:	f033 0707 	bics.w	r7, r3, #7
 801034e:	d504      	bpl.n	801035a <_malloc_r+0x1e>
 8010350:	230c      	movs	r3, #12
 8010352:	602b      	str	r3, [r5, #0]
 8010354:	2400      	movs	r4, #0
 8010356:	e1a3      	b.n	80106a0 <_malloc_r+0x364>
 8010358:	2710      	movs	r7, #16
 801035a:	42b9      	cmp	r1, r7
 801035c:	d8f8      	bhi.n	8010350 <_malloc_r+0x14>
 801035e:	4628      	mov	r0, r5
 8010360:	f000 fa26 	bl	80107b0 <__malloc_lock>
 8010364:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8010368:	4eaf      	ldr	r6, [pc, #700]	; (8010628 <_malloc_r+0x2ec>)
 801036a:	d237      	bcs.n	80103dc <_malloc_r+0xa0>
 801036c:	f107 0208 	add.w	r2, r7, #8
 8010370:	4432      	add	r2, r6
 8010372:	f1a2 0108 	sub.w	r1, r2, #8
 8010376:	6854      	ldr	r4, [r2, #4]
 8010378:	428c      	cmp	r4, r1
 801037a:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 801037e:	d102      	bne.n	8010386 <_malloc_r+0x4a>
 8010380:	68d4      	ldr	r4, [r2, #12]
 8010382:	42a2      	cmp	r2, r4
 8010384:	d010      	beq.n	80103a8 <_malloc_r+0x6c>
 8010386:	6863      	ldr	r3, [r4, #4]
 8010388:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 801038c:	f023 0303 	bic.w	r3, r3, #3
 8010390:	60ca      	str	r2, [r1, #12]
 8010392:	4423      	add	r3, r4
 8010394:	6091      	str	r1, [r2, #8]
 8010396:	685a      	ldr	r2, [r3, #4]
 8010398:	f042 0201 	orr.w	r2, r2, #1
 801039c:	605a      	str	r2, [r3, #4]
 801039e:	4628      	mov	r0, r5
 80103a0:	f000 fa0c 	bl	80107bc <__malloc_unlock>
 80103a4:	3408      	adds	r4, #8
 80103a6:	e17b      	b.n	80106a0 <_malloc_r+0x364>
 80103a8:	3302      	adds	r3, #2
 80103aa:	6934      	ldr	r4, [r6, #16]
 80103ac:	499f      	ldr	r1, [pc, #636]	; (801062c <_malloc_r+0x2f0>)
 80103ae:	428c      	cmp	r4, r1
 80103b0:	d077      	beq.n	80104a2 <_malloc_r+0x166>
 80103b2:	6862      	ldr	r2, [r4, #4]
 80103b4:	f022 0c03 	bic.w	ip, r2, #3
 80103b8:	ebac 0007 	sub.w	r0, ip, r7
 80103bc:	280f      	cmp	r0, #15
 80103be:	dd48      	ble.n	8010452 <_malloc_r+0x116>
 80103c0:	19e2      	adds	r2, r4, r7
 80103c2:	f040 0301 	orr.w	r3, r0, #1
 80103c6:	f047 0701 	orr.w	r7, r7, #1
 80103ca:	6067      	str	r7, [r4, #4]
 80103cc:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80103d0:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80103d4:	6053      	str	r3, [r2, #4]
 80103d6:	f844 000c 	str.w	r0, [r4, ip]
 80103da:	e7e0      	b.n	801039e <_malloc_r+0x62>
 80103dc:	0a7b      	lsrs	r3, r7, #9
 80103de:	d02a      	beq.n	8010436 <_malloc_r+0xfa>
 80103e0:	2b04      	cmp	r3, #4
 80103e2:	d812      	bhi.n	801040a <_malloc_r+0xce>
 80103e4:	09bb      	lsrs	r3, r7, #6
 80103e6:	3338      	adds	r3, #56	; 0x38
 80103e8:	1c5a      	adds	r2, r3, #1
 80103ea:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 80103ee:	f1a2 0c08 	sub.w	ip, r2, #8
 80103f2:	6854      	ldr	r4, [r2, #4]
 80103f4:	4564      	cmp	r4, ip
 80103f6:	d006      	beq.n	8010406 <_malloc_r+0xca>
 80103f8:	6862      	ldr	r2, [r4, #4]
 80103fa:	f022 0203 	bic.w	r2, r2, #3
 80103fe:	1bd0      	subs	r0, r2, r7
 8010400:	280f      	cmp	r0, #15
 8010402:	dd1c      	ble.n	801043e <_malloc_r+0x102>
 8010404:	3b01      	subs	r3, #1
 8010406:	3301      	adds	r3, #1
 8010408:	e7cf      	b.n	80103aa <_malloc_r+0x6e>
 801040a:	2b14      	cmp	r3, #20
 801040c:	d801      	bhi.n	8010412 <_malloc_r+0xd6>
 801040e:	335b      	adds	r3, #91	; 0x5b
 8010410:	e7ea      	b.n	80103e8 <_malloc_r+0xac>
 8010412:	2b54      	cmp	r3, #84	; 0x54
 8010414:	d802      	bhi.n	801041c <_malloc_r+0xe0>
 8010416:	0b3b      	lsrs	r3, r7, #12
 8010418:	336e      	adds	r3, #110	; 0x6e
 801041a:	e7e5      	b.n	80103e8 <_malloc_r+0xac>
 801041c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8010420:	d802      	bhi.n	8010428 <_malloc_r+0xec>
 8010422:	0bfb      	lsrs	r3, r7, #15
 8010424:	3377      	adds	r3, #119	; 0x77
 8010426:	e7df      	b.n	80103e8 <_malloc_r+0xac>
 8010428:	f240 5254 	movw	r2, #1364	; 0x554
 801042c:	4293      	cmp	r3, r2
 801042e:	d804      	bhi.n	801043a <_malloc_r+0xfe>
 8010430:	0cbb      	lsrs	r3, r7, #18
 8010432:	337c      	adds	r3, #124	; 0x7c
 8010434:	e7d8      	b.n	80103e8 <_malloc_r+0xac>
 8010436:	233f      	movs	r3, #63	; 0x3f
 8010438:	e7d6      	b.n	80103e8 <_malloc_r+0xac>
 801043a:	237e      	movs	r3, #126	; 0x7e
 801043c:	e7d4      	b.n	80103e8 <_malloc_r+0xac>
 801043e:	2800      	cmp	r0, #0
 8010440:	68e1      	ldr	r1, [r4, #12]
 8010442:	db04      	blt.n	801044e <_malloc_r+0x112>
 8010444:	68a3      	ldr	r3, [r4, #8]
 8010446:	60d9      	str	r1, [r3, #12]
 8010448:	608b      	str	r3, [r1, #8]
 801044a:	18a3      	adds	r3, r4, r2
 801044c:	e7a3      	b.n	8010396 <_malloc_r+0x5a>
 801044e:	460c      	mov	r4, r1
 8010450:	e7d0      	b.n	80103f4 <_malloc_r+0xb8>
 8010452:	2800      	cmp	r0, #0
 8010454:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8010458:	db07      	blt.n	801046a <_malloc_r+0x12e>
 801045a:	44a4      	add	ip, r4
 801045c:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8010460:	f043 0301 	orr.w	r3, r3, #1
 8010464:	f8cc 3004 	str.w	r3, [ip, #4]
 8010468:	e799      	b.n	801039e <_malloc_r+0x62>
 801046a:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 801046e:	6870      	ldr	r0, [r6, #4]
 8010470:	f080 8095 	bcs.w	801059e <_malloc_r+0x262>
 8010474:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8010478:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 801047c:	f04f 0c01 	mov.w	ip, #1
 8010480:	3201      	adds	r2, #1
 8010482:	fa0c fc0e 	lsl.w	ip, ip, lr
 8010486:	ea4c 0000 	orr.w	r0, ip, r0
 801048a:	6070      	str	r0, [r6, #4]
 801048c:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8010490:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8010494:	3808      	subs	r0, #8
 8010496:	e9c4 c002 	strd	ip, r0, [r4, #8]
 801049a:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 801049e:	f8cc 400c 	str.w	r4, [ip, #12]
 80104a2:	1098      	asrs	r0, r3, #2
 80104a4:	2201      	movs	r2, #1
 80104a6:	4082      	lsls	r2, r0
 80104a8:	6870      	ldr	r0, [r6, #4]
 80104aa:	4290      	cmp	r0, r2
 80104ac:	d326      	bcc.n	80104fc <_malloc_r+0x1c0>
 80104ae:	4210      	tst	r0, r2
 80104b0:	d106      	bne.n	80104c0 <_malloc_r+0x184>
 80104b2:	f023 0303 	bic.w	r3, r3, #3
 80104b6:	0052      	lsls	r2, r2, #1
 80104b8:	4210      	tst	r0, r2
 80104ba:	f103 0304 	add.w	r3, r3, #4
 80104be:	d0fa      	beq.n	80104b6 <_malloc_r+0x17a>
 80104c0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 80104c4:	46c1      	mov	r9, r8
 80104c6:	469e      	mov	lr, r3
 80104c8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 80104cc:	454c      	cmp	r4, r9
 80104ce:	f040 80b9 	bne.w	8010644 <_malloc_r+0x308>
 80104d2:	f10e 0e01 	add.w	lr, lr, #1
 80104d6:	f01e 0f03 	tst.w	lr, #3
 80104da:	f109 0908 	add.w	r9, r9, #8
 80104de:	d1f3      	bne.n	80104c8 <_malloc_r+0x18c>
 80104e0:	0798      	lsls	r0, r3, #30
 80104e2:	f040 80e3 	bne.w	80106ac <_malloc_r+0x370>
 80104e6:	6873      	ldr	r3, [r6, #4]
 80104e8:	ea23 0302 	bic.w	r3, r3, r2
 80104ec:	6073      	str	r3, [r6, #4]
 80104ee:	6870      	ldr	r0, [r6, #4]
 80104f0:	0052      	lsls	r2, r2, #1
 80104f2:	4290      	cmp	r0, r2
 80104f4:	d302      	bcc.n	80104fc <_malloc_r+0x1c0>
 80104f6:	2a00      	cmp	r2, #0
 80104f8:	f040 80e5 	bne.w	80106c6 <_malloc_r+0x38a>
 80104fc:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8010500:	f8da 3004 	ldr.w	r3, [sl, #4]
 8010504:	f023 0903 	bic.w	r9, r3, #3
 8010508:	45b9      	cmp	r9, r7
 801050a:	d304      	bcc.n	8010516 <_malloc_r+0x1da>
 801050c:	eba9 0207 	sub.w	r2, r9, r7
 8010510:	2a0f      	cmp	r2, #15
 8010512:	f300 8141 	bgt.w	8010798 <_malloc_r+0x45c>
 8010516:	4b46      	ldr	r3, [pc, #280]	; (8010630 <_malloc_r+0x2f4>)
 8010518:	6819      	ldr	r1, [r3, #0]
 801051a:	3110      	adds	r1, #16
 801051c:	4439      	add	r1, r7
 801051e:	2008      	movs	r0, #8
 8010520:	9101      	str	r1, [sp, #4]
 8010522:	f001 fc85 	bl	8011e30 <sysconf>
 8010526:	4a43      	ldr	r2, [pc, #268]	; (8010634 <_malloc_r+0x2f8>)
 8010528:	9901      	ldr	r1, [sp, #4]
 801052a:	6813      	ldr	r3, [r2, #0]
 801052c:	3301      	adds	r3, #1
 801052e:	bf1f      	itttt	ne
 8010530:	f101 31ff 	addne.w	r1, r1, #4294967295
 8010534:	1809      	addne	r1, r1, r0
 8010536:	4243      	negne	r3, r0
 8010538:	4019      	andne	r1, r3
 801053a:	4680      	mov	r8, r0
 801053c:	4628      	mov	r0, r5
 801053e:	9101      	str	r1, [sp, #4]
 8010540:	f001 fc52 	bl	8011de8 <_sbrk_r>
 8010544:	1c42      	adds	r2, r0, #1
 8010546:	eb0a 0b09 	add.w	fp, sl, r9
 801054a:	4604      	mov	r4, r0
 801054c:	f000 80f7 	beq.w	801073e <_malloc_r+0x402>
 8010550:	4583      	cmp	fp, r0
 8010552:	9901      	ldr	r1, [sp, #4]
 8010554:	4a37      	ldr	r2, [pc, #220]	; (8010634 <_malloc_r+0x2f8>)
 8010556:	d902      	bls.n	801055e <_malloc_r+0x222>
 8010558:	45b2      	cmp	sl, r6
 801055a:	f040 80f0 	bne.w	801073e <_malloc_r+0x402>
 801055e:	4b36      	ldr	r3, [pc, #216]	; (8010638 <_malloc_r+0x2fc>)
 8010560:	6818      	ldr	r0, [r3, #0]
 8010562:	45a3      	cmp	fp, r4
 8010564:	eb00 0e01 	add.w	lr, r0, r1
 8010568:	f8c3 e000 	str.w	lr, [r3]
 801056c:	f108 3cff 	add.w	ip, r8, #4294967295
 8010570:	f040 80ab 	bne.w	80106ca <_malloc_r+0x38e>
 8010574:	ea1b 0f0c 	tst.w	fp, ip
 8010578:	f040 80a7 	bne.w	80106ca <_malloc_r+0x38e>
 801057c:	68b2      	ldr	r2, [r6, #8]
 801057e:	4449      	add	r1, r9
 8010580:	f041 0101 	orr.w	r1, r1, #1
 8010584:	6051      	str	r1, [r2, #4]
 8010586:	4a2d      	ldr	r2, [pc, #180]	; (801063c <_malloc_r+0x300>)
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	6811      	ldr	r1, [r2, #0]
 801058c:	428b      	cmp	r3, r1
 801058e:	bf88      	it	hi
 8010590:	6013      	strhi	r3, [r2, #0]
 8010592:	4a2b      	ldr	r2, [pc, #172]	; (8010640 <_malloc_r+0x304>)
 8010594:	6811      	ldr	r1, [r2, #0]
 8010596:	428b      	cmp	r3, r1
 8010598:	bf88      	it	hi
 801059a:	6013      	strhi	r3, [r2, #0]
 801059c:	e0cf      	b.n	801073e <_malloc_r+0x402>
 801059e:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 80105a2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 80105a6:	d218      	bcs.n	80105da <_malloc_r+0x29e>
 80105a8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 80105ac:	3238      	adds	r2, #56	; 0x38
 80105ae:	f102 0e01 	add.w	lr, r2, #1
 80105b2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 80105b6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 80105ba:	45f0      	cmp	r8, lr
 80105bc:	d12b      	bne.n	8010616 <_malloc_r+0x2da>
 80105be:	1092      	asrs	r2, r2, #2
 80105c0:	f04f 0c01 	mov.w	ip, #1
 80105c4:	fa0c f202 	lsl.w	r2, ip, r2
 80105c8:	4302      	orrs	r2, r0
 80105ca:	6072      	str	r2, [r6, #4]
 80105cc:	e9c4 e802 	strd	lr, r8, [r4, #8]
 80105d0:	f8c8 4008 	str.w	r4, [r8, #8]
 80105d4:	f8ce 400c 	str.w	r4, [lr, #12]
 80105d8:	e763      	b.n	80104a2 <_malloc_r+0x166>
 80105da:	2a14      	cmp	r2, #20
 80105dc:	d801      	bhi.n	80105e2 <_malloc_r+0x2a6>
 80105de:	325b      	adds	r2, #91	; 0x5b
 80105e0:	e7e5      	b.n	80105ae <_malloc_r+0x272>
 80105e2:	2a54      	cmp	r2, #84	; 0x54
 80105e4:	d803      	bhi.n	80105ee <_malloc_r+0x2b2>
 80105e6:	ea4f 321c 	mov.w	r2, ip, lsr #12
 80105ea:	326e      	adds	r2, #110	; 0x6e
 80105ec:	e7df      	b.n	80105ae <_malloc_r+0x272>
 80105ee:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80105f2:	d803      	bhi.n	80105fc <_malloc_r+0x2c0>
 80105f4:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 80105f8:	3277      	adds	r2, #119	; 0x77
 80105fa:	e7d8      	b.n	80105ae <_malloc_r+0x272>
 80105fc:	f240 5e54 	movw	lr, #1364	; 0x554
 8010600:	4572      	cmp	r2, lr
 8010602:	bf9a      	itte	ls
 8010604:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8010608:	327c      	addls	r2, #124	; 0x7c
 801060a:	227e      	movhi	r2, #126	; 0x7e
 801060c:	e7cf      	b.n	80105ae <_malloc_r+0x272>
 801060e:	f8de e008 	ldr.w	lr, [lr, #8]
 8010612:	45f0      	cmp	r8, lr
 8010614:	d005      	beq.n	8010622 <_malloc_r+0x2e6>
 8010616:	f8de 2004 	ldr.w	r2, [lr, #4]
 801061a:	f022 0203 	bic.w	r2, r2, #3
 801061e:	4562      	cmp	r2, ip
 8010620:	d8f5      	bhi.n	801060e <_malloc_r+0x2d2>
 8010622:	f8de 800c 	ldr.w	r8, [lr, #12]
 8010626:	e7d1      	b.n	80105cc <_malloc_r+0x290>
 8010628:	20000280 	.word	0x20000280
 801062c:	20000288 	.word	0x20000288
 8010630:	2000e7b4 	.word	0x2000e7b4
 8010634:	20000688 	.word	0x20000688
 8010638:	2000e784 	.word	0x2000e784
 801063c:	2000e7ac 	.word	0x2000e7ac
 8010640:	2000e7b0 	.word	0x2000e7b0
 8010644:	6860      	ldr	r0, [r4, #4]
 8010646:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 801064a:	f020 0003 	bic.w	r0, r0, #3
 801064e:	eba0 0a07 	sub.w	sl, r0, r7
 8010652:	f1ba 0f0f 	cmp.w	sl, #15
 8010656:	dd12      	ble.n	801067e <_malloc_r+0x342>
 8010658:	68a3      	ldr	r3, [r4, #8]
 801065a:	19e2      	adds	r2, r4, r7
 801065c:	f047 0701 	orr.w	r7, r7, #1
 8010660:	6067      	str	r7, [r4, #4]
 8010662:	f8c3 c00c 	str.w	ip, [r3, #12]
 8010666:	f8cc 3008 	str.w	r3, [ip, #8]
 801066a:	f04a 0301 	orr.w	r3, sl, #1
 801066e:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8010672:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8010676:	6053      	str	r3, [r2, #4]
 8010678:	f844 a000 	str.w	sl, [r4, r0]
 801067c:	e68f      	b.n	801039e <_malloc_r+0x62>
 801067e:	f1ba 0f00 	cmp.w	sl, #0
 8010682:	db11      	blt.n	80106a8 <_malloc_r+0x36c>
 8010684:	4420      	add	r0, r4
 8010686:	6843      	ldr	r3, [r0, #4]
 8010688:	f043 0301 	orr.w	r3, r3, #1
 801068c:	6043      	str	r3, [r0, #4]
 801068e:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8010692:	4628      	mov	r0, r5
 8010694:	f8c3 c00c 	str.w	ip, [r3, #12]
 8010698:	f8cc 3008 	str.w	r3, [ip, #8]
 801069c:	f000 f88e 	bl	80107bc <__malloc_unlock>
 80106a0:	4620      	mov	r0, r4
 80106a2:	b003      	add	sp, #12
 80106a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106a8:	4664      	mov	r4, ip
 80106aa:	e70f      	b.n	80104cc <_malloc_r+0x190>
 80106ac:	f858 0908 	ldr.w	r0, [r8], #-8
 80106b0:	4540      	cmp	r0, r8
 80106b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80106b6:	f43f af13 	beq.w	80104e0 <_malloc_r+0x1a4>
 80106ba:	e718      	b.n	80104ee <_malloc_r+0x1b2>
 80106bc:	3304      	adds	r3, #4
 80106be:	0052      	lsls	r2, r2, #1
 80106c0:	4210      	tst	r0, r2
 80106c2:	d0fb      	beq.n	80106bc <_malloc_r+0x380>
 80106c4:	e6fc      	b.n	80104c0 <_malloc_r+0x184>
 80106c6:	4673      	mov	r3, lr
 80106c8:	e7fa      	b.n	80106c0 <_malloc_r+0x384>
 80106ca:	6810      	ldr	r0, [r2, #0]
 80106cc:	3001      	adds	r0, #1
 80106ce:	bf1b      	ittet	ne
 80106d0:	eba4 0b0b 	subne.w	fp, r4, fp
 80106d4:	eb0b 020e 	addne.w	r2, fp, lr
 80106d8:	6014      	streq	r4, [r2, #0]
 80106da:	601a      	strne	r2, [r3, #0]
 80106dc:	f014 0b07 	ands.w	fp, r4, #7
 80106e0:	bf1a      	itte	ne
 80106e2:	f1cb 0008 	rsbne	r0, fp, #8
 80106e6:	1824      	addne	r4, r4, r0
 80106e8:	4658      	moveq	r0, fp
 80106ea:	1862      	adds	r2, r4, r1
 80106ec:	ea02 010c 	and.w	r1, r2, ip
 80106f0:	4480      	add	r8, r0
 80106f2:	eba8 0801 	sub.w	r8, r8, r1
 80106f6:	ea08 080c 	and.w	r8, r8, ip
 80106fa:	4641      	mov	r1, r8
 80106fc:	4628      	mov	r0, r5
 80106fe:	9201      	str	r2, [sp, #4]
 8010700:	f001 fb72 	bl	8011de8 <_sbrk_r>
 8010704:	1c43      	adds	r3, r0, #1
 8010706:	9a01      	ldr	r2, [sp, #4]
 8010708:	4b28      	ldr	r3, [pc, #160]	; (80107ac <_malloc_r+0x470>)
 801070a:	d107      	bne.n	801071c <_malloc_r+0x3e0>
 801070c:	f1bb 0f00 	cmp.w	fp, #0
 8010710:	d023      	beq.n	801075a <_malloc_r+0x41e>
 8010712:	f1ab 0008 	sub.w	r0, fp, #8
 8010716:	4410      	add	r0, r2
 8010718:	f04f 0800 	mov.w	r8, #0
 801071c:	681a      	ldr	r2, [r3, #0]
 801071e:	60b4      	str	r4, [r6, #8]
 8010720:	1b00      	subs	r0, r0, r4
 8010722:	4440      	add	r0, r8
 8010724:	4442      	add	r2, r8
 8010726:	f040 0001 	orr.w	r0, r0, #1
 801072a:	45b2      	cmp	sl, r6
 801072c:	601a      	str	r2, [r3, #0]
 801072e:	6060      	str	r0, [r4, #4]
 8010730:	f43f af29 	beq.w	8010586 <_malloc_r+0x24a>
 8010734:	f1b9 0f0f 	cmp.w	r9, #15
 8010738:	d812      	bhi.n	8010760 <_malloc_r+0x424>
 801073a:	2301      	movs	r3, #1
 801073c:	6063      	str	r3, [r4, #4]
 801073e:	68b3      	ldr	r3, [r6, #8]
 8010740:	685b      	ldr	r3, [r3, #4]
 8010742:	f023 0303 	bic.w	r3, r3, #3
 8010746:	42bb      	cmp	r3, r7
 8010748:	eba3 0207 	sub.w	r2, r3, r7
 801074c:	d301      	bcc.n	8010752 <_malloc_r+0x416>
 801074e:	2a0f      	cmp	r2, #15
 8010750:	dc22      	bgt.n	8010798 <_malloc_r+0x45c>
 8010752:	4628      	mov	r0, r5
 8010754:	f000 f832 	bl	80107bc <__malloc_unlock>
 8010758:	e5fc      	b.n	8010354 <_malloc_r+0x18>
 801075a:	4610      	mov	r0, r2
 801075c:	46d8      	mov	r8, fp
 801075e:	e7dd      	b.n	801071c <_malloc_r+0x3e0>
 8010760:	f8da 2004 	ldr.w	r2, [sl, #4]
 8010764:	f1a9 090c 	sub.w	r9, r9, #12
 8010768:	f029 0907 	bic.w	r9, r9, #7
 801076c:	f002 0201 	and.w	r2, r2, #1
 8010770:	ea42 0209 	orr.w	r2, r2, r9
 8010774:	f8ca 2004 	str.w	r2, [sl, #4]
 8010778:	2105      	movs	r1, #5
 801077a:	eb0a 0209 	add.w	r2, sl, r9
 801077e:	f1b9 0f0f 	cmp.w	r9, #15
 8010782:	e9c2 1101 	strd	r1, r1, [r2, #4]
 8010786:	f67f aefe 	bls.w	8010586 <_malloc_r+0x24a>
 801078a:	f10a 0108 	add.w	r1, sl, #8
 801078e:	4628      	mov	r0, r5
 8010790:	f7ff fd14 	bl	80101bc <_free_r>
 8010794:	4b05      	ldr	r3, [pc, #20]	; (80107ac <_malloc_r+0x470>)
 8010796:	e6f6      	b.n	8010586 <_malloc_r+0x24a>
 8010798:	68b4      	ldr	r4, [r6, #8]
 801079a:	f047 0301 	orr.w	r3, r7, #1
 801079e:	4427      	add	r7, r4
 80107a0:	f042 0201 	orr.w	r2, r2, #1
 80107a4:	6063      	str	r3, [r4, #4]
 80107a6:	60b7      	str	r7, [r6, #8]
 80107a8:	607a      	str	r2, [r7, #4]
 80107aa:	e5f8      	b.n	801039e <_malloc_r+0x62>
 80107ac:	2000e784 	.word	0x2000e784

080107b0 <__malloc_lock>:
 80107b0:	4801      	ldr	r0, [pc, #4]	; (80107b8 <__malloc_lock+0x8>)
 80107b2:	f7ff bc8f 	b.w	80100d4 <__retarget_lock_acquire_recursive>
 80107b6:	bf00      	nop
 80107b8:	2000e77d 	.word	0x2000e77d

080107bc <__malloc_unlock>:
 80107bc:	4801      	ldr	r0, [pc, #4]	; (80107c4 <__malloc_unlock+0x8>)
 80107be:	f7ff bc8a 	b.w	80100d6 <__retarget_lock_release_recursive>
 80107c2:	bf00      	nop
 80107c4:	2000e77d 	.word	0x2000e77d

080107c8 <_svfprintf_r>:
 80107c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107cc:	ed2d 8b04 	vpush	{d8-d9}
 80107d0:	b0cf      	sub	sp, #316	; 0x13c
 80107d2:	4689      	mov	r9, r1
 80107d4:	9203      	str	r2, [sp, #12]
 80107d6:	461d      	mov	r5, r3
 80107d8:	4682      	mov	sl, r0
 80107da:	f001 fb01 	bl	8011de0 <_localeconv_r>
 80107de:	6803      	ldr	r3, [r0, #0]
 80107e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80107e2:	4618      	mov	r0, r3
 80107e4:	f7ef fd44 	bl	8000270 <strlen>
 80107e8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80107ec:	900e      	str	r0, [sp, #56]	; 0x38
 80107ee:	0619      	lsls	r1, r3, #24
 80107f0:	d51a      	bpl.n	8010828 <_svfprintf_r+0x60>
 80107f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80107f6:	b9bb      	cbnz	r3, 8010828 <_svfprintf_r+0x60>
 80107f8:	2140      	movs	r1, #64	; 0x40
 80107fa:	4650      	mov	r0, sl
 80107fc:	f7ff fd9e 	bl	801033c <_malloc_r>
 8010800:	f8c9 0000 	str.w	r0, [r9]
 8010804:	f8c9 0010 	str.w	r0, [r9, #16]
 8010808:	b958      	cbnz	r0, 8010822 <_svfprintf_r+0x5a>
 801080a:	230c      	movs	r3, #12
 801080c:	f8ca 3000 	str.w	r3, [sl]
 8010810:	f04f 33ff 	mov.w	r3, #4294967295
 8010814:	930b      	str	r3, [sp, #44]	; 0x2c
 8010816:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010818:	b04f      	add	sp, #316	; 0x13c
 801081a:	ecbd 8b04 	vpop	{d8-d9}
 801081e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010822:	2340      	movs	r3, #64	; 0x40
 8010824:	f8c9 3014 	str.w	r3, [r9, #20]
 8010828:	ed9f 7b91 	vldr	d7, [pc, #580]	; 8010a70 <_svfprintf_r+0x2a8>
 801082c:	2300      	movs	r3, #0
 801082e:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
 8010832:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010836:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 801083a:	ac25      	add	r4, sp, #148	; 0x94
 801083c:	9422      	str	r4, [sp, #136]	; 0x88
 801083e:	9305      	str	r3, [sp, #20]
 8010840:	9309      	str	r3, [sp, #36]	; 0x24
 8010842:	9311      	str	r3, [sp, #68]	; 0x44
 8010844:	9314      	str	r3, [sp, #80]	; 0x50
 8010846:	930b      	str	r3, [sp, #44]	; 0x2c
 8010848:	9b03      	ldr	r3, [sp, #12]
 801084a:	461e      	mov	r6, r3
 801084c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010850:	b10a      	cbz	r2, 8010856 <_svfprintf_r+0x8e>
 8010852:	2a25      	cmp	r2, #37	; 0x25
 8010854:	d1f9      	bne.n	801084a <_svfprintf_r+0x82>
 8010856:	9b03      	ldr	r3, [sp, #12]
 8010858:	1af7      	subs	r7, r6, r3
 801085a:	d00d      	beq.n	8010878 <_svfprintf_r+0xb0>
 801085c:	e9c4 3700 	strd	r3, r7, [r4]
 8010860:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010862:	443b      	add	r3, r7
 8010864:	9324      	str	r3, [sp, #144]	; 0x90
 8010866:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010868:	3301      	adds	r3, #1
 801086a:	2b07      	cmp	r3, #7
 801086c:	9323      	str	r3, [sp, #140]	; 0x8c
 801086e:	dc78      	bgt.n	8010962 <_svfprintf_r+0x19a>
 8010870:	3408      	adds	r4, #8
 8010872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010874:	443b      	add	r3, r7
 8010876:	930b      	str	r3, [sp, #44]	; 0x2c
 8010878:	7833      	ldrb	r3, [r6, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	f001 815a 	beq.w	8011b34 <_svfprintf_r+0x136c>
 8010880:	2300      	movs	r3, #0
 8010882:	3601      	adds	r6, #1
 8010884:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8010888:	f04f 38ff 	mov.w	r8, #4294967295
 801088c:	930f      	str	r3, [sp, #60]	; 0x3c
 801088e:	469b      	mov	fp, r3
 8010890:	270a      	movs	r7, #10
 8010892:	212b      	movs	r1, #43	; 0x2b
 8010894:	4633      	mov	r3, r6
 8010896:	f813 2b01 	ldrb.w	r2, [r3], #1
 801089a:	9207      	str	r2, [sp, #28]
 801089c:	930a      	str	r3, [sp, #40]	; 0x28
 801089e:	9b07      	ldr	r3, [sp, #28]
 80108a0:	3b20      	subs	r3, #32
 80108a2:	2b5a      	cmp	r3, #90	; 0x5a
 80108a4:	f200 85c6 	bhi.w	8011434 <_svfprintf_r+0xc6c>
 80108a8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80108ac:	05c4007e 	.word	0x05c4007e
 80108b0:	008605c4 	.word	0x008605c4
 80108b4:	05c405c4 	.word	0x05c405c4
 80108b8:	006505c4 	.word	0x006505c4
 80108bc:	05c405c4 	.word	0x05c405c4
 80108c0:	00930089 	.word	0x00930089
 80108c4:	009005c4 	.word	0x009005c4
 80108c8:	05c40096 	.word	0x05c40096
 80108cc:	00b200af 	.word	0x00b200af
 80108d0:	00b200b2 	.word	0x00b200b2
 80108d4:	00b200b2 	.word	0x00b200b2
 80108d8:	00b200b2 	.word	0x00b200b2
 80108dc:	00b200b2 	.word	0x00b200b2
 80108e0:	05c405c4 	.word	0x05c405c4
 80108e4:	05c405c4 	.word	0x05c405c4
 80108e8:	05c405c4 	.word	0x05c405c4
 80108ec:	012905c4 	.word	0x012905c4
 80108f0:	00e605c4 	.word	0x00e605c4
 80108f4:	012900f9 	.word	0x012900f9
 80108f8:	01290129 	.word	0x01290129
 80108fc:	05c405c4 	.word	0x05c405c4
 8010900:	05c405c4 	.word	0x05c405c4
 8010904:	05c400c2 	.word	0x05c400c2
 8010908:	049105c4 	.word	0x049105c4
 801090c:	05c405c4 	.word	0x05c405c4
 8010910:	04db05c4 	.word	0x04db05c4
 8010914:	050105c4 	.word	0x050105c4
 8010918:	05c405c4 	.word	0x05c405c4
 801091c:	05c40523 	.word	0x05c40523
 8010920:	05c405c4 	.word	0x05c405c4
 8010924:	05c405c4 	.word	0x05c405c4
 8010928:	05c405c4 	.word	0x05c405c4
 801092c:	012905c4 	.word	0x012905c4
 8010930:	00e605c4 	.word	0x00e605c4
 8010934:	012900fb 	.word	0x012900fb
 8010938:	01290129 	.word	0x01290129
 801093c:	00fb00c5 	.word	0x00fb00c5
 8010940:	05c400d9 	.word	0x05c400d9
 8010944:	05c400d2 	.word	0x05c400d2
 8010948:	0493046c 	.word	0x0493046c
 801094c:	00d904ca 	.word	0x00d904ca
 8010950:	04db05c4 	.word	0x04db05c4
 8010954:	0503007c 	.word	0x0503007c
 8010958:	05c405c4 	.word	0x05c405c4
 801095c:	05c40542 	.word	0x05c40542
 8010960:	007c      	.short	0x007c
 8010962:	aa22      	add	r2, sp, #136	; 0x88
 8010964:	4649      	mov	r1, r9
 8010966:	4650      	mov	r0, sl
 8010968:	f002 fc72 	bl	8013250 <__ssprint_r>
 801096c:	2800      	cmp	r0, #0
 801096e:	f040 8137 	bne.w	8010be0 <_svfprintf_r+0x418>
 8010972:	ac25      	add	r4, sp, #148	; 0x94
 8010974:	e77d      	b.n	8010872 <_svfprintf_r+0xaa>
 8010976:	4650      	mov	r0, sl
 8010978:	f001 fa32 	bl	8011de0 <_localeconv_r>
 801097c:	6843      	ldr	r3, [r0, #4]
 801097e:	9314      	str	r3, [sp, #80]	; 0x50
 8010980:	4618      	mov	r0, r3
 8010982:	f7ef fc75 	bl	8000270 <strlen>
 8010986:	9011      	str	r0, [sp, #68]	; 0x44
 8010988:	4650      	mov	r0, sl
 801098a:	f001 fa29 	bl	8011de0 <_localeconv_r>
 801098e:	6883      	ldr	r3, [r0, #8]
 8010990:	9309      	str	r3, [sp, #36]	; 0x24
 8010992:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8010994:	212b      	movs	r1, #43	; 0x2b
 8010996:	b12b      	cbz	r3, 80109a4 <_svfprintf_r+0x1dc>
 8010998:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801099a:	b11b      	cbz	r3, 80109a4 <_svfprintf_r+0x1dc>
 801099c:	781b      	ldrb	r3, [r3, #0]
 801099e:	b10b      	cbz	r3, 80109a4 <_svfprintf_r+0x1dc>
 80109a0:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
 80109a4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80109a6:	e775      	b.n	8010894 <_svfprintf_r+0xcc>
 80109a8:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d1f9      	bne.n	80109a4 <_svfprintf_r+0x1dc>
 80109b0:	2320      	movs	r3, #32
 80109b2:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 80109b6:	e7f5      	b.n	80109a4 <_svfprintf_r+0x1dc>
 80109b8:	f04b 0b01 	orr.w	fp, fp, #1
 80109bc:	e7f2      	b.n	80109a4 <_svfprintf_r+0x1dc>
 80109be:	f855 3b04 	ldr.w	r3, [r5], #4
 80109c2:	930f      	str	r3, [sp, #60]	; 0x3c
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	daed      	bge.n	80109a4 <_svfprintf_r+0x1dc>
 80109c8:	425b      	negs	r3, r3
 80109ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80109cc:	f04b 0b04 	orr.w	fp, fp, #4
 80109d0:	e7e8      	b.n	80109a4 <_svfprintf_r+0x1dc>
 80109d2:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 80109d6:	e7e5      	b.n	80109a4 <_svfprintf_r+0x1dc>
 80109d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80109da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109de:	9207      	str	r2, [sp, #28]
 80109e0:	2a2a      	cmp	r2, #42	; 0x2a
 80109e2:	d10f      	bne.n	8010a04 <_svfprintf_r+0x23c>
 80109e4:	f855 2b04 	ldr.w	r2, [r5], #4
 80109e8:	930a      	str	r3, [sp, #40]	; 0x28
 80109ea:	ea42 78e2 	orr.w	r8, r2, r2, asr #31
 80109ee:	e7d9      	b.n	80109a4 <_svfprintf_r+0x1dc>
 80109f0:	fb07 2808 	mla	r8, r7, r8, r2
 80109f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80109f8:	9207      	str	r2, [sp, #28]
 80109fa:	9a07      	ldr	r2, [sp, #28]
 80109fc:	3a30      	subs	r2, #48	; 0x30
 80109fe:	2a09      	cmp	r2, #9
 8010a00:	d9f6      	bls.n	80109f0 <_svfprintf_r+0x228>
 8010a02:	e74b      	b.n	801089c <_svfprintf_r+0xd4>
 8010a04:	f04f 0800 	mov.w	r8, #0
 8010a08:	e7f7      	b.n	80109fa <_svfprintf_r+0x232>
 8010a0a:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
 8010a0e:	e7c9      	b.n	80109a4 <_svfprintf_r+0x1dc>
 8010a10:	2200      	movs	r2, #0
 8010a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a14:	920f      	str	r2, [sp, #60]	; 0x3c
 8010a16:	9a07      	ldr	r2, [sp, #28]
 8010a18:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8010a1a:	3a30      	subs	r2, #48	; 0x30
 8010a1c:	fb07 2200 	mla	r2, r7, r0, r2
 8010a20:	920f      	str	r2, [sp, #60]	; 0x3c
 8010a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a26:	9207      	str	r2, [sp, #28]
 8010a28:	3a30      	subs	r2, #48	; 0x30
 8010a2a:	2a09      	cmp	r2, #9
 8010a2c:	d9f3      	bls.n	8010a16 <_svfprintf_r+0x24e>
 8010a2e:	e735      	b.n	801089c <_svfprintf_r+0xd4>
 8010a30:	f04b 0b08 	orr.w	fp, fp, #8
 8010a34:	e7b6      	b.n	80109a4 <_svfprintf_r+0x1dc>
 8010a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	2b68      	cmp	r3, #104	; 0x68
 8010a3c:	bf01      	itttt	eq
 8010a3e:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 8010a40:	3301      	addeq	r3, #1
 8010a42:	930a      	streq	r3, [sp, #40]	; 0x28
 8010a44:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
 8010a48:	bf18      	it	ne
 8010a4a:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
 8010a4e:	e7a9      	b.n	80109a4 <_svfprintf_r+0x1dc>
 8010a50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a52:	781b      	ldrb	r3, [r3, #0]
 8010a54:	2b6c      	cmp	r3, #108	; 0x6c
 8010a56:	d105      	bne.n	8010a64 <_svfprintf_r+0x29c>
 8010a58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010a5a:	3301      	adds	r3, #1
 8010a5c:	930a      	str	r3, [sp, #40]	; 0x28
 8010a5e:	f04b 0b20 	orr.w	fp, fp, #32
 8010a62:	e79f      	b.n	80109a4 <_svfprintf_r+0x1dc>
 8010a64:	f04b 0b10 	orr.w	fp, fp, #16
 8010a68:	e79c      	b.n	80109a4 <_svfprintf_r+0x1dc>
 8010a6a:	bf00      	nop
 8010a6c:	f3af 8000 	nop.w
	...
 8010a78:	462a      	mov	r2, r5
 8010a7a:	f852 3b04 	ldr.w	r3, [r2], #4
 8010a7e:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8010a82:	2300      	movs	r3, #0
 8010a84:	9206      	str	r2, [sp, #24]
 8010a86:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8010a8a:	9304      	str	r3, [sp, #16]
 8010a8c:	461f      	mov	r7, r3
 8010a8e:	461e      	mov	r6, r3
 8010a90:	9308      	str	r3, [sp, #32]
 8010a92:	461d      	mov	r5, r3
 8010a94:	ab35      	add	r3, sp, #212	; 0xd4
 8010a96:	f04f 0801 	mov.w	r8, #1
 8010a9a:	9303      	str	r3, [sp, #12]
 8010a9c:	e1b9      	b.n	8010e12 <_svfprintf_r+0x64a>
 8010a9e:	f04b 0b10 	orr.w	fp, fp, #16
 8010aa2:	f01b 0f20 	tst.w	fp, #32
 8010aa6:	d012      	beq.n	8010ace <_svfprintf_r+0x306>
 8010aa8:	3507      	adds	r5, #7
 8010aaa:	f025 0307 	bic.w	r3, r5, #7
 8010aae:	461a      	mov	r2, r3
 8010ab0:	685e      	ldr	r6, [r3, #4]
 8010ab2:	f852 5b08 	ldr.w	r5, [r2], #8
 8010ab6:	9206      	str	r2, [sp, #24]
 8010ab8:	2e00      	cmp	r6, #0
 8010aba:	da06      	bge.n	8010aca <_svfprintf_r+0x302>
 8010abc:	426d      	negs	r5, r5
 8010abe:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8010ac2:	eb66 0646 	sbc.w	r6, r6, r6, lsl #1
 8010ac6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8010aca:	2301      	movs	r3, #1
 8010acc:	e392      	b.n	80111f4 <_svfprintf_r+0xa2c>
 8010ace:	462b      	mov	r3, r5
 8010ad0:	f01b 0f10 	tst.w	fp, #16
 8010ad4:	f853 6b04 	ldr.w	r6, [r3], #4
 8010ad8:	9306      	str	r3, [sp, #24]
 8010ada:	d002      	beq.n	8010ae2 <_svfprintf_r+0x31a>
 8010adc:	4635      	mov	r5, r6
 8010ade:	17f6      	asrs	r6, r6, #31
 8010ae0:	e7ea      	b.n	8010ab8 <_svfprintf_r+0x2f0>
 8010ae2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 8010ae6:	d003      	beq.n	8010af0 <_svfprintf_r+0x328>
 8010ae8:	b235      	sxth	r5, r6
 8010aea:	f346 36c0 	sbfx	r6, r6, #15, #1
 8010aee:	e7e3      	b.n	8010ab8 <_svfprintf_r+0x2f0>
 8010af0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8010af4:	d0f2      	beq.n	8010adc <_svfprintf_r+0x314>
 8010af6:	b275      	sxtb	r5, r6
 8010af8:	f346 16c0 	sbfx	r6, r6, #7, #1
 8010afc:	e7dc      	b.n	8010ab8 <_svfprintf_r+0x2f0>
 8010afe:	3507      	adds	r5, #7
 8010b00:	f025 0307 	bic.w	r3, r5, #7
 8010b04:	ecb3 7b02 	vldmia	r3!, {d7}
 8010b08:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8010b0c:	9306      	str	r3, [sp, #24]
 8010b0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010b10:	ee09 3a10 	vmov	s18, r3
 8010b14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010b1a:	ee09 3a90 	vmov	s19, r3
 8010b1e:	f04f 32ff 	mov.w	r2, #4294967295
 8010b22:	4b34      	ldr	r3, [pc, #208]	; (8010bf4 <_svfprintf_r+0x42c>)
 8010b24:	ec51 0b19 	vmov	r0, r1, d9
 8010b28:	f7f0 f800 	bl	8000b2c <__aeabi_dcmpun>
 8010b2c:	bb18      	cbnz	r0, 8010b76 <_svfprintf_r+0x3ae>
 8010b2e:	4b31      	ldr	r3, [pc, #196]	; (8010bf4 <_svfprintf_r+0x42c>)
 8010b30:	ec51 0b19 	vmov	r0, r1, d9
 8010b34:	f04f 32ff 	mov.w	r2, #4294967295
 8010b38:	f7ef ffda 	bl	8000af0 <__aeabi_dcmple>
 8010b3c:	b9d8      	cbnz	r0, 8010b76 <_svfprintf_r+0x3ae>
 8010b3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8010b42:	2200      	movs	r2, #0
 8010b44:	2300      	movs	r3, #0
 8010b46:	f7ef ffc9 	bl	8000adc <__aeabi_dcmplt>
 8010b4a:	b110      	cbz	r0, 8010b52 <_svfprintf_r+0x38a>
 8010b4c:	232d      	movs	r3, #45	; 0x2d
 8010b4e:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8010b52:	4a29      	ldr	r2, [pc, #164]	; (8010bf8 <_svfprintf_r+0x430>)
 8010b54:	4b29      	ldr	r3, [pc, #164]	; (8010bfc <_svfprintf_r+0x434>)
 8010b56:	9907      	ldr	r1, [sp, #28]
 8010b58:	2947      	cmp	r1, #71	; 0x47
 8010b5a:	bfc8      	it	gt
 8010b5c:	461a      	movgt	r2, r3
 8010b5e:	2300      	movs	r3, #0
 8010b60:	9203      	str	r2, [sp, #12]
 8010b62:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
 8010b66:	9304      	str	r3, [sp, #16]
 8010b68:	f04f 0803 	mov.w	r8, #3
 8010b6c:	461f      	mov	r7, r3
 8010b6e:	461e      	mov	r6, r3
 8010b70:	9308      	str	r3, [sp, #32]
 8010b72:	461d      	mov	r5, r3
 8010b74:	e14d      	b.n	8010e12 <_svfprintf_r+0x64a>
 8010b76:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8010b7a:	4610      	mov	r0, r2
 8010b7c:	4619      	mov	r1, r3
 8010b7e:	f7ef ffd5 	bl	8000b2c <__aeabi_dcmpun>
 8010b82:	b140      	cbz	r0, 8010b96 <_svfprintf_r+0x3ce>
 8010b84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010b86:	4a1e      	ldr	r2, [pc, #120]	; (8010c00 <_svfprintf_r+0x438>)
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	bfbc      	itt	lt
 8010b8c:	232d      	movlt	r3, #45	; 0x2d
 8010b8e:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 8010b92:	4b1c      	ldr	r3, [pc, #112]	; (8010c04 <_svfprintf_r+0x43c>)
 8010b94:	e7df      	b.n	8010b56 <_svfprintf_r+0x38e>
 8010b96:	9b07      	ldr	r3, [sp, #28]
 8010b98:	f023 0320 	bic.w	r3, r3, #32
 8010b9c:	2b41      	cmp	r3, #65	; 0x41
 8010b9e:	9308      	str	r3, [sp, #32]
 8010ba0:	d132      	bne.n	8010c08 <_svfprintf_r+0x440>
 8010ba2:	2330      	movs	r3, #48	; 0x30
 8010ba4:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8010ba8:	9b07      	ldr	r3, [sp, #28]
 8010baa:	2b61      	cmp	r3, #97	; 0x61
 8010bac:	bf0c      	ite	eq
 8010bae:	2378      	moveq	r3, #120	; 0x78
 8010bb0:	2358      	movne	r3, #88	; 0x58
 8010bb2:	f1b8 0f63 	cmp.w	r8, #99	; 0x63
 8010bb6:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8010bba:	f04b 0b02 	orr.w	fp, fp, #2
 8010bbe:	f340 8204 	ble.w	8010fca <_svfprintf_r+0x802>
 8010bc2:	f108 0101 	add.w	r1, r8, #1
 8010bc6:	4650      	mov	r0, sl
 8010bc8:	f7ff fbb8 	bl	801033c <_malloc_r>
 8010bcc:	9003      	str	r0, [sp, #12]
 8010bce:	2800      	cmp	r0, #0
 8010bd0:	f040 81ff 	bne.w	8010fd2 <_svfprintf_r+0x80a>
 8010bd4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010bdc:	f8a9 300c 	strh.w	r3, [r9, #12]
 8010be0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8010be4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010be8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010bea:	bf18      	it	ne
 8010bec:	f04f 33ff 	movne.w	r3, #4294967295
 8010bf0:	e610      	b.n	8010814 <_svfprintf_r+0x4c>
 8010bf2:	bf00      	nop
 8010bf4:	7fefffff 	.word	0x7fefffff
 8010bf8:	08014a50 	.word	0x08014a50
 8010bfc:	08014a54 	.word	0x08014a54
 8010c00:	08014a58 	.word	0x08014a58
 8010c04:	08014a5c 	.word	0x08014a5c
 8010c08:	f1b8 3fff 	cmp.w	r8, #4294967295
 8010c0c:	f000 81e4 	beq.w	8010fd8 <_svfprintf_r+0x810>
 8010c10:	9b08      	ldr	r3, [sp, #32]
 8010c12:	2b47      	cmp	r3, #71	; 0x47
 8010c14:	f040 81e4 	bne.w	8010fe0 <_svfprintf_r+0x818>
 8010c18:	f1b8 0f00 	cmp.w	r8, #0
 8010c1c:	f040 81e0 	bne.w	8010fe0 <_svfprintf_r+0x818>
 8010c20:	f8cd 8010 	str.w	r8, [sp, #16]
 8010c24:	f04f 0801 	mov.w	r8, #1
 8010c28:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
 8010c2c:	9310      	str	r3, [sp, #64]	; 0x40
 8010c2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	f280 81d7 	bge.w	8010fe4 <_svfprintf_r+0x81c>
 8010c36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010c38:	ee08 3a10 	vmov	s16, r3
 8010c3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010c3e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010c42:	ee08 3a90 	vmov	s17, r3
 8010c46:	232d      	movs	r3, #45	; 0x2d
 8010c48:	9318      	str	r3, [sp, #96]	; 0x60
 8010c4a:	9b08      	ldr	r3, [sp, #32]
 8010c4c:	2b41      	cmp	r3, #65	; 0x41
 8010c4e:	f040 81e7 	bne.w	8011020 <_svfprintf_r+0x858>
 8010c52:	eeb0 0a48 	vmov.f32	s0, s16
 8010c56:	eef0 0a68 	vmov.f32	s1, s17
 8010c5a:	a81c      	add	r0, sp, #112	; 0x70
 8010c5c:	f001 f8f4 	bl	8011e48 <frexp>
 8010c60:	2200      	movs	r2, #0
 8010c62:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010c66:	ec51 0b10 	vmov	r0, r1, d0
 8010c6a:	f7ef fcc5 	bl	80005f8 <__aeabi_dmul>
 8010c6e:	2200      	movs	r2, #0
 8010c70:	2300      	movs	r3, #0
 8010c72:	4606      	mov	r6, r0
 8010c74:	460f      	mov	r7, r1
 8010c76:	f7ef ff27 	bl	8000ac8 <__aeabi_dcmpeq>
 8010c7a:	b108      	cbz	r0, 8010c80 <_svfprintf_r+0x4b8>
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	931c      	str	r3, [sp, #112]	; 0x70
 8010c80:	4bac      	ldr	r3, [pc, #688]	; (8010f34 <_svfprintf_r+0x76c>)
 8010c82:	4aad      	ldr	r2, [pc, #692]	; (8010f38 <_svfprintf_r+0x770>)
 8010c84:	9907      	ldr	r1, [sp, #28]
 8010c86:	9d03      	ldr	r5, [sp, #12]
 8010c88:	2961      	cmp	r1, #97	; 0x61
 8010c8a:	bf18      	it	ne
 8010c8c:	461a      	movne	r2, r3
 8010c8e:	f108 33ff 	add.w	r3, r8, #4294967295
 8010c92:	9217      	str	r2, [sp, #92]	; 0x5c
 8010c94:	9305      	str	r3, [sp, #20]
 8010c96:	4ba9      	ldr	r3, [pc, #676]	; (8010f3c <_svfprintf_r+0x774>)
 8010c98:	2200      	movs	r2, #0
 8010c9a:	4630      	mov	r0, r6
 8010c9c:	4639      	mov	r1, r7
 8010c9e:	f7ef fcab 	bl	80005f8 <__aeabi_dmul>
 8010ca2:	460f      	mov	r7, r1
 8010ca4:	4606      	mov	r6, r0
 8010ca6:	f7ef ff57 	bl	8000b58 <__aeabi_d2iz>
 8010caa:	9019      	str	r0, [sp, #100]	; 0x64
 8010cac:	f7ef fc3a 	bl	8000524 <__aeabi_i2d>
 8010cb0:	4602      	mov	r2, r0
 8010cb2:	460b      	mov	r3, r1
 8010cb4:	4630      	mov	r0, r6
 8010cb6:	4639      	mov	r1, r7
 8010cb8:	f7ef fae6 	bl	8000288 <__aeabi_dsub>
 8010cbc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8010cbe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010cc0:	5c9b      	ldrb	r3, [r3, r2]
 8010cc2:	f805 3b01 	strb.w	r3, [r5], #1
 8010cc6:	9b05      	ldr	r3, [sp, #20]
 8010cc8:	9312      	str	r3, [sp, #72]	; 0x48
 8010cca:	1c5a      	adds	r2, r3, #1
 8010ccc:	4606      	mov	r6, r0
 8010cce:	460f      	mov	r7, r1
 8010cd0:	d007      	beq.n	8010ce2 <_svfprintf_r+0x51a>
 8010cd2:	3b01      	subs	r3, #1
 8010cd4:	9305      	str	r3, [sp, #20]
 8010cd6:	2200      	movs	r2, #0
 8010cd8:	2300      	movs	r3, #0
 8010cda:	f7ef fef5 	bl	8000ac8 <__aeabi_dcmpeq>
 8010cde:	2800      	cmp	r0, #0
 8010ce0:	d0d9      	beq.n	8010c96 <_svfprintf_r+0x4ce>
 8010ce2:	4b97      	ldr	r3, [pc, #604]	; (8010f40 <_svfprintf_r+0x778>)
 8010ce4:	2200      	movs	r2, #0
 8010ce6:	4630      	mov	r0, r6
 8010ce8:	4639      	mov	r1, r7
 8010cea:	f7ef ff15 	bl	8000b18 <__aeabi_dcmpgt>
 8010cee:	b960      	cbnz	r0, 8010d0a <_svfprintf_r+0x542>
 8010cf0:	4b93      	ldr	r3, [pc, #588]	; (8010f40 <_svfprintf_r+0x778>)
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	4630      	mov	r0, r6
 8010cf6:	4639      	mov	r1, r7
 8010cf8:	f7ef fee6 	bl	8000ac8 <__aeabi_dcmpeq>
 8010cfc:	2800      	cmp	r0, #0
 8010cfe:	f000 818a 	beq.w	8011016 <_svfprintf_r+0x84e>
 8010d02:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8010d04:	07de      	lsls	r6, r3, #31
 8010d06:	f140 8186 	bpl.w	8011016 <_svfprintf_r+0x84e>
 8010d0a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8010d0c:	9520      	str	r5, [sp, #128]	; 0x80
 8010d0e:	7bd9      	ldrb	r1, [r3, #15]
 8010d10:	2030      	movs	r0, #48	; 0x30
 8010d12:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8010d14:	1e53      	subs	r3, r2, #1
 8010d16:	9320      	str	r3, [sp, #128]	; 0x80
 8010d18:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8010d1c:	428b      	cmp	r3, r1
 8010d1e:	f000 8169 	beq.w	8010ff4 <_svfprintf_r+0x82c>
 8010d22:	2b39      	cmp	r3, #57	; 0x39
 8010d24:	bf0b      	itete	eq
 8010d26:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 8010d28:	3301      	addne	r3, #1
 8010d2a:	7a9b      	ldrbeq	r3, [r3, #10]
 8010d2c:	b2db      	uxtbne	r3, r3
 8010d2e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8010d32:	9b03      	ldr	r3, [sp, #12]
 8010d34:	1aeb      	subs	r3, r5, r3
 8010d36:	9305      	str	r3, [sp, #20]
 8010d38:	9b08      	ldr	r3, [sp, #32]
 8010d3a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8010d3c:	2b47      	cmp	r3, #71	; 0x47
 8010d3e:	f040 81b9 	bne.w	80110b4 <_svfprintf_r+0x8ec>
 8010d42:	1ce8      	adds	r0, r5, #3
 8010d44:	db02      	blt.n	8010d4c <_svfprintf_r+0x584>
 8010d46:	45a8      	cmp	r8, r5
 8010d48:	f280 81d7 	bge.w	80110fa <_svfprintf_r+0x932>
 8010d4c:	9b07      	ldr	r3, [sp, #28]
 8010d4e:	3b02      	subs	r3, #2
 8010d50:	9307      	str	r3, [sp, #28]
 8010d52:	9907      	ldr	r1, [sp, #28]
 8010d54:	f89d 201c 	ldrb.w	r2, [sp, #28]
 8010d58:	f021 0120 	bic.w	r1, r1, #32
 8010d5c:	2941      	cmp	r1, #65	; 0x41
 8010d5e:	bf08      	it	eq
 8010d60:	320f      	addeq	r2, #15
 8010d62:	f105 33ff 	add.w	r3, r5, #4294967295
 8010d66:	bf06      	itte	eq
 8010d68:	b2d2      	uxtbeq	r2, r2
 8010d6a:	2101      	moveq	r1, #1
 8010d6c:	2100      	movne	r1, #0
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	931c      	str	r3, [sp, #112]	; 0x70
 8010d72:	bfb8      	it	lt
 8010d74:	f1c5 0301 	rsblt	r3, r5, #1
 8010d78:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 8010d7c:	bfb4      	ite	lt
 8010d7e:	222d      	movlt	r2, #45	; 0x2d
 8010d80:	222b      	movge	r2, #43	; 0x2b
 8010d82:	2b09      	cmp	r3, #9
 8010d84:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 8010d88:	f340 81aa 	ble.w	80110e0 <_svfprintf_r+0x918>
 8010d8c:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 8010d90:	260a      	movs	r6, #10
 8010d92:	4602      	mov	r2, r0
 8010d94:	fb93 f5f6 	sdiv	r5, r3, r6
 8010d98:	fb06 3115 	mls	r1, r6, r5, r3
 8010d9c:	3130      	adds	r1, #48	; 0x30
 8010d9e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8010da2:	4619      	mov	r1, r3
 8010da4:	2963      	cmp	r1, #99	; 0x63
 8010da6:	f100 30ff 	add.w	r0, r0, #4294967295
 8010daa:	462b      	mov	r3, r5
 8010dac:	dcf1      	bgt.n	8010d92 <_svfprintf_r+0x5ca>
 8010dae:	3330      	adds	r3, #48	; 0x30
 8010db0:	1e91      	subs	r1, r2, #2
 8010db2:	f800 3c01 	strb.w	r3, [r0, #-1]
 8010db6:	f10d 0579 	add.w	r5, sp, #121	; 0x79
 8010dba:	460b      	mov	r3, r1
 8010dbc:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 8010dc0:	4283      	cmp	r3, r0
 8010dc2:	f0c0 8188 	bcc.w	80110d6 <_svfprintf_r+0x90e>
 8010dc6:	f10d 0389 	add.w	r3, sp, #137	; 0x89
 8010dca:	1a9b      	subs	r3, r3, r2
 8010dcc:	4281      	cmp	r1, r0
 8010dce:	bf88      	it	hi
 8010dd0:	2300      	movhi	r3, #0
 8010dd2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 8010dd6:	441a      	add	r2, r3
 8010dd8:	ab1e      	add	r3, sp, #120	; 0x78
 8010dda:	1ad3      	subs	r3, r2, r3
 8010ddc:	9a05      	ldr	r2, [sp, #20]
 8010dde:	9315      	str	r3, [sp, #84]	; 0x54
 8010de0:	2a01      	cmp	r2, #1
 8010de2:	eb03 0802 	add.w	r8, r3, r2
 8010de6:	dc02      	bgt.n	8010dee <_svfprintf_r+0x626>
 8010de8:	f01b 0f01 	tst.w	fp, #1
 8010dec:	d001      	beq.n	8010df2 <_svfprintf_r+0x62a>
 8010dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8010df0:	4498      	add	r8, r3
 8010df2:	f42b 6380 	bic.w	r3, fp, #1024	; 0x400
 8010df6:	2600      	movs	r6, #0
 8010df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010dfc:	9310      	str	r3, [sp, #64]	; 0x40
 8010dfe:	9608      	str	r6, [sp, #32]
 8010e00:	4635      	mov	r5, r6
 8010e02:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010e04:	b113      	cbz	r3, 8010e0c <_svfprintf_r+0x644>
 8010e06:	232d      	movs	r3, #45	; 0x2d
 8010e08:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8010e0c:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
 8010e10:	2700      	movs	r7, #0
 8010e12:	4547      	cmp	r7, r8
 8010e14:	463b      	mov	r3, r7
 8010e16:	bfb8      	it	lt
 8010e18:	4643      	movlt	r3, r8
 8010e1a:	9310      	str	r3, [sp, #64]	; 0x40
 8010e1c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 8010e20:	b113      	cbz	r3, 8010e28 <_svfprintf_r+0x660>
 8010e22:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8010e24:	3301      	adds	r3, #1
 8010e26:	9310      	str	r3, [sp, #64]	; 0x40
 8010e28:	f01b 0302 	ands.w	r3, fp, #2
 8010e2c:	9317      	str	r3, [sp, #92]	; 0x5c
 8010e2e:	bf1e      	ittt	ne
 8010e30:	9b10      	ldrne	r3, [sp, #64]	; 0x40
 8010e32:	3302      	addne	r3, #2
 8010e34:	9310      	strne	r3, [sp, #64]	; 0x40
 8010e36:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
 8010e3a:	9318      	str	r3, [sp, #96]	; 0x60
 8010e3c:	d122      	bne.n	8010e84 <_svfprintf_r+0x6bc>
 8010e3e:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8010e42:	1a9b      	subs	r3, r3, r2
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	9312      	str	r3, [sp, #72]	; 0x48
 8010e48:	dd1c      	ble.n	8010e84 <_svfprintf_r+0x6bc>
 8010e4a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010e4c:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8010e50:	2810      	cmp	r0, #16
 8010e52:	483c      	ldr	r0, [pc, #240]	; (8010f44 <_svfprintf_r+0x77c>)
 8010e54:	6020      	str	r0, [r4, #0]
 8010e56:	f102 0201 	add.w	r2, r2, #1
 8010e5a:	f104 0108 	add.w	r1, r4, #8
 8010e5e:	f300 82f7 	bgt.w	8011450 <_svfprintf_r+0xc88>
 8010e62:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010e64:	6060      	str	r0, [r4, #4]
 8010e66:	4403      	add	r3, r0
 8010e68:	2a07      	cmp	r2, #7
 8010e6a:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8010e6e:	f340 8304 	ble.w	801147a <_svfprintf_r+0xcb2>
 8010e72:	aa22      	add	r2, sp, #136	; 0x88
 8010e74:	4649      	mov	r1, r9
 8010e76:	4650      	mov	r0, sl
 8010e78:	f002 f9ea 	bl	8013250 <__ssprint_r>
 8010e7c:	2800      	cmp	r0, #0
 8010e7e:	f040 8637 	bne.w	8011af0 <_svfprintf_r+0x1328>
 8010e82:	ac25      	add	r4, sp, #148	; 0x94
 8010e84:	f89d 206b 	ldrb.w	r2, [sp, #107]	; 0x6b
 8010e88:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010e8a:	b16a      	cbz	r2, 8010ea8 <_svfprintf_r+0x6e0>
 8010e8c:	f10d 026b 	add.w	r2, sp, #107	; 0x6b
 8010e90:	6022      	str	r2, [r4, #0]
 8010e92:	2201      	movs	r2, #1
 8010e94:	4413      	add	r3, r2
 8010e96:	9324      	str	r3, [sp, #144]	; 0x90
 8010e98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010e9a:	6062      	str	r2, [r4, #4]
 8010e9c:	4413      	add	r3, r2
 8010e9e:	2b07      	cmp	r3, #7
 8010ea0:	9323      	str	r3, [sp, #140]	; 0x8c
 8010ea2:	f300 82ec 	bgt.w	801147e <_svfprintf_r+0xcb6>
 8010ea6:	3408      	adds	r4, #8
 8010ea8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010eaa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010eac:	b162      	cbz	r2, 8010ec8 <_svfprintf_r+0x700>
 8010eae:	aa1b      	add	r2, sp, #108	; 0x6c
 8010eb0:	6022      	str	r2, [r4, #0]
 8010eb2:	2202      	movs	r2, #2
 8010eb4:	4413      	add	r3, r2
 8010eb6:	9324      	str	r3, [sp, #144]	; 0x90
 8010eb8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010eba:	6062      	str	r2, [r4, #4]
 8010ebc:	3301      	adds	r3, #1
 8010ebe:	2b07      	cmp	r3, #7
 8010ec0:	9323      	str	r3, [sp, #140]	; 0x8c
 8010ec2:	f300 82e6 	bgt.w	8011492 <_svfprintf_r+0xcca>
 8010ec6:	3408      	adds	r4, #8
 8010ec8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8010eca:	2b80      	cmp	r3, #128	; 0x80
 8010ecc:	d122      	bne.n	8010f14 <_svfprintf_r+0x74c>
 8010ece:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8010ed2:	1a9b      	subs	r3, r3, r2
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	9312      	str	r3, [sp, #72]	; 0x48
 8010ed8:	dd1c      	ble.n	8010f14 <_svfprintf_r+0x74c>
 8010eda:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010edc:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 8010ee0:	2810      	cmp	r0, #16
 8010ee2:	4819      	ldr	r0, [pc, #100]	; (8010f48 <_svfprintf_r+0x780>)
 8010ee4:	6020      	str	r0, [r4, #0]
 8010ee6:	f102 0201 	add.w	r2, r2, #1
 8010eea:	f104 0108 	add.w	r1, r4, #8
 8010eee:	f300 82da 	bgt.w	80114a6 <_svfprintf_r+0xcde>
 8010ef2:	9812      	ldr	r0, [sp, #72]	; 0x48
 8010ef4:	6060      	str	r0, [r4, #4]
 8010ef6:	4403      	add	r3, r0
 8010ef8:	2a07      	cmp	r2, #7
 8010efa:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 8010efe:	f340 82e7 	ble.w	80114d0 <_svfprintf_r+0xd08>
 8010f02:	aa22      	add	r2, sp, #136	; 0x88
 8010f04:	4649      	mov	r1, r9
 8010f06:	4650      	mov	r0, sl
 8010f08:	f002 f9a2 	bl	8013250 <__ssprint_r>
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	f040 85ef 	bne.w	8011af0 <_svfprintf_r+0x1328>
 8010f12:	ac25      	add	r4, sp, #148	; 0x94
 8010f14:	eba7 0708 	sub.w	r7, r7, r8
 8010f18:	2f00      	cmp	r7, #0
 8010f1a:	dd27      	ble.n	8010f6c <_svfprintf_r+0x7a4>
 8010f1c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8010f20:	4809      	ldr	r0, [pc, #36]	; (8010f48 <_svfprintf_r+0x780>)
 8010f22:	6020      	str	r0, [r4, #0]
 8010f24:	2f10      	cmp	r7, #16
 8010f26:	f103 0301 	add.w	r3, r3, #1
 8010f2a:	f104 0108 	add.w	r1, r4, #8
 8010f2e:	f300 82d1 	bgt.w	80114d4 <_svfprintf_r+0xd0c>
 8010f32:	e00b      	b.n	8010f4c <_svfprintf_r+0x784>
 8010f34:	08014a71 	.word	0x08014a71
 8010f38:	08014a60 	.word	0x08014a60
 8010f3c:	40300000 	.word	0x40300000
 8010f40:	3fe00000 	.word	0x3fe00000
 8010f44:	08014a84 	.word	0x08014a84
 8010f48:	08014a94 	.word	0x08014a94
 8010f4c:	6067      	str	r7, [r4, #4]
 8010f4e:	2b07      	cmp	r3, #7
 8010f50:	4417      	add	r7, r2
 8010f52:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8010f56:	f340 82d0 	ble.w	80114fa <_svfprintf_r+0xd32>
 8010f5a:	aa22      	add	r2, sp, #136	; 0x88
 8010f5c:	4649      	mov	r1, r9
 8010f5e:	4650      	mov	r0, sl
 8010f60:	f002 f976 	bl	8013250 <__ssprint_r>
 8010f64:	2800      	cmp	r0, #0
 8010f66:	f040 85c3 	bne.w	8011af0 <_svfprintf_r+0x1328>
 8010f6a:	ac25      	add	r4, sp, #148	; 0x94
 8010f6c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8010f70:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8010f72:	f040 82c9 	bne.w	8011508 <_svfprintf_r+0xd40>
 8010f76:	9b03      	ldr	r3, [sp, #12]
 8010f78:	e9c4 3800 	strd	r3, r8, [r4]
 8010f7c:	4447      	add	r7, r8
 8010f7e:	9724      	str	r7, [sp, #144]	; 0x90
 8010f80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8010f82:	3301      	adds	r3, #1
 8010f84:	2b07      	cmp	r3, #7
 8010f86:	9323      	str	r3, [sp, #140]	; 0x8c
 8010f88:	f300 8303 	bgt.w	8011592 <_svfprintf_r+0xdca>
 8010f8c:	3408      	adds	r4, #8
 8010f8e:	f01b 0f04 	tst.w	fp, #4
 8010f92:	f040 858f 	bne.w	8011ab4 <_svfprintf_r+0x12ec>
 8010f96:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8010f9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010f9c:	428a      	cmp	r2, r1
 8010f9e:	bfac      	ite	ge
 8010fa0:	189b      	addge	r3, r3, r2
 8010fa2:	185b      	addlt	r3, r3, r1
 8010fa4:	930b      	str	r3, [sp, #44]	; 0x2c
 8010fa6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8010fa8:	b13b      	cbz	r3, 8010fba <_svfprintf_r+0x7f2>
 8010faa:	aa22      	add	r2, sp, #136	; 0x88
 8010fac:	4649      	mov	r1, r9
 8010fae:	4650      	mov	r0, sl
 8010fb0:	f002 f94e 	bl	8013250 <__ssprint_r>
 8010fb4:	2800      	cmp	r0, #0
 8010fb6:	f040 859b 	bne.w	8011af0 <_svfprintf_r+0x1328>
 8010fba:	2300      	movs	r3, #0
 8010fbc:	9323      	str	r3, [sp, #140]	; 0x8c
 8010fbe:	9b04      	ldr	r3, [sp, #16]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	f040 85b1 	bne.w	8011b28 <_svfprintf_r+0x1360>
 8010fc6:	ac25      	add	r4, sp, #148	; 0x94
 8010fc8:	e0e7      	b.n	801119a <_svfprintf_r+0x9d2>
 8010fca:	ab35      	add	r3, sp, #212	; 0xd4
 8010fcc:	9004      	str	r0, [sp, #16]
 8010fce:	9303      	str	r3, [sp, #12]
 8010fd0:	e62a      	b.n	8010c28 <_svfprintf_r+0x460>
 8010fd2:	9b03      	ldr	r3, [sp, #12]
 8010fd4:	9304      	str	r3, [sp, #16]
 8010fd6:	e627      	b.n	8010c28 <_svfprintf_r+0x460>
 8010fd8:	9004      	str	r0, [sp, #16]
 8010fda:	f04f 0806 	mov.w	r8, #6
 8010fde:	e623      	b.n	8010c28 <_svfprintf_r+0x460>
 8010fe0:	9004      	str	r0, [sp, #16]
 8010fe2:	e621      	b.n	8010c28 <_svfprintf_r+0x460>
 8010fe4:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 8010fe8:	2300      	movs	r3, #0
 8010fea:	eeb0 8a47 	vmov.f32	s16, s14
 8010fee:	eef0 8a67 	vmov.f32	s17, s15
 8010ff2:	e629      	b.n	8010c48 <_svfprintf_r+0x480>
 8010ff4:	f802 0c01 	strb.w	r0, [r2, #-1]
 8010ff8:	e68b      	b.n	8010d12 <_svfprintf_r+0x54a>
 8010ffa:	f803 0b01 	strb.w	r0, [r3], #1
 8010ffe:	1aca      	subs	r2, r1, r3
 8011000:	2a00      	cmp	r2, #0
 8011002:	dafa      	bge.n	8010ffa <_svfprintf_r+0x832>
 8011004:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011006:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011008:	3201      	adds	r2, #1
 801100a:	f103 0301 	add.w	r3, r3, #1
 801100e:	bfb8      	it	lt
 8011010:	2300      	movlt	r3, #0
 8011012:	441d      	add	r5, r3
 8011014:	e68d      	b.n	8010d32 <_svfprintf_r+0x56a>
 8011016:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011018:	462b      	mov	r3, r5
 801101a:	18a9      	adds	r1, r5, r2
 801101c:	2030      	movs	r0, #48	; 0x30
 801101e:	e7ee      	b.n	8010ffe <_svfprintf_r+0x836>
 8011020:	9b08      	ldr	r3, [sp, #32]
 8011022:	2b46      	cmp	r3, #70	; 0x46
 8011024:	d005      	beq.n	8011032 <_svfprintf_r+0x86a>
 8011026:	2b45      	cmp	r3, #69	; 0x45
 8011028:	d11d      	bne.n	8011066 <_svfprintf_r+0x89e>
 801102a:	f108 0501 	add.w	r5, r8, #1
 801102e:	2102      	movs	r1, #2
 8011030:	e001      	b.n	8011036 <_svfprintf_r+0x86e>
 8011032:	4645      	mov	r5, r8
 8011034:	2103      	movs	r1, #3
 8011036:	ab20      	add	r3, sp, #128	; 0x80
 8011038:	9301      	str	r3, [sp, #4]
 801103a:	ab1d      	add	r3, sp, #116	; 0x74
 801103c:	9300      	str	r3, [sp, #0]
 801103e:	462a      	mov	r2, r5
 8011040:	ab1c      	add	r3, sp, #112	; 0x70
 8011042:	4650      	mov	r0, sl
 8011044:	eeb0 0a48 	vmov.f32	s0, s16
 8011048:	eef0 0a68 	vmov.f32	s1, s17
 801104c:	f000 fffc 	bl	8012048 <_dtoa_r>
 8011050:	9b08      	ldr	r3, [sp, #32]
 8011052:	9003      	str	r0, [sp, #12]
 8011054:	2b47      	cmp	r3, #71	; 0x47
 8011056:	d108      	bne.n	801106a <_svfprintf_r+0x8a2>
 8011058:	f01b 0f01 	tst.w	fp, #1
 801105c:	d105      	bne.n	801106a <_svfprintf_r+0x8a2>
 801105e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8011060:	9a03      	ldr	r2, [sp, #12]
 8011062:	1a9b      	subs	r3, r3, r2
 8011064:	e667      	b.n	8010d36 <_svfprintf_r+0x56e>
 8011066:	4645      	mov	r5, r8
 8011068:	e7e1      	b.n	801102e <_svfprintf_r+0x866>
 801106a:	9b03      	ldr	r3, [sp, #12]
 801106c:	195e      	adds	r6, r3, r5
 801106e:	9b08      	ldr	r3, [sp, #32]
 8011070:	2b46      	cmp	r3, #70	; 0x46
 8011072:	d10f      	bne.n	8011094 <_svfprintf_r+0x8cc>
 8011074:	9b03      	ldr	r3, [sp, #12]
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	2b30      	cmp	r3, #48	; 0x30
 801107a:	d109      	bne.n	8011090 <_svfprintf_r+0x8c8>
 801107c:	ec51 0b18 	vmov	r0, r1, d8
 8011080:	2200      	movs	r2, #0
 8011082:	2300      	movs	r3, #0
 8011084:	f7ef fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 8011088:	b910      	cbnz	r0, 8011090 <_svfprintf_r+0x8c8>
 801108a:	f1c5 0501 	rsb	r5, r5, #1
 801108e:	951c      	str	r5, [sp, #112]	; 0x70
 8011090:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011092:	441e      	add	r6, r3
 8011094:	ec51 0b18 	vmov	r0, r1, d8
 8011098:	2200      	movs	r2, #0
 801109a:	2300      	movs	r3, #0
 801109c:	f7ef fd14 	bl	8000ac8 <__aeabi_dcmpeq>
 80110a0:	b100      	cbz	r0, 80110a4 <_svfprintf_r+0x8dc>
 80110a2:	9620      	str	r6, [sp, #128]	; 0x80
 80110a4:	2230      	movs	r2, #48	; 0x30
 80110a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80110a8:	429e      	cmp	r6, r3
 80110aa:	d9d8      	bls.n	801105e <_svfprintf_r+0x896>
 80110ac:	1c59      	adds	r1, r3, #1
 80110ae:	9120      	str	r1, [sp, #128]	; 0x80
 80110b0:	701a      	strb	r2, [r3, #0]
 80110b2:	e7f8      	b.n	80110a6 <_svfprintf_r+0x8de>
 80110b4:	9b08      	ldr	r3, [sp, #32]
 80110b6:	2b46      	cmp	r3, #70	; 0x46
 80110b8:	f47f ae4b 	bne.w	8010d52 <_svfprintf_r+0x58a>
 80110bc:	f00b 0301 	and.w	r3, fp, #1
 80110c0:	2d00      	cmp	r5, #0
 80110c2:	ea43 0308 	orr.w	r3, r3, r8
 80110c6:	dd25      	ble.n	8011114 <_svfprintf_r+0x94c>
 80110c8:	b383      	cbz	r3, 801112c <_svfprintf_r+0x964>
 80110ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80110cc:	18eb      	adds	r3, r5, r3
 80110ce:	4498      	add	r8, r3
 80110d0:	2366      	movs	r3, #102	; 0x66
 80110d2:	9307      	str	r3, [sp, #28]
 80110d4:	e030      	b.n	8011138 <_svfprintf_r+0x970>
 80110d6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80110da:	f805 6f01 	strb.w	r6, [r5, #1]!
 80110de:	e66f      	b.n	8010dc0 <_svfprintf_r+0x5f8>
 80110e0:	b941      	cbnz	r1, 80110f4 <_svfprintf_r+0x92c>
 80110e2:	2230      	movs	r2, #48	; 0x30
 80110e4:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 80110e8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80110ec:	3330      	adds	r3, #48	; 0x30
 80110ee:	f802 3b01 	strb.w	r3, [r2], #1
 80110f2:	e671      	b.n	8010dd8 <_svfprintf_r+0x610>
 80110f4:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 80110f8:	e7f8      	b.n	80110ec <_svfprintf_r+0x924>
 80110fa:	9b05      	ldr	r3, [sp, #20]
 80110fc:	42ab      	cmp	r3, r5
 80110fe:	dd0d      	ble.n	801111c <_svfprintf_r+0x954>
 8011100:	9b05      	ldr	r3, [sp, #20]
 8011102:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011104:	2d00      	cmp	r5, #0
 8011106:	eb03 0802 	add.w	r8, r3, r2
 801110a:	dc0d      	bgt.n	8011128 <_svfprintf_r+0x960>
 801110c:	f1c5 0301 	rsb	r3, r5, #1
 8011110:	4498      	add	r8, r3
 8011112:	e009      	b.n	8011128 <_svfprintf_r+0x960>
 8011114:	b163      	cbz	r3, 8011130 <_svfprintf_r+0x968>
 8011116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011118:	3301      	adds	r3, #1
 801111a:	e7d8      	b.n	80110ce <_svfprintf_r+0x906>
 801111c:	f01b 0f01 	tst.w	fp, #1
 8011120:	d01d      	beq.n	801115e <_svfprintf_r+0x996>
 8011122:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011124:	eb05 0803 	add.w	r8, r5, r3
 8011128:	2367      	movs	r3, #103	; 0x67
 801112a:	e7d2      	b.n	80110d2 <_svfprintf_r+0x90a>
 801112c:	46a8      	mov	r8, r5
 801112e:	e7cf      	b.n	80110d0 <_svfprintf_r+0x908>
 8011130:	2366      	movs	r3, #102	; 0x66
 8011132:	9307      	str	r3, [sp, #28]
 8011134:	f04f 0801 	mov.w	r8, #1
 8011138:	f41b 6380 	ands.w	r3, fp, #1024	; 0x400
 801113c:	9308      	str	r3, [sp, #32]
 801113e:	d01f      	beq.n	8011180 <_svfprintf_r+0x9b8>
 8011140:	2600      	movs	r6, #0
 8011142:	2d00      	cmp	r5, #0
 8011144:	9608      	str	r6, [sp, #32]
 8011146:	f77f ae5c 	ble.w	8010e02 <_svfprintf_r+0x63a>
 801114a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801114c:	781b      	ldrb	r3, [r3, #0]
 801114e:	2bff      	cmp	r3, #255	; 0xff
 8011150:	d107      	bne.n	8011162 <_svfprintf_r+0x99a>
 8011152:	9b08      	ldr	r3, [sp, #32]
 8011154:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011156:	4433      	add	r3, r6
 8011158:	fb02 8803 	mla	r8, r2, r3, r8
 801115c:	e651      	b.n	8010e02 <_svfprintf_r+0x63a>
 801115e:	46a8      	mov	r8, r5
 8011160:	e7e2      	b.n	8011128 <_svfprintf_r+0x960>
 8011162:	42ab      	cmp	r3, r5
 8011164:	daf5      	bge.n	8011152 <_svfprintf_r+0x98a>
 8011166:	1aed      	subs	r5, r5, r3
 8011168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801116a:	785b      	ldrb	r3, [r3, #1]
 801116c:	b133      	cbz	r3, 801117c <_svfprintf_r+0x9b4>
 801116e:	9b08      	ldr	r3, [sp, #32]
 8011170:	3301      	adds	r3, #1
 8011172:	9308      	str	r3, [sp, #32]
 8011174:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011176:	3301      	adds	r3, #1
 8011178:	9309      	str	r3, [sp, #36]	; 0x24
 801117a:	e7e6      	b.n	801114a <_svfprintf_r+0x982>
 801117c:	3601      	adds	r6, #1
 801117e:	e7e4      	b.n	801114a <_svfprintf_r+0x982>
 8011180:	9e08      	ldr	r6, [sp, #32]
 8011182:	e63e      	b.n	8010e02 <_svfprintf_r+0x63a>
 8011184:	1d2b      	adds	r3, r5, #4
 8011186:	f01b 0f20 	tst.w	fp, #32
 801118a:	9306      	str	r3, [sp, #24]
 801118c:	d00a      	beq.n	80111a4 <_svfprintf_r+0x9dc>
 801118e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011190:	682b      	ldr	r3, [r5, #0]
 8011192:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011194:	17d2      	asrs	r2, r2, #31
 8011196:	e9c3 1200 	strd	r1, r2, [r3]
 801119a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801119c:	9d06      	ldr	r5, [sp, #24]
 801119e:	9303      	str	r3, [sp, #12]
 80111a0:	f7ff bb52 	b.w	8010848 <_svfprintf_r+0x80>
 80111a4:	f01b 0f10 	tst.w	fp, #16
 80111a8:	d003      	beq.n	80111b2 <_svfprintf_r+0x9ea>
 80111aa:	682b      	ldr	r3, [r5, #0]
 80111ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80111ae:	601a      	str	r2, [r3, #0]
 80111b0:	e7f3      	b.n	801119a <_svfprintf_r+0x9d2>
 80111b2:	f01b 0f40 	tst.w	fp, #64	; 0x40
 80111b6:	d003      	beq.n	80111c0 <_svfprintf_r+0x9f8>
 80111b8:	682b      	ldr	r3, [r5, #0]
 80111ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80111bc:	801a      	strh	r2, [r3, #0]
 80111be:	e7ec      	b.n	801119a <_svfprintf_r+0x9d2>
 80111c0:	f41b 7f00 	tst.w	fp, #512	; 0x200
 80111c4:	d0f1      	beq.n	80111aa <_svfprintf_r+0x9e2>
 80111c6:	682b      	ldr	r3, [r5, #0]
 80111c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80111ca:	701a      	strb	r2, [r3, #0]
 80111cc:	e7e5      	b.n	801119a <_svfprintf_r+0x9d2>
 80111ce:	f04b 0b10 	orr.w	fp, fp, #16
 80111d2:	f01b 0320 	ands.w	r3, fp, #32
 80111d6:	d020      	beq.n	801121a <_svfprintf_r+0xa52>
 80111d8:	3507      	adds	r5, #7
 80111da:	f025 0307 	bic.w	r3, r5, #7
 80111de:	461a      	mov	r2, r3
 80111e0:	685e      	ldr	r6, [r3, #4]
 80111e2:	f852 5b08 	ldr.w	r5, [r2], #8
 80111e6:	9206      	str	r2, [sp, #24]
 80111e8:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 80111ec:	2300      	movs	r3, #0
 80111ee:	2200      	movs	r2, #0
 80111f0:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 80111f4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80111f8:	f000 84a7 	beq.w	8011b4a <_svfprintf_r+0x1382>
 80111fc:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
 8011200:	9204      	str	r2, [sp, #16]
 8011202:	ea55 0206 	orrs.w	r2, r5, r6
 8011206:	f040 84a6 	bne.w	8011b56 <_svfprintf_r+0x138e>
 801120a:	f1b8 0f00 	cmp.w	r8, #0
 801120e:	f000 8107 	beq.w	8011420 <_svfprintf_r+0xc58>
 8011212:	2b01      	cmp	r3, #1
 8011214:	f040 84a2 	bne.w	8011b5c <_svfprintf_r+0x1394>
 8011218:	e0a3      	b.n	8011362 <_svfprintf_r+0xb9a>
 801121a:	462a      	mov	r2, r5
 801121c:	f01b 0610 	ands.w	r6, fp, #16
 8011220:	f852 5b04 	ldr.w	r5, [r2], #4
 8011224:	9206      	str	r2, [sp, #24]
 8011226:	d001      	beq.n	801122c <_svfprintf_r+0xa64>
 8011228:	461e      	mov	r6, r3
 801122a:	e7dd      	b.n	80111e8 <_svfprintf_r+0xa20>
 801122c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 8011230:	d001      	beq.n	8011236 <_svfprintf_r+0xa6e>
 8011232:	b2ad      	uxth	r5, r5
 8011234:	e7d8      	b.n	80111e8 <_svfprintf_r+0xa20>
 8011236:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 801123a:	d0d5      	beq.n	80111e8 <_svfprintf_r+0xa20>
 801123c:	b2ed      	uxtb	r5, r5
 801123e:	e7f3      	b.n	8011228 <_svfprintf_r+0xa60>
 8011240:	462b      	mov	r3, r5
 8011242:	2278      	movs	r2, #120	; 0x78
 8011244:	f853 5b04 	ldr.w	r5, [r3], #4
 8011248:	9306      	str	r3, [sp, #24]
 801124a:	f647 0330 	movw	r3, #30768	; 0x7830
 801124e:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 8011252:	4bab      	ldr	r3, [pc, #684]	; (8011500 <_svfprintf_r+0xd38>)
 8011254:	9316      	str	r3, [sp, #88]	; 0x58
 8011256:	2600      	movs	r6, #0
 8011258:	f04b 0b02 	orr.w	fp, fp, #2
 801125c:	2302      	movs	r3, #2
 801125e:	9207      	str	r2, [sp, #28]
 8011260:	e7c5      	b.n	80111ee <_svfprintf_r+0xa26>
 8011262:	462b      	mov	r3, r5
 8011264:	f1b8 3fff 	cmp.w	r8, #4294967295
 8011268:	f853 2b04 	ldr.w	r2, [r3], #4
 801126c:	9203      	str	r2, [sp, #12]
 801126e:	f04f 0500 	mov.w	r5, #0
 8011272:	9306      	str	r3, [sp, #24]
 8011274:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 8011278:	d010      	beq.n	801129c <_svfprintf_r+0xad4>
 801127a:	9803      	ldr	r0, [sp, #12]
 801127c:	4642      	mov	r2, r8
 801127e:	4629      	mov	r1, r5
 8011280:	f7ee ffa6 	bl	80001d0 <memchr>
 8011284:	9004      	str	r0, [sp, #16]
 8011286:	2800      	cmp	r0, #0
 8011288:	f000 80e0 	beq.w	801144c <_svfprintf_r+0xc84>
 801128c:	9a03      	ldr	r2, [sp, #12]
 801128e:	9504      	str	r5, [sp, #16]
 8011290:	eba0 0802 	sub.w	r8, r0, r2
 8011294:	462f      	mov	r7, r5
 8011296:	462e      	mov	r6, r5
 8011298:	9508      	str	r5, [sp, #32]
 801129a:	e5ba      	b.n	8010e12 <_svfprintf_r+0x64a>
 801129c:	9803      	ldr	r0, [sp, #12]
 801129e:	f7ee ffe7 	bl	8000270 <strlen>
 80112a2:	462f      	mov	r7, r5
 80112a4:	4680      	mov	r8, r0
 80112a6:	9504      	str	r5, [sp, #16]
 80112a8:	463e      	mov	r6, r7
 80112aa:	463b      	mov	r3, r7
 80112ac:	e460      	b.n	8010b70 <_svfprintf_r+0x3a8>
 80112ae:	f04b 0b10 	orr.w	fp, fp, #16
 80112b2:	f01b 0320 	ands.w	r3, fp, #32
 80112b6:	d009      	beq.n	80112cc <_svfprintf_r+0xb04>
 80112b8:	3507      	adds	r5, #7
 80112ba:	f025 0307 	bic.w	r3, r5, #7
 80112be:	461a      	mov	r2, r3
 80112c0:	685e      	ldr	r6, [r3, #4]
 80112c2:	f852 5b08 	ldr.w	r5, [r2], #8
 80112c6:	9206      	str	r2, [sp, #24]
 80112c8:	2301      	movs	r3, #1
 80112ca:	e790      	b.n	80111ee <_svfprintf_r+0xa26>
 80112cc:	462a      	mov	r2, r5
 80112ce:	f01b 0610 	ands.w	r6, fp, #16
 80112d2:	f852 5b04 	ldr.w	r5, [r2], #4
 80112d6:	9206      	str	r2, [sp, #24]
 80112d8:	d001      	beq.n	80112de <_svfprintf_r+0xb16>
 80112da:	461e      	mov	r6, r3
 80112dc:	e7f4      	b.n	80112c8 <_svfprintf_r+0xb00>
 80112de:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 80112e2:	d001      	beq.n	80112e8 <_svfprintf_r+0xb20>
 80112e4:	b2ad      	uxth	r5, r5
 80112e6:	e7ef      	b.n	80112c8 <_svfprintf_r+0xb00>
 80112e8:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 80112ec:	d0ec      	beq.n	80112c8 <_svfprintf_r+0xb00>
 80112ee:	b2ed      	uxtb	r5, r5
 80112f0:	e7f3      	b.n	80112da <_svfprintf_r+0xb12>
 80112f2:	4b84      	ldr	r3, [pc, #528]	; (8011504 <_svfprintf_r+0xd3c>)
 80112f4:	9316      	str	r3, [sp, #88]	; 0x58
 80112f6:	f01b 0320 	ands.w	r3, fp, #32
 80112fa:	d01b      	beq.n	8011334 <_svfprintf_r+0xb6c>
 80112fc:	3507      	adds	r5, #7
 80112fe:	f025 0307 	bic.w	r3, r5, #7
 8011302:	461a      	mov	r2, r3
 8011304:	685e      	ldr	r6, [r3, #4]
 8011306:	f852 5b08 	ldr.w	r5, [r2], #8
 801130a:	9206      	str	r2, [sp, #24]
 801130c:	f01b 0f01 	tst.w	fp, #1
 8011310:	d00a      	beq.n	8011328 <_svfprintf_r+0xb60>
 8011312:	ea55 0306 	orrs.w	r3, r5, r6
 8011316:	d007      	beq.n	8011328 <_svfprintf_r+0xb60>
 8011318:	2330      	movs	r3, #48	; 0x30
 801131a:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 801131e:	9b07      	ldr	r3, [sp, #28]
 8011320:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8011324:	f04b 0b02 	orr.w	fp, fp, #2
 8011328:	f42b 6b80 	bic.w	fp, fp, #1024	; 0x400
 801132c:	2302      	movs	r3, #2
 801132e:	e75e      	b.n	80111ee <_svfprintf_r+0xa26>
 8011330:	4b73      	ldr	r3, [pc, #460]	; (8011500 <_svfprintf_r+0xd38>)
 8011332:	e7df      	b.n	80112f4 <_svfprintf_r+0xb2c>
 8011334:	462a      	mov	r2, r5
 8011336:	f01b 0610 	ands.w	r6, fp, #16
 801133a:	f852 5b04 	ldr.w	r5, [r2], #4
 801133e:	9206      	str	r2, [sp, #24]
 8011340:	d001      	beq.n	8011346 <_svfprintf_r+0xb7e>
 8011342:	461e      	mov	r6, r3
 8011344:	e7e2      	b.n	801130c <_svfprintf_r+0xb44>
 8011346:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
 801134a:	d001      	beq.n	8011350 <_svfprintf_r+0xb88>
 801134c:	b2ad      	uxth	r5, r5
 801134e:	e7dd      	b.n	801130c <_svfprintf_r+0xb44>
 8011350:	f41b 7600 	ands.w	r6, fp, #512	; 0x200
 8011354:	d0da      	beq.n	801130c <_svfprintf_r+0xb44>
 8011356:	b2ed      	uxtb	r5, r5
 8011358:	e7f3      	b.n	8011342 <_svfprintf_r+0xb7a>
 801135a:	2d0a      	cmp	r5, #10
 801135c:	f176 0300 	sbcs.w	r3, r6, #0
 8011360:	d206      	bcs.n	8011370 <_svfprintf_r+0xba8>
 8011362:	3530      	adds	r5, #48	; 0x30
 8011364:	f88d 5137 	strb.w	r5, [sp, #311]	; 0x137
 8011368:	f20d 1337 	addw	r3, sp, #311	; 0x137
 801136c:	f000 bc16 	b.w	8011b9c <_svfprintf_r+0x13d4>
 8011370:	2300      	movs	r3, #0
 8011372:	9305      	str	r3, [sp, #20]
 8011374:	9b04      	ldr	r3, [sp, #16]
 8011376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801137a:	af4e      	add	r7, sp, #312	; 0x138
 801137c:	9308      	str	r3, [sp, #32]
 801137e:	220a      	movs	r2, #10
 8011380:	2300      	movs	r3, #0
 8011382:	4628      	mov	r0, r5
 8011384:	4631      	mov	r1, r6
 8011386:	f7ef fc5f 	bl	8000c48 <__aeabi_uldivmod>
 801138a:	1e7b      	subs	r3, r7, #1
 801138c:	9303      	str	r3, [sp, #12]
 801138e:	9b05      	ldr	r3, [sp, #20]
 8011390:	9010      	str	r0, [sp, #64]	; 0x40
 8011392:	3301      	adds	r3, #1
 8011394:	9305      	str	r3, [sp, #20]
 8011396:	9b08      	ldr	r3, [sp, #32]
 8011398:	3230      	adds	r2, #48	; 0x30
 801139a:	468b      	mov	fp, r1
 801139c:	f807 2c01 	strb.w	r2, [r7, #-1]
 80113a0:	b1d3      	cbz	r3, 80113d8 <_svfprintf_r+0xc10>
 80113a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113a4:	9a05      	ldr	r2, [sp, #20]
 80113a6:	781b      	ldrb	r3, [r3, #0]
 80113a8:	429a      	cmp	r2, r3
 80113aa:	d115      	bne.n	80113d8 <_svfprintf_r+0xc10>
 80113ac:	2aff      	cmp	r2, #255	; 0xff
 80113ae:	d013      	beq.n	80113d8 <_svfprintf_r+0xc10>
 80113b0:	2d0a      	cmp	r5, #10
 80113b2:	f176 0300 	sbcs.w	r3, r6, #0
 80113b6:	d30f      	bcc.n	80113d8 <_svfprintf_r+0xc10>
 80113b8:	9b03      	ldr	r3, [sp, #12]
 80113ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80113bc:	9914      	ldr	r1, [sp, #80]	; 0x50
 80113be:	1a9b      	subs	r3, r3, r2
 80113c0:	4618      	mov	r0, r3
 80113c2:	9303      	str	r3, [sp, #12]
 80113c4:	f000 fcf9 	bl	8011dba <strncpy>
 80113c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113ca:	785b      	ldrb	r3, [r3, #1]
 80113cc:	b11b      	cbz	r3, 80113d6 <_svfprintf_r+0xc0e>
 80113ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80113d0:	3301      	adds	r3, #1
 80113d2:	9309      	str	r3, [sp, #36]	; 0x24
 80113d4:	2300      	movs	r3, #0
 80113d6:	9305      	str	r3, [sp, #20]
 80113d8:	2d0a      	cmp	r5, #10
 80113da:	f176 0600 	sbcs.w	r6, r6, #0
 80113de:	d20b      	bcs.n	80113f8 <_svfprintf_r+0xc30>
 80113e0:	9b03      	ldr	r3, [sp, #12]
 80113e2:	f8dd b010 	ldr.w	fp, [sp, #16]
 80113e6:	aa4e      	add	r2, sp, #312	; 0x138
 80113e8:	4647      	mov	r7, r8
 80113ea:	eba2 0803 	sub.w	r8, r2, r3
 80113ee:	2300      	movs	r3, #0
 80113f0:	9304      	str	r3, [sp, #16]
 80113f2:	461e      	mov	r6, r3
 80113f4:	f7ff bbbc 	b.w	8010b70 <_svfprintf_r+0x3a8>
 80113f8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80113fa:	9f03      	ldr	r7, [sp, #12]
 80113fc:	465e      	mov	r6, fp
 80113fe:	e7be      	b.n	801137e <_svfprintf_r+0xbb6>
 8011400:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8011402:	f005 030f 	and.w	r3, r5, #15
 8011406:	092d      	lsrs	r5, r5, #4
 8011408:	5cd3      	ldrb	r3, [r2, r3]
 801140a:	9a03      	ldr	r2, [sp, #12]
 801140c:	ea45 7506 	orr.w	r5, r5, r6, lsl #28
 8011410:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8011414:	0936      	lsrs	r6, r6, #4
 8011416:	ea55 0306 	orrs.w	r3, r5, r6
 801141a:	9203      	str	r2, [sp, #12]
 801141c:	d1f0      	bne.n	8011400 <_svfprintf_r+0xc38>
 801141e:	e7df      	b.n	80113e0 <_svfprintf_r+0xc18>
 8011420:	b933      	cbnz	r3, 8011430 <_svfprintf_r+0xc68>
 8011422:	f01b 0f01 	tst.w	fp, #1
 8011426:	d003      	beq.n	8011430 <_svfprintf_r+0xc68>
 8011428:	2330      	movs	r3, #48	; 0x30
 801142a:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 801142e:	e79b      	b.n	8011368 <_svfprintf_r+0xba0>
 8011430:	ab4e      	add	r3, sp, #312	; 0x138
 8011432:	e3b3      	b.n	8011b9c <_svfprintf_r+0x13d4>
 8011434:	9b07      	ldr	r3, [sp, #28]
 8011436:	2b00      	cmp	r3, #0
 8011438:	f000 837c 	beq.w	8011b34 <_svfprintf_r+0x136c>
 801143c:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 8011440:	2300      	movs	r3, #0
 8011442:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 8011446:	9506      	str	r5, [sp, #24]
 8011448:	f7ff bb1f 	b.w	8010a8a <_svfprintf_r+0x2c2>
 801144c:	9f04      	ldr	r7, [sp, #16]
 801144e:	e72b      	b.n	80112a8 <_svfprintf_r+0xae0>
 8011450:	2010      	movs	r0, #16
 8011452:	4403      	add	r3, r0
 8011454:	2a07      	cmp	r2, #7
 8011456:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 801145a:	6060      	str	r0, [r4, #4]
 801145c:	dd08      	ble.n	8011470 <_svfprintf_r+0xca8>
 801145e:	aa22      	add	r2, sp, #136	; 0x88
 8011460:	4649      	mov	r1, r9
 8011462:	4650      	mov	r0, sl
 8011464:	f001 fef4 	bl	8013250 <__ssprint_r>
 8011468:	2800      	cmp	r0, #0
 801146a:	f040 8341 	bne.w	8011af0 <_svfprintf_r+0x1328>
 801146e:	a925      	add	r1, sp, #148	; 0x94
 8011470:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8011472:	3b10      	subs	r3, #16
 8011474:	9312      	str	r3, [sp, #72]	; 0x48
 8011476:	460c      	mov	r4, r1
 8011478:	e4e7      	b.n	8010e4a <_svfprintf_r+0x682>
 801147a:	460c      	mov	r4, r1
 801147c:	e502      	b.n	8010e84 <_svfprintf_r+0x6bc>
 801147e:	aa22      	add	r2, sp, #136	; 0x88
 8011480:	4649      	mov	r1, r9
 8011482:	4650      	mov	r0, sl
 8011484:	f001 fee4 	bl	8013250 <__ssprint_r>
 8011488:	2800      	cmp	r0, #0
 801148a:	f040 8331 	bne.w	8011af0 <_svfprintf_r+0x1328>
 801148e:	ac25      	add	r4, sp, #148	; 0x94
 8011490:	e50a      	b.n	8010ea8 <_svfprintf_r+0x6e0>
 8011492:	aa22      	add	r2, sp, #136	; 0x88
 8011494:	4649      	mov	r1, r9
 8011496:	4650      	mov	r0, sl
 8011498:	f001 feda 	bl	8013250 <__ssprint_r>
 801149c:	2800      	cmp	r0, #0
 801149e:	f040 8327 	bne.w	8011af0 <_svfprintf_r+0x1328>
 80114a2:	ac25      	add	r4, sp, #148	; 0x94
 80114a4:	e510      	b.n	8010ec8 <_svfprintf_r+0x700>
 80114a6:	2010      	movs	r0, #16
 80114a8:	4403      	add	r3, r0
 80114aa:	2a07      	cmp	r2, #7
 80114ac:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 80114b0:	6060      	str	r0, [r4, #4]
 80114b2:	dd08      	ble.n	80114c6 <_svfprintf_r+0xcfe>
 80114b4:	aa22      	add	r2, sp, #136	; 0x88
 80114b6:	4649      	mov	r1, r9
 80114b8:	4650      	mov	r0, sl
 80114ba:	f001 fec9 	bl	8013250 <__ssprint_r>
 80114be:	2800      	cmp	r0, #0
 80114c0:	f040 8316 	bne.w	8011af0 <_svfprintf_r+0x1328>
 80114c4:	a925      	add	r1, sp, #148	; 0x94
 80114c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80114c8:	3b10      	subs	r3, #16
 80114ca:	9312      	str	r3, [sp, #72]	; 0x48
 80114cc:	460c      	mov	r4, r1
 80114ce:	e504      	b.n	8010eda <_svfprintf_r+0x712>
 80114d0:	460c      	mov	r4, r1
 80114d2:	e51f      	b.n	8010f14 <_svfprintf_r+0x74c>
 80114d4:	2010      	movs	r0, #16
 80114d6:	4402      	add	r2, r0
 80114d8:	2b07      	cmp	r3, #7
 80114da:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80114de:	6060      	str	r0, [r4, #4]
 80114e0:	dd08      	ble.n	80114f4 <_svfprintf_r+0xd2c>
 80114e2:	aa22      	add	r2, sp, #136	; 0x88
 80114e4:	4649      	mov	r1, r9
 80114e6:	4650      	mov	r0, sl
 80114e8:	f001 feb2 	bl	8013250 <__ssprint_r>
 80114ec:	2800      	cmp	r0, #0
 80114ee:	f040 82ff 	bne.w	8011af0 <_svfprintf_r+0x1328>
 80114f2:	a925      	add	r1, sp, #148	; 0x94
 80114f4:	3f10      	subs	r7, #16
 80114f6:	460c      	mov	r4, r1
 80114f8:	e510      	b.n	8010f1c <_svfprintf_r+0x754>
 80114fa:	460c      	mov	r4, r1
 80114fc:	e536      	b.n	8010f6c <_svfprintf_r+0x7a4>
 80114fe:	bf00      	nop
 8011500:	08014a60 	.word	0x08014a60
 8011504:	08014a71 	.word	0x08014a71
 8011508:	9b07      	ldr	r3, [sp, #28]
 801150a:	2b65      	cmp	r3, #101	; 0x65
 801150c:	f340 823a 	ble.w	8011984 <_svfprintf_r+0x11bc>
 8011510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8011514:	2200      	movs	r2, #0
 8011516:	2300      	movs	r3, #0
 8011518:	f7ef fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 801151c:	2800      	cmp	r0, #0
 801151e:	d068      	beq.n	80115f2 <_svfprintf_r+0xe2a>
 8011520:	4b6d      	ldr	r3, [pc, #436]	; (80116d8 <_svfprintf_r+0xf10>)
 8011522:	6023      	str	r3, [r4, #0]
 8011524:	2301      	movs	r3, #1
 8011526:	441f      	add	r7, r3
 8011528:	6063      	str	r3, [r4, #4]
 801152a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801152c:	9724      	str	r7, [sp, #144]	; 0x90
 801152e:	3301      	adds	r3, #1
 8011530:	2b07      	cmp	r3, #7
 8011532:	9323      	str	r3, [sp, #140]	; 0x8c
 8011534:	dc37      	bgt.n	80115a6 <_svfprintf_r+0xdde>
 8011536:	3408      	adds	r4, #8
 8011538:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801153a:	9a05      	ldr	r2, [sp, #20]
 801153c:	4293      	cmp	r3, r2
 801153e:	db03      	blt.n	8011548 <_svfprintf_r+0xd80>
 8011540:	f01b 0f01 	tst.w	fp, #1
 8011544:	f43f ad23 	beq.w	8010f8e <_svfprintf_r+0x7c6>
 8011548:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801154a:	6023      	str	r3, [r4, #0]
 801154c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801154e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011550:	6063      	str	r3, [r4, #4]
 8011552:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011554:	4413      	add	r3, r2
 8011556:	9324      	str	r3, [sp, #144]	; 0x90
 8011558:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801155a:	3301      	adds	r3, #1
 801155c:	2b07      	cmp	r3, #7
 801155e:	9323      	str	r3, [sp, #140]	; 0x8c
 8011560:	dc2b      	bgt.n	80115ba <_svfprintf_r+0xdf2>
 8011562:	3408      	adds	r4, #8
 8011564:	9b05      	ldr	r3, [sp, #20]
 8011566:	1e5d      	subs	r5, r3, #1
 8011568:	2d00      	cmp	r5, #0
 801156a:	f77f ad10 	ble.w	8010f8e <_svfprintf_r+0x7c6>
 801156e:	4e5b      	ldr	r6, [pc, #364]	; (80116dc <_svfprintf_r+0xf14>)
 8011570:	2710      	movs	r7, #16
 8011572:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8011576:	2d10      	cmp	r5, #16
 8011578:	f103 0301 	add.w	r3, r3, #1
 801157c:	f104 0108 	add.w	r1, r4, #8
 8011580:	6026      	str	r6, [r4, #0]
 8011582:	dc24      	bgt.n	80115ce <_svfprintf_r+0xe06>
 8011584:	6065      	str	r5, [r4, #4]
 8011586:	4415      	add	r5, r2
 8011588:	9524      	str	r5, [sp, #144]	; 0x90
 801158a:	2b07      	cmp	r3, #7
 801158c:	9323      	str	r3, [sp, #140]	; 0x8c
 801158e:	f340 828e 	ble.w	8011aae <_svfprintf_r+0x12e6>
 8011592:	aa22      	add	r2, sp, #136	; 0x88
 8011594:	4649      	mov	r1, r9
 8011596:	4650      	mov	r0, sl
 8011598:	f001 fe5a 	bl	8013250 <__ssprint_r>
 801159c:	2800      	cmp	r0, #0
 801159e:	f040 82a7 	bne.w	8011af0 <_svfprintf_r+0x1328>
 80115a2:	ac25      	add	r4, sp, #148	; 0x94
 80115a4:	e4f3      	b.n	8010f8e <_svfprintf_r+0x7c6>
 80115a6:	aa22      	add	r2, sp, #136	; 0x88
 80115a8:	4649      	mov	r1, r9
 80115aa:	4650      	mov	r0, sl
 80115ac:	f001 fe50 	bl	8013250 <__ssprint_r>
 80115b0:	2800      	cmp	r0, #0
 80115b2:	f040 829d 	bne.w	8011af0 <_svfprintf_r+0x1328>
 80115b6:	ac25      	add	r4, sp, #148	; 0x94
 80115b8:	e7be      	b.n	8011538 <_svfprintf_r+0xd70>
 80115ba:	aa22      	add	r2, sp, #136	; 0x88
 80115bc:	4649      	mov	r1, r9
 80115be:	4650      	mov	r0, sl
 80115c0:	f001 fe46 	bl	8013250 <__ssprint_r>
 80115c4:	2800      	cmp	r0, #0
 80115c6:	f040 8293 	bne.w	8011af0 <_svfprintf_r+0x1328>
 80115ca:	ac25      	add	r4, sp, #148	; 0x94
 80115cc:	e7ca      	b.n	8011564 <_svfprintf_r+0xd9c>
 80115ce:	3210      	adds	r2, #16
 80115d0:	2b07      	cmp	r3, #7
 80115d2:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80115d6:	6067      	str	r7, [r4, #4]
 80115d8:	dd08      	ble.n	80115ec <_svfprintf_r+0xe24>
 80115da:	aa22      	add	r2, sp, #136	; 0x88
 80115dc:	4649      	mov	r1, r9
 80115de:	4650      	mov	r0, sl
 80115e0:	f001 fe36 	bl	8013250 <__ssprint_r>
 80115e4:	2800      	cmp	r0, #0
 80115e6:	f040 8283 	bne.w	8011af0 <_svfprintf_r+0x1328>
 80115ea:	a925      	add	r1, sp, #148	; 0x94
 80115ec:	3d10      	subs	r5, #16
 80115ee:	460c      	mov	r4, r1
 80115f0:	e7bf      	b.n	8011572 <_svfprintf_r+0xdaa>
 80115f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	dc73      	bgt.n	80116e0 <_svfprintf_r+0xf18>
 80115f8:	4b37      	ldr	r3, [pc, #220]	; (80116d8 <_svfprintf_r+0xf10>)
 80115fa:	6023      	str	r3, [r4, #0]
 80115fc:	2301      	movs	r3, #1
 80115fe:	441f      	add	r7, r3
 8011600:	6063      	str	r3, [r4, #4]
 8011602:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011604:	9724      	str	r7, [sp, #144]	; 0x90
 8011606:	3301      	adds	r3, #1
 8011608:	2b07      	cmp	r3, #7
 801160a:	9323      	str	r3, [sp, #140]	; 0x8c
 801160c:	dc3d      	bgt.n	801168a <_svfprintf_r+0xec2>
 801160e:	3408      	adds	r4, #8
 8011610:	9905      	ldr	r1, [sp, #20]
 8011612:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8011614:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8011616:	430b      	orrs	r3, r1
 8011618:	f00b 0101 	and.w	r1, fp, #1
 801161c:	430b      	orrs	r3, r1
 801161e:	f43f acb6 	beq.w	8010f8e <_svfprintf_r+0x7c6>
 8011622:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011624:	6023      	str	r3, [r4, #0]
 8011626:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8011628:	6063      	str	r3, [r4, #4]
 801162a:	441a      	add	r2, r3
 801162c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801162e:	9224      	str	r2, [sp, #144]	; 0x90
 8011630:	3301      	adds	r3, #1
 8011632:	2b07      	cmp	r3, #7
 8011634:	9323      	str	r3, [sp, #140]	; 0x8c
 8011636:	dc32      	bgt.n	801169e <_svfprintf_r+0xed6>
 8011638:	3408      	adds	r4, #8
 801163a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 801163c:	2d00      	cmp	r5, #0
 801163e:	da1b      	bge.n	8011678 <_svfprintf_r+0xeb0>
 8011640:	4e26      	ldr	r6, [pc, #152]	; (80116dc <_svfprintf_r+0xf14>)
 8011642:	426d      	negs	r5, r5
 8011644:	4623      	mov	r3, r4
 8011646:	2710      	movs	r7, #16
 8011648:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 801164c:	2d10      	cmp	r5, #16
 801164e:	f102 0201 	add.w	r2, r2, #1
 8011652:	f104 0408 	add.w	r4, r4, #8
 8011656:	601e      	str	r6, [r3, #0]
 8011658:	dc2b      	bgt.n	80116b2 <_svfprintf_r+0xeea>
 801165a:	605d      	str	r5, [r3, #4]
 801165c:	2a07      	cmp	r2, #7
 801165e:	440d      	add	r5, r1
 8011660:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 8011664:	dd08      	ble.n	8011678 <_svfprintf_r+0xeb0>
 8011666:	aa22      	add	r2, sp, #136	; 0x88
 8011668:	4649      	mov	r1, r9
 801166a:	4650      	mov	r0, sl
 801166c:	f001 fdf0 	bl	8013250 <__ssprint_r>
 8011670:	2800      	cmp	r0, #0
 8011672:	f040 823d 	bne.w	8011af0 <_svfprintf_r+0x1328>
 8011676:	ac25      	add	r4, sp, #148	; 0x94
 8011678:	9b03      	ldr	r3, [sp, #12]
 801167a:	6023      	str	r3, [r4, #0]
 801167c:	9b05      	ldr	r3, [sp, #20]
 801167e:	9a05      	ldr	r2, [sp, #20]
 8011680:	6063      	str	r3, [r4, #4]
 8011682:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011684:	4413      	add	r3, r2
 8011686:	9324      	str	r3, [sp, #144]	; 0x90
 8011688:	e47a      	b.n	8010f80 <_svfprintf_r+0x7b8>
 801168a:	aa22      	add	r2, sp, #136	; 0x88
 801168c:	4649      	mov	r1, r9
 801168e:	4650      	mov	r0, sl
 8011690:	f001 fdde 	bl	8013250 <__ssprint_r>
 8011694:	2800      	cmp	r0, #0
 8011696:	f040 822b 	bne.w	8011af0 <_svfprintf_r+0x1328>
 801169a:	ac25      	add	r4, sp, #148	; 0x94
 801169c:	e7b8      	b.n	8011610 <_svfprintf_r+0xe48>
 801169e:	aa22      	add	r2, sp, #136	; 0x88
 80116a0:	4649      	mov	r1, r9
 80116a2:	4650      	mov	r0, sl
 80116a4:	f001 fdd4 	bl	8013250 <__ssprint_r>
 80116a8:	2800      	cmp	r0, #0
 80116aa:	f040 8221 	bne.w	8011af0 <_svfprintf_r+0x1328>
 80116ae:	ac25      	add	r4, sp, #148	; 0x94
 80116b0:	e7c3      	b.n	801163a <_svfprintf_r+0xe72>
 80116b2:	3110      	adds	r1, #16
 80116b4:	2a07      	cmp	r2, #7
 80116b6:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 80116ba:	605f      	str	r7, [r3, #4]
 80116bc:	dd08      	ble.n	80116d0 <_svfprintf_r+0xf08>
 80116be:	aa22      	add	r2, sp, #136	; 0x88
 80116c0:	4649      	mov	r1, r9
 80116c2:	4650      	mov	r0, sl
 80116c4:	f001 fdc4 	bl	8013250 <__ssprint_r>
 80116c8:	2800      	cmp	r0, #0
 80116ca:	f040 8211 	bne.w	8011af0 <_svfprintf_r+0x1328>
 80116ce:	ac25      	add	r4, sp, #148	; 0x94
 80116d0:	3d10      	subs	r5, #16
 80116d2:	4623      	mov	r3, r4
 80116d4:	e7b8      	b.n	8011648 <_svfprintf_r+0xe80>
 80116d6:	bf00      	nop
 80116d8:	08014a82 	.word	0x08014a82
 80116dc:	08014a94 	.word	0x08014a94
 80116e0:	9b05      	ldr	r3, [sp, #20]
 80116e2:	42ab      	cmp	r3, r5
 80116e4:	bfa8      	it	ge
 80116e6:	462b      	movge	r3, r5
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	4698      	mov	r8, r3
 80116ec:	dd0a      	ble.n	8011704 <_svfprintf_r+0xf3c>
 80116ee:	9b03      	ldr	r3, [sp, #12]
 80116f0:	e9c4 3800 	strd	r3, r8, [r4]
 80116f4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80116f6:	3301      	adds	r3, #1
 80116f8:	4447      	add	r7, r8
 80116fa:	2b07      	cmp	r3, #7
 80116fc:	9724      	str	r7, [sp, #144]	; 0x90
 80116fe:	9323      	str	r3, [sp, #140]	; 0x8c
 8011700:	dc7b      	bgt.n	80117fa <_svfprintf_r+0x1032>
 8011702:	3408      	adds	r4, #8
 8011704:	f1b8 0f00 	cmp.w	r8, #0
 8011708:	bfac      	ite	ge
 801170a:	eba5 0708 	subge.w	r7, r5, r8
 801170e:	462f      	movlt	r7, r5
 8011710:	2f00      	cmp	r7, #0
 8011712:	dd1a      	ble.n	801174a <_svfprintf_r+0xf82>
 8011714:	f8df 8368 	ldr.w	r8, [pc, #872]	; 8011a80 <_svfprintf_r+0x12b8>
 8011718:	f8c4 8000 	str.w	r8, [r4]
 801171c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8011720:	2f10      	cmp	r7, #16
 8011722:	f103 0301 	add.w	r3, r3, #1
 8011726:	f104 0108 	add.w	r1, r4, #8
 801172a:	dc70      	bgt.n	801180e <_svfprintf_r+0x1046>
 801172c:	6067      	str	r7, [r4, #4]
 801172e:	2b07      	cmp	r3, #7
 8011730:	4417      	add	r7, r2
 8011732:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 8011736:	dd7d      	ble.n	8011834 <_svfprintf_r+0x106c>
 8011738:	aa22      	add	r2, sp, #136	; 0x88
 801173a:	4649      	mov	r1, r9
 801173c:	4650      	mov	r0, sl
 801173e:	f001 fd87 	bl	8013250 <__ssprint_r>
 8011742:	2800      	cmp	r0, #0
 8011744:	f040 81d4 	bne.w	8011af0 <_svfprintf_r+0x1328>
 8011748:	ac25      	add	r4, sp, #148	; 0x94
 801174a:	9b03      	ldr	r3, [sp, #12]
 801174c:	f41b 6f80 	tst.w	fp, #1024	; 0x400
 8011750:	441d      	add	r5, r3
 8011752:	d00a      	beq.n	801176a <_svfprintf_r+0xfa2>
 8011754:	9b08      	ldr	r3, [sp, #32]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d16e      	bne.n	8011838 <_svfprintf_r+0x1070>
 801175a:	2e00      	cmp	r6, #0
 801175c:	d16e      	bne.n	801183c <_svfprintf_r+0x1074>
 801175e:	9b03      	ldr	r3, [sp, #12]
 8011760:	9a05      	ldr	r2, [sp, #20]
 8011762:	4413      	add	r3, r2
 8011764:	429d      	cmp	r5, r3
 8011766:	bf28      	it	cs
 8011768:	461d      	movcs	r5, r3
 801176a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801176c:	9a05      	ldr	r2, [sp, #20]
 801176e:	4293      	cmp	r3, r2
 8011770:	db02      	blt.n	8011778 <_svfprintf_r+0xfb0>
 8011772:	f01b 0f01 	tst.w	fp, #1
 8011776:	d00e      	beq.n	8011796 <_svfprintf_r+0xfce>
 8011778:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801177a:	6023      	str	r3, [r4, #0]
 801177c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801177e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011780:	6063      	str	r3, [r4, #4]
 8011782:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011784:	4413      	add	r3, r2
 8011786:	9324      	str	r3, [sp, #144]	; 0x90
 8011788:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801178a:	3301      	adds	r3, #1
 801178c:	2b07      	cmp	r3, #7
 801178e:	9323      	str	r3, [sp, #140]	; 0x8c
 8011790:	f300 80d2 	bgt.w	8011938 <_svfprintf_r+0x1170>
 8011794:	3408      	adds	r4, #8
 8011796:	9b05      	ldr	r3, [sp, #20]
 8011798:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 801179a:	9a05      	ldr	r2, [sp, #20]
 801179c:	1b9e      	subs	r6, r3, r6
 801179e:	9b03      	ldr	r3, [sp, #12]
 80117a0:	4413      	add	r3, r2
 80117a2:	1b5b      	subs	r3, r3, r5
 80117a4:	429e      	cmp	r6, r3
 80117a6:	bfa8      	it	ge
 80117a8:	461e      	movge	r6, r3
 80117aa:	2e00      	cmp	r6, #0
 80117ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80117ae:	dd0a      	ble.n	80117c6 <_svfprintf_r+0xffe>
 80117b0:	4433      	add	r3, r6
 80117b2:	9324      	str	r3, [sp, #144]	; 0x90
 80117b4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80117b6:	3301      	adds	r3, #1
 80117b8:	2b07      	cmp	r3, #7
 80117ba:	e9c4 5600 	strd	r5, r6, [r4]
 80117be:	9323      	str	r3, [sp, #140]	; 0x8c
 80117c0:	f300 80c4 	bgt.w	801194c <_svfprintf_r+0x1184>
 80117c4:	3408      	adds	r4, #8
 80117c6:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 80117c8:	9b05      	ldr	r3, [sp, #20]
 80117ca:	2e00      	cmp	r6, #0
 80117cc:	eba3 0505 	sub.w	r5, r3, r5
 80117d0:	bfa8      	it	ge
 80117d2:	1bad      	subge	r5, r5, r6
 80117d4:	2d00      	cmp	r5, #0
 80117d6:	f77f abda 	ble.w	8010f8e <_svfprintf_r+0x7c6>
 80117da:	4ea9      	ldr	r6, [pc, #676]	; (8011a80 <_svfprintf_r+0x12b8>)
 80117dc:	2710      	movs	r7, #16
 80117de:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80117e2:	2d10      	cmp	r5, #16
 80117e4:	f103 0301 	add.w	r3, r3, #1
 80117e8:	f104 0108 	add.w	r1, r4, #8
 80117ec:	6026      	str	r6, [r4, #0]
 80117ee:	f300 80b7 	bgt.w	8011960 <_svfprintf_r+0x1198>
 80117f2:	442a      	add	r2, r5
 80117f4:	6065      	str	r5, [r4, #4]
 80117f6:	9224      	str	r2, [sp, #144]	; 0x90
 80117f8:	e6c7      	b.n	801158a <_svfprintf_r+0xdc2>
 80117fa:	aa22      	add	r2, sp, #136	; 0x88
 80117fc:	4649      	mov	r1, r9
 80117fe:	4650      	mov	r0, sl
 8011800:	f001 fd26 	bl	8013250 <__ssprint_r>
 8011804:	2800      	cmp	r0, #0
 8011806:	f040 8173 	bne.w	8011af0 <_svfprintf_r+0x1328>
 801180a:	ac25      	add	r4, sp, #148	; 0x94
 801180c:	e77a      	b.n	8011704 <_svfprintf_r+0xf3c>
 801180e:	2010      	movs	r0, #16
 8011810:	4402      	add	r2, r0
 8011812:	2b07      	cmp	r3, #7
 8011814:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8011818:	6060      	str	r0, [r4, #4]
 801181a:	dd08      	ble.n	801182e <_svfprintf_r+0x1066>
 801181c:	aa22      	add	r2, sp, #136	; 0x88
 801181e:	4649      	mov	r1, r9
 8011820:	4650      	mov	r0, sl
 8011822:	f001 fd15 	bl	8013250 <__ssprint_r>
 8011826:	2800      	cmp	r0, #0
 8011828:	f040 8162 	bne.w	8011af0 <_svfprintf_r+0x1328>
 801182c:	a925      	add	r1, sp, #148	; 0x94
 801182e:	3f10      	subs	r7, #16
 8011830:	460c      	mov	r4, r1
 8011832:	e771      	b.n	8011718 <_svfprintf_r+0xf50>
 8011834:	460c      	mov	r4, r1
 8011836:	e788      	b.n	801174a <_svfprintf_r+0xf82>
 8011838:	2e00      	cmp	r6, #0
 801183a:	d04d      	beq.n	80118d8 <_svfprintf_r+0x1110>
 801183c:	3e01      	subs	r6, #1
 801183e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011840:	6023      	str	r3, [r4, #0]
 8011842:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011844:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8011846:	6063      	str	r3, [r4, #4]
 8011848:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801184a:	4413      	add	r3, r2
 801184c:	9324      	str	r3, [sp, #144]	; 0x90
 801184e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011850:	3301      	adds	r3, #1
 8011852:	2b07      	cmp	r3, #7
 8011854:	9323      	str	r3, [sp, #140]	; 0x8c
 8011856:	dc46      	bgt.n	80118e6 <_svfprintf_r+0x111e>
 8011858:	3408      	adds	r4, #8
 801185a:	9b03      	ldr	r3, [sp, #12]
 801185c:	9a05      	ldr	r2, [sp, #20]
 801185e:	eb03 0802 	add.w	r8, r3, r2
 8011862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011864:	781b      	ldrb	r3, [r3, #0]
 8011866:	eba8 0805 	sub.w	r8, r8, r5
 801186a:	4598      	cmp	r8, r3
 801186c:	bfa8      	it	ge
 801186e:	4698      	movge	r8, r3
 8011870:	f1b8 0f00 	cmp.w	r8, #0
 8011874:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011876:	dd09      	ble.n	801188c <_svfprintf_r+0x10c4>
 8011878:	4443      	add	r3, r8
 801187a:	9324      	str	r3, [sp, #144]	; 0x90
 801187c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 801187e:	3301      	adds	r3, #1
 8011880:	2b07      	cmp	r3, #7
 8011882:	e9c4 5800 	strd	r5, r8, [r4]
 8011886:	9323      	str	r3, [sp, #140]	; 0x8c
 8011888:	dc37      	bgt.n	80118fa <_svfprintf_r+0x1132>
 801188a:	3408      	adds	r4, #8
 801188c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801188e:	781f      	ldrb	r7, [r3, #0]
 8011890:	f1b8 0f00 	cmp.w	r8, #0
 8011894:	bfa8      	it	ge
 8011896:	eba7 0708 	subge.w	r7, r7, r8
 801189a:	2f00      	cmp	r7, #0
 801189c:	dd18      	ble.n	80118d0 <_svfprintf_r+0x1108>
 801189e:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 80118a2:	4877      	ldr	r0, [pc, #476]	; (8011a80 <_svfprintf_r+0x12b8>)
 80118a4:	6020      	str	r0, [r4, #0]
 80118a6:	2f10      	cmp	r7, #16
 80118a8:	f103 0301 	add.w	r3, r3, #1
 80118ac:	f104 0108 	add.w	r1, r4, #8
 80118b0:	dc2d      	bgt.n	801190e <_svfprintf_r+0x1146>
 80118b2:	443a      	add	r2, r7
 80118b4:	2b07      	cmp	r3, #7
 80118b6:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 80118ba:	6067      	str	r7, [r4, #4]
 80118bc:	dd3a      	ble.n	8011934 <_svfprintf_r+0x116c>
 80118be:	aa22      	add	r2, sp, #136	; 0x88
 80118c0:	4649      	mov	r1, r9
 80118c2:	4650      	mov	r0, sl
 80118c4:	f001 fcc4 	bl	8013250 <__ssprint_r>
 80118c8:	2800      	cmp	r0, #0
 80118ca:	f040 8111 	bne.w	8011af0 <_svfprintf_r+0x1328>
 80118ce:	ac25      	add	r4, sp, #148	; 0x94
 80118d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118d2:	781b      	ldrb	r3, [r3, #0]
 80118d4:	441d      	add	r5, r3
 80118d6:	e73d      	b.n	8011754 <_svfprintf_r+0xf8c>
 80118d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118da:	3b01      	subs	r3, #1
 80118dc:	9309      	str	r3, [sp, #36]	; 0x24
 80118de:	9b08      	ldr	r3, [sp, #32]
 80118e0:	3b01      	subs	r3, #1
 80118e2:	9308      	str	r3, [sp, #32]
 80118e4:	e7ab      	b.n	801183e <_svfprintf_r+0x1076>
 80118e6:	aa22      	add	r2, sp, #136	; 0x88
 80118e8:	4649      	mov	r1, r9
 80118ea:	4650      	mov	r0, sl
 80118ec:	f001 fcb0 	bl	8013250 <__ssprint_r>
 80118f0:	2800      	cmp	r0, #0
 80118f2:	f040 80fd 	bne.w	8011af0 <_svfprintf_r+0x1328>
 80118f6:	ac25      	add	r4, sp, #148	; 0x94
 80118f8:	e7af      	b.n	801185a <_svfprintf_r+0x1092>
 80118fa:	aa22      	add	r2, sp, #136	; 0x88
 80118fc:	4649      	mov	r1, r9
 80118fe:	4650      	mov	r0, sl
 8011900:	f001 fca6 	bl	8013250 <__ssprint_r>
 8011904:	2800      	cmp	r0, #0
 8011906:	f040 80f3 	bne.w	8011af0 <_svfprintf_r+0x1328>
 801190a:	ac25      	add	r4, sp, #148	; 0x94
 801190c:	e7be      	b.n	801188c <_svfprintf_r+0x10c4>
 801190e:	2010      	movs	r0, #16
 8011910:	4402      	add	r2, r0
 8011912:	2b07      	cmp	r3, #7
 8011914:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8011918:	6060      	str	r0, [r4, #4]
 801191a:	dd08      	ble.n	801192e <_svfprintf_r+0x1166>
 801191c:	aa22      	add	r2, sp, #136	; 0x88
 801191e:	4649      	mov	r1, r9
 8011920:	4650      	mov	r0, sl
 8011922:	f001 fc95 	bl	8013250 <__ssprint_r>
 8011926:	2800      	cmp	r0, #0
 8011928:	f040 80e2 	bne.w	8011af0 <_svfprintf_r+0x1328>
 801192c:	a925      	add	r1, sp, #148	; 0x94
 801192e:	3f10      	subs	r7, #16
 8011930:	460c      	mov	r4, r1
 8011932:	e7b4      	b.n	801189e <_svfprintf_r+0x10d6>
 8011934:	460c      	mov	r4, r1
 8011936:	e7cb      	b.n	80118d0 <_svfprintf_r+0x1108>
 8011938:	aa22      	add	r2, sp, #136	; 0x88
 801193a:	4649      	mov	r1, r9
 801193c:	4650      	mov	r0, sl
 801193e:	f001 fc87 	bl	8013250 <__ssprint_r>
 8011942:	2800      	cmp	r0, #0
 8011944:	f040 80d4 	bne.w	8011af0 <_svfprintf_r+0x1328>
 8011948:	ac25      	add	r4, sp, #148	; 0x94
 801194a:	e724      	b.n	8011796 <_svfprintf_r+0xfce>
 801194c:	aa22      	add	r2, sp, #136	; 0x88
 801194e:	4649      	mov	r1, r9
 8011950:	4650      	mov	r0, sl
 8011952:	f001 fc7d 	bl	8013250 <__ssprint_r>
 8011956:	2800      	cmp	r0, #0
 8011958:	f040 80ca 	bne.w	8011af0 <_svfprintf_r+0x1328>
 801195c:	ac25      	add	r4, sp, #148	; 0x94
 801195e:	e732      	b.n	80117c6 <_svfprintf_r+0xffe>
 8011960:	3210      	adds	r2, #16
 8011962:	2b07      	cmp	r3, #7
 8011964:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8011968:	6067      	str	r7, [r4, #4]
 801196a:	dd08      	ble.n	801197e <_svfprintf_r+0x11b6>
 801196c:	aa22      	add	r2, sp, #136	; 0x88
 801196e:	4649      	mov	r1, r9
 8011970:	4650      	mov	r0, sl
 8011972:	f001 fc6d 	bl	8013250 <__ssprint_r>
 8011976:	2800      	cmp	r0, #0
 8011978:	f040 80ba 	bne.w	8011af0 <_svfprintf_r+0x1328>
 801197c:	a925      	add	r1, sp, #148	; 0x94
 801197e:	3d10      	subs	r5, #16
 8011980:	460c      	mov	r4, r1
 8011982:	e72c      	b.n	80117de <_svfprintf_r+0x1016>
 8011984:	9a05      	ldr	r2, [sp, #20]
 8011986:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011988:	2a01      	cmp	r2, #1
 801198a:	9a03      	ldr	r2, [sp, #12]
 801198c:	6022      	str	r2, [r4, #0]
 801198e:	f107 0701 	add.w	r7, r7, #1
 8011992:	f103 0301 	add.w	r3, r3, #1
 8011996:	f04f 0201 	mov.w	r2, #1
 801199a:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 801199e:	f104 0508 	add.w	r5, r4, #8
 80119a2:	6062      	str	r2, [r4, #4]
 80119a4:	dc02      	bgt.n	80119ac <_svfprintf_r+0x11e4>
 80119a6:	f01b 0f01 	tst.w	fp, #1
 80119aa:	d07b      	beq.n	8011aa4 <_svfprintf_r+0x12dc>
 80119ac:	2b07      	cmp	r3, #7
 80119ae:	dd08      	ble.n	80119c2 <_svfprintf_r+0x11fa>
 80119b0:	aa22      	add	r2, sp, #136	; 0x88
 80119b2:	4649      	mov	r1, r9
 80119b4:	4650      	mov	r0, sl
 80119b6:	f001 fc4b 	bl	8013250 <__ssprint_r>
 80119ba:	2800      	cmp	r0, #0
 80119bc:	f040 8098 	bne.w	8011af0 <_svfprintf_r+0x1328>
 80119c0:	ad25      	add	r5, sp, #148	; 0x94
 80119c2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80119c4:	602b      	str	r3, [r5, #0]
 80119c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80119c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80119ca:	606b      	str	r3, [r5, #4]
 80119cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80119ce:	4413      	add	r3, r2
 80119d0:	9324      	str	r3, [sp, #144]	; 0x90
 80119d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80119d4:	3301      	adds	r3, #1
 80119d6:	2b07      	cmp	r3, #7
 80119d8:	9323      	str	r3, [sp, #140]	; 0x8c
 80119da:	dc32      	bgt.n	8011a42 <_svfprintf_r+0x127a>
 80119dc:	3508      	adds	r5, #8
 80119de:	9b05      	ldr	r3, [sp, #20]
 80119e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80119e4:	1e5c      	subs	r4, r3, #1
 80119e6:	2200      	movs	r2, #0
 80119e8:	2300      	movs	r3, #0
 80119ea:	e9dd 7623 	ldrd	r7, r6, [sp, #140]	; 0x8c
 80119ee:	f7ef f86b 	bl	8000ac8 <__aeabi_dcmpeq>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	d12e      	bne.n	8011a54 <_svfprintf_r+0x128c>
 80119f6:	9b03      	ldr	r3, [sp, #12]
 80119f8:	3301      	adds	r3, #1
 80119fa:	e9c5 3400 	strd	r3, r4, [r5]
 80119fe:	9b05      	ldr	r3, [sp, #20]
 8011a00:	3701      	adds	r7, #1
 8011a02:	3e01      	subs	r6, #1
 8011a04:	441e      	add	r6, r3
 8011a06:	2f07      	cmp	r7, #7
 8011a08:	e9cd 7623 	strd	r7, r6, [sp, #140]	; 0x8c
 8011a0c:	dd4d      	ble.n	8011aaa <_svfprintf_r+0x12e2>
 8011a0e:	aa22      	add	r2, sp, #136	; 0x88
 8011a10:	4649      	mov	r1, r9
 8011a12:	4650      	mov	r0, sl
 8011a14:	f001 fc1c 	bl	8013250 <__ssprint_r>
 8011a18:	2800      	cmp	r0, #0
 8011a1a:	d169      	bne.n	8011af0 <_svfprintf_r+0x1328>
 8011a1c:	ad25      	add	r5, sp, #148	; 0x94
 8011a1e:	ab1e      	add	r3, sp, #120	; 0x78
 8011a20:	602b      	str	r3, [r5, #0]
 8011a22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011a24:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8011a26:	606b      	str	r3, [r5, #4]
 8011a28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011a2a:	4413      	add	r3, r2
 8011a2c:	9324      	str	r3, [sp, #144]	; 0x90
 8011a2e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8011a30:	3301      	adds	r3, #1
 8011a32:	2b07      	cmp	r3, #7
 8011a34:	9323      	str	r3, [sp, #140]	; 0x8c
 8011a36:	f73f adac 	bgt.w	8011592 <_svfprintf_r+0xdca>
 8011a3a:	f105 0408 	add.w	r4, r5, #8
 8011a3e:	f7ff baa6 	b.w	8010f8e <_svfprintf_r+0x7c6>
 8011a42:	aa22      	add	r2, sp, #136	; 0x88
 8011a44:	4649      	mov	r1, r9
 8011a46:	4650      	mov	r0, sl
 8011a48:	f001 fc02 	bl	8013250 <__ssprint_r>
 8011a4c:	2800      	cmp	r0, #0
 8011a4e:	d14f      	bne.n	8011af0 <_svfprintf_r+0x1328>
 8011a50:	ad25      	add	r5, sp, #148	; 0x94
 8011a52:	e7c4      	b.n	80119de <_svfprintf_r+0x1216>
 8011a54:	2c00      	cmp	r4, #0
 8011a56:	dde2      	ble.n	8011a1e <_svfprintf_r+0x1256>
 8011a58:	4e09      	ldr	r6, [pc, #36]	; (8011a80 <_svfprintf_r+0x12b8>)
 8011a5a:	2710      	movs	r7, #16
 8011a5c:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8011a60:	2c10      	cmp	r4, #16
 8011a62:	f103 0301 	add.w	r3, r3, #1
 8011a66:	f105 0108 	add.w	r1, r5, #8
 8011a6a:	602e      	str	r6, [r5, #0]
 8011a6c:	dc0a      	bgt.n	8011a84 <_svfprintf_r+0x12bc>
 8011a6e:	606c      	str	r4, [r5, #4]
 8011a70:	2b07      	cmp	r3, #7
 8011a72:	4414      	add	r4, r2
 8011a74:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 8011a78:	dcc9      	bgt.n	8011a0e <_svfprintf_r+0x1246>
 8011a7a:	460d      	mov	r5, r1
 8011a7c:	e7cf      	b.n	8011a1e <_svfprintf_r+0x1256>
 8011a7e:	bf00      	nop
 8011a80:	08014a94 	.word	0x08014a94
 8011a84:	3210      	adds	r2, #16
 8011a86:	2b07      	cmp	r3, #7
 8011a88:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8011a8c:	606f      	str	r7, [r5, #4]
 8011a8e:	dd06      	ble.n	8011a9e <_svfprintf_r+0x12d6>
 8011a90:	aa22      	add	r2, sp, #136	; 0x88
 8011a92:	4649      	mov	r1, r9
 8011a94:	4650      	mov	r0, sl
 8011a96:	f001 fbdb 	bl	8013250 <__ssprint_r>
 8011a9a:	bb48      	cbnz	r0, 8011af0 <_svfprintf_r+0x1328>
 8011a9c:	a925      	add	r1, sp, #148	; 0x94
 8011a9e:	3c10      	subs	r4, #16
 8011aa0:	460d      	mov	r5, r1
 8011aa2:	e7db      	b.n	8011a5c <_svfprintf_r+0x1294>
 8011aa4:	2b07      	cmp	r3, #7
 8011aa6:	ddba      	ble.n	8011a1e <_svfprintf_r+0x1256>
 8011aa8:	e7b1      	b.n	8011a0e <_svfprintf_r+0x1246>
 8011aaa:	3508      	adds	r5, #8
 8011aac:	e7b7      	b.n	8011a1e <_svfprintf_r+0x1256>
 8011aae:	460c      	mov	r4, r1
 8011ab0:	f7ff ba6d 	b.w	8010f8e <_svfprintf_r+0x7c6>
 8011ab4:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 8011ab8:	1a9d      	subs	r5, r3, r2
 8011aba:	2d00      	cmp	r5, #0
 8011abc:	f77f aa6b 	ble.w	8010f96 <_svfprintf_r+0x7ce>
 8011ac0:	4e37      	ldr	r6, [pc, #220]	; (8011ba0 <_svfprintf_r+0x13d8>)
 8011ac2:	2710      	movs	r7, #16
 8011ac4:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 8011ac8:	2d10      	cmp	r5, #16
 8011aca:	f103 0301 	add.w	r3, r3, #1
 8011ace:	6026      	str	r6, [r4, #0]
 8011ad0:	dc18      	bgt.n	8011b04 <_svfprintf_r+0x133c>
 8011ad2:	6065      	str	r5, [r4, #4]
 8011ad4:	2b07      	cmp	r3, #7
 8011ad6:	4415      	add	r5, r2
 8011ad8:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 8011adc:	f77f aa5b 	ble.w	8010f96 <_svfprintf_r+0x7ce>
 8011ae0:	aa22      	add	r2, sp, #136	; 0x88
 8011ae2:	4649      	mov	r1, r9
 8011ae4:	4650      	mov	r0, sl
 8011ae6:	f001 fbb3 	bl	8013250 <__ssprint_r>
 8011aea:	2800      	cmp	r0, #0
 8011aec:	f43f aa53 	beq.w	8010f96 <_svfprintf_r+0x7ce>
 8011af0:	9b04      	ldr	r3, [sp, #16]
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	f43f a874 	beq.w	8010be0 <_svfprintf_r+0x418>
 8011af8:	4619      	mov	r1, r3
 8011afa:	4650      	mov	r0, sl
 8011afc:	f7fe fb5e 	bl	80101bc <_free_r>
 8011b00:	f7ff b86e 	b.w	8010be0 <_svfprintf_r+0x418>
 8011b04:	3210      	adds	r2, #16
 8011b06:	2b07      	cmp	r3, #7
 8011b08:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 8011b0c:	6067      	str	r7, [r4, #4]
 8011b0e:	dc02      	bgt.n	8011b16 <_svfprintf_r+0x134e>
 8011b10:	3408      	adds	r4, #8
 8011b12:	3d10      	subs	r5, #16
 8011b14:	e7d6      	b.n	8011ac4 <_svfprintf_r+0x12fc>
 8011b16:	aa22      	add	r2, sp, #136	; 0x88
 8011b18:	4649      	mov	r1, r9
 8011b1a:	4650      	mov	r0, sl
 8011b1c:	f001 fb98 	bl	8013250 <__ssprint_r>
 8011b20:	2800      	cmp	r0, #0
 8011b22:	d1e5      	bne.n	8011af0 <_svfprintf_r+0x1328>
 8011b24:	ac25      	add	r4, sp, #148	; 0x94
 8011b26:	e7f4      	b.n	8011b12 <_svfprintf_r+0x134a>
 8011b28:	9904      	ldr	r1, [sp, #16]
 8011b2a:	4650      	mov	r0, sl
 8011b2c:	f7fe fb46 	bl	80101bc <_free_r>
 8011b30:	f7ff ba49 	b.w	8010fc6 <_svfprintf_r+0x7fe>
 8011b34:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	f43f a852 	beq.w	8010be0 <_svfprintf_r+0x418>
 8011b3c:	aa22      	add	r2, sp, #136	; 0x88
 8011b3e:	4649      	mov	r1, r9
 8011b40:	4650      	mov	r0, sl
 8011b42:	f001 fb85 	bl	8013250 <__ssprint_r>
 8011b46:	f7ff b84b 	b.w	8010be0 <_svfprintf_r+0x418>
 8011b4a:	ea55 0206 	orrs.w	r2, r5, r6
 8011b4e:	f8cd b010 	str.w	fp, [sp, #16]
 8011b52:	f43f ab5e 	beq.w	8011212 <_svfprintf_r+0xa4a>
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	f43f abff 	beq.w	801135a <_svfprintf_r+0xb92>
 8011b5c:	2b02      	cmp	r3, #2
 8011b5e:	ab4e      	add	r3, sp, #312	; 0x138
 8011b60:	9303      	str	r3, [sp, #12]
 8011b62:	f43f ac4d 	beq.w	8011400 <_svfprintf_r+0xc38>
 8011b66:	9a03      	ldr	r2, [sp, #12]
 8011b68:	f005 0307 	and.w	r3, r5, #7
 8011b6c:	4611      	mov	r1, r2
 8011b6e:	3330      	adds	r3, #48	; 0x30
 8011b70:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8011b74:	08ed      	lsrs	r5, r5, #3
 8011b76:	ea45 7546 	orr.w	r5, r5, r6, lsl #29
 8011b7a:	08f6      	lsrs	r6, r6, #3
 8011b7c:	9103      	str	r1, [sp, #12]
 8011b7e:	ea55 0106 	orrs.w	r1, r5, r6
 8011b82:	d1f0      	bne.n	8011b66 <_svfprintf_r+0x139e>
 8011b84:	9904      	ldr	r1, [sp, #16]
 8011b86:	07c9      	lsls	r1, r1, #31
 8011b88:	f57f ac2a 	bpl.w	80113e0 <_svfprintf_r+0xc18>
 8011b8c:	2b30      	cmp	r3, #48	; 0x30
 8011b8e:	f43f ac27 	beq.w	80113e0 <_svfprintf_r+0xc18>
 8011b92:	9903      	ldr	r1, [sp, #12]
 8011b94:	2330      	movs	r3, #48	; 0x30
 8011b96:	f801 3c01 	strb.w	r3, [r1, #-1]
 8011b9a:	1e93      	subs	r3, r2, #2
 8011b9c:	9303      	str	r3, [sp, #12]
 8011b9e:	e41f      	b.n	80113e0 <_svfprintf_r+0xc18>
 8011ba0:	08014a84 	.word	0x08014a84

08011ba4 <_fclose_r>:
 8011ba4:	b570      	push	{r4, r5, r6, lr}
 8011ba6:	4606      	mov	r6, r0
 8011ba8:	460c      	mov	r4, r1
 8011baa:	b911      	cbnz	r1, 8011bb2 <_fclose_r+0xe>
 8011bac:	2500      	movs	r5, #0
 8011bae:	4628      	mov	r0, r5
 8011bb0:	bd70      	pop	{r4, r5, r6, pc}
 8011bb2:	b118      	cbz	r0, 8011bbc <_fclose_r+0x18>
 8011bb4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011bb6:	b90b      	cbnz	r3, 8011bbc <_fclose_r+0x18>
 8011bb8:	f7fe f978 	bl	800feac <__sinit>
 8011bbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011bbe:	07d8      	lsls	r0, r3, #31
 8011bc0:	d405      	bmi.n	8011bce <_fclose_r+0x2a>
 8011bc2:	89a3      	ldrh	r3, [r4, #12]
 8011bc4:	0599      	lsls	r1, r3, #22
 8011bc6:	d402      	bmi.n	8011bce <_fclose_r+0x2a>
 8011bc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bca:	f7fe fa83 	bl	80100d4 <__retarget_lock_acquire_recursive>
 8011bce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bd2:	b93b      	cbnz	r3, 8011be4 <_fclose_r+0x40>
 8011bd4:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8011bd6:	f015 0501 	ands.w	r5, r5, #1
 8011bda:	d1e7      	bne.n	8011bac <_fclose_r+0x8>
 8011bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011bde:	f7fe fa7a 	bl	80100d6 <__retarget_lock_release_recursive>
 8011be2:	e7e4      	b.n	8011bae <_fclose_r+0xa>
 8011be4:	4621      	mov	r1, r4
 8011be6:	4630      	mov	r0, r6
 8011be8:	f000 f834 	bl	8011c54 <__sflush_r>
 8011bec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8011bee:	4605      	mov	r5, r0
 8011bf0:	b133      	cbz	r3, 8011c00 <_fclose_r+0x5c>
 8011bf2:	69e1      	ldr	r1, [r4, #28]
 8011bf4:	4630      	mov	r0, r6
 8011bf6:	4798      	blx	r3
 8011bf8:	2800      	cmp	r0, #0
 8011bfa:	bfb8      	it	lt
 8011bfc:	f04f 35ff 	movlt.w	r5, #4294967295
 8011c00:	89a3      	ldrh	r3, [r4, #12]
 8011c02:	061a      	lsls	r2, r3, #24
 8011c04:	d503      	bpl.n	8011c0e <_fclose_r+0x6a>
 8011c06:	6921      	ldr	r1, [r4, #16]
 8011c08:	4630      	mov	r0, r6
 8011c0a:	f7fe fad7 	bl	80101bc <_free_r>
 8011c0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011c10:	b141      	cbz	r1, 8011c24 <_fclose_r+0x80>
 8011c12:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8011c16:	4299      	cmp	r1, r3
 8011c18:	d002      	beq.n	8011c20 <_fclose_r+0x7c>
 8011c1a:	4630      	mov	r0, r6
 8011c1c:	f7fe face 	bl	80101bc <_free_r>
 8011c20:	2300      	movs	r3, #0
 8011c22:	6323      	str	r3, [r4, #48]	; 0x30
 8011c24:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8011c26:	b121      	cbz	r1, 8011c32 <_fclose_r+0x8e>
 8011c28:	4630      	mov	r0, r6
 8011c2a:	f7fe fac7 	bl	80101bc <_free_r>
 8011c2e:	2300      	movs	r3, #0
 8011c30:	6463      	str	r3, [r4, #68]	; 0x44
 8011c32:	f7fe f92f 	bl	800fe94 <__sfp_lock_acquire>
 8011c36:	2300      	movs	r3, #0
 8011c38:	81a3      	strh	r3, [r4, #12]
 8011c3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011c3c:	07db      	lsls	r3, r3, #31
 8011c3e:	d402      	bmi.n	8011c46 <_fclose_r+0xa2>
 8011c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c42:	f7fe fa48 	bl	80100d6 <__retarget_lock_release_recursive>
 8011c46:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011c48:	f7fe fa43 	bl	80100d2 <__retarget_lock_close_recursive>
 8011c4c:	f7fe f928 	bl	800fea0 <__sfp_lock_release>
 8011c50:	e7ad      	b.n	8011bae <_fclose_r+0xa>
	...

08011c54 <__sflush_r>:
 8011c54:	898b      	ldrh	r3, [r1, #12]
 8011c56:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011c5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c5e:	4605      	mov	r5, r0
 8011c60:	0718      	lsls	r0, r3, #28
 8011c62:	460c      	mov	r4, r1
 8011c64:	d45f      	bmi.n	8011d26 <__sflush_r+0xd2>
 8011c66:	684b      	ldr	r3, [r1, #4]
 8011c68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	818a      	strh	r2, [r1, #12]
 8011c70:	dc05      	bgt.n	8011c7e <__sflush_r+0x2a>
 8011c72:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	dc02      	bgt.n	8011c7e <__sflush_r+0x2a>
 8011c78:	2000      	movs	r0, #0
 8011c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011c80:	2e00      	cmp	r6, #0
 8011c82:	d0f9      	beq.n	8011c78 <__sflush_r+0x24>
 8011c84:	2300      	movs	r3, #0
 8011c86:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011c8a:	682f      	ldr	r7, [r5, #0]
 8011c8c:	69e1      	ldr	r1, [r4, #28]
 8011c8e:	602b      	str	r3, [r5, #0]
 8011c90:	d036      	beq.n	8011d00 <__sflush_r+0xac>
 8011c92:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8011c94:	89a3      	ldrh	r3, [r4, #12]
 8011c96:	075a      	lsls	r2, r3, #29
 8011c98:	d505      	bpl.n	8011ca6 <__sflush_r+0x52>
 8011c9a:	6863      	ldr	r3, [r4, #4]
 8011c9c:	1ac0      	subs	r0, r0, r3
 8011c9e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011ca0:	b10b      	cbz	r3, 8011ca6 <__sflush_r+0x52>
 8011ca2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011ca4:	1ac0      	subs	r0, r0, r3
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	4602      	mov	r2, r0
 8011caa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011cac:	69e1      	ldr	r1, [r4, #28]
 8011cae:	4628      	mov	r0, r5
 8011cb0:	47b0      	blx	r6
 8011cb2:	1c43      	adds	r3, r0, #1
 8011cb4:	89a3      	ldrh	r3, [r4, #12]
 8011cb6:	d106      	bne.n	8011cc6 <__sflush_r+0x72>
 8011cb8:	6829      	ldr	r1, [r5, #0]
 8011cba:	291d      	cmp	r1, #29
 8011cbc:	d82f      	bhi.n	8011d1e <__sflush_r+0xca>
 8011cbe:	4a2b      	ldr	r2, [pc, #172]	; (8011d6c <__sflush_r+0x118>)
 8011cc0:	410a      	asrs	r2, r1
 8011cc2:	07d6      	lsls	r6, r2, #31
 8011cc4:	d42b      	bmi.n	8011d1e <__sflush_r+0xca>
 8011cc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8011cca:	b21b      	sxth	r3, r3
 8011ccc:	2200      	movs	r2, #0
 8011cce:	6062      	str	r2, [r4, #4]
 8011cd0:	04d9      	lsls	r1, r3, #19
 8011cd2:	6922      	ldr	r2, [r4, #16]
 8011cd4:	81a3      	strh	r3, [r4, #12]
 8011cd6:	6022      	str	r2, [r4, #0]
 8011cd8:	d504      	bpl.n	8011ce4 <__sflush_r+0x90>
 8011cda:	1c42      	adds	r2, r0, #1
 8011cdc:	d101      	bne.n	8011ce2 <__sflush_r+0x8e>
 8011cde:	682b      	ldr	r3, [r5, #0]
 8011ce0:	b903      	cbnz	r3, 8011ce4 <__sflush_r+0x90>
 8011ce2:	6520      	str	r0, [r4, #80]	; 0x50
 8011ce4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8011ce6:	602f      	str	r7, [r5, #0]
 8011ce8:	2900      	cmp	r1, #0
 8011cea:	d0c5      	beq.n	8011c78 <__sflush_r+0x24>
 8011cec:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8011cf0:	4299      	cmp	r1, r3
 8011cf2:	d002      	beq.n	8011cfa <__sflush_r+0xa6>
 8011cf4:	4628      	mov	r0, r5
 8011cf6:	f7fe fa61 	bl	80101bc <_free_r>
 8011cfa:	2000      	movs	r0, #0
 8011cfc:	6320      	str	r0, [r4, #48]	; 0x30
 8011cfe:	e7bc      	b.n	8011c7a <__sflush_r+0x26>
 8011d00:	2301      	movs	r3, #1
 8011d02:	4628      	mov	r0, r5
 8011d04:	47b0      	blx	r6
 8011d06:	1c41      	adds	r1, r0, #1
 8011d08:	d1c4      	bne.n	8011c94 <__sflush_r+0x40>
 8011d0a:	682b      	ldr	r3, [r5, #0]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d0c1      	beq.n	8011c94 <__sflush_r+0x40>
 8011d10:	2b1d      	cmp	r3, #29
 8011d12:	d001      	beq.n	8011d18 <__sflush_r+0xc4>
 8011d14:	2b16      	cmp	r3, #22
 8011d16:	d101      	bne.n	8011d1c <__sflush_r+0xc8>
 8011d18:	602f      	str	r7, [r5, #0]
 8011d1a:	e7ad      	b.n	8011c78 <__sflush_r+0x24>
 8011d1c:	89a3      	ldrh	r3, [r4, #12]
 8011d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d22:	81a3      	strh	r3, [r4, #12]
 8011d24:	e7a9      	b.n	8011c7a <__sflush_r+0x26>
 8011d26:	690f      	ldr	r7, [r1, #16]
 8011d28:	2f00      	cmp	r7, #0
 8011d2a:	d0a5      	beq.n	8011c78 <__sflush_r+0x24>
 8011d2c:	079b      	lsls	r3, r3, #30
 8011d2e:	680e      	ldr	r6, [r1, #0]
 8011d30:	bf08      	it	eq
 8011d32:	694b      	ldreq	r3, [r1, #20]
 8011d34:	600f      	str	r7, [r1, #0]
 8011d36:	bf18      	it	ne
 8011d38:	2300      	movne	r3, #0
 8011d3a:	eba6 0807 	sub.w	r8, r6, r7
 8011d3e:	608b      	str	r3, [r1, #8]
 8011d40:	f1b8 0f00 	cmp.w	r8, #0
 8011d44:	dd98      	ble.n	8011c78 <__sflush_r+0x24>
 8011d46:	69e1      	ldr	r1, [r4, #28]
 8011d48:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011d4a:	4643      	mov	r3, r8
 8011d4c:	463a      	mov	r2, r7
 8011d4e:	4628      	mov	r0, r5
 8011d50:	47b0      	blx	r6
 8011d52:	2800      	cmp	r0, #0
 8011d54:	dc06      	bgt.n	8011d64 <__sflush_r+0x110>
 8011d56:	89a3      	ldrh	r3, [r4, #12]
 8011d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d5c:	81a3      	strh	r3, [r4, #12]
 8011d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8011d62:	e78a      	b.n	8011c7a <__sflush_r+0x26>
 8011d64:	4407      	add	r7, r0
 8011d66:	eba8 0800 	sub.w	r8, r8, r0
 8011d6a:	e7e9      	b.n	8011d40 <__sflush_r+0xec>
 8011d6c:	dfbffffe 	.word	0xdfbffffe

08011d70 <_fflush_r>:
 8011d70:	b538      	push	{r3, r4, r5, lr}
 8011d72:	460c      	mov	r4, r1
 8011d74:	4605      	mov	r5, r0
 8011d76:	b118      	cbz	r0, 8011d80 <_fflush_r+0x10>
 8011d78:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011d7a:	b90b      	cbnz	r3, 8011d80 <_fflush_r+0x10>
 8011d7c:	f7fe f896 	bl	800feac <__sinit>
 8011d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d84:	b1bb      	cbz	r3, 8011db6 <_fflush_r+0x46>
 8011d86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011d88:	07d0      	lsls	r0, r2, #31
 8011d8a:	d404      	bmi.n	8011d96 <_fflush_r+0x26>
 8011d8c:	0599      	lsls	r1, r3, #22
 8011d8e:	d402      	bmi.n	8011d96 <_fflush_r+0x26>
 8011d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011d92:	f7fe f99f 	bl	80100d4 <__retarget_lock_acquire_recursive>
 8011d96:	4628      	mov	r0, r5
 8011d98:	4621      	mov	r1, r4
 8011d9a:	f7ff ff5b 	bl	8011c54 <__sflush_r>
 8011d9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011da0:	07da      	lsls	r2, r3, #31
 8011da2:	4605      	mov	r5, r0
 8011da4:	d405      	bmi.n	8011db2 <_fflush_r+0x42>
 8011da6:	89a3      	ldrh	r3, [r4, #12]
 8011da8:	059b      	lsls	r3, r3, #22
 8011daa:	d402      	bmi.n	8011db2 <_fflush_r+0x42>
 8011dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011dae:	f7fe f992 	bl	80100d6 <__retarget_lock_release_recursive>
 8011db2:	4628      	mov	r0, r5
 8011db4:	bd38      	pop	{r3, r4, r5, pc}
 8011db6:	461d      	mov	r5, r3
 8011db8:	e7fb      	b.n	8011db2 <_fflush_r+0x42>

08011dba <strncpy>:
 8011dba:	b510      	push	{r4, lr}
 8011dbc:	3901      	subs	r1, #1
 8011dbe:	4603      	mov	r3, r0
 8011dc0:	b132      	cbz	r2, 8011dd0 <strncpy+0x16>
 8011dc2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011dc6:	f803 4b01 	strb.w	r4, [r3], #1
 8011dca:	3a01      	subs	r2, #1
 8011dcc:	2c00      	cmp	r4, #0
 8011dce:	d1f7      	bne.n	8011dc0 <strncpy+0x6>
 8011dd0:	441a      	add	r2, r3
 8011dd2:	2100      	movs	r1, #0
 8011dd4:	4293      	cmp	r3, r2
 8011dd6:	d100      	bne.n	8011dda <strncpy+0x20>
 8011dd8:	bd10      	pop	{r4, pc}
 8011dda:	f803 1b01 	strb.w	r1, [r3], #1
 8011dde:	e7f9      	b.n	8011dd4 <strncpy+0x1a>

08011de0 <_localeconv_r>:
 8011de0:	4800      	ldr	r0, [pc, #0]	; (8011de4 <_localeconv_r+0x4>)
 8011de2:	4770      	bx	lr
 8011de4:	20000780 	.word	0x20000780

08011de8 <_sbrk_r>:
 8011de8:	b538      	push	{r3, r4, r5, lr}
 8011dea:	4d06      	ldr	r5, [pc, #24]	; (8011e04 <_sbrk_r+0x1c>)
 8011dec:	2300      	movs	r3, #0
 8011dee:	4604      	mov	r4, r0
 8011df0:	4608      	mov	r0, r1
 8011df2:	602b      	str	r3, [r5, #0]
 8011df4:	f7f0 fdc2 	bl	800297c <_sbrk>
 8011df8:	1c43      	adds	r3, r0, #1
 8011dfa:	d102      	bne.n	8011e02 <_sbrk_r+0x1a>
 8011dfc:	682b      	ldr	r3, [r5, #0]
 8011dfe:	b103      	cbz	r3, 8011e02 <_sbrk_r+0x1a>
 8011e00:	6023      	str	r3, [r4, #0]
 8011e02:	bd38      	pop	{r3, r4, r5, pc}
 8011e04:	2000e778 	.word	0x2000e778

08011e08 <__libc_fini_array>:
 8011e08:	b538      	push	{r3, r4, r5, lr}
 8011e0a:	4d07      	ldr	r5, [pc, #28]	; (8011e28 <__libc_fini_array+0x20>)
 8011e0c:	4c07      	ldr	r4, [pc, #28]	; (8011e2c <__libc_fini_array+0x24>)
 8011e0e:	1b64      	subs	r4, r4, r5
 8011e10:	10a4      	asrs	r4, r4, #2
 8011e12:	b91c      	cbnz	r4, 8011e1c <__libc_fini_array+0x14>
 8011e14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e18:	f002 bd2e 	b.w	8014878 <_fini>
 8011e1c:	3c01      	subs	r4, #1
 8011e1e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8011e22:	4798      	blx	r3
 8011e24:	e7f5      	b.n	8011e12 <__libc_fini_array+0xa>
 8011e26:	bf00      	nop
 8011e28:	08014dec 	.word	0x08014dec
 8011e2c:	08014df0 	.word	0x08014df0

08011e30 <sysconf>:
 8011e30:	2808      	cmp	r0, #8
 8011e32:	b508      	push	{r3, lr}
 8011e34:	d006      	beq.n	8011e44 <sysconf+0x14>
 8011e36:	f7fe f921 	bl	801007c <__errno>
 8011e3a:	2316      	movs	r3, #22
 8011e3c:	6003      	str	r3, [r0, #0]
 8011e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8011e42:	bd08      	pop	{r3, pc}
 8011e44:	2080      	movs	r0, #128	; 0x80
 8011e46:	e7fc      	b.n	8011e42 <sysconf+0x12>

08011e48 <frexp>:
 8011e48:	b570      	push	{r4, r5, r6, lr}
 8011e4a:	2100      	movs	r1, #0
 8011e4c:	ec55 4b10 	vmov	r4, r5, d0
 8011e50:	6001      	str	r1, [r0, #0]
 8011e52:	4916      	ldr	r1, [pc, #88]	; (8011eac <frexp+0x64>)
 8011e54:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8011e58:	428a      	cmp	r2, r1
 8011e5a:	4606      	mov	r6, r0
 8011e5c:	462b      	mov	r3, r5
 8011e5e:	dc22      	bgt.n	8011ea6 <frexp+0x5e>
 8011e60:	ee10 1a10 	vmov	r1, s0
 8011e64:	4311      	orrs	r1, r2
 8011e66:	d01e      	beq.n	8011ea6 <frexp+0x5e>
 8011e68:	4911      	ldr	r1, [pc, #68]	; (8011eb0 <frexp+0x68>)
 8011e6a:	4029      	ands	r1, r5
 8011e6c:	b969      	cbnz	r1, 8011e8a <frexp+0x42>
 8011e6e:	4b11      	ldr	r3, [pc, #68]	; (8011eb4 <frexp+0x6c>)
 8011e70:	2200      	movs	r2, #0
 8011e72:	ee10 0a10 	vmov	r0, s0
 8011e76:	4629      	mov	r1, r5
 8011e78:	f7ee fbbe 	bl	80005f8 <__aeabi_dmul>
 8011e7c:	460b      	mov	r3, r1
 8011e7e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8011e82:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8011e86:	4604      	mov	r4, r0
 8011e88:	6031      	str	r1, [r6, #0]
 8011e8a:	6831      	ldr	r1, [r6, #0]
 8011e8c:	1512      	asrs	r2, r2, #20
 8011e8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011e92:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 8011e96:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011e9a:	4411      	add	r1, r2
 8011e9c:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8011ea0:	6031      	str	r1, [r6, #0]
 8011ea2:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8011ea6:	ec45 4b10 	vmov	d0, r4, r5
 8011eaa:	bd70      	pop	{r4, r5, r6, pc}
 8011eac:	7fefffff 	.word	0x7fefffff
 8011eb0:	7ff00000 	.word	0x7ff00000
 8011eb4:	43500000 	.word	0x43500000

08011eb8 <__register_exitproc>:
 8011eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ebc:	f8df a074 	ldr.w	sl, [pc, #116]	; 8011f34 <__register_exitproc+0x7c>
 8011ec0:	4606      	mov	r6, r0
 8011ec2:	f8da 0000 	ldr.w	r0, [sl]
 8011ec6:	4698      	mov	r8, r3
 8011ec8:	460f      	mov	r7, r1
 8011eca:	4691      	mov	r9, r2
 8011ecc:	f7fe f902 	bl	80100d4 <__retarget_lock_acquire_recursive>
 8011ed0:	4b16      	ldr	r3, [pc, #88]	; (8011f2c <__register_exitproc+0x74>)
 8011ed2:	681c      	ldr	r4, [r3, #0]
 8011ed4:	b90c      	cbnz	r4, 8011eda <__register_exitproc+0x22>
 8011ed6:	4c16      	ldr	r4, [pc, #88]	; (8011f30 <__register_exitproc+0x78>)
 8011ed8:	601c      	str	r4, [r3, #0]
 8011eda:	6865      	ldr	r5, [r4, #4]
 8011edc:	f8da 0000 	ldr.w	r0, [sl]
 8011ee0:	2d1f      	cmp	r5, #31
 8011ee2:	dd05      	ble.n	8011ef0 <__register_exitproc+0x38>
 8011ee4:	f7fe f8f7 	bl	80100d6 <__retarget_lock_release_recursive>
 8011ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8011eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ef0:	b19e      	cbz	r6, 8011f1a <__register_exitproc+0x62>
 8011ef2:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8011ef6:	2201      	movs	r2, #1
 8011ef8:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8011efc:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 8011f00:	40aa      	lsls	r2, r5
 8011f02:	4313      	orrs	r3, r2
 8011f04:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 8011f08:	2e02      	cmp	r6, #2
 8011f0a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8011f0e:	bf02      	ittt	eq
 8011f10:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 8011f14:	4313      	orreq	r3, r2
 8011f16:	f8c4 318c 	streq.w	r3, [r4, #396]	; 0x18c
 8011f1a:	1c6b      	adds	r3, r5, #1
 8011f1c:	3502      	adds	r5, #2
 8011f1e:	6063      	str	r3, [r4, #4]
 8011f20:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8011f24:	f7fe f8d7 	bl	80100d6 <__retarget_lock_release_recursive>
 8011f28:	2000      	movs	r0, #0
 8011f2a:	e7df      	b.n	8011eec <__register_exitproc+0x34>
 8011f2c:	2000e780 	.word	0x2000e780
 8011f30:	2000e7b8 	.word	0x2000e7b8
 8011f34:	2000027c 	.word	0x2000027c

08011f38 <quorem>:
 8011f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f3c:	6903      	ldr	r3, [r0, #16]
 8011f3e:	690c      	ldr	r4, [r1, #16]
 8011f40:	42a3      	cmp	r3, r4
 8011f42:	4607      	mov	r7, r0
 8011f44:	db7e      	blt.n	8012044 <quorem+0x10c>
 8011f46:	3c01      	subs	r4, #1
 8011f48:	f101 0814 	add.w	r8, r1, #20
 8011f4c:	f100 0514 	add.w	r5, r0, #20
 8011f50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f54:	9301      	str	r3, [sp, #4]
 8011f56:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011f5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f5e:	3301      	adds	r3, #1
 8011f60:	429a      	cmp	r2, r3
 8011f62:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011f66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011f6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8011f6e:	d331      	bcc.n	8011fd4 <quorem+0x9c>
 8011f70:	f04f 0e00 	mov.w	lr, #0
 8011f74:	4640      	mov	r0, r8
 8011f76:	46ac      	mov	ip, r5
 8011f78:	46f2      	mov	sl, lr
 8011f7a:	f850 2b04 	ldr.w	r2, [r0], #4
 8011f7e:	b293      	uxth	r3, r2
 8011f80:	fb06 e303 	mla	r3, r6, r3, lr
 8011f84:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011f88:	0c1a      	lsrs	r2, r3, #16
 8011f8a:	b29b      	uxth	r3, r3
 8011f8c:	ebaa 0303 	sub.w	r3, sl, r3
 8011f90:	f8dc a000 	ldr.w	sl, [ip]
 8011f94:	fa13 f38a 	uxtah	r3, r3, sl
 8011f98:	fb06 220e 	mla	r2, r6, lr, r2
 8011f9c:	9300      	str	r3, [sp, #0]
 8011f9e:	9b00      	ldr	r3, [sp, #0]
 8011fa0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011fa4:	b292      	uxth	r2, r2
 8011fa6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011faa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011fae:	f8bd 3000 	ldrh.w	r3, [sp]
 8011fb2:	4581      	cmp	r9, r0
 8011fb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011fb8:	f84c 3b04 	str.w	r3, [ip], #4
 8011fbc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011fc0:	d2db      	bcs.n	8011f7a <quorem+0x42>
 8011fc2:	f855 300b 	ldr.w	r3, [r5, fp]
 8011fc6:	b92b      	cbnz	r3, 8011fd4 <quorem+0x9c>
 8011fc8:	9b01      	ldr	r3, [sp, #4]
 8011fca:	3b04      	subs	r3, #4
 8011fcc:	429d      	cmp	r5, r3
 8011fce:	461a      	mov	r2, r3
 8011fd0:	d32c      	bcc.n	801202c <quorem+0xf4>
 8011fd2:	613c      	str	r4, [r7, #16]
 8011fd4:	4638      	mov	r0, r7
 8011fd6:	f001 f83b 	bl	8013050 <__mcmp>
 8011fda:	2800      	cmp	r0, #0
 8011fdc:	db22      	blt.n	8012024 <quorem+0xec>
 8011fde:	3601      	adds	r6, #1
 8011fe0:	4629      	mov	r1, r5
 8011fe2:	2000      	movs	r0, #0
 8011fe4:	f858 2b04 	ldr.w	r2, [r8], #4
 8011fe8:	f8d1 c000 	ldr.w	ip, [r1]
 8011fec:	b293      	uxth	r3, r2
 8011fee:	1ac3      	subs	r3, r0, r3
 8011ff0:	0c12      	lsrs	r2, r2, #16
 8011ff2:	fa13 f38c 	uxtah	r3, r3, ip
 8011ff6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8011ffa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011ffe:	b29b      	uxth	r3, r3
 8012000:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012004:	45c1      	cmp	r9, r8
 8012006:	f841 3b04 	str.w	r3, [r1], #4
 801200a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801200e:	d2e9      	bcs.n	8011fe4 <quorem+0xac>
 8012010:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012014:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012018:	b922      	cbnz	r2, 8012024 <quorem+0xec>
 801201a:	3b04      	subs	r3, #4
 801201c:	429d      	cmp	r5, r3
 801201e:	461a      	mov	r2, r3
 8012020:	d30a      	bcc.n	8012038 <quorem+0x100>
 8012022:	613c      	str	r4, [r7, #16]
 8012024:	4630      	mov	r0, r6
 8012026:	b003      	add	sp, #12
 8012028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801202c:	6812      	ldr	r2, [r2, #0]
 801202e:	3b04      	subs	r3, #4
 8012030:	2a00      	cmp	r2, #0
 8012032:	d1ce      	bne.n	8011fd2 <quorem+0x9a>
 8012034:	3c01      	subs	r4, #1
 8012036:	e7c9      	b.n	8011fcc <quorem+0x94>
 8012038:	6812      	ldr	r2, [r2, #0]
 801203a:	3b04      	subs	r3, #4
 801203c:	2a00      	cmp	r2, #0
 801203e:	d1f0      	bne.n	8012022 <quorem+0xea>
 8012040:	3c01      	subs	r4, #1
 8012042:	e7eb      	b.n	801201c <quorem+0xe4>
 8012044:	2000      	movs	r0, #0
 8012046:	e7ee      	b.n	8012026 <quorem+0xee>

08012048 <_dtoa_r>:
 8012048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801204c:	ed2d 8b04 	vpush	{d8-d9}
 8012050:	b093      	sub	sp, #76	; 0x4c
 8012052:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012056:	9107      	str	r1, [sp, #28]
 8012058:	6b81      	ldr	r1, [r0, #56]	; 0x38
 801205a:	9d20      	ldr	r5, [sp, #128]	; 0x80
 801205c:	920a      	str	r2, [sp, #40]	; 0x28
 801205e:	ec57 6b10 	vmov	r6, r7, d0
 8012062:	4604      	mov	r4, r0
 8012064:	930d      	str	r3, [sp, #52]	; 0x34
 8012066:	b141      	cbz	r1, 801207a <_dtoa_r+0x32>
 8012068:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801206a:	604a      	str	r2, [r1, #4]
 801206c:	2301      	movs	r3, #1
 801206e:	4093      	lsls	r3, r2
 8012070:	608b      	str	r3, [r1, #8]
 8012072:	f000 fde4 	bl	8012c3e <_Bfree>
 8012076:	2300      	movs	r3, #0
 8012078:	63a3      	str	r3, [r4, #56]	; 0x38
 801207a:	1e3b      	subs	r3, r7, #0
 801207c:	bfb9      	ittee	lt
 801207e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012082:	9303      	strlt	r3, [sp, #12]
 8012084:	2300      	movge	r3, #0
 8012086:	602b      	strge	r3, [r5, #0]
 8012088:	f8dd 800c 	ldr.w	r8, [sp, #12]
 801208c:	4ba2      	ldr	r3, [pc, #648]	; (8012318 <_dtoa_r+0x2d0>)
 801208e:	bfbc      	itt	lt
 8012090:	2201      	movlt	r2, #1
 8012092:	602a      	strlt	r2, [r5, #0]
 8012094:	ea33 0308 	bics.w	r3, r3, r8
 8012098:	d11b      	bne.n	80120d2 <_dtoa_r+0x8a>
 801209a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801209c:	f242 730f 	movw	r3, #9999	; 0x270f
 80120a0:	6013      	str	r3, [r2, #0]
 80120a2:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80120a6:	4333      	orrs	r3, r6
 80120a8:	f000 858f 	beq.w	8012bca <_dtoa_r+0xb82>
 80120ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120ae:	b90b      	cbnz	r3, 80120b4 <_dtoa_r+0x6c>
 80120b0:	4b9a      	ldr	r3, [pc, #616]	; (801231c <_dtoa_r+0x2d4>)
 80120b2:	e027      	b.n	8012104 <_dtoa_r+0xbc>
 80120b4:	4b99      	ldr	r3, [pc, #612]	; (801231c <_dtoa_r+0x2d4>)
 80120b6:	9300      	str	r3, [sp, #0]
 80120b8:	3303      	adds	r3, #3
 80120ba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80120bc:	6013      	str	r3, [r2, #0]
 80120be:	9800      	ldr	r0, [sp, #0]
 80120c0:	b013      	add	sp, #76	; 0x4c
 80120c2:	ecbd 8b04 	vpop	{d8-d9}
 80120c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80120ca:	4b95      	ldr	r3, [pc, #596]	; (8012320 <_dtoa_r+0x2d8>)
 80120cc:	9300      	str	r3, [sp, #0]
 80120ce:	3308      	adds	r3, #8
 80120d0:	e7f3      	b.n	80120ba <_dtoa_r+0x72>
 80120d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80120d6:	2200      	movs	r2, #0
 80120d8:	ec51 0b17 	vmov	r0, r1, d7
 80120dc:	eeb0 8a47 	vmov.f32	s16, s14
 80120e0:	eef0 8a67 	vmov.f32	s17, s15
 80120e4:	2300      	movs	r3, #0
 80120e6:	f7ee fcef 	bl	8000ac8 <__aeabi_dcmpeq>
 80120ea:	4681      	mov	r9, r0
 80120ec:	b160      	cbz	r0, 8012108 <_dtoa_r+0xc0>
 80120ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80120f0:	2301      	movs	r3, #1
 80120f2:	6013      	str	r3, [r2, #0]
 80120f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	f000 8564 	beq.w	8012bc4 <_dtoa_r+0xb7c>
 80120fc:	4b89      	ldr	r3, [pc, #548]	; (8012324 <_dtoa_r+0x2dc>)
 80120fe:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012100:	6013      	str	r3, [r2, #0]
 8012102:	3b01      	subs	r3, #1
 8012104:	9300      	str	r3, [sp, #0]
 8012106:	e7da      	b.n	80120be <_dtoa_r+0x76>
 8012108:	aa10      	add	r2, sp, #64	; 0x40
 801210a:	a911      	add	r1, sp, #68	; 0x44
 801210c:	4620      	mov	r0, r4
 801210e:	eeb0 0a48 	vmov.f32	s0, s16
 8012112:	eef0 0a68 	vmov.f32	s1, s17
 8012116:	f001 f841 	bl	801319c <__d2b>
 801211a:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801211e:	4682      	mov	sl, r0
 8012120:	2d00      	cmp	r5, #0
 8012122:	d07e      	beq.n	8012222 <_dtoa_r+0x1da>
 8012124:	ee18 3a90 	vmov	r3, s17
 8012128:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801212c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012130:	ec51 0b18 	vmov	r0, r1, d8
 8012134:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012138:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801213c:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8012140:	4619      	mov	r1, r3
 8012142:	2200      	movs	r2, #0
 8012144:	4b78      	ldr	r3, [pc, #480]	; (8012328 <_dtoa_r+0x2e0>)
 8012146:	f7ee f89f 	bl	8000288 <__aeabi_dsub>
 801214a:	a36d      	add	r3, pc, #436	; (adr r3, 8012300 <_dtoa_r+0x2b8>)
 801214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012150:	f7ee fa52 	bl	80005f8 <__aeabi_dmul>
 8012154:	a36c      	add	r3, pc, #432	; (adr r3, 8012308 <_dtoa_r+0x2c0>)
 8012156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801215a:	f7ee f897 	bl	800028c <__adddf3>
 801215e:	4606      	mov	r6, r0
 8012160:	4628      	mov	r0, r5
 8012162:	460f      	mov	r7, r1
 8012164:	f7ee f9de 	bl	8000524 <__aeabi_i2d>
 8012168:	a369      	add	r3, pc, #420	; (adr r3, 8012310 <_dtoa_r+0x2c8>)
 801216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801216e:	f7ee fa43 	bl	80005f8 <__aeabi_dmul>
 8012172:	4602      	mov	r2, r0
 8012174:	460b      	mov	r3, r1
 8012176:	4630      	mov	r0, r6
 8012178:	4639      	mov	r1, r7
 801217a:	f7ee f887 	bl	800028c <__adddf3>
 801217e:	4606      	mov	r6, r0
 8012180:	460f      	mov	r7, r1
 8012182:	f7ee fce9 	bl	8000b58 <__aeabi_d2iz>
 8012186:	2200      	movs	r2, #0
 8012188:	4683      	mov	fp, r0
 801218a:	2300      	movs	r3, #0
 801218c:	4630      	mov	r0, r6
 801218e:	4639      	mov	r1, r7
 8012190:	f7ee fca4 	bl	8000adc <__aeabi_dcmplt>
 8012194:	b148      	cbz	r0, 80121aa <_dtoa_r+0x162>
 8012196:	4658      	mov	r0, fp
 8012198:	f7ee f9c4 	bl	8000524 <__aeabi_i2d>
 801219c:	4632      	mov	r2, r6
 801219e:	463b      	mov	r3, r7
 80121a0:	f7ee fc92 	bl	8000ac8 <__aeabi_dcmpeq>
 80121a4:	b908      	cbnz	r0, 80121aa <_dtoa_r+0x162>
 80121a6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80121aa:	f1bb 0f16 	cmp.w	fp, #22
 80121ae:	d856      	bhi.n	801225e <_dtoa_r+0x216>
 80121b0:	4b5e      	ldr	r3, [pc, #376]	; (801232c <_dtoa_r+0x2e4>)
 80121b2:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80121b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ba:	ec51 0b18 	vmov	r0, r1, d8
 80121be:	f7ee fc8d 	bl	8000adc <__aeabi_dcmplt>
 80121c2:	2800      	cmp	r0, #0
 80121c4:	d04d      	beq.n	8012262 <_dtoa_r+0x21a>
 80121c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80121ca:	2300      	movs	r3, #0
 80121cc:	930c      	str	r3, [sp, #48]	; 0x30
 80121ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80121d0:	1b5b      	subs	r3, r3, r5
 80121d2:	1e5a      	subs	r2, r3, #1
 80121d4:	bf45      	ittet	mi
 80121d6:	f1c3 0301 	rsbmi	r3, r3, #1
 80121da:	9305      	strmi	r3, [sp, #20]
 80121dc:	2300      	movpl	r3, #0
 80121de:	2300      	movmi	r3, #0
 80121e0:	9206      	str	r2, [sp, #24]
 80121e2:	bf54      	ite	pl
 80121e4:	9305      	strpl	r3, [sp, #20]
 80121e6:	9306      	strmi	r3, [sp, #24]
 80121e8:	f1bb 0f00 	cmp.w	fp, #0
 80121ec:	db3b      	blt.n	8012266 <_dtoa_r+0x21e>
 80121ee:	9b06      	ldr	r3, [sp, #24]
 80121f0:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80121f4:	445b      	add	r3, fp
 80121f6:	9306      	str	r3, [sp, #24]
 80121f8:	2300      	movs	r3, #0
 80121fa:	9308      	str	r3, [sp, #32]
 80121fc:	9b07      	ldr	r3, [sp, #28]
 80121fe:	2b09      	cmp	r3, #9
 8012200:	d868      	bhi.n	80122d4 <_dtoa_r+0x28c>
 8012202:	2b05      	cmp	r3, #5
 8012204:	bfc4      	itt	gt
 8012206:	3b04      	subgt	r3, #4
 8012208:	9307      	strgt	r3, [sp, #28]
 801220a:	9b07      	ldr	r3, [sp, #28]
 801220c:	f1a3 0302 	sub.w	r3, r3, #2
 8012210:	bfcc      	ite	gt
 8012212:	2500      	movgt	r5, #0
 8012214:	2501      	movle	r5, #1
 8012216:	2b03      	cmp	r3, #3
 8012218:	d867      	bhi.n	80122ea <_dtoa_r+0x2a2>
 801221a:	e8df f003 	tbb	[pc, r3]
 801221e:	3b2e      	.short	0x3b2e
 8012220:	5939      	.short	0x5939
 8012222:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012226:	441d      	add	r5, r3
 8012228:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801222c:	2b20      	cmp	r3, #32
 801222e:	bfc1      	itttt	gt
 8012230:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012234:	fa08 f803 	lslgt.w	r8, r8, r3
 8012238:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801223c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012240:	bfd6      	itet	le
 8012242:	f1c3 0320 	rsble	r3, r3, #32
 8012246:	ea48 0003 	orrgt.w	r0, r8, r3
 801224a:	fa06 f003 	lslle.w	r0, r6, r3
 801224e:	f7ee f959 	bl	8000504 <__aeabi_ui2d>
 8012252:	2201      	movs	r2, #1
 8012254:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012258:	3d01      	subs	r5, #1
 801225a:	920e      	str	r2, [sp, #56]	; 0x38
 801225c:	e770      	b.n	8012140 <_dtoa_r+0xf8>
 801225e:	2301      	movs	r3, #1
 8012260:	e7b4      	b.n	80121cc <_dtoa_r+0x184>
 8012262:	900c      	str	r0, [sp, #48]	; 0x30
 8012264:	e7b3      	b.n	80121ce <_dtoa_r+0x186>
 8012266:	9b05      	ldr	r3, [sp, #20]
 8012268:	eba3 030b 	sub.w	r3, r3, fp
 801226c:	9305      	str	r3, [sp, #20]
 801226e:	f1cb 0300 	rsb	r3, fp, #0
 8012272:	9308      	str	r3, [sp, #32]
 8012274:	2300      	movs	r3, #0
 8012276:	930b      	str	r3, [sp, #44]	; 0x2c
 8012278:	e7c0      	b.n	80121fc <_dtoa_r+0x1b4>
 801227a:	2300      	movs	r3, #0
 801227c:	9309      	str	r3, [sp, #36]	; 0x24
 801227e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012280:	2b00      	cmp	r3, #0
 8012282:	dc35      	bgt.n	80122f0 <_dtoa_r+0x2a8>
 8012284:	2301      	movs	r3, #1
 8012286:	9301      	str	r3, [sp, #4]
 8012288:	9304      	str	r3, [sp, #16]
 801228a:	461a      	mov	r2, r3
 801228c:	920a      	str	r2, [sp, #40]	; 0x28
 801228e:	e00b      	b.n	80122a8 <_dtoa_r+0x260>
 8012290:	2301      	movs	r3, #1
 8012292:	e7f3      	b.n	801227c <_dtoa_r+0x234>
 8012294:	2300      	movs	r3, #0
 8012296:	9309      	str	r3, [sp, #36]	; 0x24
 8012298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801229a:	445b      	add	r3, fp
 801229c:	9301      	str	r3, [sp, #4]
 801229e:	3301      	adds	r3, #1
 80122a0:	2b01      	cmp	r3, #1
 80122a2:	9304      	str	r3, [sp, #16]
 80122a4:	bfb8      	it	lt
 80122a6:	2301      	movlt	r3, #1
 80122a8:	2100      	movs	r1, #0
 80122aa:	2204      	movs	r2, #4
 80122ac:	f102 0014 	add.w	r0, r2, #20
 80122b0:	4298      	cmp	r0, r3
 80122b2:	d921      	bls.n	80122f8 <_dtoa_r+0x2b0>
 80122b4:	63e1      	str	r1, [r4, #60]	; 0x3c
 80122b6:	4620      	mov	r0, r4
 80122b8:	f000 fc9c 	bl	8012bf4 <_Balloc>
 80122bc:	9000      	str	r0, [sp, #0]
 80122be:	2800      	cmp	r0, #0
 80122c0:	d13a      	bne.n	8012338 <_dtoa_r+0x2f0>
 80122c2:	4b1b      	ldr	r3, [pc, #108]	; (8012330 <_dtoa_r+0x2e8>)
 80122c4:	4602      	mov	r2, r0
 80122c6:	f240 11af 	movw	r1, #431	; 0x1af
 80122ca:	481a      	ldr	r0, [pc, #104]	; (8012334 <_dtoa_r+0x2ec>)
 80122cc:	f001 f85e 	bl	801338c <__assert_func>
 80122d0:	2301      	movs	r3, #1
 80122d2:	e7e0      	b.n	8012296 <_dtoa_r+0x24e>
 80122d4:	2501      	movs	r5, #1
 80122d6:	2300      	movs	r3, #0
 80122d8:	9307      	str	r3, [sp, #28]
 80122da:	9509      	str	r5, [sp, #36]	; 0x24
 80122dc:	f04f 33ff 	mov.w	r3, #4294967295
 80122e0:	9301      	str	r3, [sp, #4]
 80122e2:	9304      	str	r3, [sp, #16]
 80122e4:	2200      	movs	r2, #0
 80122e6:	2312      	movs	r3, #18
 80122e8:	e7d0      	b.n	801228c <_dtoa_r+0x244>
 80122ea:	2301      	movs	r3, #1
 80122ec:	9309      	str	r3, [sp, #36]	; 0x24
 80122ee:	e7f5      	b.n	80122dc <_dtoa_r+0x294>
 80122f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122f2:	9301      	str	r3, [sp, #4]
 80122f4:	9304      	str	r3, [sp, #16]
 80122f6:	e7d7      	b.n	80122a8 <_dtoa_r+0x260>
 80122f8:	3101      	adds	r1, #1
 80122fa:	0052      	lsls	r2, r2, #1
 80122fc:	e7d6      	b.n	80122ac <_dtoa_r+0x264>
 80122fe:	bf00      	nop
 8012300:	636f4361 	.word	0x636f4361
 8012304:	3fd287a7 	.word	0x3fd287a7
 8012308:	8b60c8b3 	.word	0x8b60c8b3
 801230c:	3fc68a28 	.word	0x3fc68a28
 8012310:	509f79fb 	.word	0x509f79fb
 8012314:	3fd34413 	.word	0x3fd34413
 8012318:	7ff00000 	.word	0x7ff00000
 801231c:	08014aad 	.word	0x08014aad
 8012320:	08014aa4 	.word	0x08014aa4
 8012324:	08014a83 	.word	0x08014a83
 8012328:	3ff80000 	.word	0x3ff80000
 801232c:	08014ba0 	.word	0x08014ba0
 8012330:	08014ab1 	.word	0x08014ab1
 8012334:	08014ac2 	.word	0x08014ac2
 8012338:	9b00      	ldr	r3, [sp, #0]
 801233a:	63a3      	str	r3, [r4, #56]	; 0x38
 801233c:	9b04      	ldr	r3, [sp, #16]
 801233e:	2b0e      	cmp	r3, #14
 8012340:	f200 80a8 	bhi.w	8012494 <_dtoa_r+0x44c>
 8012344:	2d00      	cmp	r5, #0
 8012346:	f000 80a5 	beq.w	8012494 <_dtoa_r+0x44c>
 801234a:	f1bb 0f00 	cmp.w	fp, #0
 801234e:	dd38      	ble.n	80123c2 <_dtoa_r+0x37a>
 8012350:	4bbf      	ldr	r3, [pc, #764]	; (8012650 <_dtoa_r+0x608>)
 8012352:	f00b 020f 	and.w	r2, fp, #15
 8012356:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801235a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801235e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012362:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012366:	d019      	beq.n	801239c <_dtoa_r+0x354>
 8012368:	4bba      	ldr	r3, [pc, #744]	; (8012654 <_dtoa_r+0x60c>)
 801236a:	ec51 0b18 	vmov	r0, r1, d8
 801236e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012372:	f7ee fa6b 	bl	800084c <__aeabi_ddiv>
 8012376:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801237a:	f008 080f 	and.w	r8, r8, #15
 801237e:	2503      	movs	r5, #3
 8012380:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8012654 <_dtoa_r+0x60c>
 8012384:	f1b8 0f00 	cmp.w	r8, #0
 8012388:	d10a      	bne.n	80123a0 <_dtoa_r+0x358>
 801238a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801238e:	4632      	mov	r2, r6
 8012390:	463b      	mov	r3, r7
 8012392:	f7ee fa5b 	bl	800084c <__aeabi_ddiv>
 8012396:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801239a:	e02b      	b.n	80123f4 <_dtoa_r+0x3ac>
 801239c:	2502      	movs	r5, #2
 801239e:	e7ef      	b.n	8012380 <_dtoa_r+0x338>
 80123a0:	f018 0f01 	tst.w	r8, #1
 80123a4:	d008      	beq.n	80123b8 <_dtoa_r+0x370>
 80123a6:	4630      	mov	r0, r6
 80123a8:	4639      	mov	r1, r7
 80123aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80123ae:	f7ee f923 	bl	80005f8 <__aeabi_dmul>
 80123b2:	3501      	adds	r5, #1
 80123b4:	4606      	mov	r6, r0
 80123b6:	460f      	mov	r7, r1
 80123b8:	ea4f 0868 	mov.w	r8, r8, asr #1
 80123bc:	f109 0908 	add.w	r9, r9, #8
 80123c0:	e7e0      	b.n	8012384 <_dtoa_r+0x33c>
 80123c2:	f000 809f 	beq.w	8012504 <_dtoa_r+0x4bc>
 80123c6:	f1cb 0600 	rsb	r6, fp, #0
 80123ca:	4ba1      	ldr	r3, [pc, #644]	; (8012650 <_dtoa_r+0x608>)
 80123cc:	4fa1      	ldr	r7, [pc, #644]	; (8012654 <_dtoa_r+0x60c>)
 80123ce:	f006 020f 	and.w	r2, r6, #15
 80123d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80123d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123da:	ec51 0b18 	vmov	r0, r1, d8
 80123de:	f7ee f90b 	bl	80005f8 <__aeabi_dmul>
 80123e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80123e6:	1136      	asrs	r6, r6, #4
 80123e8:	2300      	movs	r3, #0
 80123ea:	2502      	movs	r5, #2
 80123ec:	2e00      	cmp	r6, #0
 80123ee:	d17e      	bne.n	80124ee <_dtoa_r+0x4a6>
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d1d0      	bne.n	8012396 <_dtoa_r+0x34e>
 80123f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80123f6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	f000 8084 	beq.w	8012508 <_dtoa_r+0x4c0>
 8012400:	4b95      	ldr	r3, [pc, #596]	; (8012658 <_dtoa_r+0x610>)
 8012402:	2200      	movs	r2, #0
 8012404:	4640      	mov	r0, r8
 8012406:	4649      	mov	r1, r9
 8012408:	f7ee fb68 	bl	8000adc <__aeabi_dcmplt>
 801240c:	2800      	cmp	r0, #0
 801240e:	d07b      	beq.n	8012508 <_dtoa_r+0x4c0>
 8012410:	9b04      	ldr	r3, [sp, #16]
 8012412:	2b00      	cmp	r3, #0
 8012414:	d078      	beq.n	8012508 <_dtoa_r+0x4c0>
 8012416:	9b01      	ldr	r3, [sp, #4]
 8012418:	2b00      	cmp	r3, #0
 801241a:	dd39      	ble.n	8012490 <_dtoa_r+0x448>
 801241c:	4b8f      	ldr	r3, [pc, #572]	; (801265c <_dtoa_r+0x614>)
 801241e:	2200      	movs	r2, #0
 8012420:	4640      	mov	r0, r8
 8012422:	4649      	mov	r1, r9
 8012424:	f7ee f8e8 	bl	80005f8 <__aeabi_dmul>
 8012428:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801242c:	9e01      	ldr	r6, [sp, #4]
 801242e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8012432:	3501      	adds	r5, #1
 8012434:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8012438:	4628      	mov	r0, r5
 801243a:	f7ee f873 	bl	8000524 <__aeabi_i2d>
 801243e:	4642      	mov	r2, r8
 8012440:	464b      	mov	r3, r9
 8012442:	f7ee f8d9 	bl	80005f8 <__aeabi_dmul>
 8012446:	4b86      	ldr	r3, [pc, #536]	; (8012660 <_dtoa_r+0x618>)
 8012448:	2200      	movs	r2, #0
 801244a:	f7ed ff1f 	bl	800028c <__adddf3>
 801244e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012452:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012456:	9303      	str	r3, [sp, #12]
 8012458:	2e00      	cmp	r6, #0
 801245a:	d158      	bne.n	801250e <_dtoa_r+0x4c6>
 801245c:	4b81      	ldr	r3, [pc, #516]	; (8012664 <_dtoa_r+0x61c>)
 801245e:	2200      	movs	r2, #0
 8012460:	4640      	mov	r0, r8
 8012462:	4649      	mov	r1, r9
 8012464:	f7ed ff10 	bl	8000288 <__aeabi_dsub>
 8012468:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801246c:	4680      	mov	r8, r0
 801246e:	4689      	mov	r9, r1
 8012470:	f7ee fb52 	bl	8000b18 <__aeabi_dcmpgt>
 8012474:	2800      	cmp	r0, #0
 8012476:	f040 8295 	bne.w	80129a4 <_dtoa_r+0x95c>
 801247a:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801247e:	4640      	mov	r0, r8
 8012480:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012484:	4649      	mov	r1, r9
 8012486:	f7ee fb29 	bl	8000adc <__aeabi_dcmplt>
 801248a:	2800      	cmp	r0, #0
 801248c:	f040 8288 	bne.w	80129a0 <_dtoa_r+0x958>
 8012490:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012494:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012496:	2b00      	cmp	r3, #0
 8012498:	f2c0 814d 	blt.w	8012736 <_dtoa_r+0x6ee>
 801249c:	f1bb 0f0e 	cmp.w	fp, #14
 80124a0:	f300 8149 	bgt.w	8012736 <_dtoa_r+0x6ee>
 80124a4:	4b6a      	ldr	r3, [pc, #424]	; (8012650 <_dtoa_r+0x608>)
 80124a6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80124aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80124ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	f280 80db 	bge.w	801266c <_dtoa_r+0x624>
 80124b6:	9b04      	ldr	r3, [sp, #16]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	f300 80d7 	bgt.w	801266c <_dtoa_r+0x624>
 80124be:	f040 826e 	bne.w	801299e <_dtoa_r+0x956>
 80124c2:	4b68      	ldr	r3, [pc, #416]	; (8012664 <_dtoa_r+0x61c>)
 80124c4:	2200      	movs	r2, #0
 80124c6:	4640      	mov	r0, r8
 80124c8:	4649      	mov	r1, r9
 80124ca:	f7ee f895 	bl	80005f8 <__aeabi_dmul>
 80124ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80124d2:	f7ee fb17 	bl	8000b04 <__aeabi_dcmpge>
 80124d6:	9e04      	ldr	r6, [sp, #16]
 80124d8:	4637      	mov	r7, r6
 80124da:	2800      	cmp	r0, #0
 80124dc:	f040 8244 	bne.w	8012968 <_dtoa_r+0x920>
 80124e0:	9d00      	ldr	r5, [sp, #0]
 80124e2:	2331      	movs	r3, #49	; 0x31
 80124e4:	f805 3b01 	strb.w	r3, [r5], #1
 80124e8:	f10b 0b01 	add.w	fp, fp, #1
 80124ec:	e240      	b.n	8012970 <_dtoa_r+0x928>
 80124ee:	07f2      	lsls	r2, r6, #31
 80124f0:	d505      	bpl.n	80124fe <_dtoa_r+0x4b6>
 80124f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80124f6:	f7ee f87f 	bl	80005f8 <__aeabi_dmul>
 80124fa:	3501      	adds	r5, #1
 80124fc:	2301      	movs	r3, #1
 80124fe:	1076      	asrs	r6, r6, #1
 8012500:	3708      	adds	r7, #8
 8012502:	e773      	b.n	80123ec <_dtoa_r+0x3a4>
 8012504:	2502      	movs	r5, #2
 8012506:	e775      	b.n	80123f4 <_dtoa_r+0x3ac>
 8012508:	9e04      	ldr	r6, [sp, #16]
 801250a:	465f      	mov	r7, fp
 801250c:	e792      	b.n	8012434 <_dtoa_r+0x3ec>
 801250e:	9900      	ldr	r1, [sp, #0]
 8012510:	4b4f      	ldr	r3, [pc, #316]	; (8012650 <_dtoa_r+0x608>)
 8012512:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012516:	4431      	add	r1, r6
 8012518:	9102      	str	r1, [sp, #8]
 801251a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801251c:	eeb0 9a47 	vmov.f32	s18, s14
 8012520:	eef0 9a67 	vmov.f32	s19, s15
 8012524:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012528:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801252c:	2900      	cmp	r1, #0
 801252e:	d044      	beq.n	80125ba <_dtoa_r+0x572>
 8012530:	494d      	ldr	r1, [pc, #308]	; (8012668 <_dtoa_r+0x620>)
 8012532:	2000      	movs	r0, #0
 8012534:	f7ee f98a 	bl	800084c <__aeabi_ddiv>
 8012538:	ec53 2b19 	vmov	r2, r3, d9
 801253c:	f7ed fea4 	bl	8000288 <__aeabi_dsub>
 8012540:	9d00      	ldr	r5, [sp, #0]
 8012542:	ec41 0b19 	vmov	d9, r0, r1
 8012546:	4649      	mov	r1, r9
 8012548:	4640      	mov	r0, r8
 801254a:	f7ee fb05 	bl	8000b58 <__aeabi_d2iz>
 801254e:	4606      	mov	r6, r0
 8012550:	f7ed ffe8 	bl	8000524 <__aeabi_i2d>
 8012554:	4602      	mov	r2, r0
 8012556:	460b      	mov	r3, r1
 8012558:	4640      	mov	r0, r8
 801255a:	4649      	mov	r1, r9
 801255c:	f7ed fe94 	bl	8000288 <__aeabi_dsub>
 8012560:	3630      	adds	r6, #48	; 0x30
 8012562:	f805 6b01 	strb.w	r6, [r5], #1
 8012566:	ec53 2b19 	vmov	r2, r3, d9
 801256a:	4680      	mov	r8, r0
 801256c:	4689      	mov	r9, r1
 801256e:	f7ee fab5 	bl	8000adc <__aeabi_dcmplt>
 8012572:	2800      	cmp	r0, #0
 8012574:	d164      	bne.n	8012640 <_dtoa_r+0x5f8>
 8012576:	4642      	mov	r2, r8
 8012578:	464b      	mov	r3, r9
 801257a:	4937      	ldr	r1, [pc, #220]	; (8012658 <_dtoa_r+0x610>)
 801257c:	2000      	movs	r0, #0
 801257e:	f7ed fe83 	bl	8000288 <__aeabi_dsub>
 8012582:	ec53 2b19 	vmov	r2, r3, d9
 8012586:	f7ee faa9 	bl	8000adc <__aeabi_dcmplt>
 801258a:	2800      	cmp	r0, #0
 801258c:	f040 80b5 	bne.w	80126fa <_dtoa_r+0x6b2>
 8012590:	9b02      	ldr	r3, [sp, #8]
 8012592:	429d      	cmp	r5, r3
 8012594:	f43f af7c 	beq.w	8012490 <_dtoa_r+0x448>
 8012598:	4b30      	ldr	r3, [pc, #192]	; (801265c <_dtoa_r+0x614>)
 801259a:	ec51 0b19 	vmov	r0, r1, d9
 801259e:	2200      	movs	r2, #0
 80125a0:	f7ee f82a 	bl	80005f8 <__aeabi_dmul>
 80125a4:	4b2d      	ldr	r3, [pc, #180]	; (801265c <_dtoa_r+0x614>)
 80125a6:	ec41 0b19 	vmov	d9, r0, r1
 80125aa:	2200      	movs	r2, #0
 80125ac:	4640      	mov	r0, r8
 80125ae:	4649      	mov	r1, r9
 80125b0:	f7ee f822 	bl	80005f8 <__aeabi_dmul>
 80125b4:	4680      	mov	r8, r0
 80125b6:	4689      	mov	r9, r1
 80125b8:	e7c5      	b.n	8012546 <_dtoa_r+0x4fe>
 80125ba:	ec51 0b17 	vmov	r0, r1, d7
 80125be:	f7ee f81b 	bl	80005f8 <__aeabi_dmul>
 80125c2:	9b02      	ldr	r3, [sp, #8]
 80125c4:	9d00      	ldr	r5, [sp, #0]
 80125c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80125c8:	ec41 0b19 	vmov	d9, r0, r1
 80125cc:	4649      	mov	r1, r9
 80125ce:	4640      	mov	r0, r8
 80125d0:	f7ee fac2 	bl	8000b58 <__aeabi_d2iz>
 80125d4:	4606      	mov	r6, r0
 80125d6:	f7ed ffa5 	bl	8000524 <__aeabi_i2d>
 80125da:	3630      	adds	r6, #48	; 0x30
 80125dc:	4602      	mov	r2, r0
 80125de:	460b      	mov	r3, r1
 80125e0:	4640      	mov	r0, r8
 80125e2:	4649      	mov	r1, r9
 80125e4:	f7ed fe50 	bl	8000288 <__aeabi_dsub>
 80125e8:	f805 6b01 	strb.w	r6, [r5], #1
 80125ec:	9b02      	ldr	r3, [sp, #8]
 80125ee:	429d      	cmp	r5, r3
 80125f0:	4680      	mov	r8, r0
 80125f2:	4689      	mov	r9, r1
 80125f4:	f04f 0200 	mov.w	r2, #0
 80125f8:	d124      	bne.n	8012644 <_dtoa_r+0x5fc>
 80125fa:	4b1b      	ldr	r3, [pc, #108]	; (8012668 <_dtoa_r+0x620>)
 80125fc:	ec51 0b19 	vmov	r0, r1, d9
 8012600:	f7ed fe44 	bl	800028c <__adddf3>
 8012604:	4602      	mov	r2, r0
 8012606:	460b      	mov	r3, r1
 8012608:	4640      	mov	r0, r8
 801260a:	4649      	mov	r1, r9
 801260c:	f7ee fa84 	bl	8000b18 <__aeabi_dcmpgt>
 8012610:	2800      	cmp	r0, #0
 8012612:	d172      	bne.n	80126fa <_dtoa_r+0x6b2>
 8012614:	ec53 2b19 	vmov	r2, r3, d9
 8012618:	4913      	ldr	r1, [pc, #76]	; (8012668 <_dtoa_r+0x620>)
 801261a:	2000      	movs	r0, #0
 801261c:	f7ed fe34 	bl	8000288 <__aeabi_dsub>
 8012620:	4602      	mov	r2, r0
 8012622:	460b      	mov	r3, r1
 8012624:	4640      	mov	r0, r8
 8012626:	4649      	mov	r1, r9
 8012628:	f7ee fa58 	bl	8000adc <__aeabi_dcmplt>
 801262c:	2800      	cmp	r0, #0
 801262e:	f43f af2f 	beq.w	8012490 <_dtoa_r+0x448>
 8012632:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012634:	1e6b      	subs	r3, r5, #1
 8012636:	930f      	str	r3, [sp, #60]	; 0x3c
 8012638:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801263c:	2b30      	cmp	r3, #48	; 0x30
 801263e:	d0f8      	beq.n	8012632 <_dtoa_r+0x5ea>
 8012640:	46bb      	mov	fp, r7
 8012642:	e049      	b.n	80126d8 <_dtoa_r+0x690>
 8012644:	4b05      	ldr	r3, [pc, #20]	; (801265c <_dtoa_r+0x614>)
 8012646:	f7ed ffd7 	bl	80005f8 <__aeabi_dmul>
 801264a:	4680      	mov	r8, r0
 801264c:	4689      	mov	r9, r1
 801264e:	e7bd      	b.n	80125cc <_dtoa_r+0x584>
 8012650:	08014ba0 	.word	0x08014ba0
 8012654:	08014b78 	.word	0x08014b78
 8012658:	3ff00000 	.word	0x3ff00000
 801265c:	40240000 	.word	0x40240000
 8012660:	401c0000 	.word	0x401c0000
 8012664:	40140000 	.word	0x40140000
 8012668:	3fe00000 	.word	0x3fe00000
 801266c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012670:	9d00      	ldr	r5, [sp, #0]
 8012672:	4642      	mov	r2, r8
 8012674:	464b      	mov	r3, r9
 8012676:	4630      	mov	r0, r6
 8012678:	4639      	mov	r1, r7
 801267a:	f7ee f8e7 	bl	800084c <__aeabi_ddiv>
 801267e:	f7ee fa6b 	bl	8000b58 <__aeabi_d2iz>
 8012682:	9001      	str	r0, [sp, #4]
 8012684:	f7ed ff4e 	bl	8000524 <__aeabi_i2d>
 8012688:	4642      	mov	r2, r8
 801268a:	464b      	mov	r3, r9
 801268c:	f7ed ffb4 	bl	80005f8 <__aeabi_dmul>
 8012690:	4602      	mov	r2, r0
 8012692:	460b      	mov	r3, r1
 8012694:	4630      	mov	r0, r6
 8012696:	4639      	mov	r1, r7
 8012698:	f7ed fdf6 	bl	8000288 <__aeabi_dsub>
 801269c:	9e01      	ldr	r6, [sp, #4]
 801269e:	9f04      	ldr	r7, [sp, #16]
 80126a0:	3630      	adds	r6, #48	; 0x30
 80126a2:	f805 6b01 	strb.w	r6, [r5], #1
 80126a6:	9e00      	ldr	r6, [sp, #0]
 80126a8:	1bae      	subs	r6, r5, r6
 80126aa:	42b7      	cmp	r7, r6
 80126ac:	4602      	mov	r2, r0
 80126ae:	460b      	mov	r3, r1
 80126b0:	d134      	bne.n	801271c <_dtoa_r+0x6d4>
 80126b2:	f7ed fdeb 	bl	800028c <__adddf3>
 80126b6:	4642      	mov	r2, r8
 80126b8:	464b      	mov	r3, r9
 80126ba:	4606      	mov	r6, r0
 80126bc:	460f      	mov	r7, r1
 80126be:	f7ee fa2b 	bl	8000b18 <__aeabi_dcmpgt>
 80126c2:	b9c8      	cbnz	r0, 80126f8 <_dtoa_r+0x6b0>
 80126c4:	4642      	mov	r2, r8
 80126c6:	464b      	mov	r3, r9
 80126c8:	4630      	mov	r0, r6
 80126ca:	4639      	mov	r1, r7
 80126cc:	f7ee f9fc 	bl	8000ac8 <__aeabi_dcmpeq>
 80126d0:	b110      	cbz	r0, 80126d8 <_dtoa_r+0x690>
 80126d2:	9b01      	ldr	r3, [sp, #4]
 80126d4:	07db      	lsls	r3, r3, #31
 80126d6:	d40f      	bmi.n	80126f8 <_dtoa_r+0x6b0>
 80126d8:	4651      	mov	r1, sl
 80126da:	4620      	mov	r0, r4
 80126dc:	f000 faaf 	bl	8012c3e <_Bfree>
 80126e0:	2300      	movs	r3, #0
 80126e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80126e4:	702b      	strb	r3, [r5, #0]
 80126e6:	f10b 0301 	add.w	r3, fp, #1
 80126ea:	6013      	str	r3, [r2, #0]
 80126ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	f43f ace5 	beq.w	80120be <_dtoa_r+0x76>
 80126f4:	601d      	str	r5, [r3, #0]
 80126f6:	e4e2      	b.n	80120be <_dtoa_r+0x76>
 80126f8:	465f      	mov	r7, fp
 80126fa:	462b      	mov	r3, r5
 80126fc:	461d      	mov	r5, r3
 80126fe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012702:	2a39      	cmp	r2, #57	; 0x39
 8012704:	d106      	bne.n	8012714 <_dtoa_r+0x6cc>
 8012706:	9a00      	ldr	r2, [sp, #0]
 8012708:	429a      	cmp	r2, r3
 801270a:	d1f7      	bne.n	80126fc <_dtoa_r+0x6b4>
 801270c:	9900      	ldr	r1, [sp, #0]
 801270e:	2230      	movs	r2, #48	; 0x30
 8012710:	3701      	adds	r7, #1
 8012712:	700a      	strb	r2, [r1, #0]
 8012714:	781a      	ldrb	r2, [r3, #0]
 8012716:	3201      	adds	r2, #1
 8012718:	701a      	strb	r2, [r3, #0]
 801271a:	e791      	b.n	8012640 <_dtoa_r+0x5f8>
 801271c:	4ba3      	ldr	r3, [pc, #652]	; (80129ac <_dtoa_r+0x964>)
 801271e:	2200      	movs	r2, #0
 8012720:	f7ed ff6a 	bl	80005f8 <__aeabi_dmul>
 8012724:	2200      	movs	r2, #0
 8012726:	2300      	movs	r3, #0
 8012728:	4606      	mov	r6, r0
 801272a:	460f      	mov	r7, r1
 801272c:	f7ee f9cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8012730:	2800      	cmp	r0, #0
 8012732:	d09e      	beq.n	8012672 <_dtoa_r+0x62a>
 8012734:	e7d0      	b.n	80126d8 <_dtoa_r+0x690>
 8012736:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012738:	2a00      	cmp	r2, #0
 801273a:	f000 80ca 	beq.w	80128d2 <_dtoa_r+0x88a>
 801273e:	9a07      	ldr	r2, [sp, #28]
 8012740:	2a01      	cmp	r2, #1
 8012742:	f300 80ad 	bgt.w	80128a0 <_dtoa_r+0x858>
 8012746:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012748:	2a00      	cmp	r2, #0
 801274a:	f000 80a5 	beq.w	8012898 <_dtoa_r+0x850>
 801274e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012752:	9e08      	ldr	r6, [sp, #32]
 8012754:	9d05      	ldr	r5, [sp, #20]
 8012756:	9a05      	ldr	r2, [sp, #20]
 8012758:	441a      	add	r2, r3
 801275a:	9205      	str	r2, [sp, #20]
 801275c:	9a06      	ldr	r2, [sp, #24]
 801275e:	2101      	movs	r1, #1
 8012760:	441a      	add	r2, r3
 8012762:	4620      	mov	r0, r4
 8012764:	9206      	str	r2, [sp, #24]
 8012766:	f000 fb07 	bl	8012d78 <__i2b>
 801276a:	4607      	mov	r7, r0
 801276c:	b165      	cbz	r5, 8012788 <_dtoa_r+0x740>
 801276e:	9b06      	ldr	r3, [sp, #24]
 8012770:	2b00      	cmp	r3, #0
 8012772:	dd09      	ble.n	8012788 <_dtoa_r+0x740>
 8012774:	42ab      	cmp	r3, r5
 8012776:	9a05      	ldr	r2, [sp, #20]
 8012778:	bfa8      	it	ge
 801277a:	462b      	movge	r3, r5
 801277c:	1ad2      	subs	r2, r2, r3
 801277e:	9205      	str	r2, [sp, #20]
 8012780:	9a06      	ldr	r2, [sp, #24]
 8012782:	1aed      	subs	r5, r5, r3
 8012784:	1ad3      	subs	r3, r2, r3
 8012786:	9306      	str	r3, [sp, #24]
 8012788:	9b08      	ldr	r3, [sp, #32]
 801278a:	b1f3      	cbz	r3, 80127ca <_dtoa_r+0x782>
 801278c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801278e:	2b00      	cmp	r3, #0
 8012790:	f000 80a3 	beq.w	80128da <_dtoa_r+0x892>
 8012794:	2e00      	cmp	r6, #0
 8012796:	dd10      	ble.n	80127ba <_dtoa_r+0x772>
 8012798:	4639      	mov	r1, r7
 801279a:	4632      	mov	r2, r6
 801279c:	4620      	mov	r0, r4
 801279e:	f000 fbab 	bl	8012ef8 <__pow5mult>
 80127a2:	4652      	mov	r2, sl
 80127a4:	4601      	mov	r1, r0
 80127a6:	4607      	mov	r7, r0
 80127a8:	4620      	mov	r0, r4
 80127aa:	f000 fafb 	bl	8012da4 <__multiply>
 80127ae:	4651      	mov	r1, sl
 80127b0:	4680      	mov	r8, r0
 80127b2:	4620      	mov	r0, r4
 80127b4:	f000 fa43 	bl	8012c3e <_Bfree>
 80127b8:	46c2      	mov	sl, r8
 80127ba:	9b08      	ldr	r3, [sp, #32]
 80127bc:	1b9a      	subs	r2, r3, r6
 80127be:	d004      	beq.n	80127ca <_dtoa_r+0x782>
 80127c0:	4651      	mov	r1, sl
 80127c2:	4620      	mov	r0, r4
 80127c4:	f000 fb98 	bl	8012ef8 <__pow5mult>
 80127c8:	4682      	mov	sl, r0
 80127ca:	2101      	movs	r1, #1
 80127cc:	4620      	mov	r0, r4
 80127ce:	f000 fad3 	bl	8012d78 <__i2b>
 80127d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	4606      	mov	r6, r0
 80127d8:	f340 8081 	ble.w	80128de <_dtoa_r+0x896>
 80127dc:	461a      	mov	r2, r3
 80127de:	4601      	mov	r1, r0
 80127e0:	4620      	mov	r0, r4
 80127e2:	f000 fb89 	bl	8012ef8 <__pow5mult>
 80127e6:	9b07      	ldr	r3, [sp, #28]
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	4606      	mov	r6, r0
 80127ec:	dd7a      	ble.n	80128e4 <_dtoa_r+0x89c>
 80127ee:	f04f 0800 	mov.w	r8, #0
 80127f2:	6933      	ldr	r3, [r6, #16]
 80127f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80127f8:	6918      	ldr	r0, [r3, #16]
 80127fa:	f000 fa6f 	bl	8012cdc <__hi0bits>
 80127fe:	f1c0 0020 	rsb	r0, r0, #32
 8012802:	9b06      	ldr	r3, [sp, #24]
 8012804:	4418      	add	r0, r3
 8012806:	f010 001f 	ands.w	r0, r0, #31
 801280a:	f000 8094 	beq.w	8012936 <_dtoa_r+0x8ee>
 801280e:	f1c0 0320 	rsb	r3, r0, #32
 8012812:	2b04      	cmp	r3, #4
 8012814:	f340 8085 	ble.w	8012922 <_dtoa_r+0x8da>
 8012818:	9b05      	ldr	r3, [sp, #20]
 801281a:	f1c0 001c 	rsb	r0, r0, #28
 801281e:	4403      	add	r3, r0
 8012820:	9305      	str	r3, [sp, #20]
 8012822:	9b06      	ldr	r3, [sp, #24]
 8012824:	4403      	add	r3, r0
 8012826:	4405      	add	r5, r0
 8012828:	9306      	str	r3, [sp, #24]
 801282a:	9b05      	ldr	r3, [sp, #20]
 801282c:	2b00      	cmp	r3, #0
 801282e:	dd05      	ble.n	801283c <_dtoa_r+0x7f4>
 8012830:	4651      	mov	r1, sl
 8012832:	461a      	mov	r2, r3
 8012834:	4620      	mov	r0, r4
 8012836:	f000 fb9f 	bl	8012f78 <__lshift>
 801283a:	4682      	mov	sl, r0
 801283c:	9b06      	ldr	r3, [sp, #24]
 801283e:	2b00      	cmp	r3, #0
 8012840:	dd05      	ble.n	801284e <_dtoa_r+0x806>
 8012842:	4631      	mov	r1, r6
 8012844:	461a      	mov	r2, r3
 8012846:	4620      	mov	r0, r4
 8012848:	f000 fb96 	bl	8012f78 <__lshift>
 801284c:	4606      	mov	r6, r0
 801284e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012850:	2b00      	cmp	r3, #0
 8012852:	d072      	beq.n	801293a <_dtoa_r+0x8f2>
 8012854:	4631      	mov	r1, r6
 8012856:	4650      	mov	r0, sl
 8012858:	f000 fbfa 	bl	8013050 <__mcmp>
 801285c:	2800      	cmp	r0, #0
 801285e:	da6c      	bge.n	801293a <_dtoa_r+0x8f2>
 8012860:	2300      	movs	r3, #0
 8012862:	4651      	mov	r1, sl
 8012864:	220a      	movs	r2, #10
 8012866:	4620      	mov	r0, r4
 8012868:	f000 f9f2 	bl	8012c50 <__multadd>
 801286c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801286e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012872:	4682      	mov	sl, r0
 8012874:	2b00      	cmp	r3, #0
 8012876:	f000 81af 	beq.w	8012bd8 <_dtoa_r+0xb90>
 801287a:	2300      	movs	r3, #0
 801287c:	4639      	mov	r1, r7
 801287e:	220a      	movs	r2, #10
 8012880:	4620      	mov	r0, r4
 8012882:	f000 f9e5 	bl	8012c50 <__multadd>
 8012886:	9b01      	ldr	r3, [sp, #4]
 8012888:	2b00      	cmp	r3, #0
 801288a:	4607      	mov	r7, r0
 801288c:	f300 8096 	bgt.w	80129bc <_dtoa_r+0x974>
 8012890:	9b07      	ldr	r3, [sp, #28]
 8012892:	2b02      	cmp	r3, #2
 8012894:	dc59      	bgt.n	801294a <_dtoa_r+0x902>
 8012896:	e091      	b.n	80129bc <_dtoa_r+0x974>
 8012898:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801289a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801289e:	e758      	b.n	8012752 <_dtoa_r+0x70a>
 80128a0:	9b04      	ldr	r3, [sp, #16]
 80128a2:	1e5e      	subs	r6, r3, #1
 80128a4:	9b08      	ldr	r3, [sp, #32]
 80128a6:	42b3      	cmp	r3, r6
 80128a8:	bfbf      	itttt	lt
 80128aa:	9b08      	ldrlt	r3, [sp, #32]
 80128ac:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80128ae:	9608      	strlt	r6, [sp, #32]
 80128b0:	1af3      	sublt	r3, r6, r3
 80128b2:	bfb4      	ite	lt
 80128b4:	18d2      	addlt	r2, r2, r3
 80128b6:	1b9e      	subge	r6, r3, r6
 80128b8:	9b04      	ldr	r3, [sp, #16]
 80128ba:	bfbc      	itt	lt
 80128bc:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80128be:	2600      	movlt	r6, #0
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	bfb7      	itett	lt
 80128c4:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80128c8:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80128cc:	1a9d      	sublt	r5, r3, r2
 80128ce:	2300      	movlt	r3, #0
 80128d0:	e741      	b.n	8012756 <_dtoa_r+0x70e>
 80128d2:	9e08      	ldr	r6, [sp, #32]
 80128d4:	9d05      	ldr	r5, [sp, #20]
 80128d6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80128d8:	e748      	b.n	801276c <_dtoa_r+0x724>
 80128da:	9a08      	ldr	r2, [sp, #32]
 80128dc:	e770      	b.n	80127c0 <_dtoa_r+0x778>
 80128de:	9b07      	ldr	r3, [sp, #28]
 80128e0:	2b01      	cmp	r3, #1
 80128e2:	dc19      	bgt.n	8012918 <_dtoa_r+0x8d0>
 80128e4:	9b02      	ldr	r3, [sp, #8]
 80128e6:	b9bb      	cbnz	r3, 8012918 <_dtoa_r+0x8d0>
 80128e8:	9b03      	ldr	r3, [sp, #12]
 80128ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80128ee:	b99b      	cbnz	r3, 8012918 <_dtoa_r+0x8d0>
 80128f0:	9b03      	ldr	r3, [sp, #12]
 80128f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80128f6:	0d1b      	lsrs	r3, r3, #20
 80128f8:	051b      	lsls	r3, r3, #20
 80128fa:	b183      	cbz	r3, 801291e <_dtoa_r+0x8d6>
 80128fc:	9b05      	ldr	r3, [sp, #20]
 80128fe:	3301      	adds	r3, #1
 8012900:	9305      	str	r3, [sp, #20]
 8012902:	9b06      	ldr	r3, [sp, #24]
 8012904:	3301      	adds	r3, #1
 8012906:	9306      	str	r3, [sp, #24]
 8012908:	f04f 0801 	mov.w	r8, #1
 801290c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801290e:	2b00      	cmp	r3, #0
 8012910:	f47f af6f 	bne.w	80127f2 <_dtoa_r+0x7aa>
 8012914:	2001      	movs	r0, #1
 8012916:	e774      	b.n	8012802 <_dtoa_r+0x7ba>
 8012918:	f04f 0800 	mov.w	r8, #0
 801291c:	e7f6      	b.n	801290c <_dtoa_r+0x8c4>
 801291e:	4698      	mov	r8, r3
 8012920:	e7f4      	b.n	801290c <_dtoa_r+0x8c4>
 8012922:	d082      	beq.n	801282a <_dtoa_r+0x7e2>
 8012924:	9a05      	ldr	r2, [sp, #20]
 8012926:	331c      	adds	r3, #28
 8012928:	441a      	add	r2, r3
 801292a:	9205      	str	r2, [sp, #20]
 801292c:	9a06      	ldr	r2, [sp, #24]
 801292e:	441a      	add	r2, r3
 8012930:	441d      	add	r5, r3
 8012932:	9206      	str	r2, [sp, #24]
 8012934:	e779      	b.n	801282a <_dtoa_r+0x7e2>
 8012936:	4603      	mov	r3, r0
 8012938:	e7f4      	b.n	8012924 <_dtoa_r+0x8dc>
 801293a:	9b04      	ldr	r3, [sp, #16]
 801293c:	2b00      	cmp	r3, #0
 801293e:	dc37      	bgt.n	80129b0 <_dtoa_r+0x968>
 8012940:	9b07      	ldr	r3, [sp, #28]
 8012942:	2b02      	cmp	r3, #2
 8012944:	dd34      	ble.n	80129b0 <_dtoa_r+0x968>
 8012946:	9b04      	ldr	r3, [sp, #16]
 8012948:	9301      	str	r3, [sp, #4]
 801294a:	9b01      	ldr	r3, [sp, #4]
 801294c:	b963      	cbnz	r3, 8012968 <_dtoa_r+0x920>
 801294e:	4631      	mov	r1, r6
 8012950:	2205      	movs	r2, #5
 8012952:	4620      	mov	r0, r4
 8012954:	f000 f97c 	bl	8012c50 <__multadd>
 8012958:	4601      	mov	r1, r0
 801295a:	4606      	mov	r6, r0
 801295c:	4650      	mov	r0, sl
 801295e:	f000 fb77 	bl	8013050 <__mcmp>
 8012962:	2800      	cmp	r0, #0
 8012964:	f73f adbc 	bgt.w	80124e0 <_dtoa_r+0x498>
 8012968:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801296a:	9d00      	ldr	r5, [sp, #0]
 801296c:	ea6f 0b03 	mvn.w	fp, r3
 8012970:	f04f 0800 	mov.w	r8, #0
 8012974:	4631      	mov	r1, r6
 8012976:	4620      	mov	r0, r4
 8012978:	f000 f961 	bl	8012c3e <_Bfree>
 801297c:	2f00      	cmp	r7, #0
 801297e:	f43f aeab 	beq.w	80126d8 <_dtoa_r+0x690>
 8012982:	f1b8 0f00 	cmp.w	r8, #0
 8012986:	d005      	beq.n	8012994 <_dtoa_r+0x94c>
 8012988:	45b8      	cmp	r8, r7
 801298a:	d003      	beq.n	8012994 <_dtoa_r+0x94c>
 801298c:	4641      	mov	r1, r8
 801298e:	4620      	mov	r0, r4
 8012990:	f000 f955 	bl	8012c3e <_Bfree>
 8012994:	4639      	mov	r1, r7
 8012996:	4620      	mov	r0, r4
 8012998:	f000 f951 	bl	8012c3e <_Bfree>
 801299c:	e69c      	b.n	80126d8 <_dtoa_r+0x690>
 801299e:	2600      	movs	r6, #0
 80129a0:	4637      	mov	r7, r6
 80129a2:	e7e1      	b.n	8012968 <_dtoa_r+0x920>
 80129a4:	46bb      	mov	fp, r7
 80129a6:	4637      	mov	r7, r6
 80129a8:	e59a      	b.n	80124e0 <_dtoa_r+0x498>
 80129aa:	bf00      	nop
 80129ac:	40240000 	.word	0x40240000
 80129b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	f000 80c7 	beq.w	8012b46 <_dtoa_r+0xafe>
 80129b8:	9b04      	ldr	r3, [sp, #16]
 80129ba:	9301      	str	r3, [sp, #4]
 80129bc:	2d00      	cmp	r5, #0
 80129be:	dd05      	ble.n	80129cc <_dtoa_r+0x984>
 80129c0:	4639      	mov	r1, r7
 80129c2:	462a      	mov	r2, r5
 80129c4:	4620      	mov	r0, r4
 80129c6:	f000 fad7 	bl	8012f78 <__lshift>
 80129ca:	4607      	mov	r7, r0
 80129cc:	f1b8 0f00 	cmp.w	r8, #0
 80129d0:	d05a      	beq.n	8012a88 <_dtoa_r+0xa40>
 80129d2:	6879      	ldr	r1, [r7, #4]
 80129d4:	4620      	mov	r0, r4
 80129d6:	f000 f90d 	bl	8012bf4 <_Balloc>
 80129da:	4605      	mov	r5, r0
 80129dc:	b920      	cbnz	r0, 80129e8 <_dtoa_r+0x9a0>
 80129de:	4b82      	ldr	r3, [pc, #520]	; (8012be8 <_dtoa_r+0xba0>)
 80129e0:	4602      	mov	r2, r0
 80129e2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80129e6:	e470      	b.n	80122ca <_dtoa_r+0x282>
 80129e8:	693a      	ldr	r2, [r7, #16]
 80129ea:	3202      	adds	r2, #2
 80129ec:	0092      	lsls	r2, r2, #2
 80129ee:	f107 010c 	add.w	r1, r7, #12
 80129f2:	300c      	adds	r0, #12
 80129f4:	f7fd fb70 	bl	80100d8 <memcpy>
 80129f8:	2201      	movs	r2, #1
 80129fa:	4629      	mov	r1, r5
 80129fc:	4620      	mov	r0, r4
 80129fe:	f000 fabb 	bl	8012f78 <__lshift>
 8012a02:	9b00      	ldr	r3, [sp, #0]
 8012a04:	3301      	adds	r3, #1
 8012a06:	9304      	str	r3, [sp, #16]
 8012a08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012a0c:	4413      	add	r3, r2
 8012a0e:	9308      	str	r3, [sp, #32]
 8012a10:	9b02      	ldr	r3, [sp, #8]
 8012a12:	f003 0301 	and.w	r3, r3, #1
 8012a16:	46b8      	mov	r8, r7
 8012a18:	9306      	str	r3, [sp, #24]
 8012a1a:	4607      	mov	r7, r0
 8012a1c:	9b04      	ldr	r3, [sp, #16]
 8012a1e:	4631      	mov	r1, r6
 8012a20:	3b01      	subs	r3, #1
 8012a22:	4650      	mov	r0, sl
 8012a24:	9301      	str	r3, [sp, #4]
 8012a26:	f7ff fa87 	bl	8011f38 <quorem>
 8012a2a:	4641      	mov	r1, r8
 8012a2c:	9002      	str	r0, [sp, #8]
 8012a2e:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012a32:	4650      	mov	r0, sl
 8012a34:	f000 fb0c 	bl	8013050 <__mcmp>
 8012a38:	463a      	mov	r2, r7
 8012a3a:	9005      	str	r0, [sp, #20]
 8012a3c:	4631      	mov	r1, r6
 8012a3e:	4620      	mov	r0, r4
 8012a40:	f000 fb22 	bl	8013088 <__mdiff>
 8012a44:	68c2      	ldr	r2, [r0, #12]
 8012a46:	4605      	mov	r5, r0
 8012a48:	bb02      	cbnz	r2, 8012a8c <_dtoa_r+0xa44>
 8012a4a:	4601      	mov	r1, r0
 8012a4c:	4650      	mov	r0, sl
 8012a4e:	f000 faff 	bl	8013050 <__mcmp>
 8012a52:	4602      	mov	r2, r0
 8012a54:	4629      	mov	r1, r5
 8012a56:	4620      	mov	r0, r4
 8012a58:	9209      	str	r2, [sp, #36]	; 0x24
 8012a5a:	f000 f8f0 	bl	8012c3e <_Bfree>
 8012a5e:	9b07      	ldr	r3, [sp, #28]
 8012a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012a62:	9d04      	ldr	r5, [sp, #16]
 8012a64:	ea43 0102 	orr.w	r1, r3, r2
 8012a68:	9b06      	ldr	r3, [sp, #24]
 8012a6a:	4319      	orrs	r1, r3
 8012a6c:	d110      	bne.n	8012a90 <_dtoa_r+0xa48>
 8012a6e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012a72:	d029      	beq.n	8012ac8 <_dtoa_r+0xa80>
 8012a74:	9b05      	ldr	r3, [sp, #20]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	dd02      	ble.n	8012a80 <_dtoa_r+0xa38>
 8012a7a:	9b02      	ldr	r3, [sp, #8]
 8012a7c:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012a80:	9b01      	ldr	r3, [sp, #4]
 8012a82:	f883 9000 	strb.w	r9, [r3]
 8012a86:	e775      	b.n	8012974 <_dtoa_r+0x92c>
 8012a88:	4638      	mov	r0, r7
 8012a8a:	e7ba      	b.n	8012a02 <_dtoa_r+0x9ba>
 8012a8c:	2201      	movs	r2, #1
 8012a8e:	e7e1      	b.n	8012a54 <_dtoa_r+0xa0c>
 8012a90:	9b05      	ldr	r3, [sp, #20]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	db04      	blt.n	8012aa0 <_dtoa_r+0xa58>
 8012a96:	9907      	ldr	r1, [sp, #28]
 8012a98:	430b      	orrs	r3, r1
 8012a9a:	9906      	ldr	r1, [sp, #24]
 8012a9c:	430b      	orrs	r3, r1
 8012a9e:	d120      	bne.n	8012ae2 <_dtoa_r+0xa9a>
 8012aa0:	2a00      	cmp	r2, #0
 8012aa2:	dded      	ble.n	8012a80 <_dtoa_r+0xa38>
 8012aa4:	4651      	mov	r1, sl
 8012aa6:	2201      	movs	r2, #1
 8012aa8:	4620      	mov	r0, r4
 8012aaa:	f000 fa65 	bl	8012f78 <__lshift>
 8012aae:	4631      	mov	r1, r6
 8012ab0:	4682      	mov	sl, r0
 8012ab2:	f000 facd 	bl	8013050 <__mcmp>
 8012ab6:	2800      	cmp	r0, #0
 8012ab8:	dc03      	bgt.n	8012ac2 <_dtoa_r+0xa7a>
 8012aba:	d1e1      	bne.n	8012a80 <_dtoa_r+0xa38>
 8012abc:	f019 0f01 	tst.w	r9, #1
 8012ac0:	d0de      	beq.n	8012a80 <_dtoa_r+0xa38>
 8012ac2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012ac6:	d1d8      	bne.n	8012a7a <_dtoa_r+0xa32>
 8012ac8:	9a01      	ldr	r2, [sp, #4]
 8012aca:	2339      	movs	r3, #57	; 0x39
 8012acc:	7013      	strb	r3, [r2, #0]
 8012ace:	462b      	mov	r3, r5
 8012ad0:	461d      	mov	r5, r3
 8012ad2:	3b01      	subs	r3, #1
 8012ad4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012ad8:	2a39      	cmp	r2, #57	; 0x39
 8012ada:	d06c      	beq.n	8012bb6 <_dtoa_r+0xb6e>
 8012adc:	3201      	adds	r2, #1
 8012ade:	701a      	strb	r2, [r3, #0]
 8012ae0:	e748      	b.n	8012974 <_dtoa_r+0x92c>
 8012ae2:	2a00      	cmp	r2, #0
 8012ae4:	dd07      	ble.n	8012af6 <_dtoa_r+0xaae>
 8012ae6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012aea:	d0ed      	beq.n	8012ac8 <_dtoa_r+0xa80>
 8012aec:	9a01      	ldr	r2, [sp, #4]
 8012aee:	f109 0301 	add.w	r3, r9, #1
 8012af2:	7013      	strb	r3, [r2, #0]
 8012af4:	e73e      	b.n	8012974 <_dtoa_r+0x92c>
 8012af6:	9b04      	ldr	r3, [sp, #16]
 8012af8:	9a08      	ldr	r2, [sp, #32]
 8012afa:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012afe:	4293      	cmp	r3, r2
 8012b00:	d043      	beq.n	8012b8a <_dtoa_r+0xb42>
 8012b02:	4651      	mov	r1, sl
 8012b04:	2300      	movs	r3, #0
 8012b06:	220a      	movs	r2, #10
 8012b08:	4620      	mov	r0, r4
 8012b0a:	f000 f8a1 	bl	8012c50 <__multadd>
 8012b0e:	45b8      	cmp	r8, r7
 8012b10:	4682      	mov	sl, r0
 8012b12:	f04f 0300 	mov.w	r3, #0
 8012b16:	f04f 020a 	mov.w	r2, #10
 8012b1a:	4641      	mov	r1, r8
 8012b1c:	4620      	mov	r0, r4
 8012b1e:	d107      	bne.n	8012b30 <_dtoa_r+0xae8>
 8012b20:	f000 f896 	bl	8012c50 <__multadd>
 8012b24:	4680      	mov	r8, r0
 8012b26:	4607      	mov	r7, r0
 8012b28:	9b04      	ldr	r3, [sp, #16]
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	9304      	str	r3, [sp, #16]
 8012b2e:	e775      	b.n	8012a1c <_dtoa_r+0x9d4>
 8012b30:	f000 f88e 	bl	8012c50 <__multadd>
 8012b34:	4639      	mov	r1, r7
 8012b36:	4680      	mov	r8, r0
 8012b38:	2300      	movs	r3, #0
 8012b3a:	220a      	movs	r2, #10
 8012b3c:	4620      	mov	r0, r4
 8012b3e:	f000 f887 	bl	8012c50 <__multadd>
 8012b42:	4607      	mov	r7, r0
 8012b44:	e7f0      	b.n	8012b28 <_dtoa_r+0xae0>
 8012b46:	9b04      	ldr	r3, [sp, #16]
 8012b48:	9301      	str	r3, [sp, #4]
 8012b4a:	9d00      	ldr	r5, [sp, #0]
 8012b4c:	4631      	mov	r1, r6
 8012b4e:	4650      	mov	r0, sl
 8012b50:	f7ff f9f2 	bl	8011f38 <quorem>
 8012b54:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012b58:	9b00      	ldr	r3, [sp, #0]
 8012b5a:	f805 9b01 	strb.w	r9, [r5], #1
 8012b5e:	1aea      	subs	r2, r5, r3
 8012b60:	9b01      	ldr	r3, [sp, #4]
 8012b62:	4293      	cmp	r3, r2
 8012b64:	dd07      	ble.n	8012b76 <_dtoa_r+0xb2e>
 8012b66:	4651      	mov	r1, sl
 8012b68:	2300      	movs	r3, #0
 8012b6a:	220a      	movs	r2, #10
 8012b6c:	4620      	mov	r0, r4
 8012b6e:	f000 f86f 	bl	8012c50 <__multadd>
 8012b72:	4682      	mov	sl, r0
 8012b74:	e7ea      	b.n	8012b4c <_dtoa_r+0xb04>
 8012b76:	9b01      	ldr	r3, [sp, #4]
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	bfc8      	it	gt
 8012b7c:	461d      	movgt	r5, r3
 8012b7e:	9b00      	ldr	r3, [sp, #0]
 8012b80:	bfd8      	it	le
 8012b82:	2501      	movle	r5, #1
 8012b84:	441d      	add	r5, r3
 8012b86:	f04f 0800 	mov.w	r8, #0
 8012b8a:	4651      	mov	r1, sl
 8012b8c:	2201      	movs	r2, #1
 8012b8e:	4620      	mov	r0, r4
 8012b90:	f000 f9f2 	bl	8012f78 <__lshift>
 8012b94:	4631      	mov	r1, r6
 8012b96:	4682      	mov	sl, r0
 8012b98:	f000 fa5a 	bl	8013050 <__mcmp>
 8012b9c:	2800      	cmp	r0, #0
 8012b9e:	dc96      	bgt.n	8012ace <_dtoa_r+0xa86>
 8012ba0:	d102      	bne.n	8012ba8 <_dtoa_r+0xb60>
 8012ba2:	f019 0f01 	tst.w	r9, #1
 8012ba6:	d192      	bne.n	8012ace <_dtoa_r+0xa86>
 8012ba8:	462b      	mov	r3, r5
 8012baa:	461d      	mov	r5, r3
 8012bac:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012bb0:	2a30      	cmp	r2, #48	; 0x30
 8012bb2:	d0fa      	beq.n	8012baa <_dtoa_r+0xb62>
 8012bb4:	e6de      	b.n	8012974 <_dtoa_r+0x92c>
 8012bb6:	9a00      	ldr	r2, [sp, #0]
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	d189      	bne.n	8012ad0 <_dtoa_r+0xa88>
 8012bbc:	f10b 0b01 	add.w	fp, fp, #1
 8012bc0:	2331      	movs	r3, #49	; 0x31
 8012bc2:	e796      	b.n	8012af2 <_dtoa_r+0xaaa>
 8012bc4:	4b09      	ldr	r3, [pc, #36]	; (8012bec <_dtoa_r+0xba4>)
 8012bc6:	f7ff ba9d 	b.w	8012104 <_dtoa_r+0xbc>
 8012bca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	f47f aa7c 	bne.w	80120ca <_dtoa_r+0x82>
 8012bd2:	4b07      	ldr	r3, [pc, #28]	; (8012bf0 <_dtoa_r+0xba8>)
 8012bd4:	f7ff ba96 	b.w	8012104 <_dtoa_r+0xbc>
 8012bd8:	9b01      	ldr	r3, [sp, #4]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	dcb5      	bgt.n	8012b4a <_dtoa_r+0xb02>
 8012bde:	9b07      	ldr	r3, [sp, #28]
 8012be0:	2b02      	cmp	r3, #2
 8012be2:	f73f aeb2 	bgt.w	801294a <_dtoa_r+0x902>
 8012be6:	e7b0      	b.n	8012b4a <_dtoa_r+0xb02>
 8012be8:	08014ab1 	.word	0x08014ab1
 8012bec:	08014a82 	.word	0x08014a82
 8012bf0:	08014aa4 	.word	0x08014aa4

08012bf4 <_Balloc>:
 8012bf4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8012bf6:	b570      	push	{r4, r5, r6, lr}
 8012bf8:	4605      	mov	r5, r0
 8012bfa:	460c      	mov	r4, r1
 8012bfc:	b17b      	cbz	r3, 8012c1e <_Balloc+0x2a>
 8012bfe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8012c00:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012c04:	b9a0      	cbnz	r0, 8012c30 <_Balloc+0x3c>
 8012c06:	2101      	movs	r1, #1
 8012c08:	fa01 f604 	lsl.w	r6, r1, r4
 8012c0c:	1d72      	adds	r2, r6, #5
 8012c0e:	0092      	lsls	r2, r2, #2
 8012c10:	4628      	mov	r0, r5
 8012c12:	f000 fbd9 	bl	80133c8 <_calloc_r>
 8012c16:	b148      	cbz	r0, 8012c2c <_Balloc+0x38>
 8012c18:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8012c1c:	e00b      	b.n	8012c36 <_Balloc+0x42>
 8012c1e:	2221      	movs	r2, #33	; 0x21
 8012c20:	2104      	movs	r1, #4
 8012c22:	f000 fbd1 	bl	80133c8 <_calloc_r>
 8012c26:	6468      	str	r0, [r5, #68]	; 0x44
 8012c28:	2800      	cmp	r0, #0
 8012c2a:	d1e8      	bne.n	8012bfe <_Balloc+0xa>
 8012c2c:	2000      	movs	r0, #0
 8012c2e:	bd70      	pop	{r4, r5, r6, pc}
 8012c30:	6802      	ldr	r2, [r0, #0]
 8012c32:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8012c36:	2300      	movs	r3, #0
 8012c38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8012c3c:	e7f7      	b.n	8012c2e <_Balloc+0x3a>

08012c3e <_Bfree>:
 8012c3e:	b131      	cbz	r1, 8012c4e <_Bfree+0x10>
 8012c40:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8012c42:	684a      	ldr	r2, [r1, #4]
 8012c44:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8012c48:	6008      	str	r0, [r1, #0]
 8012c4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8012c4e:	4770      	bx	lr

08012c50 <__multadd>:
 8012c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c54:	690d      	ldr	r5, [r1, #16]
 8012c56:	4607      	mov	r7, r0
 8012c58:	460c      	mov	r4, r1
 8012c5a:	461e      	mov	r6, r3
 8012c5c:	f101 0c14 	add.w	ip, r1, #20
 8012c60:	2000      	movs	r0, #0
 8012c62:	f8dc 3000 	ldr.w	r3, [ip]
 8012c66:	b299      	uxth	r1, r3
 8012c68:	fb02 6101 	mla	r1, r2, r1, r6
 8012c6c:	0c1e      	lsrs	r6, r3, #16
 8012c6e:	0c0b      	lsrs	r3, r1, #16
 8012c70:	fb02 3306 	mla	r3, r2, r6, r3
 8012c74:	b289      	uxth	r1, r1
 8012c76:	3001      	adds	r0, #1
 8012c78:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8012c7c:	4285      	cmp	r5, r0
 8012c7e:	f84c 1b04 	str.w	r1, [ip], #4
 8012c82:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8012c86:	dcec      	bgt.n	8012c62 <__multadd+0x12>
 8012c88:	b30e      	cbz	r6, 8012cce <__multadd+0x7e>
 8012c8a:	68a3      	ldr	r3, [r4, #8]
 8012c8c:	42ab      	cmp	r3, r5
 8012c8e:	dc19      	bgt.n	8012cc4 <__multadd+0x74>
 8012c90:	6861      	ldr	r1, [r4, #4]
 8012c92:	4638      	mov	r0, r7
 8012c94:	3101      	adds	r1, #1
 8012c96:	f7ff ffad 	bl	8012bf4 <_Balloc>
 8012c9a:	4680      	mov	r8, r0
 8012c9c:	b928      	cbnz	r0, 8012caa <__multadd+0x5a>
 8012c9e:	4602      	mov	r2, r0
 8012ca0:	4b0c      	ldr	r3, [pc, #48]	; (8012cd4 <__multadd+0x84>)
 8012ca2:	480d      	ldr	r0, [pc, #52]	; (8012cd8 <__multadd+0x88>)
 8012ca4:	21ba      	movs	r1, #186	; 0xba
 8012ca6:	f000 fb71 	bl	801338c <__assert_func>
 8012caa:	6922      	ldr	r2, [r4, #16]
 8012cac:	3202      	adds	r2, #2
 8012cae:	f104 010c 	add.w	r1, r4, #12
 8012cb2:	0092      	lsls	r2, r2, #2
 8012cb4:	300c      	adds	r0, #12
 8012cb6:	f7fd fa0f 	bl	80100d8 <memcpy>
 8012cba:	4621      	mov	r1, r4
 8012cbc:	4638      	mov	r0, r7
 8012cbe:	f7ff ffbe 	bl	8012c3e <_Bfree>
 8012cc2:	4644      	mov	r4, r8
 8012cc4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8012cc8:	3501      	adds	r5, #1
 8012cca:	615e      	str	r6, [r3, #20]
 8012ccc:	6125      	str	r5, [r4, #16]
 8012cce:	4620      	mov	r0, r4
 8012cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012cd4:	08014ab1 	.word	0x08014ab1
 8012cd8:	08014b1a 	.word	0x08014b1a

08012cdc <__hi0bits>:
 8012cdc:	0c03      	lsrs	r3, r0, #16
 8012cde:	041b      	lsls	r3, r3, #16
 8012ce0:	b9d3      	cbnz	r3, 8012d18 <__hi0bits+0x3c>
 8012ce2:	0400      	lsls	r0, r0, #16
 8012ce4:	2310      	movs	r3, #16
 8012ce6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8012cea:	bf04      	itt	eq
 8012cec:	0200      	lsleq	r0, r0, #8
 8012cee:	3308      	addeq	r3, #8
 8012cf0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8012cf4:	bf04      	itt	eq
 8012cf6:	0100      	lsleq	r0, r0, #4
 8012cf8:	3304      	addeq	r3, #4
 8012cfa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8012cfe:	bf04      	itt	eq
 8012d00:	0080      	lsleq	r0, r0, #2
 8012d02:	3302      	addeq	r3, #2
 8012d04:	2800      	cmp	r0, #0
 8012d06:	db05      	blt.n	8012d14 <__hi0bits+0x38>
 8012d08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8012d0c:	f103 0301 	add.w	r3, r3, #1
 8012d10:	bf08      	it	eq
 8012d12:	2320      	moveq	r3, #32
 8012d14:	4618      	mov	r0, r3
 8012d16:	4770      	bx	lr
 8012d18:	2300      	movs	r3, #0
 8012d1a:	e7e4      	b.n	8012ce6 <__hi0bits+0xa>

08012d1c <__lo0bits>:
 8012d1c:	6803      	ldr	r3, [r0, #0]
 8012d1e:	f013 0207 	ands.w	r2, r3, #7
 8012d22:	d00c      	beq.n	8012d3e <__lo0bits+0x22>
 8012d24:	07d9      	lsls	r1, r3, #31
 8012d26:	d422      	bmi.n	8012d6e <__lo0bits+0x52>
 8012d28:	079a      	lsls	r2, r3, #30
 8012d2a:	bf49      	itett	mi
 8012d2c:	085b      	lsrmi	r3, r3, #1
 8012d2e:	089b      	lsrpl	r3, r3, #2
 8012d30:	6003      	strmi	r3, [r0, #0]
 8012d32:	2201      	movmi	r2, #1
 8012d34:	bf5c      	itt	pl
 8012d36:	6003      	strpl	r3, [r0, #0]
 8012d38:	2202      	movpl	r2, #2
 8012d3a:	4610      	mov	r0, r2
 8012d3c:	4770      	bx	lr
 8012d3e:	b299      	uxth	r1, r3
 8012d40:	b909      	cbnz	r1, 8012d46 <__lo0bits+0x2a>
 8012d42:	0c1b      	lsrs	r3, r3, #16
 8012d44:	2210      	movs	r2, #16
 8012d46:	b2d9      	uxtb	r1, r3
 8012d48:	b909      	cbnz	r1, 8012d4e <__lo0bits+0x32>
 8012d4a:	3208      	adds	r2, #8
 8012d4c:	0a1b      	lsrs	r3, r3, #8
 8012d4e:	0719      	lsls	r1, r3, #28
 8012d50:	bf04      	itt	eq
 8012d52:	091b      	lsreq	r3, r3, #4
 8012d54:	3204      	addeq	r2, #4
 8012d56:	0799      	lsls	r1, r3, #30
 8012d58:	bf04      	itt	eq
 8012d5a:	089b      	lsreq	r3, r3, #2
 8012d5c:	3202      	addeq	r2, #2
 8012d5e:	07d9      	lsls	r1, r3, #31
 8012d60:	d403      	bmi.n	8012d6a <__lo0bits+0x4e>
 8012d62:	085b      	lsrs	r3, r3, #1
 8012d64:	f102 0201 	add.w	r2, r2, #1
 8012d68:	d003      	beq.n	8012d72 <__lo0bits+0x56>
 8012d6a:	6003      	str	r3, [r0, #0]
 8012d6c:	e7e5      	b.n	8012d3a <__lo0bits+0x1e>
 8012d6e:	2200      	movs	r2, #0
 8012d70:	e7e3      	b.n	8012d3a <__lo0bits+0x1e>
 8012d72:	2220      	movs	r2, #32
 8012d74:	e7e1      	b.n	8012d3a <__lo0bits+0x1e>
	...

08012d78 <__i2b>:
 8012d78:	b510      	push	{r4, lr}
 8012d7a:	460c      	mov	r4, r1
 8012d7c:	2101      	movs	r1, #1
 8012d7e:	f7ff ff39 	bl	8012bf4 <_Balloc>
 8012d82:	4602      	mov	r2, r0
 8012d84:	b928      	cbnz	r0, 8012d92 <__i2b+0x1a>
 8012d86:	4b05      	ldr	r3, [pc, #20]	; (8012d9c <__i2b+0x24>)
 8012d88:	4805      	ldr	r0, [pc, #20]	; (8012da0 <__i2b+0x28>)
 8012d8a:	f240 1145 	movw	r1, #325	; 0x145
 8012d8e:	f000 fafd 	bl	801338c <__assert_func>
 8012d92:	2301      	movs	r3, #1
 8012d94:	6144      	str	r4, [r0, #20]
 8012d96:	6103      	str	r3, [r0, #16]
 8012d98:	bd10      	pop	{r4, pc}
 8012d9a:	bf00      	nop
 8012d9c:	08014ab1 	.word	0x08014ab1
 8012da0:	08014b1a 	.word	0x08014b1a

08012da4 <__multiply>:
 8012da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012da8:	4691      	mov	r9, r2
 8012daa:	690a      	ldr	r2, [r1, #16]
 8012dac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8012db0:	429a      	cmp	r2, r3
 8012db2:	bfb8      	it	lt
 8012db4:	460b      	movlt	r3, r1
 8012db6:	460c      	mov	r4, r1
 8012db8:	bfbc      	itt	lt
 8012dba:	464c      	movlt	r4, r9
 8012dbc:	4699      	movlt	r9, r3
 8012dbe:	6927      	ldr	r7, [r4, #16]
 8012dc0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8012dc4:	68a3      	ldr	r3, [r4, #8]
 8012dc6:	6861      	ldr	r1, [r4, #4]
 8012dc8:	eb07 060a 	add.w	r6, r7, sl
 8012dcc:	42b3      	cmp	r3, r6
 8012dce:	b085      	sub	sp, #20
 8012dd0:	bfb8      	it	lt
 8012dd2:	3101      	addlt	r1, #1
 8012dd4:	f7ff ff0e 	bl	8012bf4 <_Balloc>
 8012dd8:	b930      	cbnz	r0, 8012de8 <__multiply+0x44>
 8012dda:	4602      	mov	r2, r0
 8012ddc:	4b44      	ldr	r3, [pc, #272]	; (8012ef0 <__multiply+0x14c>)
 8012dde:	4845      	ldr	r0, [pc, #276]	; (8012ef4 <__multiply+0x150>)
 8012de0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8012de4:	f000 fad2 	bl	801338c <__assert_func>
 8012de8:	f100 0514 	add.w	r5, r0, #20
 8012dec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8012df0:	462b      	mov	r3, r5
 8012df2:	2200      	movs	r2, #0
 8012df4:	4543      	cmp	r3, r8
 8012df6:	d321      	bcc.n	8012e3c <__multiply+0x98>
 8012df8:	f104 0314 	add.w	r3, r4, #20
 8012dfc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8012e00:	f109 0314 	add.w	r3, r9, #20
 8012e04:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8012e08:	9202      	str	r2, [sp, #8]
 8012e0a:	1b3a      	subs	r2, r7, r4
 8012e0c:	3a15      	subs	r2, #21
 8012e0e:	f022 0203 	bic.w	r2, r2, #3
 8012e12:	3204      	adds	r2, #4
 8012e14:	f104 0115 	add.w	r1, r4, #21
 8012e18:	428f      	cmp	r7, r1
 8012e1a:	bf38      	it	cc
 8012e1c:	2204      	movcc	r2, #4
 8012e1e:	9201      	str	r2, [sp, #4]
 8012e20:	9a02      	ldr	r2, [sp, #8]
 8012e22:	9303      	str	r3, [sp, #12]
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d80c      	bhi.n	8012e42 <__multiply+0x9e>
 8012e28:	2e00      	cmp	r6, #0
 8012e2a:	dd03      	ble.n	8012e34 <__multiply+0x90>
 8012e2c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d05b      	beq.n	8012eec <__multiply+0x148>
 8012e34:	6106      	str	r6, [r0, #16]
 8012e36:	b005      	add	sp, #20
 8012e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e3c:	f843 2b04 	str.w	r2, [r3], #4
 8012e40:	e7d8      	b.n	8012df4 <__multiply+0x50>
 8012e42:	f8b3 a000 	ldrh.w	sl, [r3]
 8012e46:	f1ba 0f00 	cmp.w	sl, #0
 8012e4a:	d024      	beq.n	8012e96 <__multiply+0xf2>
 8012e4c:	f104 0e14 	add.w	lr, r4, #20
 8012e50:	46a9      	mov	r9, r5
 8012e52:	f04f 0c00 	mov.w	ip, #0
 8012e56:	f85e 2b04 	ldr.w	r2, [lr], #4
 8012e5a:	f8d9 1000 	ldr.w	r1, [r9]
 8012e5e:	fa1f fb82 	uxth.w	fp, r2
 8012e62:	b289      	uxth	r1, r1
 8012e64:	fb0a 110b 	mla	r1, sl, fp, r1
 8012e68:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8012e6c:	f8d9 2000 	ldr.w	r2, [r9]
 8012e70:	4461      	add	r1, ip
 8012e72:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012e76:	fb0a c20b 	mla	r2, sl, fp, ip
 8012e7a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8012e7e:	b289      	uxth	r1, r1
 8012e80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012e84:	4577      	cmp	r7, lr
 8012e86:	f849 1b04 	str.w	r1, [r9], #4
 8012e8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8012e8e:	d8e2      	bhi.n	8012e56 <__multiply+0xb2>
 8012e90:	9a01      	ldr	r2, [sp, #4]
 8012e92:	f845 c002 	str.w	ip, [r5, r2]
 8012e96:	9a03      	ldr	r2, [sp, #12]
 8012e98:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8012e9c:	3304      	adds	r3, #4
 8012e9e:	f1b9 0f00 	cmp.w	r9, #0
 8012ea2:	d021      	beq.n	8012ee8 <__multiply+0x144>
 8012ea4:	6829      	ldr	r1, [r5, #0]
 8012ea6:	f104 0c14 	add.w	ip, r4, #20
 8012eaa:	46ae      	mov	lr, r5
 8012eac:	f04f 0a00 	mov.w	sl, #0
 8012eb0:	f8bc b000 	ldrh.w	fp, [ip]
 8012eb4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8012eb8:	fb09 220b 	mla	r2, r9, fp, r2
 8012ebc:	4452      	add	r2, sl
 8012ebe:	b289      	uxth	r1, r1
 8012ec0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8012ec4:	f84e 1b04 	str.w	r1, [lr], #4
 8012ec8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8012ecc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012ed0:	f8be 1000 	ldrh.w	r1, [lr]
 8012ed4:	fb09 110a 	mla	r1, r9, sl, r1
 8012ed8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8012edc:	4567      	cmp	r7, ip
 8012ede:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8012ee2:	d8e5      	bhi.n	8012eb0 <__multiply+0x10c>
 8012ee4:	9a01      	ldr	r2, [sp, #4]
 8012ee6:	50a9      	str	r1, [r5, r2]
 8012ee8:	3504      	adds	r5, #4
 8012eea:	e799      	b.n	8012e20 <__multiply+0x7c>
 8012eec:	3e01      	subs	r6, #1
 8012eee:	e79b      	b.n	8012e28 <__multiply+0x84>
 8012ef0:	08014ab1 	.word	0x08014ab1
 8012ef4:	08014b1a 	.word	0x08014b1a

08012ef8 <__pow5mult>:
 8012ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012efc:	4615      	mov	r5, r2
 8012efe:	f012 0203 	ands.w	r2, r2, #3
 8012f02:	4606      	mov	r6, r0
 8012f04:	460f      	mov	r7, r1
 8012f06:	d007      	beq.n	8012f18 <__pow5mult+0x20>
 8012f08:	4c1a      	ldr	r4, [pc, #104]	; (8012f74 <__pow5mult+0x7c>)
 8012f0a:	3a01      	subs	r2, #1
 8012f0c:	2300      	movs	r3, #0
 8012f0e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8012f12:	f7ff fe9d 	bl	8012c50 <__multadd>
 8012f16:	4607      	mov	r7, r0
 8012f18:	10ad      	asrs	r5, r5, #2
 8012f1a:	d027      	beq.n	8012f6c <__pow5mult+0x74>
 8012f1c:	6c34      	ldr	r4, [r6, #64]	; 0x40
 8012f1e:	b944      	cbnz	r4, 8012f32 <__pow5mult+0x3a>
 8012f20:	f240 2171 	movw	r1, #625	; 0x271
 8012f24:	4630      	mov	r0, r6
 8012f26:	f7ff ff27 	bl	8012d78 <__i2b>
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	6430      	str	r0, [r6, #64]	; 0x40
 8012f2e:	4604      	mov	r4, r0
 8012f30:	6003      	str	r3, [r0, #0]
 8012f32:	f04f 0900 	mov.w	r9, #0
 8012f36:	07eb      	lsls	r3, r5, #31
 8012f38:	d50a      	bpl.n	8012f50 <__pow5mult+0x58>
 8012f3a:	4639      	mov	r1, r7
 8012f3c:	4622      	mov	r2, r4
 8012f3e:	4630      	mov	r0, r6
 8012f40:	f7ff ff30 	bl	8012da4 <__multiply>
 8012f44:	4639      	mov	r1, r7
 8012f46:	4680      	mov	r8, r0
 8012f48:	4630      	mov	r0, r6
 8012f4a:	f7ff fe78 	bl	8012c3e <_Bfree>
 8012f4e:	4647      	mov	r7, r8
 8012f50:	106d      	asrs	r5, r5, #1
 8012f52:	d00b      	beq.n	8012f6c <__pow5mult+0x74>
 8012f54:	6820      	ldr	r0, [r4, #0]
 8012f56:	b938      	cbnz	r0, 8012f68 <__pow5mult+0x70>
 8012f58:	4622      	mov	r2, r4
 8012f5a:	4621      	mov	r1, r4
 8012f5c:	4630      	mov	r0, r6
 8012f5e:	f7ff ff21 	bl	8012da4 <__multiply>
 8012f62:	6020      	str	r0, [r4, #0]
 8012f64:	f8c0 9000 	str.w	r9, [r0]
 8012f68:	4604      	mov	r4, r0
 8012f6a:	e7e4      	b.n	8012f36 <__pow5mult+0x3e>
 8012f6c:	4638      	mov	r0, r7
 8012f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f72:	bf00      	nop
 8012f74:	08014c68 	.word	0x08014c68

08012f78 <__lshift>:
 8012f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012f7c:	460c      	mov	r4, r1
 8012f7e:	6849      	ldr	r1, [r1, #4]
 8012f80:	6923      	ldr	r3, [r4, #16]
 8012f82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8012f86:	68a3      	ldr	r3, [r4, #8]
 8012f88:	4607      	mov	r7, r0
 8012f8a:	4691      	mov	r9, r2
 8012f8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8012f90:	f108 0601 	add.w	r6, r8, #1
 8012f94:	42b3      	cmp	r3, r6
 8012f96:	db0b      	blt.n	8012fb0 <__lshift+0x38>
 8012f98:	4638      	mov	r0, r7
 8012f9a:	f7ff fe2b 	bl	8012bf4 <_Balloc>
 8012f9e:	4605      	mov	r5, r0
 8012fa0:	b948      	cbnz	r0, 8012fb6 <__lshift+0x3e>
 8012fa2:	4602      	mov	r2, r0
 8012fa4:	4b28      	ldr	r3, [pc, #160]	; (8013048 <__lshift+0xd0>)
 8012fa6:	4829      	ldr	r0, [pc, #164]	; (801304c <__lshift+0xd4>)
 8012fa8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8012fac:	f000 f9ee 	bl	801338c <__assert_func>
 8012fb0:	3101      	adds	r1, #1
 8012fb2:	005b      	lsls	r3, r3, #1
 8012fb4:	e7ee      	b.n	8012f94 <__lshift+0x1c>
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	f100 0114 	add.w	r1, r0, #20
 8012fbc:	f100 0210 	add.w	r2, r0, #16
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	4553      	cmp	r3, sl
 8012fc4:	db33      	blt.n	801302e <__lshift+0xb6>
 8012fc6:	6920      	ldr	r0, [r4, #16]
 8012fc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012fcc:	f104 0314 	add.w	r3, r4, #20
 8012fd0:	f019 091f 	ands.w	r9, r9, #31
 8012fd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8012fd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8012fdc:	d02b      	beq.n	8013036 <__lshift+0xbe>
 8012fde:	f1c9 0e20 	rsb	lr, r9, #32
 8012fe2:	468a      	mov	sl, r1
 8012fe4:	2200      	movs	r2, #0
 8012fe6:	6818      	ldr	r0, [r3, #0]
 8012fe8:	fa00 f009 	lsl.w	r0, r0, r9
 8012fec:	4310      	orrs	r0, r2
 8012fee:	f84a 0b04 	str.w	r0, [sl], #4
 8012ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ff6:	459c      	cmp	ip, r3
 8012ff8:	fa22 f20e 	lsr.w	r2, r2, lr
 8012ffc:	d8f3      	bhi.n	8012fe6 <__lshift+0x6e>
 8012ffe:	ebac 0304 	sub.w	r3, ip, r4
 8013002:	3b15      	subs	r3, #21
 8013004:	f023 0303 	bic.w	r3, r3, #3
 8013008:	3304      	adds	r3, #4
 801300a:	f104 0015 	add.w	r0, r4, #21
 801300e:	4584      	cmp	ip, r0
 8013010:	bf38      	it	cc
 8013012:	2304      	movcc	r3, #4
 8013014:	50ca      	str	r2, [r1, r3]
 8013016:	b10a      	cbz	r2, 801301c <__lshift+0xa4>
 8013018:	f108 0602 	add.w	r6, r8, #2
 801301c:	3e01      	subs	r6, #1
 801301e:	4638      	mov	r0, r7
 8013020:	612e      	str	r6, [r5, #16]
 8013022:	4621      	mov	r1, r4
 8013024:	f7ff fe0b 	bl	8012c3e <_Bfree>
 8013028:	4628      	mov	r0, r5
 801302a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801302e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013032:	3301      	adds	r3, #1
 8013034:	e7c5      	b.n	8012fc2 <__lshift+0x4a>
 8013036:	3904      	subs	r1, #4
 8013038:	f853 2b04 	ldr.w	r2, [r3], #4
 801303c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013040:	459c      	cmp	ip, r3
 8013042:	d8f9      	bhi.n	8013038 <__lshift+0xc0>
 8013044:	e7ea      	b.n	801301c <__lshift+0xa4>
 8013046:	bf00      	nop
 8013048:	08014ab1 	.word	0x08014ab1
 801304c:	08014b1a 	.word	0x08014b1a

08013050 <__mcmp>:
 8013050:	b530      	push	{r4, r5, lr}
 8013052:	6902      	ldr	r2, [r0, #16]
 8013054:	690c      	ldr	r4, [r1, #16]
 8013056:	1b12      	subs	r2, r2, r4
 8013058:	d10e      	bne.n	8013078 <__mcmp+0x28>
 801305a:	f100 0314 	add.w	r3, r0, #20
 801305e:	3114      	adds	r1, #20
 8013060:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013064:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013068:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801306c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013070:	42a5      	cmp	r5, r4
 8013072:	d003      	beq.n	801307c <__mcmp+0x2c>
 8013074:	d305      	bcc.n	8013082 <__mcmp+0x32>
 8013076:	2201      	movs	r2, #1
 8013078:	4610      	mov	r0, r2
 801307a:	bd30      	pop	{r4, r5, pc}
 801307c:	4283      	cmp	r3, r0
 801307e:	d3f3      	bcc.n	8013068 <__mcmp+0x18>
 8013080:	e7fa      	b.n	8013078 <__mcmp+0x28>
 8013082:	f04f 32ff 	mov.w	r2, #4294967295
 8013086:	e7f7      	b.n	8013078 <__mcmp+0x28>

08013088 <__mdiff>:
 8013088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801308c:	460c      	mov	r4, r1
 801308e:	4606      	mov	r6, r0
 8013090:	4611      	mov	r1, r2
 8013092:	4620      	mov	r0, r4
 8013094:	4690      	mov	r8, r2
 8013096:	f7ff ffdb 	bl	8013050 <__mcmp>
 801309a:	1e05      	subs	r5, r0, #0
 801309c:	d110      	bne.n	80130c0 <__mdiff+0x38>
 801309e:	4629      	mov	r1, r5
 80130a0:	4630      	mov	r0, r6
 80130a2:	f7ff fda7 	bl	8012bf4 <_Balloc>
 80130a6:	b930      	cbnz	r0, 80130b6 <__mdiff+0x2e>
 80130a8:	4b3a      	ldr	r3, [pc, #232]	; (8013194 <__mdiff+0x10c>)
 80130aa:	4602      	mov	r2, r0
 80130ac:	f240 2137 	movw	r1, #567	; 0x237
 80130b0:	4839      	ldr	r0, [pc, #228]	; (8013198 <__mdiff+0x110>)
 80130b2:	f000 f96b 	bl	801338c <__assert_func>
 80130b6:	2301      	movs	r3, #1
 80130b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80130bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130c0:	bfa4      	itt	ge
 80130c2:	4643      	movge	r3, r8
 80130c4:	46a0      	movge	r8, r4
 80130c6:	4630      	mov	r0, r6
 80130c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80130cc:	bfa6      	itte	ge
 80130ce:	461c      	movge	r4, r3
 80130d0:	2500      	movge	r5, #0
 80130d2:	2501      	movlt	r5, #1
 80130d4:	f7ff fd8e 	bl	8012bf4 <_Balloc>
 80130d8:	b920      	cbnz	r0, 80130e4 <__mdiff+0x5c>
 80130da:	4b2e      	ldr	r3, [pc, #184]	; (8013194 <__mdiff+0x10c>)
 80130dc:	4602      	mov	r2, r0
 80130de:	f240 2145 	movw	r1, #581	; 0x245
 80130e2:	e7e5      	b.n	80130b0 <__mdiff+0x28>
 80130e4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80130e8:	6926      	ldr	r6, [r4, #16]
 80130ea:	60c5      	str	r5, [r0, #12]
 80130ec:	f104 0914 	add.w	r9, r4, #20
 80130f0:	f108 0514 	add.w	r5, r8, #20
 80130f4:	f100 0e14 	add.w	lr, r0, #20
 80130f8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80130fc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013100:	f108 0210 	add.w	r2, r8, #16
 8013104:	46f2      	mov	sl, lr
 8013106:	2100      	movs	r1, #0
 8013108:	f859 3b04 	ldr.w	r3, [r9], #4
 801310c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013110:	fa11 f88b 	uxtah	r8, r1, fp
 8013114:	b299      	uxth	r1, r3
 8013116:	0c1b      	lsrs	r3, r3, #16
 8013118:	eba8 0801 	sub.w	r8, r8, r1
 801311c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013120:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013124:	fa1f f888 	uxth.w	r8, r8
 8013128:	1419      	asrs	r1, r3, #16
 801312a:	454e      	cmp	r6, r9
 801312c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013130:	f84a 3b04 	str.w	r3, [sl], #4
 8013134:	d8e8      	bhi.n	8013108 <__mdiff+0x80>
 8013136:	1b33      	subs	r3, r6, r4
 8013138:	3b15      	subs	r3, #21
 801313a:	f023 0303 	bic.w	r3, r3, #3
 801313e:	3304      	adds	r3, #4
 8013140:	3415      	adds	r4, #21
 8013142:	42a6      	cmp	r6, r4
 8013144:	bf38      	it	cc
 8013146:	2304      	movcc	r3, #4
 8013148:	441d      	add	r5, r3
 801314a:	4473      	add	r3, lr
 801314c:	469e      	mov	lr, r3
 801314e:	462e      	mov	r6, r5
 8013150:	4566      	cmp	r6, ip
 8013152:	d30e      	bcc.n	8013172 <__mdiff+0xea>
 8013154:	f10c 0203 	add.w	r2, ip, #3
 8013158:	1b52      	subs	r2, r2, r5
 801315a:	f022 0203 	bic.w	r2, r2, #3
 801315e:	3d03      	subs	r5, #3
 8013160:	45ac      	cmp	ip, r5
 8013162:	bf38      	it	cc
 8013164:	2200      	movcc	r2, #0
 8013166:	4413      	add	r3, r2
 8013168:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801316c:	b17a      	cbz	r2, 801318e <__mdiff+0x106>
 801316e:	6107      	str	r7, [r0, #16]
 8013170:	e7a4      	b.n	80130bc <__mdiff+0x34>
 8013172:	f856 8b04 	ldr.w	r8, [r6], #4
 8013176:	fa11 f288 	uxtah	r2, r1, r8
 801317a:	1414      	asrs	r4, r2, #16
 801317c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013180:	b292      	uxth	r2, r2
 8013182:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013186:	f84e 2b04 	str.w	r2, [lr], #4
 801318a:	1421      	asrs	r1, r4, #16
 801318c:	e7e0      	b.n	8013150 <__mdiff+0xc8>
 801318e:	3f01      	subs	r7, #1
 8013190:	e7ea      	b.n	8013168 <__mdiff+0xe0>
 8013192:	bf00      	nop
 8013194:	08014ab1 	.word	0x08014ab1
 8013198:	08014b1a 	.word	0x08014b1a

0801319c <__d2b>:
 801319c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80131a0:	460f      	mov	r7, r1
 80131a2:	2101      	movs	r1, #1
 80131a4:	ec59 8b10 	vmov	r8, r9, d0
 80131a8:	4616      	mov	r6, r2
 80131aa:	f7ff fd23 	bl	8012bf4 <_Balloc>
 80131ae:	4604      	mov	r4, r0
 80131b0:	b930      	cbnz	r0, 80131c0 <__d2b+0x24>
 80131b2:	4602      	mov	r2, r0
 80131b4:	4b24      	ldr	r3, [pc, #144]	; (8013248 <__d2b+0xac>)
 80131b6:	4825      	ldr	r0, [pc, #148]	; (801324c <__d2b+0xb0>)
 80131b8:	f240 310f 	movw	r1, #783	; 0x30f
 80131bc:	f000 f8e6 	bl	801338c <__assert_func>
 80131c0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80131c4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80131c8:	bb2d      	cbnz	r5, 8013216 <__d2b+0x7a>
 80131ca:	9301      	str	r3, [sp, #4]
 80131cc:	f1b8 0300 	subs.w	r3, r8, #0
 80131d0:	d026      	beq.n	8013220 <__d2b+0x84>
 80131d2:	4668      	mov	r0, sp
 80131d4:	9300      	str	r3, [sp, #0]
 80131d6:	f7ff fda1 	bl	8012d1c <__lo0bits>
 80131da:	e9dd 1200 	ldrd	r1, r2, [sp]
 80131de:	b1e8      	cbz	r0, 801321c <__d2b+0x80>
 80131e0:	f1c0 0320 	rsb	r3, r0, #32
 80131e4:	fa02 f303 	lsl.w	r3, r2, r3
 80131e8:	430b      	orrs	r3, r1
 80131ea:	40c2      	lsrs	r2, r0
 80131ec:	6163      	str	r3, [r4, #20]
 80131ee:	9201      	str	r2, [sp, #4]
 80131f0:	9b01      	ldr	r3, [sp, #4]
 80131f2:	61a3      	str	r3, [r4, #24]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	bf14      	ite	ne
 80131f8:	2202      	movne	r2, #2
 80131fa:	2201      	moveq	r2, #1
 80131fc:	6122      	str	r2, [r4, #16]
 80131fe:	b1bd      	cbz	r5, 8013230 <__d2b+0x94>
 8013200:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013204:	4405      	add	r5, r0
 8013206:	603d      	str	r5, [r7, #0]
 8013208:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801320c:	6030      	str	r0, [r6, #0]
 801320e:	4620      	mov	r0, r4
 8013210:	b003      	add	sp, #12
 8013212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801321a:	e7d6      	b.n	80131ca <__d2b+0x2e>
 801321c:	6161      	str	r1, [r4, #20]
 801321e:	e7e7      	b.n	80131f0 <__d2b+0x54>
 8013220:	a801      	add	r0, sp, #4
 8013222:	f7ff fd7b 	bl	8012d1c <__lo0bits>
 8013226:	9b01      	ldr	r3, [sp, #4]
 8013228:	6163      	str	r3, [r4, #20]
 801322a:	3020      	adds	r0, #32
 801322c:	2201      	movs	r2, #1
 801322e:	e7e5      	b.n	80131fc <__d2b+0x60>
 8013230:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013234:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013238:	6038      	str	r0, [r7, #0]
 801323a:	6918      	ldr	r0, [r3, #16]
 801323c:	f7ff fd4e 	bl	8012cdc <__hi0bits>
 8013240:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013244:	e7e2      	b.n	801320c <__d2b+0x70>
 8013246:	bf00      	nop
 8013248:	08014ab1 	.word	0x08014ab1
 801324c:	08014b1a 	.word	0x08014b1a

08013250 <__ssprint_r>:
 8013250:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013254:	6813      	ldr	r3, [r2, #0]
 8013256:	9301      	str	r3, [sp, #4]
 8013258:	6893      	ldr	r3, [r2, #8]
 801325a:	4680      	mov	r8, r0
 801325c:	460c      	mov	r4, r1
 801325e:	4617      	mov	r7, r2
 8013260:	2b00      	cmp	r3, #0
 8013262:	d157      	bne.n	8013314 <__ssprint_r+0xc4>
 8013264:	2000      	movs	r0, #0
 8013266:	2300      	movs	r3, #0
 8013268:	607b      	str	r3, [r7, #4]
 801326a:	b003      	add	sp, #12
 801326c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013270:	9b01      	ldr	r3, [sp, #4]
 8013272:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8013276:	3308      	adds	r3, #8
 8013278:	9301      	str	r3, [sp, #4]
 801327a:	68a6      	ldr	r6, [r4, #8]
 801327c:	6820      	ldr	r0, [r4, #0]
 801327e:	f1bb 0f00 	cmp.w	fp, #0
 8013282:	d0f5      	beq.n	8013270 <__ssprint_r+0x20>
 8013284:	45b3      	cmp	fp, r6
 8013286:	d32d      	bcc.n	80132e4 <__ssprint_r+0x94>
 8013288:	89a2      	ldrh	r2, [r4, #12]
 801328a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801328e:	d029      	beq.n	80132e4 <__ssprint_r+0x94>
 8013290:	6921      	ldr	r1, [r4, #16]
 8013292:	6965      	ldr	r5, [r4, #20]
 8013294:	eba0 0901 	sub.w	r9, r0, r1
 8013298:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801329c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80132a0:	f109 0001 	add.w	r0, r9, #1
 80132a4:	106d      	asrs	r5, r5, #1
 80132a6:	4458      	add	r0, fp
 80132a8:	4285      	cmp	r5, r0
 80132aa:	bf38      	it	cc
 80132ac:	4605      	movcc	r5, r0
 80132ae:	0553      	lsls	r3, r2, #21
 80132b0:	d534      	bpl.n	801331c <__ssprint_r+0xcc>
 80132b2:	4629      	mov	r1, r5
 80132b4:	4640      	mov	r0, r8
 80132b6:	f7fd f841 	bl	801033c <_malloc_r>
 80132ba:	4606      	mov	r6, r0
 80132bc:	2800      	cmp	r0, #0
 80132be:	d038      	beq.n	8013332 <__ssprint_r+0xe2>
 80132c0:	464a      	mov	r2, r9
 80132c2:	6921      	ldr	r1, [r4, #16]
 80132c4:	f7fc ff08 	bl	80100d8 <memcpy>
 80132c8:	89a2      	ldrh	r2, [r4, #12]
 80132ca:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80132ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80132d2:	81a2      	strh	r2, [r4, #12]
 80132d4:	6126      	str	r6, [r4, #16]
 80132d6:	6165      	str	r5, [r4, #20]
 80132d8:	444e      	add	r6, r9
 80132da:	eba5 0509 	sub.w	r5, r5, r9
 80132de:	6026      	str	r6, [r4, #0]
 80132e0:	60a5      	str	r5, [r4, #8]
 80132e2:	465e      	mov	r6, fp
 80132e4:	455e      	cmp	r6, fp
 80132e6:	bf28      	it	cs
 80132e8:	465e      	movcs	r6, fp
 80132ea:	4632      	mov	r2, r6
 80132ec:	4651      	mov	r1, sl
 80132ee:	6820      	ldr	r0, [r4, #0]
 80132f0:	f000 f82b 	bl	801334a <memmove>
 80132f4:	68a2      	ldr	r2, [r4, #8]
 80132f6:	1b92      	subs	r2, r2, r6
 80132f8:	60a2      	str	r2, [r4, #8]
 80132fa:	6822      	ldr	r2, [r4, #0]
 80132fc:	4432      	add	r2, r6
 80132fe:	6022      	str	r2, [r4, #0]
 8013300:	68ba      	ldr	r2, [r7, #8]
 8013302:	eba2 030b 	sub.w	r3, r2, fp
 8013306:	44da      	add	sl, fp
 8013308:	60bb      	str	r3, [r7, #8]
 801330a:	2b00      	cmp	r3, #0
 801330c:	d0aa      	beq.n	8013264 <__ssprint_r+0x14>
 801330e:	f04f 0b00 	mov.w	fp, #0
 8013312:	e7b2      	b.n	801327a <__ssprint_r+0x2a>
 8013314:	f04f 0a00 	mov.w	sl, #0
 8013318:	46d3      	mov	fp, sl
 801331a:	e7ae      	b.n	801327a <__ssprint_r+0x2a>
 801331c:	462a      	mov	r2, r5
 801331e:	4640      	mov	r0, r8
 8013320:	f000 f89a 	bl	8013458 <_realloc_r>
 8013324:	4606      	mov	r6, r0
 8013326:	2800      	cmp	r0, #0
 8013328:	d1d4      	bne.n	80132d4 <__ssprint_r+0x84>
 801332a:	6921      	ldr	r1, [r4, #16]
 801332c:	4640      	mov	r0, r8
 801332e:	f7fc ff45 	bl	80101bc <_free_r>
 8013332:	230c      	movs	r3, #12
 8013334:	f8c8 3000 	str.w	r3, [r8]
 8013338:	89a3      	ldrh	r3, [r4, #12]
 801333a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801333e:	81a3      	strh	r3, [r4, #12]
 8013340:	2300      	movs	r3, #0
 8013342:	60bb      	str	r3, [r7, #8]
 8013344:	f04f 30ff 	mov.w	r0, #4294967295
 8013348:	e78d      	b.n	8013266 <__ssprint_r+0x16>

0801334a <memmove>:
 801334a:	4288      	cmp	r0, r1
 801334c:	b510      	push	{r4, lr}
 801334e:	eb01 0402 	add.w	r4, r1, r2
 8013352:	d902      	bls.n	801335a <memmove+0x10>
 8013354:	4284      	cmp	r4, r0
 8013356:	4623      	mov	r3, r4
 8013358:	d807      	bhi.n	801336a <memmove+0x20>
 801335a:	1e43      	subs	r3, r0, #1
 801335c:	42a1      	cmp	r1, r4
 801335e:	d008      	beq.n	8013372 <memmove+0x28>
 8013360:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013364:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013368:	e7f8      	b.n	801335c <memmove+0x12>
 801336a:	4402      	add	r2, r0
 801336c:	4601      	mov	r1, r0
 801336e:	428a      	cmp	r2, r1
 8013370:	d100      	bne.n	8013374 <memmove+0x2a>
 8013372:	bd10      	pop	{r4, pc}
 8013374:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013378:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801337c:	e7f7      	b.n	801336e <memmove+0x24>
	...

08013380 <__locale_mb_cur_max>:
 8013380:	4b01      	ldr	r3, [pc, #4]	; (8013388 <__locale_mb_cur_max+0x8>)
 8013382:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 8013386:	4770      	bx	lr
 8013388:	20000690 	.word	0x20000690

0801338c <__assert_func>:
 801338c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801338e:	4614      	mov	r4, r2
 8013390:	461a      	mov	r2, r3
 8013392:	4b09      	ldr	r3, [pc, #36]	; (80133b8 <__assert_func+0x2c>)
 8013394:	681b      	ldr	r3, [r3, #0]
 8013396:	4605      	mov	r5, r0
 8013398:	68d8      	ldr	r0, [r3, #12]
 801339a:	b14c      	cbz	r4, 80133b0 <__assert_func+0x24>
 801339c:	4b07      	ldr	r3, [pc, #28]	; (80133bc <__assert_func+0x30>)
 801339e:	9100      	str	r1, [sp, #0]
 80133a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80133a4:	4906      	ldr	r1, [pc, #24]	; (80133c0 <__assert_func+0x34>)
 80133a6:	462b      	mov	r3, r5
 80133a8:	f000 fa0c 	bl	80137c4 <fiprintf>
 80133ac:	f001 f92d 	bl	801460a <abort>
 80133b0:	4b04      	ldr	r3, [pc, #16]	; (80133c4 <__assert_func+0x38>)
 80133b2:	461c      	mov	r4, r3
 80133b4:	e7f3      	b.n	801339e <__assert_func+0x12>
 80133b6:	bf00      	nop
 80133b8:	20000278 	.word	0x20000278
 80133bc:	08014c7e 	.word	0x08014c7e
 80133c0:	08014c8b 	.word	0x08014c8b
 80133c4:	08014cb9 	.word	0x08014cb9

080133c8 <_calloc_r>:
 80133c8:	b538      	push	{r3, r4, r5, lr}
 80133ca:	fba1 1502 	umull	r1, r5, r1, r2
 80133ce:	b92d      	cbnz	r5, 80133dc <_calloc_r+0x14>
 80133d0:	f7fc ffb4 	bl	801033c <_malloc_r>
 80133d4:	4604      	mov	r4, r0
 80133d6:	b938      	cbnz	r0, 80133e8 <_calloc_r+0x20>
 80133d8:	4620      	mov	r0, r4
 80133da:	bd38      	pop	{r3, r4, r5, pc}
 80133dc:	f7fc fe4e 	bl	801007c <__errno>
 80133e0:	230c      	movs	r3, #12
 80133e2:	6003      	str	r3, [r0, #0]
 80133e4:	2400      	movs	r4, #0
 80133e6:	e7f7      	b.n	80133d8 <_calloc_r+0x10>
 80133e8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80133ec:	f022 0203 	bic.w	r2, r2, #3
 80133f0:	3a04      	subs	r2, #4
 80133f2:	2a24      	cmp	r2, #36	; 0x24
 80133f4:	d819      	bhi.n	801342a <_calloc_r+0x62>
 80133f6:	2a13      	cmp	r2, #19
 80133f8:	d915      	bls.n	8013426 <_calloc_r+0x5e>
 80133fa:	2a1b      	cmp	r2, #27
 80133fc:	e9c0 5500 	strd	r5, r5, [r0]
 8013400:	d806      	bhi.n	8013410 <_calloc_r+0x48>
 8013402:	f100 0308 	add.w	r3, r0, #8
 8013406:	2200      	movs	r2, #0
 8013408:	e9c3 2200 	strd	r2, r2, [r3]
 801340c:	609a      	str	r2, [r3, #8]
 801340e:	e7e3      	b.n	80133d8 <_calloc_r+0x10>
 8013410:	2a24      	cmp	r2, #36	; 0x24
 8013412:	e9c0 5502 	strd	r5, r5, [r0, #8]
 8013416:	bf11      	iteee	ne
 8013418:	f100 0310 	addne.w	r3, r0, #16
 801341c:	6105      	streq	r5, [r0, #16]
 801341e:	f100 0318 	addeq.w	r3, r0, #24
 8013422:	6145      	streq	r5, [r0, #20]
 8013424:	e7ef      	b.n	8013406 <_calloc_r+0x3e>
 8013426:	4603      	mov	r3, r0
 8013428:	e7ed      	b.n	8013406 <_calloc_r+0x3e>
 801342a:	4629      	mov	r1, r5
 801342c:	f7fc fdd7 	bl	800ffde <memset>
 8013430:	e7d2      	b.n	80133d8 <_calloc_r+0x10>

08013432 <__ascii_mbtowc>:
 8013432:	b082      	sub	sp, #8
 8013434:	b901      	cbnz	r1, 8013438 <__ascii_mbtowc+0x6>
 8013436:	a901      	add	r1, sp, #4
 8013438:	b142      	cbz	r2, 801344c <__ascii_mbtowc+0x1a>
 801343a:	b14b      	cbz	r3, 8013450 <__ascii_mbtowc+0x1e>
 801343c:	7813      	ldrb	r3, [r2, #0]
 801343e:	600b      	str	r3, [r1, #0]
 8013440:	7812      	ldrb	r2, [r2, #0]
 8013442:	1e10      	subs	r0, r2, #0
 8013444:	bf18      	it	ne
 8013446:	2001      	movne	r0, #1
 8013448:	b002      	add	sp, #8
 801344a:	4770      	bx	lr
 801344c:	4610      	mov	r0, r2
 801344e:	e7fb      	b.n	8013448 <__ascii_mbtowc+0x16>
 8013450:	f06f 0001 	mvn.w	r0, #1
 8013454:	e7f8      	b.n	8013448 <__ascii_mbtowc+0x16>
	...

08013458 <_realloc_r>:
 8013458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801345c:	4682      	mov	sl, r0
 801345e:	460c      	mov	r4, r1
 8013460:	b929      	cbnz	r1, 801346e <_realloc_r+0x16>
 8013462:	4611      	mov	r1, r2
 8013464:	b003      	add	sp, #12
 8013466:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801346a:	f7fc bf67 	b.w	801033c <_malloc_r>
 801346e:	9201      	str	r2, [sp, #4]
 8013470:	f7fd f99e 	bl	80107b0 <__malloc_lock>
 8013474:	9a01      	ldr	r2, [sp, #4]
 8013476:	f854 5c04 	ldr.w	r5, [r4, #-4]
 801347a:	f102 080b 	add.w	r8, r2, #11
 801347e:	f1b8 0f16 	cmp.w	r8, #22
 8013482:	d90b      	bls.n	801349c <_realloc_r+0x44>
 8013484:	f038 0807 	bics.w	r8, r8, #7
 8013488:	d50a      	bpl.n	80134a0 <_realloc_r+0x48>
 801348a:	230c      	movs	r3, #12
 801348c:	f8ca 3000 	str.w	r3, [sl]
 8013490:	f04f 0b00 	mov.w	fp, #0
 8013494:	4658      	mov	r0, fp
 8013496:	b003      	add	sp, #12
 8013498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801349c:	f04f 0810 	mov.w	r8, #16
 80134a0:	4590      	cmp	r8, r2
 80134a2:	d3f2      	bcc.n	801348a <_realloc_r+0x32>
 80134a4:	f025 0603 	bic.w	r6, r5, #3
 80134a8:	45b0      	cmp	r8, r6
 80134aa:	f1a4 0908 	sub.w	r9, r4, #8
 80134ae:	f340 8170 	ble.w	8013792 <_realloc_r+0x33a>
 80134b2:	499c      	ldr	r1, [pc, #624]	; (8013724 <_realloc_r+0x2cc>)
 80134b4:	f8d1 c008 	ldr.w	ip, [r1, #8]
 80134b8:	eb09 0306 	add.w	r3, r9, r6
 80134bc:	459c      	cmp	ip, r3
 80134be:	6859      	ldr	r1, [r3, #4]
 80134c0:	d005      	beq.n	80134ce <_realloc_r+0x76>
 80134c2:	f021 0001 	bic.w	r0, r1, #1
 80134c6:	4418      	add	r0, r3
 80134c8:	6840      	ldr	r0, [r0, #4]
 80134ca:	07c7      	lsls	r7, r0, #31
 80134cc:	d447      	bmi.n	801355e <_realloc_r+0x106>
 80134ce:	f021 0103 	bic.w	r1, r1, #3
 80134d2:	459c      	cmp	ip, r3
 80134d4:	eb06 0701 	add.w	r7, r6, r1
 80134d8:	d119      	bne.n	801350e <_realloc_r+0xb6>
 80134da:	f108 0010 	add.w	r0, r8, #16
 80134de:	42b8      	cmp	r0, r7
 80134e0:	dc3f      	bgt.n	8013562 <_realloc_r+0x10a>
 80134e2:	eb09 0308 	add.w	r3, r9, r8
 80134e6:	4a8f      	ldr	r2, [pc, #572]	; (8013724 <_realloc_r+0x2cc>)
 80134e8:	eba7 0708 	sub.w	r7, r7, r8
 80134ec:	f047 0701 	orr.w	r7, r7, #1
 80134f0:	6093      	str	r3, [r2, #8]
 80134f2:	605f      	str	r7, [r3, #4]
 80134f4:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80134f8:	f003 0301 	and.w	r3, r3, #1
 80134fc:	ea43 0308 	orr.w	r3, r3, r8
 8013500:	f844 3c04 	str.w	r3, [r4, #-4]
 8013504:	4650      	mov	r0, sl
 8013506:	f7fd f959 	bl	80107bc <__malloc_unlock>
 801350a:	46a3      	mov	fp, r4
 801350c:	e7c2      	b.n	8013494 <_realloc_r+0x3c>
 801350e:	45b8      	cmp	r8, r7
 8013510:	dc27      	bgt.n	8013562 <_realloc_r+0x10a>
 8013512:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8013516:	60da      	str	r2, [r3, #12]
 8013518:	6093      	str	r3, [r2, #8]
 801351a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801351e:	eba7 0008 	sub.w	r0, r7, r8
 8013522:	280f      	cmp	r0, #15
 8013524:	f003 0301 	and.w	r3, r3, #1
 8013528:	eb09 0207 	add.w	r2, r9, r7
 801352c:	f240 8133 	bls.w	8013796 <_realloc_r+0x33e>
 8013530:	eb09 0108 	add.w	r1, r9, r8
 8013534:	ea48 0303 	orr.w	r3, r8, r3
 8013538:	f040 0001 	orr.w	r0, r0, #1
 801353c:	f8c9 3004 	str.w	r3, [r9, #4]
 8013540:	6048      	str	r0, [r1, #4]
 8013542:	6853      	ldr	r3, [r2, #4]
 8013544:	f043 0301 	orr.w	r3, r3, #1
 8013548:	6053      	str	r3, [r2, #4]
 801354a:	3108      	adds	r1, #8
 801354c:	4650      	mov	r0, sl
 801354e:	f7fc fe35 	bl	80101bc <_free_r>
 8013552:	4650      	mov	r0, sl
 8013554:	f7fd f932 	bl	80107bc <__malloc_unlock>
 8013558:	f109 0b08 	add.w	fp, r9, #8
 801355c:	e79a      	b.n	8013494 <_realloc_r+0x3c>
 801355e:	2100      	movs	r1, #0
 8013560:	460b      	mov	r3, r1
 8013562:	07e8      	lsls	r0, r5, #31
 8013564:	f100 80c6 	bmi.w	80136f4 <_realloc_r+0x29c>
 8013568:	f854 5c08 	ldr.w	r5, [r4, #-8]
 801356c:	eba9 0505 	sub.w	r5, r9, r5
 8013570:	6868      	ldr	r0, [r5, #4]
 8013572:	f020 0003 	bic.w	r0, r0, #3
 8013576:	eb00 0b06 	add.w	fp, r0, r6
 801357a:	2b00      	cmp	r3, #0
 801357c:	f000 8086 	beq.w	801368c <_realloc_r+0x234>
 8013580:	459c      	cmp	ip, r3
 8013582:	eb01 070b 	add.w	r7, r1, fp
 8013586:	d149      	bne.n	801361c <_realloc_r+0x1c4>
 8013588:	f108 0310 	add.w	r3, r8, #16
 801358c:	42bb      	cmp	r3, r7
 801358e:	dc7d      	bgt.n	801368c <_realloc_r+0x234>
 8013590:	46ab      	mov	fp, r5
 8013592:	68eb      	ldr	r3, [r5, #12]
 8013594:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 8013598:	60d3      	str	r3, [r2, #12]
 801359a:	609a      	str	r2, [r3, #8]
 801359c:	1f32      	subs	r2, r6, #4
 801359e:	2a24      	cmp	r2, #36	; 0x24
 80135a0:	d837      	bhi.n	8013612 <_realloc_r+0x1ba>
 80135a2:	2a13      	cmp	r2, #19
 80135a4:	d933      	bls.n	801360e <_realloc_r+0x1b6>
 80135a6:	6823      	ldr	r3, [r4, #0]
 80135a8:	60ab      	str	r3, [r5, #8]
 80135aa:	6863      	ldr	r3, [r4, #4]
 80135ac:	60eb      	str	r3, [r5, #12]
 80135ae:	2a1b      	cmp	r2, #27
 80135b0:	d81b      	bhi.n	80135ea <_realloc_r+0x192>
 80135b2:	3408      	adds	r4, #8
 80135b4:	f105 0310 	add.w	r3, r5, #16
 80135b8:	6822      	ldr	r2, [r4, #0]
 80135ba:	601a      	str	r2, [r3, #0]
 80135bc:	6862      	ldr	r2, [r4, #4]
 80135be:	605a      	str	r2, [r3, #4]
 80135c0:	68a2      	ldr	r2, [r4, #8]
 80135c2:	609a      	str	r2, [r3, #8]
 80135c4:	eb05 0308 	add.w	r3, r5, r8
 80135c8:	4a56      	ldr	r2, [pc, #344]	; (8013724 <_realloc_r+0x2cc>)
 80135ca:	eba7 0708 	sub.w	r7, r7, r8
 80135ce:	f047 0701 	orr.w	r7, r7, #1
 80135d2:	6093      	str	r3, [r2, #8]
 80135d4:	605f      	str	r7, [r3, #4]
 80135d6:	686b      	ldr	r3, [r5, #4]
 80135d8:	f003 0301 	and.w	r3, r3, #1
 80135dc:	ea43 0308 	orr.w	r3, r3, r8
 80135e0:	606b      	str	r3, [r5, #4]
 80135e2:	4650      	mov	r0, sl
 80135e4:	f7fd f8ea 	bl	80107bc <__malloc_unlock>
 80135e8:	e754      	b.n	8013494 <_realloc_r+0x3c>
 80135ea:	68a3      	ldr	r3, [r4, #8]
 80135ec:	612b      	str	r3, [r5, #16]
 80135ee:	68e3      	ldr	r3, [r4, #12]
 80135f0:	616b      	str	r3, [r5, #20]
 80135f2:	2a24      	cmp	r2, #36	; 0x24
 80135f4:	bf01      	itttt	eq
 80135f6:	6923      	ldreq	r3, [r4, #16]
 80135f8:	61ab      	streq	r3, [r5, #24]
 80135fa:	6962      	ldreq	r2, [r4, #20]
 80135fc:	61ea      	streq	r2, [r5, #28]
 80135fe:	bf19      	ittee	ne
 8013600:	3410      	addne	r4, #16
 8013602:	f105 0318 	addne.w	r3, r5, #24
 8013606:	f105 0320 	addeq.w	r3, r5, #32
 801360a:	3418      	addeq	r4, #24
 801360c:	e7d4      	b.n	80135b8 <_realloc_r+0x160>
 801360e:	465b      	mov	r3, fp
 8013610:	e7d2      	b.n	80135b8 <_realloc_r+0x160>
 8013612:	4621      	mov	r1, r4
 8013614:	4658      	mov	r0, fp
 8013616:	f7ff fe98 	bl	801334a <memmove>
 801361a:	e7d3      	b.n	80135c4 <_realloc_r+0x16c>
 801361c:	45b8      	cmp	r8, r7
 801361e:	dc35      	bgt.n	801368c <_realloc_r+0x234>
 8013620:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8013624:	4628      	mov	r0, r5
 8013626:	60da      	str	r2, [r3, #12]
 8013628:	6093      	str	r3, [r2, #8]
 801362a:	f850 2f08 	ldr.w	r2, [r0, #8]!
 801362e:	68eb      	ldr	r3, [r5, #12]
 8013630:	60d3      	str	r3, [r2, #12]
 8013632:	609a      	str	r2, [r3, #8]
 8013634:	1f32      	subs	r2, r6, #4
 8013636:	2a24      	cmp	r2, #36	; 0x24
 8013638:	d824      	bhi.n	8013684 <_realloc_r+0x22c>
 801363a:	2a13      	cmp	r2, #19
 801363c:	d908      	bls.n	8013650 <_realloc_r+0x1f8>
 801363e:	6823      	ldr	r3, [r4, #0]
 8013640:	60ab      	str	r3, [r5, #8]
 8013642:	6863      	ldr	r3, [r4, #4]
 8013644:	60eb      	str	r3, [r5, #12]
 8013646:	2a1b      	cmp	r2, #27
 8013648:	d80a      	bhi.n	8013660 <_realloc_r+0x208>
 801364a:	3408      	adds	r4, #8
 801364c:	f105 0010 	add.w	r0, r5, #16
 8013650:	6823      	ldr	r3, [r4, #0]
 8013652:	6003      	str	r3, [r0, #0]
 8013654:	6863      	ldr	r3, [r4, #4]
 8013656:	6043      	str	r3, [r0, #4]
 8013658:	68a3      	ldr	r3, [r4, #8]
 801365a:	6083      	str	r3, [r0, #8]
 801365c:	46a9      	mov	r9, r5
 801365e:	e75c      	b.n	801351a <_realloc_r+0xc2>
 8013660:	68a3      	ldr	r3, [r4, #8]
 8013662:	612b      	str	r3, [r5, #16]
 8013664:	68e3      	ldr	r3, [r4, #12]
 8013666:	616b      	str	r3, [r5, #20]
 8013668:	2a24      	cmp	r2, #36	; 0x24
 801366a:	bf01      	itttt	eq
 801366c:	6923      	ldreq	r3, [r4, #16]
 801366e:	61ab      	streq	r3, [r5, #24]
 8013670:	6963      	ldreq	r3, [r4, #20]
 8013672:	61eb      	streq	r3, [r5, #28]
 8013674:	bf19      	ittee	ne
 8013676:	3410      	addne	r4, #16
 8013678:	f105 0018 	addne.w	r0, r5, #24
 801367c:	f105 0020 	addeq.w	r0, r5, #32
 8013680:	3418      	addeq	r4, #24
 8013682:	e7e5      	b.n	8013650 <_realloc_r+0x1f8>
 8013684:	4621      	mov	r1, r4
 8013686:	f7ff fe60 	bl	801334a <memmove>
 801368a:	e7e7      	b.n	801365c <_realloc_r+0x204>
 801368c:	45d8      	cmp	r8, fp
 801368e:	dc31      	bgt.n	80136f4 <_realloc_r+0x29c>
 8013690:	4628      	mov	r0, r5
 8013692:	68eb      	ldr	r3, [r5, #12]
 8013694:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8013698:	60d3      	str	r3, [r2, #12]
 801369a:	609a      	str	r2, [r3, #8]
 801369c:	1f32      	subs	r2, r6, #4
 801369e:	2a24      	cmp	r2, #36	; 0x24
 80136a0:	d824      	bhi.n	80136ec <_realloc_r+0x294>
 80136a2:	2a13      	cmp	r2, #19
 80136a4:	d908      	bls.n	80136b8 <_realloc_r+0x260>
 80136a6:	6823      	ldr	r3, [r4, #0]
 80136a8:	60ab      	str	r3, [r5, #8]
 80136aa:	6863      	ldr	r3, [r4, #4]
 80136ac:	60eb      	str	r3, [r5, #12]
 80136ae:	2a1b      	cmp	r2, #27
 80136b0:	d80a      	bhi.n	80136c8 <_realloc_r+0x270>
 80136b2:	3408      	adds	r4, #8
 80136b4:	f105 0010 	add.w	r0, r5, #16
 80136b8:	6823      	ldr	r3, [r4, #0]
 80136ba:	6003      	str	r3, [r0, #0]
 80136bc:	6863      	ldr	r3, [r4, #4]
 80136be:	6043      	str	r3, [r0, #4]
 80136c0:	68a3      	ldr	r3, [r4, #8]
 80136c2:	6083      	str	r3, [r0, #8]
 80136c4:	465f      	mov	r7, fp
 80136c6:	e7c9      	b.n	801365c <_realloc_r+0x204>
 80136c8:	68a3      	ldr	r3, [r4, #8]
 80136ca:	612b      	str	r3, [r5, #16]
 80136cc:	68e3      	ldr	r3, [r4, #12]
 80136ce:	616b      	str	r3, [r5, #20]
 80136d0:	2a24      	cmp	r2, #36	; 0x24
 80136d2:	bf01      	itttt	eq
 80136d4:	6923      	ldreq	r3, [r4, #16]
 80136d6:	61ab      	streq	r3, [r5, #24]
 80136d8:	6963      	ldreq	r3, [r4, #20]
 80136da:	61eb      	streq	r3, [r5, #28]
 80136dc:	bf19      	ittee	ne
 80136de:	3410      	addne	r4, #16
 80136e0:	f105 0018 	addne.w	r0, r5, #24
 80136e4:	f105 0020 	addeq.w	r0, r5, #32
 80136e8:	3418      	addeq	r4, #24
 80136ea:	e7e5      	b.n	80136b8 <_realloc_r+0x260>
 80136ec:	4621      	mov	r1, r4
 80136ee:	f7ff fe2c 	bl	801334a <memmove>
 80136f2:	e7e7      	b.n	80136c4 <_realloc_r+0x26c>
 80136f4:	4611      	mov	r1, r2
 80136f6:	4650      	mov	r0, sl
 80136f8:	f7fc fe20 	bl	801033c <_malloc_r>
 80136fc:	4683      	mov	fp, r0
 80136fe:	2800      	cmp	r0, #0
 8013700:	f43f af6f 	beq.w	80135e2 <_realloc_r+0x18a>
 8013704:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8013708:	f023 0301 	bic.w	r3, r3, #1
 801370c:	444b      	add	r3, r9
 801370e:	f1a0 0208 	sub.w	r2, r0, #8
 8013712:	4293      	cmp	r3, r2
 8013714:	d108      	bne.n	8013728 <_realloc_r+0x2d0>
 8013716:	f850 7c04 	ldr.w	r7, [r0, #-4]
 801371a:	f027 0703 	bic.w	r7, r7, #3
 801371e:	4437      	add	r7, r6
 8013720:	e6fb      	b.n	801351a <_realloc_r+0xc2>
 8013722:	bf00      	nop
 8013724:	20000280 	.word	0x20000280
 8013728:	1f32      	subs	r2, r6, #4
 801372a:	2a24      	cmp	r2, #36	; 0x24
 801372c:	d82d      	bhi.n	801378a <_realloc_r+0x332>
 801372e:	2a13      	cmp	r2, #19
 8013730:	d928      	bls.n	8013784 <_realloc_r+0x32c>
 8013732:	6823      	ldr	r3, [r4, #0]
 8013734:	6003      	str	r3, [r0, #0]
 8013736:	6863      	ldr	r3, [r4, #4]
 8013738:	6043      	str	r3, [r0, #4]
 801373a:	2a1b      	cmp	r2, #27
 801373c:	d80e      	bhi.n	801375c <_realloc_r+0x304>
 801373e:	f104 0208 	add.w	r2, r4, #8
 8013742:	f100 0308 	add.w	r3, r0, #8
 8013746:	6811      	ldr	r1, [r2, #0]
 8013748:	6019      	str	r1, [r3, #0]
 801374a:	6851      	ldr	r1, [r2, #4]
 801374c:	6059      	str	r1, [r3, #4]
 801374e:	6892      	ldr	r2, [r2, #8]
 8013750:	609a      	str	r2, [r3, #8]
 8013752:	4621      	mov	r1, r4
 8013754:	4650      	mov	r0, sl
 8013756:	f7fc fd31 	bl	80101bc <_free_r>
 801375a:	e742      	b.n	80135e2 <_realloc_r+0x18a>
 801375c:	68a3      	ldr	r3, [r4, #8]
 801375e:	6083      	str	r3, [r0, #8]
 8013760:	68e3      	ldr	r3, [r4, #12]
 8013762:	60c3      	str	r3, [r0, #12]
 8013764:	2a24      	cmp	r2, #36	; 0x24
 8013766:	bf01      	itttt	eq
 8013768:	6923      	ldreq	r3, [r4, #16]
 801376a:	6103      	streq	r3, [r0, #16]
 801376c:	6961      	ldreq	r1, [r4, #20]
 801376e:	6141      	streq	r1, [r0, #20]
 8013770:	bf19      	ittee	ne
 8013772:	f104 0210 	addne.w	r2, r4, #16
 8013776:	f100 0310 	addne.w	r3, r0, #16
 801377a:	f104 0218 	addeq.w	r2, r4, #24
 801377e:	f100 0318 	addeq.w	r3, r0, #24
 8013782:	e7e0      	b.n	8013746 <_realloc_r+0x2ee>
 8013784:	4603      	mov	r3, r0
 8013786:	4622      	mov	r2, r4
 8013788:	e7dd      	b.n	8013746 <_realloc_r+0x2ee>
 801378a:	4621      	mov	r1, r4
 801378c:	f7ff fddd 	bl	801334a <memmove>
 8013790:	e7df      	b.n	8013752 <_realloc_r+0x2fa>
 8013792:	4637      	mov	r7, r6
 8013794:	e6c1      	b.n	801351a <_realloc_r+0xc2>
 8013796:	431f      	orrs	r7, r3
 8013798:	f8c9 7004 	str.w	r7, [r9, #4]
 801379c:	6853      	ldr	r3, [r2, #4]
 801379e:	f043 0301 	orr.w	r3, r3, #1
 80137a2:	6053      	str	r3, [r2, #4]
 80137a4:	e6d5      	b.n	8013552 <_realloc_r+0xfa>
 80137a6:	bf00      	nop

080137a8 <__ascii_wctomb>:
 80137a8:	b149      	cbz	r1, 80137be <__ascii_wctomb+0x16>
 80137aa:	2aff      	cmp	r2, #255	; 0xff
 80137ac:	bf85      	ittet	hi
 80137ae:	238a      	movhi	r3, #138	; 0x8a
 80137b0:	6003      	strhi	r3, [r0, #0]
 80137b2:	700a      	strbls	r2, [r1, #0]
 80137b4:	f04f 30ff 	movhi.w	r0, #4294967295
 80137b8:	bf98      	it	ls
 80137ba:	2001      	movls	r0, #1
 80137bc:	4770      	bx	lr
 80137be:	4608      	mov	r0, r1
 80137c0:	4770      	bx	lr
	...

080137c4 <fiprintf>:
 80137c4:	b40e      	push	{r1, r2, r3}
 80137c6:	b503      	push	{r0, r1, lr}
 80137c8:	4601      	mov	r1, r0
 80137ca:	ab03      	add	r3, sp, #12
 80137cc:	4805      	ldr	r0, [pc, #20]	; (80137e4 <fiprintf+0x20>)
 80137ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80137d2:	6800      	ldr	r0, [r0, #0]
 80137d4:	9301      	str	r3, [sp, #4]
 80137d6:	f000 f839 	bl	801384c <_vfiprintf_r>
 80137da:	b002      	add	sp, #8
 80137dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80137e0:	b003      	add	sp, #12
 80137e2:	4770      	bx	lr
 80137e4:	20000278 	.word	0x20000278

080137e8 <__sprint_r>:
 80137e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137ec:	6893      	ldr	r3, [r2, #8]
 80137ee:	4680      	mov	r8, r0
 80137f0:	460f      	mov	r7, r1
 80137f2:	4614      	mov	r4, r2
 80137f4:	b343      	cbz	r3, 8013848 <__sprint_r+0x60>
 80137f6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80137f8:	049d      	lsls	r5, r3, #18
 80137fa:	d522      	bpl.n	8013842 <__sprint_r+0x5a>
 80137fc:	6815      	ldr	r5, [r2, #0]
 80137fe:	3508      	adds	r5, #8
 8013800:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 8013804:	f04f 0900 	mov.w	r9, #0
 8013808:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 801380c:	45ca      	cmp	sl, r9
 801380e:	dc0d      	bgt.n	801382c <__sprint_r+0x44>
 8013810:	68a3      	ldr	r3, [r4, #8]
 8013812:	f026 0603 	bic.w	r6, r6, #3
 8013816:	1b98      	subs	r0, r3, r6
 8013818:	60a0      	str	r0, [r4, #8]
 801381a:	3508      	adds	r5, #8
 801381c:	2800      	cmp	r0, #0
 801381e:	d1ef      	bne.n	8013800 <__sprint_r+0x18>
 8013820:	2300      	movs	r3, #0
 8013822:	60a3      	str	r3, [r4, #8]
 8013824:	2300      	movs	r3, #0
 8013826:	6063      	str	r3, [r4, #4]
 8013828:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801382c:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 8013830:	463a      	mov	r2, r7
 8013832:	4640      	mov	r0, r8
 8013834:	f000 febf 	bl	80145b6 <_fputwc_r>
 8013838:	1c43      	adds	r3, r0, #1
 801383a:	d0f1      	beq.n	8013820 <__sprint_r+0x38>
 801383c:	f109 0901 	add.w	r9, r9, #1
 8013840:	e7e4      	b.n	801380c <__sprint_r+0x24>
 8013842:	f000 fcd5 	bl	80141f0 <__sfvwrite_r>
 8013846:	e7eb      	b.n	8013820 <__sprint_r+0x38>
 8013848:	4618      	mov	r0, r3
 801384a:	e7eb      	b.n	8013824 <__sprint_r+0x3c>

0801384c <_vfiprintf_r>:
 801384c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013850:	ed2d 8b02 	vpush	{d8}
 8013854:	b0bb      	sub	sp, #236	; 0xec
 8013856:	460f      	mov	r7, r1
 8013858:	9201      	str	r2, [sp, #4]
 801385a:	461d      	mov	r5, r3
 801385c:	461c      	mov	r4, r3
 801385e:	4681      	mov	r9, r0
 8013860:	b118      	cbz	r0, 801386a <_vfiprintf_r+0x1e>
 8013862:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8013864:	b90b      	cbnz	r3, 801386a <_vfiprintf_r+0x1e>
 8013866:	f7fc fb21 	bl	800feac <__sinit>
 801386a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801386c:	07d8      	lsls	r0, r3, #31
 801386e:	d405      	bmi.n	801387c <_vfiprintf_r+0x30>
 8013870:	89bb      	ldrh	r3, [r7, #12]
 8013872:	0599      	lsls	r1, r3, #22
 8013874:	d402      	bmi.n	801387c <_vfiprintf_r+0x30>
 8013876:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8013878:	f7fc fc2c 	bl	80100d4 <__retarget_lock_acquire_recursive>
 801387c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8013880:	049a      	lsls	r2, r3, #18
 8013882:	d406      	bmi.n	8013892 <_vfiprintf_r+0x46>
 8013884:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013888:	81bb      	strh	r3, [r7, #12]
 801388a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801388c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8013890:	667b      	str	r3, [r7, #100]	; 0x64
 8013892:	89bb      	ldrh	r3, [r7, #12]
 8013894:	071e      	lsls	r6, r3, #28
 8013896:	d501      	bpl.n	801389c <_vfiprintf_r+0x50>
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	b9bb      	cbnz	r3, 80138cc <_vfiprintf_r+0x80>
 801389c:	4639      	mov	r1, r7
 801389e:	4648      	mov	r0, r9
 80138a0:	f000 fdf0 	bl	8014484 <__swsetup_r>
 80138a4:	b190      	cbz	r0, 80138cc <_vfiprintf_r+0x80>
 80138a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80138a8:	07d8      	lsls	r0, r3, #31
 80138aa:	d508      	bpl.n	80138be <_vfiprintf_r+0x72>
 80138ac:	f04f 33ff 	mov.w	r3, #4294967295
 80138b0:	9302      	str	r3, [sp, #8]
 80138b2:	9802      	ldr	r0, [sp, #8]
 80138b4:	b03b      	add	sp, #236	; 0xec
 80138b6:	ecbd 8b02 	vpop	{d8}
 80138ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138be:	89bb      	ldrh	r3, [r7, #12]
 80138c0:	0599      	lsls	r1, r3, #22
 80138c2:	d4f3      	bmi.n	80138ac <_vfiprintf_r+0x60>
 80138c4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80138c6:	f7fc fc06 	bl	80100d6 <__retarget_lock_release_recursive>
 80138ca:	e7ef      	b.n	80138ac <_vfiprintf_r+0x60>
 80138cc:	89bb      	ldrh	r3, [r7, #12]
 80138ce:	f003 021a 	and.w	r2, r3, #26
 80138d2:	2a0a      	cmp	r2, #10
 80138d4:	d116      	bne.n	8013904 <_vfiprintf_r+0xb8>
 80138d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80138da:	2a00      	cmp	r2, #0
 80138dc:	db12      	blt.n	8013904 <_vfiprintf_r+0xb8>
 80138de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80138e0:	07d2      	lsls	r2, r2, #31
 80138e2:	d404      	bmi.n	80138ee <_vfiprintf_r+0xa2>
 80138e4:	059e      	lsls	r6, r3, #22
 80138e6:	d402      	bmi.n	80138ee <_vfiprintf_r+0xa2>
 80138e8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80138ea:	f7fc fbf4 	bl	80100d6 <__retarget_lock_release_recursive>
 80138ee:	9a01      	ldr	r2, [sp, #4]
 80138f0:	462b      	mov	r3, r5
 80138f2:	4639      	mov	r1, r7
 80138f4:	4648      	mov	r0, r9
 80138f6:	b03b      	add	sp, #236	; 0xec
 80138f8:	ecbd 8b02 	vpop	{d8}
 80138fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013900:	f000 bc36 	b.w	8014170 <__sbprintf>
 8013904:	2300      	movs	r3, #0
 8013906:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 801390a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 801390e:	ae11      	add	r6, sp, #68	; 0x44
 8013910:	ee08 3a10 	vmov	s16, r3
 8013914:	960e      	str	r6, [sp, #56]	; 0x38
 8013916:	9307      	str	r3, [sp, #28]
 8013918:	9302      	str	r3, [sp, #8]
 801391a:	9b01      	ldr	r3, [sp, #4]
 801391c:	461d      	mov	r5, r3
 801391e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013922:	b10a      	cbz	r2, 8013928 <_vfiprintf_r+0xdc>
 8013924:	2a25      	cmp	r2, #37	; 0x25
 8013926:	d1f9      	bne.n	801391c <_vfiprintf_r+0xd0>
 8013928:	9b01      	ldr	r3, [sp, #4]
 801392a:	ebb5 0803 	subs.w	r8, r5, r3
 801392e:	d00d      	beq.n	801394c <_vfiprintf_r+0x100>
 8013930:	e9c6 3800 	strd	r3, r8, [r6]
 8013934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013936:	4443      	add	r3, r8
 8013938:	9310      	str	r3, [sp, #64]	; 0x40
 801393a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801393c:	3301      	adds	r3, #1
 801393e:	2b07      	cmp	r3, #7
 8013940:	930f      	str	r3, [sp, #60]	; 0x3c
 8013942:	dc76      	bgt.n	8013a32 <_vfiprintf_r+0x1e6>
 8013944:	3608      	adds	r6, #8
 8013946:	9b02      	ldr	r3, [sp, #8]
 8013948:	4443      	add	r3, r8
 801394a:	9302      	str	r3, [sp, #8]
 801394c:	782b      	ldrb	r3, [r5, #0]
 801394e:	2b00      	cmp	r3, #0
 8013950:	f000 83d0 	beq.w	80140f4 <_vfiprintf_r+0x8a8>
 8013954:	2300      	movs	r3, #0
 8013956:	f04f 32ff 	mov.w	r2, #4294967295
 801395a:	3501      	adds	r5, #1
 801395c:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8013960:	9200      	str	r2, [sp, #0]
 8013962:	9303      	str	r3, [sp, #12]
 8013964:	469a      	mov	sl, r3
 8013966:	462a      	mov	r2, r5
 8013968:	f812 3b01 	ldrb.w	r3, [r2], #1
 801396c:	9201      	str	r2, [sp, #4]
 801396e:	f1a3 0220 	sub.w	r2, r3, #32
 8013972:	2a5a      	cmp	r2, #90	; 0x5a
 8013974:	f200 831c 	bhi.w	8013fb0 <_vfiprintf_r+0x764>
 8013978:	e8df f012 	tbh	[pc, r2, lsl #1]
 801397c:	031a007e 	.word	0x031a007e
 8013980:	0086031a 	.word	0x0086031a
 8013984:	031a031a 	.word	0x031a031a
 8013988:	0065031a 	.word	0x0065031a
 801398c:	031a031a 	.word	0x031a031a
 8013990:	00930089 	.word	0x00930089
 8013994:	0090031a 	.word	0x0090031a
 8013998:	031a0095 	.word	0x031a0095
 801399c:	00b300b0 	.word	0x00b300b0
 80139a0:	00b300b3 	.word	0x00b300b3
 80139a4:	00b300b3 	.word	0x00b300b3
 80139a8:	00b300b3 	.word	0x00b300b3
 80139ac:	00b300b3 	.word	0x00b300b3
 80139b0:	031a031a 	.word	0x031a031a
 80139b4:	031a031a 	.word	0x031a031a
 80139b8:	031a031a 	.word	0x031a031a
 80139bc:	031a031a 	.word	0x031a031a
 80139c0:	00dd031a 	.word	0x00dd031a
 80139c4:	031a00eb 	.word	0x031a00eb
 80139c8:	031a031a 	.word	0x031a031a
 80139cc:	031a031a 	.word	0x031a031a
 80139d0:	031a031a 	.word	0x031a031a
 80139d4:	031a031a 	.word	0x031a031a
 80139d8:	013b031a 	.word	0x013b031a
 80139dc:	031a031a 	.word	0x031a031a
 80139e0:	0180031a 	.word	0x0180031a
 80139e4:	025e031a 	.word	0x025e031a
 80139e8:	031a031a 	.word	0x031a031a
 80139ec:	031a027e 	.word	0x031a027e
 80139f0:	031a031a 	.word	0x031a031a
 80139f4:	031a031a 	.word	0x031a031a
 80139f8:	031a031a 	.word	0x031a031a
 80139fc:	031a031a 	.word	0x031a031a
 8013a00:	00dd031a 	.word	0x00dd031a
 8013a04:	031a00ed 	.word	0x031a00ed
 8013a08:	031a031a 	.word	0x031a031a
 8013a0c:	00ed00c3 	.word	0x00ed00c3
 8013a10:	031a00d7 	.word	0x031a00d7
 8013a14:	031a00d0 	.word	0x031a00d0
 8013a18:	013d0119 	.word	0x013d0119
 8013a1c:	00d70172 	.word	0x00d70172
 8013a20:	0180031a 	.word	0x0180031a
 8013a24:	0260007c 	.word	0x0260007c
 8013a28:	031a031a 	.word	0x031a031a
 8013a2c:	031a029a 	.word	0x031a029a
 8013a30:	007c      	.short	0x007c
 8013a32:	aa0e      	add	r2, sp, #56	; 0x38
 8013a34:	4639      	mov	r1, r7
 8013a36:	4648      	mov	r0, r9
 8013a38:	f7ff fed6 	bl	80137e8 <__sprint_r>
 8013a3c:	2800      	cmp	r0, #0
 8013a3e:	f040 8338 	bne.w	80140b2 <_vfiprintf_r+0x866>
 8013a42:	ae11      	add	r6, sp, #68	; 0x44
 8013a44:	e77f      	b.n	8013946 <_vfiprintf_r+0xfa>
 8013a46:	4648      	mov	r0, r9
 8013a48:	f7fe f9ca 	bl	8011de0 <_localeconv_r>
 8013a4c:	6843      	ldr	r3, [r0, #4]
 8013a4e:	4618      	mov	r0, r3
 8013a50:	ee08 3a10 	vmov	s16, r3
 8013a54:	f7ec fc0c 	bl	8000270 <strlen>
 8013a58:	9007      	str	r0, [sp, #28]
 8013a5a:	4648      	mov	r0, r9
 8013a5c:	f7fe f9c0 	bl	8011de0 <_localeconv_r>
 8013a60:	6883      	ldr	r3, [r0, #8]
 8013a62:	9306      	str	r3, [sp, #24]
 8013a64:	9b07      	ldr	r3, [sp, #28]
 8013a66:	b12b      	cbz	r3, 8013a74 <_vfiprintf_r+0x228>
 8013a68:	9b06      	ldr	r3, [sp, #24]
 8013a6a:	b11b      	cbz	r3, 8013a74 <_vfiprintf_r+0x228>
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	b10b      	cbz	r3, 8013a74 <_vfiprintf_r+0x228>
 8013a70:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8013a74:	9d01      	ldr	r5, [sp, #4]
 8013a76:	e776      	b.n	8013966 <_vfiprintf_r+0x11a>
 8013a78:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d1f9      	bne.n	8013a74 <_vfiprintf_r+0x228>
 8013a80:	2320      	movs	r3, #32
 8013a82:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8013a86:	e7f5      	b.n	8013a74 <_vfiprintf_r+0x228>
 8013a88:	f04a 0a01 	orr.w	sl, sl, #1
 8013a8c:	e7f2      	b.n	8013a74 <_vfiprintf_r+0x228>
 8013a8e:	f854 3b04 	ldr.w	r3, [r4], #4
 8013a92:	9303      	str	r3, [sp, #12]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	daed      	bge.n	8013a74 <_vfiprintf_r+0x228>
 8013a98:	425b      	negs	r3, r3
 8013a9a:	9303      	str	r3, [sp, #12]
 8013a9c:	f04a 0a04 	orr.w	sl, sl, #4
 8013aa0:	e7e8      	b.n	8013a74 <_vfiprintf_r+0x228>
 8013aa2:	232b      	movs	r3, #43	; 0x2b
 8013aa4:	e7ed      	b.n	8013a82 <_vfiprintf_r+0x236>
 8013aa6:	9a01      	ldr	r2, [sp, #4]
 8013aa8:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013aac:	2b2a      	cmp	r3, #42	; 0x2a
 8013aae:	d112      	bne.n	8013ad6 <_vfiprintf_r+0x28a>
 8013ab0:	f854 3b04 	ldr.w	r3, [r4], #4
 8013ab4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8013ab8:	e9cd 3200 	strd	r3, r2, [sp]
 8013abc:	e7da      	b.n	8013a74 <_vfiprintf_r+0x228>
 8013abe:	9b00      	ldr	r3, [sp, #0]
 8013ac0:	200a      	movs	r0, #10
 8013ac2:	fb00 1303 	mla	r3, r0, r3, r1
 8013ac6:	9300      	str	r3, [sp, #0]
 8013ac8:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013acc:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013ad0:	2909      	cmp	r1, #9
 8013ad2:	d9f4      	bls.n	8013abe <_vfiprintf_r+0x272>
 8013ad4:	e74a      	b.n	801396c <_vfiprintf_r+0x120>
 8013ad6:	2100      	movs	r1, #0
 8013ad8:	9100      	str	r1, [sp, #0]
 8013ada:	e7f7      	b.n	8013acc <_vfiprintf_r+0x280>
 8013adc:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8013ae0:	e7c8      	b.n	8013a74 <_vfiprintf_r+0x228>
 8013ae2:	2100      	movs	r1, #0
 8013ae4:	9a01      	ldr	r2, [sp, #4]
 8013ae6:	9103      	str	r1, [sp, #12]
 8013ae8:	9903      	ldr	r1, [sp, #12]
 8013aea:	3b30      	subs	r3, #48	; 0x30
 8013aec:	200a      	movs	r0, #10
 8013aee:	fb00 3301 	mla	r3, r0, r1, r3
 8013af2:	9303      	str	r3, [sp, #12]
 8013af4:	f812 3b01 	ldrb.w	r3, [r2], #1
 8013af8:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8013afc:	2909      	cmp	r1, #9
 8013afe:	d9f3      	bls.n	8013ae8 <_vfiprintf_r+0x29c>
 8013b00:	e734      	b.n	801396c <_vfiprintf_r+0x120>
 8013b02:	9b01      	ldr	r3, [sp, #4]
 8013b04:	781b      	ldrb	r3, [r3, #0]
 8013b06:	2b68      	cmp	r3, #104	; 0x68
 8013b08:	bf01      	itttt	eq
 8013b0a:	9b01      	ldreq	r3, [sp, #4]
 8013b0c:	3301      	addeq	r3, #1
 8013b0e:	9301      	streq	r3, [sp, #4]
 8013b10:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8013b14:	bf18      	it	ne
 8013b16:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 8013b1a:	e7ab      	b.n	8013a74 <_vfiprintf_r+0x228>
 8013b1c:	9b01      	ldr	r3, [sp, #4]
 8013b1e:	781b      	ldrb	r3, [r3, #0]
 8013b20:	2b6c      	cmp	r3, #108	; 0x6c
 8013b22:	d105      	bne.n	8013b30 <_vfiprintf_r+0x2e4>
 8013b24:	9b01      	ldr	r3, [sp, #4]
 8013b26:	3301      	adds	r3, #1
 8013b28:	9301      	str	r3, [sp, #4]
 8013b2a:	f04a 0a20 	orr.w	sl, sl, #32
 8013b2e:	e7a1      	b.n	8013a74 <_vfiprintf_r+0x228>
 8013b30:	f04a 0a10 	orr.w	sl, sl, #16
 8013b34:	e79e      	b.n	8013a74 <_vfiprintf_r+0x228>
 8013b36:	46a0      	mov	r8, r4
 8013b38:	f858 3b04 	ldr.w	r3, [r8], #4
 8013b3c:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8013b40:	2300      	movs	r3, #0
 8013b42:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8013b46:	2201      	movs	r2, #1
 8013b48:	9200      	str	r2, [sp, #0]
 8013b4a:	461d      	mov	r5, r3
 8013b4c:	f10d 0b84 	add.w	fp, sp, #132	; 0x84
 8013b50:	e0a9      	b.n	8013ca6 <_vfiprintf_r+0x45a>
 8013b52:	f04a 0a10 	orr.w	sl, sl, #16
 8013b56:	f01a 0f20 	tst.w	sl, #32
 8013b5a:	d011      	beq.n	8013b80 <_vfiprintf_r+0x334>
 8013b5c:	3407      	adds	r4, #7
 8013b5e:	f024 0307 	bic.w	r3, r4, #7
 8013b62:	4698      	mov	r8, r3
 8013b64:	685d      	ldr	r5, [r3, #4]
 8013b66:	f858 4b08 	ldr.w	r4, [r8], #8
 8013b6a:	2d00      	cmp	r5, #0
 8013b6c:	da06      	bge.n	8013b7c <_vfiprintf_r+0x330>
 8013b6e:	4264      	negs	r4, r4
 8013b70:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8013b74:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8013b78:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	e04a      	b.n	8013c16 <_vfiprintf_r+0x3ca>
 8013b80:	46a0      	mov	r8, r4
 8013b82:	f01a 0f10 	tst.w	sl, #16
 8013b86:	f858 5b04 	ldr.w	r5, [r8], #4
 8013b8a:	d002      	beq.n	8013b92 <_vfiprintf_r+0x346>
 8013b8c:	462c      	mov	r4, r5
 8013b8e:	17ed      	asrs	r5, r5, #31
 8013b90:	e7eb      	b.n	8013b6a <_vfiprintf_r+0x31e>
 8013b92:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8013b96:	d003      	beq.n	8013ba0 <_vfiprintf_r+0x354>
 8013b98:	b22c      	sxth	r4, r5
 8013b9a:	f345 35c0 	sbfx	r5, r5, #15, #1
 8013b9e:	e7e4      	b.n	8013b6a <_vfiprintf_r+0x31e>
 8013ba0:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8013ba4:	d0f2      	beq.n	8013b8c <_vfiprintf_r+0x340>
 8013ba6:	b26c      	sxtb	r4, r5
 8013ba8:	f345 15c0 	sbfx	r5, r5, #7, #1
 8013bac:	e7dd      	b.n	8013b6a <_vfiprintf_r+0x31e>
 8013bae:	f01a 0f20 	tst.w	sl, #32
 8013bb2:	f104 0804 	add.w	r8, r4, #4
 8013bb6:	d007      	beq.n	8013bc8 <_vfiprintf_r+0x37c>
 8013bb8:	9a02      	ldr	r2, [sp, #8]
 8013bba:	6823      	ldr	r3, [r4, #0]
 8013bbc:	9902      	ldr	r1, [sp, #8]
 8013bbe:	17d2      	asrs	r2, r2, #31
 8013bc0:	e9c3 1200 	strd	r1, r2, [r3]
 8013bc4:	4644      	mov	r4, r8
 8013bc6:	e6a8      	b.n	801391a <_vfiprintf_r+0xce>
 8013bc8:	f01a 0f10 	tst.w	sl, #16
 8013bcc:	d003      	beq.n	8013bd6 <_vfiprintf_r+0x38a>
 8013bce:	6823      	ldr	r3, [r4, #0]
 8013bd0:	9a02      	ldr	r2, [sp, #8]
 8013bd2:	601a      	str	r2, [r3, #0]
 8013bd4:	e7f6      	b.n	8013bc4 <_vfiprintf_r+0x378>
 8013bd6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8013bda:	d003      	beq.n	8013be4 <_vfiprintf_r+0x398>
 8013bdc:	6823      	ldr	r3, [r4, #0]
 8013bde:	9a02      	ldr	r2, [sp, #8]
 8013be0:	801a      	strh	r2, [r3, #0]
 8013be2:	e7ef      	b.n	8013bc4 <_vfiprintf_r+0x378>
 8013be4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8013be8:	d0f1      	beq.n	8013bce <_vfiprintf_r+0x382>
 8013bea:	6823      	ldr	r3, [r4, #0]
 8013bec:	9a02      	ldr	r2, [sp, #8]
 8013bee:	701a      	strb	r2, [r3, #0]
 8013bf0:	e7e8      	b.n	8013bc4 <_vfiprintf_r+0x378>
 8013bf2:	f04a 0a10 	orr.w	sl, sl, #16
 8013bf6:	f01a 0320 	ands.w	r3, sl, #32
 8013bfa:	d01f      	beq.n	8013c3c <_vfiprintf_r+0x3f0>
 8013bfc:	3407      	adds	r4, #7
 8013bfe:	f024 0307 	bic.w	r3, r4, #7
 8013c02:	4698      	mov	r8, r3
 8013c04:	685d      	ldr	r5, [r3, #4]
 8013c06:	f858 4b08 	ldr.w	r4, [r8], #8
 8013c0a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8013c0e:	2300      	movs	r3, #0
 8013c10:	2200      	movs	r2, #0
 8013c12:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8013c16:	9a00      	ldr	r2, [sp, #0]
 8013c18:	3201      	adds	r2, #1
 8013c1a:	f000 8278 	beq.w	801410e <_vfiprintf_r+0x8c2>
 8013c1e:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 8013c22:	9204      	str	r2, [sp, #16]
 8013c24:	ea54 0205 	orrs.w	r2, r4, r5
 8013c28:	f040 8277 	bne.w	801411a <_vfiprintf_r+0x8ce>
 8013c2c:	9a00      	ldr	r2, [sp, #0]
 8013c2e:	2a00      	cmp	r2, #0
 8013c30:	f000 81b3 	beq.w	8013f9a <_vfiprintf_r+0x74e>
 8013c34:	2b01      	cmp	r3, #1
 8013c36:	f040 8273 	bne.w	8014120 <_vfiprintf_r+0x8d4>
 8013c3a:	e151      	b.n	8013ee0 <_vfiprintf_r+0x694>
 8013c3c:	46a0      	mov	r8, r4
 8013c3e:	f01a 0510 	ands.w	r5, sl, #16
 8013c42:	f858 4b04 	ldr.w	r4, [r8], #4
 8013c46:	d001      	beq.n	8013c4c <_vfiprintf_r+0x400>
 8013c48:	461d      	mov	r5, r3
 8013c4a:	e7de      	b.n	8013c0a <_vfiprintf_r+0x3be>
 8013c4c:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8013c50:	d001      	beq.n	8013c56 <_vfiprintf_r+0x40a>
 8013c52:	b2a4      	uxth	r4, r4
 8013c54:	e7d9      	b.n	8013c0a <_vfiprintf_r+0x3be>
 8013c56:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8013c5a:	d0d6      	beq.n	8013c0a <_vfiprintf_r+0x3be>
 8013c5c:	b2e4      	uxtb	r4, r4
 8013c5e:	e7f3      	b.n	8013c48 <_vfiprintf_r+0x3fc>
 8013c60:	46a0      	mov	r8, r4
 8013c62:	f647 0330 	movw	r3, #30768	; 0x7830
 8013c66:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8013c6a:	f858 4b04 	ldr.w	r4, [r8], #4
 8013c6e:	4b9f      	ldr	r3, [pc, #636]	; (8013eec <_vfiprintf_r+0x6a0>)
 8013c70:	9305      	str	r3, [sp, #20]
 8013c72:	2500      	movs	r5, #0
 8013c74:	f04a 0a02 	orr.w	sl, sl, #2
 8013c78:	2302      	movs	r3, #2
 8013c7a:	e7c9      	b.n	8013c10 <_vfiprintf_r+0x3c4>
 8013c7c:	9b00      	ldr	r3, [sp, #0]
 8013c7e:	46a0      	mov	r8, r4
 8013c80:	2500      	movs	r5, #0
 8013c82:	1c5c      	adds	r4, r3, #1
 8013c84:	f858 bb04 	ldr.w	fp, [r8], #4
 8013c88:	f88d 5033 	strb.w	r5, [sp, #51]	; 0x33
 8013c8c:	f000 80cf 	beq.w	8013e2e <_vfiprintf_r+0x5e2>
 8013c90:	461a      	mov	r2, r3
 8013c92:	4629      	mov	r1, r5
 8013c94:	4658      	mov	r0, fp
 8013c96:	f7ec fa9b 	bl	80001d0 <memchr>
 8013c9a:	2800      	cmp	r0, #0
 8013c9c:	f000 8192 	beq.w	8013fc4 <_vfiprintf_r+0x778>
 8013ca0:	eba0 030b 	sub.w	r3, r0, fp
 8013ca4:	9300      	str	r3, [sp, #0]
 8013ca6:	9b00      	ldr	r3, [sp, #0]
 8013ca8:	f89d 2033 	ldrb.w	r2, [sp, #51]	; 0x33
 8013cac:	42ab      	cmp	r3, r5
 8013cae:	bfb8      	it	lt
 8013cb0:	462b      	movlt	r3, r5
 8013cb2:	9304      	str	r3, [sp, #16]
 8013cb4:	b10a      	cbz	r2, 8013cba <_vfiprintf_r+0x46e>
 8013cb6:	3301      	adds	r3, #1
 8013cb8:	9304      	str	r3, [sp, #16]
 8013cba:	f01a 0302 	ands.w	r3, sl, #2
 8013cbe:	9308      	str	r3, [sp, #32]
 8013cc0:	bf1e      	ittt	ne
 8013cc2:	9b04      	ldrne	r3, [sp, #16]
 8013cc4:	3302      	addne	r3, #2
 8013cc6:	9304      	strne	r3, [sp, #16]
 8013cc8:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8013ccc:	9309      	str	r3, [sp, #36]	; 0x24
 8013cce:	d11f      	bne.n	8013d10 <_vfiprintf_r+0x4c4>
 8013cd0:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8013cd4:	1a9c      	subs	r4, r3, r2
 8013cd6:	2c00      	cmp	r4, #0
 8013cd8:	dd1a      	ble.n	8013d10 <_vfiprintf_r+0x4c4>
 8013cda:	4b85      	ldr	r3, [pc, #532]	; (8013ef0 <_vfiprintf_r+0x6a4>)
 8013cdc:	6033      	str	r3, [r6, #0]
 8013cde:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 8013ce2:	2c10      	cmp	r4, #16
 8013ce4:	f102 0201 	add.w	r2, r2, #1
 8013ce8:	f106 0008 	add.w	r0, r6, #8
 8013cec:	f300 816c 	bgt.w	8013fc8 <_vfiprintf_r+0x77c>
 8013cf0:	6074      	str	r4, [r6, #4]
 8013cf2:	2a07      	cmp	r2, #7
 8013cf4:	4464      	add	r4, ip
 8013cf6:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8013cfa:	f340 8178 	ble.w	8013fee <_vfiprintf_r+0x7a2>
 8013cfe:	aa0e      	add	r2, sp, #56	; 0x38
 8013d00:	4639      	mov	r1, r7
 8013d02:	4648      	mov	r0, r9
 8013d04:	f7ff fd70 	bl	80137e8 <__sprint_r>
 8013d08:	2800      	cmp	r0, #0
 8013d0a:	f040 81d2 	bne.w	80140b2 <_vfiprintf_r+0x866>
 8013d0e:	ae11      	add	r6, sp, #68	; 0x44
 8013d10:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 8013d14:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8013d18:	b160      	cbz	r0, 8013d34 <_vfiprintf_r+0x4e8>
 8013d1a:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 8013d1e:	3201      	adds	r2, #1
 8013d20:	6030      	str	r0, [r6, #0]
 8013d22:	2001      	movs	r0, #1
 8013d24:	4401      	add	r1, r0
 8013d26:	2a07      	cmp	r2, #7
 8013d28:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8013d2c:	6070      	str	r0, [r6, #4]
 8013d2e:	f300 8160 	bgt.w	8013ff2 <_vfiprintf_r+0x7a6>
 8013d32:	3608      	adds	r6, #8
 8013d34:	9b08      	ldr	r3, [sp, #32]
 8013d36:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8013d3a:	b15b      	cbz	r3, 8013d54 <_vfiprintf_r+0x508>
 8013d3c:	a80d      	add	r0, sp, #52	; 0x34
 8013d3e:	3201      	adds	r2, #1
 8013d40:	6030      	str	r0, [r6, #0]
 8013d42:	2002      	movs	r0, #2
 8013d44:	4401      	add	r1, r0
 8013d46:	2a07      	cmp	r2, #7
 8013d48:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8013d4c:	6070      	str	r0, [r6, #4]
 8013d4e:	f300 8159 	bgt.w	8014004 <_vfiprintf_r+0x7b8>
 8013d52:	3608      	adds	r6, #8
 8013d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d56:	2b80      	cmp	r3, #128	; 0x80
 8013d58:	d11f      	bne.n	8013d9a <_vfiprintf_r+0x54e>
 8013d5a:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 8013d5e:	1a9c      	subs	r4, r3, r2
 8013d60:	2c00      	cmp	r4, #0
 8013d62:	dd1a      	ble.n	8013d9a <_vfiprintf_r+0x54e>
 8013d64:	4b63      	ldr	r3, [pc, #396]	; (8013ef4 <_vfiprintf_r+0x6a8>)
 8013d66:	6033      	str	r3, [r6, #0]
 8013d68:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	; 0x3c
 8013d6c:	2c10      	cmp	r4, #16
 8013d6e:	f102 0201 	add.w	r2, r2, #1
 8013d72:	f106 0008 	add.w	r0, r6, #8
 8013d76:	f300 814e 	bgt.w	8014016 <_vfiprintf_r+0x7ca>
 8013d7a:	6074      	str	r4, [r6, #4]
 8013d7c:	2a07      	cmp	r2, #7
 8013d7e:	4464      	add	r4, ip
 8013d80:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8013d84:	f340 815a 	ble.w	801403c <_vfiprintf_r+0x7f0>
 8013d88:	aa0e      	add	r2, sp, #56	; 0x38
 8013d8a:	4639      	mov	r1, r7
 8013d8c:	4648      	mov	r0, r9
 8013d8e:	f7ff fd2b 	bl	80137e8 <__sprint_r>
 8013d92:	2800      	cmp	r0, #0
 8013d94:	f040 818d 	bne.w	80140b2 <_vfiprintf_r+0x866>
 8013d98:	ae11      	add	r6, sp, #68	; 0x44
 8013d9a:	9b00      	ldr	r3, [sp, #0]
 8013d9c:	1aec      	subs	r4, r5, r3
 8013d9e:	2c00      	cmp	r4, #0
 8013da0:	dd1b      	ble.n	8013dda <_vfiprintf_r+0x58e>
 8013da2:	4d54      	ldr	r5, [pc, #336]	; (8013ef4 <_vfiprintf_r+0x6a8>)
 8013da4:	2310      	movs	r3, #16
 8013da6:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 8013daa:	2c10      	cmp	r4, #16
 8013dac:	f102 0201 	add.w	r2, r2, #1
 8013db0:	f106 0008 	add.w	r0, r6, #8
 8013db4:	6035      	str	r5, [r6, #0]
 8013db6:	f300 8143 	bgt.w	8014040 <_vfiprintf_r+0x7f4>
 8013dba:	6074      	str	r4, [r6, #4]
 8013dbc:	2a07      	cmp	r2, #7
 8013dbe:	440c      	add	r4, r1
 8013dc0:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 8013dc4:	f340 814d 	ble.w	8014062 <_vfiprintf_r+0x816>
 8013dc8:	aa0e      	add	r2, sp, #56	; 0x38
 8013dca:	4639      	mov	r1, r7
 8013dcc:	4648      	mov	r0, r9
 8013dce:	f7ff fd0b 	bl	80137e8 <__sprint_r>
 8013dd2:	2800      	cmp	r0, #0
 8013dd4:	f040 816d 	bne.w	80140b2 <_vfiprintf_r+0x866>
 8013dd8:	ae11      	add	r6, sp, #68	; 0x44
 8013dda:	9b00      	ldr	r3, [sp, #0]
 8013ddc:	9a00      	ldr	r2, [sp, #0]
 8013dde:	6073      	str	r3, [r6, #4]
 8013de0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013de2:	f8c6 b000 	str.w	fp, [r6]
 8013de6:	4413      	add	r3, r2
 8013de8:	9310      	str	r3, [sp, #64]	; 0x40
 8013dea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013dec:	3301      	adds	r3, #1
 8013dee:	2b07      	cmp	r3, #7
 8013df0:	930f      	str	r3, [sp, #60]	; 0x3c
 8013df2:	f300 8138 	bgt.w	8014066 <_vfiprintf_r+0x81a>
 8013df6:	f106 0308 	add.w	r3, r6, #8
 8013dfa:	f01a 0f04 	tst.w	sl, #4
 8013dfe:	f040 813a 	bne.w	8014076 <_vfiprintf_r+0x82a>
 8013e02:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8013e06:	9904      	ldr	r1, [sp, #16]
 8013e08:	428a      	cmp	r2, r1
 8013e0a:	bfac      	ite	ge
 8013e0c:	189b      	addge	r3, r3, r2
 8013e0e:	185b      	addlt	r3, r3, r1
 8013e10:	9302      	str	r3, [sp, #8]
 8013e12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013e14:	b13b      	cbz	r3, 8013e26 <_vfiprintf_r+0x5da>
 8013e16:	aa0e      	add	r2, sp, #56	; 0x38
 8013e18:	4639      	mov	r1, r7
 8013e1a:	4648      	mov	r0, r9
 8013e1c:	f7ff fce4 	bl	80137e8 <__sprint_r>
 8013e20:	2800      	cmp	r0, #0
 8013e22:	f040 8146 	bne.w	80140b2 <_vfiprintf_r+0x866>
 8013e26:	2300      	movs	r3, #0
 8013e28:	930f      	str	r3, [sp, #60]	; 0x3c
 8013e2a:	ae11      	add	r6, sp, #68	; 0x44
 8013e2c:	e6ca      	b.n	8013bc4 <_vfiprintf_r+0x378>
 8013e2e:	4658      	mov	r0, fp
 8013e30:	f7ec fa1e 	bl	8000270 <strlen>
 8013e34:	9000      	str	r0, [sp, #0]
 8013e36:	e736      	b.n	8013ca6 <_vfiprintf_r+0x45a>
 8013e38:	f04a 0a10 	orr.w	sl, sl, #16
 8013e3c:	f01a 0320 	ands.w	r3, sl, #32
 8013e40:	d008      	beq.n	8013e54 <_vfiprintf_r+0x608>
 8013e42:	3407      	adds	r4, #7
 8013e44:	f024 0307 	bic.w	r3, r4, #7
 8013e48:	4698      	mov	r8, r3
 8013e4a:	685d      	ldr	r5, [r3, #4]
 8013e4c:	f858 4b08 	ldr.w	r4, [r8], #8
 8013e50:	2301      	movs	r3, #1
 8013e52:	e6dd      	b.n	8013c10 <_vfiprintf_r+0x3c4>
 8013e54:	46a0      	mov	r8, r4
 8013e56:	f01a 0510 	ands.w	r5, sl, #16
 8013e5a:	f858 4b04 	ldr.w	r4, [r8], #4
 8013e5e:	d001      	beq.n	8013e64 <_vfiprintf_r+0x618>
 8013e60:	461d      	mov	r5, r3
 8013e62:	e7f5      	b.n	8013e50 <_vfiprintf_r+0x604>
 8013e64:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
 8013e68:	d001      	beq.n	8013e6e <_vfiprintf_r+0x622>
 8013e6a:	b2a4      	uxth	r4, r4
 8013e6c:	e7f0      	b.n	8013e50 <_vfiprintf_r+0x604>
 8013e6e:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8013e72:	d0ed      	beq.n	8013e50 <_vfiprintf_r+0x604>
 8013e74:	b2e4      	uxtb	r4, r4
 8013e76:	e7f3      	b.n	8013e60 <_vfiprintf_r+0x614>
 8013e78:	4a1f      	ldr	r2, [pc, #124]	; (8013ef8 <_vfiprintf_r+0x6ac>)
 8013e7a:	9205      	str	r2, [sp, #20]
 8013e7c:	f01a 0220 	ands.w	r2, sl, #32
 8013e80:	d018      	beq.n	8013eb4 <_vfiprintf_r+0x668>
 8013e82:	3407      	adds	r4, #7
 8013e84:	f024 0207 	bic.w	r2, r4, #7
 8013e88:	4690      	mov	r8, r2
 8013e8a:	6855      	ldr	r5, [r2, #4]
 8013e8c:	f858 4b08 	ldr.w	r4, [r8], #8
 8013e90:	f01a 0f01 	tst.w	sl, #1
 8013e94:	d009      	beq.n	8013eaa <_vfiprintf_r+0x65e>
 8013e96:	ea54 0205 	orrs.w	r2, r4, r5
 8013e9a:	bf1f      	itttt	ne
 8013e9c:	2230      	movne	r2, #48	; 0x30
 8013e9e:	f88d 2034 	strbne.w	r2, [sp, #52]	; 0x34
 8013ea2:	f88d 3035 	strbne.w	r3, [sp, #53]	; 0x35
 8013ea6:	f04a 0a02 	orrne.w	sl, sl, #2
 8013eaa:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8013eae:	e6e3      	b.n	8013c78 <_vfiprintf_r+0x42c>
 8013eb0:	4a0e      	ldr	r2, [pc, #56]	; (8013eec <_vfiprintf_r+0x6a0>)
 8013eb2:	e7e2      	b.n	8013e7a <_vfiprintf_r+0x62e>
 8013eb4:	46a0      	mov	r8, r4
 8013eb6:	f01a 0510 	ands.w	r5, sl, #16
 8013eba:	f858 4b04 	ldr.w	r4, [r8], #4
 8013ebe:	d001      	beq.n	8013ec4 <_vfiprintf_r+0x678>
 8013ec0:	4615      	mov	r5, r2
 8013ec2:	e7e5      	b.n	8013e90 <_vfiprintf_r+0x644>
 8013ec4:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
 8013ec8:	d001      	beq.n	8013ece <_vfiprintf_r+0x682>
 8013eca:	b2a4      	uxth	r4, r4
 8013ecc:	e7e0      	b.n	8013e90 <_vfiprintf_r+0x644>
 8013ece:	f41a 7500 	ands.w	r5, sl, #512	; 0x200
 8013ed2:	d0dd      	beq.n	8013e90 <_vfiprintf_r+0x644>
 8013ed4:	b2e4      	uxtb	r4, r4
 8013ed6:	e7f3      	b.n	8013ec0 <_vfiprintf_r+0x674>
 8013ed8:	2c0a      	cmp	r4, #10
 8013eda:	f175 0300 	sbcs.w	r3, r5, #0
 8013ede:	d20d      	bcs.n	8013efc <_vfiprintf_r+0x6b0>
 8013ee0:	3430      	adds	r4, #48	; 0x30
 8013ee2:	f88d 40e7 	strb.w	r4, [sp, #231]	; 0xe7
 8013ee6:	f10d 0be7 	add.w	fp, sp, #231	; 0xe7
 8013eea:	e135      	b.n	8014158 <_vfiprintf_r+0x90c>
 8013eec:	08014a60 	.word	0x08014a60
 8013ef0:	08014dbb 	.word	0x08014dbb
 8013ef4:	08014dcb 	.word	0x08014dcb
 8013ef8:	08014a71 	.word	0x08014a71
 8013efc:	ab3a      	add	r3, sp, #232	; 0xe8
 8013efe:	9308      	str	r3, [sp, #32]
 8013f00:	9b04      	ldr	r3, [sp, #16]
 8013f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8013f06:	f04f 0a00 	mov.w	sl, #0
 8013f0a:	9309      	str	r3, [sp, #36]	; 0x24
 8013f0c:	220a      	movs	r2, #10
 8013f0e:	2300      	movs	r3, #0
 8013f10:	4620      	mov	r0, r4
 8013f12:	4629      	mov	r1, r5
 8013f14:	f7ec fe98 	bl	8000c48 <__aeabi_uldivmod>
 8013f18:	9b08      	ldr	r3, [sp, #32]
 8013f1a:	3230      	adds	r2, #48	; 0x30
 8013f1c:	f103 3bff 	add.w	fp, r3, #4294967295
 8013f20:	f803 2c01 	strb.w	r2, [r3, #-1]
 8013f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f26:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8013f2a:	f10a 0a01 	add.w	sl, sl, #1
 8013f2e:	b1d3      	cbz	r3, 8013f66 <_vfiprintf_r+0x71a>
 8013f30:	9b06      	ldr	r3, [sp, #24]
 8013f32:	781a      	ldrb	r2, [r3, #0]
 8013f34:	4552      	cmp	r2, sl
 8013f36:	d116      	bne.n	8013f66 <_vfiprintf_r+0x71a>
 8013f38:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8013f3c:	d013      	beq.n	8013f66 <_vfiprintf_r+0x71a>
 8013f3e:	2c0a      	cmp	r4, #10
 8013f40:	f175 0200 	sbcs.w	r2, r5, #0
 8013f44:	d30f      	bcc.n	8013f66 <_vfiprintf_r+0x71a>
 8013f46:	9b07      	ldr	r3, [sp, #28]
 8013f48:	ebab 0b03 	sub.w	fp, fp, r3
 8013f4c:	461a      	mov	r2, r3
 8013f4e:	ee18 1a10 	vmov	r1, s16
 8013f52:	4658      	mov	r0, fp
 8013f54:	f7fd ff31 	bl	8011dba <strncpy>
 8013f58:	9b06      	ldr	r3, [sp, #24]
 8013f5a:	785a      	ldrb	r2, [r3, #1]
 8013f5c:	b16a      	cbz	r2, 8013f7a <_vfiprintf_r+0x72e>
 8013f5e:	3301      	adds	r3, #1
 8013f60:	9306      	str	r3, [sp, #24]
 8013f62:	f04f 0a00 	mov.w	sl, #0
 8013f66:	2c0a      	cmp	r4, #10
 8013f68:	f175 0500 	sbcs.w	r5, r5, #0
 8013f6c:	f0c0 80f4 	bcc.w	8014158 <_vfiprintf_r+0x90c>
 8013f70:	e9dd 450a 	ldrd	r4, r5, [sp, #40]	; 0x28
 8013f74:	f8cd b020 	str.w	fp, [sp, #32]
 8013f78:	e7c8      	b.n	8013f0c <_vfiprintf_r+0x6c0>
 8013f7a:	4692      	mov	sl, r2
 8013f7c:	e7f3      	b.n	8013f66 <_vfiprintf_r+0x71a>
 8013f7e:	f004 020f 	and.w	r2, r4, #15
 8013f82:	9b05      	ldr	r3, [sp, #20]
 8013f84:	0924      	lsrs	r4, r4, #4
 8013f86:	5c9a      	ldrb	r2, [r3, r2]
 8013f88:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8013f8c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8013f90:	092d      	lsrs	r5, r5, #4
 8013f92:	ea54 0205 	orrs.w	r2, r4, r5
 8013f96:	d1f2      	bne.n	8013f7e <_vfiprintf_r+0x732>
 8013f98:	e0de      	b.n	8014158 <_vfiprintf_r+0x90c>
 8013f9a:	b933      	cbnz	r3, 8013faa <_vfiprintf_r+0x75e>
 8013f9c:	f01a 0f01 	tst.w	sl, #1
 8013fa0:	d003      	beq.n	8013faa <_vfiprintf_r+0x75e>
 8013fa2:	2330      	movs	r3, #48	; 0x30
 8013fa4:	f88d 30e7 	strb.w	r3, [sp, #231]	; 0xe7
 8013fa8:	e79d      	b.n	8013ee6 <_vfiprintf_r+0x69a>
 8013faa:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 8013fae:	e0d3      	b.n	8014158 <_vfiprintf_r+0x90c>
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	f000 809f 	beq.w	80140f4 <_vfiprintf_r+0x8a8>
 8013fb6:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
 8013fba:	2300      	movs	r3, #0
 8013fbc:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8013fc0:	46a0      	mov	r8, r4
 8013fc2:	e5c0      	b.n	8013b46 <_vfiprintf_r+0x2fa>
 8013fc4:	4605      	mov	r5, r0
 8013fc6:	e66e      	b.n	8013ca6 <_vfiprintf_r+0x45a>
 8013fc8:	2110      	movs	r1, #16
 8013fca:	6071      	str	r1, [r6, #4]
 8013fcc:	2a07      	cmp	r2, #7
 8013fce:	4461      	add	r1, ip
 8013fd0:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8013fd4:	dd08      	ble.n	8013fe8 <_vfiprintf_r+0x79c>
 8013fd6:	aa0e      	add	r2, sp, #56	; 0x38
 8013fd8:	4639      	mov	r1, r7
 8013fda:	4648      	mov	r0, r9
 8013fdc:	f7ff fc04 	bl	80137e8 <__sprint_r>
 8013fe0:	2800      	cmp	r0, #0
 8013fe2:	d166      	bne.n	80140b2 <_vfiprintf_r+0x866>
 8013fe4:	4b60      	ldr	r3, [pc, #384]	; (8014168 <_vfiprintf_r+0x91c>)
 8013fe6:	a811      	add	r0, sp, #68	; 0x44
 8013fe8:	3c10      	subs	r4, #16
 8013fea:	4606      	mov	r6, r0
 8013fec:	e676      	b.n	8013cdc <_vfiprintf_r+0x490>
 8013fee:	4606      	mov	r6, r0
 8013ff0:	e68e      	b.n	8013d10 <_vfiprintf_r+0x4c4>
 8013ff2:	aa0e      	add	r2, sp, #56	; 0x38
 8013ff4:	4639      	mov	r1, r7
 8013ff6:	4648      	mov	r0, r9
 8013ff8:	f7ff fbf6 	bl	80137e8 <__sprint_r>
 8013ffc:	2800      	cmp	r0, #0
 8013ffe:	d158      	bne.n	80140b2 <_vfiprintf_r+0x866>
 8014000:	ae11      	add	r6, sp, #68	; 0x44
 8014002:	e697      	b.n	8013d34 <_vfiprintf_r+0x4e8>
 8014004:	aa0e      	add	r2, sp, #56	; 0x38
 8014006:	4639      	mov	r1, r7
 8014008:	4648      	mov	r0, r9
 801400a:	f7ff fbed 	bl	80137e8 <__sprint_r>
 801400e:	2800      	cmp	r0, #0
 8014010:	d14f      	bne.n	80140b2 <_vfiprintf_r+0x866>
 8014012:	ae11      	add	r6, sp, #68	; 0x44
 8014014:	e69e      	b.n	8013d54 <_vfiprintf_r+0x508>
 8014016:	2110      	movs	r1, #16
 8014018:	6071      	str	r1, [r6, #4]
 801401a:	2a07      	cmp	r2, #7
 801401c:	4461      	add	r1, ip
 801401e:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8014022:	dd08      	ble.n	8014036 <_vfiprintf_r+0x7ea>
 8014024:	aa0e      	add	r2, sp, #56	; 0x38
 8014026:	4639      	mov	r1, r7
 8014028:	4648      	mov	r0, r9
 801402a:	f7ff fbdd 	bl	80137e8 <__sprint_r>
 801402e:	2800      	cmp	r0, #0
 8014030:	d13f      	bne.n	80140b2 <_vfiprintf_r+0x866>
 8014032:	4b4e      	ldr	r3, [pc, #312]	; (801416c <_vfiprintf_r+0x920>)
 8014034:	a811      	add	r0, sp, #68	; 0x44
 8014036:	3c10      	subs	r4, #16
 8014038:	4606      	mov	r6, r0
 801403a:	e694      	b.n	8013d66 <_vfiprintf_r+0x51a>
 801403c:	4606      	mov	r6, r0
 801403e:	e6ac      	b.n	8013d9a <_vfiprintf_r+0x54e>
 8014040:	3110      	adds	r1, #16
 8014042:	2a07      	cmp	r2, #7
 8014044:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 8014048:	6073      	str	r3, [r6, #4]
 801404a:	dd07      	ble.n	801405c <_vfiprintf_r+0x810>
 801404c:	aa0e      	add	r2, sp, #56	; 0x38
 801404e:	4639      	mov	r1, r7
 8014050:	4648      	mov	r0, r9
 8014052:	f7ff fbc9 	bl	80137e8 <__sprint_r>
 8014056:	bb60      	cbnz	r0, 80140b2 <_vfiprintf_r+0x866>
 8014058:	a811      	add	r0, sp, #68	; 0x44
 801405a:	2310      	movs	r3, #16
 801405c:	3c10      	subs	r4, #16
 801405e:	4606      	mov	r6, r0
 8014060:	e6a1      	b.n	8013da6 <_vfiprintf_r+0x55a>
 8014062:	4606      	mov	r6, r0
 8014064:	e6b9      	b.n	8013dda <_vfiprintf_r+0x58e>
 8014066:	aa0e      	add	r2, sp, #56	; 0x38
 8014068:	4639      	mov	r1, r7
 801406a:	4648      	mov	r0, r9
 801406c:	f7ff fbbc 	bl	80137e8 <__sprint_r>
 8014070:	b9f8      	cbnz	r0, 80140b2 <_vfiprintf_r+0x866>
 8014072:	ab11      	add	r3, sp, #68	; 0x44
 8014074:	e6c1      	b.n	8013dfa <_vfiprintf_r+0x5ae>
 8014076:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 801407a:	1a54      	subs	r4, r2, r1
 801407c:	2c00      	cmp	r4, #0
 801407e:	f77f aec0 	ble.w	8013e02 <_vfiprintf_r+0x5b6>
 8014082:	4d39      	ldr	r5, [pc, #228]	; (8014168 <_vfiprintf_r+0x91c>)
 8014084:	2610      	movs	r6, #16
 8014086:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	; 0x3c
 801408a:	2c10      	cmp	r4, #16
 801408c:	f102 0201 	add.w	r2, r2, #1
 8014090:	601d      	str	r5, [r3, #0]
 8014092:	dc1d      	bgt.n	80140d0 <_vfiprintf_r+0x884>
 8014094:	605c      	str	r4, [r3, #4]
 8014096:	2a07      	cmp	r2, #7
 8014098:	440c      	add	r4, r1
 801409a:	e9cd 240f 	strd	r2, r4, [sp, #60]	; 0x3c
 801409e:	f77f aeb0 	ble.w	8013e02 <_vfiprintf_r+0x5b6>
 80140a2:	aa0e      	add	r2, sp, #56	; 0x38
 80140a4:	4639      	mov	r1, r7
 80140a6:	4648      	mov	r0, r9
 80140a8:	f7ff fb9e 	bl	80137e8 <__sprint_r>
 80140ac:	2800      	cmp	r0, #0
 80140ae:	f43f aea8 	beq.w	8013e02 <_vfiprintf_r+0x5b6>
 80140b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80140b4:	07d9      	lsls	r1, r3, #31
 80140b6:	d405      	bmi.n	80140c4 <_vfiprintf_r+0x878>
 80140b8:	89bb      	ldrh	r3, [r7, #12]
 80140ba:	059a      	lsls	r2, r3, #22
 80140bc:	d402      	bmi.n	80140c4 <_vfiprintf_r+0x878>
 80140be:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80140c0:	f7fc f809 	bl	80100d6 <__retarget_lock_release_recursive>
 80140c4:	89bb      	ldrh	r3, [r7, #12]
 80140c6:	065b      	lsls	r3, r3, #25
 80140c8:	f57f abf3 	bpl.w	80138b2 <_vfiprintf_r+0x66>
 80140cc:	f7ff bbee 	b.w	80138ac <_vfiprintf_r+0x60>
 80140d0:	3110      	adds	r1, #16
 80140d2:	2a07      	cmp	r2, #7
 80140d4:	e9cd 210f 	strd	r2, r1, [sp, #60]	; 0x3c
 80140d8:	605e      	str	r6, [r3, #4]
 80140da:	dc02      	bgt.n	80140e2 <_vfiprintf_r+0x896>
 80140dc:	3308      	adds	r3, #8
 80140de:	3c10      	subs	r4, #16
 80140e0:	e7d1      	b.n	8014086 <_vfiprintf_r+0x83a>
 80140e2:	aa0e      	add	r2, sp, #56	; 0x38
 80140e4:	4639      	mov	r1, r7
 80140e6:	4648      	mov	r0, r9
 80140e8:	f7ff fb7e 	bl	80137e8 <__sprint_r>
 80140ec:	2800      	cmp	r0, #0
 80140ee:	d1e0      	bne.n	80140b2 <_vfiprintf_r+0x866>
 80140f0:	ab11      	add	r3, sp, #68	; 0x44
 80140f2:	e7f4      	b.n	80140de <_vfiprintf_r+0x892>
 80140f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80140f6:	b913      	cbnz	r3, 80140fe <_vfiprintf_r+0x8b2>
 80140f8:	2300      	movs	r3, #0
 80140fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80140fc:	e7d9      	b.n	80140b2 <_vfiprintf_r+0x866>
 80140fe:	aa0e      	add	r2, sp, #56	; 0x38
 8014100:	4639      	mov	r1, r7
 8014102:	4648      	mov	r0, r9
 8014104:	f7ff fb70 	bl	80137e8 <__sprint_r>
 8014108:	2800      	cmp	r0, #0
 801410a:	d0f5      	beq.n	80140f8 <_vfiprintf_r+0x8ac>
 801410c:	e7d1      	b.n	80140b2 <_vfiprintf_r+0x866>
 801410e:	ea54 0205 	orrs.w	r2, r4, r5
 8014112:	f8cd a010 	str.w	sl, [sp, #16]
 8014116:	f43f ad8d 	beq.w	8013c34 <_vfiprintf_r+0x3e8>
 801411a:	2b01      	cmp	r3, #1
 801411c:	f43f aedc 	beq.w	8013ed8 <_vfiprintf_r+0x68c>
 8014120:	2b02      	cmp	r3, #2
 8014122:	f10d 0be8 	add.w	fp, sp, #232	; 0xe8
 8014126:	f43f af2a 	beq.w	8013f7e <_vfiprintf_r+0x732>
 801412a:	f004 0207 	and.w	r2, r4, #7
 801412e:	08e4      	lsrs	r4, r4, #3
 8014130:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8014134:	08ed      	lsrs	r5, r5, #3
 8014136:	3230      	adds	r2, #48	; 0x30
 8014138:	ea54 0005 	orrs.w	r0, r4, r5
 801413c:	4659      	mov	r1, fp
 801413e:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8014142:	d1f2      	bne.n	801412a <_vfiprintf_r+0x8de>
 8014144:	9b04      	ldr	r3, [sp, #16]
 8014146:	07d8      	lsls	r0, r3, #31
 8014148:	d506      	bpl.n	8014158 <_vfiprintf_r+0x90c>
 801414a:	2a30      	cmp	r2, #48	; 0x30
 801414c:	d004      	beq.n	8014158 <_vfiprintf_r+0x90c>
 801414e:	2230      	movs	r2, #48	; 0x30
 8014150:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8014154:	f1a1 0b02 	sub.w	fp, r1, #2
 8014158:	ab3a      	add	r3, sp, #232	; 0xe8
 801415a:	eba3 030b 	sub.w	r3, r3, fp
 801415e:	9d00      	ldr	r5, [sp, #0]
 8014160:	f8dd a010 	ldr.w	sl, [sp, #16]
 8014164:	9300      	str	r3, [sp, #0]
 8014166:	e59e      	b.n	8013ca6 <_vfiprintf_r+0x45a>
 8014168:	08014dbb 	.word	0x08014dbb
 801416c:	08014dcb 	.word	0x08014dcb

08014170 <__sbprintf>:
 8014170:	b570      	push	{r4, r5, r6, lr}
 8014172:	460c      	mov	r4, r1
 8014174:	8989      	ldrh	r1, [r1, #12]
 8014176:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 801417a:	f021 0102 	bic.w	r1, r1, #2
 801417e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8014182:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8014184:	911b      	str	r1, [sp, #108]	; 0x6c
 8014186:	89e1      	ldrh	r1, [r4, #14]
 8014188:	f8ad 1016 	strh.w	r1, [sp, #22]
 801418c:	69e1      	ldr	r1, [r4, #28]
 801418e:	9109      	str	r1, [sp, #36]	; 0x24
 8014190:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8014192:	910b      	str	r1, [sp, #44]	; 0x2c
 8014194:	a91c      	add	r1, sp, #112	; 0x70
 8014196:	9102      	str	r1, [sp, #8]
 8014198:	9106      	str	r1, [sp, #24]
 801419a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801419e:	4606      	mov	r6, r0
 80141a0:	9104      	str	r1, [sp, #16]
 80141a2:	9107      	str	r1, [sp, #28]
 80141a4:	a818      	add	r0, sp, #96	; 0x60
 80141a6:	2100      	movs	r1, #0
 80141a8:	e9cd 3200 	strd	r3, r2, [sp]
 80141ac:	9108      	str	r1, [sp, #32]
 80141ae:	f7fb ff8f 	bl	80100d0 <__retarget_lock_init_recursive>
 80141b2:	e9dd 3200 	ldrd	r3, r2, [sp]
 80141b6:	a902      	add	r1, sp, #8
 80141b8:	4630      	mov	r0, r6
 80141ba:	f7ff fb47 	bl	801384c <_vfiprintf_r>
 80141be:	1e05      	subs	r5, r0, #0
 80141c0:	db07      	blt.n	80141d2 <__sbprintf+0x62>
 80141c2:	a902      	add	r1, sp, #8
 80141c4:	4630      	mov	r0, r6
 80141c6:	f7fd fdd3 	bl	8011d70 <_fflush_r>
 80141ca:	2800      	cmp	r0, #0
 80141cc:	bf18      	it	ne
 80141ce:	f04f 35ff 	movne.w	r5, #4294967295
 80141d2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80141d6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80141d8:	065b      	lsls	r3, r3, #25
 80141da:	bf42      	ittt	mi
 80141dc:	89a3      	ldrhmi	r3, [r4, #12]
 80141de:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 80141e2:	81a3      	strhmi	r3, [r4, #12]
 80141e4:	f7fb ff75 	bl	80100d2 <__retarget_lock_close_recursive>
 80141e8:	4628      	mov	r0, r5
 80141ea:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 80141ee:	bd70      	pop	{r4, r5, r6, pc}

080141f0 <__sfvwrite_r>:
 80141f0:	6893      	ldr	r3, [r2, #8]
 80141f2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141f6:	4606      	mov	r6, r0
 80141f8:	460c      	mov	r4, r1
 80141fa:	4691      	mov	r9, r2
 80141fc:	b91b      	cbnz	r3, 8014206 <__sfvwrite_r+0x16>
 80141fe:	2000      	movs	r0, #0
 8014200:	b003      	add	sp, #12
 8014202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014206:	898b      	ldrh	r3, [r1, #12]
 8014208:	0718      	lsls	r0, r3, #28
 801420a:	d54f      	bpl.n	80142ac <__sfvwrite_r+0xbc>
 801420c:	690b      	ldr	r3, [r1, #16]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d04c      	beq.n	80142ac <__sfvwrite_r+0xbc>
 8014212:	89a3      	ldrh	r3, [r4, #12]
 8014214:	f8d9 8000 	ldr.w	r8, [r9]
 8014218:	f013 0702 	ands.w	r7, r3, #2
 801421c:	d16b      	bne.n	80142f6 <__sfvwrite_r+0x106>
 801421e:	f013 0301 	ands.w	r3, r3, #1
 8014222:	f000 809b 	beq.w	801435c <__sfvwrite_r+0x16c>
 8014226:	4638      	mov	r0, r7
 8014228:	46ba      	mov	sl, r7
 801422a:	46bb      	mov	fp, r7
 801422c:	f1bb 0f00 	cmp.w	fp, #0
 8014230:	f000 8102 	beq.w	8014438 <__sfvwrite_r+0x248>
 8014234:	b950      	cbnz	r0, 801424c <__sfvwrite_r+0x5c>
 8014236:	465a      	mov	r2, fp
 8014238:	210a      	movs	r1, #10
 801423a:	4650      	mov	r0, sl
 801423c:	f7eb ffc8 	bl	80001d0 <memchr>
 8014240:	2800      	cmp	r0, #0
 8014242:	f000 80ff 	beq.w	8014444 <__sfvwrite_r+0x254>
 8014246:	3001      	adds	r0, #1
 8014248:	eba0 070a 	sub.w	r7, r0, sl
 801424c:	6820      	ldr	r0, [r4, #0]
 801424e:	6921      	ldr	r1, [r4, #16]
 8014250:	68a5      	ldr	r5, [r4, #8]
 8014252:	6963      	ldr	r3, [r4, #20]
 8014254:	455f      	cmp	r7, fp
 8014256:	463a      	mov	r2, r7
 8014258:	bf28      	it	cs
 801425a:	465a      	movcs	r2, fp
 801425c:	4288      	cmp	r0, r1
 801425e:	f240 80f4 	bls.w	801444a <__sfvwrite_r+0x25a>
 8014262:	441d      	add	r5, r3
 8014264:	42aa      	cmp	r2, r5
 8014266:	f340 80f0 	ble.w	801444a <__sfvwrite_r+0x25a>
 801426a:	4651      	mov	r1, sl
 801426c:	462a      	mov	r2, r5
 801426e:	f7ff f86c 	bl	801334a <memmove>
 8014272:	6823      	ldr	r3, [r4, #0]
 8014274:	442b      	add	r3, r5
 8014276:	6023      	str	r3, [r4, #0]
 8014278:	4621      	mov	r1, r4
 801427a:	4630      	mov	r0, r6
 801427c:	f7fd fd78 	bl	8011d70 <_fflush_r>
 8014280:	2800      	cmp	r0, #0
 8014282:	d166      	bne.n	8014352 <__sfvwrite_r+0x162>
 8014284:	1b7f      	subs	r7, r7, r5
 8014286:	f040 80f8 	bne.w	801447a <__sfvwrite_r+0x28a>
 801428a:	4621      	mov	r1, r4
 801428c:	4630      	mov	r0, r6
 801428e:	f7fd fd6f 	bl	8011d70 <_fflush_r>
 8014292:	2800      	cmp	r0, #0
 8014294:	d15d      	bne.n	8014352 <__sfvwrite_r+0x162>
 8014296:	f8d9 3008 	ldr.w	r3, [r9, #8]
 801429a:	1b5b      	subs	r3, r3, r5
 801429c:	44aa      	add	sl, r5
 801429e:	ebab 0b05 	sub.w	fp, fp, r5
 80142a2:	f8c9 3008 	str.w	r3, [r9, #8]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d1c0      	bne.n	801422c <__sfvwrite_r+0x3c>
 80142aa:	e7a8      	b.n	80141fe <__sfvwrite_r+0xe>
 80142ac:	4621      	mov	r1, r4
 80142ae:	4630      	mov	r0, r6
 80142b0:	f000 f8e8 	bl	8014484 <__swsetup_r>
 80142b4:	2800      	cmp	r0, #0
 80142b6:	d0ac      	beq.n	8014212 <__sfvwrite_r+0x22>
 80142b8:	f04f 30ff 	mov.w	r0, #4294967295
 80142bc:	e7a0      	b.n	8014200 <__sfvwrite_r+0x10>
 80142be:	e9d8 a500 	ldrd	sl, r5, [r8]
 80142c2:	f108 0808 	add.w	r8, r8, #8
 80142c6:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 80142ca:	69e1      	ldr	r1, [r4, #28]
 80142cc:	2d00      	cmp	r5, #0
 80142ce:	d0f6      	beq.n	80142be <__sfvwrite_r+0xce>
 80142d0:	42bd      	cmp	r5, r7
 80142d2:	462b      	mov	r3, r5
 80142d4:	4652      	mov	r2, sl
 80142d6:	bf28      	it	cs
 80142d8:	463b      	movcs	r3, r7
 80142da:	4630      	mov	r0, r6
 80142dc:	47d8      	blx	fp
 80142de:	2800      	cmp	r0, #0
 80142e0:	dd37      	ble.n	8014352 <__sfvwrite_r+0x162>
 80142e2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80142e6:	1a1b      	subs	r3, r3, r0
 80142e8:	4482      	add	sl, r0
 80142ea:	1a2d      	subs	r5, r5, r0
 80142ec:	f8c9 3008 	str.w	r3, [r9, #8]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d1e8      	bne.n	80142c6 <__sfvwrite_r+0xd6>
 80142f4:	e783      	b.n	80141fe <__sfvwrite_r+0xe>
 80142f6:	f04f 0a00 	mov.w	sl, #0
 80142fa:	4f61      	ldr	r7, [pc, #388]	; (8014480 <__sfvwrite_r+0x290>)
 80142fc:	4655      	mov	r5, sl
 80142fe:	e7e2      	b.n	80142c6 <__sfvwrite_r+0xd6>
 8014300:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8014304:	f108 0808 	add.w	r8, r8, #8
 8014308:	6820      	ldr	r0, [r4, #0]
 801430a:	68a2      	ldr	r2, [r4, #8]
 801430c:	f1ba 0f00 	cmp.w	sl, #0
 8014310:	d0f6      	beq.n	8014300 <__sfvwrite_r+0x110>
 8014312:	89a3      	ldrh	r3, [r4, #12]
 8014314:	0599      	lsls	r1, r3, #22
 8014316:	d563      	bpl.n	80143e0 <__sfvwrite_r+0x1f0>
 8014318:	4552      	cmp	r2, sl
 801431a:	d836      	bhi.n	801438a <__sfvwrite_r+0x19a>
 801431c:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8014320:	d033      	beq.n	801438a <__sfvwrite_r+0x19a>
 8014322:	6921      	ldr	r1, [r4, #16]
 8014324:	6965      	ldr	r5, [r4, #20]
 8014326:	eba0 0b01 	sub.w	fp, r0, r1
 801432a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801432e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014332:	f10b 0201 	add.w	r2, fp, #1
 8014336:	106d      	asrs	r5, r5, #1
 8014338:	4452      	add	r2, sl
 801433a:	4295      	cmp	r5, r2
 801433c:	bf38      	it	cc
 801433e:	4615      	movcc	r5, r2
 8014340:	055b      	lsls	r3, r3, #21
 8014342:	d53d      	bpl.n	80143c0 <__sfvwrite_r+0x1d0>
 8014344:	4629      	mov	r1, r5
 8014346:	4630      	mov	r0, r6
 8014348:	f7fb fff8 	bl	801033c <_malloc_r>
 801434c:	b948      	cbnz	r0, 8014362 <__sfvwrite_r+0x172>
 801434e:	230c      	movs	r3, #12
 8014350:	6033      	str	r3, [r6, #0]
 8014352:	89a3      	ldrh	r3, [r4, #12]
 8014354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014358:	81a3      	strh	r3, [r4, #12]
 801435a:	e7ad      	b.n	80142b8 <__sfvwrite_r+0xc8>
 801435c:	461f      	mov	r7, r3
 801435e:	469a      	mov	sl, r3
 8014360:	e7d2      	b.n	8014308 <__sfvwrite_r+0x118>
 8014362:	465a      	mov	r2, fp
 8014364:	6921      	ldr	r1, [r4, #16]
 8014366:	9001      	str	r0, [sp, #4]
 8014368:	f7fb feb6 	bl	80100d8 <memcpy>
 801436c:	89a2      	ldrh	r2, [r4, #12]
 801436e:	9b01      	ldr	r3, [sp, #4]
 8014370:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8014374:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8014378:	81a2      	strh	r2, [r4, #12]
 801437a:	6123      	str	r3, [r4, #16]
 801437c:	6165      	str	r5, [r4, #20]
 801437e:	445b      	add	r3, fp
 8014380:	eba5 050b 	sub.w	r5, r5, fp
 8014384:	6023      	str	r3, [r4, #0]
 8014386:	4652      	mov	r2, sl
 8014388:	60a5      	str	r5, [r4, #8]
 801438a:	4552      	cmp	r2, sl
 801438c:	bf28      	it	cs
 801438e:	4652      	movcs	r2, sl
 8014390:	6820      	ldr	r0, [r4, #0]
 8014392:	9201      	str	r2, [sp, #4]
 8014394:	4639      	mov	r1, r7
 8014396:	f7fe ffd8 	bl	801334a <memmove>
 801439a:	68a3      	ldr	r3, [r4, #8]
 801439c:	9a01      	ldr	r2, [sp, #4]
 801439e:	1a9b      	subs	r3, r3, r2
 80143a0:	60a3      	str	r3, [r4, #8]
 80143a2:	6823      	ldr	r3, [r4, #0]
 80143a4:	4413      	add	r3, r2
 80143a6:	4655      	mov	r5, sl
 80143a8:	6023      	str	r3, [r4, #0]
 80143aa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80143ae:	1b5b      	subs	r3, r3, r5
 80143b0:	442f      	add	r7, r5
 80143b2:	ebaa 0a05 	sub.w	sl, sl, r5
 80143b6:	f8c9 3008 	str.w	r3, [r9, #8]
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d1a4      	bne.n	8014308 <__sfvwrite_r+0x118>
 80143be:	e71e      	b.n	80141fe <__sfvwrite_r+0xe>
 80143c0:	462a      	mov	r2, r5
 80143c2:	4630      	mov	r0, r6
 80143c4:	f7ff f848 	bl	8013458 <_realloc_r>
 80143c8:	4603      	mov	r3, r0
 80143ca:	2800      	cmp	r0, #0
 80143cc:	d1d5      	bne.n	801437a <__sfvwrite_r+0x18a>
 80143ce:	6921      	ldr	r1, [r4, #16]
 80143d0:	4630      	mov	r0, r6
 80143d2:	f7fb fef3 	bl	80101bc <_free_r>
 80143d6:	89a3      	ldrh	r3, [r4, #12]
 80143d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80143dc:	81a3      	strh	r3, [r4, #12]
 80143de:	e7b6      	b.n	801434e <__sfvwrite_r+0x15e>
 80143e0:	6923      	ldr	r3, [r4, #16]
 80143e2:	4283      	cmp	r3, r0
 80143e4:	d302      	bcc.n	80143ec <__sfvwrite_r+0x1fc>
 80143e6:	6961      	ldr	r1, [r4, #20]
 80143e8:	4551      	cmp	r1, sl
 80143ea:	d915      	bls.n	8014418 <__sfvwrite_r+0x228>
 80143ec:	4552      	cmp	r2, sl
 80143ee:	bf28      	it	cs
 80143f0:	4652      	movcs	r2, sl
 80143f2:	4639      	mov	r1, r7
 80143f4:	4615      	mov	r5, r2
 80143f6:	f7fe ffa8 	bl	801334a <memmove>
 80143fa:	68a3      	ldr	r3, [r4, #8]
 80143fc:	6822      	ldr	r2, [r4, #0]
 80143fe:	1b5b      	subs	r3, r3, r5
 8014400:	442a      	add	r2, r5
 8014402:	60a3      	str	r3, [r4, #8]
 8014404:	6022      	str	r2, [r4, #0]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d1cf      	bne.n	80143aa <__sfvwrite_r+0x1ba>
 801440a:	4621      	mov	r1, r4
 801440c:	4630      	mov	r0, r6
 801440e:	f7fd fcaf 	bl	8011d70 <_fflush_r>
 8014412:	2800      	cmp	r0, #0
 8014414:	d0c9      	beq.n	80143aa <__sfvwrite_r+0x1ba>
 8014416:	e79c      	b.n	8014352 <__sfvwrite_r+0x162>
 8014418:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801441c:	459a      	cmp	sl, r3
 801441e:	bf38      	it	cc
 8014420:	4653      	movcc	r3, sl
 8014422:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014424:	fb93 f3f1 	sdiv	r3, r3, r1
 8014428:	463a      	mov	r2, r7
 801442a:	434b      	muls	r3, r1
 801442c:	4630      	mov	r0, r6
 801442e:	69e1      	ldr	r1, [r4, #28]
 8014430:	47a8      	blx	r5
 8014432:	1e05      	subs	r5, r0, #0
 8014434:	dcb9      	bgt.n	80143aa <__sfvwrite_r+0x1ba>
 8014436:	e78c      	b.n	8014352 <__sfvwrite_r+0x162>
 8014438:	e9d8 ab00 	ldrd	sl, fp, [r8]
 801443c:	2000      	movs	r0, #0
 801443e:	f108 0808 	add.w	r8, r8, #8
 8014442:	e6f3      	b.n	801422c <__sfvwrite_r+0x3c>
 8014444:	f10b 0701 	add.w	r7, fp, #1
 8014448:	e700      	b.n	801424c <__sfvwrite_r+0x5c>
 801444a:	4293      	cmp	r3, r2
 801444c:	dc08      	bgt.n	8014460 <__sfvwrite_r+0x270>
 801444e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8014450:	69e1      	ldr	r1, [r4, #28]
 8014452:	4652      	mov	r2, sl
 8014454:	4630      	mov	r0, r6
 8014456:	47a8      	blx	r5
 8014458:	1e05      	subs	r5, r0, #0
 801445a:	f73f af13 	bgt.w	8014284 <__sfvwrite_r+0x94>
 801445e:	e778      	b.n	8014352 <__sfvwrite_r+0x162>
 8014460:	4651      	mov	r1, sl
 8014462:	9201      	str	r2, [sp, #4]
 8014464:	f7fe ff71 	bl	801334a <memmove>
 8014468:	9a01      	ldr	r2, [sp, #4]
 801446a:	68a3      	ldr	r3, [r4, #8]
 801446c:	1a9b      	subs	r3, r3, r2
 801446e:	60a3      	str	r3, [r4, #8]
 8014470:	6823      	ldr	r3, [r4, #0]
 8014472:	4413      	add	r3, r2
 8014474:	6023      	str	r3, [r4, #0]
 8014476:	4615      	mov	r5, r2
 8014478:	e704      	b.n	8014284 <__sfvwrite_r+0x94>
 801447a:	2001      	movs	r0, #1
 801447c:	e70b      	b.n	8014296 <__sfvwrite_r+0xa6>
 801447e:	bf00      	nop
 8014480:	7ffffc00 	.word	0x7ffffc00

08014484 <__swsetup_r>:
 8014484:	b538      	push	{r3, r4, r5, lr}
 8014486:	4b2a      	ldr	r3, [pc, #168]	; (8014530 <__swsetup_r+0xac>)
 8014488:	4605      	mov	r5, r0
 801448a:	6818      	ldr	r0, [r3, #0]
 801448c:	460c      	mov	r4, r1
 801448e:	b118      	cbz	r0, 8014498 <__swsetup_r+0x14>
 8014490:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014492:	b90b      	cbnz	r3, 8014498 <__swsetup_r+0x14>
 8014494:	f7fb fd0a 	bl	800feac <__sinit>
 8014498:	89a3      	ldrh	r3, [r4, #12]
 801449a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801449e:	0718      	lsls	r0, r3, #28
 80144a0:	d422      	bmi.n	80144e8 <__swsetup_r+0x64>
 80144a2:	06d9      	lsls	r1, r3, #27
 80144a4:	d407      	bmi.n	80144b6 <__swsetup_r+0x32>
 80144a6:	2309      	movs	r3, #9
 80144a8:	602b      	str	r3, [r5, #0]
 80144aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80144ae:	81a3      	strh	r3, [r4, #12]
 80144b0:	f04f 30ff 	mov.w	r0, #4294967295
 80144b4:	e034      	b.n	8014520 <__swsetup_r+0x9c>
 80144b6:	0758      	lsls	r0, r3, #29
 80144b8:	d512      	bpl.n	80144e0 <__swsetup_r+0x5c>
 80144ba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80144bc:	b141      	cbz	r1, 80144d0 <__swsetup_r+0x4c>
 80144be:	f104 0340 	add.w	r3, r4, #64	; 0x40
 80144c2:	4299      	cmp	r1, r3
 80144c4:	d002      	beq.n	80144cc <__swsetup_r+0x48>
 80144c6:	4628      	mov	r0, r5
 80144c8:	f7fb fe78 	bl	80101bc <_free_r>
 80144cc:	2300      	movs	r3, #0
 80144ce:	6323      	str	r3, [r4, #48]	; 0x30
 80144d0:	89a3      	ldrh	r3, [r4, #12]
 80144d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80144d6:	81a3      	strh	r3, [r4, #12]
 80144d8:	2300      	movs	r3, #0
 80144da:	6063      	str	r3, [r4, #4]
 80144dc:	6923      	ldr	r3, [r4, #16]
 80144de:	6023      	str	r3, [r4, #0]
 80144e0:	89a3      	ldrh	r3, [r4, #12]
 80144e2:	f043 0308 	orr.w	r3, r3, #8
 80144e6:	81a3      	strh	r3, [r4, #12]
 80144e8:	6923      	ldr	r3, [r4, #16]
 80144ea:	b94b      	cbnz	r3, 8014500 <__swsetup_r+0x7c>
 80144ec:	89a3      	ldrh	r3, [r4, #12]
 80144ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80144f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80144f6:	d003      	beq.n	8014500 <__swsetup_r+0x7c>
 80144f8:	4621      	mov	r1, r4
 80144fa:	4628      	mov	r0, r5
 80144fc:	f000 f8ca 	bl	8014694 <__smakebuf_r>
 8014500:	89a0      	ldrh	r0, [r4, #12]
 8014502:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014506:	f010 0301 	ands.w	r3, r0, #1
 801450a:	d00a      	beq.n	8014522 <__swsetup_r+0x9e>
 801450c:	2300      	movs	r3, #0
 801450e:	60a3      	str	r3, [r4, #8]
 8014510:	6963      	ldr	r3, [r4, #20]
 8014512:	425b      	negs	r3, r3
 8014514:	61a3      	str	r3, [r4, #24]
 8014516:	6923      	ldr	r3, [r4, #16]
 8014518:	b943      	cbnz	r3, 801452c <__swsetup_r+0xa8>
 801451a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801451e:	d1c4      	bne.n	80144aa <__swsetup_r+0x26>
 8014520:	bd38      	pop	{r3, r4, r5, pc}
 8014522:	0781      	lsls	r1, r0, #30
 8014524:	bf58      	it	pl
 8014526:	6963      	ldrpl	r3, [r4, #20]
 8014528:	60a3      	str	r3, [r4, #8]
 801452a:	e7f4      	b.n	8014516 <__swsetup_r+0x92>
 801452c:	2000      	movs	r0, #0
 801452e:	e7f7      	b.n	8014520 <__swsetup_r+0x9c>
 8014530:	20000278 	.word	0x20000278

08014534 <__fputwc>:
 8014534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014538:	4680      	mov	r8, r0
 801453a:	460e      	mov	r6, r1
 801453c:	4615      	mov	r5, r2
 801453e:	f7fe ff1f 	bl	8013380 <__locale_mb_cur_max>
 8014542:	2801      	cmp	r0, #1
 8014544:	d11c      	bne.n	8014580 <__fputwc+0x4c>
 8014546:	1e73      	subs	r3, r6, #1
 8014548:	2bfe      	cmp	r3, #254	; 0xfe
 801454a:	d819      	bhi.n	8014580 <__fputwc+0x4c>
 801454c:	f88d 6004 	strb.w	r6, [sp, #4]
 8014550:	4604      	mov	r4, r0
 8014552:	2700      	movs	r7, #0
 8014554:	f10d 0904 	add.w	r9, sp, #4
 8014558:	42a7      	cmp	r7, r4
 801455a:	d020      	beq.n	801459e <__fputwc+0x6a>
 801455c:	68ab      	ldr	r3, [r5, #8]
 801455e:	f817 1009 	ldrb.w	r1, [r7, r9]
 8014562:	3b01      	subs	r3, #1
 8014564:	2b00      	cmp	r3, #0
 8014566:	60ab      	str	r3, [r5, #8]
 8014568:	da04      	bge.n	8014574 <__fputwc+0x40>
 801456a:	69aa      	ldr	r2, [r5, #24]
 801456c:	4293      	cmp	r3, r2
 801456e:	db1a      	blt.n	80145a6 <__fputwc+0x72>
 8014570:	290a      	cmp	r1, #10
 8014572:	d018      	beq.n	80145a6 <__fputwc+0x72>
 8014574:	682b      	ldr	r3, [r5, #0]
 8014576:	1c5a      	adds	r2, r3, #1
 8014578:	602a      	str	r2, [r5, #0]
 801457a:	7019      	strb	r1, [r3, #0]
 801457c:	3701      	adds	r7, #1
 801457e:	e7eb      	b.n	8014558 <__fputwc+0x24>
 8014580:	a901      	add	r1, sp, #4
 8014582:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 8014586:	4632      	mov	r2, r6
 8014588:	4640      	mov	r0, r8
 801458a:	f000 f845 	bl	8014618 <_wcrtomb_r>
 801458e:	1c41      	adds	r1, r0, #1
 8014590:	4604      	mov	r4, r0
 8014592:	d1de      	bne.n	8014552 <__fputwc+0x1e>
 8014594:	89ab      	ldrh	r3, [r5, #12]
 8014596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801459a:	81ab      	strh	r3, [r5, #12]
 801459c:	4606      	mov	r6, r0
 801459e:	4630      	mov	r0, r6
 80145a0:	b003      	add	sp, #12
 80145a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80145a6:	462a      	mov	r2, r5
 80145a8:	4640      	mov	r0, r8
 80145aa:	f000 f8af 	bl	801470c <__swbuf_r>
 80145ae:	1c42      	adds	r2, r0, #1
 80145b0:	d1e4      	bne.n	801457c <__fputwc+0x48>
 80145b2:	4606      	mov	r6, r0
 80145b4:	e7f3      	b.n	801459e <__fputwc+0x6a>

080145b6 <_fputwc_r>:
 80145b6:	6e53      	ldr	r3, [r2, #100]	; 0x64
 80145b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80145ba:	4614      	mov	r4, r2
 80145bc:	07da      	lsls	r2, r3, #31
 80145be:	4605      	mov	r5, r0
 80145c0:	d407      	bmi.n	80145d2 <_fputwc_r+0x1c>
 80145c2:	89a3      	ldrh	r3, [r4, #12]
 80145c4:	059b      	lsls	r3, r3, #22
 80145c6:	d404      	bmi.n	80145d2 <_fputwc_r+0x1c>
 80145c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80145ca:	9101      	str	r1, [sp, #4]
 80145cc:	f7fb fd82 	bl	80100d4 <__retarget_lock_acquire_recursive>
 80145d0:	9901      	ldr	r1, [sp, #4]
 80145d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145d6:	0498      	lsls	r0, r3, #18
 80145d8:	d406      	bmi.n	80145e8 <_fputwc_r+0x32>
 80145da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80145de:	81a3      	strh	r3, [r4, #12]
 80145e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80145e2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80145e6:	6663      	str	r3, [r4, #100]	; 0x64
 80145e8:	4622      	mov	r2, r4
 80145ea:	4628      	mov	r0, r5
 80145ec:	f7ff ffa2 	bl	8014534 <__fputwc>
 80145f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80145f2:	07da      	lsls	r2, r3, #31
 80145f4:	4605      	mov	r5, r0
 80145f6:	d405      	bmi.n	8014604 <_fputwc_r+0x4e>
 80145f8:	89a3      	ldrh	r3, [r4, #12]
 80145fa:	059b      	lsls	r3, r3, #22
 80145fc:	d402      	bmi.n	8014604 <_fputwc_r+0x4e>
 80145fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014600:	f7fb fd69 	bl	80100d6 <__retarget_lock_release_recursive>
 8014604:	4628      	mov	r0, r5
 8014606:	b003      	add	sp, #12
 8014608:	bd30      	pop	{r4, r5, pc}

0801460a <abort>:
 801460a:	b508      	push	{r3, lr}
 801460c:	2006      	movs	r0, #6
 801460e:	f000 f8ef 	bl	80147f0 <raise>
 8014612:	2001      	movs	r0, #1
 8014614:	f7ee f93a 	bl	800288c <_exit>

08014618 <_wcrtomb_r>:
 8014618:	b5f0      	push	{r4, r5, r6, r7, lr}
 801461a:	4c09      	ldr	r4, [pc, #36]	; (8014640 <_wcrtomb_r+0x28>)
 801461c:	b085      	sub	sp, #20
 801461e:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 8014622:	4605      	mov	r5, r0
 8014624:	461e      	mov	r6, r3
 8014626:	b909      	cbnz	r1, 801462c <_wcrtomb_r+0x14>
 8014628:	460a      	mov	r2, r1
 801462a:	a901      	add	r1, sp, #4
 801462c:	47b8      	blx	r7
 801462e:	1c43      	adds	r3, r0, #1
 8014630:	bf01      	itttt	eq
 8014632:	2300      	moveq	r3, #0
 8014634:	6033      	streq	r3, [r6, #0]
 8014636:	238a      	moveq	r3, #138	; 0x8a
 8014638:	602b      	streq	r3, [r5, #0]
 801463a:	b005      	add	sp, #20
 801463c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801463e:	bf00      	nop
 8014640:	20000690 	.word	0x20000690

08014644 <__swhatbuf_r>:
 8014644:	b570      	push	{r4, r5, r6, lr}
 8014646:	460c      	mov	r4, r1
 8014648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801464c:	2900      	cmp	r1, #0
 801464e:	b096      	sub	sp, #88	; 0x58
 8014650:	4615      	mov	r5, r2
 8014652:	461e      	mov	r6, r3
 8014654:	da07      	bge.n	8014666 <__swhatbuf_r+0x22>
 8014656:	89a1      	ldrh	r1, [r4, #12]
 8014658:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 801465c:	d017      	beq.n	801468e <__swhatbuf_r+0x4a>
 801465e:	2100      	movs	r1, #0
 8014660:	2340      	movs	r3, #64	; 0x40
 8014662:	4608      	mov	r0, r1
 8014664:	e00f      	b.n	8014686 <__swhatbuf_r+0x42>
 8014666:	466a      	mov	r2, sp
 8014668:	f000 f8ca 	bl	8014800 <_fstat_r>
 801466c:	2800      	cmp	r0, #0
 801466e:	dbf2      	blt.n	8014656 <__swhatbuf_r+0x12>
 8014670:	9901      	ldr	r1, [sp, #4]
 8014672:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014676:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801467a:	4259      	negs	r1, r3
 801467c:	4159      	adcs	r1, r3
 801467e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8014682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014686:	6031      	str	r1, [r6, #0]
 8014688:	602b      	str	r3, [r5, #0]
 801468a:	b016      	add	sp, #88	; 0x58
 801468c:	bd70      	pop	{r4, r5, r6, pc}
 801468e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014692:	e7e6      	b.n	8014662 <__swhatbuf_r+0x1e>

08014694 <__smakebuf_r>:
 8014694:	898b      	ldrh	r3, [r1, #12]
 8014696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014698:	079d      	lsls	r5, r3, #30
 801469a:	4606      	mov	r6, r0
 801469c:	460c      	mov	r4, r1
 801469e:	d507      	bpl.n	80146b0 <__smakebuf_r+0x1c>
 80146a0:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80146a4:	6023      	str	r3, [r4, #0]
 80146a6:	6123      	str	r3, [r4, #16]
 80146a8:	2301      	movs	r3, #1
 80146aa:	6163      	str	r3, [r4, #20]
 80146ac:	b002      	add	sp, #8
 80146ae:	bd70      	pop	{r4, r5, r6, pc}
 80146b0:	ab01      	add	r3, sp, #4
 80146b2:	466a      	mov	r2, sp
 80146b4:	f7ff ffc6 	bl	8014644 <__swhatbuf_r>
 80146b8:	9900      	ldr	r1, [sp, #0]
 80146ba:	4605      	mov	r5, r0
 80146bc:	4630      	mov	r0, r6
 80146be:	f7fb fe3d 	bl	801033c <_malloc_r>
 80146c2:	b948      	cbnz	r0, 80146d8 <__smakebuf_r+0x44>
 80146c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146c8:	059a      	lsls	r2, r3, #22
 80146ca:	d4ef      	bmi.n	80146ac <__smakebuf_r+0x18>
 80146cc:	f023 0303 	bic.w	r3, r3, #3
 80146d0:	f043 0302 	orr.w	r3, r3, #2
 80146d4:	81a3      	strh	r3, [r4, #12]
 80146d6:	e7e3      	b.n	80146a0 <__smakebuf_r+0xc>
 80146d8:	89a3      	ldrh	r3, [r4, #12]
 80146da:	6020      	str	r0, [r4, #0]
 80146dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80146e0:	81a3      	strh	r3, [r4, #12]
 80146e2:	9b00      	ldr	r3, [sp, #0]
 80146e4:	6163      	str	r3, [r4, #20]
 80146e6:	9b01      	ldr	r3, [sp, #4]
 80146e8:	6120      	str	r0, [r4, #16]
 80146ea:	b15b      	cbz	r3, 8014704 <__smakebuf_r+0x70>
 80146ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146f0:	4630      	mov	r0, r6
 80146f2:	f000 f897 	bl	8014824 <_isatty_r>
 80146f6:	b128      	cbz	r0, 8014704 <__smakebuf_r+0x70>
 80146f8:	89a3      	ldrh	r3, [r4, #12]
 80146fa:	f023 0303 	bic.w	r3, r3, #3
 80146fe:	f043 0301 	orr.w	r3, r3, #1
 8014702:	81a3      	strh	r3, [r4, #12]
 8014704:	89a3      	ldrh	r3, [r4, #12]
 8014706:	431d      	orrs	r5, r3
 8014708:	81a5      	strh	r5, [r4, #12]
 801470a:	e7cf      	b.n	80146ac <__smakebuf_r+0x18>

0801470c <__swbuf_r>:
 801470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801470e:	460e      	mov	r6, r1
 8014710:	4614      	mov	r4, r2
 8014712:	4605      	mov	r5, r0
 8014714:	b118      	cbz	r0, 801471e <__swbuf_r+0x12>
 8014716:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8014718:	b90b      	cbnz	r3, 801471e <__swbuf_r+0x12>
 801471a:	f7fb fbc7 	bl	800feac <__sinit>
 801471e:	69a3      	ldr	r3, [r4, #24]
 8014720:	60a3      	str	r3, [r4, #8]
 8014722:	89a3      	ldrh	r3, [r4, #12]
 8014724:	0719      	lsls	r1, r3, #28
 8014726:	d529      	bpl.n	801477c <__swbuf_r+0x70>
 8014728:	6923      	ldr	r3, [r4, #16]
 801472a:	b33b      	cbz	r3, 801477c <__swbuf_r+0x70>
 801472c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014730:	b2f6      	uxtb	r6, r6
 8014732:	049a      	lsls	r2, r3, #18
 8014734:	4637      	mov	r7, r6
 8014736:	d52a      	bpl.n	801478e <__swbuf_r+0x82>
 8014738:	6823      	ldr	r3, [r4, #0]
 801473a:	6922      	ldr	r2, [r4, #16]
 801473c:	1a98      	subs	r0, r3, r2
 801473e:	6963      	ldr	r3, [r4, #20]
 8014740:	4283      	cmp	r3, r0
 8014742:	dc04      	bgt.n	801474e <__swbuf_r+0x42>
 8014744:	4621      	mov	r1, r4
 8014746:	4628      	mov	r0, r5
 8014748:	f7fd fb12 	bl	8011d70 <_fflush_r>
 801474c:	b9e0      	cbnz	r0, 8014788 <__swbuf_r+0x7c>
 801474e:	68a3      	ldr	r3, [r4, #8]
 8014750:	3b01      	subs	r3, #1
 8014752:	60a3      	str	r3, [r4, #8]
 8014754:	6823      	ldr	r3, [r4, #0]
 8014756:	1c5a      	adds	r2, r3, #1
 8014758:	6022      	str	r2, [r4, #0]
 801475a:	701e      	strb	r6, [r3, #0]
 801475c:	6962      	ldr	r2, [r4, #20]
 801475e:	1c43      	adds	r3, r0, #1
 8014760:	429a      	cmp	r2, r3
 8014762:	d004      	beq.n	801476e <__swbuf_r+0x62>
 8014764:	89a3      	ldrh	r3, [r4, #12]
 8014766:	07db      	lsls	r3, r3, #31
 8014768:	d506      	bpl.n	8014778 <__swbuf_r+0x6c>
 801476a:	2e0a      	cmp	r6, #10
 801476c:	d104      	bne.n	8014778 <__swbuf_r+0x6c>
 801476e:	4621      	mov	r1, r4
 8014770:	4628      	mov	r0, r5
 8014772:	f7fd fafd 	bl	8011d70 <_fflush_r>
 8014776:	b938      	cbnz	r0, 8014788 <__swbuf_r+0x7c>
 8014778:	4638      	mov	r0, r7
 801477a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801477c:	4621      	mov	r1, r4
 801477e:	4628      	mov	r0, r5
 8014780:	f7ff fe80 	bl	8014484 <__swsetup_r>
 8014784:	2800      	cmp	r0, #0
 8014786:	d0d1      	beq.n	801472c <__swbuf_r+0x20>
 8014788:	f04f 37ff 	mov.w	r7, #4294967295
 801478c:	e7f4      	b.n	8014778 <__swbuf_r+0x6c>
 801478e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014792:	81a3      	strh	r3, [r4, #12]
 8014794:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014796:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801479a:	6663      	str	r3, [r4, #100]	; 0x64
 801479c:	e7cc      	b.n	8014738 <__swbuf_r+0x2c>

0801479e <_raise_r>:
 801479e:	291f      	cmp	r1, #31
 80147a0:	b538      	push	{r3, r4, r5, lr}
 80147a2:	4604      	mov	r4, r0
 80147a4:	460d      	mov	r5, r1
 80147a6:	d904      	bls.n	80147b2 <_raise_r+0x14>
 80147a8:	2316      	movs	r3, #22
 80147aa:	6003      	str	r3, [r0, #0]
 80147ac:	f04f 30ff 	mov.w	r0, #4294967295
 80147b0:	bd38      	pop	{r3, r4, r5, pc}
 80147b2:	f8d0 2118 	ldr.w	r2, [r0, #280]	; 0x118
 80147b6:	b112      	cbz	r2, 80147be <_raise_r+0x20>
 80147b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80147bc:	b94b      	cbnz	r3, 80147d2 <_raise_r+0x34>
 80147be:	4620      	mov	r0, r4
 80147c0:	f000 f852 	bl	8014868 <_getpid_r>
 80147c4:	462a      	mov	r2, r5
 80147c6:	4601      	mov	r1, r0
 80147c8:	4620      	mov	r0, r4
 80147ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80147ce:	f000 b839 	b.w	8014844 <_kill_r>
 80147d2:	2b01      	cmp	r3, #1
 80147d4:	d00a      	beq.n	80147ec <_raise_r+0x4e>
 80147d6:	1c59      	adds	r1, r3, #1
 80147d8:	d103      	bne.n	80147e2 <_raise_r+0x44>
 80147da:	2316      	movs	r3, #22
 80147dc:	6003      	str	r3, [r0, #0]
 80147de:	2001      	movs	r0, #1
 80147e0:	e7e6      	b.n	80147b0 <_raise_r+0x12>
 80147e2:	2400      	movs	r4, #0
 80147e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80147e8:	4628      	mov	r0, r5
 80147ea:	4798      	blx	r3
 80147ec:	2000      	movs	r0, #0
 80147ee:	e7df      	b.n	80147b0 <_raise_r+0x12>

080147f0 <raise>:
 80147f0:	4b02      	ldr	r3, [pc, #8]	; (80147fc <raise+0xc>)
 80147f2:	4601      	mov	r1, r0
 80147f4:	6818      	ldr	r0, [r3, #0]
 80147f6:	f7ff bfd2 	b.w	801479e <_raise_r>
 80147fa:	bf00      	nop
 80147fc:	20000278 	.word	0x20000278

08014800 <_fstat_r>:
 8014800:	b538      	push	{r3, r4, r5, lr}
 8014802:	4d07      	ldr	r5, [pc, #28]	; (8014820 <_fstat_r+0x20>)
 8014804:	2300      	movs	r3, #0
 8014806:	4604      	mov	r4, r0
 8014808:	4608      	mov	r0, r1
 801480a:	4611      	mov	r1, r2
 801480c:	602b      	str	r3, [r5, #0]
 801480e:	f7ee f88c 	bl	800292a <_fstat>
 8014812:	1c43      	adds	r3, r0, #1
 8014814:	d102      	bne.n	801481c <_fstat_r+0x1c>
 8014816:	682b      	ldr	r3, [r5, #0]
 8014818:	b103      	cbz	r3, 801481c <_fstat_r+0x1c>
 801481a:	6023      	str	r3, [r4, #0]
 801481c:	bd38      	pop	{r3, r4, r5, pc}
 801481e:	bf00      	nop
 8014820:	2000e778 	.word	0x2000e778

08014824 <_isatty_r>:
 8014824:	b538      	push	{r3, r4, r5, lr}
 8014826:	4d06      	ldr	r5, [pc, #24]	; (8014840 <_isatty_r+0x1c>)
 8014828:	2300      	movs	r3, #0
 801482a:	4604      	mov	r4, r0
 801482c:	4608      	mov	r0, r1
 801482e:	602b      	str	r3, [r5, #0]
 8014830:	f7ee f88b 	bl	800294a <_isatty>
 8014834:	1c43      	adds	r3, r0, #1
 8014836:	d102      	bne.n	801483e <_isatty_r+0x1a>
 8014838:	682b      	ldr	r3, [r5, #0]
 801483a:	b103      	cbz	r3, 801483e <_isatty_r+0x1a>
 801483c:	6023      	str	r3, [r4, #0]
 801483e:	bd38      	pop	{r3, r4, r5, pc}
 8014840:	2000e778 	.word	0x2000e778

08014844 <_kill_r>:
 8014844:	b538      	push	{r3, r4, r5, lr}
 8014846:	4d07      	ldr	r5, [pc, #28]	; (8014864 <_kill_r+0x20>)
 8014848:	2300      	movs	r3, #0
 801484a:	4604      	mov	r4, r0
 801484c:	4608      	mov	r0, r1
 801484e:	4611      	mov	r1, r2
 8014850:	602b      	str	r3, [r5, #0]
 8014852:	f7ee f80b 	bl	800286c <_kill>
 8014856:	1c43      	adds	r3, r0, #1
 8014858:	d102      	bne.n	8014860 <_kill_r+0x1c>
 801485a:	682b      	ldr	r3, [r5, #0]
 801485c:	b103      	cbz	r3, 8014860 <_kill_r+0x1c>
 801485e:	6023      	str	r3, [r4, #0]
 8014860:	bd38      	pop	{r3, r4, r5, pc}
 8014862:	bf00      	nop
 8014864:	2000e778 	.word	0x2000e778

08014868 <_getpid_r>:
 8014868:	f7ed bff8 	b.w	800285c <_getpid>

0801486c <_init>:
 801486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801486e:	bf00      	nop
 8014870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014872:	bc08      	pop	{r3}
 8014874:	469e      	mov	lr, r3
 8014876:	4770      	bx	lr

08014878 <_fini>:
 8014878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801487a:	bf00      	nop
 801487c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801487e:	bc08      	pop	{r3}
 8014880:	469e      	mov	lr, r3
 8014882:	4770      	bx	lr
