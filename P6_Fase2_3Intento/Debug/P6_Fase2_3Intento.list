
P6_Fase2_3Intento.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000909c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009224  08009224  00019224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092cc  080092cc  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  080092cc  080092cc  000192cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092d4  080092d4  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092d4  080092d4  000192d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092d8  080092d8  000192d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  080092dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c9c  20000118  080093f4  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000db4  080093f4  00020db4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d0f7  00000000  00000000  0002018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040c8  00000000  00000000  0003d282  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001950  00000000  00000000  00041350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001378  00000000  00000000  00042ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6a9  00000000  00000000  00044018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fd2a  00000000  00000000  0006e6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4fdc  00000000  00000000  0008e3eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006af8  00000000  00000000  001833c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00189ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000118 	.word	0x20000118
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800920c 	.word	0x0800920c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000011c 	.word	0x2000011c
 80001c4:	0800920c 	.word	0x0800920c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fe5a 	bl	8001182 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f859 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f9f3 	bl	80008bc <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d6:	f000 f8b7 	bl	8000648 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004da:	f000 f8ed 	bl	80006b8 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004de:	f000 f929 	bl	8000734 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004e2:	f000 f94d 	bl	8000780 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e6:	f000 f989 	bl	80007fc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004ea:	f000 f9b7 	bl	800085c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80004ee:	f008 f895 	bl	800861c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
HAL_Delay(5000);
 80004f2:	f241 3088 	movw	r0, #5000	; 0x1388
 80004f6:	f000 feb9 	bl	800126c <HAL_Delay>
int i;
uint8_t dato[6];
dato[0]= 0;
 80004fa:	2300      	movs	r3, #0
 80004fc:	713b      	strb	r3, [r7, #4]
USBD_LL_PrepareReceive(&hUsbDeviceFS, 1, dato, 6);
 80004fe:	1d3a      	adds	r2, r7, #4
 8000500:	2306      	movs	r3, #6
 8000502:	2101      	movs	r1, #1
 8000504:	481d      	ldr	r0, [pc, #116]	; (800057c <main+0xb8>)
 8000506:	f008 fdb1 	bl	800906c <USBD_LL_PrepareReceive>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(miflag==1){
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <main+0xbc>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d108      	bne.n	8000524 <main+0x60>
		  USBD_LL_PrepareReceive(&hUsbDeviceFS, 1, dato, 6);
 8000512:	1d3a      	adds	r2, r7, #4
 8000514:	2306      	movs	r3, #6
 8000516:	2101      	movs	r1, #1
 8000518:	4818      	ldr	r0, [pc, #96]	; (800057c <main+0xb8>)
 800051a:	f008 fda7 	bl	800906c <USBD_LL_PrepareReceive>
		  	  miflag= 0;
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <main+0xbc>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
	  }
	  for(i = 0; i<50;i++){
 8000524:	2300      	movs	r3, #0
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	e00e      	b.n	8000548 <main+0x84>
		 dato[1]=4;
 800052a:	2304      	movs	r3, #4
 800052c:	717b      	strb	r3, [r7, #5]
		 dato[2]= 4;
 800052e:	2304      	movs	r3, #4
 8000530:	71bb      	strb	r3, [r7, #6]
		 USBD_CUSTOM_HID_SendReport_FS(dato, 6);
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2106      	movs	r1, #6
 8000536:	4618      	mov	r0, r3
 8000538:	f008 f8c4 	bl	80086c4 <USBD_CUSTOM_HID_SendReport_FS>
		 HAL_Delay(100);
 800053c:	2064      	movs	r0, #100	; 0x64
 800053e:	f000 fe95 	bl	800126c <HAL_Delay>
	  for(i = 0; i<50;i++){
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3301      	adds	r3, #1
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2b31      	cmp	r3, #49	; 0x31
 800054c:	dded      	ble.n	800052a <main+0x66>
	  }
	  for(i = 0; i<50;i++){
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
 8000552:	e00e      	b.n	8000572 <main+0xae>
	  		 dato[1]=-4;
 8000554:	23fc      	movs	r3, #252	; 0xfc
 8000556:	717b      	strb	r3, [r7, #5]
	  		 dato[2]= -4;
 8000558:	23fc      	movs	r3, #252	; 0xfc
 800055a:	71bb      	strb	r3, [r7, #6]
	  		 USBD_CUSTOM_HID_SendReport_FS(dato, 6);
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2106      	movs	r1, #6
 8000560:	4618      	mov	r0, r3
 8000562:	f008 f8af 	bl	80086c4 <USBD_CUSTOM_HID_SendReport_FS>
	  		 HAL_Delay(100);
 8000566:	2064      	movs	r0, #100	; 0x64
 8000568:	f000 fe80 	bl	800126c <HAL_Delay>
	  for(i = 0; i<50;i++){
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	3301      	adds	r3, #1
 8000570:	60fb      	str	r3, [r7, #12]
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	2b31      	cmp	r3, #49	; 0x31
 8000576:	dded      	ble.n	8000554 <main+0x90>
	  if(miflag==1){
 8000578:	e7c7      	b.n	800050a <main+0x46>
 800057a:	bf00      	nop
 800057c:	200003a8 	.word	0x200003a8
 8000580:	20000684 	.word	0x20000684

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b096      	sub	sp, #88	; 0x58
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	2244      	movs	r2, #68	; 0x44
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f008 fe0e 	bl	80091b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	463b      	mov	r3, r7
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
 80005a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005a6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005aa:	f002 fd65 	bl	8003078 <HAL_PWREx_ControlVoltageScaling>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005b4:	f000 fb34 	bl	8000c20 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005b8:	f002 fd40 	bl	800303c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005bc:	4b21      	ldr	r3, [pc, #132]	; (8000644 <SystemClock_Config+0xc0>)
 80005be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005c2:	4a20      	ldr	r2, [pc, #128]	; (8000644 <SystemClock_Config+0xc0>)
 80005c4:	f023 0318 	bic.w	r3, r3, #24
 80005c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005cc:	2314      	movs	r3, #20
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005d0:	2301      	movs	r3, #1
 80005d2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005dc:	2360      	movs	r3, #96	; 0x60
 80005de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005e4:	2301      	movs	r3, #1
 80005e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005e8:	2301      	movs	r3, #1
 80005ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005ec:	2328      	movs	r3, #40	; 0x28
 80005ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005f0:	2307      	movs	r3, #7
 80005f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f4:	2302      	movs	r3, #2
 80005f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	4618      	mov	r0, r3
 8000602:	f002 fe5b 	bl	80032bc <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800060c:	f000 fb08 	bl	8000c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000614:	2303      	movs	r3, #3
 8000616:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000624:	463b      	mov	r3, r7
 8000626:	2104      	movs	r1, #4
 8000628:	4618      	mov	r0, r3
 800062a:	f003 fa23 	bl	8003a74 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000634:	f000 faf4 	bl	8000c20 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000638:	f003 ff2a 	bl	8004490 <HAL_RCCEx_EnableMSIPLLMode>
}
 800063c:	bf00      	nop
 800063e:	3758      	adds	r7, #88	; 0x58
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40021000 	.word	0x40021000

08000648 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_DFSDM1_Init+0x68>)
 800064e:	4a19      	ldr	r2, [pc, #100]	; (80006b4 <MX_DFSDM1_Init+0x6c>)
 8000650:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000652:	4b17      	ldr	r3, [pc, #92]	; (80006b0 <MX_DFSDM1_Init+0x68>)
 8000654:	2201      	movs	r2, #1
 8000656:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000658:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_DFSDM1_Init+0x68>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800065e:	4b14      	ldr	r3, [pc, #80]	; (80006b0 <MX_DFSDM1_Init+0x68>)
 8000660:	2202      	movs	r2, #2
 8000662:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000664:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_DFSDM1_Init+0x68>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800066a:	4b11      	ldr	r3, [pc, #68]	; (80006b0 <MX_DFSDM1_Init+0x68>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000670:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_DFSDM1_Init+0x68>)
 8000672:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000676:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <MX_DFSDM1_Init+0x68>)
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <MX_DFSDM1_Init+0x68>)
 8000680:	2204      	movs	r2, #4
 8000682:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000684:	4b0a      	ldr	r3, [pc, #40]	; (80006b0 <MX_DFSDM1_Init+0x68>)
 8000686:	2200      	movs	r2, #0
 8000688:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <MX_DFSDM1_Init+0x68>)
 800068c:	2201      	movs	r2, #1
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <MX_DFSDM1_Init+0x68>)
 8000692:	2200      	movs	r2, #0
 8000694:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <MX_DFSDM1_Init+0x68>)
 8000698:	2200      	movs	r2, #0
 800069a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_DFSDM1_Init+0x68>)
 800069e:	f000 ff1b 	bl	80014d8 <HAL_DFSDM_ChannelInit>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80006a8:	f000 faba 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000134 	.word	0x20000134
 80006b4:	40016020 	.word	0x40016020

080006b8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006bc:	4b1b      	ldr	r3, [pc, #108]	; (800072c <MX_I2C2_Init+0x74>)
 80006be:	4a1c      	ldr	r2, [pc, #112]	; (8000730 <MX_I2C2_Init+0x78>)
 80006c0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <MX_I2C2_Init+0x74>)
 80006c4:	f640 6214 	movw	r2, #3604	; 0xe14
 80006c8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006ca:	4b18      	ldr	r3, [pc, #96]	; (800072c <MX_I2C2_Init+0x74>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d0:	4b16      	ldr	r3, [pc, #88]	; (800072c <MX_I2C2_Init+0x74>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d6:	4b15      	ldr	r3, [pc, #84]	; (800072c <MX_I2C2_Init+0x74>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <MX_I2C2_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <MX_I2C2_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e8:	4b10      	ldr	r3, [pc, #64]	; (800072c <MX_I2C2_Init+0x74>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ee:	4b0f      	ldr	r3, [pc, #60]	; (800072c <MX_I2C2_Init+0x74>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006f4:	480d      	ldr	r0, [pc, #52]	; (800072c <MX_I2C2_Init+0x74>)
 80006f6:	f001 f9e0 	bl	8001aba <HAL_I2C_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000700:	f000 fa8e 	bl	8000c20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000704:	2100      	movs	r1, #0
 8000706:	4809      	ldr	r0, [pc, #36]	; (800072c <MX_I2C2_Init+0x74>)
 8000708:	f001 fa72 	bl	8001bf0 <HAL_I2CEx_ConfigAnalogFilter>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000712:	f000 fa85 	bl	8000c20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000716:	2100      	movs	r1, #0
 8000718:	4804      	ldr	r0, [pc, #16]	; (800072c <MX_I2C2_Init+0x74>)
 800071a:	f001 fab4 	bl	8001c86 <HAL_I2CEx_ConfigDigitalFilter>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000724:	f000 fa7c 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	2000016c 	.word	0x2000016c
 8000730:	40005800 	.word	0x40005800

08000734 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_QUADSPI_Init+0x44>)
 800073a:	4a10      	ldr	r2, [pc, #64]	; (800077c <MX_QUADSPI_Init+0x48>)
 800073c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_QUADSPI_Init+0x44>)
 8000740:	2202      	movs	r2, #2
 8000742:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_QUADSPI_Init+0x44>)
 8000746:	2204      	movs	r2, #4
 8000748:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	; (8000778 <MX_QUADSPI_Init+0x44>)
 800074c:	2210      	movs	r2, #16
 800074e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000750:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_QUADSPI_Init+0x44>)
 8000752:	2217      	movs	r2, #23
 8000754:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000756:	4b08      	ldr	r3, [pc, #32]	; (8000778 <MX_QUADSPI_Init+0x44>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_QUADSPI_Init+0x44>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	; (8000778 <MX_QUADSPI_Init+0x44>)
 8000764:	f002 fcee 	bl	8003144 <HAL_QSPI_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800076e:	f000 fa57 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200001c0 	.word	0x200001c0
 800077c:	a0001000 	.word	0xa0001000

08000780 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_SPI3_Init+0x74>)
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <MX_SPI3_Init+0x78>)
 8000788:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_SPI3_Init+0x74>)
 800078c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000790:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_SPI3_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_SPI3_Init+0x74>)
 800079a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800079e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_SPI3_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_SPI3_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80007ac:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_SPI3_Init+0x74>)
 80007ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007b2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_SPI3_Init+0x74>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_SPI3_Init+0x74>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_SPI3_Init+0x74>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_SPI3_Init+0x74>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_SPI3_Init+0x74>)
 80007ce:	2207      	movs	r2, #7
 80007d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_SPI3_Init+0x74>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_SPI3_Init+0x74>)
 80007da:	2208      	movs	r2, #8
 80007dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_SPI3_Init+0x74>)
 80007e0:	f004 f838 	bl	8004854 <HAL_SPI_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007ea:	f000 fa19 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000204 	.word	0x20000204
 80007f8:	40003c00 	.word	0x40003c00

080007fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000802:	4a15      	ldr	r2, [pc, #84]	; (8000858 <MX_USART1_UART_Init+0x5c>)
 8000804:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000808:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800080c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART1_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART1_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART1_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000840:	f004 f8ab 	bl	800499a <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 f9e9 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000268 	.word	0x20000268
 8000858:	40013800 	.word	0x40013800

0800085c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 8000862:	4a15      	ldr	r2, [pc, #84]	; (80008b8 <MX_USART3_UART_Init+0x5c>)
 8000864:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000866:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 8000868:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800086c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 800087c:	2200      	movs	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 8000882:	220c      	movs	r2, #12
 8000884:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 8000888:	2200      	movs	r2, #0
 800088a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 800088e:	2200      	movs	r2, #0
 8000890:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 8000894:	2200      	movs	r2, #0
 8000896:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 800089a:	2200      	movs	r2, #0
 800089c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART3_UART_Init+0x58>)
 80008a0:	f004 f87b 	bl	800499a <HAL_UART_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80008aa:	f000 f9b9 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200002f0 	.word	0x200002f0
 80008b8:	40004800 	.word	0x40004800

080008bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	; 0x28
 80008c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008d2:	4bbd      	ldr	r3, [pc, #756]	; (8000bc8 <MX_GPIO_Init+0x30c>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4abc      	ldr	r2, [pc, #752]	; (8000bc8 <MX_GPIO_Init+0x30c>)
 80008d8:	f043 0310 	orr.w	r3, r3, #16
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4bba      	ldr	r3, [pc, #744]	; (8000bc8 <MX_GPIO_Init+0x30c>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ea:	4bb7      	ldr	r3, [pc, #732]	; (8000bc8 <MX_GPIO_Init+0x30c>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4ab6      	ldr	r2, [pc, #728]	; (8000bc8 <MX_GPIO_Init+0x30c>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f6:	4bb4      	ldr	r3, [pc, #720]	; (8000bc8 <MX_GPIO_Init+0x30c>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4bb1      	ldr	r3, [pc, #708]	; (8000bc8 <MX_GPIO_Init+0x30c>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	4ab0      	ldr	r2, [pc, #704]	; (8000bc8 <MX_GPIO_Init+0x30c>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090e:	4bae      	ldr	r3, [pc, #696]	; (8000bc8 <MX_GPIO_Init+0x30c>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60bb      	str	r3, [r7, #8]
 8000918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4bab      	ldr	r3, [pc, #684]	; (8000bc8 <MX_GPIO_Init+0x30c>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	4aaa      	ldr	r2, [pc, #680]	; (8000bc8 <MX_GPIO_Init+0x30c>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000926:	4ba8      	ldr	r3, [pc, #672]	; (8000bc8 <MX_GPIO_Init+0x30c>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	f003 0302 	and.w	r3, r3, #2
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000932:	4ba5      	ldr	r3, [pc, #660]	; (8000bc8 <MX_GPIO_Init+0x30c>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	4aa4      	ldr	r2, [pc, #656]	; (8000bc8 <MX_GPIO_Init+0x30c>)
 8000938:	f043 0308 	orr.w	r3, r3, #8
 800093c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093e:	4ba2      	ldr	r3, [pc, #648]	; (8000bc8 <MX_GPIO_Init+0x30c>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	f003 0308 	and.w	r3, r3, #8
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000950:	489e      	ldr	r0, [pc, #632]	; (8000bcc <MX_GPIO_Init+0x310>)
 8000952:	f001 f877 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f248 1104 	movw	r1, #33028	; 0x8104
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f001 f870 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000964:	2200      	movs	r2, #0
 8000966:	f24f 0114 	movw	r1, #61460	; 0xf014
 800096a:	4899      	ldr	r0, [pc, #612]	; (8000bd0 <MX_GPIO_Init+0x314>)
 800096c:	f001 f86a 	bl	8001a44 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f241 0181 	movw	r1, #4225	; 0x1081
 8000976:	4897      	ldr	r0, [pc, #604]	; (8000bd4 <MX_GPIO_Init+0x318>)
 8000978:	f001 f864 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000982:	4894      	ldr	r0, [pc, #592]	; (8000bd4 <MX_GPIO_Init+0x318>)
 8000984:	f001 f85e 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800098e:	4892      	ldr	r0, [pc, #584]	; (8000bd8 <MX_GPIO_Init+0x31c>)
 8000990:	f001 f858 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2120      	movs	r1, #32
 8000998:	488d      	ldr	r0, [pc, #564]	; (8000bd0 <MX_GPIO_Init+0x314>)
 800099a:	f001 f853 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800099e:	2201      	movs	r2, #1
 80009a0:	2101      	movs	r1, #1
 80009a2:	488a      	ldr	r0, [pc, #552]	; (8000bcc <MX_GPIO_Init+0x310>)
 80009a4:	f001 f84e 	bl	8001a44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80009a8:	f240 1315 	movw	r3, #277	; 0x115
 80009ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4882      	ldr	r0, [pc, #520]	; (8000bcc <MX_GPIO_Init+0x310>)
 80009c2:	f000 fe95 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80009c6:	236a      	movs	r3, #106	; 0x6a
 80009c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	487c      	ldr	r0, [pc, #496]	; (8000bcc <MX_GPIO_Init+0x310>)
 80009dc:	f000 fe88 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80009e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	4878      	ldr	r0, [pc, #480]	; (8000bd8 <MX_GPIO_Init+0x31c>)
 80009f8:	f000 fe7a 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80009fc:	233f      	movs	r3, #63	; 0x3f
 80009fe:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a00:	230b      	movs	r3, #11
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4872      	ldr	r0, [pc, #456]	; (8000bd8 <MX_GPIO_Init+0x31c>)
 8000a10:	f000 fe6e 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a14:	2303      	movs	r3, #3
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a20:	2303      	movs	r3, #3
 8000a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a24:	2308      	movs	r3, #8
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f000 fe5d 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a36:	f248 1304 	movw	r3, #33028	; 0x8104
 8000a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f000 fe4d 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a56:	2308      	movs	r3, #8
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a66:	2301      	movs	r3, #1
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a74:	f000 fe3c 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000a78:	2310      	movs	r3, #16
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a7c:	230b      	movs	r3, #11
 8000a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8e:	f000 fe2f 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000a92:	23e0      	movs	r3, #224	; 0xe0
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a96:	2302      	movs	r3, #2
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000aa2:	2305      	movs	r3, #5
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ab0:	f000 fe1e 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4841      	ldr	r0, [pc, #260]	; (8000bd0 <MX_GPIO_Init+0x314>)
 8000aca:	f000 fe11 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ad2:	230b      	movs	r3, #11
 8000ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	483b      	ldr	r0, [pc, #236]	; (8000bd0 <MX_GPIO_Init+0x314>)
 8000ae2:	f000 fe05 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ae6:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000aea:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4834      	ldr	r0, [pc, #208]	; (8000bd0 <MX_GPIO_Init+0x314>)
 8000b00:	f000 fdf6 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b04:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b08:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	482e      	ldr	r0, [pc, #184]	; (8000bd4 <MX_GPIO_Init+0x318>)
 8000b1c:	f000 fde8 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b20:	f243 0381 	movw	r3, #12417	; 0x3081
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	4826      	ldr	r0, [pc, #152]	; (8000bd4 <MX_GPIO_Init+0x318>)
 8000b3a:	f000 fdd9 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b3e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b44:	2301      	movs	r3, #1
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4820      	ldr	r0, [pc, #128]	; (8000bd8 <MX_GPIO_Init+0x31c>)
 8000b58:	f000 fdca 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b5c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	4619      	mov	r1, r3
 8000b72:	4819      	ldr	r0, [pc, #100]	; (8000bd8 <MX_GPIO_Init+0x31c>)
 8000b74:	f000 fdbc 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b88:	2305      	movs	r3, #5
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <MX_GPIO_Init+0x318>)
 8000b94:	f000 fdac 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000b98:	2378      	movs	r3, #120	; 0x78
 8000b9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba4:	2303      	movs	r3, #3
 8000ba6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ba8:	2307      	movs	r3, #7
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bac:	f107 0314 	add.w	r3, r7, #20
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <MX_GPIO_Init+0x318>)
 8000bb4:	f000 fd9c 	bl	80016f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000bb8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbe:	2312      	movs	r3, #18
 8000bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e00a      	b.n	8000bdc <MX_GPIO_Init+0x320>
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	48001000 	.word	0x48001000
 8000bd0:	48000400 	.word	0x48000400
 8000bd4:	48000c00 	.word	0x48000c00
 8000bd8:	48000800 	.word	0x48000800
 8000bdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bde:	2303      	movs	r3, #3
 8000be0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be2:	2304      	movs	r3, #4
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	480b      	ldr	r0, [pc, #44]	; (8000c1c <MX_GPIO_Init+0x360>)
 8000bee:	f000 fd7f 	bl	80016f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2017      	movs	r0, #23
 8000bf8:	f000 fc37 	bl	800146a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bfc:	2017      	movs	r0, #23
 8000bfe:	f000 fc50 	bl	80014a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c02:	2200      	movs	r2, #0
 8000c04:	2100      	movs	r1, #0
 8000c06:	2028      	movs	r0, #40	; 0x28
 8000c08:	f000 fc2f 	bl	800146a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c0c:	2028      	movs	r0, #40	; 0x28
 8000c0e:	f000 fc48 	bl	80014a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	48000400 	.word	0x48000400

08000c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c24:	b672      	cpsid	i
}
 8000c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <Error_Handler+0x8>
	...

08000c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_MspInit+0x44>)
 8000c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c36:	4a0e      	ldr	r2, [pc, #56]	; (8000c70 <HAL_MspInit+0x44>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <HAL_MspInit+0x44>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	607b      	str	r3, [r7, #4]
 8000c48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <HAL_MspInit+0x44>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4e:	4a08      	ldr	r2, [pc, #32]	; (8000c70 <HAL_MspInit+0x44>)
 8000c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c54:	6593      	str	r3, [r2, #88]	; 0x58
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_MspInit+0x44>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5e:	603b      	str	r3, [r7, #0]
 8000c60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c62:	bf00      	nop
 8000c64:	370c      	adds	r7, #12
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000

08000c74 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b0ac      	sub	sp, #176	; 0xb0
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	2288      	movs	r2, #136	; 0x88
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f008 fa8d 	bl	80091b4 <memset>
  if(DFSDM1_Init == 0)
 8000c9a:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d142      	bne.n	8000d28 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000ca2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ca6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f003 f902 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000cbe:	f7ff ffaf 	bl	8000c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc6:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ccc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cce:	4b19      	ldr	r3, [pc, #100]	; (8000d34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cd6:	613b      	str	r3, [r7, #16]
 8000cd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cda:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	4a15      	ldr	r2, [pc, #84]	; (8000d34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ce0:	f043 0310 	orr.w	r3, r3, #16
 8000ce4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	f003 0310 	and.w	r3, r3, #16
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000cf2:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000cf6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d0c:	2306      	movs	r3, #6
 8000d0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d16:	4619      	mov	r1, r3
 8000d18:	4807      	ldr	r0, [pc, #28]	; (8000d38 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000d1a:	f000 fce9 	bl	80016f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000d1e:	4b04      	ldr	r3, [pc, #16]	; (8000d30 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	3301      	adds	r3, #1
 8000d24:	4a02      	ldr	r2, [pc, #8]	; (8000d30 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d26:	6013      	str	r3, [r2, #0]
  }

}
 8000d28:	bf00      	nop
 8000d2a:	37b0      	adds	r7, #176	; 0xb0
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000378 	.word	0x20000378
 8000d34:	40021000 	.word	0x40021000
 8000d38:	48001000 	.word	0x48001000

08000d3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b0ac      	sub	sp, #176	; 0xb0
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	2288      	movs	r2, #136	; 0x88
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f008 fa29 	bl	80091b4 <memset>
  if(hi2c->Instance==I2C2)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a21      	ldr	r2, [pc, #132]	; (8000dec <HAL_I2C_MspInit+0xb0>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d13b      	bne.n	8000de4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d70:	2300      	movs	r3, #0
 8000d72:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 f89f 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d84:	f7ff ff4c 	bl	8000c20 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d88:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <HAL_I2C_MspInit+0xb4>)
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8c:	4a18      	ldr	r2, [pc, #96]	; (8000df0 <HAL_I2C_MspInit+0xb4>)
 8000d8e:	f043 0302 	orr.w	r3, r3, #2
 8000d92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d94:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_I2C_MspInit+0xb4>)
 8000d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d98:	f003 0302 	and.w	r3, r3, #2
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000da0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000da4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da8:	2312      	movs	r3, #18
 8000daa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dae:	2301      	movs	r3, #1
 8000db0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480b      	ldr	r0, [pc, #44]	; (8000df4 <HAL_I2C_MspInit+0xb8>)
 8000dc8:	f000 fc92 	bl	80016f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_I2C_MspInit+0xb4>)
 8000dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_I2C_MspInit+0xb4>)
 8000dd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_I2C_MspInit+0xb4>)
 8000dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	37b0      	adds	r7, #176	; 0xb0
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40005800 	.word	0x40005800
 8000df0:	40021000 	.word	0x40021000
 8000df4:	48000400 	.word	0x48000400

08000df8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a17      	ldr	r2, [pc, #92]	; (8000e74 <HAL_QSPI_MspInit+0x7c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d128      	bne.n	8000e6c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <HAL_QSPI_MspInit+0x80>)
 8000e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e1e:	4a16      	ldr	r2, [pc, #88]	; (8000e78 <HAL_QSPI_MspInit+0x80>)
 8000e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e24:	6513      	str	r3, [r2, #80]	; 0x50
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <HAL_QSPI_MspInit+0x80>)
 8000e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_QSPI_MspInit+0x80>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a10      	ldr	r2, [pc, #64]	; (8000e78 <HAL_QSPI_MspInit+0x80>)
 8000e38:	f043 0310 	orr.w	r3, r3, #16
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_QSPI_MspInit+0x80>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000e4a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000e4e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	2302      	movs	r3, #2
 8000e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e5c:	230a      	movs	r3, #10
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	4619      	mov	r1, r3
 8000e66:	4805      	ldr	r0, [pc, #20]	; (8000e7c <HAL_QSPI_MspInit+0x84>)
 8000e68:	f000 fc42 	bl	80016f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000e6c:	bf00      	nop
 8000e6e:	3728      	adds	r7, #40	; 0x28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	a0001000 	.word	0xa0001000
 8000e78:	40021000 	.word	0x40021000
 8000e7c:	48001000 	.word	0x48001000

08000e80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	; 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a17      	ldr	r2, [pc, #92]	; (8000efc <HAL_SPI_MspInit+0x7c>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d128      	bne.n	8000ef4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ea2:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <HAL_SPI_MspInit+0x80>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	4a16      	ldr	r2, [pc, #88]	; (8000f00 <HAL_SPI_MspInit+0x80>)
 8000ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eac:	6593      	str	r3, [r2, #88]	; 0x58
 8000eae:	4b14      	ldr	r3, [pc, #80]	; (8000f00 <HAL_SPI_MspInit+0x80>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eb6:	613b      	str	r3, [r7, #16]
 8000eb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	4b11      	ldr	r3, [pc, #68]	; (8000f00 <HAL_SPI_MspInit+0x80>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	4a10      	ldr	r2, [pc, #64]	; (8000f00 <HAL_SPI_MspInit+0x80>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_SPI_MspInit+0x80>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000ed2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ed6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ee4:	2306      	movs	r3, #6
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	4619      	mov	r1, r3
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <HAL_SPI_MspInit+0x84>)
 8000ef0:	f000 fbfe 	bl	80016f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ef4:	bf00      	nop
 8000ef6:	3728      	adds	r7, #40	; 0x28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	40003c00 	.word	0x40003c00
 8000f00:	40021000 	.word	0x40021000
 8000f04:	48000800 	.word	0x48000800

08000f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0ae      	sub	sp, #184	; 0xb8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	2288      	movs	r2, #136	; 0x88
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f008 f943 	bl	80091b4 <memset>
  if(huart->Instance==USART1)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a42      	ldr	r2, [pc, #264]	; (800103c <HAL_UART_MspInit+0x134>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d13b      	bne.n	8000fb0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f40:	f107 031c 	add.w	r3, r7, #28
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 ffb9 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f50:	f7ff fe66 	bl	8000c20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f54:	4b3a      	ldr	r3, [pc, #232]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f58:	4a39      	ldr	r2, [pc, #228]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000f5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5e:	6613      	str	r3, [r2, #96]	; 0x60
 8000f60:	4b37      	ldr	r3, [pc, #220]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b34      	ldr	r3, [pc, #208]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f70:	4a33      	ldr	r2, [pc, #204]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f78:	4b31      	ldr	r3, [pc, #196]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	617b      	str	r3, [r7, #20]
 8000f82:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000f84:	23c0      	movs	r3, #192	; 0xc0
 8000f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4826      	ldr	r0, [pc, #152]	; (8001044 <HAL_UART_MspInit+0x13c>)
 8000faa:	f000 fba1 	bl	80016f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fae:	e040      	b.n	8001032 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a24      	ldr	r2, [pc, #144]	; (8001048 <HAL_UART_MspInit+0x140>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d13b      	bne.n	8001032 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fba:	2304      	movs	r3, #4
 8000fbc:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc2:	f107 031c 	add.w	r3, r7, #28
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f002 ff78 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000fd2:	f7ff fe25 	bl	8000c20 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	4a19      	ldr	r2, [pc, #100]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000fdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	4a13      	ldr	r2, [pc, #76]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000ff4:	f043 0308 	orr.w	r3, r3, #8
 8000ff8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffa:	4b11      	ldr	r3, [pc, #68]	; (8001040 <HAL_UART_MspInit+0x138>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	f003 0308 	and.w	r3, r3, #8
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001006:	f44f 7340 	mov.w	r3, #768	; 0x300
 800100a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100e:	2302      	movs	r3, #2
 8001010:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001020:	2307      	movs	r3, #7
 8001022:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001026:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800102a:	4619      	mov	r1, r3
 800102c:	4807      	ldr	r0, [pc, #28]	; (800104c <HAL_UART_MspInit+0x144>)
 800102e:	f000 fb5f 	bl	80016f0 <HAL_GPIO_Init>
}
 8001032:	bf00      	nop
 8001034:	37b8      	adds	r7, #184	; 0xb8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	40013800 	.word	0x40013800
 8001040:	40021000 	.word	0x40021000
 8001044:	48000400 	.word	0x48000400
 8001048:	40004800 	.word	0x40004800
 800104c:	48000c00 	.word	0x48000c00

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001054:	e7fe      	b.n	8001054 <NMI_Handler+0x4>

08001056 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105a:	e7fe      	b.n	800105a <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	e7fe      	b.n	8001060 <MemManage_Handler+0x4>

08001062 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001066:	e7fe      	b.n	8001066 <BusFault_Handler+0x4>

08001068 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800106c:	e7fe      	b.n	800106c <UsageFault_Handler+0x4>

0800106e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109c:	f000 f8c6 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80010a8:	2020      	movs	r0, #32
 80010aa:	f000 fce3 	bl	8001a74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80010ae:	2040      	movs	r0, #64	; 0x40
 80010b0:	f000 fce0 	bl	8001a74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80010b4:	2080      	movs	r0, #128	; 0x80
 80010b6:	f000 fcdd 	bl	8001a74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80010ba:	f44f 7080 	mov.w	r0, #256	; 0x100
 80010be:	f000 fcd9 	bl	8001a74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}

080010c6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010c6:	b580      	push	{r7, lr}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80010ca:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010ce:	f000 fcd1 	bl	8001a74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80010d2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80010d6:	f000 fccd 	bl	8001a74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80010da:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010de:	f000 fcc9 	bl	8001a74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80010e2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010e6:	f000 fcc5 	bl	8001a74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80010ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010ee:	f000 fcc1 	bl	8001a74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010f2:	bf00      	nop
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <OTG_FS_IRQHandler+0x10>)
 80010fe:	f000 ff61 	bl	8001fc4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000888 	.word	0x20000888

0800110c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001110:	4b06      	ldr	r3, [pc, #24]	; (800112c <SystemInit+0x20>)
 8001112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001116:	4a05      	ldr	r2, [pc, #20]	; (800112c <SystemInit+0x20>)
 8001118:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800111c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001120:	bf00      	nop
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001168 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001134:	f7ff ffea 	bl	800110c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001138:	480c      	ldr	r0, [pc, #48]	; (800116c <LoopForever+0x6>)
  ldr r1, =_edata
 800113a:	490d      	ldr	r1, [pc, #52]	; (8001170 <LoopForever+0xa>)
  ldr r2, =_sidata
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <LoopForever+0xe>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001140:	e002      	b.n	8001148 <LoopCopyDataInit>

08001142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001146:	3304      	adds	r3, #4

08001148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800114c:	d3f9      	bcc.n	8001142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001150:	4c0a      	ldr	r4, [pc, #40]	; (800117c <LoopForever+0x16>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001154:	e001      	b.n	800115a <LoopFillZerobss>

08001156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001158:	3204      	adds	r2, #4

0800115a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800115c:	d3fb      	bcc.n	8001156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115e:	f008 f831 	bl	80091c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001162:	f7ff f9af 	bl	80004c4 <main>

08001166 <LoopForever>:

LoopForever:
    b LoopForever
 8001166:	e7fe      	b.n	8001166 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001168:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8001174:	080092dc 	.word	0x080092dc
  ldr r2, =_sbss
 8001178:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 800117c:	20000db4 	.word	0x20000db4

08001180 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC1_2_IRQHandler>

08001182 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800118c:	2003      	movs	r0, #3
 800118e:	f000 f961 	bl	8001454 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001192:	2000      	movs	r0, #0
 8001194:	f000 f80e 	bl	80011b4 <HAL_InitTick>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d002      	beq.n	80011a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	71fb      	strb	r3, [r7, #7]
 80011a2:	e001      	b.n	80011a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a4:	f7ff fd42 	bl	8000c2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011a8:	79fb      	ldrb	r3, [r7, #7]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
	...

080011b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011bc:	2300      	movs	r3, #0
 80011be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011c0:	4b17      	ldr	r3, [pc, #92]	; (8001220 <HAL_InitTick+0x6c>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d023      	beq.n	8001210 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011c8:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_InitTick+0x70>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_InitTick+0x6c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	4619      	mov	r1, r3
 80011d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011da:	fbb2 f3f3 	udiv	r3, r2, r3
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f96d 	bl	80014be <HAL_SYSTICK_Config>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d10f      	bne.n	800120a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b0f      	cmp	r3, #15
 80011ee:	d809      	bhi.n	8001204 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f0:	2200      	movs	r2, #0
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	f04f 30ff 	mov.w	r0, #4294967295
 80011f8:	f000 f937 	bl	800146a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011fc:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <HAL_InitTick+0x74>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e007      	b.n	8001214 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	73fb      	strb	r3, [r7, #15]
 8001208:	e004      	b.n	8001214 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	73fb      	strb	r3, [r7, #15]
 800120e:	e001      	b.n	8001214 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001214:	7bfb      	ldrb	r3, [r7, #15]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000008 	.word	0x20000008
 8001224:	20000000 	.word	0x20000000
 8001228:	20000004 	.word	0x20000004

0800122c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	; (8001250 <HAL_IncTick+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a04      	ldr	r2, [pc, #16]	; (8001250 <HAL_IncTick+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000008 	.word	0x20000008
 8001250:	2000037c 	.word	0x2000037c

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	2000037c 	.word	0x2000037c

0800126c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff ffee 	bl	8001254 <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001284:	d005      	beq.n	8001292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001286:	4b0a      	ldr	r3, [pc, #40]	; (80012b0 <HAL_Delay+0x44>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001292:	bf00      	nop
 8001294:	f7ff ffde 	bl	8001254 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d8f7      	bhi.n	8001294 <HAL_Delay+0x28>
  {
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008

080012b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c4:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012d0:	4013      	ands	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e6:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	60d3      	str	r3, [r2, #12]
}
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <__NVIC_GetPriorityGrouping+0x18>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	f003 0307 	and.w	r3, r3, #7
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001326:	2b00      	cmp	r3, #0
 8001328:	db0b      	blt.n	8001342 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	f003 021f 	and.w	r2, r3, #31
 8001330:	4907      	ldr	r1, [pc, #28]	; (8001350 <__NVIC_EnableIRQ+0x38>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	095b      	lsrs	r3, r3, #5
 8001338:	2001      	movs	r0, #1
 800133a:	fa00 f202 	lsl.w	r2, r0, r2
 800133e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	e000e100 	.word	0xe000e100

08001354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	6039      	str	r1, [r7, #0]
 800135e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	db0a      	blt.n	800137e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	b2da      	uxtb	r2, r3
 800136c:	490c      	ldr	r1, [pc, #48]	; (80013a0 <__NVIC_SetPriority+0x4c>)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	0112      	lsls	r2, r2, #4
 8001374:	b2d2      	uxtb	r2, r2
 8001376:	440b      	add	r3, r1
 8001378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800137c:	e00a      	b.n	8001394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	b2da      	uxtb	r2, r3
 8001382:	4908      	ldr	r1, [pc, #32]	; (80013a4 <__NVIC_SetPriority+0x50>)
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	3b04      	subs	r3, #4
 800138c:	0112      	lsls	r2, r2, #4
 800138e:	b2d2      	uxtb	r2, r2
 8001390:	440b      	add	r3, r1
 8001392:	761a      	strb	r2, [r3, #24]
}
 8001394:	bf00      	nop
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000e100 	.word	0xe000e100
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f003 0307 	and.w	r3, r3, #7
 80013ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	f1c3 0307 	rsb	r3, r3, #7
 80013c2:	2b04      	cmp	r3, #4
 80013c4:	bf28      	it	cs
 80013c6:	2304      	movcs	r3, #4
 80013c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3304      	adds	r3, #4
 80013ce:	2b06      	cmp	r3, #6
 80013d0:	d902      	bls.n	80013d8 <NVIC_EncodePriority+0x30>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	3b03      	subs	r3, #3
 80013d6:	e000      	b.n	80013da <NVIC_EncodePriority+0x32>
 80013d8:	2300      	movs	r3, #0
 80013da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	f04f 32ff 	mov.w	r2, #4294967295
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43da      	mvns	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	401a      	ands	r2, r3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f0:	f04f 31ff 	mov.w	r1, #4294967295
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa01 f303 	lsl.w	r3, r1, r3
 80013fa:	43d9      	mvns	r1, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	4313      	orrs	r3, r2
         );
}
 8001402:	4618      	mov	r0, r3
 8001404:	3724      	adds	r7, #36	; 0x24
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
	...

08001410 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3b01      	subs	r3, #1
 800141c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001420:	d301      	bcc.n	8001426 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001422:	2301      	movs	r3, #1
 8001424:	e00f      	b.n	8001446 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001426:	4a0a      	ldr	r2, [pc, #40]	; (8001450 <SysTick_Config+0x40>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3b01      	subs	r3, #1
 800142c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800142e:	210f      	movs	r1, #15
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f7ff ff8e 	bl	8001354 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001438:	4b05      	ldr	r3, [pc, #20]	; (8001450 <SysTick_Config+0x40>)
 800143a:	2200      	movs	r2, #0
 800143c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800143e:	4b04      	ldr	r3, [pc, #16]	; (8001450 <SysTick_Config+0x40>)
 8001440:	2207      	movs	r2, #7
 8001442:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	e000e010 	.word	0xe000e010

08001454 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f7ff ff29 	bl	80012b4 <__NVIC_SetPriorityGrouping>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b086      	sub	sp, #24
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	60b9      	str	r1, [r7, #8]
 8001474:	607a      	str	r2, [r7, #4]
 8001476:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800147c:	f7ff ff3e 	bl	80012fc <__NVIC_GetPriorityGrouping>
 8001480:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	68b9      	ldr	r1, [r7, #8]
 8001486:	6978      	ldr	r0, [r7, #20]
 8001488:	f7ff ff8e 	bl	80013a8 <NVIC_EncodePriority>
 800148c:	4602      	mov	r2, r0
 800148e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001492:	4611      	mov	r1, r2
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff5d 	bl	8001354 <__NVIC_SetPriority>
}
 800149a:	bf00      	nop
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff31 	bl	8001318 <__NVIC_EnableIRQ>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff ffa2 	bl	8001410 <SysTick_Config>
 80014cc:	4603      	mov	r3, r0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0ac      	b.n	8001644 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f8b2 	bl	8001658 <DFSDM_GetChannelFromInstance>
 80014f4:	4603      	mov	r3, r0
 80014f6:	4a55      	ldr	r2, [pc, #340]	; (800164c <HAL_DFSDM_ChannelInit+0x174>)
 80014f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e09f      	b.n	8001644 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f7ff fbb5 	bl	8000c74 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800150a:	4b51      	ldr	r3, [pc, #324]	; (8001650 <HAL_DFSDM_ChannelInit+0x178>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3301      	adds	r3, #1
 8001510:	4a4f      	ldr	r2, [pc, #316]	; (8001650 <HAL_DFSDM_ChannelInit+0x178>)
 8001512:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001514:	4b4e      	ldr	r3, [pc, #312]	; (8001650 <HAL_DFSDM_ChannelInit+0x178>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d125      	bne.n	8001568 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800151c:	4b4d      	ldr	r3, [pc, #308]	; (8001654 <HAL_DFSDM_ChannelInit+0x17c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a4c      	ldr	r2, [pc, #304]	; (8001654 <HAL_DFSDM_ChannelInit+0x17c>)
 8001522:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001526:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001528:	4b4a      	ldr	r3, [pc, #296]	; (8001654 <HAL_DFSDM_ChannelInit+0x17c>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	4948      	ldr	r1, [pc, #288]	; (8001654 <HAL_DFSDM_ChannelInit+0x17c>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001536:	4b47      	ldr	r3, [pc, #284]	; (8001654 <HAL_DFSDM_ChannelInit+0x17c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a46      	ldr	r2, [pc, #280]	; (8001654 <HAL_DFSDM_ChannelInit+0x17c>)
 800153c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001540:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	791b      	ldrb	r3, [r3, #4]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d108      	bne.n	800155c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800154a:	4b42      	ldr	r3, [pc, #264]	; (8001654 <HAL_DFSDM_ChannelInit+0x17c>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	3b01      	subs	r3, #1
 8001554:	041b      	lsls	r3, r3, #16
 8001556:	493f      	ldr	r1, [pc, #252]	; (8001654 <HAL_DFSDM_ChannelInit+0x17c>)
 8001558:	4313      	orrs	r3, r2
 800155a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800155c:	4b3d      	ldr	r3, [pc, #244]	; (8001654 <HAL_DFSDM_ChannelInit+0x17c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a3c      	ldr	r2, [pc, #240]	; (8001654 <HAL_DFSDM_ChannelInit+0x17c>)
 8001562:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001566:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001576:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	6819      	ldr	r1, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001586:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800158c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	430a      	orrs	r2, r1
 8001594:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f022 020f 	bic.w	r2, r2, #15
 80015a4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6819      	ldr	r1, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80015cc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6899      	ldr	r1, [r3, #8]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015dc:	3b01      	subs	r3, #1
 80015de:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80015e0:	431a      	orrs	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f002 0207 	and.w	r2, r2, #7
 80015f8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6859      	ldr	r1, [r3, #4]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	430a      	orrs	r2, r1
 8001614:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001624:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2201      	movs	r2, #1
 800162a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f810 	bl	8001658 <DFSDM_GetChannelFromInstance>
 8001638:	4602      	mov	r2, r0
 800163a:	4904      	ldr	r1, [pc, #16]	; (800164c <HAL_DFSDM_ChannelInit+0x174>)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000384 	.word	0x20000384
 8001650:	20000380 	.word	0x20000380
 8001654:	40016000 	.word	0x40016000

08001658 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d102      	bne.n	800166e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	e02b      	b.n	80016c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a19      	ldr	r2, [pc, #100]	; (80016d8 <DFSDM_GetChannelFromInstance+0x80>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d102      	bne.n	800167c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001676:	2301      	movs	r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	e024      	b.n	80016c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a17      	ldr	r2, [pc, #92]	; (80016dc <DFSDM_GetChannelFromInstance+0x84>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d102      	bne.n	800168a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001684:	2302      	movs	r3, #2
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	e01d      	b.n	80016c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <DFSDM_GetChannelFromInstance+0x88>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d102      	bne.n	8001698 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001692:	2304      	movs	r3, #4
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	e016      	b.n	80016c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <DFSDM_GetChannelFromInstance+0x8c>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d102      	bne.n	80016a6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80016a0:	2305      	movs	r3, #5
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	e00f      	b.n	80016c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <DFSDM_GetChannelFromInstance+0x90>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d102      	bne.n	80016b4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80016ae:	2306      	movs	r3, #6
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	e008      	b.n	80016c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a0d      	ldr	r2, [pc, #52]	; (80016ec <DFSDM_GetChannelFromInstance+0x94>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d102      	bne.n	80016c2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80016bc:	2307      	movs	r3, #7
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	e001      	b.n	80016c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80016c2:	2303      	movs	r3, #3
 80016c4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40016000 	.word	0x40016000
 80016d8:	40016020 	.word	0x40016020
 80016dc:	40016040 	.word	0x40016040
 80016e0:	40016080 	.word	0x40016080
 80016e4:	400160a0 	.word	0x400160a0
 80016e8:	400160c0 	.word	0x400160c0
 80016ec:	400160e0 	.word	0x400160e0

080016f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016fe:	e17f      	b.n	8001a00 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	2101      	movs	r1, #1
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	fa01 f303 	lsl.w	r3, r1, r3
 800170c:	4013      	ands	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	f000 8171 	beq.w	80019fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b01      	cmp	r3, #1
 8001722:	d005      	beq.n	8001730 <HAL_GPIO_Init+0x40>
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f003 0303 	and.w	r3, r3, #3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d130      	bne.n	8001792 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	2203      	movs	r2, #3
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4013      	ands	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	68da      	ldr	r2, [r3, #12]
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	4313      	orrs	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001766:	2201      	movs	r2, #1
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	091b      	lsrs	r3, r3, #4
 800177c:	f003 0201 	and.w	r2, r3, #1
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f003 0303 	and.w	r3, r3, #3
 800179a:	2b03      	cmp	r3, #3
 800179c:	d118      	bne.n	80017d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017a4:	2201      	movs	r2, #1
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	08db      	lsrs	r3, r3, #3
 80017ba:	f003 0201 	and.w	r2, r3, #1
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d017      	beq.n	800180c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	689a      	ldr	r2, [r3, #8]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b02      	cmp	r3, #2
 8001816:	d123      	bne.n	8001860 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	08da      	lsrs	r2, r3, #3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3208      	adds	r2, #8
 8001820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001824:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f003 0307 	and.w	r3, r3, #7
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	220f      	movs	r2, #15
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f003 0307 	and.w	r3, r3, #7
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	693a      	ldr	r2, [r7, #16]
 800184e:	4313      	orrs	r3, r2
 8001850:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	08da      	lsrs	r2, r3, #3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	3208      	adds	r2, #8
 800185a:	6939      	ldr	r1, [r7, #16]
 800185c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0203 	and.w	r2, r3, #3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800189c:	2b00      	cmp	r3, #0
 800189e:	f000 80ac 	beq.w	80019fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018a2:	4b5f      	ldr	r3, [pc, #380]	; (8001a20 <HAL_GPIO_Init+0x330>)
 80018a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a6:	4a5e      	ldr	r2, [pc, #376]	; (8001a20 <HAL_GPIO_Init+0x330>)
 80018a8:	f043 0301 	orr.w	r3, r3, #1
 80018ac:	6613      	str	r3, [r2, #96]	; 0x60
 80018ae:	4b5c      	ldr	r3, [pc, #368]	; (8001a20 <HAL_GPIO_Init+0x330>)
 80018b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018ba:	4a5a      	ldr	r2, [pc, #360]	; (8001a24 <HAL_GPIO_Init+0x334>)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	089b      	lsrs	r3, r3, #2
 80018c0:	3302      	adds	r3, #2
 80018c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	220f      	movs	r2, #15
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018e4:	d025      	beq.n	8001932 <HAL_GPIO_Init+0x242>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4f      	ldr	r2, [pc, #316]	; (8001a28 <HAL_GPIO_Init+0x338>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d01f      	beq.n	800192e <HAL_GPIO_Init+0x23e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4e      	ldr	r2, [pc, #312]	; (8001a2c <HAL_GPIO_Init+0x33c>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d019      	beq.n	800192a <HAL_GPIO_Init+0x23a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4d      	ldr	r2, [pc, #308]	; (8001a30 <HAL_GPIO_Init+0x340>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0x236>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4c      	ldr	r2, [pc, #304]	; (8001a34 <HAL_GPIO_Init+0x344>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00d      	beq.n	8001922 <HAL_GPIO_Init+0x232>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4b      	ldr	r2, [pc, #300]	; (8001a38 <HAL_GPIO_Init+0x348>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x22e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4a      	ldr	r2, [pc, #296]	; (8001a3c <HAL_GPIO_Init+0x34c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_GPIO_Init+0x22a>
 8001916:	2306      	movs	r3, #6
 8001918:	e00c      	b.n	8001934 <HAL_GPIO_Init+0x244>
 800191a:	2307      	movs	r3, #7
 800191c:	e00a      	b.n	8001934 <HAL_GPIO_Init+0x244>
 800191e:	2305      	movs	r3, #5
 8001920:	e008      	b.n	8001934 <HAL_GPIO_Init+0x244>
 8001922:	2304      	movs	r3, #4
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x244>
 8001926:	2303      	movs	r3, #3
 8001928:	e004      	b.n	8001934 <HAL_GPIO_Init+0x244>
 800192a:	2302      	movs	r3, #2
 800192c:	e002      	b.n	8001934 <HAL_GPIO_Init+0x244>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_GPIO_Init+0x244>
 8001932:	2300      	movs	r3, #0
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	f002 0203 	and.w	r2, r2, #3
 800193a:	0092      	lsls	r2, r2, #2
 800193c:	4093      	lsls	r3, r2
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001944:	4937      	ldr	r1, [pc, #220]	; (8001a24 <HAL_GPIO_Init+0x334>)
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	089b      	lsrs	r3, r3, #2
 800194a:	3302      	adds	r3, #2
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001952:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <HAL_GPIO_Init+0x350>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d003      	beq.n	8001976 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	4313      	orrs	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001976:	4a32      	ldr	r2, [pc, #200]	; (8001a40 <HAL_GPIO_Init+0x350>)
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800197c:	4b30      	ldr	r3, [pc, #192]	; (8001a40 <HAL_GPIO_Init+0x350>)
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	43db      	mvns	r3, r3
 8001986:	693a      	ldr	r2, [r7, #16]
 8001988:	4013      	ands	r3, r2
 800198a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d003      	beq.n	80019a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019a0:	4a27      	ldr	r2, [pc, #156]	; (8001a40 <HAL_GPIO_Init+0x350>)
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019a6:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <HAL_GPIO_Init+0x350>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019ca:	4a1d      	ldr	r2, [pc, #116]	; (8001a40 <HAL_GPIO_Init+0x350>)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <HAL_GPIO_Init+0x350>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019f4:	4a12      	ldr	r2, [pc, #72]	; (8001a40 <HAL_GPIO_Init+0x350>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f47f ae78 	bne.w	8001700 <HAL_GPIO_Init+0x10>
  }
}
 8001a10:	bf00      	nop
 8001a12:	bf00      	nop
 8001a14:	371c      	adds	r7, #28
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	48000800 	.word	0x48000800
 8001a30:	48000c00 	.word	0x48000c00
 8001a34:	48001000 	.word	0x48001000
 8001a38:	48001400 	.word	0x48001400
 8001a3c:	48001800 	.word	0x48001800
 8001a40:	40010400 	.word	0x40010400

08001a44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
 8001a50:	4613      	mov	r3, r2
 8001a52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a54:	787b      	ldrb	r3, [r7, #1]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d003      	beq.n	8001a62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a62:	887a      	ldrh	r2, [r7, #2]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a7e:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a80:	695a      	ldr	r2, [r3, #20]
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	4013      	ands	r3, r2
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d006      	beq.n	8001a98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a8a:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 f806 	bl	8001aa4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40010400 	.word	0x40010400

08001aa4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e08d      	b.n	8001be8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d106      	bne.n	8001ae6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f7ff f92b 	bl	8000d3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2224      	movs	r2, #36	; 0x24
 8001aea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f022 0201 	bic.w	r2, r2, #1
 8001afc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b0a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b1a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d107      	bne.n	8001b34 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b30:	609a      	str	r2, [r3, #8]
 8001b32:	e006      	b.n	8001b42 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b40:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d108      	bne.n	8001b5c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b58:	605a      	str	r2, [r3, #4]
 8001b5a:	e007      	b.n	8001b6c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b6a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6812      	ldr	r2, [r2, #0]
 8001b76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b7e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b8e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691a      	ldr	r2, [r3, #16]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69d9      	ldr	r1, [r3, #28]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a1a      	ldr	r2, [r3, #32]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f042 0201 	orr.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b20      	cmp	r3, #32
 8001c04:	d138      	bne.n	8001c78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c10:	2302      	movs	r3, #2
 8001c12:	e032      	b.n	8001c7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2224      	movs	r2, #36	; 0x24
 8001c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 0201 	bic.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	6819      	ldr	r1, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	430a      	orrs	r2, r1
 8001c52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e000      	b.n	8001c7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c78:	2302      	movs	r3, #2
  }
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d139      	bne.n	8001d10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d101      	bne.n	8001caa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	e033      	b.n	8001d12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2201      	movs	r2, #1
 8001cae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2224      	movs	r2, #36	; 0x24
 8001cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0201 	bic.w	r2, r2, #1
 8001cc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	021b      	lsls	r3, r3, #8
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f042 0201 	orr.w	r2, r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	e000      	b.n	8001d12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001d10:	2302      	movs	r3, #2
  }
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3714      	adds	r7, #20
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d20:	b08f      	sub	sp, #60	; 0x3c
 8001d22:	af0a      	add	r7, sp, #40	; 0x28
 8001d24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d101      	bne.n	8001d30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e116      	b.n	8001f5e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d106      	bne.n	8001d50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f006 fdf0 	bl	8008930 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2203      	movs	r2, #3
 8001d54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fc09 	bl	8005586 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	603b      	str	r3, [r7, #0]
 8001d7a:	687e      	ldr	r6, [r7, #4]
 8001d7c:	466d      	mov	r5, sp
 8001d7e:	f106 0410 	add.w	r4, r6, #16
 8001d82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d92:	1d33      	adds	r3, r6, #4
 8001d94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d96:	6838      	ldr	r0, [r7, #0]
 8001d98:	f003 fb1b 	bl	80053d2 <USB_CoreInit>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2202      	movs	r2, #2
 8001da6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e0d7      	b.n	8001f5e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f003 fbf7 	bl	80055a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	73fb      	strb	r3, [r7, #15]
 8001dbe:	e04a      	b.n	8001e56 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001dc0:	7bfa      	ldrb	r2, [r7, #15]
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	440b      	add	r3, r1
 8001dce:	333d      	adds	r3, #61	; 0x3d
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001dd4:	7bfa      	ldrb	r2, [r7, #15]
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4413      	add	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	333c      	adds	r3, #60	; 0x3c
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001de8:	7bfa      	ldrb	r2, [r7, #15]
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	b298      	uxth	r0, r3
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	3356      	adds	r3, #86	; 0x56
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001e00:	7bfa      	ldrb	r2, [r7, #15]
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	3340      	adds	r3, #64	; 0x40
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	4413      	add	r3, r2
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	440b      	add	r3, r1
 8001e22:	3344      	adds	r3, #68	; 0x44
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001e28:	7bfa      	ldrb	r2, [r7, #15]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	3348      	adds	r3, #72	; 0x48
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	334c      	adds	r3, #76	; 0x4c
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	3301      	adds	r3, #1
 8001e54:	73fb      	strb	r3, [r7, #15]
 8001e56:	7bfa      	ldrb	r2, [r7, #15]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d3af      	bcc.n	8001dc0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	73fb      	strb	r3, [r7, #15]
 8001e64:	e044      	b.n	8001ef0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e66:	7bfa      	ldrb	r2, [r7, #15]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e8e:	7bfa      	ldrb	r2, [r7, #15]
 8001e90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e92:	7bfa      	ldrb	r2, [r7, #15]
 8001e94:	6879      	ldr	r1, [r7, #4]
 8001e96:	4613      	mov	r3, r2
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	440b      	add	r3, r1
 8001ea0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ea8:	7bfa      	ldrb	r2, [r7, #15]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	00db      	lsls	r3, r3, #3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001ebe:	7bfa      	ldrb	r2, [r7, #15]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	00db      	lsls	r3, r3, #3
 8001ec6:	4413      	add	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	4613      	mov	r3, r2
 8001eda:	00db      	lsls	r3, r3, #3
 8001edc:	4413      	add	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	3301      	adds	r3, #1
 8001eee:	73fb      	strb	r3, [r7, #15]
 8001ef0:	7bfa      	ldrb	r2, [r7, #15]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d3b5      	bcc.n	8001e66 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	603b      	str	r3, [r7, #0]
 8001f00:	687e      	ldr	r6, [r7, #4]
 8001f02:	466d      	mov	r5, sp
 8001f04:	f106 0410 	add.w	r4, r6, #16
 8001f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f10:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f14:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f18:	1d33      	adds	r3, r6, #4
 8001f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f1c:	6838      	ldr	r0, [r7, #0]
 8001f1e:	f003 fb8f 	bl	8005640 <USB_DevInit>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e014      	b.n	8001f5e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d102      	bne.n	8001f52 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f001 f851 	bl	8002ff4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f004 fb3d 	bl	80065d6 <USB_DevDisconnect>

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f66 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_PCD_Start+0x1c>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e01c      	b.n	8001fbc <HAL_PCD_Start+0x56>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d105      	bne.n	8001f9e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f96:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f003 fade 	bl	8005564 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f004 faf1 	bl	8006594 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001fc4:	b590      	push	{r4, r7, lr}
 8001fc6:	b08d      	sub	sp, #52	; 0x34
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f004 fbaf 	bl	800673e <USB_GetMode>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f040 847e 	bne.w	80028e4 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4618      	mov	r0, r3
 8001fee:	f004 fb13 	bl	8006618 <USB_ReadInterrupts>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f000 8474 	beq.w	80028e2 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	0a1b      	lsrs	r3, r3, #8
 8002004:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f004 fb00 	bl	8006618 <USB_ReadInterrupts>
 8002018:	4603      	mov	r3, r0
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b02      	cmp	r3, #2
 8002020:	d107      	bne.n	8002032 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	695a      	ldr	r2, [r3, #20]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f002 0202 	and.w	r2, r2, #2
 8002030:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f004 faee 	bl	8006618 <USB_ReadInterrupts>
 800203c:	4603      	mov	r3, r0
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	2b10      	cmp	r3, #16
 8002044:	d161      	bne.n	800210a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699a      	ldr	r2, [r3, #24]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 0210 	bic.w	r2, r2, #16
 8002054:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002056:	6a3b      	ldr	r3, [r7, #32]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	f003 020f 	and.w	r2, r3, #15
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	3304      	adds	r3, #4
 8002074:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	0c5b      	lsrs	r3, r3, #17
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	2b02      	cmp	r3, #2
 8002080:	d124      	bne.n	80020cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002088:	4013      	ands	r3, r2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d035      	beq.n	80020fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002098:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800209c:	b29b      	uxth	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	6a38      	ldr	r0, [r7, #32]
 80020a2:	f004 f925 	bl	80062f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	091b      	lsrs	r3, r3, #4
 80020ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020b2:	441a      	add	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	695a      	ldr	r2, [r3, #20]
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	091b      	lsrs	r3, r3, #4
 80020c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020c4:	441a      	add	r2, r3
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	615a      	str	r2, [r3, #20]
 80020ca:	e016      	b.n	80020fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	0c5b      	lsrs	r3, r3, #17
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	2b06      	cmp	r3, #6
 80020d6:	d110      	bne.n	80020fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020de:	2208      	movs	r2, #8
 80020e0:	4619      	mov	r1, r3
 80020e2:	6a38      	ldr	r0, [r7, #32]
 80020e4:	f004 f904 	bl	80062f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	091b      	lsrs	r3, r3, #4
 80020f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020f4:	441a      	add	r2, r3
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0210 	orr.w	r2, r2, #16
 8002108:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4618      	mov	r0, r3
 8002110:	f004 fa82 	bl	8006618 <USB_ReadInterrupts>
 8002114:	4603      	mov	r3, r0
 8002116:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800211a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800211e:	f040 80a7 	bne.w	8002270 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002122:	2300      	movs	r3, #0
 8002124:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f004 fa87 	bl	800663e <USB_ReadDevAllOutEpInterrupt>
 8002130:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002132:	e099      	b.n	8002268 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 808e 	beq.w	800225c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f004 faab 	bl	80066a6 <USB_ReadDevOutEPInterrupt>
 8002150:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00c      	beq.n	8002176 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800215c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215e:	015a      	lsls	r2, r3, #5
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	4413      	add	r3, r2
 8002164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002168:	461a      	mov	r2, r3
 800216a:	2301      	movs	r3, #1
 800216c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800216e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 fe65 	bl	8002e40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00c      	beq.n	800219a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	4413      	add	r3, r2
 8002188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800218c:	461a      	mov	r2, r3
 800218e:	2308      	movs	r3, #8
 8002190:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002192:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f000 fea1 	bl	8002edc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	f003 0310 	and.w	r3, r3, #16
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d008      	beq.n	80021b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	015a      	lsls	r2, r3, #5
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b0:	461a      	mov	r2, r3
 80021b2:	2310      	movs	r3, #16
 80021b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d030      	beq.n	8002222 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	695b      	ldr	r3, [r3, #20]
 80021c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c8:	2b80      	cmp	r3, #128	; 0x80
 80021ca:	d109      	bne.n	80021e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80021e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	3304      	adds	r3, #4
 80021f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	78db      	ldrb	r3, [r3, #3]
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	d108      	bne.n	8002210 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2200      	movs	r2, #0
 8002202:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	b2db      	uxtb	r3, r3
 8002208:	4619      	mov	r1, r3
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f006 fcf6 	bl	8008bfc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	4413      	add	r3, r2
 8002218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800221c:	461a      	mov	r2, r3
 800221e:	2302      	movs	r3, #2
 8002220:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	f003 0320 	and.w	r3, r3, #32
 8002228:	2b00      	cmp	r3, #0
 800222a:	d008      	beq.n	800223e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	015a      	lsls	r2, r3, #5
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	4413      	add	r3, r2
 8002234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002238:	461a      	mov	r2, r3
 800223a:	2320      	movs	r3, #32
 800223c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d009      	beq.n	800225c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	015a      	lsls	r2, r3, #5
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	4413      	add	r3, r2
 8002250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002254:	461a      	mov	r2, r3
 8002256:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800225a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800225c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225e:	3301      	adds	r3, #1
 8002260:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	085b      	lsrs	r3, r3, #1
 8002266:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800226a:	2b00      	cmp	r3, #0
 800226c:	f47f af62 	bne.w	8002134 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4618      	mov	r0, r3
 8002276:	f004 f9cf 	bl	8006618 <USB_ReadInterrupts>
 800227a:	4603      	mov	r3, r0
 800227c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002280:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002284:	f040 80a4 	bne.w	80023d0 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f004 f9f0 	bl	8006672 <USB_ReadDevAllInEpInterrupt>
 8002292:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002298:	e096      	b.n	80023c8 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800229a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229c:	f003 0301 	and.w	r3, r3, #1
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f000 808b 	beq.w	80023bc <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	4611      	mov	r1, r2
 80022b0:	4618      	mov	r0, r3
 80022b2:	f004 fa16 	bl	80066e2 <USB_ReadDevInEPInterrupt>
 80022b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d020      	beq.n	8002304 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	2201      	movs	r2, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	43db      	mvns	r3, r3
 80022dc:	69f9      	ldr	r1, [r7, #28]
 80022de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022e2:	4013      	ands	r3, r2
 80022e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	4413      	add	r3, r2
 80022ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022f2:	461a      	mov	r2, r3
 80022f4:	2301      	movs	r3, #1
 80022f6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	4619      	mov	r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f006 fbe7 	bl	8008ad2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	f003 0308 	and.w	r3, r3, #8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d008      	beq.n	8002320 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800230e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002310:	015a      	lsls	r2, r3, #5
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	4413      	add	r3, r2
 8002316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800231a:	461a      	mov	r2, r3
 800231c:	2308      	movs	r3, #8
 800231e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	d008      	beq.n	800233c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	4413      	add	r3, r2
 8002332:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002336:	461a      	mov	r2, r3
 8002338:	2310      	movs	r3, #16
 800233a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002342:	2b00      	cmp	r3, #0
 8002344:	d008      	beq.n	8002358 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	015a      	lsls	r2, r3, #5
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	4413      	add	r3, r2
 800234e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002352:	461a      	mov	r2, r3
 8002354:	2340      	movs	r3, #64	; 0x40
 8002356:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d023      	beq.n	80023aa <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002362:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002364:	6a38      	ldr	r0, [r7, #32]
 8002366:	f003 faad 	bl	80058c4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800236a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	3338      	adds	r3, #56	; 0x38
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	3304      	adds	r3, #4
 800237c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	78db      	ldrb	r3, [r3, #3]
 8002382:	2b01      	cmp	r3, #1
 8002384:	d108      	bne.n	8002398 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2200      	movs	r2, #0
 800238a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	b2db      	uxtb	r3, r3
 8002390:	4619      	mov	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f006 fc44 	bl	8008c20 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a4:	461a      	mov	r2, r3
 80023a6:	2302      	movs	r3, #2
 80023a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 fcba 	bl	8002d30 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	3301      	adds	r3, #1
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	085b      	lsrs	r3, r3, #1
 80023c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f47f af65 	bne.w	800229a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f004 f91f 	bl	8006618 <USB_ReadInterrupts>
 80023da:	4603      	mov	r3, r0
 80023dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023e4:	d122      	bne.n	800242c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	69fa      	ldr	r2, [r7, #28]
 80023f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002400:	2b01      	cmp	r3, #1
 8002402:	d108      	bne.n	8002416 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800240c:	2100      	movs	r1, #0
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f006 fe64 	bl	80090dc <HAL_PCDEx_LPM_Callback>
 8002414:	e002      	b.n	800241c <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f006 fbc8 	bl	8008bac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800242a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f004 f8f1 	bl	8006618 <USB_ReadInterrupts>
 8002436:	4603      	mov	r3, r0
 8002438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002440:	d112      	bne.n	8002468 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b01      	cmp	r3, #1
 8002450:	d102      	bne.n	8002458 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f006 fb84 	bl	8008b60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002466:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f004 f8d3 	bl	8006618 <USB_ReadInterrupts>
 8002472:	4603      	mov	r3, r0
 8002474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002478:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800247c:	d121      	bne.n	80024c2 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800248c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002494:	2b00      	cmp	r3, #0
 8002496:	d111      	bne.n	80024bc <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	f003 020f 	and.w	r2, r3, #15
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80024b2:	2101      	movs	r1, #1
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f006 fe11 	bl	80090dc <HAL_PCDEx_LPM_Callback>
 80024ba:	e002      	b.n	80024c2 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f006 fb4f 	bl	8008b60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f004 f8a6 	bl	8006618 <USB_ReadInterrupts>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d6:	f040 80b5 	bne.w	8002644 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	69fa      	ldr	r2, [r7, #28]
 80024e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2110      	movs	r1, #16
 80024f4:	4618      	mov	r0, r3
 80024f6:	f003 f9e5 	bl	80058c4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024fe:	e046      	b.n	800258e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	4413      	add	r3, r2
 8002508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800250c:	461a      	mov	r2, r3
 800250e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002512:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4413      	add	r3, r2
 800251c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002524:	0151      	lsls	r1, r2, #5
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	440a      	add	r2, r1
 800252a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800252e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002532:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	4413      	add	r3, r2
 800253c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002540:	461a      	mov	r2, r3
 8002542:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002546:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	4413      	add	r3, r2
 8002550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002558:	0151      	lsls	r1, r2, #5
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	440a      	add	r2, r1
 800255e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002562:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002566:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256a:	015a      	lsls	r2, r3, #5
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	4413      	add	r3, r2
 8002570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002578:	0151      	lsls	r1, r2, #5
 800257a:	69fa      	ldr	r2, [r7, #28]
 800257c:	440a      	add	r2, r1
 800257e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002582:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002586:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258a:	3301      	adds	r3, #1
 800258c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002594:	429a      	cmp	r2, r3
 8002596:	d3b3      	bcc.n	8002500 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80025aa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d016      	beq.n	80025e2 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c4:	f043 030b 	orr.w	r3, r3, #11
 80025c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d4:	69fa      	ldr	r2, [r7, #28]
 80025d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025da:	f043 030b 	orr.w	r3, r3, #11
 80025de:	6453      	str	r3, [r2, #68]	; 0x44
 80025e0:	e015      	b.n	800260e <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	69fa      	ldr	r2, [r7, #28]
 80025ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025f4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025f8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	69fa      	ldr	r2, [r7, #28]
 8002604:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002608:	f043 030b 	orr.w	r3, r3, #11
 800260c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	69fa      	ldr	r2, [r7, #28]
 8002618:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800261c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002620:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800262c:	4619      	mov	r1, r3
 800262e:	4610      	mov	r0, r2
 8002630:	f004 f8b6 	bl	80067a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695a      	ldr	r2, [r3, #20]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002642:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4618      	mov	r0, r3
 800264a:	f003 ffe5 	bl	8006618 <USB_ReadInterrupts>
 800264e:	4603      	mov	r3, r0
 8002650:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002658:	d124      	bne.n	80026a4 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f004 f87b 	bl	800675a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4618      	mov	r0, r3
 800266a:	f003 f9a8 	bl	80059be <USB_GetDevSpeed>
 800266e:	4603      	mov	r3, r0
 8002670:	461a      	mov	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681c      	ldr	r4, [r3, #0]
 800267a:	f001 fb87 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 800267e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	4620      	mov	r0, r4
 800268a:	f002 fecf 	bl	800542c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800268e:	6878      	ldr	r0, [r7, #4]
 8002690:	f006 fa47 	bl	8008b22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	695a      	ldr	r2, [r3, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80026a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f003 ffb5 	bl	8006618 <USB_ReadInterrupts>
 80026ae:	4603      	mov	r3, r0
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d10a      	bne.n	80026ce <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f006 fa24 	bl	8008b06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f002 0208 	and.w	r2, r2, #8
 80026cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 ffa0 	bl	8006618 <USB_ReadInterrupts>
 80026d8:	4603      	mov	r3, r0
 80026da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026de:	2b80      	cmp	r3, #128	; 0x80
 80026e0:	d122      	bne.n	8002728 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026ee:	2301      	movs	r3, #1
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
 80026f2:	e014      	b.n	800271e <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f8:	4613      	mov	r3, r2
 80026fa:	00db      	lsls	r3, r3, #3
 80026fc:	4413      	add	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d105      	bne.n	8002718 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800270c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270e:	b2db      	uxtb	r3, r3
 8002710:	4619      	mov	r1, r3
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 fadb 	bl	8002cce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	3301      	adds	r3, #1
 800271c:	627b      	str	r3, [r7, #36]	; 0x24
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002724:	429a      	cmp	r2, r3
 8002726:	d3e5      	bcc.n	80026f4 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4618      	mov	r0, r3
 800272e:	f003 ff73 	bl	8006618 <USB_ReadInterrupts>
 8002732:	4603      	mov	r3, r0
 8002734:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002738:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800273c:	d13b      	bne.n	80027b6 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800273e:	2301      	movs	r3, #1
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
 8002742:	e02b      	b.n	800279c <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	4413      	add	r3, r2
 800274c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	4613      	mov	r3, r2
 800275a:	00db      	lsls	r3, r3, #3
 800275c:	4413      	add	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	3340      	adds	r3, #64	; 0x40
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b01      	cmp	r3, #1
 8002768:	d115      	bne.n	8002796 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800276a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800276c:	2b00      	cmp	r3, #0
 800276e:	da12      	bge.n	8002796 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002770:	6879      	ldr	r1, [r7, #4]
 8002772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002774:	4613      	mov	r3, r2
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4413      	add	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	333f      	adds	r3, #63	; 0x3f
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	b2db      	uxtb	r3, r3
 8002788:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800278c:	b2db      	uxtb	r3, r3
 800278e:	4619      	mov	r1, r3
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 fa9c 	bl	8002cce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	3301      	adds	r3, #1
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d3ce      	bcc.n	8002744 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	695a      	ldr	r2, [r3, #20]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80027b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f003 ff2c 	bl	8006618 <USB_ReadInterrupts>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027ca:	d155      	bne.n	8002878 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80027cc:	2301      	movs	r3, #1
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
 80027d0:	e045      	b.n	800285e <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d4:	015a      	lsls	r2, r3, #5
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	4413      	add	r3, r2
 80027da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d12e      	bne.n	8002858 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027fa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	da2b      	bge.n	8002858 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800280c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002810:	429a      	cmp	r2, r3
 8002812:	d121      	bne.n	8002858 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002818:	4613      	mov	r3, r2
 800281a:	00db      	lsls	r3, r3, #3
 800281c:	4413      	add	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002826:	2201      	movs	r2, #1
 8002828:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002836:	6a3b      	ldr	r3, [r7, #32]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10a      	bne.n	8002858 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	69fa      	ldr	r2, [r7, #28]
 800284c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002850:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002854:	6053      	str	r3, [r2, #4]
            break;
 8002856:	e007      	b.n	8002868 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	3301      	adds	r3, #1
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002864:	429a      	cmp	r2, r3
 8002866:	d3b4      	bcc.n	80027d2 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695a      	ldr	r2, [r3, #20]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002876:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f003 fecb 	bl	8006618 <USB_ReadInterrupts>
 8002882:	4603      	mov	r3, r0
 8002884:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288c:	d10a      	bne.n	80028a4 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f006 f9d8 	bl	8008c44 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80028a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f003 feb5 	bl	8006618 <USB_ReadInterrupts>
 80028ae:	4603      	mov	r3, r0
 80028b0:	f003 0304 	and.w	r3, r3, #4
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d115      	bne.n	80028e4 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f006 f9c8 	bl	8008c60 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	430a      	orrs	r2, r1
 80028de:	605a      	str	r2, [r3, #4]
 80028e0:	e000      	b.n	80028e4 <HAL_PCD_IRQHandler+0x920>
      return;
 80028e2:	bf00      	nop
    }
  }
}
 80028e4:	3734      	adds	r7, #52	; 0x34
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd90      	pop	{r4, r7, pc}

080028ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028ea:	b580      	push	{r7, lr}
 80028ec:	b082      	sub	sp, #8
 80028ee:	af00      	add	r7, sp, #0
 80028f0:	6078      	str	r0, [r7, #4]
 80028f2:	460b      	mov	r3, r1
 80028f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_PCD_SetAddress+0x1a>
 8002900:	2302      	movs	r3, #2
 8002902:	e013      	b.n	800292c <HAL_PCD_SetAddress+0x42>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	78fa      	ldrb	r2, [r7, #3]
 800291a:	4611      	mov	r1, r2
 800291c:	4618      	mov	r0, r3
 800291e:	f003 fe13 	bl	8006548 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	4608      	mov	r0, r1
 800293e:	4611      	mov	r1, r2
 8002940:	461a      	mov	r2, r3
 8002942:	4603      	mov	r3, r0
 8002944:	70fb      	strb	r3, [r7, #3]
 8002946:	460b      	mov	r3, r1
 8002948:	803b      	strh	r3, [r7, #0]
 800294a:	4613      	mov	r3, r2
 800294c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002952:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002956:	2b00      	cmp	r3, #0
 8002958:	da0f      	bge.n	800297a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	f003 020f 	and.w	r2, r3, #15
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	3338      	adds	r3, #56	; 0x38
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	4413      	add	r3, r2
 800296e:	3304      	adds	r3, #4
 8002970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2201      	movs	r2, #1
 8002976:	705a      	strb	r2, [r3, #1]
 8002978:	e00f      	b.n	800299a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800297a:	78fb      	ldrb	r3, [r7, #3]
 800297c:	f003 020f 	and.w	r2, r3, #15
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	4413      	add	r3, r2
 8002990:	3304      	adds	r3, #4
 8002992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	f003 030f 	and.w	r3, r3, #15
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80029a6:	883a      	ldrh	r2, [r7, #0]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	78ba      	ldrb	r2, [r7, #2]
 80029b0:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	785b      	ldrb	r3, [r3, #1]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d004      	beq.n	80029c4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80029c4:	78bb      	ldrb	r3, [r7, #2]
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d102      	bne.n	80029d0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d101      	bne.n	80029de <HAL_PCD_EP_Open+0xaa>
 80029da:	2302      	movs	r3, #2
 80029dc:	e00e      	b.n	80029fc <HAL_PCD_EP_Open+0xc8>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	68f9      	ldr	r1, [r7, #12]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f003 f805 	bl	80059fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80029fa:	7afb      	ldrb	r3, [r7, #11]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002a10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	da0f      	bge.n	8002a38 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	f003 020f 	and.w	r2, r3, #15
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	3338      	adds	r3, #56	; 0x38
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	705a      	strb	r2, [r3, #1]
 8002a36:	e00f      	b.n	8002a58 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	f003 020f 	and.w	r2, r3, #15
 8002a3e:	4613      	mov	r3, r2
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4413      	add	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	3304      	adds	r3, #4
 8002a50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a58:	78fb      	ldrb	r3, [r7, #3]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d101      	bne.n	8002a72 <HAL_PCD_EP_Close+0x6e>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e00e      	b.n	8002a90 <HAL_PCD_EP_Close+0x8c>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68f9      	ldr	r1, [r7, #12]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 f843 	bl	8005b0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	607a      	str	r2, [r7, #4]
 8002aa2:	603b      	str	r3, [r7, #0]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aa8:	7afb      	ldrb	r3, [r7, #11]
 8002aaa:	f003 020f 	and.w	r2, r3, #15
 8002aae:	4613      	mov	r3, r2
 8002ab0:	00db      	lsls	r3, r3, #3
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002aba:	68fa      	ldr	r2, [r7, #12]
 8002abc:	4413      	add	r3, r2
 8002abe:	3304      	adds	r3, #4
 8002ac0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ada:	7afb      	ldrb	r3, [r7, #11]
 8002adc:	f003 030f 	and.w	r3, r3, #15
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	6979      	ldr	r1, [r7, #20]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f003 f8e9 	bl	8005cc4 <USB_EPStartXfer>

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b0c:	7afb      	ldrb	r3, [r7, #11]
 8002b0e:	f003 020f 	and.w	r2, r3, #15
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	3338      	adds	r3, #56	; 0x38
 8002b1c:	68fa      	ldr	r2, [r7, #12]
 8002b1e:	4413      	add	r3, r2
 8002b20:	3304      	adds	r3, #4
 8002b22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2200      	movs	r2, #0
 8002b34:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	2201      	movs	r2, #1
 8002b3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b3c:	7afb      	ldrb	r3, [r7, #11]
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	6979      	ldr	r1, [r7, #20]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f003 f8b8 	bl	8005cc4 <USB_EPStartXfer>

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	460b      	mov	r3, r1
 8002b68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b6a:	78fb      	ldrb	r3, [r7, #3]
 8002b6c:	f003 020f 	and.w	r2, r3, #15
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d901      	bls.n	8002b7c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e04e      	b.n	8002c1a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	da0f      	bge.n	8002ba4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	f003 020f 	and.w	r2, r3, #15
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	00db      	lsls	r3, r3, #3
 8002b8e:	4413      	add	r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	3338      	adds	r3, #56	; 0x38
 8002b94:	687a      	ldr	r2, [r7, #4]
 8002b96:	4413      	add	r3, r2
 8002b98:	3304      	adds	r3, #4
 8002b9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	705a      	strb	r2, [r3, #1]
 8002ba2:	e00d      	b.n	8002bc0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	00db      	lsls	r3, r3, #3
 8002baa:	4413      	add	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	4413      	add	r3, r2
 8002bb6:	3304      	adds	r3, #4
 8002bb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	b2da      	uxtb	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_PCD_EP_SetStall+0x82>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e01c      	b.n	8002c1a <HAL_PCD_EP_SetStall+0xbc>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68f9      	ldr	r1, [r7, #12]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f003 fbd6 	bl	80063a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d108      	bne.n	8002c10 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	4610      	mov	r0, r2
 8002c0c:	f003 fdc8 	bl	80067a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c2e:	78fb      	ldrb	r3, [r7, #3]
 8002c30:	f003 020f 	and.w	r2, r3, #15
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d901      	bls.n	8002c40 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e042      	b.n	8002cc6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	da0f      	bge.n	8002c68 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c48:	78fb      	ldrb	r3, [r7, #3]
 8002c4a:	f003 020f 	and.w	r2, r3, #15
 8002c4e:	4613      	mov	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	3338      	adds	r3, #56	; 0x38
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2201      	movs	r2, #1
 8002c64:	705a      	strb	r2, [r3, #1]
 8002c66:	e00f      	b.n	8002c88 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c68:	78fb      	ldrb	r3, [r7, #3]
 8002c6a:	f003 020f 	and.w	r2, r3, #15
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	4413      	add	r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	3304      	adds	r3, #4
 8002c80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	f003 030f 	and.w	r3, r3, #15
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_PCD_EP_ClrStall+0x86>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e00e      	b.n	8002cc6 <HAL_PCD_EP_ClrStall+0xa4>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68f9      	ldr	r1, [r7, #12]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f003 fbe0 	bl	800647c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002cda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da0c      	bge.n	8002cfc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ce2:	78fb      	ldrb	r3, [r7, #3]
 8002ce4:	f003 020f 	and.w	r2, r3, #15
 8002ce8:	4613      	mov	r3, r2
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	3338      	adds	r3, #56	; 0x38
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3304      	adds	r3, #4
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	e00c      	b.n	8002d16 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	f003 020f 	and.w	r2, r3, #15
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4413      	add	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	4413      	add	r3, r2
 8002d12:	3304      	adds	r3, #4
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68f9      	ldr	r1, [r7, #12]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f003 fa03 	bl	8006128 <USB_EPStopXfer>
 8002d22:	4603      	mov	r3, r0
 8002d24:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d26:	7afb      	ldrb	r3, [r7, #11]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	4613      	mov	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	3338      	adds	r3, #56	; 0x38
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	4413      	add	r3, r2
 8002d54:	3304      	adds	r3, #4
 8002d56:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d901      	bls.n	8002d68 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d64:	2301      	movs	r3, #1
 8002d66:	e067      	b.n	8002e38 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d902      	bls.n	8002d84 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	3303      	adds	r3, #3
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d8c:	e026      	b.n	8002ddc <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	691a      	ldr	r2, [r3, #16]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	69fa      	ldr	r2, [r7, #28]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d902      	bls.n	8002daa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3303      	adds	r3, #3
 8002dae:	089b      	lsrs	r3, r3, #2
 8002db0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	68d9      	ldr	r1, [r3, #12]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	b29b      	uxth	r3, r3
 8002dbe:	6978      	ldr	r0, [r7, #20]
 8002dc0:	f003 fa5c 	bl	800627c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	441a      	add	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	441a      	add	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d809      	bhi.n	8002e06 <PCD_WriteEmptyTxFifo+0xd6>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	695a      	ldr	r2, [r3, #20]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d203      	bcs.n	8002e06 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1c3      	bne.n	8002d8e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	691a      	ldr	r2, [r3, #16]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d811      	bhi.n	8002e36 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	2201      	movs	r2, #1
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	43db      	mvns	r3, r3
 8002e2c:	6939      	ldr	r1, [r7, #16]
 8002e2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e32:	4013      	ands	r3, r2
 8002e34:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3720      	adds	r7, #32
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	333c      	adds	r3, #60	; 0x3c
 8002e58:	3304      	adds	r3, #4
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	015a      	lsls	r2, r3, #5
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	4413      	add	r3, r2
 8002e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4a19      	ldr	r2, [pc, #100]	; (8002ed8 <PCD_EP_OutXfrComplete_int+0x98>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d124      	bne.n	8002ec0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d00a      	beq.n	8002e96 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e92:	6093      	str	r3, [r2, #8]
 8002e94:	e01a      	b.n	8002ecc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	f003 0320 	and.w	r3, r3, #32
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d008      	beq.n	8002eb2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	015a      	lsls	r2, r3, #5
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eac:	461a      	mov	r2, r3
 8002eae:	2320      	movs	r3, #32
 8002eb0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f005 fdef 	bl	8008a9c <HAL_PCD_DataOutStageCallback>
 8002ebe:	e005      	b.n	8002ecc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	4619      	mov	r1, r3
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f005 fde8 	bl	8008a9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3718      	adds	r7, #24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	4f54310a 	.word	0x4f54310a

08002edc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	333c      	adds	r3, #60	; 0x3c
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	4a0c      	ldr	r2, [pc, #48]	; (8002f40 <PCD_EP_OutSetupPacket_int+0x64>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d90e      	bls.n	8002f30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d009      	beq.n	8002f30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f005 fda1 	bl	8008a78 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	4f54300a 	.word	0x4f54300a

08002f44 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	70fb      	strb	r3, [r7, #3]
 8002f50:	4613      	mov	r3, r2
 8002f52:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d107      	bne.n	8002f72 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f62:	883b      	ldrh	r3, [r7, #0]
 8002f64:	0419      	lsls	r1, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f70:	e028      	b.n	8002fc4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f80:	2300      	movs	r3, #0
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	e00d      	b.n	8002fa2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	3340      	adds	r3, #64	; 0x40
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	4413      	add	r3, r2
 8002f9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	73fb      	strb	r3, [r7, #15]
 8002fa2:	7bfa      	ldrb	r2, [r7, #15]
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d3ec      	bcc.n	8002f86 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002fac:	883b      	ldrh	r3, [r7, #0]
 8002fae:	0418      	lsls	r0, r3, #16
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6819      	ldr	r1, [r3, #0]
 8002fb4:	78fb      	ldrb	r3, [r7, #3]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	4302      	orrs	r2, r0
 8002fbc:	3340      	adds	r3, #64	; 0x40
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3714      	adds	r7, #20
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	460b      	mov	r3, r1
 8002fdc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003022:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003026:	f043 0303 	orr.w	r3, r3, #3
 800302a:	68fa      	ldr	r2, [r7, #12]
 800302c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a04      	ldr	r2, [pc, #16]	; (8003058 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800304a:	6013      	str	r3, [r2, #0]
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40007000 	.word	0x40007000

0800305c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003060:	4b04      	ldr	r3, [pc, #16]	; (8003074 <HAL_PWREx_GetVoltageRange+0x18>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003068:	4618      	mov	r0, r3
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
 8003072:	bf00      	nop
 8003074:	40007000 	.word	0x40007000

08003078 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003086:	d130      	bne.n	80030ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003088:	4b23      	ldr	r3, [pc, #140]	; (8003118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003094:	d038      	beq.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003096:	4b20      	ldr	r3, [pc, #128]	; (8003118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800309e:	4a1e      	ldr	r2, [pc, #120]	; (8003118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030a6:	4b1d      	ldr	r3, [pc, #116]	; (800311c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2232      	movs	r2, #50	; 0x32
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030b2:	fba2 2303 	umull	r2, r3, r2, r3
 80030b6:	0c9b      	lsrs	r3, r3, #18
 80030b8:	3301      	adds	r3, #1
 80030ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030bc:	e002      	b.n	80030c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030c4:	4b14      	ldr	r3, [pc, #80]	; (8003118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d0:	d102      	bne.n	80030d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f2      	bne.n	80030be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030d8:	4b0f      	ldr	r3, [pc, #60]	; (8003118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e4:	d110      	bne.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e00f      	b.n	800310a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030ea:	4b0b      	ldr	r3, [pc, #44]	; (8003118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030f6:	d007      	beq.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030f8:	4b07      	ldr	r3, [pc, #28]	; (8003118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003100:	4a05      	ldr	r2, [pc, #20]	; (8003118 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003106:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40007000 	.word	0x40007000
 800311c:	20000000 	.word	0x20000000
 8003120:	431bde83 	.word	0x431bde83

08003124 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003128:	4b05      	ldr	r3, [pc, #20]	; (8003140 <HAL_PWREx_EnableVddUSB+0x1c>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4a04      	ldr	r2, [pc, #16]	; (8003140 <HAL_PWREx_EnableVddUSB+0x1c>)
 800312e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003132:	6053      	str	r3, [r2, #4]
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40007000 	.word	0x40007000

08003144 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af02      	add	r7, sp, #8
 800314a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800314c:	f7fe f882 	bl	8001254 <HAL_GetTick>
 8003150:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e063      	b.n	8003224 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d10b      	bne.n	8003180 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7fd fe41 	bl	8000df8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003176:	f241 3188 	movw	r1, #5000	; 0x1388
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f858 	bl	8003230 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	3b01      	subs	r3, #1
 8003190:	021a      	lsls	r2, r3, #8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	2120      	movs	r1, #32
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f850 	bl	800324c <QSPI_WaitFlagStateUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80031b0:	7afb      	ldrb	r3, [r7, #11]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d131      	bne.n	800321a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80031c0:	f023 0310 	bic.w	r3, r3, #16
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6852      	ldr	r2, [r2, #4]
 80031c8:	0611      	lsls	r1, r2, #24
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	68d2      	ldr	r2, [r2, #12]
 80031ce:	4311      	orrs	r1, r2
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	4b13      	ldr	r3, [pc, #76]	; (800322c <HAL_QSPI_Init+0xe8>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6912      	ldr	r2, [r2, #16]
 80031e6:	0411      	lsls	r1, r2, #16
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6952      	ldr	r2, [r2, #20]
 80031ec:	4311      	orrs	r1, r2
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	6992      	ldr	r2, [r2, #24]
 80031f2:	4311      	orrs	r1, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f042 0201 	orr.w	r2, r2, #1
 800320a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003222:	7afb      	ldrb	r3, [r7, #11]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3710      	adds	r7, #16
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	ffe0f8fe 	.word	0xffe0f8fe

08003230 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003240:	bf00      	nop
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800325c:	e01a      	b.n	8003294 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003264:	d016      	beq.n	8003294 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003266:	f7fd fff5 	bl	8001254 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	429a      	cmp	r2, r3
 8003274:	d302      	bcc.n	800327c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10b      	bne.n	8003294 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2204      	movs	r2, #4
 8003280:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003288:	f043 0201 	orr.w	r2, r3, #1
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e00e      	b.n	80032b2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4013      	ands	r3, r2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	bf14      	ite	ne
 80032a2:	2301      	movne	r3, #1
 80032a4:	2300      	moveq	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
 80032aa:	79fb      	ldrb	r3, [r7, #7]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d1d6      	bne.n	800325e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e3ca      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ce:	4b97      	ldr	r3, [pc, #604]	; (800352c <HAL_RCC_OscConfig+0x270>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
 80032d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032d8:	4b94      	ldr	r3, [pc, #592]	; (800352c <HAL_RCC_OscConfig+0x270>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 80e4 	beq.w	80034b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <HAL_RCC_OscConfig+0x4a>
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	2b0c      	cmp	r3, #12
 80032fa:	f040 808b 	bne.w	8003414 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2b01      	cmp	r3, #1
 8003302:	f040 8087 	bne.w	8003414 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003306:	4b89      	ldr	r3, [pc, #548]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0302 	and.w	r3, r3, #2
 800330e:	2b00      	cmp	r3, #0
 8003310:	d005      	beq.n	800331e <HAL_RCC_OscConfig+0x62>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d101      	bne.n	800331e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e3a2      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a1a      	ldr	r2, [r3, #32]
 8003322:	4b82      	ldr	r3, [pc, #520]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d004      	beq.n	8003338 <HAL_RCC_OscConfig+0x7c>
 800332e:	4b7f      	ldr	r3, [pc, #508]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003336:	e005      	b.n	8003344 <HAL_RCC_OscConfig+0x88>
 8003338:	4b7c      	ldr	r3, [pc, #496]	; (800352c <HAL_RCC_OscConfig+0x270>)
 800333a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800333e:	091b      	lsrs	r3, r3, #4
 8003340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003344:	4293      	cmp	r3, r2
 8003346:	d223      	bcs.n	8003390 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4618      	mov	r0, r3
 800334e:	f000 fd55 	bl	8003dfc <RCC_SetFlashLatencyFromMSIRange>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e383      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800335c:	4b73      	ldr	r3, [pc, #460]	; (800352c <HAL_RCC_OscConfig+0x270>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a72      	ldr	r2, [pc, #456]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003362:	f043 0308 	orr.w	r3, r3, #8
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4b70      	ldr	r3, [pc, #448]	; (800352c <HAL_RCC_OscConfig+0x270>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	496d      	ldr	r1, [pc, #436]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800337a:	4b6c      	ldr	r3, [pc, #432]	; (800352c <HAL_RCC_OscConfig+0x270>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	4968      	ldr	r1, [pc, #416]	; (800352c <HAL_RCC_OscConfig+0x270>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]
 800338e:	e025      	b.n	80033dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003390:	4b66      	ldr	r3, [pc, #408]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a65      	ldr	r2, [pc, #404]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003396:	f043 0308 	orr.w	r3, r3, #8
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b63      	ldr	r3, [pc, #396]	; (800352c <HAL_RCC_OscConfig+0x270>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4960      	ldr	r1, [pc, #384]	; (800352c <HAL_RCC_OscConfig+0x270>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ae:	4b5f      	ldr	r3, [pc, #380]	; (800352c <HAL_RCC_OscConfig+0x270>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	495b      	ldr	r1, [pc, #364]	; (800352c <HAL_RCC_OscConfig+0x270>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d109      	bne.n	80033dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fd15 	bl	8003dfc <RCC_SetFlashLatencyFromMSIRange>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e343      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033dc:	f000 fc4a 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 80033e0:	4602      	mov	r2, r0
 80033e2:	4b52      	ldr	r3, [pc, #328]	; (800352c <HAL_RCC_OscConfig+0x270>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	091b      	lsrs	r3, r3, #4
 80033e8:	f003 030f 	and.w	r3, r3, #15
 80033ec:	4950      	ldr	r1, [pc, #320]	; (8003530 <HAL_RCC_OscConfig+0x274>)
 80033ee:	5ccb      	ldrb	r3, [r1, r3]
 80033f0:	f003 031f 	and.w	r3, r3, #31
 80033f4:	fa22 f303 	lsr.w	r3, r2, r3
 80033f8:	4a4e      	ldr	r2, [pc, #312]	; (8003534 <HAL_RCC_OscConfig+0x278>)
 80033fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033fc:	4b4e      	ldr	r3, [pc, #312]	; (8003538 <HAL_RCC_OscConfig+0x27c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fd fed7 	bl	80011b4 <HAL_InitTick>
 8003406:	4603      	mov	r3, r0
 8003408:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800340a:	7bfb      	ldrb	r3, [r7, #15]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d052      	beq.n	80034b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003410:	7bfb      	ldrb	r3, [r7, #15]
 8003412:	e327      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	699b      	ldr	r3, [r3, #24]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d032      	beq.n	8003482 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800341c:	4b43      	ldr	r3, [pc, #268]	; (800352c <HAL_RCC_OscConfig+0x270>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a42      	ldr	r2, [pc, #264]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003422:	f043 0301 	orr.w	r3, r3, #1
 8003426:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003428:	f7fd ff14 	bl	8001254 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003430:	f7fd ff10 	bl	8001254 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e310      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003442:	4b3a      	ldr	r3, [pc, #232]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0f0      	beq.n	8003430 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800344e:	4b37      	ldr	r3, [pc, #220]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a36      	ldr	r2, [pc, #216]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003454:	f043 0308 	orr.w	r3, r3, #8
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b34      	ldr	r3, [pc, #208]	; (800352c <HAL_RCC_OscConfig+0x270>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	4931      	ldr	r1, [pc, #196]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003468:	4313      	orrs	r3, r2
 800346a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800346c:	4b2f      	ldr	r3, [pc, #188]	; (800352c <HAL_RCC_OscConfig+0x270>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	021b      	lsls	r3, r3, #8
 800347a:	492c      	ldr	r1, [pc, #176]	; (800352c <HAL_RCC_OscConfig+0x270>)
 800347c:	4313      	orrs	r3, r2
 800347e:	604b      	str	r3, [r1, #4]
 8003480:	e01a      	b.n	80034b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003482:	4b2a      	ldr	r3, [pc, #168]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a29      	ldr	r2, [pc, #164]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800348e:	f7fd fee1 	bl	8001254 <HAL_GetTick>
 8003492:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003494:	e008      	b.n	80034a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003496:	f7fd fedd 	bl	8001254 <HAL_GetTick>
 800349a:	4602      	mov	r2, r0
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	1ad3      	subs	r3, r2, r3
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e2dd      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80034a8:	4b20      	ldr	r3, [pc, #128]	; (800352c <HAL_RCC_OscConfig+0x270>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d1f0      	bne.n	8003496 <HAL_RCC_OscConfig+0x1da>
 80034b4:	e000      	b.n	80034b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80034b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d074      	beq.n	80035ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d005      	beq.n	80034d6 <HAL_RCC_OscConfig+0x21a>
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b0c      	cmp	r3, #12
 80034ce:	d10e      	bne.n	80034ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d10b      	bne.n	80034ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d6:	4b15      	ldr	r3, [pc, #84]	; (800352c <HAL_RCC_OscConfig+0x270>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d064      	beq.n	80035ac <HAL_RCC_OscConfig+0x2f0>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d160      	bne.n	80035ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e2ba      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034f6:	d106      	bne.n	8003506 <HAL_RCC_OscConfig+0x24a>
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <HAL_RCC_OscConfig+0x270>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a0b      	ldr	r2, [pc, #44]	; (800352c <HAL_RCC_OscConfig+0x270>)
 80034fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003502:	6013      	str	r3, [r2, #0]
 8003504:	e026      	b.n	8003554 <HAL_RCC_OscConfig+0x298>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800350e:	d115      	bne.n	800353c <HAL_RCC_OscConfig+0x280>
 8003510:	4b06      	ldr	r3, [pc, #24]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a05      	ldr	r2, [pc, #20]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003516:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800351a:	6013      	str	r3, [r2, #0]
 800351c:	4b03      	ldr	r3, [pc, #12]	; (800352c <HAL_RCC_OscConfig+0x270>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a02      	ldr	r2, [pc, #8]	; (800352c <HAL_RCC_OscConfig+0x270>)
 8003522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	e014      	b.n	8003554 <HAL_RCC_OscConfig+0x298>
 800352a:	bf00      	nop
 800352c:	40021000 	.word	0x40021000
 8003530:	08009284 	.word	0x08009284
 8003534:	20000000 	.word	0x20000000
 8003538:	20000004 	.word	0x20000004
 800353c:	4ba0      	ldr	r3, [pc, #640]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a9f      	ldr	r2, [pc, #636]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 8003542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	4b9d      	ldr	r3, [pc, #628]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a9c      	ldr	r2, [pc, #624]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 800354e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d013      	beq.n	8003584 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fd fe7a 	bl	8001254 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003564:	f7fd fe76 	bl	8001254 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e276      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003576:	4b92      	ldr	r3, [pc, #584]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x2a8>
 8003582:	e014      	b.n	80035ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fd fe66 	bl	8001254 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800358c:	f7fd fe62 	bl	8001254 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	; 0x64
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e262      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800359e:	4b88      	ldr	r3, [pc, #544]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x2d0>
 80035aa:	e000      	b.n	80035ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d060      	beq.n	800367c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d005      	beq.n	80035cc <HAL_RCC_OscConfig+0x310>
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	2b0c      	cmp	r3, #12
 80035c4:	d119      	bne.n	80035fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d116      	bne.n	80035fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035cc:	4b7c      	ldr	r3, [pc, #496]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_OscConfig+0x328>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e23f      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e4:	4b76      	ldr	r3, [pc, #472]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	061b      	lsls	r3, r3, #24
 80035f2:	4973      	ldr	r1, [pc, #460]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 80035f4:	4313      	orrs	r3, r2
 80035f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035f8:	e040      	b.n	800367c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d023      	beq.n	800364a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003602:	4b6f      	ldr	r3, [pc, #444]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a6e      	ldr	r2, [pc, #440]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 8003608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360e:	f7fd fe21 	bl	8001254 <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003616:	f7fd fe1d 	bl	8001254 <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e21d      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003628:	4b65      	ldr	r3, [pc, #404]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003634:	4b62      	ldr	r3, [pc, #392]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	691b      	ldr	r3, [r3, #16]
 8003640:	061b      	lsls	r3, r3, #24
 8003642:	495f      	ldr	r1, [pc, #380]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 8003644:	4313      	orrs	r3, r2
 8003646:	604b      	str	r3, [r1, #4]
 8003648:	e018      	b.n	800367c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364a:	4b5d      	ldr	r3, [pc, #372]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a5c      	ldr	r2, [pc, #368]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 8003650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003656:	f7fd fdfd 	bl	8001254 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800365c:	e008      	b.n	8003670 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800365e:	f7fd fdf9 	bl	8001254 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d901      	bls.n	8003670 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e1f9      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003670:	4b53      	ldr	r3, [pc, #332]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1f0      	bne.n	800365e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0308 	and.w	r3, r3, #8
 8003684:	2b00      	cmp	r3, #0
 8003686:	d03c      	beq.n	8003702 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d01c      	beq.n	80036ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003690:	4b4b      	ldr	r3, [pc, #300]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 8003692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003696:	4a4a      	ldr	r2, [pc, #296]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a0:	f7fd fdd8 	bl	8001254 <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a8:	f7fd fdd4 	bl	8001254 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e1d4      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80036ba:	4b41      	ldr	r3, [pc, #260]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 80036bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0ef      	beq.n	80036a8 <HAL_RCC_OscConfig+0x3ec>
 80036c8:	e01b      	b.n	8003702 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ca:	4b3d      	ldr	r3, [pc, #244]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 80036cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d0:	4a3b      	ldr	r2, [pc, #236]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 80036d2:	f023 0301 	bic.w	r3, r3, #1
 80036d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036da:	f7fd fdbb 	bl	8001254 <HAL_GetTick>
 80036de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036e0:	e008      	b.n	80036f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036e2:	f7fd fdb7 	bl	8001254 <HAL_GetTick>
 80036e6:	4602      	mov	r2, r0
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	1ad3      	subs	r3, r2, r3
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d901      	bls.n	80036f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036f0:	2303      	movs	r3, #3
 80036f2:	e1b7      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036f4:	4b32      	ldr	r3, [pc, #200]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 80036f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1ef      	bne.n	80036e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0304 	and.w	r3, r3, #4
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 80a6 	beq.w	800385c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003710:	2300      	movs	r3, #0
 8003712:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003714:	4b2a      	ldr	r3, [pc, #168]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 8003716:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003718:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10d      	bne.n	800373c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003720:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 8003722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003724:	4a26      	ldr	r2, [pc, #152]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 8003726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800372a:	6593      	str	r3, [r2, #88]	; 0x58
 800372c:	4b24      	ldr	r3, [pc, #144]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 800372e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003734:	60bb      	str	r3, [r7, #8]
 8003736:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003738:	2301      	movs	r3, #1
 800373a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800373c:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <HAL_RCC_OscConfig+0x508>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003744:	2b00      	cmp	r3, #0
 8003746:	d118      	bne.n	800377a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003748:	4b1e      	ldr	r3, [pc, #120]	; (80037c4 <HAL_RCC_OscConfig+0x508>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a1d      	ldr	r2, [pc, #116]	; (80037c4 <HAL_RCC_OscConfig+0x508>)
 800374e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003752:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003754:	f7fd fd7e 	bl	8001254 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800375c:	f7fd fd7a 	bl	8001254 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b02      	cmp	r3, #2
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e17a      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800376e:	4b15      	ldr	r3, [pc, #84]	; (80037c4 <HAL_RCC_OscConfig+0x508>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0f0      	beq.n	800375c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d108      	bne.n	8003794 <HAL_RCC_OscConfig+0x4d8>
 8003782:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003788:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003792:	e029      	b.n	80037e8 <HAL_RCC_OscConfig+0x52c>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b05      	cmp	r3, #5
 800379a:	d115      	bne.n	80037c8 <HAL_RCC_OscConfig+0x50c>
 800379c:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 800379e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037a2:	4a07      	ldr	r2, [pc, #28]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 80037a4:	f043 0304 	orr.w	r3, r3, #4
 80037a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037ac:	4b04      	ldr	r3, [pc, #16]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 80037ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b2:	4a03      	ldr	r2, [pc, #12]	; (80037c0 <HAL_RCC_OscConfig+0x504>)
 80037b4:	f043 0301 	orr.w	r3, r3, #1
 80037b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037bc:	e014      	b.n	80037e8 <HAL_RCC_OscConfig+0x52c>
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40007000 	.word	0x40007000
 80037c8:	4b9c      	ldr	r3, [pc, #624]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 80037ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ce:	4a9b      	ldr	r2, [pc, #620]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037d8:	4b98      	ldr	r3, [pc, #608]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 80037da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037de:	4a97      	ldr	r2, [pc, #604]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 80037e0:	f023 0304 	bic.w	r3, r3, #4
 80037e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d016      	beq.n	800381e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f0:	f7fd fd30 	bl	8001254 <HAL_GetTick>
 80037f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f6:	e00a      	b.n	800380e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f8:	f7fd fd2c 	bl	8001254 <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	f241 3288 	movw	r2, #5000	; 0x1388
 8003806:	4293      	cmp	r3, r2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e12a      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800380e:	4b8b      	ldr	r3, [pc, #556]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 8003810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ed      	beq.n	80037f8 <HAL_RCC_OscConfig+0x53c>
 800381c:	e015      	b.n	800384a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381e:	f7fd fd19 	bl	8001254 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003824:	e00a      	b.n	800383c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	f7fd fd15 	bl	8001254 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f241 3288 	movw	r2, #5000	; 0x1388
 8003834:	4293      	cmp	r3, r2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e113      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800383c:	4b7f      	ldr	r3, [pc, #508]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 800383e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1ed      	bne.n	8003826 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800384a:	7ffb      	ldrb	r3, [r7, #31]
 800384c:	2b01      	cmp	r3, #1
 800384e:	d105      	bne.n	800385c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003850:	4b7a      	ldr	r3, [pc, #488]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	4a79      	ldr	r2, [pc, #484]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 8003856:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800385a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80fe 	beq.w	8003a62 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386a:	2b02      	cmp	r3, #2
 800386c:	f040 80d0 	bne.w	8003a10 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003870:	4b72      	ldr	r3, [pc, #456]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f003 0203 	and.w	r2, r3, #3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003880:	429a      	cmp	r2, r3
 8003882:	d130      	bne.n	80038e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	3b01      	subs	r3, #1
 8003890:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003892:	429a      	cmp	r2, r3
 8003894:	d127      	bne.n	80038e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d11f      	bne.n	80038e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038b0:	2a07      	cmp	r2, #7
 80038b2:	bf14      	ite	ne
 80038b4:	2201      	movne	r2, #1
 80038b6:	2200      	moveq	r2, #0
 80038b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d113      	bne.n	80038e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	3b01      	subs	r3, #1
 80038cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d109      	bne.n	80038e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038dc:	085b      	lsrs	r3, r3, #1
 80038de:	3b01      	subs	r3, #1
 80038e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d06e      	beq.n	80039c4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	2b0c      	cmp	r3, #12
 80038ea:	d069      	beq.n	80039c0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038ec:	4b53      	ldr	r3, [pc, #332]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d105      	bne.n	8003904 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038f8:	4b50      	ldr	r3, [pc, #320]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e0ad      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003908:	4b4c      	ldr	r3, [pc, #304]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a4b      	ldr	r2, [pc, #300]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 800390e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003912:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003914:	f7fd fc9e 	bl	8001254 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391c:	f7fd fc9a 	bl	8001254 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e09a      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800392e:	4b43      	ldr	r3, [pc, #268]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800393a:	4b40      	ldr	r3, [pc, #256]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	4b40      	ldr	r3, [pc, #256]	; (8003a40 <HAL_RCC_OscConfig+0x784>)
 8003940:	4013      	ands	r3, r2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800394a:	3a01      	subs	r2, #1
 800394c:	0112      	lsls	r2, r2, #4
 800394e:	4311      	orrs	r1, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003954:	0212      	lsls	r2, r2, #8
 8003956:	4311      	orrs	r1, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800395c:	0852      	lsrs	r2, r2, #1
 800395e:	3a01      	subs	r2, #1
 8003960:	0552      	lsls	r2, r2, #21
 8003962:	4311      	orrs	r1, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003968:	0852      	lsrs	r2, r2, #1
 800396a:	3a01      	subs	r2, #1
 800396c:	0652      	lsls	r2, r2, #25
 800396e:	4311      	orrs	r1, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003974:	0912      	lsrs	r2, r2, #4
 8003976:	0452      	lsls	r2, r2, #17
 8003978:	430a      	orrs	r2, r1
 800397a:	4930      	ldr	r1, [pc, #192]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 800397c:	4313      	orrs	r3, r2
 800397e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003980:	4b2e      	ldr	r3, [pc, #184]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a2d      	ldr	r2, [pc, #180]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 8003986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800398a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800398c:	4b2b      	ldr	r3, [pc, #172]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	4a2a      	ldr	r2, [pc, #168]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 8003992:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003996:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003998:	f7fd fc5c 	bl	8001254 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a0:	f7fd fc58 	bl	8001254 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e058      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b2:	4b22      	ldr	r3, [pc, #136]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039be:	e050      	b.n	8003a62 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e04f      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c4:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d148      	bne.n	8003a62 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039d0:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a19      	ldr	r2, [pc, #100]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 80039d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039da:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039dc:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4a16      	ldr	r2, [pc, #88]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 80039e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039e8:	f7fd fc34 	bl	8001254 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fd fc30 	bl	8001254 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e030      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a02:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0x734>
 8003a0e:	e028      	b.n	8003a62 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	2b0c      	cmp	r3, #12
 8003a14:	d023      	beq.n	8003a5e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a08      	ldr	r2, [pc, #32]	; (8003a3c <HAL_RCC_OscConfig+0x780>)
 8003a1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a22:	f7fd fc17 	bl	8001254 <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a28:	e00c      	b.n	8003a44 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a2a:	f7fd fc13 	bl	8001254 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d905      	bls.n	8003a44 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e013      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a44:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_RCC_OscConfig+0x7b0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1ec      	bne.n	8003a2a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a50:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HAL_RCC_OscConfig+0x7b0>)
 8003a52:	68da      	ldr	r2, [r3, #12]
 8003a54:	4905      	ldr	r1, [pc, #20]	; (8003a6c <HAL_RCC_OscConfig+0x7b0>)
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_OscConfig+0x7b4>)
 8003a58:	4013      	ands	r3, r2
 8003a5a:	60cb      	str	r3, [r1, #12]
 8003a5c:	e001      	b.n	8003a62 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3720      	adds	r7, #32
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	feeefffc 	.word	0xfeeefffc

08003a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b084      	sub	sp, #16
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0e7      	b.n	8003c58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a88:	4b75      	ldr	r3, [pc, #468]	; (8003c60 <HAL_RCC_ClockConfig+0x1ec>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	683a      	ldr	r2, [r7, #0]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d910      	bls.n	8003ab8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a96:	4b72      	ldr	r3, [pc, #456]	; (8003c60 <HAL_RCC_ClockConfig+0x1ec>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f023 0207 	bic.w	r2, r3, #7
 8003a9e:	4970      	ldr	r1, [pc, #448]	; (8003c60 <HAL_RCC_ClockConfig+0x1ec>)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aa6:	4b6e      	ldr	r3, [pc, #440]	; (8003c60 <HAL_RCC_ClockConfig+0x1ec>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0cf      	b.n	8003c58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d010      	beq.n	8003ae6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	4b66      	ldr	r3, [pc, #408]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d908      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad4:	4b63      	ldr	r3, [pc, #396]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	4960      	ldr	r1, [pc, #384]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d04c      	beq.n	8003b8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	2b03      	cmp	r3, #3
 8003af8:	d107      	bne.n	8003b0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003afa:	4b5a      	ldr	r3, [pc, #360]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d121      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e0a6      	b.n	8003c58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d107      	bne.n	8003b22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b12:	4b54      	ldr	r3, [pc, #336]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d115      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e09a      	b.n	8003c58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d107      	bne.n	8003b3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b2a:	4b4e      	ldr	r3, [pc, #312]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d109      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e08e      	b.n	8003c58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b3a:	4b4a      	ldr	r3, [pc, #296]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e086      	b.n	8003c58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b4a:	4b46      	ldr	r3, [pc, #280]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f023 0203 	bic.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4943      	ldr	r1, [pc, #268]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b5c:	f7fd fb7a 	bl	8001254 <HAL_GetTick>
 8003b60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b64:	f7fd fb76 	bl	8001254 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e06e      	b.n	8003c58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7a:	4b3a      	ldr	r3, [pc, #232]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 020c 	and.w	r2, r3, #12
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d1eb      	bne.n	8003b64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d010      	beq.n	8003bba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	4b31      	ldr	r3, [pc, #196]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d208      	bcs.n	8003bba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ba8:	4b2e      	ldr	r3, [pc, #184]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	492b      	ldr	r1, [pc, #172]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bba:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <HAL_RCC_ClockConfig+0x1ec>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	683a      	ldr	r2, [r7, #0]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d210      	bcs.n	8003bea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc8:	4b25      	ldr	r3, [pc, #148]	; (8003c60 <HAL_RCC_ClockConfig+0x1ec>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 0207 	bic.w	r2, r3, #7
 8003bd0:	4923      	ldr	r1, [pc, #140]	; (8003c60 <HAL_RCC_ClockConfig+0x1ec>)
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd8:	4b21      	ldr	r3, [pc, #132]	; (8003c60 <HAL_RCC_ClockConfig+0x1ec>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	683a      	ldr	r2, [r7, #0]
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d001      	beq.n	8003bea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e036      	b.n	8003c58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d008      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bf6:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	4918      	ldr	r1, [pc, #96]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003c04:	4313      	orrs	r3, r2
 8003c06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d009      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c14:	4b13      	ldr	r3, [pc, #76]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4910      	ldr	r1, [pc, #64]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c28:	f000 f824 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <HAL_RCC_ClockConfig+0x1f0>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	091b      	lsrs	r3, r3, #4
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	490b      	ldr	r1, [pc, #44]	; (8003c68 <HAL_RCC_ClockConfig+0x1f4>)
 8003c3a:	5ccb      	ldrb	r3, [r1, r3]
 8003c3c:	f003 031f 	and.w	r3, r3, #31
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
 8003c44:	4a09      	ldr	r2, [pc, #36]	; (8003c6c <HAL_RCC_ClockConfig+0x1f8>)
 8003c46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <HAL_RCC_ClockConfig+0x1fc>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fd fab1 	bl	80011b4 <HAL_InitTick>
 8003c52:	4603      	mov	r3, r0
 8003c54:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c56:	7afb      	ldrb	r3, [r7, #11]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3710      	adds	r7, #16
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	40022000 	.word	0x40022000
 8003c64:	40021000 	.word	0x40021000
 8003c68:	08009284 	.word	0x08009284
 8003c6c:	20000000 	.word	0x20000000
 8003c70:	20000004 	.word	0x20000004

08003c74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b089      	sub	sp, #36	; 0x24
 8003c78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c82:	4b3e      	ldr	r3, [pc, #248]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c8c:	4b3b      	ldr	r3, [pc, #236]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x34>
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	2b0c      	cmp	r3, #12
 8003ca0:	d121      	bne.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d11e      	bne.n	8003ce6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003ca8:	4b34      	ldr	r3, [pc, #208]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0308 	and.w	r3, r3, #8
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d107      	bne.n	8003cc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003cb4:	4b31      	ldr	r3, [pc, #196]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cba:	0a1b      	lsrs	r3, r3, #8
 8003cbc:	f003 030f 	and.w	r3, r3, #15
 8003cc0:	61fb      	str	r3, [r7, #28]
 8003cc2:	e005      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cc4:	4b2d      	ldr	r3, [pc, #180]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003cd0:	4a2b      	ldr	r2, [pc, #172]	; (8003d80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d10d      	bne.n	8003cfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ce4:	e00a      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d102      	bne.n	8003cf2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cec:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	e004      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d101      	bne.n	8003cfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cf8:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	2b0c      	cmp	r3, #12
 8003d00:	d134      	bne.n	8003d6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d02:	4b1e      	ldr	r3, [pc, #120]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f003 0303 	and.w	r3, r3, #3
 8003d0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d003      	beq.n	8003d1a <HAL_RCC_GetSysClockFreq+0xa6>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d003      	beq.n	8003d20 <HAL_RCC_GetSysClockFreq+0xac>
 8003d18:	e005      	b.n	8003d26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d1a:	4b1a      	ldr	r3, [pc, #104]	; (8003d84 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d1c:	617b      	str	r3, [r7, #20]
      break;
 8003d1e:	e005      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d20:	4b19      	ldr	r3, [pc, #100]	; (8003d88 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d22:	617b      	str	r3, [r7, #20]
      break;
 8003d24:	e002      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	617b      	str	r3, [r7, #20]
      break;
 8003d2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d2c:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 0307 	and.w	r3, r3, #7
 8003d36:	3301      	adds	r3, #1
 8003d38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d3a:	4b10      	ldr	r3, [pc, #64]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	0a1b      	lsrs	r3, r3, #8
 8003d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	fb03 f202 	mul.w	r2, r3, r2
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d52:	4b0a      	ldr	r3, [pc, #40]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x108>)
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	0e5b      	lsrs	r3, r3, #25
 8003d58:	f003 0303 	and.w	r3, r3, #3
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d6c:	69bb      	ldr	r3, [r7, #24]
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3724      	adds	r7, #36	; 0x24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	0800929c 	.word	0x0800929c
 8003d84:	00f42400 	.word	0x00f42400
 8003d88:	007a1200 	.word	0x007a1200

08003d8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d90:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d92:	681b      	ldr	r3, [r3, #0]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	20000000 	.word	0x20000000

08003da4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003da8:	f7ff fff0 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dac:	4602      	mov	r2, r0
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	0a1b      	lsrs	r3, r3, #8
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	4904      	ldr	r1, [pc, #16]	; (8003dcc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dba:	5ccb      	ldrb	r3, [r1, r3]
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	08009294 	.word	0x08009294

08003dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003dd4:	f7ff ffda 	bl	8003d8c <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b06      	ldr	r3, [pc, #24]	; (8003df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0adb      	lsrs	r3, r3, #11
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4904      	ldr	r1, [pc, #16]	; (8003df8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	f003 031f 	and.w	r3, r3, #31
 8003dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40021000 	.word	0x40021000
 8003df8:	08009294 	.word	0x08009294

08003dfc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e08:	4b2a      	ldr	r3, [pc, #168]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e14:	f7ff f922 	bl	800305c <HAL_PWREx_GetVoltageRange>
 8003e18:	6178      	str	r0, [r7, #20]
 8003e1a:	e014      	b.n	8003e46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e1c:	4b25      	ldr	r3, [pc, #148]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e20:	4a24      	ldr	r2, [pc, #144]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e26:	6593      	str	r3, [r2, #88]	; 0x58
 8003e28:	4b22      	ldr	r3, [pc, #136]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e30:	60fb      	str	r3, [r7, #12]
 8003e32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e34:	f7ff f912 	bl	800305c <HAL_PWREx_GetVoltageRange>
 8003e38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e3a:	4b1e      	ldr	r3, [pc, #120]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3e:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4c:	d10b      	bne.n	8003e66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b80      	cmp	r3, #128	; 0x80
 8003e52:	d919      	bls.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2ba0      	cmp	r3, #160	; 0xa0
 8003e58:	d902      	bls.n	8003e60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	e013      	b.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e60:	2301      	movs	r3, #1
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	e010      	b.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b80      	cmp	r3, #128	; 0x80
 8003e6a:	d902      	bls.n	8003e72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	e00a      	b.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	d102      	bne.n	8003e7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e78:	2302      	movs	r3, #2
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	e004      	b.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b70      	cmp	r3, #112	; 0x70
 8003e82:	d101      	bne.n	8003e88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e84:	2301      	movs	r3, #1
 8003e86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e88:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f023 0207 	bic.w	r2, r3, #7
 8003e90:	4909      	ldr	r1, [pc, #36]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e98:	4b07      	ldr	r3, [pc, #28]	; (8003eb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0307 	and.w	r3, r3, #7
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d001      	beq.n	8003eaa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3718      	adds	r7, #24
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40022000 	.word	0x40022000

08003ebc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ec8:	2300      	movs	r3, #0
 8003eca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d041      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003edc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ee0:	d02a      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ee2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ee6:	d824      	bhi.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ee8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eec:	d008      	beq.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003eee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ef2:	d81e      	bhi.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00a      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ef8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003efc:	d010      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003efe:	e018      	b.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f00:	4b86      	ldr	r3, [pc, #536]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	4a85      	ldr	r2, [pc, #532]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f0a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f0c:	e015      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	3304      	adds	r3, #4
 8003f12:	2100      	movs	r1, #0
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 facb 	bl	80044b0 <RCCEx_PLLSAI1_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f1e:	e00c      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	3320      	adds	r3, #32
 8003f24:	2100      	movs	r1, #0
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fbb6 	bl	8004698 <RCCEx_PLLSAI2_Config>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f30:	e003      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	74fb      	strb	r3, [r7, #19]
      break;
 8003f36:	e000      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f3a:	7cfb      	ldrb	r3, [r7, #19]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10b      	bne.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f40:	4b76      	ldr	r3, [pc, #472]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f46:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f4e:	4973      	ldr	r1, [pc, #460]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f56:	e001      	b.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f58:	7cfb      	ldrb	r3, [r7, #19]
 8003f5a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d041      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f70:	d02a      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f72:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f76:	d824      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f78:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f7c:	d008      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f7e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f82:	d81e      	bhi.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f8c:	d010      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f8e:	e018      	b.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f90:	4b62      	ldr	r3, [pc, #392]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	4a61      	ldr	r2, [pc, #388]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f9c:	e015      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	3304      	adds	r3, #4
 8003fa2:	2100      	movs	r1, #0
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f000 fa83 	bl	80044b0 <RCCEx_PLLSAI1_Config>
 8003faa:	4603      	mov	r3, r0
 8003fac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fae:	e00c      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3320      	adds	r3, #32
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fb6e 	bl	8004698 <RCCEx_PLLSAI2_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fc0:	e003      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	74fb      	strb	r3, [r7, #19]
      break;
 8003fc6:	e000      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fca:	7cfb      	ldrb	r3, [r7, #19]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10b      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fd0:	4b52      	ldr	r3, [pc, #328]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fde:	494f      	ldr	r1, [pc, #316]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fe6:	e001      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 80a0 	beq.w	800413a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ffe:	4b47      	ldr	r3, [pc, #284]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800400a:	2301      	movs	r3, #1
 800400c:	e000      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800400e:	2300      	movs	r3, #0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00d      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004014:	4b41      	ldr	r3, [pc, #260]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004018:	4a40      	ldr	r2, [pc, #256]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800401a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401e:	6593      	str	r3, [r2, #88]	; 0x58
 8004020:	4b3e      	ldr	r3, [pc, #248]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004028:	60bb      	str	r3, [r7, #8]
 800402a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800402c:	2301      	movs	r3, #1
 800402e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004030:	4b3b      	ldr	r3, [pc, #236]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a3a      	ldr	r2, [pc, #232]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800403a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800403c:	f7fd f90a 	bl	8001254 <HAL_GetTick>
 8004040:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004042:	e009      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004044:	f7fd f906 	bl	8001254 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	2b02      	cmp	r3, #2
 8004050:	d902      	bls.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	74fb      	strb	r3, [r7, #19]
        break;
 8004056:	e005      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004058:	4b31      	ldr	r3, [pc, #196]	; (8004120 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004060:	2b00      	cmp	r3, #0
 8004062:	d0ef      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004064:	7cfb      	ldrb	r3, [r7, #19]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d15c      	bne.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800406a:	4b2c      	ldr	r3, [pc, #176]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004070:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004074:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01f      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004082:	697a      	ldr	r2, [r7, #20]
 8004084:	429a      	cmp	r2, r3
 8004086:	d019      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004088:	4b24      	ldr	r3, [pc, #144]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800408a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800408e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004092:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004094:	4b21      	ldr	r3, [pc, #132]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800409a:	4a20      	ldr	r2, [pc, #128]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040a4:	4b1d      	ldr	r3, [pc, #116]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040aa:	4a1c      	ldr	r2, [pc, #112]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040b4:	4a19      	ldr	r2, [pc, #100]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d016      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c6:	f7fd f8c5 	bl	8001254 <HAL_GetTick>
 80040ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040cc:	e00b      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ce:	f7fd f8c1 	bl	8001254 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040dc:	4293      	cmp	r3, r2
 80040de:	d902      	bls.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	74fb      	strb	r3, [r7, #19]
            break;
 80040e4:	e006      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e6:	4b0d      	ldr	r3, [pc, #52]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d0ec      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10c      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040fa:	4b08      	ldr	r3, [pc, #32]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800410a:	4904      	ldr	r1, [pc, #16]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800410c:	4313      	orrs	r3, r2
 800410e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004112:	e009      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004114:	7cfb      	ldrb	r3, [r7, #19]
 8004116:	74bb      	strb	r3, [r7, #18]
 8004118:	e006      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800411a:	bf00      	nop
 800411c:	40021000 	.word	0x40021000
 8004120:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004124:	7cfb      	ldrb	r3, [r7, #19]
 8004126:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004128:	7c7b      	ldrb	r3, [r7, #17]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d105      	bne.n	800413a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800412e:	4b9e      	ldr	r3, [pc, #632]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	4a9d      	ldr	r2, [pc, #628]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004138:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004146:	4b98      	ldr	r3, [pc, #608]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414c:	f023 0203 	bic.w	r2, r3, #3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	4994      	ldr	r1, [pc, #592]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00a      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004168:	4b8f      	ldr	r3, [pc, #572]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416e:	f023 020c 	bic.w	r2, r3, #12
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004176:	498c      	ldr	r1, [pc, #560]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004178:	4313      	orrs	r3, r2
 800417a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0304 	and.w	r3, r3, #4
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800418a:	4b87      	ldr	r3, [pc, #540]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800418c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004190:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	4983      	ldr	r1, [pc, #524]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419a:	4313      	orrs	r3, r2
 800419c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00a      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041ac:	4b7e      	ldr	r3, [pc, #504]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	497b      	ldr	r1, [pc, #492]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0310 	and.w	r3, r3, #16
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00a      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041ce:	4b76      	ldr	r3, [pc, #472]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041dc:	4972      	ldr	r1, [pc, #456]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041f0:	4b6d      	ldr	r3, [pc, #436]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fe:	496a      	ldr	r1, [pc, #424]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004200:	4313      	orrs	r3, r2
 8004202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00a      	beq.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004212:	4b65      	ldr	r3, [pc, #404]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004218:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004220:	4961      	ldr	r1, [pc, #388]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00a      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004234:	4b5c      	ldr	r3, [pc, #368]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004242:	4959      	ldr	r1, [pc, #356]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004244:	4313      	orrs	r3, r2
 8004246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00a      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004256:	4b54      	ldr	r3, [pc, #336]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004264:	4950      	ldr	r1, [pc, #320]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00a      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004278:	4b4b      	ldr	r3, [pc, #300]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800427a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004286:	4948      	ldr	r1, [pc, #288]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800429a:	4b43      	ldr	r3, [pc, #268]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800429c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042a8:	493f      	ldr	r1, [pc, #252]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d028      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042bc:	4b3a      	ldr	r3, [pc, #232]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ca:	4937      	ldr	r1, [pc, #220]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042da:	d106      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042dc:	4b32      	ldr	r3, [pc, #200]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a31      	ldr	r2, [pc, #196]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042e6:	60d3      	str	r3, [r2, #12]
 80042e8:	e011      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042f2:	d10c      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	3304      	adds	r3, #4
 80042f8:	2101      	movs	r1, #1
 80042fa:	4618      	mov	r0, r3
 80042fc:	f000 f8d8 	bl	80044b0 <RCCEx_PLLSAI1_Config>
 8004300:	4603      	mov	r3, r0
 8004302:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004304:	7cfb      	ldrb	r3, [r7, #19]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d028      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800431a:	4b23      	ldr	r3, [pc, #140]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004320:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	491f      	ldr	r1, [pc, #124]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004334:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004338:	d106      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800433a:	4b1b      	ldr	r3, [pc, #108]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	4a1a      	ldr	r2, [pc, #104]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004344:	60d3      	str	r3, [r2, #12]
 8004346:	e011      	b.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800434c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004350:	d10c      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3304      	adds	r3, #4
 8004356:	2101      	movs	r1, #1
 8004358:	4618      	mov	r0, r3
 800435a:	f000 f8a9 	bl	80044b0 <RCCEx_PLLSAI1_Config>
 800435e:	4603      	mov	r3, r0
 8004360:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004362:	7cfb      	ldrb	r3, [r7, #19]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004368:	7cfb      	ldrb	r3, [r7, #19]
 800436a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d02b      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004386:	4908      	ldr	r1, [pc, #32]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004392:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004396:	d109      	bne.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004398:	4b03      	ldr	r3, [pc, #12]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	4a02      	ldr	r2, [pc, #8]	; (80043a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043a2:	60d3      	str	r3, [r2, #12]
 80043a4:	e014      	b.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80043a6:	bf00      	nop
 80043a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043b4:	d10c      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3304      	adds	r3, #4
 80043ba:	2101      	movs	r1, #1
 80043bc:	4618      	mov	r0, r3
 80043be:	f000 f877 	bl	80044b0 <RCCEx_PLLSAI1_Config>
 80043c2:	4603      	mov	r3, r0
 80043c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043c6:	7cfb      	ldrb	r3, [r7, #19]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80043cc:	7cfb      	ldrb	r3, [r7, #19]
 80043ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d02f      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043dc:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043ea:	4928      	ldr	r1, [pc, #160]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043fa:	d10d      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3304      	adds	r3, #4
 8004400:	2102      	movs	r1, #2
 8004402:	4618      	mov	r0, r3
 8004404:	f000 f854 	bl	80044b0 <RCCEx_PLLSAI1_Config>
 8004408:	4603      	mov	r3, r0
 800440a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800440c:	7cfb      	ldrb	r3, [r7, #19]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d014      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004412:	7cfb      	ldrb	r3, [r7, #19]
 8004414:	74bb      	strb	r3, [r7, #18]
 8004416:	e011      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800441c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004420:	d10c      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3320      	adds	r3, #32
 8004426:	2102      	movs	r1, #2
 8004428:	4618      	mov	r0, r3
 800442a:	f000 f935 	bl	8004698 <RCCEx_PLLSAI2_Config>
 800442e:	4603      	mov	r3, r0
 8004430:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004432:	7cfb      	ldrb	r3, [r7, #19]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00a      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004448:	4b10      	ldr	r3, [pc, #64]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800444a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800444e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004456:	490d      	ldr	r1, [pc, #52]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004458:	4313      	orrs	r3, r2
 800445a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00b      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800446a:	4b08      	ldr	r3, [pc, #32]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800447a:	4904      	ldr	r1, [pc, #16]	; (800448c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800447c:	4313      	orrs	r3, r2
 800447e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004482:	7cbb      	ldrb	r3, [r7, #18]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40021000 	.word	0x40021000

08004490 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a04      	ldr	r2, [pc, #16]	; (80044ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800449a:	f043 0304 	orr.w	r3, r3, #4
 800449e:	6013      	str	r3, [r2, #0]
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40021000 	.word	0x40021000

080044b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044be:	4b75      	ldr	r3, [pc, #468]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f003 0303 	and.w	r3, r3, #3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d018      	beq.n	80044fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80044ca:	4b72      	ldr	r3, [pc, #456]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0203 	and.w	r2, r3, #3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d10d      	bne.n	80044f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
       ||
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d009      	beq.n	80044f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044e2:	4b6c      	ldr	r3, [pc, #432]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	091b      	lsrs	r3, r3, #4
 80044e8:	f003 0307 	and.w	r3, r3, #7
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
       ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d047      	beq.n	8004586 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
 80044fa:	e044      	b.n	8004586 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b03      	cmp	r3, #3
 8004502:	d018      	beq.n	8004536 <RCCEx_PLLSAI1_Config+0x86>
 8004504:	2b03      	cmp	r3, #3
 8004506:	d825      	bhi.n	8004554 <RCCEx_PLLSAI1_Config+0xa4>
 8004508:	2b01      	cmp	r3, #1
 800450a:	d002      	beq.n	8004512 <RCCEx_PLLSAI1_Config+0x62>
 800450c:	2b02      	cmp	r3, #2
 800450e:	d009      	beq.n	8004524 <RCCEx_PLLSAI1_Config+0x74>
 8004510:	e020      	b.n	8004554 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004512:	4b60      	ldr	r3, [pc, #384]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d11d      	bne.n	800455a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004522:	e01a      	b.n	800455a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004524:	4b5b      	ldr	r3, [pc, #364]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800452c:	2b00      	cmp	r3, #0
 800452e:	d116      	bne.n	800455e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004534:	e013      	b.n	800455e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004536:	4b57      	ldr	r3, [pc, #348]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d10f      	bne.n	8004562 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004542:	4b54      	ldr	r3, [pc, #336]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004552:	e006      	b.n	8004562 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
      break;
 8004558:	e004      	b.n	8004564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800455a:	bf00      	nop
 800455c:	e002      	b.n	8004564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800455e:	bf00      	nop
 8004560:	e000      	b.n	8004564 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004562:	bf00      	nop
    }

    if(status == HAL_OK)
 8004564:	7bfb      	ldrb	r3, [r7, #15]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d10d      	bne.n	8004586 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800456a:	4b4a      	ldr	r3, [pc, #296]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6819      	ldr	r1, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	3b01      	subs	r3, #1
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	430b      	orrs	r3, r1
 8004580:	4944      	ldr	r1, [pc, #272]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004582:	4313      	orrs	r3, r2
 8004584:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004586:	7bfb      	ldrb	r3, [r7, #15]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d17d      	bne.n	8004688 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800458c:	4b41      	ldr	r3, [pc, #260]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a40      	ldr	r2, [pc, #256]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004592:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004596:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004598:	f7fc fe5c 	bl	8001254 <HAL_GetTick>
 800459c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800459e:	e009      	b.n	80045b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045a0:	f7fc fe58 	bl	8001254 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d902      	bls.n	80045b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	73fb      	strb	r3, [r7, #15]
        break;
 80045b2:	e005      	b.n	80045c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045b4:	4b37      	ldr	r3, [pc, #220]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d1ef      	bne.n	80045a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d160      	bne.n	8004688 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d111      	bne.n	80045f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045cc:	4b31      	ldr	r3, [pc, #196]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	6892      	ldr	r2, [r2, #8]
 80045dc:	0211      	lsls	r1, r2, #8
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	68d2      	ldr	r2, [r2, #12]
 80045e2:	0912      	lsrs	r2, r2, #4
 80045e4:	0452      	lsls	r2, r2, #17
 80045e6:	430a      	orrs	r2, r1
 80045e8:	492a      	ldr	r1, [pc, #168]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	610b      	str	r3, [r1, #16]
 80045ee:	e027      	b.n	8004640 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d112      	bne.n	800461c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045f6:	4b27      	ldr	r3, [pc, #156]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	6892      	ldr	r2, [r2, #8]
 8004606:	0211      	lsls	r1, r2, #8
 8004608:	687a      	ldr	r2, [r7, #4]
 800460a:	6912      	ldr	r2, [r2, #16]
 800460c:	0852      	lsrs	r2, r2, #1
 800460e:	3a01      	subs	r2, #1
 8004610:	0552      	lsls	r2, r2, #21
 8004612:	430a      	orrs	r2, r1
 8004614:	491f      	ldr	r1, [pc, #124]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004616:	4313      	orrs	r3, r2
 8004618:	610b      	str	r3, [r1, #16]
 800461a:	e011      	b.n	8004640 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800461c:	4b1d      	ldr	r3, [pc, #116]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004624:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	6892      	ldr	r2, [r2, #8]
 800462c:	0211      	lsls	r1, r2, #8
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	6952      	ldr	r2, [r2, #20]
 8004632:	0852      	lsrs	r2, r2, #1
 8004634:	3a01      	subs	r2, #1
 8004636:	0652      	lsls	r2, r2, #25
 8004638:	430a      	orrs	r2, r1
 800463a:	4916      	ldr	r1, [pc, #88]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800463c:	4313      	orrs	r3, r2
 800463e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004640:	4b14      	ldr	r3, [pc, #80]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a13      	ldr	r2, [pc, #76]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004646:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800464a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464c:	f7fc fe02 	bl	8001254 <HAL_GetTick>
 8004650:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004652:	e009      	b.n	8004668 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004654:	f7fc fdfe 	bl	8001254 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d902      	bls.n	8004668 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	73fb      	strb	r3, [r7, #15]
          break;
 8004666:	e005      	b.n	8004674 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004668:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0ef      	beq.n	8004654 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d106      	bne.n	8004688 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800467a:	4b06      	ldr	r3, [pc, #24]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	699b      	ldr	r3, [r3, #24]
 8004682:	4904      	ldr	r1, [pc, #16]	; (8004694 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004684:	4313      	orrs	r3, r2
 8004686:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004688:	7bfb      	ldrb	r3, [r7, #15]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40021000 	.word	0x40021000

08004698 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80046a6:	4b6a      	ldr	r3, [pc, #424]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d018      	beq.n	80046e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80046b2:	4b67      	ldr	r3, [pc, #412]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f003 0203 	and.w	r2, r3, #3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d10d      	bne.n	80046de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
       ||
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d009      	beq.n	80046de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80046ca:	4b61      	ldr	r3, [pc, #388]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	091b      	lsrs	r3, r3, #4
 80046d0:	f003 0307 	and.w	r3, r3, #7
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
       ||
 80046da:	429a      	cmp	r2, r3
 80046dc:	d047      	beq.n	800476e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
 80046e2:	e044      	b.n	800476e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	2b03      	cmp	r3, #3
 80046ea:	d018      	beq.n	800471e <RCCEx_PLLSAI2_Config+0x86>
 80046ec:	2b03      	cmp	r3, #3
 80046ee:	d825      	bhi.n	800473c <RCCEx_PLLSAI2_Config+0xa4>
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d002      	beq.n	80046fa <RCCEx_PLLSAI2_Config+0x62>
 80046f4:	2b02      	cmp	r3, #2
 80046f6:	d009      	beq.n	800470c <RCCEx_PLLSAI2_Config+0x74>
 80046f8:	e020      	b.n	800473c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046fa:	4b55      	ldr	r3, [pc, #340]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d11d      	bne.n	8004742 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800470a:	e01a      	b.n	8004742 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800470c:	4b50      	ldr	r3, [pc, #320]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004714:	2b00      	cmp	r3, #0
 8004716:	d116      	bne.n	8004746 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800471c:	e013      	b.n	8004746 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800471e:	4b4c      	ldr	r3, [pc, #304]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10f      	bne.n	800474a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800472a:	4b49      	ldr	r3, [pc, #292]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d109      	bne.n	800474a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800473a:	e006      	b.n	800474a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	73fb      	strb	r3, [r7, #15]
      break;
 8004740:	e004      	b.n	800474c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004742:	bf00      	nop
 8004744:	e002      	b.n	800474c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004746:	bf00      	nop
 8004748:	e000      	b.n	800474c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800474a:	bf00      	nop
    }

    if(status == HAL_OK)
 800474c:	7bfb      	ldrb	r3, [r7, #15]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10d      	bne.n	800476e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004752:	4b3f      	ldr	r3, [pc, #252]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6819      	ldr	r1, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	3b01      	subs	r3, #1
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	430b      	orrs	r3, r1
 8004768:	4939      	ldr	r1, [pc, #228]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 800476a:	4313      	orrs	r3, r2
 800476c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800476e:	7bfb      	ldrb	r3, [r7, #15]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d167      	bne.n	8004844 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004774:	4b36      	ldr	r3, [pc, #216]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a35      	ldr	r2, [pc, #212]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 800477a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800477e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004780:	f7fc fd68 	bl	8001254 <HAL_GetTick>
 8004784:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004786:	e009      	b.n	800479c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004788:	f7fc fd64 	bl	8001254 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d902      	bls.n	800479c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	73fb      	strb	r3, [r7, #15]
        break;
 800479a:	e005      	b.n	80047a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800479c:	4b2c      	ldr	r3, [pc, #176]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1ef      	bne.n	8004788 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d14a      	bne.n	8004844 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d111      	bne.n	80047d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047b4:	4b26      	ldr	r3, [pc, #152]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047b6:	695b      	ldr	r3, [r3, #20]
 80047b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80047bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6892      	ldr	r2, [r2, #8]
 80047c4:	0211      	lsls	r1, r2, #8
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68d2      	ldr	r2, [r2, #12]
 80047ca:	0912      	lsrs	r2, r2, #4
 80047cc:	0452      	lsls	r2, r2, #17
 80047ce:	430a      	orrs	r2, r1
 80047d0:	491f      	ldr	r1, [pc, #124]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047d2:	4313      	orrs	r3, r2
 80047d4:	614b      	str	r3, [r1, #20]
 80047d6:	e011      	b.n	80047fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047d8:	4b1d      	ldr	r3, [pc, #116]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047da:	695b      	ldr	r3, [r3, #20]
 80047dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6892      	ldr	r2, [r2, #8]
 80047e8:	0211      	lsls	r1, r2, #8
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6912      	ldr	r2, [r2, #16]
 80047ee:	0852      	lsrs	r2, r2, #1
 80047f0:	3a01      	subs	r2, #1
 80047f2:	0652      	lsls	r2, r2, #25
 80047f4:	430a      	orrs	r2, r1
 80047f6:	4916      	ldr	r1, [pc, #88]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047fc:	4b14      	ldr	r3, [pc, #80]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a13      	ldr	r2, [pc, #76]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004806:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004808:	f7fc fd24 	bl	8001254 <HAL_GetTick>
 800480c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800480e:	e009      	b.n	8004824 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004810:	f7fc fd20 	bl	8001254 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d902      	bls.n	8004824 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	73fb      	strb	r3, [r7, #15]
          break;
 8004822:	e005      	b.n	8004830 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0ef      	beq.n	8004810 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004836:	4b06      	ldr	r3, [pc, #24]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004838:	695a      	ldr	r2, [r3, #20]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	4904      	ldr	r1, [pc, #16]	; (8004850 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004840:	4313      	orrs	r3, r2
 8004842:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004844:	7bfb      	ldrb	r3, [r7, #15]
}
 8004846:	4618      	mov	r0, r3
 8004848:	3710      	adds	r7, #16
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	40021000 	.word	0x40021000

08004854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b084      	sub	sp, #16
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e095      	b.n	8004992 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486a:	2b00      	cmp	r3, #0
 800486c:	d108      	bne.n	8004880 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004876:	d009      	beq.n	800488c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	61da      	str	r2, [r3, #28]
 800487e:	e005      	b.n	800488c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004898:	b2db      	uxtb	r3, r3
 800489a:	2b00      	cmp	r3, #0
 800489c:	d106      	bne.n	80048ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fc faea 	bl	8000e80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048cc:	d902      	bls.n	80048d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	e002      	b.n	80048da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048e2:	d007      	beq.n	80048f4 <HAL_SPI_Init+0xa0>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048ec:	d002      	beq.n	80048f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	431a      	orrs	r2, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	69db      	ldr	r3, [r3, #28]
 8004928:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800492c:	431a      	orrs	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004936:	ea42 0103 	orr.w	r1, r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	0c1b      	lsrs	r3, r3, #16
 8004950:	f003 0204 	and.w	r2, r3, #4
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	f003 0310 	and.w	r3, r3, #16
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004962:	f003 0308 	and.w	r3, r3, #8
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004970:	ea42 0103 	orr.w	r1, r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e040      	b.n	8004a2e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d106      	bne.n	80049c2 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7fc faa3 	bl	8000f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2224      	movs	r2, #36	; 0x24
 80049c6:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f022 0201 	bic.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fae1 	bl	8004fa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 f826 	bl	8004a38 <UART_SetConfig>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d101      	bne.n	80049f6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	e01b      	b.n	8004a2e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a04:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a14:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0201 	orr.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 fb60 	bl	80050ec <UART_CheckIdleState>
 8004a2c:	4603      	mov	r3, r0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
	...

08004a38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a3c:	b08a      	sub	sp, #40	; 0x28
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a42:	2300      	movs	r3, #0
 8004a44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	431a      	orrs	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	431a      	orrs	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	69db      	ldr	r3, [r3, #28]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	4ba4      	ldr	r3, [pc, #656]	; (8004cf8 <UART_SetConfig+0x2c0>)
 8004a68:	4013      	ands	r3, r2
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	6812      	ldr	r2, [r2, #0]
 8004a6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a70:	430b      	orrs	r3, r1
 8004a72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	68da      	ldr	r2, [r3, #12]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a99      	ldr	r2, [pc, #612]	; (8004cfc <UART_SetConfig+0x2c4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d004      	beq.n	8004aa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6a1b      	ldr	r3, [r3, #32]
 8004a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a90      	ldr	r2, [pc, #576]	; (8004d00 <UART_SetConfig+0x2c8>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d126      	bne.n	8004b10 <UART_SetConfig+0xd8>
 8004ac2:	4b90      	ldr	r3, [pc, #576]	; (8004d04 <UART_SetConfig+0x2cc>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac8:	f003 0303 	and.w	r3, r3, #3
 8004acc:	2b03      	cmp	r3, #3
 8004ace:	d81b      	bhi.n	8004b08 <UART_SetConfig+0xd0>
 8004ad0:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <UART_SetConfig+0xa0>)
 8004ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad6:	bf00      	nop
 8004ad8:	08004ae9 	.word	0x08004ae9
 8004adc:	08004af9 	.word	0x08004af9
 8004ae0:	08004af1 	.word	0x08004af1
 8004ae4:	08004b01 	.word	0x08004b01
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aee:	e116      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004af0:	2302      	movs	r3, #2
 8004af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004af6:	e112      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004af8:	2304      	movs	r3, #4
 8004afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004afe:	e10e      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004b00:	2308      	movs	r3, #8
 8004b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b06:	e10a      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004b08:	2310      	movs	r3, #16
 8004b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b0e:	e106      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a7c      	ldr	r2, [pc, #496]	; (8004d08 <UART_SetConfig+0x2d0>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d138      	bne.n	8004b8c <UART_SetConfig+0x154>
 8004b1a:	4b7a      	ldr	r3, [pc, #488]	; (8004d04 <UART_SetConfig+0x2cc>)
 8004b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b20:	f003 030c 	and.w	r3, r3, #12
 8004b24:	2b0c      	cmp	r3, #12
 8004b26:	d82d      	bhi.n	8004b84 <UART_SetConfig+0x14c>
 8004b28:	a201      	add	r2, pc, #4	; (adr r2, 8004b30 <UART_SetConfig+0xf8>)
 8004b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2e:	bf00      	nop
 8004b30:	08004b65 	.word	0x08004b65
 8004b34:	08004b85 	.word	0x08004b85
 8004b38:	08004b85 	.word	0x08004b85
 8004b3c:	08004b85 	.word	0x08004b85
 8004b40:	08004b75 	.word	0x08004b75
 8004b44:	08004b85 	.word	0x08004b85
 8004b48:	08004b85 	.word	0x08004b85
 8004b4c:	08004b85 	.word	0x08004b85
 8004b50:	08004b6d 	.word	0x08004b6d
 8004b54:	08004b85 	.word	0x08004b85
 8004b58:	08004b85 	.word	0x08004b85
 8004b5c:	08004b85 	.word	0x08004b85
 8004b60:	08004b7d 	.word	0x08004b7d
 8004b64:	2300      	movs	r3, #0
 8004b66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b6a:	e0d8      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b72:	e0d4      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004b74:	2304      	movs	r3, #4
 8004b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b7a:	e0d0      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004b7c:	2308      	movs	r3, #8
 8004b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b82:	e0cc      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004b84:	2310      	movs	r3, #16
 8004b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8a:	e0c8      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a5e      	ldr	r2, [pc, #376]	; (8004d0c <UART_SetConfig+0x2d4>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d125      	bne.n	8004be2 <UART_SetConfig+0x1aa>
 8004b96:	4b5b      	ldr	r3, [pc, #364]	; (8004d04 <UART_SetConfig+0x2cc>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ba0:	2b30      	cmp	r3, #48	; 0x30
 8004ba2:	d016      	beq.n	8004bd2 <UART_SetConfig+0x19a>
 8004ba4:	2b30      	cmp	r3, #48	; 0x30
 8004ba6:	d818      	bhi.n	8004bda <UART_SetConfig+0x1a2>
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d00a      	beq.n	8004bc2 <UART_SetConfig+0x18a>
 8004bac:	2b20      	cmp	r3, #32
 8004bae:	d814      	bhi.n	8004bda <UART_SetConfig+0x1a2>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <UART_SetConfig+0x182>
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d008      	beq.n	8004bca <UART_SetConfig+0x192>
 8004bb8:	e00f      	b.n	8004bda <UART_SetConfig+0x1a2>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc0:	e0ad      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc8:	e0a9      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004bca:	2304      	movs	r3, #4
 8004bcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd0:	e0a5      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd8:	e0a1      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004bda:	2310      	movs	r3, #16
 8004bdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be0:	e09d      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a4a      	ldr	r2, [pc, #296]	; (8004d10 <UART_SetConfig+0x2d8>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d125      	bne.n	8004c38 <UART_SetConfig+0x200>
 8004bec:	4b45      	ldr	r3, [pc, #276]	; (8004d04 <UART_SetConfig+0x2cc>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bf6:	2bc0      	cmp	r3, #192	; 0xc0
 8004bf8:	d016      	beq.n	8004c28 <UART_SetConfig+0x1f0>
 8004bfa:	2bc0      	cmp	r3, #192	; 0xc0
 8004bfc:	d818      	bhi.n	8004c30 <UART_SetConfig+0x1f8>
 8004bfe:	2b80      	cmp	r3, #128	; 0x80
 8004c00:	d00a      	beq.n	8004c18 <UART_SetConfig+0x1e0>
 8004c02:	2b80      	cmp	r3, #128	; 0x80
 8004c04:	d814      	bhi.n	8004c30 <UART_SetConfig+0x1f8>
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <UART_SetConfig+0x1d8>
 8004c0a:	2b40      	cmp	r3, #64	; 0x40
 8004c0c:	d008      	beq.n	8004c20 <UART_SetConfig+0x1e8>
 8004c0e:	e00f      	b.n	8004c30 <UART_SetConfig+0x1f8>
 8004c10:	2300      	movs	r3, #0
 8004c12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c16:	e082      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c18:	2302      	movs	r3, #2
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1e:	e07e      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c20:	2304      	movs	r3, #4
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c26:	e07a      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c28:	2308      	movs	r3, #8
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2e:	e076      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c30:	2310      	movs	r3, #16
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c36:	e072      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a35      	ldr	r2, [pc, #212]	; (8004d14 <UART_SetConfig+0x2dc>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d12a      	bne.n	8004c98 <UART_SetConfig+0x260>
 8004c42:	4b30      	ldr	r3, [pc, #192]	; (8004d04 <UART_SetConfig+0x2cc>)
 8004c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c50:	d01a      	beq.n	8004c88 <UART_SetConfig+0x250>
 8004c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c56:	d81b      	bhi.n	8004c90 <UART_SetConfig+0x258>
 8004c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c5c:	d00c      	beq.n	8004c78 <UART_SetConfig+0x240>
 8004c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c62:	d815      	bhi.n	8004c90 <UART_SetConfig+0x258>
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d003      	beq.n	8004c70 <UART_SetConfig+0x238>
 8004c68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6c:	d008      	beq.n	8004c80 <UART_SetConfig+0x248>
 8004c6e:	e00f      	b.n	8004c90 <UART_SetConfig+0x258>
 8004c70:	2300      	movs	r3, #0
 8004c72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c76:	e052      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c78:	2302      	movs	r3, #2
 8004c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7e:	e04e      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c80:	2304      	movs	r3, #4
 8004c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c86:	e04a      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c88:	2308      	movs	r3, #8
 8004c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8e:	e046      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c90:	2310      	movs	r3, #16
 8004c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c96:	e042      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a17      	ldr	r2, [pc, #92]	; (8004cfc <UART_SetConfig+0x2c4>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d13a      	bne.n	8004d18 <UART_SetConfig+0x2e0>
 8004ca2:	4b18      	ldr	r3, [pc, #96]	; (8004d04 <UART_SetConfig+0x2cc>)
 8004ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ca8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cb0:	d01a      	beq.n	8004ce8 <UART_SetConfig+0x2b0>
 8004cb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004cb6:	d81b      	bhi.n	8004cf0 <UART_SetConfig+0x2b8>
 8004cb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cbc:	d00c      	beq.n	8004cd8 <UART_SetConfig+0x2a0>
 8004cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cc2:	d815      	bhi.n	8004cf0 <UART_SetConfig+0x2b8>
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <UART_SetConfig+0x298>
 8004cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ccc:	d008      	beq.n	8004ce0 <UART_SetConfig+0x2a8>
 8004cce:	e00f      	b.n	8004cf0 <UART_SetConfig+0x2b8>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cd6:	e022      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004cd8:	2302      	movs	r3, #2
 8004cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cde:	e01e      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004ce0:	2304      	movs	r3, #4
 8004ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ce6:	e01a      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004ce8:	2308      	movs	r3, #8
 8004cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cee:	e016      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004cf0:	2310      	movs	r3, #16
 8004cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cf6:	e012      	b.n	8004d1e <UART_SetConfig+0x2e6>
 8004cf8:	efff69f3 	.word	0xefff69f3
 8004cfc:	40008000 	.word	0x40008000
 8004d00:	40013800 	.word	0x40013800
 8004d04:	40021000 	.word	0x40021000
 8004d08:	40004400 	.word	0x40004400
 8004d0c:	40004800 	.word	0x40004800
 8004d10:	40004c00 	.word	0x40004c00
 8004d14:	40005000 	.word	0x40005000
 8004d18:	2310      	movs	r3, #16
 8004d1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a9f      	ldr	r2, [pc, #636]	; (8004fa0 <UART_SetConfig+0x568>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d17a      	bne.n	8004e1e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d2c:	2b08      	cmp	r3, #8
 8004d2e:	d824      	bhi.n	8004d7a <UART_SetConfig+0x342>
 8004d30:	a201      	add	r2, pc, #4	; (adr r2, 8004d38 <UART_SetConfig+0x300>)
 8004d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d36:	bf00      	nop
 8004d38:	08004d5d 	.word	0x08004d5d
 8004d3c:	08004d7b 	.word	0x08004d7b
 8004d40:	08004d65 	.word	0x08004d65
 8004d44:	08004d7b 	.word	0x08004d7b
 8004d48:	08004d6b 	.word	0x08004d6b
 8004d4c:	08004d7b 	.word	0x08004d7b
 8004d50:	08004d7b 	.word	0x08004d7b
 8004d54:	08004d7b 	.word	0x08004d7b
 8004d58:	08004d73 	.word	0x08004d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d5c:	f7ff f822 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8004d60:	61f8      	str	r0, [r7, #28]
        break;
 8004d62:	e010      	b.n	8004d86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d64:	4b8f      	ldr	r3, [pc, #572]	; (8004fa4 <UART_SetConfig+0x56c>)
 8004d66:	61fb      	str	r3, [r7, #28]
        break;
 8004d68:	e00d      	b.n	8004d86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d6a:	f7fe ff83 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8004d6e:	61f8      	str	r0, [r7, #28]
        break;
 8004d70:	e009      	b.n	8004d86 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d76:	61fb      	str	r3, [r7, #28]
        break;
 8004d78:	e005      	b.n	8004d86 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d84:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d86:	69fb      	ldr	r3, [r7, #28]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 80fb 	beq.w	8004f84 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	005b      	lsls	r3, r3, #1
 8004d96:	4413      	add	r3, r2
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d305      	bcc.n	8004daa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004da4:	69fa      	ldr	r2, [r7, #28]
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d903      	bls.n	8004db2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004db0:	e0e8      	b.n	8004f84 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	2200      	movs	r2, #0
 8004db6:	461c      	mov	r4, r3
 8004db8:	4615      	mov	r5, r2
 8004dba:	f04f 0200 	mov.w	r2, #0
 8004dbe:	f04f 0300 	mov.w	r3, #0
 8004dc2:	022b      	lsls	r3, r5, #8
 8004dc4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004dc8:	0222      	lsls	r2, r4, #8
 8004dca:	68f9      	ldr	r1, [r7, #12]
 8004dcc:	6849      	ldr	r1, [r1, #4]
 8004dce:	0849      	lsrs	r1, r1, #1
 8004dd0:	2000      	movs	r0, #0
 8004dd2:	4688      	mov	r8, r1
 8004dd4:	4681      	mov	r9, r0
 8004dd6:	eb12 0a08 	adds.w	sl, r2, r8
 8004dda:	eb43 0b09 	adc.w	fp, r3, r9
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	603b      	str	r3, [r7, #0]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dec:	4650      	mov	r0, sl
 8004dee:	4659      	mov	r1, fp
 8004df0:	f7fb f9ea 	bl	80001c8 <__aeabi_uldivmod>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	4613      	mov	r3, r2
 8004dfa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e02:	d308      	bcc.n	8004e16 <UART_SetConfig+0x3de>
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e0a:	d204      	bcs.n	8004e16 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	60da      	str	r2, [r3, #12]
 8004e14:	e0b6      	b.n	8004f84 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004e16:	2301      	movs	r3, #1
 8004e18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e1c:	e0b2      	b.n	8004f84 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e26:	d15e      	bne.n	8004ee6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004e28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d828      	bhi.n	8004e82 <UART_SetConfig+0x44a>
 8004e30:	a201      	add	r2, pc, #4	; (adr r2, 8004e38 <UART_SetConfig+0x400>)
 8004e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e36:	bf00      	nop
 8004e38:	08004e5d 	.word	0x08004e5d
 8004e3c:	08004e65 	.word	0x08004e65
 8004e40:	08004e6d 	.word	0x08004e6d
 8004e44:	08004e83 	.word	0x08004e83
 8004e48:	08004e73 	.word	0x08004e73
 8004e4c:	08004e83 	.word	0x08004e83
 8004e50:	08004e83 	.word	0x08004e83
 8004e54:	08004e83 	.word	0x08004e83
 8004e58:	08004e7b 	.word	0x08004e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e5c:	f7fe ffa2 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8004e60:	61f8      	str	r0, [r7, #28]
        break;
 8004e62:	e014      	b.n	8004e8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e64:	f7fe ffb4 	bl	8003dd0 <HAL_RCC_GetPCLK2Freq>
 8004e68:	61f8      	str	r0, [r7, #28]
        break;
 8004e6a:	e010      	b.n	8004e8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e6c:	4b4d      	ldr	r3, [pc, #308]	; (8004fa4 <UART_SetConfig+0x56c>)
 8004e6e:	61fb      	str	r3, [r7, #28]
        break;
 8004e70:	e00d      	b.n	8004e8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e72:	f7fe feff 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8004e76:	61f8      	str	r0, [r7, #28]
        break;
 8004e78:	e009      	b.n	8004e8e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e7e:	61fb      	str	r3, [r7, #28]
        break;
 8004e80:	e005      	b.n	8004e8e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d077      	beq.n	8004f84 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	005a      	lsls	r2, r3, #1
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	085b      	lsrs	r3, r3, #1
 8004e9e:	441a      	add	r2, r3
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	2b0f      	cmp	r3, #15
 8004eae:	d916      	bls.n	8004ede <UART_SetConfig+0x4a6>
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb6:	d212      	bcs.n	8004ede <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	f023 030f 	bic.w	r3, r3, #15
 8004ec0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	085b      	lsrs	r3, r3, #1
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	8afb      	ldrh	r3, [r7, #22]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	8afa      	ldrh	r2, [r7, #22]
 8004eda:	60da      	str	r2, [r3, #12]
 8004edc:	e052      	b.n	8004f84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004ee4:	e04e      	b.n	8004f84 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ee6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d827      	bhi.n	8004f3e <UART_SetConfig+0x506>
 8004eee:	a201      	add	r2, pc, #4	; (adr r2, 8004ef4 <UART_SetConfig+0x4bc>)
 8004ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef4:	08004f19 	.word	0x08004f19
 8004ef8:	08004f21 	.word	0x08004f21
 8004efc:	08004f29 	.word	0x08004f29
 8004f00:	08004f3f 	.word	0x08004f3f
 8004f04:	08004f2f 	.word	0x08004f2f
 8004f08:	08004f3f 	.word	0x08004f3f
 8004f0c:	08004f3f 	.word	0x08004f3f
 8004f10:	08004f3f 	.word	0x08004f3f
 8004f14:	08004f37 	.word	0x08004f37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f18:	f7fe ff44 	bl	8003da4 <HAL_RCC_GetPCLK1Freq>
 8004f1c:	61f8      	str	r0, [r7, #28]
        break;
 8004f1e:	e014      	b.n	8004f4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f20:	f7fe ff56 	bl	8003dd0 <HAL_RCC_GetPCLK2Freq>
 8004f24:	61f8      	str	r0, [r7, #28]
        break;
 8004f26:	e010      	b.n	8004f4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f28:	4b1e      	ldr	r3, [pc, #120]	; (8004fa4 <UART_SetConfig+0x56c>)
 8004f2a:	61fb      	str	r3, [r7, #28]
        break;
 8004f2c:	e00d      	b.n	8004f4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f2e:	f7fe fea1 	bl	8003c74 <HAL_RCC_GetSysClockFreq>
 8004f32:	61f8      	str	r0, [r7, #28]
        break;
 8004f34:	e009      	b.n	8004f4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f3a:	61fb      	str	r3, [r7, #28]
        break;
 8004f3c:	e005      	b.n	8004f4a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f48:	bf00      	nop
    }

    if (pclk != 0U)
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d019      	beq.n	8004f84 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	085a      	lsrs	r2, r3, #1
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	441a      	add	r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f62:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b0f      	cmp	r3, #15
 8004f68:	d909      	bls.n	8004f7e <UART_SetConfig+0x546>
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f70:	d205      	bcs.n	8004f7e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60da      	str	r2, [r3, #12]
 8004f7c:	e002      	b.n	8004f84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2200      	movs	r2, #0
 8004f88:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f90:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3728      	adds	r7, #40	; 0x28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f9e:	bf00      	nop
 8004fa0:	40008000 	.word	0x40008000
 8004fa4:	00f42400 	.word	0x00f42400

08004fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501a:	f003 0304 	and.w	r3, r3, #4
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	430a      	orrs	r2, r1
 8005036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	f003 0310 	and.w	r3, r3, #16
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505e:	f003 0320 	and.w	r3, r3, #32
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00a      	beq.n	800507c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01a      	beq.n	80050be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	430a      	orrs	r2, r1
 800509c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050a6:	d10a      	bne.n	80050be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	430a      	orrs	r2, r1
 80050de:	605a      	str	r2, [r3, #4]
  }
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b098      	sub	sp, #96	; 0x60
 80050f0:	af02      	add	r7, sp, #8
 80050f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050fc:	f7fc f8aa 	bl	8001254 <HAL_GetTick>
 8005100:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0308 	and.w	r3, r3, #8
 800510c:	2b08      	cmp	r3, #8
 800510e:	d12e      	bne.n	800516e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005118:	2200      	movs	r2, #0
 800511a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f88c 	bl	800523c <UART_WaitOnFlagUntilTimeout>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d021      	beq.n	800516e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005132:	e853 3f00 	ldrex	r3, [r3]
 8005136:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800513e:	653b      	str	r3, [r7, #80]	; 0x50
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005148:	647b      	str	r3, [r7, #68]	; 0x44
 800514a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800514e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005150:	e841 2300 	strex	r3, r2, [r1]
 8005154:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e6      	bne.n	800512a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2220      	movs	r2, #32
 8005160:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e062      	b.n	8005234 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f003 0304 	and.w	r3, r3, #4
 8005178:	2b04      	cmp	r3, #4
 800517a:	d149      	bne.n	8005210 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800517c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005184:	2200      	movs	r2, #0
 8005186:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f856 	bl	800523c <UART_WaitOnFlagUntilTimeout>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d03c      	beq.n	8005210 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519e:	e853 3f00 	ldrex	r3, [r3]
 80051a2:	623b      	str	r3, [r7, #32]
   return(result);
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	461a      	mov	r2, r3
 80051b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b4:	633b      	str	r3, [r7, #48]	; 0x30
 80051b6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051bc:	e841 2300 	strex	r3, r2, [r1]
 80051c0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1e6      	bne.n	8005196 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3308      	adds	r3, #8
 80051ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0301 	bic.w	r3, r3, #1
 80051de:	64bb      	str	r3, [r7, #72]	; 0x48
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3308      	adds	r3, #8
 80051e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051e8:	61fa      	str	r2, [r7, #28]
 80051ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	69b9      	ldr	r1, [r7, #24]
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	617b      	str	r3, [r7, #20]
   return(result);
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e5      	bne.n	80051c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2220      	movs	r2, #32
 8005200:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e011      	b.n	8005234 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2220      	movs	r2, #32
 800521a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2200      	movs	r2, #0
 8005228:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3758      	adds	r7, #88	; 0x58
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	603b      	str	r3, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800524c:	e049      	b.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005254:	d045      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005256:	f7fb fffd 	bl	8001254 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	429a      	cmp	r2, r3
 8005264:	d302      	bcc.n	800526c <UART_WaitOnFlagUntilTimeout+0x30>
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e048      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f003 0304 	and.w	r3, r3, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	d031      	beq.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	69db      	ldr	r3, [r3, #28]
 8005284:	f003 0308 	and.w	r3, r3, #8
 8005288:	2b08      	cmp	r3, #8
 800528a:	d110      	bne.n	80052ae <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2208      	movs	r2, #8
 8005292:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f838 	bl	800530a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2208      	movs	r2, #8
 800529e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e029      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052bc:	d111      	bne.n	80052e2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f000 f81e 	bl	800530a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e00f      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	69da      	ldr	r2, [r3, #28]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4013      	ands	r3, r2
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	bf0c      	ite	eq
 80052f2:	2301      	moveq	r3, #1
 80052f4:	2300      	movne	r3, #0
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	461a      	mov	r2, r3
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d0a6      	beq.n	800524e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005300:	2300      	movs	r3, #0
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800530a:	b480      	push	{r7}
 800530c:	b095      	sub	sp, #84	; 0x54
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	461a      	mov	r2, r3
 800532e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005330:	643b      	str	r3, [r7, #64]	; 0x40
 8005332:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005336:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800533e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e6      	bne.n	8005312 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3308      	adds	r3, #8
 800534a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	6a3b      	ldr	r3, [r7, #32]
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	61fb      	str	r3, [r7, #28]
   return(result);
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	f023 0301 	bic.w	r3, r3, #1
 800535a:	64bb      	str	r3, [r7, #72]	; 0x48
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3308      	adds	r3, #8
 8005362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005364:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800536a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800536c:	e841 2300 	strex	r3, r2, [r1]
 8005370:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e5      	bne.n	8005344 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800537c:	2b01      	cmp	r3, #1
 800537e:	d118      	bne.n	80053b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	60bb      	str	r3, [r7, #8]
   return(result);
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f023 0310 	bic.w	r3, r3, #16
 8005394:	647b      	str	r3, [r7, #68]	; 0x44
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	461a      	mov	r2, r3
 800539c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539e:	61bb      	str	r3, [r7, #24]
 80053a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a2:	6979      	ldr	r1, [r7, #20]
 80053a4:	69ba      	ldr	r2, [r7, #24]
 80053a6:	e841 2300 	strex	r3, r2, [r1]
 80053aa:	613b      	str	r3, [r7, #16]
   return(result);
 80053ac:	693b      	ldr	r3, [r7, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1e6      	bne.n	8005380 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80053c6:	bf00      	nop
 80053c8:	3754      	adds	r7, #84	; 0x54
 80053ca:	46bd      	mov	sp, r7
 80053cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d0:	4770      	bx	lr

080053d2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80053d2:	b084      	sub	sp, #16
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	f107 001c 	add.w	r0, r7, #28
 80053e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f001 fa1d 	bl	8006830 <USB_CoreReset>
 80053f6:	4603      	mov	r3, r0
 80053f8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80053fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d106      	bne.n	800540e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	639a      	str	r2, [r3, #56]	; 0x38
 800540c:	e005      	b.n	800541a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005412:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800541a:	7bfb      	ldrb	r3, [r7, #15]
}
 800541c:	4618      	mov	r0, r3
 800541e:	3710      	adds	r7, #16
 8005420:	46bd      	mov	sp, r7
 8005422:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005426:	b004      	add	sp, #16
 8005428:	4770      	bx	lr
	...

0800542c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	4613      	mov	r3, r2
 8005438:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	2b02      	cmp	r3, #2
 800543e:	d165      	bne.n	800550c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4a3e      	ldr	r2, [pc, #248]	; (800553c <USB_SetTurnaroundTime+0x110>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d906      	bls.n	8005456 <USB_SetTurnaroundTime+0x2a>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4a3d      	ldr	r2, [pc, #244]	; (8005540 <USB_SetTurnaroundTime+0x114>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d202      	bcs.n	8005456 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005450:	230f      	movs	r3, #15
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e05c      	b.n	8005510 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4a39      	ldr	r2, [pc, #228]	; (8005540 <USB_SetTurnaroundTime+0x114>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d306      	bcc.n	800546c <USB_SetTurnaroundTime+0x40>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4a38      	ldr	r2, [pc, #224]	; (8005544 <USB_SetTurnaroundTime+0x118>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d202      	bcs.n	800546c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005466:	230e      	movs	r3, #14
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	e051      	b.n	8005510 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4a35      	ldr	r2, [pc, #212]	; (8005544 <USB_SetTurnaroundTime+0x118>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d306      	bcc.n	8005482 <USB_SetTurnaroundTime+0x56>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4a34      	ldr	r2, [pc, #208]	; (8005548 <USB_SetTurnaroundTime+0x11c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d202      	bcs.n	8005482 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800547c:	230d      	movs	r3, #13
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e046      	b.n	8005510 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4a30      	ldr	r2, [pc, #192]	; (8005548 <USB_SetTurnaroundTime+0x11c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d306      	bcc.n	8005498 <USB_SetTurnaroundTime+0x6c>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4a2f      	ldr	r2, [pc, #188]	; (800554c <USB_SetTurnaroundTime+0x120>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d802      	bhi.n	8005498 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005492:	230c      	movs	r3, #12
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	e03b      	b.n	8005510 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4a2c      	ldr	r2, [pc, #176]	; (800554c <USB_SetTurnaroundTime+0x120>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d906      	bls.n	80054ae <USB_SetTurnaroundTime+0x82>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4a2b      	ldr	r2, [pc, #172]	; (8005550 <USB_SetTurnaroundTime+0x124>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d802      	bhi.n	80054ae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80054a8:	230b      	movs	r3, #11
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	e030      	b.n	8005510 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4a27      	ldr	r2, [pc, #156]	; (8005550 <USB_SetTurnaroundTime+0x124>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d906      	bls.n	80054c4 <USB_SetTurnaroundTime+0x98>
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	4a26      	ldr	r2, [pc, #152]	; (8005554 <USB_SetTurnaroundTime+0x128>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d802      	bhi.n	80054c4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80054be:	230a      	movs	r3, #10
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	e025      	b.n	8005510 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4a23      	ldr	r2, [pc, #140]	; (8005554 <USB_SetTurnaroundTime+0x128>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d906      	bls.n	80054da <USB_SetTurnaroundTime+0xae>
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	4a22      	ldr	r2, [pc, #136]	; (8005558 <USB_SetTurnaroundTime+0x12c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d202      	bcs.n	80054da <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054d4:	2309      	movs	r3, #9
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	e01a      	b.n	8005510 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	4a1e      	ldr	r2, [pc, #120]	; (8005558 <USB_SetTurnaroundTime+0x12c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d306      	bcc.n	80054f0 <USB_SetTurnaroundTime+0xc4>
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	4a1d      	ldr	r2, [pc, #116]	; (800555c <USB_SetTurnaroundTime+0x130>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d802      	bhi.n	80054f0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054ea:	2308      	movs	r3, #8
 80054ec:	617b      	str	r3, [r7, #20]
 80054ee:	e00f      	b.n	8005510 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4a1a      	ldr	r2, [pc, #104]	; (800555c <USB_SetTurnaroundTime+0x130>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d906      	bls.n	8005506 <USB_SetTurnaroundTime+0xda>
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4a19      	ldr	r2, [pc, #100]	; (8005560 <USB_SetTurnaroundTime+0x134>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d202      	bcs.n	8005506 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005500:	2307      	movs	r3, #7
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	e004      	b.n	8005510 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005506:	2306      	movs	r3, #6
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	e001      	b.n	8005510 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800550c:	2309      	movs	r3, #9
 800550e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	029b      	lsls	r3, r3, #10
 8005524:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005528:	431a      	orrs	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	371c      	adds	r7, #28
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	00d8acbf 	.word	0x00d8acbf
 8005540:	00e4e1c0 	.word	0x00e4e1c0
 8005544:	00f42400 	.word	0x00f42400
 8005548:	01067380 	.word	0x01067380
 800554c:	011a499f 	.word	0x011a499f
 8005550:	01312cff 	.word	0x01312cff
 8005554:	014ca43f 	.word	0x014ca43f
 8005558:	016e3600 	.word	0x016e3600
 800555c:	01a6ab1f 	.word	0x01a6ab1f
 8005560:	01e84800 	.word	0x01e84800

08005564 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	689b      	ldr	r3, [r3, #8]
 8005570:	f043 0201 	orr.w	r2, r3, #1
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	370c      	adds	r7, #12
 800557e:	46bd      	mov	sp, r7
 8005580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005584:	4770      	bx	lr

08005586 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005586:	b480      	push	{r7}
 8005588:	b083      	sub	sp, #12
 800558a:	af00      	add	r7, sp, #0
 800558c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f023 0201 	bic.w	r2, r3, #1
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	370c      	adds	r7, #12
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80055c4:	78fb      	ldrb	r3, [r7, #3]
 80055c6:	2b01      	cmp	r3, #1
 80055c8:	d115      	bne.n	80055f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055d6:	2001      	movs	r0, #1
 80055d8:	f7fb fe48 	bl	800126c <HAL_Delay>
      ms++;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	3301      	adds	r3, #1
 80055e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f001 f8ab 	bl	800673e <USB_GetMode>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d01e      	beq.n	800562c <USB_SetCurrentMode+0x84>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2b31      	cmp	r3, #49	; 0x31
 80055f2:	d9f0      	bls.n	80055d6 <USB_SetCurrentMode+0x2e>
 80055f4:	e01a      	b.n	800562c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d115      	bne.n	8005628 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005608:	2001      	movs	r0, #1
 800560a:	f7fb fe2f 	bl	800126c <HAL_Delay>
      ms++;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3301      	adds	r3, #1
 8005612:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f001 f892 	bl	800673e <USB_GetMode>
 800561a:	4603      	mov	r3, r0
 800561c:	2b00      	cmp	r3, #0
 800561e:	d005      	beq.n	800562c <USB_SetCurrentMode+0x84>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2b31      	cmp	r3, #49	; 0x31
 8005624:	d9f0      	bls.n	8005608 <USB_SetCurrentMode+0x60>
 8005626:	e001      	b.n	800562c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e005      	b.n	8005638 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2b32      	cmp	r3, #50	; 0x32
 8005630:	d101      	bne.n	8005636 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e000      	b.n	8005638 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005640:	b084      	sub	sp, #16
 8005642:	b580      	push	{r7, lr}
 8005644:	b086      	sub	sp, #24
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
 800564a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800564e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800565a:	2300      	movs	r3, #0
 800565c:	613b      	str	r3, [r7, #16]
 800565e:	e009      	b.n	8005674 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005660:	687a      	ldr	r2, [r7, #4]
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	3340      	adds	r3, #64	; 0x40
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	2200      	movs	r2, #0
 800566c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	3301      	adds	r3, #1
 8005672:	613b      	str	r3, [r7, #16]
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	2b0e      	cmp	r3, #14
 8005678:	d9f2      	bls.n	8005660 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800567a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800567c:	2b00      	cmp	r3, #0
 800567e:	d11c      	bne.n	80056ba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800568e:	f043 0302 	orr.w	r3, r3, #2
 8005692:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005698:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	e005      	b.n	80056c6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056cc:	461a      	mov	r2, r3
 80056ce:	2300      	movs	r3, #0
 80056d0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80056d2:	2103      	movs	r1, #3
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f959 	bl	800598c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056da:	2110      	movs	r1, #16
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f8f1 	bl	80058c4 <USB_FlushTxFifo>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f91d 	bl	800592c <USB_FlushRxFifo>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005702:	461a      	mov	r2, r3
 8005704:	2300      	movs	r3, #0
 8005706:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570e:	461a      	mov	r2, r3
 8005710:	2300      	movs	r3, #0
 8005712:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571a:	461a      	mov	r2, r3
 800571c:	2300      	movs	r3, #0
 800571e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005720:	2300      	movs	r3, #0
 8005722:	613b      	str	r3, [r7, #16]
 8005724:	e043      	b.n	80057ae <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800573c:	d118      	bne.n	8005770 <USB_DevInit+0x130>
    {
      if (i == 0U)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d10a      	bne.n	800575a <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005750:	461a      	mov	r2, r3
 8005752:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005756:	6013      	str	r3, [r2, #0]
 8005758:	e013      	b.n	8005782 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	015a      	lsls	r2, r3, #5
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	4413      	add	r3, r2
 8005762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005766:	461a      	mov	r2, r3
 8005768:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	e008      	b.n	8005782 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4413      	add	r3, r2
 8005778:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800577c:	461a      	mov	r2, r3
 800577e:	2300      	movs	r3, #0
 8005780:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578e:	461a      	mov	r2, r3
 8005790:	2300      	movs	r3, #0
 8005792:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a0:	461a      	mov	r2, r3
 80057a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	3301      	adds	r3, #1
 80057ac:	613b      	str	r3, [r7, #16]
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	429a      	cmp	r2, r3
 80057b4:	d3b7      	bcc.n	8005726 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057b6:	2300      	movs	r3, #0
 80057b8:	613b      	str	r3, [r7, #16]
 80057ba:	e043      	b.n	8005844 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057d2:	d118      	bne.n	8005806 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d10a      	bne.n	80057f0 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057e6:	461a      	mov	r2, r3
 80057e8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	e013      	b.n	8005818 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fc:	461a      	mov	r2, r3
 80057fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	e008      	b.n	8005818 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005812:	461a      	mov	r2, r3
 8005814:	2300      	movs	r3, #0
 8005816:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005824:	461a      	mov	r2, r3
 8005826:	2300      	movs	r3, #0
 8005828:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	015a      	lsls	r2, r3, #5
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	4413      	add	r3, r2
 8005832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005836:	461a      	mov	r2, r3
 8005838:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800583c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	3301      	adds	r3, #1
 8005842:	613b      	str	r3, [r7, #16]
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	429a      	cmp	r2, r3
 800584a:	d3b7      	bcc.n	80057bc <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800585a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800585e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800586c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	f043 0210 	orr.w	r2, r3, #16
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	4b10      	ldr	r3, [pc, #64]	; (80058c0 <USB_DevInit+0x280>)
 8005880:	4313      	orrs	r3, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005888:	2b00      	cmp	r3, #0
 800588a:	d005      	beq.n	8005898 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	f043 0208 	orr.w	r2, r3, #8
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800589a:	2b01      	cmp	r3, #1
 800589c:	d107      	bne.n	80058ae <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058a6:	f043 0304 	orr.w	r3, r3, #4
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80058ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058ba:	b004      	add	sp, #16
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	803c3800 	.word	0x803c3800

080058c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80058ce:	2300      	movs	r3, #0
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	3301      	adds	r3, #1
 80058d6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4a13      	ldr	r2, [pc, #76]	; (8005928 <USB_FlushTxFifo+0x64>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d901      	bls.n	80058e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e01b      	b.n	800591c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	691b      	ldr	r3, [r3, #16]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	daf2      	bge.n	80058d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058ec:	2300      	movs	r3, #0
 80058ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	019b      	lsls	r3, r3, #6
 80058f4:	f043 0220 	orr.w	r2, r3, #32
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3301      	adds	r3, #1
 8005900:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4a08      	ldr	r2, [pc, #32]	; (8005928 <USB_FlushTxFifo+0x64>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d901      	bls.n	800590e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e006      	b.n	800591c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b20      	cmp	r3, #32
 8005918:	d0f0      	beq.n	80058fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	00030d40 	.word	0x00030d40

0800592c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005934:	2300      	movs	r3, #0
 8005936:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	3301      	adds	r3, #1
 800593c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	4a11      	ldr	r2, [pc, #68]	; (8005988 <USB_FlushRxFifo+0x5c>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d901      	bls.n	800594a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e018      	b.n	800597c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	daf2      	bge.n	8005938 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2210      	movs	r2, #16
 800595a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	3301      	adds	r3, #1
 8005960:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4a08      	ldr	r2, [pc, #32]	; (8005988 <USB_FlushRxFifo+0x5c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d901      	bls.n	800596e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e006      	b.n	800597c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	f003 0310 	and.w	r3, r3, #16
 8005976:	2b10      	cmp	r3, #16
 8005978:	d0f0      	beq.n	800595c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr
 8005988:	00030d40 	.word	0x00030d40

0800598c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	460b      	mov	r3, r1
 8005996:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	78fb      	ldrb	r3, [r7, #3]
 80059a6:	68f9      	ldr	r1, [r7, #12]
 80059a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059ac:	4313      	orrs	r3, r2
 80059ae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3714      	adds	r7, #20
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80059be:	b480      	push	{r7}
 80059c0:	b087      	sub	sp, #28
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0306 	and.w	r3, r3, #6
 80059d6:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d002      	beq.n	80059e4 <USB_GetDevSpeed+0x26>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2b06      	cmp	r3, #6
 80059e2:	d102      	bne.n	80059ea <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059e4:	2302      	movs	r3, #2
 80059e6:	75fb      	strb	r3, [r7, #23]
 80059e8:	e001      	b.n	80059ee <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80059ea:	230f      	movs	r3, #15
 80059ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	371c      	adds	r7, #28
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	785b      	ldrb	r3, [r3, #1]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d13a      	bne.n	8005a8e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	f003 030f 	and.w	r3, r3, #15
 8005a28:	2101      	movs	r1, #1
 8005a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	68f9      	ldr	r1, [r7, #12]
 8005a32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a36:	4313      	orrs	r3, r2
 8005a38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	015a      	lsls	r2, r3, #5
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	4413      	add	r3, r2
 8005a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d155      	bne.n	8005afc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	791b      	ldrb	r3, [r3, #4]
 8005a6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	059b      	lsls	r3, r3, #22
 8005a72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a74:	4313      	orrs	r3, r2
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	0151      	lsls	r1, r2, #5
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a8a:	6013      	str	r3, [r2, #0]
 8005a8c:	e036      	b.n	8005afc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a94:	69da      	ldr	r2, [r3, #28]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	2101      	movs	r1, #1
 8005aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8005aa4:	041b      	lsls	r3, r3, #16
 8005aa6:	68f9      	ldr	r1, [r7, #12]
 8005aa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aac:	4313      	orrs	r3, r2
 8005aae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d11a      	bne.n	8005afc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	015a      	lsls	r2, r3, #5
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	4413      	add	r3, r2
 8005ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	791b      	ldrb	r3, [r3, #4]
 8005ae0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ae2:	430b      	orrs	r3, r1
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	0151      	lsls	r1, r2, #5
 8005aea:	68fa      	ldr	r2, [r7, #12]
 8005aec:	440a      	add	r2, r1
 8005aee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005af2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005af6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005afa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005afc:	2300      	movs	r3, #0
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr
	...

08005b0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	785b      	ldrb	r3, [r3, #1]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d161      	bne.n	8005bec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b3e:	d11f      	bne.n	8005b80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	0151      	lsls	r1, r2, #5
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	440a      	add	r2, r1
 8005b56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b5a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	0151      	lsls	r1, r2, #5
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	440a      	add	r2, r1
 8005b76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b7a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	f003 030f 	and.w	r3, r3, #15
 8005b90:	2101      	movs	r1, #1
 8005b92:	fa01 f303 	lsl.w	r3, r1, r3
 8005b96:	b29b      	uxth	r3, r3
 8005b98:	43db      	mvns	r3, r3
 8005b9a:	68f9      	ldr	r1, [r7, #12]
 8005b9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005baa:	69da      	ldr	r2, [r3, #28]
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	f003 030f 	and.w	r3, r3, #15
 8005bb4:	2101      	movs	r1, #1
 8005bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	43db      	mvns	r3, r3
 8005bbe:	68f9      	ldr	r1, [r7, #12]
 8005bc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	0159      	lsls	r1, r3, #5
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	440b      	add	r3, r1
 8005bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005be2:	4619      	mov	r1, r3
 8005be4:	4b35      	ldr	r3, [pc, #212]	; (8005cbc <USB_DeactivateEndpoint+0x1b0>)
 8005be6:	4013      	ands	r3, r2
 8005be8:	600b      	str	r3, [r1, #0]
 8005bea:	e060      	b.n	8005cae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c02:	d11f      	bne.n	8005c44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	0151      	lsls	r1, r2, #5
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	440a      	add	r2, r1
 8005c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	015a      	lsls	r2, r3, #5
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	4413      	add	r3, r2
 8005c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68ba      	ldr	r2, [r7, #8]
 8005c34:	0151      	lsls	r1, r2, #5
 8005c36:	68fa      	ldr	r2, [r7, #12]
 8005c38:	440a      	add	r2, r1
 8005c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c3e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	f003 030f 	and.w	r3, r3, #15
 8005c54:	2101      	movs	r1, #1
 8005c56:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5a:	041b      	lsls	r3, r3, #16
 8005c5c:	43db      	mvns	r3, r3
 8005c5e:	68f9      	ldr	r1, [r7, #12]
 8005c60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c64:	4013      	ands	r3, r2
 8005c66:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6e:	69da      	ldr	r2, [r3, #28]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	f003 030f 	and.w	r3, r3, #15
 8005c78:	2101      	movs	r1, #1
 8005c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7e:	041b      	lsls	r3, r3, #16
 8005c80:	43db      	mvns	r3, r3
 8005c82:	68f9      	ldr	r1, [r7, #12]
 8005c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c88:	4013      	ands	r3, r2
 8005c8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	0159      	lsls	r1, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	440b      	add	r3, r1
 8005ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <USB_DeactivateEndpoint+0x1b4>)
 8005caa:	4013      	ands	r3, r2
 8005cac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	ec337800 	.word	0xec337800
 8005cc0:	eff37800 	.word	0xeff37800

08005cc4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	785b      	ldrb	r3, [r3, #1]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	f040 8128 	bne.w	8005f32 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d132      	bne.n	8005d50 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	0151      	lsls	r1, r2, #5
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	440a      	add	r2, r1
 8005d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	015a      	lsls	r2, r3, #5
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	0151      	lsls	r1, r2, #5
 8005d20:	697a      	ldr	r2, [r7, #20]
 8005d22:	440a      	add	r2, r1
 8005d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	015a      	lsls	r2, r3, #5
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d3a:	691b      	ldr	r3, [r3, #16]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	0151      	lsls	r1, r2, #5
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	440a      	add	r2, r1
 8005d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d48:	0cdb      	lsrs	r3, r3, #19
 8005d4a:	04db      	lsls	r3, r3, #19
 8005d4c:	6113      	str	r3, [r2, #16]
 8005d4e:	e092      	b.n	8005e76 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5c:	691b      	ldr	r3, [r3, #16]
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	0151      	lsls	r1, r2, #5
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	440a      	add	r2, r1
 8005d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d6a:	0cdb      	lsrs	r3, r3, #19
 8005d6c:	04db      	lsls	r3, r3, #19
 8005d6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	015a      	lsls	r2, r3, #5
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	4413      	add	r3, r2
 8005d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	0151      	lsls	r1, r2, #5
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	440a      	add	r2, r1
 8005d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d92:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d11a      	bne.n	8005dd0 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	691a      	ldr	r2, [r3, #16]
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d903      	bls.n	8005dae <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	0151      	lsls	r1, r2, #5
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	440a      	add	r2, r1
 8005dc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dcc:	6113      	str	r3, [r2, #16]
 8005dce:	e01b      	b.n	8005e08 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ddc:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	6919      	ldr	r1, [r3, #16]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	440b      	add	r3, r1
 8005de8:	1e59      	subs	r1, r3, #1
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	fbb1 f3f3 	udiv	r3, r1, r3
 8005df2:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005df4:	4b8d      	ldr	r3, [pc, #564]	; (800602c <USB_EPStartXfer+0x368>)
 8005df6:	400b      	ands	r3, r1
 8005df8:	6939      	ldr	r1, [r7, #16]
 8005dfa:	0148      	lsls	r0, r1, #5
 8005dfc:	6979      	ldr	r1, [r7, #20]
 8005dfe:	4401      	add	r1, r0
 8005e00:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e04:	4313      	orrs	r3, r2
 8005e06:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e14:	691a      	ldr	r2, [r3, #16]
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e1e:	6939      	ldr	r1, [r7, #16]
 8005e20:	0148      	lsls	r0, r1, #5
 8005e22:	6979      	ldr	r1, [r7, #20]
 8005e24:	4401      	add	r1, r0
 8005e26:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	791b      	ldrb	r3, [r3, #4]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d11f      	bne.n	8005e76 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	015a      	lsls	r2, r3, #5
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	0151      	lsls	r1, r2, #5
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	440a      	add	r2, r1
 8005e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e50:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e54:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	693a      	ldr	r2, [r7, #16]
 8005e66:	0151      	lsls	r1, r2, #5
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	440a      	add	r2, r1
 8005e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e74:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	0151      	lsls	r1, r2, #5
 8005e88:	697a      	ldr	r2, [r7, #20]
 8005e8a:	440a      	add	r2, r1
 8005e8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e94:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	791b      	ldrb	r3, [r3, #4]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d015      	beq.n	8005eca <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	691b      	ldr	r3, [r3, #16]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f000 8139 	beq.w	800611a <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	f003 030f 	and.w	r3, r3, #15
 8005eb8:	2101      	movs	r1, #1
 8005eba:	fa01 f303 	lsl.w	r3, r1, r3
 8005ebe:	6979      	ldr	r1, [r7, #20]
 8005ec0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	634b      	str	r3, [r1, #52]	; 0x34
 8005ec8:	e127      	b.n	800611a <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d110      	bne.n	8005efc <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	0151      	lsls	r1, r2, #5
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	440a      	add	r2, r1
 8005ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ef4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	e00f      	b.n	8005f1c <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	015a      	lsls	r2, r3, #5
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	4413      	add	r3, r2
 8005f04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	693a      	ldr	r2, [r7, #16]
 8005f0c:	0151      	lsls	r1, r2, #5
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	440a      	add	r2, r1
 8005f12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f1a:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	68d9      	ldr	r1, [r3, #12]
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	781a      	ldrb	r2, [r3, #0]
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 f9a6 	bl	800627c <USB_WritePacket>
 8005f30:	e0f3      	b.n	800611a <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	0151      	lsls	r1, r2, #5
 8005f44:	697a      	ldr	r2, [r7, #20]
 8005f46:	440a      	add	r2, r1
 8005f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f4c:	0cdb      	lsrs	r3, r3, #19
 8005f4e:	04db      	lsls	r3, r3, #19
 8005f50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5e:	691b      	ldr	r3, [r3, #16]
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	0151      	lsls	r1, r2, #5
 8005f64:	697a      	ldr	r2, [r7, #20]
 8005f66:	440a      	add	r2, r1
 8005f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f74:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d12f      	bne.n	8005fdc <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa0:	691a      	ldr	r2, [r3, #16]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005faa:	6939      	ldr	r1, [r7, #16]
 8005fac:	0148      	lsls	r0, r1, #5
 8005fae:	6979      	ldr	r1, [r7, #20]
 8005fb0:	4401      	add	r1, r0
 8005fb2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	015a      	lsls	r2, r3, #5
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	0151      	lsls	r1, r2, #5
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	440a      	add	r2, r1
 8005fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fd8:	6113      	str	r3, [r2, #16]
 8005fda:	e061      	b.n	80060a0 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d125      	bne.n	8006030 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ffa:	6939      	ldr	r1, [r7, #16]
 8005ffc:	0148      	lsls	r0, r1, #5
 8005ffe:	6979      	ldr	r1, [r7, #20]
 8006000:	4401      	add	r1, r0
 8006002:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006006:	4313      	orrs	r3, r2
 8006008:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	0151      	lsls	r1, r2, #5
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	440a      	add	r2, r1
 8006020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006024:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006028:	6113      	str	r3, [r2, #16]
 800602a:	e039      	b.n	80060a0 <USB_EPStartXfer+0x3dc>
 800602c:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	691a      	ldr	r2, [r3, #16]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	4413      	add	r3, r2
 800603a:	1e5a      	subs	r2, r3, #1
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	fbb2 f3f3 	udiv	r3, r2, r3
 8006044:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	89fa      	ldrh	r2, [r7, #14]
 800604c:	fb03 f202 	mul.w	r2, r3, r2
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006060:	691a      	ldr	r2, [r3, #16]
 8006062:	89fb      	ldrh	r3, [r7, #14]
 8006064:	04d9      	lsls	r1, r3, #19
 8006066:	4b2f      	ldr	r3, [pc, #188]	; (8006124 <USB_EPStartXfer+0x460>)
 8006068:	400b      	ands	r3, r1
 800606a:	6939      	ldr	r1, [r7, #16]
 800606c:	0148      	lsls	r0, r1, #5
 800606e:	6979      	ldr	r1, [r7, #20]
 8006070:	4401      	add	r1, r0
 8006072:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006076:	4313      	orrs	r3, r2
 8006078:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006086:	691a      	ldr	r2, [r3, #16]
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	6a1b      	ldr	r3, [r3, #32]
 800608c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006090:	6939      	ldr	r1, [r7, #16]
 8006092:	0148      	lsls	r0, r1, #5
 8006094:	6979      	ldr	r1, [r7, #20]
 8006096:	4401      	add	r1, r0
 8006098:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800609c:	4313      	orrs	r3, r2
 800609e:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	791b      	ldrb	r3, [r3, #4]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d128      	bne.n	80060fa <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d110      	bne.n	80060da <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	015a      	lsls	r2, r3, #5
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	4413      	add	r3, r2
 80060c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	693a      	ldr	r2, [r7, #16]
 80060c8:	0151      	lsls	r1, r2, #5
 80060ca:	697a      	ldr	r2, [r7, #20]
 80060cc:	440a      	add	r2, r1
 80060ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060d6:	6013      	str	r3, [r2, #0]
 80060d8:	e00f      	b.n	80060fa <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	693a      	ldr	r2, [r7, #16]
 80060ea:	0151      	lsls	r1, r2, #5
 80060ec:	697a      	ldr	r2, [r7, #20]
 80060ee:	440a      	add	r2, r1
 80060f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f8:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	015a      	lsls	r2, r3, #5
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	4413      	add	r3, r2
 8006102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	0151      	lsls	r1, r2, #5
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	440a      	add	r2, r1
 8006110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006114:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006118:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}
 8006124:	1ff80000 	.word	0x1ff80000

08006128 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006136:	2300      	movs	r3, #0
 8006138:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	785b      	ldrb	r3, [r3, #1]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d14a      	bne.n	80061dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	781b      	ldrb	r3, [r3, #0]
 800614a:	015a      	lsls	r2, r3, #5
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	4413      	add	r3, r2
 8006150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800615a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800615e:	f040 8086 	bne.w	800626e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	015a      	lsls	r2, r3, #5
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	4413      	add	r3, r2
 800616c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	7812      	ldrb	r2, [r2, #0]
 8006176:	0151      	lsls	r1, r2, #5
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	440a      	add	r2, r1
 800617c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006180:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006184:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	7812      	ldrb	r2, [r2, #0]
 800619a:	0151      	lsls	r1, r2, #5
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	440a      	add	r2, r1
 80061a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	3301      	adds	r3, #1
 80061ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f242 7210 	movw	r2, #10000	; 0x2710
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d902      	bls.n	80061c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	75fb      	strb	r3, [r7, #23]
          break;
 80061be:	e056      	b.n	800626e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061d8:	d0e7      	beq.n	80061aa <USB_EPStopXfer+0x82>
 80061da:	e048      	b.n	800626e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	015a      	lsls	r2, r3, #5
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061f4:	d13b      	bne.n	800626e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	015a      	lsls	r2, r3, #5
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	4413      	add	r3, r2
 8006200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	7812      	ldrb	r2, [r2, #0]
 800620a:	0151      	lsls	r1, r2, #5
 800620c:	693a      	ldr	r2, [r7, #16]
 800620e:	440a      	add	r2, r1
 8006210:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006214:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006218:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	015a      	lsls	r2, r3, #5
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	4413      	add	r3, r2
 8006224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	7812      	ldrb	r2, [r2, #0]
 800622e:	0151      	lsls	r1, r2, #5
 8006230:	693a      	ldr	r2, [r7, #16]
 8006232:	440a      	add	r2, r1
 8006234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006238:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800623c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3301      	adds	r3, #1
 8006242:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f242 7210 	movw	r2, #10000	; 0x2710
 800624a:	4293      	cmp	r3, r2
 800624c:	d902      	bls.n	8006254 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	75fb      	strb	r3, [r7, #23]
          break;
 8006252:	e00c      	b.n	800626e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	015a      	lsls	r2, r3, #5
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	4413      	add	r3, r2
 800625e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800626c:	d0e7      	beq.n	800623e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800626e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006270:	4618      	mov	r0, r3
 8006272:	371c      	adds	r7, #28
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 800627c:	b480      	push	{r7}
 800627e:	b089      	sub	sp, #36	; 0x24
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	4611      	mov	r1, r2
 8006288:	461a      	mov	r2, r3
 800628a:	460b      	mov	r3, r1
 800628c:	71fb      	strb	r3, [r7, #7]
 800628e:	4613      	mov	r3, r2
 8006290:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 800629a:	88bb      	ldrh	r3, [r7, #4]
 800629c:	3303      	adds	r3, #3
 800629e:	089b      	lsrs	r3, r3, #2
 80062a0:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80062a2:	2300      	movs	r3, #0
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	e018      	b.n	80062da <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062a8:	79fb      	ldrb	r3, [r7, #7]
 80062aa:	031a      	lsls	r2, r3, #12
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062b4:	461a      	mov	r2, r3
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	6013      	str	r3, [r2, #0]
    pSrc++;
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	3301      	adds	r3, #1
 80062c0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	3301      	adds	r3, #1
 80062c6:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	3301      	adds	r3, #1
 80062cc:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80062ce:	69fb      	ldr	r3, [r7, #28]
 80062d0:	3301      	adds	r3, #1
 80062d2:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	3301      	adds	r3, #1
 80062d8:	61bb      	str	r3, [r7, #24]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d3e2      	bcc.n	80062a8 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3724      	adds	r7, #36	; 0x24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b08b      	sub	sp, #44	; 0x2c
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	4613      	mov	r3, r2
 80062fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006306:	88fb      	ldrh	r3, [r7, #6]
 8006308:	089b      	lsrs	r3, r3, #2
 800630a:	b29b      	uxth	r3, r3
 800630c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800630e:	88fb      	ldrh	r3, [r7, #6]
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006316:	2300      	movs	r3, #0
 8006318:	623b      	str	r3, [r7, #32]
 800631a:	e014      	b.n	8006346 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006326:	601a      	str	r2, [r3, #0]
    pDest++;
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	3301      	adds	r3, #1
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	3301      	adds	r3, #1
 8006332:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006336:	3301      	adds	r3, #1
 8006338:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633c:	3301      	adds	r3, #1
 800633e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	3301      	adds	r3, #1
 8006344:	623b      	str	r3, [r7, #32]
 8006346:	6a3a      	ldr	r2, [r7, #32]
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	429a      	cmp	r2, r3
 800634c:	d3e6      	bcc.n	800631c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800634e:	8bfb      	ldrh	r3, [r7, #30]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d01e      	beq.n	8006392 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800635e:	461a      	mov	r2, r3
 8006360:	f107 0310 	add.w	r3, r7, #16
 8006364:	6812      	ldr	r2, [r2, #0]
 8006366:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	b2db      	uxtb	r3, r3
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	fa22 f303 	lsr.w	r3, r2, r3
 8006374:	b2da      	uxtb	r2, r3
 8006376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006378:	701a      	strb	r2, [r3, #0]
      i++;
 800637a:	6a3b      	ldr	r3, [r7, #32]
 800637c:	3301      	adds	r3, #1
 800637e:	623b      	str	r3, [r7, #32]
      pDest++;
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	3301      	adds	r3, #1
 8006384:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006386:	8bfb      	ldrh	r3, [r7, #30]
 8006388:	3b01      	subs	r3, #1
 800638a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800638c:	8bfb      	ldrh	r3, [r7, #30]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1ea      	bne.n	8006368 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006394:	4618      	mov	r0, r3
 8006396:	372c      	adds	r7, #44	; 0x2c
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	781b      	ldrb	r3, [r3, #0]
 80063b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d12c      	bne.n	8006416 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	db12      	blt.n	80063f4 <USB_EPSetStall+0x54>
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00f      	beq.n	80063f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	0151      	lsls	r1, r2, #5
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	440a      	add	r2, r1
 80063ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68ba      	ldr	r2, [r7, #8]
 8006404:	0151      	lsls	r1, r2, #5
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	440a      	add	r2, r1
 800640a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	e02b      	b.n	800646e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	015a      	lsls	r2, r3, #5
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4413      	add	r3, r2
 800641e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	db12      	blt.n	800644e <USB_EPSetStall+0xae>
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00f      	beq.n	800644e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	015a      	lsls	r2, r3, #5
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4413      	add	r3, r2
 8006436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	0151      	lsls	r1, r2, #5
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	440a      	add	r2, r1
 8006444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006448:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800644c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	440a      	add	r2, r1
 8006464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006468:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800646c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	785b      	ldrb	r3, [r3, #1]
 8006494:	2b01      	cmp	r3, #1
 8006496:	d128      	bne.n	80064ea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	015a      	lsls	r2, r3, #5
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	0151      	lsls	r1, r2, #5
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	440a      	add	r2, r1
 80064ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064b6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	791b      	ldrb	r3, [r3, #4]
 80064bc:	2b03      	cmp	r3, #3
 80064be:	d003      	beq.n	80064c8 <USB_EPClearStall+0x4c>
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	791b      	ldrb	r3, [r3, #4]
 80064c4:	2b02      	cmp	r3, #2
 80064c6:	d138      	bne.n	800653a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	0151      	lsls	r1, r2, #5
 80064da:	68fa      	ldr	r2, [r7, #12]
 80064dc:	440a      	add	r2, r1
 80064de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	e027      	b.n	800653a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	015a      	lsls	r2, r3, #5
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	4413      	add	r3, r2
 80064f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	0151      	lsls	r1, r2, #5
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	440a      	add	r2, r1
 8006500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006504:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006508:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	791b      	ldrb	r3, [r3, #4]
 800650e:	2b03      	cmp	r3, #3
 8006510:	d003      	beq.n	800651a <USB_EPClearStall+0x9e>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	791b      	ldrb	r3, [r3, #4]
 8006516:	2b02      	cmp	r3, #2
 8006518:	d10f      	bne.n	800653a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	015a      	lsls	r2, r3, #5
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4413      	add	r3, r2
 8006522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68ba      	ldr	r2, [r7, #8]
 800652a:	0151      	lsls	r1, r2, #5
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	440a      	add	r2, r1
 8006530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006534:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006538:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800653a:	2300      	movs	r3, #0
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006566:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800656a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006572:	681a      	ldr	r2, [r3, #0]
 8006574:	78fb      	ldrb	r3, [r7, #3]
 8006576:	011b      	lsls	r3, r3, #4
 8006578:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800657c:	68f9      	ldr	r1, [r7, #12]
 800657e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006582:	4313      	orrs	r3, r2
 8006584:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065ae:	f023 0303 	bic.w	r3, r3, #3
 80065b2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065c2:	f023 0302 	bic.w	r3, r3, #2
 80065c6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065c8:	2300      	movs	r3, #0
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3714      	adds	r7, #20
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065d6:	b480      	push	{r7}
 80065d8:	b085      	sub	sp, #20
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065f0:	f023 0303 	bic.w	r3, r3, #3
 80065f4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006604:	f043 0302 	orr.w	r3, r3, #2
 8006608:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006618:	b480      	push	{r7}
 800661a:	b085      	sub	sp, #20
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	4013      	ands	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006630:	68fb      	ldr	r3, [r7, #12]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800663e:	b480      	push	{r7}
 8006640:	b085      	sub	sp, #20
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	4013      	ands	r3, r2
 8006660:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	0c1b      	lsrs	r3, r3, #16
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006672:	b480      	push	{r7}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	4013      	ands	r3, r2
 8006694:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	b29b      	uxth	r3, r3
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b085      	sub	sp, #20
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	460b      	mov	r3, r1
 80066b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80066b6:	78fb      	ldrb	r3, [r7, #3]
 80066b8:	015a      	lsls	r2, r3, #5
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	4413      	add	r3, r2
 80066be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	68ba      	ldr	r2, [r7, #8]
 80066d0:	4013      	ands	r3, r2
 80066d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066d4:	68bb      	ldr	r3, [r7, #8]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b087      	sub	sp, #28
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
 80066ea:	460b      	mov	r3, r1
 80066ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006704:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006706:	78fb      	ldrb	r3, [r7, #3]
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	fa22 f303 	lsr.w	r3, r2, r3
 8006712:	01db      	lsls	r3, r3, #7
 8006714:	b2db      	uxtb	r3, r3
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4313      	orrs	r3, r2
 800671a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800671c:	78fb      	ldrb	r3, [r7, #3]
 800671e:	015a      	lsls	r2, r3, #5
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	4413      	add	r3, r2
 8006724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	693a      	ldr	r2, [r7, #16]
 800672c:	4013      	ands	r3, r2
 800672e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006730:	68bb      	ldr	r3, [r7, #8]
}
 8006732:	4618      	mov	r0, r3
 8006734:	371c      	adds	r7, #28
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800673e:	b480      	push	{r7}
 8006740:	b083      	sub	sp, #12
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	f003 0301 	and.w	r3, r3, #1
}
 800674e:	4618      	mov	r0, r3
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800675a:	b480      	push	{r7}
 800675c:	b085      	sub	sp, #20
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68fa      	ldr	r2, [r7, #12]
 8006770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006774:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006778:	f023 0307 	bic.w	r3, r3, #7
 800677c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800678c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006790:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	3714      	adds	r7, #20
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	333c      	adds	r3, #60	; 0x3c
 80067b2:	3304      	adds	r3, #4
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80067b8:	68bb      	ldr	r3, [r7, #8]
 80067ba:	4a1c      	ldr	r2, [pc, #112]	; (800682c <USB_EP0_OutStart+0x8c>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d90a      	bls.n	80067d6 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80067cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80067d0:	d101      	bne.n	80067d6 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 80067d2:	2300      	movs	r3, #0
 80067d4:	e024      	b.n	8006820 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067dc:	461a      	mov	r2, r3
 80067de:	2300      	movs	r3, #0
 80067e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006804:	f043 0318 	orr.w	r3, r3, #24
 8006808:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006818:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800681c:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3714      	adds	r7, #20
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	4f54300a 	.word	0x4f54300a

08006830 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006830:	b480      	push	{r7}
 8006832:	b085      	sub	sp, #20
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	3301      	adds	r3, #1
 8006840:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4a13      	ldr	r2, [pc, #76]	; (8006894 <USB_CoreReset+0x64>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d901      	bls.n	800684e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e01b      	b.n	8006886 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	2b00      	cmp	r3, #0
 8006854:	daf2      	bge.n	800683c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	f043 0201 	orr.w	r2, r3, #1
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3301      	adds	r3, #1
 800686a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4a09      	ldr	r2, [pc, #36]	; (8006894 <USB_CoreReset+0x64>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d901      	bls.n	8006878 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e006      	b.n	8006886 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f003 0301 	and.w	r3, r3, #1
 8006880:	2b01      	cmp	r3, #1
 8006882:	d0f0      	beq.n	8006866 <USB_CoreReset+0x36>

  return HAL_OK;
 8006884:	2300      	movs	r3, #0
}
 8006886:	4618      	mov	r0, r3
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	00030d40 	.word	0x00030d40

08006898 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	460b      	mov	r3, r1
 80068a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80068a4:	201c      	movs	r0, #28
 80068a6:	f002 fc67 	bl	8009178 <USBD_static_malloc>
 80068aa:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d109      	bne.n	80068c6 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	32b0      	adds	r2, #176	; 0xb0
 80068bc:	2100      	movs	r1, #0
 80068be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80068c2:	2302      	movs	r3, #2
 80068c4:	e08a      	b.n	80069dc <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	32b0      	adds	r2, #176	; 0xb0
 80068d0:	68f9      	ldr	r1, [r7, #12]
 80068d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	32b0      	adds	r2, #176	; 0xb0
 80068e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	7c1b      	ldrb	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d11b      	bne.n	800692a <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80068f2:	4b3c      	ldr	r3, [pc, #240]	; (80069e4 <USBD_CUSTOM_HID_Init+0x14c>)
 80068f4:	781b      	ldrb	r3, [r3, #0]
 80068f6:	f003 020f 	and.w	r2, r3, #15
 80068fa:	6879      	ldr	r1, [r7, #4]
 80068fc:	4613      	mov	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	440b      	add	r3, r1
 8006906:	3326      	adds	r3, #38	; 0x26
 8006908:	2205      	movs	r2, #5
 800690a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800690c:	4b36      	ldr	r3, [pc, #216]	; (80069e8 <USBD_CUSTOM_HID_Init+0x150>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	f003 020f 	and.w	r2, r3, #15
 8006914:	6879      	ldr	r1, [r7, #4]
 8006916:	4613      	mov	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	4413      	add	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	440b      	add	r3, r1
 8006920:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006924:	2205      	movs	r2, #5
 8006926:	801a      	strh	r2, [r3, #0]
 8006928:	e01a      	b.n	8006960 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800692a:	4b2e      	ldr	r3, [pc, #184]	; (80069e4 <USBD_CUSTOM_HID_Init+0x14c>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	f003 020f 	and.w	r2, r3, #15
 8006932:	6879      	ldr	r1, [r7, #4]
 8006934:	4613      	mov	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	440b      	add	r3, r1
 800693e:	3326      	adds	r3, #38	; 0x26
 8006940:	2205      	movs	r2, #5
 8006942:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006944:	4b28      	ldr	r3, [pc, #160]	; (80069e8 <USBD_CUSTOM_HID_Init+0x150>)
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	f003 020f 	and.w	r2, r3, #15
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	4613      	mov	r3, r2
 8006950:	009b      	lsls	r3, r3, #2
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	440b      	add	r3, r1
 8006958:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800695c:	2205      	movs	r2, #5
 800695e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006960:	4b20      	ldr	r3, [pc, #128]	; (80069e4 <USBD_CUSTOM_HID_Init+0x14c>)
 8006962:	7819      	ldrb	r1, [r3, #0]
 8006964:	2302      	movs	r3, #2
 8006966:	2203      	movs	r2, #3
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f002 fa05 	bl	8008d78 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800696e:	4b1d      	ldr	r3, [pc, #116]	; (80069e4 <USBD_CUSTOM_HID_Init+0x14c>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	f003 020f 	and.w	r2, r3, #15
 8006976:	6879      	ldr	r1, [r7, #4]
 8006978:	4613      	mov	r3, r2
 800697a:	009b      	lsls	r3, r3, #2
 800697c:	4413      	add	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	440b      	add	r3, r1
 8006982:	3324      	adds	r3, #36	; 0x24
 8006984:	2201      	movs	r2, #1
 8006986:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006988:	4b17      	ldr	r3, [pc, #92]	; (80069e8 <USBD_CUSTOM_HID_Init+0x150>)
 800698a:	7819      	ldrb	r1, [r3, #0]
 800698c:	2302      	movs	r3, #2
 800698e:	2203      	movs	r2, #3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f002 f9f1 	bl	8008d78 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8006996:	4b14      	ldr	r3, [pc, #80]	; (80069e8 <USBD_CUSTOM_HID_Init+0x150>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	f003 020f 	and.w	r2, r3, #15
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069ae:	2201      	movs	r2, #1
 80069b0:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	33b0      	adds	r3, #176	; 0xb0
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	4413      	add	r3, r2
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80069cc:	4b06      	ldr	r3, [pc, #24]	; (80069e8 <USBD_CUSTOM_HID_Init+0x150>)
 80069ce:	7819      	ldrb	r1, [r3, #0]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	2306      	movs	r3, #6
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f002 fb49 	bl	800906c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80069da:	2300      	movs	r3, #0
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3710      	adds	r7, #16
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	20000086 	.word	0x20000086
 80069e8:	20000087 	.word	0x20000087

080069ec <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80069f8:	4b37      	ldr	r3, [pc, #220]	; (8006ad8 <USBD_CUSTOM_HID_DeInit+0xec>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	4619      	mov	r1, r3
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f002 f9f8 	bl	8008df4 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006a04:	4b34      	ldr	r3, [pc, #208]	; (8006ad8 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	f003 020f 	and.w	r2, r3, #15
 8006a0c:	6879      	ldr	r1, [r7, #4]
 8006a0e:	4613      	mov	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	4413      	add	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	440b      	add	r3, r1
 8006a18:	3324      	adds	r3, #36	; 0x24
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8006a1e:	4b2e      	ldr	r3, [pc, #184]	; (8006ad8 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006a20:	781b      	ldrb	r3, [r3, #0]
 8006a22:	f003 020f 	and.w	r2, r3, #15
 8006a26:	6879      	ldr	r1, [r7, #4]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	440b      	add	r3, r1
 8006a32:	3326      	adds	r3, #38	; 0x26
 8006a34:	2200      	movs	r2, #0
 8006a36:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006a38:	4b28      	ldr	r3, [pc, #160]	; (8006adc <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f002 f9d8 	bl	8008df4 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006a44:	4b25      	ldr	r3, [pc, #148]	; (8006adc <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	f003 020f 	and.w	r2, r3, #15
 8006a4c:	6879      	ldr	r1, [r7, #4]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	440b      	add	r3, r1
 8006a58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006a60:	4b1e      	ldr	r3, [pc, #120]	; (8006adc <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006a62:	781b      	ldrb	r3, [r3, #0]
 8006a64:	f003 020f 	and.w	r2, r3, #15
 8006a68:	6879      	ldr	r1, [r7, #4]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	440b      	add	r3, r1
 8006a74:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006a78:	2200      	movs	r2, #0
 8006a7a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	32b0      	adds	r2, #176	; 0xb0
 8006a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d01f      	beq.n	8006ace <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	33b0      	adds	r3, #176	; 0xb0
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	4413      	add	r3, r2
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	32b0      	adds	r2, #176	; 0xb0
 8006aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f002 fb6f 	bl	8009194 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	32b0      	adds	r2, #176	; 0xb0
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20000086 	.word	0x20000086
 8006adc:	20000087 	.word	0x20000087

08006ae0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	32b0      	adds	r2, #176	; 0xb0
 8006af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b06:	2300      	movs	r3, #0
 8006b08:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d101      	bne.n	8006b14 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e0f8      	b.n	8006d06 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d056      	beq.n	8006bce <USBD_CUSTOM_HID_Setup+0xee>
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	f040 80e8 	bne.w	8006cf6 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	785b      	ldrb	r3, [r3, #1]
 8006b2a:	3b02      	subs	r3, #2
 8006b2c:	2b09      	cmp	r3, #9
 8006b2e:	d846      	bhi.n	8006bbe <USBD_CUSTOM_HID_Setup+0xde>
 8006b30:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <USBD_CUSTOM_HID_Setup+0x58>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b91 	.word	0x08006b91
 8006b3c:	08006b6f 	.word	0x08006b6f
 8006b40:	08006bbf 	.word	0x08006bbf
 8006b44:	08006bbf 	.word	0x08006bbf
 8006b48:	08006bbf 	.word	0x08006bbf
 8006b4c:	08006bbf 	.word	0x08006bbf
 8006b50:	08006bbf 	.word	0x08006bbf
 8006b54:	08006ba1 	.word	0x08006ba1
 8006b58:	08006b7f 	.word	0x08006b7f
 8006b5c:	08006b61 	.word	0x08006b61
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	885b      	ldrh	r3, [r3, #2]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	461a      	mov	r2, r3
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	609a      	str	r2, [r3, #8]
          break;
 8006b6c:	e02e      	b.n	8006bcc <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	3308      	adds	r3, #8
 8006b72:	2201      	movs	r2, #1
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 fcd0 	bl	800851c <USBD_CtlSendData>
          break;
 8006b7c:	e026      	b.n	8006bcc <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	885b      	ldrh	r3, [r3, #2]
 8006b82:	0a1b      	lsrs	r3, r3, #8
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	461a      	mov	r2, r3
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	60da      	str	r2, [r3, #12]
          break;
 8006b8e:	e01d      	b.n	8006bcc <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	330c      	adds	r3, #12
 8006b94:	2201      	movs	r2, #1
 8006b96:	4619      	mov	r1, r3
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f001 fcbf 	bl	800851c <USBD_CtlSendData>
          break;
 8006b9e:	e015      	b.n	8006bcc <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006ba6:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	88db      	ldrh	r3, [r3, #6]
 8006bac:	2b06      	cmp	r3, #6
 8006bae:	bf28      	it	cs
 8006bb0:	2306      	movcs	r3, #6
 8006bb2:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f001 fcdc 	bl	8008574 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8006bbc:	e006      	b.n	8006bcc <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 fc3a 	bl	800843a <USBD_CtlError>
          ret = USBD_FAIL;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8006bca:	bf00      	nop
      }
      break;
 8006bcc:	e09a      	b.n	8006d04 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	785b      	ldrb	r3, [r3, #1]
 8006bd2:	2b0b      	cmp	r3, #11
 8006bd4:	f200 8086 	bhi.w	8006ce4 <USBD_CUSTOM_HID_Setup+0x204>
 8006bd8:	a201      	add	r2, pc, #4	; (adr r2, 8006be0 <USBD_CUSTOM_HID_Setup+0x100>)
 8006bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bde:	bf00      	nop
 8006be0:	08006c11 	.word	0x08006c11
 8006be4:	08006cf3 	.word	0x08006cf3
 8006be8:	08006ce5 	.word	0x08006ce5
 8006bec:	08006ce5 	.word	0x08006ce5
 8006bf0:	08006ce5 	.word	0x08006ce5
 8006bf4:	08006ce5 	.word	0x08006ce5
 8006bf8:	08006c3b 	.word	0x08006c3b
 8006bfc:	08006ce5 	.word	0x08006ce5
 8006c00:	08006ce5 	.word	0x08006ce5
 8006c04:	08006ce5 	.word	0x08006ce5
 8006c08:	08006c93 	.word	0x08006c93
 8006c0c:	08006cbd 	.word	0x08006cbd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b03      	cmp	r3, #3
 8006c1a:	d107      	bne.n	8006c2c <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006c1c:	f107 030e 	add.w	r3, r7, #14
 8006c20:	2202      	movs	r2, #2
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 fc79 	bl	800851c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c2a:	e063      	b.n	8006cf4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006c2c:	6839      	ldr	r1, [r7, #0]
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f001 fc03 	bl	800843a <USBD_CtlError>
            ret = USBD_FAIL;
 8006c34:	2303      	movs	r3, #3
 8006c36:	75fb      	strb	r3, [r7, #23]
          break;
 8006c38:	e05c      	b.n	8006cf4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	885b      	ldrh	r3, [r3, #2]
 8006c3e:	0a1b      	lsrs	r3, r3, #8
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	2b22      	cmp	r3, #34	; 0x22
 8006c44:	d110      	bne.n	8006c68 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	88db      	ldrh	r3, [r3, #6]
 8006c4a:	2b1d      	cmp	r3, #29
 8006c4c:	bf28      	it	cs
 8006c4e:	231d      	movcs	r3, #29
 8006c50:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c58:	687a      	ldr	r2, [r7, #4]
 8006c5a:	33b0      	adds	r3, #176	; 0xb0
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	e00d      	b.n	8006c84 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	885b      	ldrh	r3, [r3, #2]
 8006c6c:	0a1b      	lsrs	r3, r3, #8
 8006c6e:	b29b      	uxth	r3, r3
 8006c70:	2b21      	cmp	r3, #33	; 0x21
 8006c72:	d107      	bne.n	8006c84 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006c74:	4b26      	ldr	r3, [pc, #152]	; (8006d10 <USBD_CUSTOM_HID_Setup+0x230>)
 8006c76:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	88db      	ldrh	r3, [r3, #6]
 8006c7c:	2b09      	cmp	r3, #9
 8006c7e:	bf28      	it	cs
 8006c80:	2309      	movcs	r3, #9
 8006c82:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c84:	8bfb      	ldrh	r3, [r7, #30]
 8006c86:	461a      	mov	r2, r3
 8006c88:	69b9      	ldr	r1, [r7, #24]
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f001 fc46 	bl	800851c <USBD_CtlSendData>
          break;
 8006c90:	e030      	b.n	8006cf4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b03      	cmp	r3, #3
 8006c9c:	d107      	bne.n	8006cae <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	3310      	adds	r3, #16
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f001 fc38 	bl	800851c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cac:	e022      	b.n	8006cf4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fbc2 	bl	800843a <USBD_CtlError>
            ret = USBD_FAIL;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	75fb      	strb	r3, [r7, #23]
          break;
 8006cba:	e01b      	b.n	8006cf4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b03      	cmp	r3, #3
 8006cc6:	d106      	bne.n	8006cd6 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	885b      	ldrh	r3, [r3, #2]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	461a      	mov	r2, r3
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006cd4:	e00e      	b.n	8006cf4 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f001 fbae 	bl	800843a <USBD_CtlError>
            ret = USBD_FAIL;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	75fb      	strb	r3, [r7, #23]
          break;
 8006ce2:	e007      	b.n	8006cf4 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006ce4:	6839      	ldr	r1, [r7, #0]
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f001 fba7 	bl	800843a <USBD_CtlError>
          ret = USBD_FAIL;
 8006cec:	2303      	movs	r3, #3
 8006cee:	75fb      	strb	r3, [r7, #23]
          break;
 8006cf0:	e000      	b.n	8006cf4 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8006cf2:	bf00      	nop
      }
      break;
 8006cf4:	e006      	b.n	8006d04 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fb9e 	bl	800843a <USBD_CtlError>
      ret = USBD_FAIL;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	75fb      	strb	r3, [r7, #23]
      break;
 8006d02:	bf00      	nop
  }
  return (uint8_t)ret;
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3720      	adds	r7, #32
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20000070 	.word	0x20000070

08006d14 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b086      	sub	sp, #24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	4613      	mov	r3, r2
 8006d20:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	32b0      	adds	r2, #176	; 0xb0
 8006d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d30:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d101      	bne.n	8006d3c <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e017      	b.n	8006d6c <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b03      	cmp	r3, #3
 8006d46:	d110      	bne.n	8006d6a <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	7e1b      	ldrb	r3, [r3, #24]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10a      	bne.n	8006d66 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	2201      	movs	r2, #1
 8006d54:	761a      	strb	r2, [r3, #24]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8006d56:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <USBD_CUSTOM_HID_SendReport+0x60>)
 8006d58:	7819      	ldrb	r1, [r3, #0]
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	f002 f94c 	bl	8008ffc <USBD_LL_Transmit>
 8006d64:	e001      	b.n	8006d6a <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e000      	b.n	8006d6c <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 8006d6a:	2300      	movs	r3, #0
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20000086 	.word	0x20000086

08006d78 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006d80:	2181      	movs	r1, #129	; 0x81
 8006d82:	4815      	ldr	r0, [pc, #84]	; (8006dd8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006d84:	f000 fcf7 	bl	8007776 <USBD_GetEpDesc>
 8006d88:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006d8a:	2101      	movs	r1, #1
 8006d8c:	4812      	ldr	r0, [pc, #72]	; (8006dd8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006d8e:	f000 fcf2 	bl	8007776 <USBD_GetEpDesc>
 8006d92:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d009      	beq.n	8006dae <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	f042 0202 	orr.w	r2, r2, #2
 8006da2:	711a      	strb	r2, [r3, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2205      	movs	r2, #5
 8006dac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d009      	beq.n	8006dc8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2200      	movs	r2, #0
 8006db8:	f042 0202 	orr.w	r2, r2, #2
 8006dbc:	711a      	strb	r2, [r3, #4]
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2205      	movs	r2, #5
 8006dc6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2229      	movs	r2, #41	; 0x29
 8006dcc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006dce:	4b02      	ldr	r3, [pc, #8]	; (8006dd8 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	20000044 	.word	0x20000044

08006ddc <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006de4:	2181      	movs	r1, #129	; 0x81
 8006de6:	4815      	ldr	r0, [pc, #84]	; (8006e3c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006de8:	f000 fcc5 	bl	8007776 <USBD_GetEpDesc>
 8006dec:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006dee:	2101      	movs	r1, #1
 8006df0:	4812      	ldr	r0, [pc, #72]	; (8006e3c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006df2:	f000 fcc0 	bl	8007776 <USBD_GetEpDesc>
 8006df6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d009      	beq.n	8006e12 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f042 0202 	orr.w	r2, r2, #2
 8006e06:	711a      	strb	r2, [r3, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2205      	movs	r2, #5
 8006e10:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d009      	beq.n	8006e2c <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f042 0202 	orr.w	r2, r2, #2
 8006e20:	711a      	strb	r2, [r3, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	2205      	movs	r2, #5
 8006e2a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2229      	movs	r2, #41	; 0x29
 8006e30:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006e32:	4b02      	ldr	r3, [pc, #8]	; (8006e3c <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}
 8006e3c:	20000044 	.word	0x20000044

08006e40 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006e48:	2181      	movs	r1, #129	; 0x81
 8006e4a:	4815      	ldr	r0, [pc, #84]	; (8006ea0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006e4c:	f000 fc93 	bl	8007776 <USBD_GetEpDesc>
 8006e50:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006e52:	2101      	movs	r1, #1
 8006e54:	4812      	ldr	r0, [pc, #72]	; (8006ea0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006e56:	f000 fc8e 	bl	8007776 <USBD_GetEpDesc>
 8006e5a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d009      	beq.n	8006e76 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f042 0202 	orr.w	r2, r2, #2
 8006e6a:	711a      	strb	r2, [r3, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2205      	movs	r2, #5
 8006e74:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d009      	beq.n	8006e90 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f042 0202 	orr.w	r2, r2, #2
 8006e84:	711a      	strb	r2, [r3, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	2205      	movs	r2, #5
 8006e8e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2229      	movs	r2, #41	; 0x29
 8006e94:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006e96:	4b02      	ldr	r3, [pc, #8]	; (8006ea0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	20000044 	.word	0x20000044

08006ea4 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b083      	sub	sp, #12
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
 8006eac:	460b      	mov	r3, r1
 8006eae:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	32b0      	adds	r2, #176	; 0xb0
 8006eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	370c      	adds	r7, #12
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	32b0      	adds	r2, #176	; 0xb0
 8006ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e017      	b.n	8006f22 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	32b0      	adds	r2, #176	; 0xb0
 8006efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f00:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	33b0      	adds	r3, #176	; 0xb0
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	4413      	add	r3, r2
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	7810      	ldrb	r0, [r2, #0]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	7852      	ldrb	r2, [r2, #1]
 8006f1c:	4611      	mov	r1, r2
 8006f1e:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	32b0      	adds	r2, #176	; 0xb0
 8006f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f40:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e016      	b.n	8006f7a <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	695b      	ldr	r3, [r3, #20]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d111      	bne.n	8006f78 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	33b0      	adds	r3, #176	; 0xb0
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	68db      	ldr	r3, [r3, #12]
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	7810      	ldrb	r0, [r2, #0]
 8006f6a:	68fa      	ldr	r2, [r7, #12]
 8006f6c:	7852      	ldrb	r2, [r2, #1]
 8006f6e:	4611      	mov	r1, r2
 8006f70:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 8006f78:	2300      	movs	r3, #0
}
 8006f7a:	4618      	mov	r0, r3
 8006f7c:	3710      	adds	r7, #16
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	bd80      	pop	{r7, pc}
	...

08006f84 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	220a      	movs	r2, #10
 8006f90:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006f92:	4b03      	ldr	r3, [pc, #12]	; (8006fa0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr
 8006fa0:	2000007c 	.word	0x2000007c

08006fa4 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d101      	bne.n	8006fb8 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006fb4:	2303      	movs	r3, #3
 8006fb6:	e009      	b.n	8006fcc <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	33b0      	adds	r3, #176	; 0xb0
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	683a      	ldr	r2, [r7, #0]
 8006fc8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	4613      	mov	r3, r2
 8006fe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e01f      	b.n	8007030 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2200      	movs	r2, #0
 8007004:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2201      	movs	r2, #1
 800701a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	79fa      	ldrb	r2, [r7, #7]
 8007022:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f001 fe29 	bl	8008c7c <USBD_LL_Init>
 800702a:	4603      	mov	r3, r0
 800702c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800702e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007042:	2300      	movs	r3, #0
 8007044:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d101      	bne.n	8007050 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800704c:	2303      	movs	r3, #3
 800704e:	e025      	b.n	800709c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	683a      	ldr	r2, [r7, #0]
 8007054:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	32ae      	adds	r2, #174	; 0xae
 8007062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	2b00      	cmp	r3, #0
 800706a:	d00f      	beq.n	800708c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	32ae      	adds	r2, #174	; 0xae
 8007076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707c:	f107 020e 	add.w	r2, r7, #14
 8007080:	4610      	mov	r0, r2
 8007082:	4798      	blx	r3
 8007084:	4602      	mov	r2, r0
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f001 fe31 	bl	8008d14 <USBD_LL_Start>
 80070b2:	4603      	mov	r3, r0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	370c      	adds	r7, #12
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr

080070d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	6078      	str	r0, [r7, #4]
 80070da:	460b      	mov	r3, r1
 80070dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d009      	beq.n	8007100 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	78fa      	ldrb	r2, [r7, #3]
 80070f6:	4611      	mov	r1, r2
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	4798      	blx	r3
 80070fc:	4603      	mov	r3, r0
 80070fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007100:	7bfb      	ldrb	r3, [r7, #15]
}
 8007102:	4618      	mov	r0, r3
 8007104:	3710      	adds	r7, #16
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b084      	sub	sp, #16
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
 8007112:	460b      	mov	r3, r1
 8007114:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007116:	2300      	movs	r3, #0
 8007118:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	78fa      	ldrb	r2, [r7, #3]
 8007124:	4611      	mov	r1, r2
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	4798      	blx	r3
 800712a:	4603      	mov	r3, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d001      	beq.n	8007134 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007130:	2303      	movs	r3, #3
 8007132:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b084      	sub	sp, #16
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	4618      	mov	r0, r3
 8007152:	f001 f938 	bl	80083c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007164:	461a      	mov	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007172:	f003 031f 	and.w	r3, r3, #31
 8007176:	2b02      	cmp	r3, #2
 8007178:	d01a      	beq.n	80071b0 <USBD_LL_SetupStage+0x72>
 800717a:	2b02      	cmp	r3, #2
 800717c:	d822      	bhi.n	80071c4 <USBD_LL_SetupStage+0x86>
 800717e:	2b00      	cmp	r3, #0
 8007180:	d002      	beq.n	8007188 <USBD_LL_SetupStage+0x4a>
 8007182:	2b01      	cmp	r3, #1
 8007184:	d00a      	beq.n	800719c <USBD_LL_SetupStage+0x5e>
 8007186:	e01d      	b.n	80071c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 fb65 	bl	8007860 <USBD_StdDevReq>
 8007196:	4603      	mov	r3, r0
 8007198:	73fb      	strb	r3, [r7, #15]
      break;
 800719a:	e020      	b.n	80071de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fbcd 	bl	8007944 <USBD_StdItfReq>
 80071aa:	4603      	mov	r3, r0
 80071ac:	73fb      	strb	r3, [r7, #15]
      break;
 80071ae:	e016      	b.n	80071de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fc2f 	bl	8007a1c <USBD_StdEPReq>
 80071be:	4603      	mov	r3, r0
 80071c0:	73fb      	strb	r3, [r7, #15]
      break;
 80071c2:	e00c      	b.n	80071de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071ce:	b2db      	uxtb	r3, r3
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f001 fe44 	bl	8008e60 <USBD_LL_StallEP>
 80071d8:	4603      	mov	r3, r0
 80071da:	73fb      	strb	r3, [r7, #15]
      break;
 80071dc:	bf00      	nop
  }

  return ret;
 80071de:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3710      	adds	r7, #16
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b086      	sub	sp, #24
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	60f8      	str	r0, [r7, #12]
 80071f0:	460b      	mov	r3, r1
 80071f2:	607a      	str	r2, [r7, #4]
 80071f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80071f6:	2300      	movs	r3, #0
 80071f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80071fa:	7afb      	ldrb	r3, [r7, #11]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d16e      	bne.n	80072de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007206:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800720e:	2b03      	cmp	r3, #3
 8007210:	f040 8098 	bne.w	8007344 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	689a      	ldr	r2, [r3, #8]
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	429a      	cmp	r2, r3
 800721e:	d913      	bls.n	8007248 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	68db      	ldr	r3, [r3, #12]
 8007228:	1ad2      	subs	r2, r2, r3
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	68da      	ldr	r2, [r3, #12]
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	689b      	ldr	r3, [r3, #8]
 8007236:	4293      	cmp	r3, r2
 8007238:	bf28      	it	cs
 800723a:	4613      	movcs	r3, r2
 800723c:	461a      	mov	r2, r3
 800723e:	6879      	ldr	r1, [r7, #4]
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f001 f9b4 	bl	80085ae <USBD_CtlContinueRx>
 8007246:	e07d      	b.n	8007344 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800724e:	f003 031f 	and.w	r3, r3, #31
 8007252:	2b02      	cmp	r3, #2
 8007254:	d014      	beq.n	8007280 <USBD_LL_DataOutStage+0x98>
 8007256:	2b02      	cmp	r3, #2
 8007258:	d81d      	bhi.n	8007296 <USBD_LL_DataOutStage+0xae>
 800725a:	2b00      	cmp	r3, #0
 800725c:	d002      	beq.n	8007264 <USBD_LL_DataOutStage+0x7c>
 800725e:	2b01      	cmp	r3, #1
 8007260:	d003      	beq.n	800726a <USBD_LL_DataOutStage+0x82>
 8007262:	e018      	b.n	8007296 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	75bb      	strb	r3, [r7, #22]
            break;
 8007268:	e018      	b.n	800729c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007270:	b2db      	uxtb	r3, r3
 8007272:	4619      	mov	r1, r3
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 fa64 	bl	8007742 <USBD_CoreFindIF>
 800727a:	4603      	mov	r3, r0
 800727c:	75bb      	strb	r3, [r7, #22]
            break;
 800727e:	e00d      	b.n	800729c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007286:	b2db      	uxtb	r3, r3
 8007288:	4619      	mov	r1, r3
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f000 fa66 	bl	800775c <USBD_CoreFindEP>
 8007290:	4603      	mov	r3, r0
 8007292:	75bb      	strb	r3, [r7, #22]
            break;
 8007294:	e002      	b.n	800729c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007296:	2300      	movs	r3, #0
 8007298:	75bb      	strb	r3, [r7, #22]
            break;
 800729a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800729c:	7dbb      	ldrb	r3, [r7, #22]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d119      	bne.n	80072d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a8:	b2db      	uxtb	r3, r3
 80072aa:	2b03      	cmp	r3, #3
 80072ac:	d113      	bne.n	80072d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80072ae:	7dba      	ldrb	r2, [r7, #22]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	32ae      	adds	r2, #174	; 0xae
 80072b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00b      	beq.n	80072d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80072be:	7dba      	ldrb	r2, [r7, #22]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80072c6:	7dba      	ldrb	r2, [r7, #22]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	32ae      	adds	r2, #174	; 0xae
 80072cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	68f8      	ldr	r0, [r7, #12]
 80072d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072d6:	68f8      	ldr	r0, [r7, #12]
 80072d8:	f001 f97a 	bl	80085d0 <USBD_CtlSendStatus>
 80072dc:	e032      	b.n	8007344 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80072de:	7afb      	ldrb	r3, [r7, #11]
 80072e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	4619      	mov	r1, r3
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f000 fa37 	bl	800775c <USBD_CoreFindEP>
 80072ee:	4603      	mov	r3, r0
 80072f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072f2:	7dbb      	ldrb	r3, [r7, #22]
 80072f4:	2bff      	cmp	r3, #255	; 0xff
 80072f6:	d025      	beq.n	8007344 <USBD_LL_DataOutStage+0x15c>
 80072f8:	7dbb      	ldrb	r3, [r7, #22]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d122      	bne.n	8007344 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007304:	b2db      	uxtb	r3, r3
 8007306:	2b03      	cmp	r3, #3
 8007308:	d117      	bne.n	800733a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800730a:	7dba      	ldrb	r2, [r7, #22]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	32ae      	adds	r2, #174	; 0xae
 8007310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007314:	699b      	ldr	r3, [r3, #24]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00f      	beq.n	800733a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800731a:	7dba      	ldrb	r2, [r7, #22]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007322:	7dba      	ldrb	r2, [r7, #22]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	32ae      	adds	r2, #174	; 0xae
 8007328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	7afa      	ldrb	r2, [r7, #11]
 8007330:	4611      	mov	r1, r2
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	4798      	blx	r3
 8007336:	4603      	mov	r3, r0
 8007338:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d001      	beq.n	8007344 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007340:	7dfb      	ldrb	r3, [r7, #23]
 8007342:	e000      	b.n	8007346 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007344:	2300      	movs	r3, #0
}
 8007346:	4618      	mov	r0, r3
 8007348:	3718      	adds	r7, #24
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}

0800734e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800734e:	b580      	push	{r7, lr}
 8007350:	b086      	sub	sp, #24
 8007352:	af00      	add	r7, sp, #0
 8007354:	60f8      	str	r0, [r7, #12]
 8007356:	460b      	mov	r3, r1
 8007358:	607a      	str	r2, [r7, #4]
 800735a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800735c:	7afb      	ldrb	r3, [r7, #11]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d16f      	bne.n	8007442 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3314      	adds	r3, #20
 8007366:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800736e:	2b02      	cmp	r3, #2
 8007370:	d15a      	bne.n	8007428 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	689a      	ldr	r2, [r3, #8]
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	429a      	cmp	r2, r3
 800737c:	d914      	bls.n	80073a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	689a      	ldr	r2, [r3, #8]
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	1ad2      	subs	r2, r2, r3
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	461a      	mov	r2, r3
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	68f8      	ldr	r0, [r7, #12]
 8007396:	f001 f8dc 	bl	8008552 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800739a:	2300      	movs	r3, #0
 800739c:	2200      	movs	r2, #0
 800739e:	2100      	movs	r1, #0
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	f001 fe63 	bl	800906c <USBD_LL_PrepareReceive>
 80073a6:	e03f      	b.n	8007428 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	68da      	ldr	r2, [r3, #12]
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d11c      	bne.n	80073ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073bc:	429a      	cmp	r2, r3
 80073be:	d316      	bcc.n	80073ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d20f      	bcs.n	80073ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073ce:	2200      	movs	r2, #0
 80073d0:	2100      	movs	r1, #0
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f001 f8bd 	bl	8008552 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073e0:	2300      	movs	r3, #0
 80073e2:	2200      	movs	r2, #0
 80073e4:	2100      	movs	r1, #0
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f001 fe40 	bl	800906c <USBD_LL_PrepareReceive>
 80073ec:	e01c      	b.n	8007428 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b03      	cmp	r3, #3
 80073f8:	d10f      	bne.n	800741a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d009      	beq.n	800741a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2200      	movs	r2, #0
 800740a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	68f8      	ldr	r0, [r7, #12]
 8007418:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800741a:	2180      	movs	r1, #128	; 0x80
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f001 fd1f 	bl	8008e60 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f001 f8e7 	bl	80085f6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800742e:	2b00      	cmp	r3, #0
 8007430:	d03a      	beq.n	80074a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007432:	68f8      	ldr	r0, [r7, #12]
 8007434:	f7ff fe42 	bl	80070bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007440:	e032      	b.n	80074a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007442:	7afb      	ldrb	r3, [r7, #11]
 8007444:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007448:	b2db      	uxtb	r3, r3
 800744a:	4619      	mov	r1, r3
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f000 f985 	bl	800775c <USBD_CoreFindEP>
 8007452:	4603      	mov	r3, r0
 8007454:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007456:	7dfb      	ldrb	r3, [r7, #23]
 8007458:	2bff      	cmp	r3, #255	; 0xff
 800745a:	d025      	beq.n	80074a8 <USBD_LL_DataInStage+0x15a>
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d122      	bne.n	80074a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b03      	cmp	r3, #3
 800746c:	d11c      	bne.n	80074a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800746e:	7dfa      	ldrb	r2, [r7, #23]
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	32ae      	adds	r2, #174	; 0xae
 8007474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d014      	beq.n	80074a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800747e:	7dfa      	ldrb	r2, [r7, #23]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007486:	7dfa      	ldrb	r2, [r7, #23]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	32ae      	adds	r2, #174	; 0xae
 800748c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	7afa      	ldrb	r2, [r7, #11]
 8007494:	4611      	mov	r1, r2
 8007496:	68f8      	ldr	r0, [r7, #12]
 8007498:	4798      	blx	r3
 800749a:	4603      	mov	r3, r0
 800749c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800749e:	7dbb      	ldrb	r3, [r7, #22]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80074a4:	7dbb      	ldrb	r3, [r7, #22]
 80074a6:	e000      	b.n	80074aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3718      	adds	r7, #24
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80074ba:	2300      	movs	r3, #0
 80074bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d014      	beq.n	8007518 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00e      	beq.n	8007518 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6852      	ldr	r2, [r2, #4]
 8007506:	b2d2      	uxtb	r2, r2
 8007508:	4611      	mov	r1, r2
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	4798      	blx	r3
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d001      	beq.n	8007518 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007514:	2303      	movs	r3, #3
 8007516:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007518:	2340      	movs	r3, #64	; 0x40
 800751a:	2200      	movs	r2, #0
 800751c:	2100      	movs	r1, #0
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f001 fc2a 	bl	8008d78 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2240      	movs	r2, #64	; 0x40
 8007530:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007534:	2340      	movs	r3, #64	; 0x40
 8007536:	2200      	movs	r2, #0
 8007538:	2180      	movs	r1, #128	; 0x80
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f001 fc1c 	bl	8008d78 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2201      	movs	r2, #1
 8007544:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2240      	movs	r2, #64	; 0x40
 800754a:	621a      	str	r2, [r3, #32]

  return ret;
 800754c:	7bfb      	ldrb	r3, [r7, #15]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007556:	b480      	push	{r7}
 8007558:	b083      	sub	sp, #12
 800755a:	af00      	add	r7, sp, #0
 800755c:	6078      	str	r0, [r7, #4]
 800755e:	460b      	mov	r3, r1
 8007560:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	78fa      	ldrb	r2, [r7, #3]
 8007566:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007576:	b480      	push	{r7}
 8007578:	b083      	sub	sp, #12
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007584:	b2db      	uxtb	r3, r3
 8007586:	2b04      	cmp	r3, #4
 8007588:	d006      	beq.n	8007598 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007590:	b2da      	uxtb	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2204      	movs	r2, #4
 800759c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075a0:	2300      	movs	r3, #0
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	370c      	adds	r7, #12
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b083      	sub	sp, #12
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b04      	cmp	r3, #4
 80075c0:	d106      	bne.n	80075d0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80075c8:	b2da      	uxtb	r2, r3
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr

080075de <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ec:	b2db      	uxtb	r3, r3
 80075ee:	2b03      	cmp	r3, #3
 80075f0:	d110      	bne.n	8007614 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007602:	69db      	ldr	r3, [r3, #28]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d005      	beq.n	8007614 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800760e:	69db      	ldr	r3, [r3, #28]
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
 8007626:	460b      	mov	r3, r1
 8007628:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	32ae      	adds	r2, #174	; 0xae
 8007634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d101      	bne.n	8007640 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800763c:	2303      	movs	r3, #3
 800763e:	e01c      	b.n	800767a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b03      	cmp	r3, #3
 800764a:	d115      	bne.n	8007678 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	32ae      	adds	r2, #174	; 0xae
 8007656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800765a:	6a1b      	ldr	r3, [r3, #32]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d00b      	beq.n	8007678 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	32ae      	adds	r2, #174	; 0xae
 800766a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	78fa      	ldrb	r2, [r7, #3]
 8007672:	4611      	mov	r1, r2
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007678:	2300      	movs	r3, #0
}
 800767a:	4618      	mov	r0, r3
 800767c:	3708      	adds	r7, #8
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}

08007682 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007682:	b580      	push	{r7, lr}
 8007684:	b082      	sub	sp, #8
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
 800768a:	460b      	mov	r3, r1
 800768c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	32ae      	adds	r2, #174	; 0xae
 8007698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80076a0:	2303      	movs	r3, #3
 80076a2:	e01c      	b.n	80076de <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b03      	cmp	r3, #3
 80076ae:	d115      	bne.n	80076dc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	32ae      	adds	r2, #174	; 0xae
 80076ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00b      	beq.n	80076dc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	32ae      	adds	r2, #174	; 0xae
 80076ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d4:	78fa      	ldrb	r2, [r7, #3]
 80076d6:	4611      	mov	r1, r2
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3708      	adds	r7, #8
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b083      	sub	sp, #12
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b084      	sub	sp, #16
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007704:	2300      	movs	r3, #0
 8007706:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00e      	beq.n	8007738 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007720:	685b      	ldr	r3, [r3, #4]
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	6852      	ldr	r2, [r2, #4]
 8007726:	b2d2      	uxtb	r2, r2
 8007728:	4611      	mov	r1, r2
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	4798      	blx	r3
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007734:	2303      	movs	r3, #3
 8007736:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007738:	7bfb      	ldrb	r3, [r7, #15]
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007742:	b480      	push	{r7}
 8007744:	b083      	sub	sp, #12
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800774e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007750:	4618      	mov	r0, r3
 8007752:	370c      	adds	r7, #12
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800775c:	b480      	push	{r7}
 800775e:	b083      	sub	sp, #12
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007768:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800776a:	4618      	mov	r0, r3
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b086      	sub	sp, #24
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	460b      	mov	r3, r1
 8007780:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800778a:	2300      	movs	r3, #0
 800778c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	885b      	ldrh	r3, [r3, #2]
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	b29b      	uxth	r3, r3
 800779a:	429a      	cmp	r2, r3
 800779c:	d920      	bls.n	80077e0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80077a6:	e013      	b.n	80077d0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80077a8:	f107 030a 	add.w	r3, r7, #10
 80077ac:	4619      	mov	r1, r3
 80077ae:	6978      	ldr	r0, [r7, #20]
 80077b0:	f000 f81b 	bl	80077ea <USBD_GetNextDesc>
 80077b4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	785b      	ldrb	r3, [r3, #1]
 80077ba:	2b05      	cmp	r3, #5
 80077bc:	d108      	bne.n	80077d0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	789b      	ldrb	r3, [r3, #2]
 80077c6:	78fa      	ldrb	r2, [r7, #3]
 80077c8:	429a      	cmp	r2, r3
 80077ca:	d008      	beq.n	80077de <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80077cc:	2300      	movs	r3, #0
 80077ce:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	885b      	ldrh	r3, [r3, #2]
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	897b      	ldrh	r3, [r7, #10]
 80077d8:	429a      	cmp	r2, r3
 80077da:	d8e5      	bhi.n	80077a8 <USBD_GetEpDesc+0x32>
 80077dc:	e000      	b.n	80077e0 <USBD_GetEpDesc+0x6a>
          break;
 80077de:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80077e0:	693b      	ldr	r3, [r7, #16]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3718      	adds	r7, #24
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b085      	sub	sp, #20
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	881a      	ldrh	r2, [r3, #0]
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	b29b      	uxth	r3, r3
 8007802:	4413      	add	r3, r2
 8007804:	b29a      	uxth	r2, r3
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	461a      	mov	r2, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4413      	add	r3, r2
 8007814:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007816:	68fb      	ldr	r3, [r7, #12]
}
 8007818:	4618      	mov	r0, r3
 800781a:	3714      	adds	r7, #20
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007824:	b480      	push	{r7}
 8007826:	b087      	sub	sp, #28
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	3301      	adds	r3, #1
 800783a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007842:	8a3b      	ldrh	r3, [r7, #16]
 8007844:	021b      	lsls	r3, r3, #8
 8007846:	b21a      	sxth	r2, r3
 8007848:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800784c:	4313      	orrs	r3, r2
 800784e:	b21b      	sxth	r3, r3
 8007850:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007852:	89fb      	ldrh	r3, [r7, #14]
}
 8007854:	4618      	mov	r0, r3
 8007856:	371c      	adds	r7, #28
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr

08007860 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b084      	sub	sp, #16
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007876:	2b40      	cmp	r3, #64	; 0x40
 8007878:	d005      	beq.n	8007886 <USBD_StdDevReq+0x26>
 800787a:	2b40      	cmp	r3, #64	; 0x40
 800787c:	d857      	bhi.n	800792e <USBD_StdDevReq+0xce>
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00f      	beq.n	80078a2 <USBD_StdDevReq+0x42>
 8007882:	2b20      	cmp	r3, #32
 8007884:	d153      	bne.n	800792e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	32ae      	adds	r2, #174	; 0xae
 8007890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	6839      	ldr	r1, [r7, #0]
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	4798      	blx	r3
 800789c:	4603      	mov	r3, r0
 800789e:	73fb      	strb	r3, [r7, #15]
      break;
 80078a0:	e04a      	b.n	8007938 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	785b      	ldrb	r3, [r3, #1]
 80078a6:	2b09      	cmp	r3, #9
 80078a8:	d83b      	bhi.n	8007922 <USBD_StdDevReq+0xc2>
 80078aa:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <USBD_StdDevReq+0x50>)
 80078ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078b0:	08007905 	.word	0x08007905
 80078b4:	08007919 	.word	0x08007919
 80078b8:	08007923 	.word	0x08007923
 80078bc:	0800790f 	.word	0x0800790f
 80078c0:	08007923 	.word	0x08007923
 80078c4:	080078e3 	.word	0x080078e3
 80078c8:	080078d9 	.word	0x080078d9
 80078cc:	08007923 	.word	0x08007923
 80078d0:	080078fb 	.word	0x080078fb
 80078d4:	080078ed 	.word	0x080078ed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078d8:	6839      	ldr	r1, [r7, #0]
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fa3c 	bl	8007d58 <USBD_GetDescriptor>
          break;
 80078e0:	e024      	b.n	800792c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078e2:	6839      	ldr	r1, [r7, #0]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 fbcb 	bl	8008080 <USBD_SetAddress>
          break;
 80078ea:	e01f      	b.n	800792c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80078ec:	6839      	ldr	r1, [r7, #0]
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fc0a 	bl	8008108 <USBD_SetConfig>
 80078f4:	4603      	mov	r3, r0
 80078f6:	73fb      	strb	r3, [r7, #15]
          break;
 80078f8:	e018      	b.n	800792c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fcad 	bl	800825c <USBD_GetConfig>
          break;
 8007902:	e013      	b.n	800792c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fcde 	bl	80082c8 <USBD_GetStatus>
          break;
 800790c:	e00e      	b.n	800792c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fd0d 	bl	8008330 <USBD_SetFeature>
          break;
 8007916:	e009      	b.n	800792c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007918:	6839      	ldr	r1, [r7, #0]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 fd31 	bl	8008382 <USBD_ClrFeature>
          break;
 8007920:	e004      	b.n	800792c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fd88 	bl	800843a <USBD_CtlError>
          break;
 800792a:	bf00      	nop
      }
      break;
 800792c:	e004      	b.n	8007938 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800792e:	6839      	ldr	r1, [r7, #0]
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fd82 	bl	800843a <USBD_CtlError>
      break;
 8007936:	bf00      	nop
  }

  return ret;
 8007938:	7bfb      	ldrb	r3, [r7, #15]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop

08007944 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b084      	sub	sp, #16
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
 800794c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800795a:	2b40      	cmp	r3, #64	; 0x40
 800795c:	d005      	beq.n	800796a <USBD_StdItfReq+0x26>
 800795e:	2b40      	cmp	r3, #64	; 0x40
 8007960:	d852      	bhi.n	8007a08 <USBD_StdItfReq+0xc4>
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <USBD_StdItfReq+0x26>
 8007966:	2b20      	cmp	r3, #32
 8007968:	d14e      	bne.n	8007a08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007970:	b2db      	uxtb	r3, r3
 8007972:	3b01      	subs	r3, #1
 8007974:	2b02      	cmp	r3, #2
 8007976:	d840      	bhi.n	80079fa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	889b      	ldrh	r3, [r3, #4]
 800797c:	b2db      	uxtb	r3, r3
 800797e:	2b01      	cmp	r3, #1
 8007980:	d836      	bhi.n	80079f0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	889b      	ldrh	r3, [r3, #4]
 8007986:	b2db      	uxtb	r3, r3
 8007988:	4619      	mov	r1, r3
 800798a:	6878      	ldr	r0, [r7, #4]
 800798c:	f7ff fed9 	bl	8007742 <USBD_CoreFindIF>
 8007990:	4603      	mov	r3, r0
 8007992:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007994:	7bbb      	ldrb	r3, [r7, #14]
 8007996:	2bff      	cmp	r3, #255	; 0xff
 8007998:	d01d      	beq.n	80079d6 <USBD_StdItfReq+0x92>
 800799a:	7bbb      	ldrb	r3, [r7, #14]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d11a      	bne.n	80079d6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80079a0:	7bba      	ldrb	r2, [r7, #14]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	32ae      	adds	r2, #174	; 0xae
 80079a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00f      	beq.n	80079d0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80079b0:	7bba      	ldrb	r2, [r7, #14]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079b8:	7bba      	ldrb	r2, [r7, #14]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	32ae      	adds	r2, #174	; 0xae
 80079be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	6839      	ldr	r1, [r7, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	4798      	blx	r3
 80079ca:	4603      	mov	r3, r0
 80079cc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079ce:	e004      	b.n	80079da <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80079d0:	2303      	movs	r3, #3
 80079d2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079d4:	e001      	b.n	80079da <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80079d6:	2303      	movs	r3, #3
 80079d8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	88db      	ldrh	r3, [r3, #6]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d110      	bne.n	8007a04 <USBD_StdItfReq+0xc0>
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d10d      	bne.n	8007a04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fdf1 	bl	80085d0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80079ee:	e009      	b.n	8007a04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fd21 	bl	800843a <USBD_CtlError>
          break;
 80079f8:	e004      	b.n	8007a04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 fd1c 	bl	800843a <USBD_CtlError>
          break;
 8007a02:	e000      	b.n	8007a06 <USBD_StdItfReq+0xc2>
          break;
 8007a04:	bf00      	nop
      }
      break;
 8007a06:	e004      	b.n	8007a12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fd15 	bl	800843a <USBD_CtlError>
      break;
 8007a10:	bf00      	nop
  }

  return ret;
 8007a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a26:	2300      	movs	r3, #0
 8007a28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	889b      	ldrh	r3, [r3, #4]
 8007a2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a38:	2b40      	cmp	r3, #64	; 0x40
 8007a3a:	d007      	beq.n	8007a4c <USBD_StdEPReq+0x30>
 8007a3c:	2b40      	cmp	r3, #64	; 0x40
 8007a3e:	f200 817f 	bhi.w	8007d40 <USBD_StdEPReq+0x324>
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d02a      	beq.n	8007a9c <USBD_StdEPReq+0x80>
 8007a46:	2b20      	cmp	r3, #32
 8007a48:	f040 817a 	bne.w	8007d40 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a4c:	7bbb      	ldrb	r3, [r7, #14]
 8007a4e:	4619      	mov	r1, r3
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f7ff fe83 	bl	800775c <USBD_CoreFindEP>
 8007a56:	4603      	mov	r3, r0
 8007a58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a5a:	7b7b      	ldrb	r3, [r7, #13]
 8007a5c:	2bff      	cmp	r3, #255	; 0xff
 8007a5e:	f000 8174 	beq.w	8007d4a <USBD_StdEPReq+0x32e>
 8007a62:	7b7b      	ldrb	r3, [r7, #13]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f040 8170 	bne.w	8007d4a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a6a:	7b7a      	ldrb	r2, [r7, #13]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a72:	7b7a      	ldrb	r2, [r7, #13]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	32ae      	adds	r2, #174	; 0xae
 8007a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 8163 	beq.w	8007d4a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a84:	7b7a      	ldrb	r2, [r7, #13]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	32ae      	adds	r2, #174	; 0xae
 8007a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	6839      	ldr	r1, [r7, #0]
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	4798      	blx	r3
 8007a96:	4603      	mov	r3, r0
 8007a98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007a9a:	e156      	b.n	8007d4a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	785b      	ldrb	r3, [r3, #1]
 8007aa0:	2b03      	cmp	r3, #3
 8007aa2:	d008      	beq.n	8007ab6 <USBD_StdEPReq+0x9a>
 8007aa4:	2b03      	cmp	r3, #3
 8007aa6:	f300 8145 	bgt.w	8007d34 <USBD_StdEPReq+0x318>
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 809b 	beq.w	8007be6 <USBD_StdEPReq+0x1ca>
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d03c      	beq.n	8007b2e <USBD_StdEPReq+0x112>
 8007ab4:	e13e      	b.n	8007d34 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b02      	cmp	r3, #2
 8007ac0:	d002      	beq.n	8007ac8 <USBD_StdEPReq+0xac>
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d016      	beq.n	8007af4 <USBD_StdEPReq+0xd8>
 8007ac6:	e02c      	b.n	8007b22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d00d      	beq.n	8007aea <USBD_StdEPReq+0xce>
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2b80      	cmp	r3, #128	; 0x80
 8007ad2:	d00a      	beq.n	8007aea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 f9c1 	bl	8008e60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ade:	2180      	movs	r1, #128	; 0x80
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f001 f9bd 	bl	8008e60 <USBD_LL_StallEP>
 8007ae6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007ae8:	e020      	b.n	8007b2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 fca4 	bl	800843a <USBD_CtlError>
              break;
 8007af2:	e01b      	b.n	8007b2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	885b      	ldrh	r3, [r3, #2]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d10e      	bne.n	8007b1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007afc:	7bbb      	ldrb	r3, [r7, #14]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00b      	beq.n	8007b1a <USBD_StdEPReq+0xfe>
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
 8007b04:	2b80      	cmp	r3, #128	; 0x80
 8007b06:	d008      	beq.n	8007b1a <USBD_StdEPReq+0xfe>
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	88db      	ldrh	r3, [r3, #6]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d104      	bne.n	8007b1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b10:	7bbb      	ldrb	r3, [r7, #14]
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 f9a3 	bl	8008e60 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fd58 	bl	80085d0 <USBD_CtlSendStatus>

              break;
 8007b20:	e004      	b.n	8007b2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b22:	6839      	ldr	r1, [r7, #0]
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 fc88 	bl	800843a <USBD_CtlError>
              break;
 8007b2a:	bf00      	nop
          }
          break;
 8007b2c:	e107      	b.n	8007d3e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b34:	b2db      	uxtb	r3, r3
 8007b36:	2b02      	cmp	r3, #2
 8007b38:	d002      	beq.n	8007b40 <USBD_StdEPReq+0x124>
 8007b3a:	2b03      	cmp	r3, #3
 8007b3c:	d016      	beq.n	8007b6c <USBD_StdEPReq+0x150>
 8007b3e:	e04b      	b.n	8007bd8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b40:	7bbb      	ldrb	r3, [r7, #14]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00d      	beq.n	8007b62 <USBD_StdEPReq+0x146>
 8007b46:	7bbb      	ldrb	r3, [r7, #14]
 8007b48:	2b80      	cmp	r3, #128	; 0x80
 8007b4a:	d00a      	beq.n	8007b62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 f985 	bl	8008e60 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b56:	2180      	movs	r1, #128	; 0x80
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f001 f981 	bl	8008e60 <USBD_LL_StallEP>
 8007b5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b60:	e040      	b.n	8007be4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b62:	6839      	ldr	r1, [r7, #0]
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fc68 	bl	800843a <USBD_CtlError>
              break;
 8007b6a:	e03b      	b.n	8007be4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	885b      	ldrh	r3, [r3, #2]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d136      	bne.n	8007be2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d004      	beq.n	8007b88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
 8007b80:	4619      	mov	r1, r3
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 f9a2 	bl	8008ecc <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fd21 	bl	80085d0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
 8007b90:	4619      	mov	r1, r3
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f7ff fde2 	bl	800775c <USBD_CoreFindEP>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007b9c:	7b7b      	ldrb	r3, [r7, #13]
 8007b9e:	2bff      	cmp	r3, #255	; 0xff
 8007ba0:	d01f      	beq.n	8007be2 <USBD_StdEPReq+0x1c6>
 8007ba2:	7b7b      	ldrb	r3, [r7, #13]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d11c      	bne.n	8007be2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007ba8:	7b7a      	ldrb	r2, [r7, #13]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007bb0:	7b7a      	ldrb	r2, [r7, #13]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	32ae      	adds	r2, #174	; 0xae
 8007bb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d010      	beq.n	8007be2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007bc0:	7b7a      	ldrb	r2, [r7, #13]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	32ae      	adds	r2, #174	; 0xae
 8007bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	6839      	ldr	r1, [r7, #0]
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	4798      	blx	r3
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007bd6:	e004      	b.n	8007be2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007bd8:	6839      	ldr	r1, [r7, #0]
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fc2d 	bl	800843a <USBD_CtlError>
              break;
 8007be0:	e000      	b.n	8007be4 <USBD_StdEPReq+0x1c8>
              break;
 8007be2:	bf00      	nop
          }
          break;
 8007be4:	e0ab      	b.n	8007d3e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d002      	beq.n	8007bf8 <USBD_StdEPReq+0x1dc>
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d032      	beq.n	8007c5c <USBD_StdEPReq+0x240>
 8007bf6:	e097      	b.n	8007d28 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d007      	beq.n	8007c0e <USBD_StdEPReq+0x1f2>
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	2b80      	cmp	r3, #128	; 0x80
 8007c02:	d004      	beq.n	8007c0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007c04:	6839      	ldr	r1, [r7, #0]
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 fc17 	bl	800843a <USBD_CtlError>
                break;
 8007c0c:	e091      	b.n	8007d32 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	da0b      	bge.n	8007c2e <USBD_StdEPReq+0x212>
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	009b      	lsls	r3, r3, #2
 8007c24:	3310      	adds	r3, #16
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	4413      	add	r3, r2
 8007c2a:	3304      	adds	r3, #4
 8007c2c:	e00b      	b.n	8007c46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	4413      	add	r3, r2
 8007c44:	3304      	adds	r3, #4
 8007c46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2202      	movs	r2, #2
 8007c52:	4619      	mov	r1, r3
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fc61 	bl	800851c <USBD_CtlSendData>
              break;
 8007c5a:	e06a      	b.n	8007d32 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	da11      	bge.n	8007c88 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	f003 020f 	and.w	r2, r3, #15
 8007c6a:	6879      	ldr	r1, [r7, #4]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4413      	add	r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	440b      	add	r3, r1
 8007c76:	3324      	adds	r3, #36	; 0x24
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d117      	bne.n	8007cae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fbda 	bl	800843a <USBD_CtlError>
                  break;
 8007c86:	e054      	b.n	8007d32 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007c88:	7bbb      	ldrb	r3, [r7, #14]
 8007c8a:	f003 020f 	and.w	r2, r3, #15
 8007c8e:	6879      	ldr	r1, [r7, #4]
 8007c90:	4613      	mov	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	009b      	lsls	r3, r3, #2
 8007c98:	440b      	add	r3, r1
 8007c9a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007c9e:	881b      	ldrh	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d104      	bne.n	8007cae <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fbc7 	bl	800843a <USBD_CtlError>
                  break;
 8007cac:	e041      	b.n	8007d32 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	da0b      	bge.n	8007cce <USBD_StdEPReq+0x2b2>
 8007cb6:	7bbb      	ldrb	r3, [r7, #14]
 8007cb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cbc:	4613      	mov	r3, r2
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	3310      	adds	r3, #16
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	4413      	add	r3, r2
 8007cca:	3304      	adds	r3, #4
 8007ccc:	e00b      	b.n	8007ce6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007cce:	7bbb      	ldrb	r3, [r7, #14]
 8007cd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	3304      	adds	r3, #4
 8007ce6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007ce8:	7bbb      	ldrb	r3, [r7, #14]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d002      	beq.n	8007cf4 <USBD_StdEPReq+0x2d8>
 8007cee:	7bbb      	ldrb	r3, [r7, #14]
 8007cf0:	2b80      	cmp	r3, #128	; 0x80
 8007cf2:	d103      	bne.n	8007cfc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	601a      	str	r2, [r3, #0]
 8007cfa:	e00e      	b.n	8007d1a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007cfc:	7bbb      	ldrb	r3, [r7, #14]
 8007cfe:	4619      	mov	r1, r3
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f001 f919 	bl	8008f38 <USBD_LL_IsStallEP>
 8007d06:	4603      	mov	r3, r0
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d003      	beq.n	8007d14 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	e002      	b.n	8007d1a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2200      	movs	r2, #0
 8007d18:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2202      	movs	r2, #2
 8007d1e:	4619      	mov	r1, r3
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 fbfb 	bl	800851c <USBD_CtlSendData>
              break;
 8007d26:	e004      	b.n	8007d32 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fb85 	bl	800843a <USBD_CtlError>
              break;
 8007d30:	bf00      	nop
          }
          break;
 8007d32:	e004      	b.n	8007d3e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d34:	6839      	ldr	r1, [r7, #0]
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fb7f 	bl	800843a <USBD_CtlError>
          break;
 8007d3c:	bf00      	nop
      }
      break;
 8007d3e:	e005      	b.n	8007d4c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fb79 	bl	800843a <USBD_CtlError>
      break;
 8007d48:	e000      	b.n	8007d4c <USBD_StdEPReq+0x330>
      break;
 8007d4a:	bf00      	nop
  }

  return ret;
 8007d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
	...

08007d58 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d62:	2300      	movs	r3, #0
 8007d64:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	885b      	ldrh	r3, [r3, #2]
 8007d72:	0a1b      	lsrs	r3, r3, #8
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	3b01      	subs	r3, #1
 8007d78:	2b0e      	cmp	r3, #14
 8007d7a:	f200 8152 	bhi.w	8008022 <USBD_GetDescriptor+0x2ca>
 8007d7e:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <USBD_GetDescriptor+0x2c>)
 8007d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d84:	08007df5 	.word	0x08007df5
 8007d88:	08007e0d 	.word	0x08007e0d
 8007d8c:	08007e4d 	.word	0x08007e4d
 8007d90:	08008023 	.word	0x08008023
 8007d94:	08008023 	.word	0x08008023
 8007d98:	08007fc3 	.word	0x08007fc3
 8007d9c:	08007fef 	.word	0x08007fef
 8007da0:	08008023 	.word	0x08008023
 8007da4:	08008023 	.word	0x08008023
 8007da8:	08008023 	.word	0x08008023
 8007dac:	08008023 	.word	0x08008023
 8007db0:	08008023 	.word	0x08008023
 8007db4:	08008023 	.word	0x08008023
 8007db8:	08008023 	.word	0x08008023
 8007dbc:	08007dc1 	.word	0x08007dc1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d00b      	beq.n	8007de4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dd2:	69db      	ldr	r3, [r3, #28]
 8007dd4:	687a      	ldr	r2, [r7, #4]
 8007dd6:	7c12      	ldrb	r2, [r2, #16]
 8007dd8:	f107 0108 	add.w	r1, r7, #8
 8007ddc:	4610      	mov	r0, r2
 8007dde:	4798      	blx	r3
 8007de0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007de2:	e126      	b.n	8008032 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007de4:	6839      	ldr	r1, [r7, #0]
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 fb27 	bl	800843a <USBD_CtlError>
        err++;
 8007dec:	7afb      	ldrb	r3, [r7, #11]
 8007dee:	3301      	adds	r3, #1
 8007df0:	72fb      	strb	r3, [r7, #11]
      break;
 8007df2:	e11e      	b.n	8008032 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	7c12      	ldrb	r2, [r2, #16]
 8007e00:	f107 0108 	add.w	r1, r7, #8
 8007e04:	4610      	mov	r0, r2
 8007e06:	4798      	blx	r3
 8007e08:	60f8      	str	r0, [r7, #12]
      break;
 8007e0a:	e112      	b.n	8008032 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	7c1b      	ldrb	r3, [r3, #16]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d10d      	bne.n	8007e30 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e1c:	f107 0208 	add.w	r2, r7, #8
 8007e20:	4610      	mov	r0, r2
 8007e22:	4798      	blx	r3
 8007e24:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e2e:	e100      	b.n	8008032 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e38:	f107 0208 	add.w	r2, r7, #8
 8007e3c:	4610      	mov	r0, r2
 8007e3e:	4798      	blx	r3
 8007e40:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	3301      	adds	r3, #1
 8007e46:	2202      	movs	r2, #2
 8007e48:	701a      	strb	r2, [r3, #0]
      break;
 8007e4a:	e0f2      	b.n	8008032 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	885b      	ldrh	r3, [r3, #2]
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b05      	cmp	r3, #5
 8007e54:	f200 80ac 	bhi.w	8007fb0 <USBD_GetDescriptor+0x258>
 8007e58:	a201      	add	r2, pc, #4	; (adr r2, 8007e60 <USBD_GetDescriptor+0x108>)
 8007e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e5e:	bf00      	nop
 8007e60:	08007e79 	.word	0x08007e79
 8007e64:	08007ead 	.word	0x08007ead
 8007e68:	08007ee1 	.word	0x08007ee1
 8007e6c:	08007f15 	.word	0x08007f15
 8007e70:	08007f49 	.word	0x08007f49
 8007e74:	08007f7d 	.word	0x08007f7d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00b      	beq.n	8007e9c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	687a      	ldr	r2, [r7, #4]
 8007e8e:	7c12      	ldrb	r2, [r2, #16]
 8007e90:	f107 0108 	add.w	r1, r7, #8
 8007e94:	4610      	mov	r0, r2
 8007e96:	4798      	blx	r3
 8007e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e9a:	e091      	b.n	8007fc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e9c:	6839      	ldr	r1, [r7, #0]
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 facb 	bl	800843a <USBD_CtlError>
            err++;
 8007ea4:	7afb      	ldrb	r3, [r7, #11]
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8007eaa:	e089      	b.n	8007fc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d00b      	beq.n	8007ed0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	7c12      	ldrb	r2, [r2, #16]
 8007ec4:	f107 0108 	add.w	r1, r7, #8
 8007ec8:	4610      	mov	r0, r2
 8007eca:	4798      	blx	r3
 8007ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ece:	e077      	b.n	8007fc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fab1 	bl	800843a <USBD_CtlError>
            err++;
 8007ed8:	7afb      	ldrb	r3, [r7, #11]
 8007eda:	3301      	adds	r3, #1
 8007edc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ede:	e06f      	b.n	8007fc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ee6:	68db      	ldr	r3, [r3, #12]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00b      	beq.n	8007f04 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	7c12      	ldrb	r2, [r2, #16]
 8007ef8:	f107 0108 	add.w	r1, r7, #8
 8007efc:	4610      	mov	r0, r2
 8007efe:	4798      	blx	r3
 8007f00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f02:	e05d      	b.n	8007fc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f04:	6839      	ldr	r1, [r7, #0]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f000 fa97 	bl	800843a <USBD_CtlError>
            err++;
 8007f0c:	7afb      	ldrb	r3, [r7, #11]
 8007f0e:	3301      	adds	r3, #1
 8007f10:	72fb      	strb	r3, [r7, #11]
          break;
 8007f12:	e055      	b.n	8007fc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f1a:	691b      	ldr	r3, [r3, #16]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00b      	beq.n	8007f38 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f26:	691b      	ldr	r3, [r3, #16]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	7c12      	ldrb	r2, [r2, #16]
 8007f2c:	f107 0108 	add.w	r1, r7, #8
 8007f30:	4610      	mov	r0, r2
 8007f32:	4798      	blx	r3
 8007f34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f36:	e043      	b.n	8007fc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fa7d 	bl	800843a <USBD_CtlError>
            err++;
 8007f40:	7afb      	ldrb	r3, [r7, #11]
 8007f42:	3301      	adds	r3, #1
 8007f44:	72fb      	strb	r3, [r7, #11]
          break;
 8007f46:	e03b      	b.n	8007fc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f4e:	695b      	ldr	r3, [r3, #20]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d00b      	beq.n	8007f6c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f5a:	695b      	ldr	r3, [r3, #20]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	7c12      	ldrb	r2, [r2, #16]
 8007f60:	f107 0108 	add.w	r1, r7, #8
 8007f64:	4610      	mov	r0, r2
 8007f66:	4798      	blx	r3
 8007f68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f6a:	e029      	b.n	8007fc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f6c:	6839      	ldr	r1, [r7, #0]
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f000 fa63 	bl	800843a <USBD_CtlError>
            err++;
 8007f74:	7afb      	ldrb	r3, [r7, #11]
 8007f76:	3301      	adds	r3, #1
 8007f78:	72fb      	strb	r3, [r7, #11]
          break;
 8007f7a:	e021      	b.n	8007fc0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f82:	699b      	ldr	r3, [r3, #24]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00b      	beq.n	8007fa0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f8e:	699b      	ldr	r3, [r3, #24]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	7c12      	ldrb	r2, [r2, #16]
 8007f94:	f107 0108 	add.w	r1, r7, #8
 8007f98:	4610      	mov	r0, r2
 8007f9a:	4798      	blx	r3
 8007f9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f9e:	e00f      	b.n	8007fc0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fa49 	bl	800843a <USBD_CtlError>
            err++;
 8007fa8:	7afb      	ldrb	r3, [r7, #11]
 8007faa:	3301      	adds	r3, #1
 8007fac:	72fb      	strb	r3, [r7, #11]
          break;
 8007fae:	e007      	b.n	8007fc0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007fb0:	6839      	ldr	r1, [r7, #0]
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 fa41 	bl	800843a <USBD_CtlError>
          err++;
 8007fb8:	7afb      	ldrb	r3, [r7, #11]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007fbe:	bf00      	nop
      }
      break;
 8007fc0:	e037      	b.n	8008032 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	7c1b      	ldrb	r3, [r3, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d109      	bne.n	8007fde <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd2:	f107 0208 	add.w	r2, r7, #8
 8007fd6:	4610      	mov	r0, r2
 8007fd8:	4798      	blx	r3
 8007fda:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007fdc:	e029      	b.n	8008032 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007fde:	6839      	ldr	r1, [r7, #0]
 8007fe0:	6878      	ldr	r0, [r7, #4]
 8007fe2:	f000 fa2a 	bl	800843a <USBD_CtlError>
        err++;
 8007fe6:	7afb      	ldrb	r3, [r7, #11]
 8007fe8:	3301      	adds	r3, #1
 8007fea:	72fb      	strb	r3, [r7, #11]
      break;
 8007fec:	e021      	b.n	8008032 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	7c1b      	ldrb	r3, [r3, #16]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10d      	bne.n	8008012 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffe:	f107 0208 	add.w	r2, r7, #8
 8008002:	4610      	mov	r0, r2
 8008004:	4798      	blx	r3
 8008006:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3301      	adds	r3, #1
 800800c:	2207      	movs	r2, #7
 800800e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008010:	e00f      	b.n	8008032 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008012:	6839      	ldr	r1, [r7, #0]
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 fa10 	bl	800843a <USBD_CtlError>
        err++;
 800801a:	7afb      	ldrb	r3, [r7, #11]
 800801c:	3301      	adds	r3, #1
 800801e:	72fb      	strb	r3, [r7, #11]
      break;
 8008020:	e007      	b.n	8008032 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008022:	6839      	ldr	r1, [r7, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fa08 	bl	800843a <USBD_CtlError>
      err++;
 800802a:	7afb      	ldrb	r3, [r7, #11]
 800802c:	3301      	adds	r3, #1
 800802e:	72fb      	strb	r3, [r7, #11]
      break;
 8008030:	bf00      	nop
  }

  if (err != 0U)
 8008032:	7afb      	ldrb	r3, [r7, #11]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d11e      	bne.n	8008076 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	88db      	ldrh	r3, [r3, #6]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d016      	beq.n	800806e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008040:	893b      	ldrh	r3, [r7, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00e      	beq.n	8008064 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	88da      	ldrh	r2, [r3, #6]
 800804a:	893b      	ldrh	r3, [r7, #8]
 800804c:	4293      	cmp	r3, r2
 800804e:	bf28      	it	cs
 8008050:	4613      	movcs	r3, r2
 8008052:	b29b      	uxth	r3, r3
 8008054:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008056:	893b      	ldrh	r3, [r7, #8]
 8008058:	461a      	mov	r2, r3
 800805a:	68f9      	ldr	r1, [r7, #12]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fa5d 	bl	800851c <USBD_CtlSendData>
 8008062:	e009      	b.n	8008078 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 f9e7 	bl	800843a <USBD_CtlError>
 800806c:	e004      	b.n	8008078 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 faae 	bl	80085d0 <USBD_CtlSendStatus>
 8008074:	e000      	b.n	8008078 <USBD_GetDescriptor+0x320>
    return;
 8008076:	bf00      	nop
  }
}
 8008078:	3710      	adds	r7, #16
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop

08008080 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	889b      	ldrh	r3, [r3, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d131      	bne.n	80080f6 <USBD_SetAddress+0x76>
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	88db      	ldrh	r3, [r3, #6]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d12d      	bne.n	80080f6 <USBD_SetAddress+0x76>
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	885b      	ldrh	r3, [r3, #2]
 800809e:	2b7f      	cmp	r3, #127	; 0x7f
 80080a0:	d829      	bhi.n	80080f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	885b      	ldrh	r3, [r3, #2]
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d104      	bne.n	80080c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f9bc 	bl	800843a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c2:	e01d      	b.n	8008100 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	7bfa      	ldrb	r2, [r7, #15]
 80080c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080cc:	7bfb      	ldrb	r3, [r7, #15]
 80080ce:	4619      	mov	r1, r3
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 ff5d 	bl	8008f90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 fa7a 	bl	80085d0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d004      	beq.n	80080ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2202      	movs	r2, #2
 80080e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080ea:	e009      	b.n	8008100 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080f4:	e004      	b.n	8008100 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80080f6:	6839      	ldr	r1, [r7, #0]
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f000 f99e 	bl	800843a <USBD_CtlError>
  }
}
 80080fe:	bf00      	nop
 8008100:	bf00      	nop
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	885b      	ldrh	r3, [r3, #2]
 800811a:	b2da      	uxtb	r2, r3
 800811c:	4b4e      	ldr	r3, [pc, #312]	; (8008258 <USBD_SetConfig+0x150>)
 800811e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008120:	4b4d      	ldr	r3, [pc, #308]	; (8008258 <USBD_SetConfig+0x150>)
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b01      	cmp	r3, #1
 8008126:	d905      	bls.n	8008134 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f985 	bl	800843a <USBD_CtlError>
    return USBD_FAIL;
 8008130:	2303      	movs	r3, #3
 8008132:	e08c      	b.n	800824e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b02      	cmp	r3, #2
 800813e:	d002      	beq.n	8008146 <USBD_SetConfig+0x3e>
 8008140:	2b03      	cmp	r3, #3
 8008142:	d029      	beq.n	8008198 <USBD_SetConfig+0x90>
 8008144:	e075      	b.n	8008232 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008146:	4b44      	ldr	r3, [pc, #272]	; (8008258 <USBD_SetConfig+0x150>)
 8008148:	781b      	ldrb	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d020      	beq.n	8008190 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800814e:	4b42      	ldr	r3, [pc, #264]	; (8008258 <USBD_SetConfig+0x150>)
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	461a      	mov	r2, r3
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008158:	4b3f      	ldr	r3, [pc, #252]	; (8008258 <USBD_SetConfig+0x150>)
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	4619      	mov	r1, r3
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f7fe ffb7 	bl	80070d2 <USBD_SetClassConfig>
 8008164:	4603      	mov	r3, r0
 8008166:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008168:	7bfb      	ldrb	r3, [r7, #15]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d008      	beq.n	8008180 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f962 	bl	800843a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2202      	movs	r2, #2
 800817a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800817e:	e065      	b.n	800824c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f000 fa25 	bl	80085d0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	2203      	movs	r2, #3
 800818a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800818e:	e05d      	b.n	800824c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008190:	6878      	ldr	r0, [r7, #4]
 8008192:	f000 fa1d 	bl	80085d0 <USBD_CtlSendStatus>
      break;
 8008196:	e059      	b.n	800824c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008198:	4b2f      	ldr	r3, [pc, #188]	; (8008258 <USBD_SetConfig+0x150>)
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d112      	bne.n	80081c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2202      	movs	r2, #2
 80081a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80081a8:	4b2b      	ldr	r3, [pc, #172]	; (8008258 <USBD_SetConfig+0x150>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	461a      	mov	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081b2:	4b29      	ldr	r3, [pc, #164]	; (8008258 <USBD_SetConfig+0x150>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	4619      	mov	r1, r3
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7fe ffa6 	bl	800710a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 fa06 	bl	80085d0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081c4:	e042      	b.n	800824c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80081c6:	4b24      	ldr	r3, [pc, #144]	; (8008258 <USBD_SetConfig+0x150>)
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d02a      	beq.n	800822a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	4619      	mov	r1, r3
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7fe ff94 	bl	800710a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80081e2:	4b1d      	ldr	r3, [pc, #116]	; (8008258 <USBD_SetConfig+0x150>)
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	461a      	mov	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80081ec:	4b1a      	ldr	r3, [pc, #104]	; (8008258 <USBD_SetConfig+0x150>)
 80081ee:	781b      	ldrb	r3, [r3, #0]
 80081f0:	4619      	mov	r1, r3
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7fe ff6d 	bl	80070d2 <USBD_SetClassConfig>
 80081f8:	4603      	mov	r3, r0
 80081fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d00f      	beq.n	8008222 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008202:	6839      	ldr	r1, [r7, #0]
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f918 	bl	800843a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	b2db      	uxtb	r3, r3
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7fe ff79 	bl	800710a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008220:	e014      	b.n	800824c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 f9d4 	bl	80085d0 <USBD_CtlSendStatus>
      break;
 8008228:	e010      	b.n	800824c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f9d0 	bl	80085d0 <USBD_CtlSendStatus>
      break;
 8008230:	e00c      	b.n	800824c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008232:	6839      	ldr	r1, [r7, #0]
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 f900 	bl	800843a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800823a:	4b07      	ldr	r3, [pc, #28]	; (8008258 <USBD_SetConfig+0x150>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f7fe ff62 	bl	800710a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008246:	2303      	movs	r3, #3
 8008248:	73fb      	strb	r3, [r7, #15]
      break;
 800824a:	bf00      	nop
  }

  return ret;
 800824c:	7bfb      	ldrb	r3, [r7, #15]
}
 800824e:	4618      	mov	r0, r3
 8008250:	3710      	adds	r7, #16
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	200003a4 	.word	0x200003a4

0800825c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	88db      	ldrh	r3, [r3, #6]
 800826a:	2b01      	cmp	r3, #1
 800826c:	d004      	beq.n	8008278 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800826e:	6839      	ldr	r1, [r7, #0]
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f8e2 	bl	800843a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008276:	e023      	b.n	80082c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b02      	cmp	r3, #2
 8008282:	dc02      	bgt.n	800828a <USBD_GetConfig+0x2e>
 8008284:	2b00      	cmp	r3, #0
 8008286:	dc03      	bgt.n	8008290 <USBD_GetConfig+0x34>
 8008288:	e015      	b.n	80082b6 <USBD_GetConfig+0x5a>
 800828a:	2b03      	cmp	r3, #3
 800828c:	d00b      	beq.n	80082a6 <USBD_GetConfig+0x4a>
 800828e:	e012      	b.n	80082b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2200      	movs	r2, #0
 8008294:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3308      	adds	r3, #8
 800829a:	2201      	movs	r2, #1
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f93c 	bl	800851c <USBD_CtlSendData>
        break;
 80082a4:	e00c      	b.n	80082c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	3304      	adds	r3, #4
 80082aa:	2201      	movs	r2, #1
 80082ac:	4619      	mov	r1, r3
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f934 	bl	800851c <USBD_CtlSendData>
        break;
 80082b4:	e004      	b.n	80082c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f8be 	bl	800843a <USBD_CtlError>
        break;
 80082be:	bf00      	nop
}
 80082c0:	bf00      	nop
 80082c2:	3708      	adds	r7, #8
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	3b01      	subs	r3, #1
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d81e      	bhi.n	800831e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	88db      	ldrh	r3, [r3, #6]
 80082e4:	2b02      	cmp	r3, #2
 80082e6:	d004      	beq.n	80082f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80082e8:	6839      	ldr	r1, [r7, #0]
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f000 f8a5 	bl	800843a <USBD_CtlError>
        break;
 80082f0:	e01a      	b.n	8008328 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d005      	beq.n	800830e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	f043 0202 	orr.w	r2, r3, #2
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	330c      	adds	r3, #12
 8008312:	2202      	movs	r2, #2
 8008314:	4619      	mov	r1, r3
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f900 	bl	800851c <USBD_CtlSendData>
      break;
 800831c:	e004      	b.n	8008328 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800831e:	6839      	ldr	r1, [r7, #0]
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f000 f88a 	bl	800843a <USBD_CtlError>
      break;
 8008326:	bf00      	nop
  }
}
 8008328:	bf00      	nop
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
 8008338:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	885b      	ldrh	r3, [r3, #2]
 800833e:	2b01      	cmp	r3, #1
 8008340:	d107      	bne.n	8008352 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f000 f940 	bl	80085d0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008350:	e013      	b.n	800837a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	885b      	ldrh	r3, [r3, #2]
 8008356:	2b02      	cmp	r3, #2
 8008358:	d10b      	bne.n	8008372 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	889b      	ldrh	r3, [r3, #4]
 800835e:	0a1b      	lsrs	r3, r3, #8
 8008360:	b29b      	uxth	r3, r3
 8008362:	b2da      	uxtb	r2, r3
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f930 	bl	80085d0 <USBD_CtlSendStatus>
}
 8008370:	e003      	b.n	800837a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f860 	bl	800843a <USBD_CtlError>
}
 800837a:	bf00      	nop
 800837c:	3708      	adds	r7, #8
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b082      	sub	sp, #8
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008392:	b2db      	uxtb	r3, r3
 8008394:	3b01      	subs	r3, #1
 8008396:	2b02      	cmp	r3, #2
 8008398:	d80b      	bhi.n	80083b2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	885b      	ldrh	r3, [r3, #2]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d10c      	bne.n	80083bc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f910 	bl	80085d0 <USBD_CtlSendStatus>
      }
      break;
 80083b0:	e004      	b.n	80083bc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80083b2:	6839      	ldr	r1, [r7, #0]
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f840 	bl	800843a <USBD_CtlError>
      break;
 80083ba:	e000      	b.n	80083be <USBD_ClrFeature+0x3c>
      break;
 80083bc:	bf00      	nop
  }
}
 80083be:	bf00      	nop
 80083c0:	3708      	adds	r7, #8
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
 80083ce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	781a      	ldrb	r2, [r3, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	3301      	adds	r3, #1
 80083e0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	781a      	ldrb	r2, [r3, #0]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3301      	adds	r3, #1
 80083ee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80083f0:	68f8      	ldr	r0, [r7, #12]
 80083f2:	f7ff fa17 	bl	8007824 <SWAPBYTE>
 80083f6:	4603      	mov	r3, r0
 80083f8:	461a      	mov	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	3301      	adds	r3, #1
 8008402:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	3301      	adds	r3, #1
 8008408:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800840a:	68f8      	ldr	r0, [r7, #12]
 800840c:	f7ff fa0a 	bl	8007824 <SWAPBYTE>
 8008410:	4603      	mov	r3, r0
 8008412:	461a      	mov	r2, r3
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	3301      	adds	r3, #1
 800841c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3301      	adds	r3, #1
 8008422:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f7ff f9fd 	bl	8007824 <SWAPBYTE>
 800842a:	4603      	mov	r3, r0
 800842c:	461a      	mov	r2, r3
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	80da      	strh	r2, [r3, #6]
}
 8008432:	bf00      	nop
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b082      	sub	sp, #8
 800843e:	af00      	add	r7, sp, #0
 8008440:	6078      	str	r0, [r7, #4]
 8008442:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008444:	2180      	movs	r1, #128	; 0x80
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 fd0a 	bl	8008e60 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800844c:	2100      	movs	r1, #0
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 fd06 	bl	8008e60 <USBD_LL_StallEP>
}
 8008454:	bf00      	nop
 8008456:	3708      	adds	r7, #8
 8008458:	46bd      	mov	sp, r7
 800845a:	bd80      	pop	{r7, pc}

0800845c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af00      	add	r7, sp, #0
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008468:	2300      	movs	r3, #0
 800846a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d036      	beq.n	80084e0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008476:	6938      	ldr	r0, [r7, #16]
 8008478:	f000 f836 	bl	80084e8 <USBD_GetLen>
 800847c:	4603      	mov	r3, r0
 800847e:	3301      	adds	r3, #1
 8008480:	b29b      	uxth	r3, r3
 8008482:	005b      	lsls	r3, r3, #1
 8008484:	b29a      	uxth	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800848a:	7dfb      	ldrb	r3, [r7, #23]
 800848c:	68ba      	ldr	r2, [r7, #8]
 800848e:	4413      	add	r3, r2
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	7812      	ldrb	r2, [r2, #0]
 8008494:	701a      	strb	r2, [r3, #0]
  idx++;
 8008496:	7dfb      	ldrb	r3, [r7, #23]
 8008498:	3301      	adds	r3, #1
 800849a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800849c:	7dfb      	ldrb	r3, [r7, #23]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	4413      	add	r3, r2
 80084a2:	2203      	movs	r2, #3
 80084a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80084a6:	7dfb      	ldrb	r3, [r7, #23]
 80084a8:	3301      	adds	r3, #1
 80084aa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80084ac:	e013      	b.n	80084d6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80084ae:	7dfb      	ldrb	r3, [r7, #23]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	4413      	add	r3, r2
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	7812      	ldrb	r2, [r2, #0]
 80084b8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	3301      	adds	r3, #1
 80084be:	613b      	str	r3, [r7, #16]
    idx++;
 80084c0:	7dfb      	ldrb	r3, [r7, #23]
 80084c2:	3301      	adds	r3, #1
 80084c4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	4413      	add	r3, r2
 80084cc:	2200      	movs	r2, #0
 80084ce:	701a      	strb	r2, [r3, #0]
    idx++;
 80084d0:	7dfb      	ldrb	r3, [r7, #23]
 80084d2:	3301      	adds	r3, #1
 80084d4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1e7      	bne.n	80084ae <USBD_GetString+0x52>
 80084de:	e000      	b.n	80084e2 <USBD_GetString+0x86>
    return;
 80084e0:	bf00      	nop
  }
}
 80084e2:	3718      	adds	r7, #24
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80084f0:	2300      	movs	r3, #0
 80084f2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80084f8:	e005      	b.n	8008506 <USBD_GetLen+0x1e>
  {
    len++;
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	3301      	adds	r3, #1
 80084fe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	3301      	adds	r3, #1
 8008504:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1f5      	bne.n	80084fa <USBD_GetLen+0x12>
  }

  return len;
 800850e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008510:	4618      	mov	r0, r3
 8008512:	3714      	adds	r7, #20
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2202      	movs	r2, #2
 800852c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	687a      	ldr	r2, [r7, #4]
 800853a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	2100      	movs	r1, #0
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f000 fd5a 	bl	8008ffc <USBD_LL_Transmit>

  return USBD_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	60f8      	str	r0, [r7, #12]
 800855a:	60b9      	str	r1, [r7, #8]
 800855c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	2100      	movs	r1, #0
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f000 fd49 	bl	8008ffc <USBD_LL_Transmit>

  return USBD_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b084      	sub	sp, #16
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	60b9      	str	r1, [r7, #8]
 800857e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2203      	movs	r2, #3
 8008584:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	2100      	movs	r1, #0
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f000 fd64 	bl	800906c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b084      	sub	sp, #16
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	60f8      	str	r0, [r7, #12]
 80085b6:	60b9      	str	r1, [r7, #8]
 80085b8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	2100      	movs	r1, #0
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f000 fd53 	bl	800906c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085c6:	2300      	movs	r3, #0
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3710      	adds	r7, #16
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b082      	sub	sp, #8
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2204      	movs	r2, #4
 80085dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80085e0:	2300      	movs	r3, #0
 80085e2:	2200      	movs	r2, #0
 80085e4:	2100      	movs	r1, #0
 80085e6:	6878      	ldr	r0, [r7, #4]
 80085e8:	f000 fd08 	bl	8008ffc <USBD_LL_Transmit>

  return USBD_OK;
 80085ec:	2300      	movs	r3, #0
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3708      	adds	r7, #8
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}

080085f6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80085f6:	b580      	push	{r7, lr}
 80085f8:	b082      	sub	sp, #8
 80085fa:	af00      	add	r7, sp, #0
 80085fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2205      	movs	r2, #5
 8008602:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008606:	2300      	movs	r3, #0
 8008608:	2200      	movs	r2, #0
 800860a:	2100      	movs	r1, #0
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fd2d 	bl	800906c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008620:	2200      	movs	r2, #0
 8008622:	4912      	ldr	r1, [pc, #72]	; (800866c <MX_USB_DEVICE_Init+0x50>)
 8008624:	4812      	ldr	r0, [pc, #72]	; (8008670 <MX_USB_DEVICE_Init+0x54>)
 8008626:	f7fe fcd7 	bl	8006fd8 <USBD_Init>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008630:	f7f8 faf6 	bl	8000c20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008634:	490f      	ldr	r1, [pc, #60]	; (8008674 <MX_USB_DEVICE_Init+0x58>)
 8008636:	480e      	ldr	r0, [pc, #56]	; (8008670 <MX_USB_DEVICE_Init+0x54>)
 8008638:	f7fe fcfe 	bl	8007038 <USBD_RegisterClass>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008642:	f7f8 faed 	bl	8000c20 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8008646:	490c      	ldr	r1, [pc, #48]	; (8008678 <MX_USB_DEVICE_Init+0x5c>)
 8008648:	4809      	ldr	r0, [pc, #36]	; (8008670 <MX_USB_DEVICE_Init+0x54>)
 800864a:	f7fe fcab 	bl	8006fa4 <USBD_CUSTOM_HID_RegisterInterface>
 800864e:	4603      	mov	r3, r0
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008654:	f7f8 fae4 	bl	8000c20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008658:	4805      	ldr	r0, [pc, #20]	; (8008670 <MX_USB_DEVICE_Init+0x54>)
 800865a:	f7fe fd23 	bl	80070a4 <USBD_Start>
 800865e:	4603      	mov	r3, r0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d001      	beq.n	8008668 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008664:	f7f8 fadc 	bl	8000c20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008668:	bf00      	nop
 800866a:	bd80      	pop	{r7, pc}
 800866c:	200000b8 	.word	0x200000b8
 8008670:	200003a8 	.word	0x200003a8
 8008674:	2000000c 	.word	0x2000000c
 8008678:	200000a8 	.word	0x200000a8

0800867c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800867c:	b480      	push	{r7}
 800867e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008680:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008682:	4618      	mov	r0, r3
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800868c:	b480      	push	{r7}
 800868e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008690:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008692:	4618      	mov	r0, r3
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	4603      	mov	r3, r0
 80086a4:	460a      	mov	r2, r1
 80086a6:	71fb      	strb	r3, [r7, #7]
 80086a8:	4613      	mov	r3, r2
 80086aa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);
  miflag = 1;
 80086ac:	4b04      	ldr	r3, [pc, #16]	; (80086c0 <CUSTOM_HID_OutEvent_FS+0x24>)
 80086ae:	2201      	movs	r2, #1
 80086b0:	701a      	strb	r2, [r3, #0]
  /* Start next USB packet transfer once data processing is completed */
 // USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);

  return (USBD_OK);
 80086b2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	370c      	adds	r7, #12
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	20000684 	.word	0x20000684

080086c4 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

 int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b082      	sub	sp, #8
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
 80086cc:	460b      	mov	r3, r1
 80086ce:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 80086d0:	887b      	ldrh	r3, [r7, #2]
 80086d2:	461a      	mov	r2, r3
 80086d4:	6879      	ldr	r1, [r7, #4]
 80086d6:	4804      	ldr	r0, [pc, #16]	; (80086e8 <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 80086d8:	f7fe fb1c 	bl	8006d14 <USBD_CUSTOM_HID_SendReport>
 80086dc:	4603      	mov	r3, r0
 80086de:	b25b      	sxtb	r3, r3
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	200003a8 	.word	0x200003a8

080086ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b083      	sub	sp, #12
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	4603      	mov	r3, r0
 80086f4:	6039      	str	r1, [r7, #0]
 80086f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	2212      	movs	r2, #18
 80086fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80086fe:	4b03      	ldr	r3, [pc, #12]	; (800870c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008700:	4618      	mov	r0, r3
 8008702:	370c      	adds	r7, #12
 8008704:	46bd      	mov	sp, r7
 8008706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870a:	4770      	bx	lr
 800870c:	200000d8 	.word	0x200000d8

08008710 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008710:	b480      	push	{r7}
 8008712:	b083      	sub	sp, #12
 8008714:	af00      	add	r7, sp, #0
 8008716:	4603      	mov	r3, r0
 8008718:	6039      	str	r1, [r7, #0]
 800871a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	2204      	movs	r2, #4
 8008720:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008722:	4b03      	ldr	r3, [pc, #12]	; (8008730 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008724:	4618      	mov	r0, r3
 8008726:	370c      	adds	r7, #12
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	200000f8 	.word	0x200000f8

08008734 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	4603      	mov	r3, r0
 800873c:	6039      	str	r1, [r7, #0]
 800873e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d105      	bne.n	8008752 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008746:	683a      	ldr	r2, [r7, #0]
 8008748:	4907      	ldr	r1, [pc, #28]	; (8008768 <USBD_FS_ProductStrDescriptor+0x34>)
 800874a:	4808      	ldr	r0, [pc, #32]	; (800876c <USBD_FS_ProductStrDescriptor+0x38>)
 800874c:	f7ff fe86 	bl	800845c <USBD_GetString>
 8008750:	e004      	b.n	800875c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008752:	683a      	ldr	r2, [r7, #0]
 8008754:	4904      	ldr	r1, [pc, #16]	; (8008768 <USBD_FS_ProductStrDescriptor+0x34>)
 8008756:	4805      	ldr	r0, [pc, #20]	; (800876c <USBD_FS_ProductStrDescriptor+0x38>)
 8008758:	f7ff fe80 	bl	800845c <USBD_GetString>
  }
  return USBD_StrDesc;
 800875c:	4b02      	ldr	r3, [pc, #8]	; (8008768 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20000688 	.word	0x20000688
 800876c:	08009224 	.word	0x08009224

08008770 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	4603      	mov	r3, r0
 8008778:	6039      	str	r1, [r7, #0]
 800877a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800877c:	683a      	ldr	r2, [r7, #0]
 800877e:	4904      	ldr	r1, [pc, #16]	; (8008790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008780:	4804      	ldr	r0, [pc, #16]	; (8008794 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008782:	f7ff fe6b 	bl	800845c <USBD_GetString>
  return USBD_StrDesc;
 8008786:	4b02      	ldr	r3, [pc, #8]	; (8008790 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008788:	4618      	mov	r0, r3
 800878a:	3708      	adds	r7, #8
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}
 8008790:	20000688 	.word	0x20000688
 8008794:	08009244 	.word	0x08009244

08008798 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	6039      	str	r1, [r7, #0]
 80087a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	221a      	movs	r2, #26
 80087a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087aa:	f000 f855 	bl	8008858 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087ae:	4b02      	ldr	r3, [pc, #8]	; (80087b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	200000fc 	.word	0x200000fc

080087bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	4603      	mov	r3, r0
 80087c4:	6039      	str	r1, [r7, #0]
 80087c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d105      	bne.n	80087da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	4907      	ldr	r1, [pc, #28]	; (80087f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087d2:	4808      	ldr	r0, [pc, #32]	; (80087f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087d4:	f7ff fe42 	bl	800845c <USBD_GetString>
 80087d8:	e004      	b.n	80087e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087da:	683a      	ldr	r2, [r7, #0]
 80087dc:	4904      	ldr	r1, [pc, #16]	; (80087f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087de:	4805      	ldr	r0, [pc, #20]	; (80087f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087e0:	f7ff fe3c 	bl	800845c <USBD_GetString>
  }
  return USBD_StrDesc;
 80087e4:	4b02      	ldr	r3, [pc, #8]	; (80087f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20000688 	.word	0x20000688
 80087f4:	08009258 	.word	0x08009258

080087f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	4603      	mov	r3, r0
 8008800:	6039      	str	r1, [r7, #0]
 8008802:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008804:	79fb      	ldrb	r3, [r7, #7]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d105      	bne.n	8008816 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	4907      	ldr	r1, [pc, #28]	; (800882c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800880e:	4808      	ldr	r0, [pc, #32]	; (8008830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008810:	f7ff fe24 	bl	800845c <USBD_GetString>
 8008814:	e004      	b.n	8008820 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008816:	683a      	ldr	r2, [r7, #0]
 8008818:	4904      	ldr	r1, [pc, #16]	; (800882c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800881a:	4805      	ldr	r0, [pc, #20]	; (8008830 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800881c:	f7ff fe1e 	bl	800845c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008820:	4b02      	ldr	r3, [pc, #8]	; (800882c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008822:	4618      	mov	r0, r3
 8008824:	3708      	adds	r7, #8
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	20000688 	.word	0x20000688
 8008830:	0800926c 	.word	0x0800926c

08008834 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	4603      	mov	r3, r0
 800883c:	6039      	str	r1, [r7, #0]
 800883e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008840:	683b      	ldr	r3, [r7, #0]
 8008842:	220c      	movs	r2, #12
 8008844:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008846:	4b03      	ldr	r3, [pc, #12]	; (8008854 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008848:	4618      	mov	r0, r3
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr
 8008854:	200000ec 	.word	0x200000ec

08008858 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b084      	sub	sp, #16
 800885c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800885e:	4b0f      	ldr	r3, [pc, #60]	; (800889c <Get_SerialNum+0x44>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008864:	4b0e      	ldr	r3, [pc, #56]	; (80088a0 <Get_SerialNum+0x48>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800886a:	4b0e      	ldr	r3, [pc, #56]	; (80088a4 <Get_SerialNum+0x4c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008870:	68fa      	ldr	r2, [r7, #12]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4413      	add	r3, r2
 8008876:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d009      	beq.n	8008892 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800887e:	2208      	movs	r2, #8
 8008880:	4909      	ldr	r1, [pc, #36]	; (80088a8 <Get_SerialNum+0x50>)
 8008882:	68f8      	ldr	r0, [r7, #12]
 8008884:	f000 f814 	bl	80088b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008888:	2204      	movs	r2, #4
 800888a:	4908      	ldr	r1, [pc, #32]	; (80088ac <Get_SerialNum+0x54>)
 800888c:	68b8      	ldr	r0, [r7, #8]
 800888e:	f000 f80f 	bl	80088b0 <IntToUnicode>
  }
}
 8008892:	bf00      	nop
 8008894:	3710      	adds	r7, #16
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	1fff7590 	.word	0x1fff7590
 80088a0:	1fff7594 	.word	0x1fff7594
 80088a4:	1fff7598 	.word	0x1fff7598
 80088a8:	200000fe 	.word	0x200000fe
 80088ac:	2000010e 	.word	0x2000010e

080088b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	4613      	mov	r3, r2
 80088bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088be:	2300      	movs	r3, #0
 80088c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088c2:	2300      	movs	r3, #0
 80088c4:	75fb      	strb	r3, [r7, #23]
 80088c6:	e027      	b.n	8008918 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	0f1b      	lsrs	r3, r3, #28
 80088cc:	2b09      	cmp	r3, #9
 80088ce:	d80b      	bhi.n	80088e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	0f1b      	lsrs	r3, r3, #28
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	005b      	lsls	r3, r3, #1
 80088da:	4619      	mov	r1, r3
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	440b      	add	r3, r1
 80088e0:	3230      	adds	r2, #48	; 0x30
 80088e2:	b2d2      	uxtb	r2, r2
 80088e4:	701a      	strb	r2, [r3, #0]
 80088e6:	e00a      	b.n	80088fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	0f1b      	lsrs	r3, r3, #28
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	7dfb      	ldrb	r3, [r7, #23]
 80088f0:	005b      	lsls	r3, r3, #1
 80088f2:	4619      	mov	r1, r3
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	440b      	add	r3, r1
 80088f8:	3237      	adds	r2, #55	; 0x37
 80088fa:	b2d2      	uxtb	r2, r2
 80088fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	011b      	lsls	r3, r3, #4
 8008902:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008904:	7dfb      	ldrb	r3, [r7, #23]
 8008906:	005b      	lsls	r3, r3, #1
 8008908:	3301      	adds	r3, #1
 800890a:	68ba      	ldr	r2, [r7, #8]
 800890c:	4413      	add	r3, r2
 800890e:	2200      	movs	r2, #0
 8008910:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008912:	7dfb      	ldrb	r3, [r7, #23]
 8008914:	3301      	adds	r3, #1
 8008916:	75fb      	strb	r3, [r7, #23]
 8008918:	7dfa      	ldrb	r2, [r7, #23]
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	429a      	cmp	r2, r3
 800891e:	d3d3      	bcc.n	80088c8 <IntToUnicode+0x18>
  }
}
 8008920:	bf00      	nop
 8008922:	bf00      	nop
 8008924:	371c      	adds	r7, #28
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
	...

08008930 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b0ac      	sub	sp, #176	; 0xb0
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008938:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800893c:	2200      	movs	r2, #0
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	605a      	str	r2, [r3, #4]
 8008942:	609a      	str	r2, [r3, #8]
 8008944:	60da      	str	r2, [r3, #12]
 8008946:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008948:	f107 0314 	add.w	r3, r7, #20
 800894c:	2288      	movs	r2, #136	; 0x88
 800894e:	2100      	movs	r1, #0
 8008950:	4618      	mov	r0, r3
 8008952:	f000 fc2f 	bl	80091b4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800895e:	f040 8085 	bne.w	8008a6c <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008962:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008966:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008968:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800896c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008970:	2301      	movs	r3, #1
 8008972:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008974:	2301      	movs	r3, #1
 8008976:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8008978:	2318      	movs	r3, #24
 800897a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800897c:	2307      	movs	r3, #7
 800897e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008980:	2302      	movs	r3, #2
 8008982:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008984:	2302      	movs	r3, #2
 8008986:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8008988:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800898c:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800898e:	f107 0314 	add.w	r3, r7, #20
 8008992:	4618      	mov	r0, r3
 8008994:	f7fb fa92 	bl	8003ebc <HAL_RCCEx_PeriphCLKConfig>
 8008998:	4603      	mov	r3, r0
 800899a:	2b00      	cmp	r3, #0
 800899c:	d001      	beq.n	80089a2 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 800899e:	f7f8 f93f 	bl	8000c20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089a2:	4b34      	ldr	r3, [pc, #208]	; (8008a74 <HAL_PCD_MspInit+0x144>)
 80089a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089a6:	4a33      	ldr	r2, [pc, #204]	; (8008a74 <HAL_PCD_MspInit+0x144>)
 80089a8:	f043 0301 	orr.w	r3, r3, #1
 80089ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089ae:	4b31      	ldr	r3, [pc, #196]	; (8008a74 <HAL_PCD_MspInit+0x144>)
 80089b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089b2:	f003 0301 	and.w	r3, r3, #1
 80089b6:	613b      	str	r3, [r7, #16]
 80089b8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80089ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089c2:	2300      	movs	r3, #0
 80089c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089c8:	2300      	movs	r3, #0
 80089ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80089ce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80089d2:	4619      	mov	r1, r3
 80089d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80089d8:	f7f8 fe8a 	bl	80016f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80089dc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80089e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089e4:	2302      	movs	r3, #2
 80089e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ea:	2300      	movs	r3, #0
 80089ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089f0:	2303      	movs	r3, #3
 80089f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80089f6:	230a      	movs	r3, #10
 80089f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008a00:	4619      	mov	r1, r3
 8008a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a06:	f7f8 fe73 	bl	80016f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a0a:	4b1a      	ldr	r3, [pc, #104]	; (8008a74 <HAL_PCD_MspInit+0x144>)
 8008a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a0e:	4a19      	ldr	r2, [pc, #100]	; (8008a74 <HAL_PCD_MspInit+0x144>)
 8008a10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a16:	4b17      	ldr	r3, [pc, #92]	; (8008a74 <HAL_PCD_MspInit+0x144>)
 8008a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a1e:	60fb      	str	r3, [r7, #12]
 8008a20:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a22:	4b14      	ldr	r3, [pc, #80]	; (8008a74 <HAL_PCD_MspInit+0x144>)
 8008a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d114      	bne.n	8008a58 <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a2e:	4b11      	ldr	r3, [pc, #68]	; (8008a74 <HAL_PCD_MspInit+0x144>)
 8008a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a32:	4a10      	ldr	r2, [pc, #64]	; (8008a74 <HAL_PCD_MspInit+0x144>)
 8008a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a38:	6593      	str	r3, [r2, #88]	; 0x58
 8008a3a:	4b0e      	ldr	r3, [pc, #56]	; (8008a74 <HAL_PCD_MspInit+0x144>)
 8008a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a42:	60bb      	str	r3, [r7, #8]
 8008a44:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008a46:	f7fa fb6d 	bl	8003124 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a4a:	4b0a      	ldr	r3, [pc, #40]	; (8008a74 <HAL_PCD_MspInit+0x144>)
 8008a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a4e:	4a09      	ldr	r2, [pc, #36]	; (8008a74 <HAL_PCD_MspInit+0x144>)
 8008a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a54:	6593      	str	r3, [r2, #88]	; 0x58
 8008a56:	e001      	b.n	8008a5c <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008a58:	f7fa fb64 	bl	8003124 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	2100      	movs	r1, #0
 8008a60:	2043      	movs	r0, #67	; 0x43
 8008a62:	f7f8 fd02 	bl	800146a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a66:	2043      	movs	r0, #67	; 0x43
 8008a68:	f7f8 fd1b 	bl	80014a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a6c:	bf00      	nop
 8008a6e:	37b0      	adds	r7, #176	; 0xb0
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	40021000 	.word	0x40021000

08008a78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	4610      	mov	r0, r2
 8008a90:	f7fe fb55 	bl	800713e <USBD_LL_SetupStage>
}
 8008a94:	bf00      	nop
 8008a96:	3708      	adds	r7, #8
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008aae:	78fa      	ldrb	r2, [r7, #3]
 8008ab0:	6879      	ldr	r1, [r7, #4]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	00db      	lsls	r3, r3, #3
 8008ab6:	4413      	add	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	440b      	add	r3, r1
 8008abc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	78fb      	ldrb	r3, [r7, #3]
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	f7fe fb8f 	bl	80071e8 <USBD_LL_DataOutStage>
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b082      	sub	sp, #8
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	460b      	mov	r3, r1
 8008adc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ae4:	78fa      	ldrb	r2, [r7, #3]
 8008ae6:	6879      	ldr	r1, [r7, #4]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	00db      	lsls	r3, r3, #3
 8008aec:	4413      	add	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	440b      	add	r3, r1
 8008af2:	3348      	adds	r3, #72	; 0x48
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	78fb      	ldrb	r3, [r7, #3]
 8008af8:	4619      	mov	r1, r3
 8008afa:	f7fe fc28 	bl	800734e <USBD_LL_DataInStage>
}
 8008afe:	bf00      	nop
 8008b00:	3708      	adds	r7, #8
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bd80      	pop	{r7, pc}

08008b06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b06:	b580      	push	{r7, lr}
 8008b08:	b082      	sub	sp, #8
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b14:	4618      	mov	r0, r3
 8008b16:	f7fe fd62 	bl	80075de <USBD_LL_SOF>
}
 8008b1a:	bf00      	nop
 8008b1c:	3708      	adds	r7, #8
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b084      	sub	sp, #16
 8008b26:	af00      	add	r7, sp, #0
 8008b28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b2a:	2301      	movs	r3, #1
 8008b2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d001      	beq.n	8008b3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b36:	f7f8 f873 	bl	8000c20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b40:	7bfa      	ldrb	r2, [r7, #15]
 8008b42:	4611      	mov	r1, r2
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe fd06 	bl	8007556 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fe fcae 	bl	80074b2 <USBD_LL_Reset>
}
 8008b56:	bf00      	nop
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
	...

08008b60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	6812      	ldr	r2, [r2, #0]
 8008b76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b7a:	f043 0301 	orr.w	r3, r3, #1
 8008b7e:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b86:	4618      	mov	r0, r3
 8008b88:	f7fe fcf5 	bl	8007576 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d005      	beq.n	8008ba0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008b94:	4b04      	ldr	r3, [pc, #16]	; (8008ba8 <HAL_PCD_SuspendCallback+0x48>)
 8008b96:	691b      	ldr	r3, [r3, #16]
 8008b98:	4a03      	ldr	r2, [pc, #12]	; (8008ba8 <HAL_PCD_SuspendCallback+0x48>)
 8008b9a:	f043 0306 	orr.w	r3, r3, #6
 8008b9e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008ba0:	bf00      	nop
 8008ba2:	3708      	adds	r7, #8
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}
 8008ba8:	e000ed00 	.word	0xe000ed00

08008bac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b082      	sub	sp, #8
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	6812      	ldr	r2, [r2, #0]
 8008bc2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bc6:	f023 0301 	bic.w	r3, r3, #1
 8008bca:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6a1b      	ldr	r3, [r3, #32]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d007      	beq.n	8008be4 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008bd4:	4b08      	ldr	r3, [pc, #32]	; (8008bf8 <HAL_PCD_ResumeCallback+0x4c>)
 8008bd6:	691b      	ldr	r3, [r3, #16]
 8008bd8:	4a07      	ldr	r2, [pc, #28]	; (8008bf8 <HAL_PCD_ResumeCallback+0x4c>)
 8008bda:	f023 0306 	bic.w	r3, r3, #6
 8008bde:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008be0:	f000 fae2 	bl	80091a8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fe fcdf 	bl	80075ae <USBD_LL_Resume>
}
 8008bf0:	bf00      	nop
 8008bf2:	3708      	adds	r7, #8
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	e000ed00 	.word	0xe000ed00

08008bfc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	460b      	mov	r3, r1
 8008c06:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c0e:	78fa      	ldrb	r2, [r7, #3]
 8008c10:	4611      	mov	r1, r2
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fe fd35 	bl	8007682 <USBD_LL_IsoOUTIncomplete>
}
 8008c18:	bf00      	nop
 8008c1a:	3708      	adds	r7, #8
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	bd80      	pop	{r7, pc}

08008c20 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b082      	sub	sp, #8
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	4611      	mov	r1, r2
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fe fcf1 	bl	800761e <USBD_LL_IsoINIncomplete>
}
 8008c3c:	bf00      	nop
 8008c3e:	3708      	adds	r7, #8
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b082      	sub	sp, #8
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fe fd47 	bl	80076e6 <USBD_LL_DevConnected>
}
 8008c58:	bf00      	nop
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe fd44 	bl	80076fc <USBD_LL_DevDisconnected>
}
 8008c74:	bf00      	nop
 8008c76:	3708      	adds	r7, #8
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	781b      	ldrb	r3, [r3, #0]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d13c      	bne.n	8008d06 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008c8c:	4a20      	ldr	r2, [pc, #128]	; (8008d10 <USBD_LL_Init+0x94>)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a1e      	ldr	r2, [pc, #120]	; (8008d10 <USBD_LL_Init+0x94>)
 8008c98:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008c9c:	4b1c      	ldr	r3, [pc, #112]	; (8008d10 <USBD_LL_Init+0x94>)
 8008c9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008ca2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008ca4:	4b1a      	ldr	r3, [pc, #104]	; (8008d10 <USBD_LL_Init+0x94>)
 8008ca6:	2206      	movs	r2, #6
 8008ca8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008caa:	4b19      	ldr	r3, [pc, #100]	; (8008d10 <USBD_LL_Init+0x94>)
 8008cac:	2202      	movs	r2, #2
 8008cae:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008cb0:	4b17      	ldr	r3, [pc, #92]	; (8008d10 <USBD_LL_Init+0x94>)
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008cb6:	4b16      	ldr	r3, [pc, #88]	; (8008d10 <USBD_LL_Init+0x94>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008cbc:	4b14      	ldr	r3, [pc, #80]	; (8008d10 <USBD_LL_Init+0x94>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008cc2:	4b13      	ldr	r3, [pc, #76]	; (8008d10 <USBD_LL_Init+0x94>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008cc8:	4b11      	ldr	r3, [pc, #68]	; (8008d10 <USBD_LL_Init+0x94>)
 8008cca:	2200      	movs	r2, #0
 8008ccc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008cce:	4b10      	ldr	r3, [pc, #64]	; (8008d10 <USBD_LL_Init+0x94>)
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008cd4:	4b0e      	ldr	r3, [pc, #56]	; (8008d10 <USBD_LL_Init+0x94>)
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008cda:	480d      	ldr	r0, [pc, #52]	; (8008d10 <USBD_LL_Init+0x94>)
 8008cdc:	f7f9 f81f 	bl	8001d1e <HAL_PCD_Init>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008ce6:	f7f7 ff9b 	bl	8000c20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008cea:	2180      	movs	r1, #128	; 0x80
 8008cec:	4808      	ldr	r0, [pc, #32]	; (8008d10 <USBD_LL_Init+0x94>)
 8008cee:	f7fa f970 	bl	8002fd2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008cf2:	2240      	movs	r2, #64	; 0x40
 8008cf4:	2100      	movs	r1, #0
 8008cf6:	4806      	ldr	r0, [pc, #24]	; (8008d10 <USBD_LL_Init+0x94>)
 8008cf8:	f7fa f924 	bl	8002f44 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008cfc:	2280      	movs	r2, #128	; 0x80
 8008cfe:	2101      	movs	r1, #1
 8008d00:	4803      	ldr	r0, [pc, #12]	; (8008d10 <USBD_LL_Init+0x94>)
 8008d02:	f7fa f91f 	bl	8002f44 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d06:	2300      	movs	r3, #0
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3708      	adds	r7, #8
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	20000888 	.word	0x20000888

08008d14 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	f7f9 f91b 	bl	8001f66 <HAL_PCD_Start>
 8008d30:	4603      	mov	r3, r0
 8008d32:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d34:	7bbb      	ldrb	r3, [r7, #14]
 8008d36:	2b03      	cmp	r3, #3
 8008d38:	d816      	bhi.n	8008d68 <USBD_LL_Start+0x54>
 8008d3a:	a201      	add	r2, pc, #4	; (adr r2, 8008d40 <USBD_LL_Start+0x2c>)
 8008d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d40:	08008d51 	.word	0x08008d51
 8008d44:	08008d57 	.word	0x08008d57
 8008d48:	08008d5d 	.word	0x08008d5d
 8008d4c:	08008d63 	.word	0x08008d63
    case HAL_OK :
      usb_status = USBD_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73fb      	strb	r3, [r7, #15]
    break;
 8008d54:	e00b      	b.n	8008d6e <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d56:	2303      	movs	r3, #3
 8008d58:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5a:	e008      	b.n	8008d6e <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d60:	e005      	b.n	8008d6e <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d62:	2303      	movs	r3, #3
 8008d64:	73fb      	strb	r3, [r7, #15]
    break;
 8008d66:	e002      	b.n	8008d6e <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8008d6c:	bf00      	nop
  }
  return usb_status;
 8008d6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3710      	adds	r7, #16
 8008d74:	46bd      	mov	sp, r7
 8008d76:	bd80      	pop	{r7, pc}

08008d78 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	4608      	mov	r0, r1
 8008d82:	4611      	mov	r1, r2
 8008d84:	461a      	mov	r2, r3
 8008d86:	4603      	mov	r3, r0
 8008d88:	70fb      	strb	r3, [r7, #3]
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	70bb      	strb	r3, [r7, #2]
 8008d8e:	4613      	mov	r3, r2
 8008d90:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d92:	2300      	movs	r3, #0
 8008d94:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d96:	2300      	movs	r3, #0
 8008d98:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008da0:	78bb      	ldrb	r3, [r7, #2]
 8008da2:	883a      	ldrh	r2, [r7, #0]
 8008da4:	78f9      	ldrb	r1, [r7, #3]
 8008da6:	f7f9 fdc5 	bl	8002934 <HAL_PCD_EP_Open>
 8008daa:	4603      	mov	r3, r0
 8008dac:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	2b03      	cmp	r3, #3
 8008db2:	d817      	bhi.n	8008de4 <USBD_LL_OpenEP+0x6c>
 8008db4:	a201      	add	r2, pc, #4	; (adr r2, 8008dbc <USBD_LL_OpenEP+0x44>)
 8008db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dba:	bf00      	nop
 8008dbc:	08008dcd 	.word	0x08008dcd
 8008dc0:	08008dd3 	.word	0x08008dd3
 8008dc4:	08008dd9 	.word	0x08008dd9
 8008dc8:	08008ddf 	.word	0x08008ddf
    case HAL_OK :
      usb_status = USBD_OK;
 8008dcc:	2300      	movs	r3, #0
 8008dce:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd0:	e00b      	b.n	8008dea <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd6:	e008      	b.n	8008dea <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dd8:	2301      	movs	r3, #1
 8008dda:	73fb      	strb	r3, [r7, #15]
    break;
 8008ddc:	e005      	b.n	8008dea <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dde:	2303      	movs	r3, #3
 8008de0:	73fb      	strb	r3, [r7, #15]
    break;
 8008de2:	e002      	b.n	8008dea <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008de4:	2303      	movs	r3, #3
 8008de6:	73fb      	strb	r3, [r7, #15]
    break;
 8008de8:	bf00      	nop
  }
  return usb_status;
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b084      	sub	sp, #16
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	6078      	str	r0, [r7, #4]
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e00:	2300      	movs	r3, #0
 8008e02:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e0e:	78fa      	ldrb	r2, [r7, #3]
 8008e10:	4611      	mov	r1, r2
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7f9 fdf6 	bl	8002a04 <HAL_PCD_EP_Close>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	d816      	bhi.n	8008e50 <USBD_LL_CloseEP+0x5c>
 8008e22:	a201      	add	r2, pc, #4	; (adr r2, 8008e28 <USBD_LL_CloseEP+0x34>)
 8008e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e28:	08008e39 	.word	0x08008e39
 8008e2c:	08008e3f 	.word	0x08008e3f
 8008e30:	08008e45 	.word	0x08008e45
 8008e34:	08008e4b 	.word	0x08008e4b
    case HAL_OK :
      usb_status = USBD_OK;
 8008e38:	2300      	movs	r3, #0
 8008e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3c:	e00b      	b.n	8008e56 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	73fb      	strb	r3, [r7, #15]
    break;
 8008e42:	e008      	b.n	8008e56 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e44:	2301      	movs	r3, #1
 8008e46:	73fb      	strb	r3, [r7, #15]
    break;
 8008e48:	e005      	b.n	8008e56 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e4a:	2303      	movs	r3, #3
 8008e4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008e4e:	e002      	b.n	8008e56 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008e50:	2303      	movs	r3, #3
 8008e52:	73fb      	strb	r3, [r7, #15]
    break;
 8008e54:	bf00      	nop
  }
  return usb_status;
 8008e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	460b      	mov	r3, r1
 8008e6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e70:	2300      	movs	r3, #0
 8008e72:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e7a:	78fa      	ldrb	r2, [r7, #3]
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7f9 fe6d 	bl	8002b5e <HAL_PCD_EP_SetStall>
 8008e84:	4603      	mov	r3, r0
 8008e86:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008e88:	7bbb      	ldrb	r3, [r7, #14]
 8008e8a:	2b03      	cmp	r3, #3
 8008e8c:	d816      	bhi.n	8008ebc <USBD_LL_StallEP+0x5c>
 8008e8e:	a201      	add	r2, pc, #4	; (adr r2, 8008e94 <USBD_LL_StallEP+0x34>)
 8008e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e94:	08008ea5 	.word	0x08008ea5
 8008e98:	08008eab 	.word	0x08008eab
 8008e9c:	08008eb1 	.word	0x08008eb1
 8008ea0:	08008eb7 	.word	0x08008eb7
    case HAL_OK :
      usb_status = USBD_OK;
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ea8:	e00b      	b.n	8008ec2 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008eaa:	2303      	movs	r3, #3
 8008eac:	73fb      	strb	r3, [r7, #15]
    break;
 8008eae:	e008      	b.n	8008ec2 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8008eb4:	e005      	b.n	8008ec2 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8008eba:	e002      	b.n	8008ec2 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008ebc:	2303      	movs	r3, #3
 8008ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec0:	bf00      	nop
  }
  return usb_status;
 8008ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}

08008ecc <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	460b      	mov	r3, r1
 8008ed6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ee6:	78fa      	ldrb	r2, [r7, #3]
 8008ee8:	4611      	mov	r1, r2
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7f9 fe99 	bl	8002c22 <HAL_PCD_EP_ClrStall>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ef4:	7bbb      	ldrb	r3, [r7, #14]
 8008ef6:	2b03      	cmp	r3, #3
 8008ef8:	d816      	bhi.n	8008f28 <USBD_LL_ClearStallEP+0x5c>
 8008efa:	a201      	add	r2, pc, #4	; (adr r2, 8008f00 <USBD_LL_ClearStallEP+0x34>)
 8008efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f00:	08008f11 	.word	0x08008f11
 8008f04:	08008f17 	.word	0x08008f17
 8008f08:	08008f1d 	.word	0x08008f1d
 8008f0c:	08008f23 	.word	0x08008f23
    case HAL_OK :
      usb_status = USBD_OK;
 8008f10:	2300      	movs	r3, #0
 8008f12:	73fb      	strb	r3, [r7, #15]
    break;
 8008f14:	e00b      	b.n	8008f2e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f16:	2303      	movs	r3, #3
 8008f18:	73fb      	strb	r3, [r7, #15]
    break;
 8008f1a:	e008      	b.n	8008f2e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f20:	e005      	b.n	8008f2e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f22:	2303      	movs	r3, #3
 8008f24:	73fb      	strb	r3, [r7, #15]
    break;
 8008f26:	e002      	b.n	8008f2e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008f28:	2303      	movs	r3, #3
 8008f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f2c:	bf00      	nop
  }
  return usb_status;
 8008f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	460b      	mov	r3, r1
 8008f42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	da0b      	bge.n	8008f6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f54:	78fb      	ldrb	r3, [r7, #3]
 8008f56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f5a:	68f9      	ldr	r1, [r7, #12]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	00db      	lsls	r3, r3, #3
 8008f60:	4413      	add	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	440b      	add	r3, r1
 8008f66:	333e      	adds	r3, #62	; 0x3e
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	e00b      	b.n	8008f84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f6c:	78fb      	ldrb	r3, [r7, #3]
 8008f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f72:	68f9      	ldr	r1, [r7, #12]
 8008f74:	4613      	mov	r3, r2
 8008f76:	00db      	lsls	r3, r3, #3
 8008f78:	4413      	add	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	440b      	add	r3, r1
 8008f7e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008f82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008faa:	78fa      	ldrb	r2, [r7, #3]
 8008fac:	4611      	mov	r1, r2
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7f9 fc9b 	bl	80028ea <HAL_PCD_SetAddress>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008fb8:	7bbb      	ldrb	r3, [r7, #14]
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	d816      	bhi.n	8008fec <USBD_LL_SetUSBAddress+0x5c>
 8008fbe:	a201      	add	r2, pc, #4	; (adr r2, 8008fc4 <USBD_LL_SetUSBAddress+0x34>)
 8008fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc4:	08008fd5 	.word	0x08008fd5
 8008fc8:	08008fdb 	.word	0x08008fdb
 8008fcc:	08008fe1 	.word	0x08008fe1
 8008fd0:	08008fe7 	.word	0x08008fe7
    case HAL_OK :
      usb_status = USBD_OK;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	73fb      	strb	r3, [r7, #15]
    break;
 8008fd8:	e00b      	b.n	8008ff2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	73fb      	strb	r3, [r7, #15]
    break;
 8008fde:	e008      	b.n	8008ff2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8008fe4:	e005      	b.n	8008ff2 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	73fb      	strb	r3, [r7, #15]
    break;
 8008fea:	e002      	b.n	8008ff2 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008fec:	2303      	movs	r3, #3
 8008fee:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff0:	bf00      	nop
  }
  return usb_status;
 8008ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	607a      	str	r2, [r7, #4]
 8009006:	603b      	str	r3, [r7, #0]
 8009008:	460b      	mov	r3, r1
 800900a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800900c:	2300      	movs	r3, #0
 800900e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800901a:	7af9      	ldrb	r1, [r7, #11]
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	f7f9 fd6c 	bl	8002afc <HAL_PCD_EP_Transmit>
 8009024:	4603      	mov	r3, r0
 8009026:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009028:	7dbb      	ldrb	r3, [r7, #22]
 800902a:	2b03      	cmp	r3, #3
 800902c:	d816      	bhi.n	800905c <USBD_LL_Transmit+0x60>
 800902e:	a201      	add	r2, pc, #4	; (adr r2, 8009034 <USBD_LL_Transmit+0x38>)
 8009030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009034:	08009045 	.word	0x08009045
 8009038:	0800904b 	.word	0x0800904b
 800903c:	08009051 	.word	0x08009051
 8009040:	08009057 	.word	0x08009057
    case HAL_OK :
      usb_status = USBD_OK;
 8009044:	2300      	movs	r3, #0
 8009046:	75fb      	strb	r3, [r7, #23]
    break;
 8009048:	e00b      	b.n	8009062 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800904a:	2303      	movs	r3, #3
 800904c:	75fb      	strb	r3, [r7, #23]
    break;
 800904e:	e008      	b.n	8009062 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009050:	2301      	movs	r3, #1
 8009052:	75fb      	strb	r3, [r7, #23]
    break;
 8009054:	e005      	b.n	8009062 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009056:	2303      	movs	r3, #3
 8009058:	75fb      	strb	r3, [r7, #23]
    break;
 800905a:	e002      	b.n	8009062 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800905c:	2303      	movs	r3, #3
 800905e:	75fb      	strb	r3, [r7, #23]
    break;
 8009060:	bf00      	nop
  }
  return usb_status;
 8009062:	7dfb      	ldrb	r3, [r7, #23]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3718      	adds	r7, #24
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	60f8      	str	r0, [r7, #12]
 8009074:	607a      	str	r2, [r7, #4]
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	460b      	mov	r3, r1
 800907a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800908a:	7af9      	ldrb	r1, [r7, #11]
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	687a      	ldr	r2, [r7, #4]
 8009090:	f7f9 fd02 	bl	8002a98 <HAL_PCD_EP_Receive>
 8009094:	4603      	mov	r3, r0
 8009096:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8009098:	7dbb      	ldrb	r3, [r7, #22]
 800909a:	2b03      	cmp	r3, #3
 800909c:	d816      	bhi.n	80090cc <USBD_LL_PrepareReceive+0x60>
 800909e:	a201      	add	r2, pc, #4	; (adr r2, 80090a4 <USBD_LL_PrepareReceive+0x38>)
 80090a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a4:	080090b5 	.word	0x080090b5
 80090a8:	080090bb 	.word	0x080090bb
 80090ac:	080090c1 	.word	0x080090c1
 80090b0:	080090c7 	.word	0x080090c7
    case HAL_OK :
      usb_status = USBD_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	75fb      	strb	r3, [r7, #23]
    break;
 80090b8:	e00b      	b.n	80090d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090ba:	2303      	movs	r3, #3
 80090bc:	75fb      	strb	r3, [r7, #23]
    break;
 80090be:	e008      	b.n	80090d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090c0:	2301      	movs	r3, #1
 80090c2:	75fb      	strb	r3, [r7, #23]
    break;
 80090c4:	e005      	b.n	80090d2 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090c6:	2303      	movs	r3, #3
 80090c8:	75fb      	strb	r3, [r7, #23]
    break;
 80090ca:	e002      	b.n	80090d2 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80090cc:	2303      	movs	r3, #3
 80090ce:	75fb      	strb	r3, [r7, #23]
    break;
 80090d0:	bf00      	nop
  }
  return usb_status;
 80090d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80090d4:	4618      	mov	r0, r3
 80090d6:	3718      	adds	r7, #24
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	460b      	mov	r3, r1
 80090e6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80090e8:	78fb      	ldrb	r3, [r7, #3]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d002      	beq.n	80090f4 <HAL_PCDEx_LPM_Callback+0x18>
 80090ee:	2b01      	cmp	r3, #1
 80090f0:	d01f      	beq.n	8009132 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80090f2:	e03b      	b.n	800916c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d007      	beq.n	800910c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80090fc:	f000 f854 	bl	80091a8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009100:	4b1c      	ldr	r3, [pc, #112]	; (8009174 <HAL_PCDEx_LPM_Callback+0x98>)
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	4a1b      	ldr	r2, [pc, #108]	; (8009174 <HAL_PCDEx_LPM_Callback+0x98>)
 8009106:	f023 0306 	bic.w	r3, r3, #6
 800910a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	6812      	ldr	r2, [r2, #0]
 800911a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800911e:	f023 0301 	bic.w	r3, r3, #1
 8009122:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe fa3f 	bl	80075ae <USBD_LL_Resume>
    break;
 8009130:	e01c      	b.n	800916c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	6812      	ldr	r2, [r2, #0]
 8009140:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009144:	f043 0301 	orr.w	r3, r3, #1
 8009148:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009150:	4618      	mov	r0, r3
 8009152:	f7fe fa10 	bl	8007576 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a1b      	ldr	r3, [r3, #32]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d005      	beq.n	800916a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800915e:	4b05      	ldr	r3, [pc, #20]	; (8009174 <HAL_PCDEx_LPM_Callback+0x98>)
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	4a04      	ldr	r2, [pc, #16]	; (8009174 <HAL_PCDEx_LPM_Callback+0x98>)
 8009164:	f043 0306 	orr.w	r3, r3, #6
 8009168:	6113      	str	r3, [r2, #16]
    break;
 800916a:	bf00      	nop
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}
 8009174:	e000ed00 	.word	0xe000ed00

08009178 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009180:	4b03      	ldr	r3, [pc, #12]	; (8009190 <USBD_static_malloc+0x18>)
}
 8009182:	4618      	mov	r0, r3
 8009184:	370c      	adds	r7, #12
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	20000d94 	.word	0x20000d94

08009194 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]

}
 800919c:	bf00      	nop
 800919e:	370c      	adds	r7, #12
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr

080091a8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80091ac:	f7f7 f9ea 	bl	8000584 <SystemClock_Config>
}
 80091b0:	bf00      	nop
 80091b2:	bd80      	pop	{r7, pc}

080091b4 <memset>:
 80091b4:	4402      	add	r2, r0
 80091b6:	4603      	mov	r3, r0
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d100      	bne.n	80091be <memset+0xa>
 80091bc:	4770      	bx	lr
 80091be:	f803 1b01 	strb.w	r1, [r3], #1
 80091c2:	e7f9      	b.n	80091b8 <memset+0x4>

080091c4 <__libc_init_array>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	4d0d      	ldr	r5, [pc, #52]	; (80091fc <__libc_init_array+0x38>)
 80091c8:	4c0d      	ldr	r4, [pc, #52]	; (8009200 <__libc_init_array+0x3c>)
 80091ca:	1b64      	subs	r4, r4, r5
 80091cc:	10a4      	asrs	r4, r4, #2
 80091ce:	2600      	movs	r6, #0
 80091d0:	42a6      	cmp	r6, r4
 80091d2:	d109      	bne.n	80091e8 <__libc_init_array+0x24>
 80091d4:	4d0b      	ldr	r5, [pc, #44]	; (8009204 <__libc_init_array+0x40>)
 80091d6:	4c0c      	ldr	r4, [pc, #48]	; (8009208 <__libc_init_array+0x44>)
 80091d8:	f000 f818 	bl	800920c <_init>
 80091dc:	1b64      	subs	r4, r4, r5
 80091de:	10a4      	asrs	r4, r4, #2
 80091e0:	2600      	movs	r6, #0
 80091e2:	42a6      	cmp	r6, r4
 80091e4:	d105      	bne.n	80091f2 <__libc_init_array+0x2e>
 80091e6:	bd70      	pop	{r4, r5, r6, pc}
 80091e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ec:	4798      	blx	r3
 80091ee:	3601      	adds	r6, #1
 80091f0:	e7ee      	b.n	80091d0 <__libc_init_array+0xc>
 80091f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80091f6:	4798      	blx	r3
 80091f8:	3601      	adds	r6, #1
 80091fa:	e7f2      	b.n	80091e2 <__libc_init_array+0x1e>
 80091fc:	080092d4 	.word	0x080092d4
 8009200:	080092d4 	.word	0x080092d4
 8009204:	080092d4 	.word	0x080092d4
 8009208:	080092d8 	.word	0x080092d8

0800920c <_init>:
 800920c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920e:	bf00      	nop
 8009210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009212:	bc08      	pop	{r3}
 8009214:	469e      	mov	lr, r3
 8009216:	4770      	bx	lr

08009218 <_fini>:
 8009218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800921a:	bf00      	nop
 800921c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800921e:	bc08      	pop	{r3}
 8009220:	469e      	mov	lr, r3
 8009222:	4770      	bx	lr
