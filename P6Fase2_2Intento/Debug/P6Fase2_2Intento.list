
P6Fase2_2Intento.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009238  08009238  00019238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092e0  080092e0  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  080092e0  080092e0  000192e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092e8  080092e8  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092e8  080092e8  000192e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092ec  080092ec  000192ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  080092f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c98  20000118  08009408  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000db0  08009408  00020db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cbc7  00000000  00000000  0002018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004070  00000000  00000000  0003cd52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001950  00000000  00000000  00040dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001378  00000000  00000000  00042718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6a9  00000000  00000000  00043a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fd24  00000000  00000000  0006e139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4fd6  00000000  00000000  0008de5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006af0  00000000  00000000  00182e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00189924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000118 	.word	0x20000118
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009220 	.word	0x08009220

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000011c 	.word	0x2000011c
 80001c4:	08009220 	.word	0x08009220

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fe40 	bl	800114e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f83f 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f9d9 	bl	8000888 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d6:	f000 f89d 	bl	8000614 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004da:	f000 f8d3 	bl	8000684 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004de:	f000 f90f 	bl	8000700 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004e2:	f000 f933 	bl	800074c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e6:	f000 f96f 	bl	80007c8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004ea:	f000 f99d 	bl	8000828 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80004ee:	f008 f8a1 	bl	8008634 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t dato[6];
  int i = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  dato[0]=0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	713b      	strb	r3, [r7, #4]
  while (1)
  {
	  for (i=0;i<50;i++)
 80004fa:	2300      	movs	r3, #0
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	e00e      	b.n	800051e <main+0x5a>
	  {
	  dato[1]=4; //cada 100ms desplazamos el ratón 4 posiciones
 8000500:	2304      	movs	r3, #4
 8000502:	717b      	strb	r3, [r7, #5]
	  dato[2]=4;
 8000504:	2304      	movs	r3, #4
 8000506:	71bb      	strb	r3, [r7, #6]
	  USBD_CUSTOM_HID_SendReport_FS(dato,6);
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2106      	movs	r1, #6
 800050c:	4618      	mov	r0, r3
 800050e:	f008 f8e3 	bl	80086d8 <USBD_CUSTOM_HID_SendReport_FS>
	  HAL_Delay(100);
 8000512:	2064      	movs	r0, #100	; 0x64
 8000514:	f000 fe90 	bl	8001238 <HAL_Delay>
	  for (i=0;i<50;i++)
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	3301      	adds	r3, #1
 800051c:	60fb      	str	r3, [r7, #12]
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	2b31      	cmp	r3, #49	; 0x31
 8000522:	dded      	ble.n	8000500 <main+0x3c>
	  }
	  for (i=0;i<50;i++)
 8000524:	2300      	movs	r3, #0
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	e00e      	b.n	8000548 <main+0x84>
	  {
	  dato[1]=-4;
 800052a:	23fc      	movs	r3, #252	; 0xfc
 800052c:	717b      	strb	r3, [r7, #5]
	  dato[2]=-4;
 800052e:	23fc      	movs	r3, #252	; 0xfc
 8000530:	71bb      	strb	r3, [r7, #6]
	  USBD_CUSTOM_HID_SendReport_FS(dato,6);
 8000532:	1d3b      	adds	r3, r7, #4
 8000534:	2106      	movs	r1, #6
 8000536:	4618      	mov	r0, r3
 8000538:	f008 f8ce 	bl	80086d8 <USBD_CUSTOM_HID_SendReport_FS>
	  HAL_Delay(100);
 800053c:	2064      	movs	r0, #100	; 0x64
 800053e:	f000 fe7b 	bl	8001238 <HAL_Delay>
	  for (i=0;i<50;i++)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	3301      	adds	r3, #1
 8000546:	60fb      	str	r3, [r7, #12]
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	2b31      	cmp	r3, #49	; 0x31
 800054c:	dded      	ble.n	800052a <main+0x66>
	  for (i=0;i<50;i++)
 800054e:	e7d4      	b.n	80004fa <main+0x36>

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b096      	sub	sp, #88	; 0x58
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	2244      	movs	r2, #68	; 0x44
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f008 fe32 	bl	80091c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	463b      	mov	r3, r7
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
 800056e:	60da      	str	r2, [r3, #12]
 8000570:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000572:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000576:	f002 fd65 	bl	8003044 <HAL_PWREx_ControlVoltageScaling>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000580:	f000 fb34 	bl	8000bec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000584:	f002 fd40 	bl	8003008 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000588:	4b21      	ldr	r3, [pc, #132]	; (8000610 <SystemClock_Config+0xc0>)
 800058a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800058e:	4a20      	ldr	r2, [pc, #128]	; (8000610 <SystemClock_Config+0xc0>)
 8000590:	f023 0318 	bic.w	r3, r3, #24
 8000594:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000598:	2314      	movs	r3, #20
 800059a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800059c:	2301      	movs	r3, #1
 800059e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005a4:	2300      	movs	r3, #0
 80005a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005a8:	2360      	movs	r3, #96	; 0x60
 80005aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ac:	2302      	movs	r3, #2
 80005ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005b0:	2301      	movs	r3, #1
 80005b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b4:	2301      	movs	r3, #1
 80005b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005b8:	2328      	movs	r3, #40	; 0x28
 80005ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005bc:	2307      	movs	r3, #7
 80005be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c0:	2302      	movs	r3, #2
 80005c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 0314 	add.w	r3, r7, #20
 80005cc:	4618      	mov	r0, r3
 80005ce:	f002 fe5b 	bl	8003288 <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005d8:	f000 fb08 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005dc:	230f      	movs	r3, #15
 80005de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e0:	2303      	movs	r3, #3
 80005e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f0:	463b      	mov	r3, r7
 80005f2:	2104      	movs	r1, #4
 80005f4:	4618      	mov	r0, r3
 80005f6:	f003 fa23 	bl	8003a40 <HAL_RCC_ClockConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000600:	f000 faf4 	bl	8000bec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000604:	f003 ff2a 	bl	800445c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000608:	bf00      	nop
 800060a:	3758      	adds	r7, #88	; 0x58
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40021000 	.word	0x40021000

08000614 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_DFSDM1_Init+0x68>)
 800061a:	4a19      	ldr	r2, [pc, #100]	; (8000680 <MX_DFSDM1_Init+0x6c>)
 800061c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_DFSDM1_Init+0x68>)
 8000620:	2201      	movs	r2, #1
 8000622:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_DFSDM1_Init+0x68>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_DFSDM1_Init+0x68>)
 800062c:	2202      	movs	r2, #2
 800062e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_DFSDM1_Init+0x68>)
 8000632:	2200      	movs	r2, #0
 8000634:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_DFSDM1_Init+0x68>)
 8000638:	2200      	movs	r2, #0
 800063a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_DFSDM1_Init+0x68>)
 800063e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000642:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000644:	4b0d      	ldr	r3, [pc, #52]	; (800067c <MX_DFSDM1_Init+0x68>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800064a:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_DFSDM1_Init+0x68>)
 800064c:	2204      	movs	r2, #4
 800064e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_DFSDM1_Init+0x68>)
 8000652:	2200      	movs	r2, #0
 8000654:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_DFSDM1_Init+0x68>)
 8000658:	2201      	movs	r2, #1
 800065a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_DFSDM1_Init+0x68>)
 800065e:	2200      	movs	r2, #0
 8000660:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_DFSDM1_Init+0x68>)
 8000664:	2200      	movs	r2, #0
 8000666:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_DFSDM1_Init+0x68>)
 800066a:	f000 ff1b 	bl	80014a4 <HAL_DFSDM_ChannelInit>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000674:	f000 faba 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	20000134 	.word	0x20000134
 8000680:	40016020 	.word	0x40016020

08000684 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000688:	4b1b      	ldr	r3, [pc, #108]	; (80006f8 <MX_I2C2_Init+0x74>)
 800068a:	4a1c      	ldr	r2, [pc, #112]	; (80006fc <MX_I2C2_Init+0x78>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800068e:	4b1a      	ldr	r3, [pc, #104]	; (80006f8 <MX_I2C2_Init+0x74>)
 8000690:	f640 6214 	movw	r2, #3604	; 0xe14
 8000694:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000696:	4b18      	ldr	r3, [pc, #96]	; (80006f8 <MX_I2C2_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <MX_I2C2_Init+0x74>)
 800069e:	2201      	movs	r2, #1
 80006a0:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <MX_I2C2_Init+0x74>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006a8:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <MX_I2C2_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <MX_I2C2_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b4:	4b10      	ldr	r3, [pc, #64]	; (80006f8 <MX_I2C2_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <MX_I2C2_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006c0:	480d      	ldr	r0, [pc, #52]	; (80006f8 <MX_I2C2_Init+0x74>)
 80006c2:	f001 f9e0 	bl	8001a86 <HAL_I2C_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006cc:	f000 fa8e 	bl	8000bec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d0:	2100      	movs	r1, #0
 80006d2:	4809      	ldr	r0, [pc, #36]	; (80006f8 <MX_I2C2_Init+0x74>)
 80006d4:	f001 fa72 	bl	8001bbc <HAL_I2CEx_ConfigAnalogFilter>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80006de:	f000 fa85 	bl	8000bec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006e2:	2100      	movs	r1, #0
 80006e4:	4804      	ldr	r0, [pc, #16]	; (80006f8 <MX_I2C2_Init+0x74>)
 80006e6:	f001 fab4 	bl	8001c52 <HAL_I2CEx_ConfigDigitalFilter>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80006f0:	f000 fa7c 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	2000016c 	.word	0x2000016c
 80006fc:	40005800 	.word	0x40005800

08000700 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000704:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <MX_QUADSPI_Init+0x44>)
 8000706:	4a10      	ldr	r2, [pc, #64]	; (8000748 <MX_QUADSPI_Init+0x48>)
 8000708:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_QUADSPI_Init+0x44>)
 800070c:	2202      	movs	r2, #2
 800070e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_QUADSPI_Init+0x44>)
 8000712:	2204      	movs	r2, #4
 8000714:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_QUADSPI_Init+0x44>)
 8000718:	2210      	movs	r2, #16
 800071a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_QUADSPI_Init+0x44>)
 800071e:	2217      	movs	r2, #23
 8000720:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_QUADSPI_Init+0x44>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_QUADSPI_Init+0x44>)
 800072a:	2200      	movs	r2, #0
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_QUADSPI_Init+0x44>)
 8000730:	f002 fcee 	bl	8003110 <HAL_QSPI_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800073a:	f000 fa57 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	200001c0 	.word	0x200001c0
 8000748:	a0001000 	.word	0xa0001000

0800074c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_SPI3_Init+0x74>)
 8000752:	4a1c      	ldr	r2, [pc, #112]	; (80007c4 <MX_SPI3_Init+0x78>)
 8000754:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_SPI3_Init+0x74>)
 8000758:	f44f 7282 	mov.w	r2, #260	; 0x104
 800075c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800075e:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_SPI3_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <MX_SPI3_Init+0x74>)
 8000766:	f44f 7240 	mov.w	r2, #768	; 0x300
 800076a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <MX_SPI3_Init+0x74>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000772:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_SPI3_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <MX_SPI3_Init+0x74>)
 800077a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000780:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_SPI3_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_SPI3_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_SPI3_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_SPI3_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_SPI3_Init+0x74>)
 800079a:	2207      	movs	r2, #7
 800079c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_SPI3_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_SPI3_Init+0x74>)
 80007a6:	2208      	movs	r2, #8
 80007a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_SPI3_Init+0x74>)
 80007ac:	f004 f838 	bl	8004820 <HAL_SPI_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007b6:	f000 fa19 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000204 	.word	0x20000204
 80007c4:	40003c00 	.word	0x40003c00

080007c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <MX_USART1_UART_Init+0x58>)
 80007ce:	4a15      	ldr	r2, [pc, #84]	; (8000824 <MX_USART1_UART_Init+0x5c>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <MX_USART1_UART_Init+0x58>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_USART1_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b0c      	ldr	r3, [pc, #48]	; (8000820 <MX_USART1_UART_Init+0x58>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <MX_USART1_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b09      	ldr	r3, [pc, #36]	; (8000820 <MX_USART1_UART_Init+0x58>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <MX_USART1_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <MX_USART1_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800080a:	4805      	ldr	r0, [pc, #20]	; (8000820 <MX_USART1_UART_Init+0x58>)
 800080c:	f004 f8ab 	bl	8004966 <HAL_UART_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000816:	f000 f9e9 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	20000268 	.word	0x20000268
 8000824:	40013800 	.word	0x40013800

08000828 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800082e:	4a15      	ldr	r2, [pc, #84]	; (8000884 <MX_USART3_UART_Init+0x5c>)
 8000830:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000834:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000838:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800083a:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800084e:	220c      	movs	r2, #12
 8000850:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800086a:	4805      	ldr	r0, [pc, #20]	; (8000880 <MX_USART3_UART_Init+0x58>)
 800086c:	f004 f87b 	bl	8004966 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000876:	f000 f9b9 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200002f0 	.word	0x200002f0
 8000884:	40004800 	.word	0x40004800

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089e:	4bbd      	ldr	r3, [pc, #756]	; (8000b94 <MX_GPIO_Init+0x30c>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	4abc      	ldr	r2, [pc, #752]	; (8000b94 <MX_GPIO_Init+0x30c>)
 80008a4:	f043 0310 	orr.w	r3, r3, #16
 80008a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008aa:	4bba      	ldr	r3, [pc, #744]	; (8000b94 <MX_GPIO_Init+0x30c>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	f003 0310 	and.w	r3, r3, #16
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4bb7      	ldr	r3, [pc, #732]	; (8000b94 <MX_GPIO_Init+0x30c>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	4ab6      	ldr	r2, [pc, #728]	; (8000b94 <MX_GPIO_Init+0x30c>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c2:	4bb4      	ldr	r3, [pc, #720]	; (8000b94 <MX_GPIO_Init+0x30c>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4bb1      	ldr	r3, [pc, #708]	; (8000b94 <MX_GPIO_Init+0x30c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4ab0      	ldr	r2, [pc, #704]	; (8000b94 <MX_GPIO_Init+0x30c>)
 80008d4:	f043 0301 	orr.w	r3, r3, #1
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4bae      	ldr	r3, [pc, #696]	; (8000b94 <MX_GPIO_Init+0x30c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0301 	and.w	r3, r3, #1
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e6:	4bab      	ldr	r3, [pc, #684]	; (8000b94 <MX_GPIO_Init+0x30c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4aaa      	ldr	r2, [pc, #680]	; (8000b94 <MX_GPIO_Init+0x30c>)
 80008ec:	f043 0302 	orr.w	r3, r3, #2
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4ba8      	ldr	r3, [pc, #672]	; (8000b94 <MX_GPIO_Init+0x30c>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008fe:	4ba5      	ldr	r3, [pc, #660]	; (8000b94 <MX_GPIO_Init+0x30c>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4aa4      	ldr	r2, [pc, #656]	; (8000b94 <MX_GPIO_Init+0x30c>)
 8000904:	f043 0308 	orr.w	r3, r3, #8
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4ba2      	ldr	r3, [pc, #648]	; (8000b94 <MX_GPIO_Init+0x30c>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f003 0308 	and.w	r3, r3, #8
 8000912:	603b      	str	r3, [r7, #0]
 8000914:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	f44f 718a 	mov.w	r1, #276	; 0x114
 800091c:	489e      	ldr	r0, [pc, #632]	; (8000b98 <MX_GPIO_Init+0x310>)
 800091e:	f001 f877 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f248 1104 	movw	r1, #33028	; 0x8104
 8000928:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800092c:	f001 f870 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000930:	2200      	movs	r2, #0
 8000932:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000936:	4899      	ldr	r0, [pc, #612]	; (8000b9c <MX_GPIO_Init+0x314>)
 8000938:	f001 f86a 	bl	8001a10 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800093c:	2200      	movs	r2, #0
 800093e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000942:	4897      	ldr	r0, [pc, #604]	; (8000ba0 <MX_GPIO_Init+0x318>)
 8000944:	f001 f864 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000948:	2201      	movs	r2, #1
 800094a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094e:	4894      	ldr	r0, [pc, #592]	; (8000ba0 <MX_GPIO_Init+0x318>)
 8000950:	f001 f85e 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f44f 7110 	mov.w	r1, #576	; 0x240
 800095a:	4892      	ldr	r0, [pc, #584]	; (8000ba4 <MX_GPIO_Init+0x31c>)
 800095c:	f001 f858 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	2120      	movs	r1, #32
 8000964:	488d      	ldr	r0, [pc, #564]	; (8000b9c <MX_GPIO_Init+0x314>)
 8000966:	f001 f853 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800096a:	2201      	movs	r2, #1
 800096c:	2101      	movs	r1, #1
 800096e:	488a      	ldr	r0, [pc, #552]	; (8000b98 <MX_GPIO_Init+0x310>)
 8000970:	f001 f84e 	bl	8001a10 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000974:	f240 1315 	movw	r3, #277	; 0x115
 8000978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4882      	ldr	r0, [pc, #520]	; (8000b98 <MX_GPIO_Init+0x310>)
 800098e:	f000 fe95 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000992:	236a      	movs	r3, #106	; 0x6a
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000996:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800099a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	487c      	ldr	r0, [pc, #496]	; (8000b98 <MX_GPIO_Init+0x310>)
 80009a8:	f000 fe88 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80009ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	4619      	mov	r1, r3
 80009c2:	4878      	ldr	r0, [pc, #480]	; (8000ba4 <MX_GPIO_Init+0x31c>)
 80009c4:	f000 fe7a 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80009c8:	233f      	movs	r3, #63	; 0x3f
 80009ca:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009cc:	230b      	movs	r3, #11
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	4872      	ldr	r0, [pc, #456]	; (8000ba4 <MX_GPIO_Init+0x31c>)
 80009dc:	f000 fe6e 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80009e0:	2303      	movs	r3, #3
 80009e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80009f0:	2308      	movs	r3, #8
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fe:	f000 fe5d 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a02:	f248 1304 	movw	r3, #33028	; 0x8104
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1e:	f000 fe4d 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a22:	2308      	movs	r3, #8
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a32:	2301      	movs	r3, #1
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a40:	f000 fe3c 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000a44:	2310      	movs	r3, #16
 8000a46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a48:	230b      	movs	r3, #11
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5a:	f000 fe2f 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000a5e:	23e0      	movs	r3, #224	; 0xe0
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	2303      	movs	r3, #3
 8000a6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a6e:	2305      	movs	r3, #5
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f000 fe1e 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000a80:	2301      	movs	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a84:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4841      	ldr	r0, [pc, #260]	; (8000b9c <MX_GPIO_Init+0x314>)
 8000a96:	f000 fe11 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a9e:	230b      	movs	r3, #11
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000aa6:	f107 0314 	add.w	r3, r7, #20
 8000aaa:	4619      	mov	r1, r3
 8000aac:	483b      	ldr	r0, [pc, #236]	; (8000b9c <MX_GPIO_Init+0x314>)
 8000aae:	f000 fe05 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000ab2:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000ab6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4834      	ldr	r0, [pc, #208]	; (8000b9c <MX_GPIO_Init+0x314>)
 8000acc:	f000 fdf6 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000ad0:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000ad4:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ad6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	482e      	ldr	r0, [pc, #184]	; (8000ba0 <MX_GPIO_Init+0x318>)
 8000ae8:	f000 fde8 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000aec:	f243 0381 	movw	r3, #12417	; 0x3081
 8000af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af2:	2301      	movs	r3, #1
 8000af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4826      	ldr	r0, [pc, #152]	; (8000ba0 <MX_GPIO_Init+0x318>)
 8000b06:	f000 fdd9 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b0a:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	2301      	movs	r3, #1
 8000b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b14:	2300      	movs	r3, #0
 8000b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	4619      	mov	r1, r3
 8000b22:	4820      	ldr	r0, [pc, #128]	; (8000ba4 <MX_GPIO_Init+0x31c>)
 8000b24:	f000 fdca 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b28:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b2e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4819      	ldr	r0, [pc, #100]	; (8000ba4 <MX_GPIO_Init+0x31c>)
 8000b40:	f000 fdbc 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000b44:	2302      	movs	r3, #2
 8000b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b50:	2303      	movs	r3, #3
 8000b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b54:	2305      	movs	r3, #5
 8000b56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f107 0314 	add.w	r3, r7, #20
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4810      	ldr	r0, [pc, #64]	; (8000ba0 <MX_GPIO_Init+0x318>)
 8000b60:	f000 fdac 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000b64:	2378      	movs	r3, #120	; 0x78
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b70:	2303      	movs	r3, #3
 8000b72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b74:	2307      	movs	r3, #7
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <MX_GPIO_Init+0x318>)
 8000b80:	f000 fd9c 	bl	80016bc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000b84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b8a:	2312      	movs	r3, #18
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	e00a      	b.n	8000ba8 <MX_GPIO_Init+0x320>
 8000b92:	bf00      	nop
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48001000 	.word	0x48001000
 8000b9c:	48000400 	.word	0x48000400
 8000ba0:	48000c00 	.word	0x48000c00
 8000ba4:	48000800 	.word	0x48000800
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480b      	ldr	r0, [pc, #44]	; (8000be8 <MX_GPIO_Init+0x360>)
 8000bba:	f000 fd7f 	bl	80016bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2017      	movs	r0, #23
 8000bc4:	f000 fc37 	bl	8001436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bc8:	2017      	movs	r0, #23
 8000bca:	f000 fc50 	bl	800146e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2028      	movs	r0, #40	; 0x28
 8000bd4:	f000 fc2f 	bl	8001436 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd8:	2028      	movs	r0, #40	; 0x28
 8000bda:	f000 fc48 	bl	800146e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	; 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	48000400 	.word	0x48000400

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <Error_Handler+0x8>
	...

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <HAL_MspInit+0x44>)
 8000c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c02:	4a0e      	ldr	r2, [pc, #56]	; (8000c3c <HAL_MspInit+0x44>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6613      	str	r3, [r2, #96]	; 0x60
 8000c0a:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <HAL_MspInit+0x44>)
 8000c0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	607b      	str	r3, [r7, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <HAL_MspInit+0x44>)
 8000c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1a:	4a08      	ldr	r2, [pc, #32]	; (8000c3c <HAL_MspInit+0x44>)
 8000c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c20:	6593      	str	r3, [r2, #88]	; 0x58
 8000c22:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <HAL_MspInit+0x44>)
 8000c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	40021000 	.word	0x40021000

08000c40 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b0ac      	sub	sp, #176	; 0xb0
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2288      	movs	r2, #136	; 0x88
 8000c5e:	2100      	movs	r1, #0
 8000c60:	4618      	mov	r0, r3
 8000c62:	f008 fab1 	bl	80091c8 <memset>
  if(DFSDM1_Init == 0)
 8000c66:	4b25      	ldr	r3, [pc, #148]	; (8000cfc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d142      	bne.n	8000cf4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000c6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000c74:	2300      	movs	r3, #0
 8000c76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f003 f902 	bl	8003e88 <HAL_RCCEx_PeriphCLKConfig>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000c8a:	f7ff ffaf 	bl	8000bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c92:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c98:	6613      	str	r3, [r2, #96]	; 0x60
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cac:	f043 0310 	orr.w	r3, r3, #16
 8000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb2:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000cbe:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000cc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000cd8:	2306      	movs	r3, #6
 8000cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cde:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4807      	ldr	r0, [pc, #28]	; (8000d04 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000ce6:	f000 fce9 	bl	80016bc <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	4a02      	ldr	r2, [pc, #8]	; (8000cfc <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000cf2:	6013      	str	r3, [r2, #0]
  }

}
 8000cf4:	bf00      	nop
 8000cf6:	37b0      	adds	r7, #176	; 0xb0
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000378 	.word	0x20000378
 8000d00:	40021000 	.word	0x40021000
 8000d04:	48001000 	.word	0x48001000

08000d08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b0ac      	sub	sp, #176	; 0xb0
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2288      	movs	r2, #136	; 0x88
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f008 fa4d 	bl	80091c8 <memset>
  if(hi2c->Instance==I2C2)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a21      	ldr	r2, [pc, #132]	; (8000db8 <HAL_I2C_MspInit+0xb0>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d13b      	bne.n	8000db0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d38:	2380      	movs	r3, #128	; 0x80
 8000d3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4618      	mov	r0, r3
 8000d46:	f003 f89f 	bl	8003e88 <HAL_RCCEx_PeriphCLKConfig>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d50:	f7ff ff4c 	bl	8000bec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d54:	4b19      	ldr	r3, [pc, #100]	; (8000dbc <HAL_I2C_MspInit+0xb4>)
 8000d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d58:	4a18      	ldr	r2, [pc, #96]	; (8000dbc <HAL_I2C_MspInit+0xb4>)
 8000d5a:	f043 0302 	orr.w	r3, r3, #2
 8000d5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_I2C_MspInit+0xb4>)
 8000d62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	613b      	str	r3, [r7, #16]
 8000d6a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000d6c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d74:	2312      	movs	r3, #18
 8000d76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d80:	2303      	movs	r3, #3
 8000d82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d86:	2304      	movs	r3, #4
 8000d88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d90:	4619      	mov	r1, r3
 8000d92:	480b      	ldr	r0, [pc, #44]	; (8000dc0 <HAL_I2C_MspInit+0xb8>)
 8000d94:	f000 fc92 	bl	80016bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_I2C_MspInit+0xb4>)
 8000d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_I2C_MspInit+0xb4>)
 8000d9e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000da2:	6593      	str	r3, [r2, #88]	; 0x58
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <HAL_I2C_MspInit+0xb4>)
 8000da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	37b0      	adds	r7, #176	; 0xb0
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40005800 	.word	0x40005800
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	48000400 	.word	0x48000400

08000dc4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <HAL_QSPI_MspInit+0x7c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d128      	bne.n	8000e38 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_QSPI_MspInit+0x80>)
 8000de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dea:	4a16      	ldr	r2, [pc, #88]	; (8000e44 <HAL_QSPI_MspInit+0x80>)
 8000dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000df0:	6513      	str	r3, [r2, #80]	; 0x50
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_QSPI_MspInit+0x80>)
 8000df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_QSPI_MspInit+0x80>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <HAL_QSPI_MspInit+0x80>)
 8000e04:	f043 0310 	orr.w	r3, r3, #16
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_QSPI_MspInit+0x80>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0310 	and.w	r3, r3, #16
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000e16:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000e1a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e24:	2303      	movs	r3, #3
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e28:	230a      	movs	r3, #10
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e2c:	f107 0314 	add.w	r3, r7, #20
 8000e30:	4619      	mov	r1, r3
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <HAL_QSPI_MspInit+0x84>)
 8000e34:	f000 fc42 	bl	80016bc <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	a0001000 	.word	0xa0001000
 8000e44:	40021000 	.word	0x40021000
 8000e48:	48001000 	.word	0x48001000

08000e4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <HAL_SPI_MspInit+0x7c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d128      	bne.n	8000ec0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <HAL_SPI_MspInit+0x80>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e72:	4a16      	ldr	r2, [pc, #88]	; (8000ecc <HAL_SPI_MspInit+0x80>)
 8000e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e78:	6593      	str	r3, [r2, #88]	; 0x58
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_SPI_MspInit+0x80>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_SPI_MspInit+0x80>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a10      	ldr	r2, [pc, #64]	; (8000ecc <HAL_SPI_MspInit+0x80>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <HAL_SPI_MspInit+0x80>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000e9e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000eb0:	2306      	movs	r3, #6
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <HAL_SPI_MspInit+0x84>)
 8000ebc:	f000 fbfe 	bl	80016bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ec0:	bf00      	nop
 8000ec2:	3728      	adds	r7, #40	; 0x28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	40003c00 	.word	0x40003c00
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	48000800 	.word	0x48000800

08000ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b0ae      	sub	sp, #184	; 0xb8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	2288      	movs	r2, #136	; 0x88
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f008 f967 	bl	80091c8 <memset>
  if(huart->Instance==USART1)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a42      	ldr	r2, [pc, #264]	; (8001008 <HAL_UART_MspInit+0x134>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d13b      	bne.n	8000f7c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f0c:	f107 031c 	add.w	r3, r7, #28
 8000f10:	4618      	mov	r0, r3
 8000f12:	f002 ffb9 	bl	8003e88 <HAL_RCCEx_PeriphCLKConfig>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f1c:	f7ff fe66 	bl	8000bec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f20:	4b3a      	ldr	r3, [pc, #232]	; (800100c <HAL_UART_MspInit+0x138>)
 8000f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f24:	4a39      	ldr	r2, [pc, #228]	; (800100c <HAL_UART_MspInit+0x138>)
 8000f26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2c:	4b37      	ldr	r3, [pc, #220]	; (800100c <HAL_UART_MspInit+0x138>)
 8000f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f38:	4b34      	ldr	r3, [pc, #208]	; (800100c <HAL_UART_MspInit+0x138>)
 8000f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3c:	4a33      	ldr	r2, [pc, #204]	; (800100c <HAL_UART_MspInit+0x138>)
 8000f3e:	f043 0302 	orr.w	r3, r3, #2
 8000f42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f44:	4b31      	ldr	r3, [pc, #196]	; (800100c <HAL_UART_MspInit+0x138>)
 8000f46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f48:	f003 0302 	and.w	r3, r3, #2
 8000f4c:	617b      	str	r3, [r7, #20]
 8000f4e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000f50:	23c0      	movs	r3, #192	; 0xc0
 8000f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f68:	2307      	movs	r3, #7
 8000f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f72:	4619      	mov	r1, r3
 8000f74:	4826      	ldr	r0, [pc, #152]	; (8001010 <HAL_UART_MspInit+0x13c>)
 8000f76:	f000 fba1 	bl	80016bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f7a:	e040      	b.n	8000ffe <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a24      	ldr	r2, [pc, #144]	; (8001014 <HAL_UART_MspInit+0x140>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d13b      	bne.n	8000ffe <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f86:	2304      	movs	r3, #4
 8000f88:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f8e:	f107 031c 	add.w	r3, r7, #28
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 ff78 	bl	8003e88 <HAL_RCCEx_PeriphCLKConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000f9e:	f7ff fe25 	bl	8000bec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <HAL_UART_MspInit+0x138>)
 8000fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fa6:	4a19      	ldr	r2, [pc, #100]	; (800100c <HAL_UART_MspInit+0x138>)
 8000fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fac:	6593      	str	r3, [r2, #88]	; 0x58
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_UART_MspInit+0x138>)
 8000fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <HAL_UART_MspInit+0x138>)
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	4a13      	ldr	r2, [pc, #76]	; (800100c <HAL_UART_MspInit+0x138>)
 8000fc0:	f043 0308 	orr.w	r3, r3, #8
 8000fc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_UART_MspInit+0x138>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	f003 0308 	and.w	r3, r3, #8
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000fd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe6:	2303      	movs	r3, #3
 8000fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fec:	2307      	movs	r3, #7
 8000fee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ff2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4807      	ldr	r0, [pc, #28]	; (8001018 <HAL_UART_MspInit+0x144>)
 8000ffa:	f000 fb5f 	bl	80016bc <HAL_GPIO_Init>
}
 8000ffe:	bf00      	nop
 8001000:	37b8      	adds	r7, #184	; 0xb8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40013800 	.word	0x40013800
 800100c:	40021000 	.word	0x40021000
 8001010:	48000400 	.word	0x48000400
 8001014:	40004800 	.word	0x40004800
 8001018:	48000c00 	.word	0x48000c00

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <NMI_Handler+0x4>

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler+0x4>

0800102e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler+0x4>

0800103a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001056:	b480      	push	{r7}
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001068:	f000 f8c6 	bl	80011f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001074:	2020      	movs	r0, #32
 8001076:	f000 fce3 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800107a:	2040      	movs	r0, #64	; 0x40
 800107c:	f000 fce0 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001080:	2080      	movs	r0, #128	; 0x80
 8001082:	f000 fcdd 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001086:	f44f 7080 	mov.w	r0, #256	; 0x100
 800108a:	f000 fcd9 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}

08001092 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001096:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800109a:	f000 fcd1 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800109e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80010a2:	f000 fccd 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80010a6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010aa:	f000 fcc9 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80010ae:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80010b2:	f000 fcc5 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80010b6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80010ba:	f000 fcc1 	bl	8001a40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010c8:	4802      	ldr	r0, [pc, #8]	; (80010d4 <OTG_FS_IRQHandler+0x10>)
 80010ca:	f000 ff61 	bl	8001f90 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000884 	.word	0x20000884

080010d8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <SystemInit+0x20>)
 80010de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010e2:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <SystemInit+0x20>)
 80010e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001134 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001100:	f7ff ffea 	bl	80010d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001104:	480c      	ldr	r0, [pc, #48]	; (8001138 <LoopForever+0x6>)
  ldr r1, =_edata
 8001106:	490d      	ldr	r1, [pc, #52]	; (800113c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001108:	4a0d      	ldr	r2, [pc, #52]	; (8001140 <LoopForever+0xe>)
  movs r3, #0
 800110a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800110c:	e002      	b.n	8001114 <LoopCopyDataInit>

0800110e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800110e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001112:	3304      	adds	r3, #4

08001114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001118:	d3f9      	bcc.n	800110e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111a:	4a0a      	ldr	r2, [pc, #40]	; (8001144 <LoopForever+0x12>)
  ldr r4, =_ebss
 800111c:	4c0a      	ldr	r4, [pc, #40]	; (8001148 <LoopForever+0x16>)
  movs r3, #0
 800111e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001120:	e001      	b.n	8001126 <LoopFillZerobss>

08001122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001124:	3204      	adds	r2, #4

08001126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001128:	d3fb      	bcc.n	8001122 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112a:	f008 f855 	bl	80091d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800112e:	f7ff f9c9 	bl	80004c4 <main>

08001132 <LoopForever>:

LoopForever:
    b LoopForever
 8001132:	e7fe      	b.n	8001132 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001134:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800113c:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8001140:	080092f0 	.word	0x080092f0
  ldr r2, =_sbss
 8001144:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8001148:	20000db0 	.word	0x20000db0

0800114c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800114c:	e7fe      	b.n	800114c <ADC1_2_IRQHandler>

0800114e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001154:	2300      	movs	r3, #0
 8001156:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 f961 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800115e:	2000      	movs	r0, #0
 8001160:	f000 f80e 	bl	8001180 <HAL_InitTick>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d002      	beq.n	8001170 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	e001      	b.n	8001174 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001170:	f7ff fd42 	bl	8000bf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001174:	79fb      	ldrb	r3, [r7, #7]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001188:	2300      	movs	r3, #0
 800118a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800118c:	4b17      	ldr	r3, [pc, #92]	; (80011ec <HAL_InitTick+0x6c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d023      	beq.n	80011dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_InitTick+0x70>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b14      	ldr	r3, [pc, #80]	; (80011ec <HAL_InitTick+0x6c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 f96d 	bl	800148a <HAL_SYSTICK_Config>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10f      	bne.n	80011d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b0f      	cmp	r3, #15
 80011ba:	d809      	bhi.n	80011d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011bc:	2200      	movs	r2, #0
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	f04f 30ff 	mov.w	r0, #4294967295
 80011c4:	f000 f937 	bl	8001436 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011c8:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <HAL_InitTick+0x74>)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e007      	b.n	80011e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	73fb      	strb	r3, [r7, #15]
 80011d4:	e004      	b.n	80011e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	73fb      	strb	r3, [r7, #15]
 80011da:	e001      	b.n	80011e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	3710      	adds	r7, #16
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000008 	.word	0x20000008
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000004 	.word	0x20000004

080011f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_IncTick+0x20>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	461a      	mov	r2, r3
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_IncTick+0x24>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4413      	add	r3, r2
 8001208:	4a04      	ldr	r2, [pc, #16]	; (800121c <HAL_IncTick+0x24>)
 800120a:	6013      	str	r3, [r2, #0]
}
 800120c:	bf00      	nop
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	20000008 	.word	0x20000008
 800121c:	2000037c 	.word	0x2000037c

08001220 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  return uwTick;
 8001224:	4b03      	ldr	r3, [pc, #12]	; (8001234 <HAL_GetTick+0x14>)
 8001226:	681b      	ldr	r3, [r3, #0]
}
 8001228:	4618      	mov	r0, r3
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	2000037c 	.word	0x2000037c

08001238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b084      	sub	sp, #16
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001240:	f7ff ffee 	bl	8001220 <HAL_GetTick>
 8001244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001250:	d005      	beq.n	800125e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <HAL_Delay+0x44>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4413      	add	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800125e:	bf00      	nop
 8001260:	f7ff ffde 	bl	8001220 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	68fa      	ldr	r2, [r7, #12]
 800126c:	429a      	cmp	r2, r3
 800126e:	d8f7      	bhi.n	8001260 <HAL_Delay+0x28>
  {
  }
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000008 	.word	0x20000008

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4907      	ldr	r1, [pc, #28]	; (800131c <__NVIC_EnableIRQ+0x38>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	; (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	; (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	; 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	; 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff8e 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	; (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff29 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff3e 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ff8e 	bl	8001374 <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5d 	bl	8001320 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff31 	bl	80012e4 <__NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffa2 	bl	80013dc <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d101      	bne.n	80014b6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e0ac      	b.n	8001610 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f8b2 	bl	8001624 <DFSDM_GetChannelFromInstance>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a55      	ldr	r2, [pc, #340]	; (8001618 <HAL_DFSDM_ChannelInit+0x174>)
 80014c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e09f      	b.n	8001610 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f7ff fbb5 	bl	8000c40 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80014d6:	4b51      	ldr	r3, [pc, #324]	; (800161c <HAL_DFSDM_ChannelInit+0x178>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3301      	adds	r3, #1
 80014dc:	4a4f      	ldr	r2, [pc, #316]	; (800161c <HAL_DFSDM_ChannelInit+0x178>)
 80014de:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80014e0:	4b4e      	ldr	r3, [pc, #312]	; (800161c <HAL_DFSDM_ChannelInit+0x178>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d125      	bne.n	8001534 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80014e8:	4b4d      	ldr	r3, [pc, #308]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a4c      	ldr	r2, [pc, #304]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 80014ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80014f2:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80014f4:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	4948      	ldr	r1, [pc, #288]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 80014fe:	4313      	orrs	r3, r2
 8001500:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001502:	4b47      	ldr	r3, [pc, #284]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a46      	ldr	r2, [pc, #280]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 8001508:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800150c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	791b      	ldrb	r3, [r3, #4]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d108      	bne.n	8001528 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001516:	4b42      	ldr	r3, [pc, #264]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	3b01      	subs	r3, #1
 8001520:	041b      	lsls	r3, r3, #16
 8001522:	493f      	ldr	r1, [pc, #252]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 8001524:	4313      	orrs	r3, r2
 8001526:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001528:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a3c      	ldr	r2, [pc, #240]	; (8001620 <HAL_DFSDM_ChannelInit+0x17c>)
 800152e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001532:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001542:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6819      	ldr	r1, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001552:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001558:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	430a      	orrs	r2, r1
 8001560:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 020f 	bic.w	r2, r2, #15
 8001570:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	6819      	ldr	r1, [r3, #0]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001580:	431a      	orrs	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001598:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6899      	ldr	r1, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a8:	3b01      	subs	r3, #1
 80015aa:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f002 0207 	and.w	r2, r2, #7
 80015c4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	6859      	ldr	r1, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80015d8:	431a      	orrs	r2, r3
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	430a      	orrs	r2, r1
 80015e0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015f0:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2201      	movs	r2, #1
 80015f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f810 	bl	8001624 <DFSDM_GetChannelFromInstance>
 8001604:	4602      	mov	r2, r0
 8001606:	4904      	ldr	r1, [pc, #16]	; (8001618 <HAL_DFSDM_ChannelInit+0x174>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000384 	.word	0x20000384
 800161c:	20000380 	.word	0x20000380
 8001620:	40016000 	.word	0x40016000

08001624 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a1c      	ldr	r2, [pc, #112]	; (80016a0 <DFSDM_GetChannelFromInstance+0x7c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d102      	bne.n	800163a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	e02b      	b.n	8001692 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a19      	ldr	r2, [pc, #100]	; (80016a4 <DFSDM_GetChannelFromInstance+0x80>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d102      	bne.n	8001648 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001642:	2301      	movs	r3, #1
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	e024      	b.n	8001692 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4a17      	ldr	r2, [pc, #92]	; (80016a8 <DFSDM_GetChannelFromInstance+0x84>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d102      	bne.n	8001656 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001650:	2302      	movs	r3, #2
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	e01d      	b.n	8001692 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <DFSDM_GetChannelFromInstance+0x88>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d102      	bne.n	8001664 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800165e:	2304      	movs	r3, #4
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	e016      	b.n	8001692 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <DFSDM_GetChannelFromInstance+0x8c>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d102      	bne.n	8001672 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800166c:	2305      	movs	r3, #5
 800166e:	60fb      	str	r3, [r7, #12]
 8001670:	e00f      	b.n	8001692 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <DFSDM_GetChannelFromInstance+0x90>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d102      	bne.n	8001680 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800167a:	2306      	movs	r3, #6
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	e008      	b.n	8001692 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	4a0d      	ldr	r2, [pc, #52]	; (80016b8 <DFSDM_GetChannelFromInstance+0x94>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d102      	bne.n	800168e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001688:	2307      	movs	r3, #7
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	e001      	b.n	8001692 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800168e:	2303      	movs	r3, #3
 8001690:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	40016000 	.word	0x40016000
 80016a4:	40016020 	.word	0x40016020
 80016a8:	40016040 	.word	0x40016040
 80016ac:	40016080 	.word	0x40016080
 80016b0:	400160a0 	.word	0x400160a0
 80016b4:	400160c0 	.word	0x400160c0
 80016b8:	400160e0 	.word	0x400160e0

080016bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ca:	e17f      	b.n	80019cc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 8171 	beq.w	80019c6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0303 	and.w	r3, r3, #3
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d005      	beq.n	80016fc <HAL_GPIO_Init+0x40>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d130      	bne.n	800175e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	4313      	orrs	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001732:	2201      	movs	r2, #1
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43db      	mvns	r3, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4013      	ands	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	f003 0201 	and.w	r2, r3, #1
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4313      	orrs	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b03      	cmp	r3, #3
 8001768:	d118      	bne.n	800179c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001770:	2201      	movs	r2, #1
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	08db      	lsrs	r3, r3, #3
 8001786:	f003 0201 	and.w	r2, r3, #1
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	693a      	ldr	r2, [r7, #16]
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d017      	beq.n	80017d8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d123      	bne.n	800182c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	08da      	lsrs	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3208      	adds	r2, #8
 80017ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f003 0307 	and.w	r3, r3, #7
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	220f      	movs	r2, #15
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	691a      	ldr	r2, [r3, #16]
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	08da      	lsrs	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	3208      	adds	r2, #8
 8001826:	6939      	ldr	r1, [r7, #16]
 8001828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	2203      	movs	r2, #3
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f003 0203 	and.w	r2, r3, #3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 80ac 	beq.w	80019c6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	4b5f      	ldr	r3, [pc, #380]	; (80019ec <HAL_GPIO_Init+0x330>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	4a5e      	ldr	r2, [pc, #376]	; (80019ec <HAL_GPIO_Init+0x330>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6613      	str	r3, [r2, #96]	; 0x60
 800187a:	4b5c      	ldr	r3, [pc, #368]	; (80019ec <HAL_GPIO_Init+0x330>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001886:	4a5a      	ldr	r2, [pc, #360]	; (80019f0 <HAL_GPIO_Init+0x334>)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	089b      	lsrs	r3, r3, #2
 800188c:	3302      	adds	r3, #2
 800188e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018b0:	d025      	beq.n	80018fe <HAL_GPIO_Init+0x242>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a4f      	ldr	r2, [pc, #316]	; (80019f4 <HAL_GPIO_Init+0x338>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d01f      	beq.n	80018fa <HAL_GPIO_Init+0x23e>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4e      	ldr	r2, [pc, #312]	; (80019f8 <HAL_GPIO_Init+0x33c>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d019      	beq.n	80018f6 <HAL_GPIO_Init+0x23a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4d      	ldr	r2, [pc, #308]	; (80019fc <HAL_GPIO_Init+0x340>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d013      	beq.n	80018f2 <HAL_GPIO_Init+0x236>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4c      	ldr	r2, [pc, #304]	; (8001a00 <HAL_GPIO_Init+0x344>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d00d      	beq.n	80018ee <HAL_GPIO_Init+0x232>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4b      	ldr	r2, [pc, #300]	; (8001a04 <HAL_GPIO_Init+0x348>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d007      	beq.n	80018ea <HAL_GPIO_Init+0x22e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4a      	ldr	r2, [pc, #296]	; (8001a08 <HAL_GPIO_Init+0x34c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d101      	bne.n	80018e6 <HAL_GPIO_Init+0x22a>
 80018e2:	2306      	movs	r3, #6
 80018e4:	e00c      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018e6:	2307      	movs	r3, #7
 80018e8:	e00a      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018ea:	2305      	movs	r3, #5
 80018ec:	e008      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018ee:	2304      	movs	r3, #4
 80018f0:	e006      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018f2:	2303      	movs	r3, #3
 80018f4:	e004      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018f6:	2302      	movs	r3, #2
 80018f8:	e002      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_GPIO_Init+0x244>
 80018fe:	2300      	movs	r3, #0
 8001900:	697a      	ldr	r2, [r7, #20]
 8001902:	f002 0203 	and.w	r2, r2, #3
 8001906:	0092      	lsls	r2, r2, #2
 8001908:	4093      	lsls	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	4313      	orrs	r3, r2
 800190e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001910:	4937      	ldr	r1, [pc, #220]	; (80019f0 <HAL_GPIO_Init+0x334>)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	089b      	lsrs	r3, r3, #2
 8001916:	3302      	adds	r3, #2
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800191e:	4b3b      	ldr	r3, [pc, #236]	; (8001a0c <HAL_GPIO_Init+0x350>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001942:	4a32      	ldr	r2, [pc, #200]	; (8001a0c <HAL_GPIO_Init+0x350>)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001948:	4b30      	ldr	r3, [pc, #192]	; (8001a0c <HAL_GPIO_Init+0x350>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	43db      	mvns	r3, r3
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4313      	orrs	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800196c:	4a27      	ldr	r2, [pc, #156]	; (8001a0c <HAL_GPIO_Init+0x350>)
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001972:	4b26      	ldr	r3, [pc, #152]	; (8001a0c <HAL_GPIO_Init+0x350>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	43db      	mvns	r3, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001996:	4a1d      	ldr	r2, [pc, #116]	; (8001a0c <HAL_GPIO_Init+0x350>)
 8001998:	693b      	ldr	r3, [r7, #16]
 800199a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800199c:	4b1b      	ldr	r3, [pc, #108]	; (8001a0c <HAL_GPIO_Init+0x350>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	43db      	mvns	r3, r3
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	4013      	ands	r3, r2
 80019aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4313      	orrs	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019c0:	4a12      	ldr	r2, [pc, #72]	; (8001a0c <HAL_GPIO_Init+0x350>)
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	3301      	adds	r3, #1
 80019ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa22 f303 	lsr.w	r3, r2, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	f47f ae78 	bne.w	80016cc <HAL_GPIO_Init+0x10>
  }
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010000 	.word	0x40010000
 80019f4:	48000400 	.word	0x48000400
 80019f8:	48000800 	.word	0x48000800
 80019fc:	48000c00 	.word	0x48000c00
 8001a00:	48001000 	.word	0x48001000
 8001a04:	48001400 	.word	0x48001400
 8001a08:	48001800 	.word	0x48001800
 8001a0c:	40010400 	.word	0x40010400

08001a10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a20:	787b      	ldrb	r3, [r7, #1]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d003      	beq.n	8001a2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a2c:	e002      	b.n	8001a34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a4c:	695a      	ldr	r2, [r3, #20]
 8001a4e:	88fb      	ldrh	r3, [r7, #6]
 8001a50:	4013      	ands	r3, r2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d006      	beq.n	8001a64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a56:	4a05      	ldr	r2, [pc, #20]	; (8001a6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a58:	88fb      	ldrh	r3, [r7, #6]
 8001a5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 f806 	bl	8001a70 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40010400 	.word	0x40010400

08001a70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d101      	bne.n	8001a98 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e08d      	b.n	8001bb4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d106      	bne.n	8001ab2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff f92b 	bl	8000d08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2224      	movs	r2, #36	; 0x24
 8001ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0201 	bic.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685a      	ldr	r2, [r3, #4]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ad6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ae6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d107      	bne.n	8001b00 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689a      	ldr	r2, [r3, #8]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001afc:	609a      	str	r2, [r3, #8]
 8001afe:	e006      	b.n	8001b0e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b0c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d108      	bne.n	8001b28 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	e007      	b.n	8001b38 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b36:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6812      	ldr	r2, [r2, #0]
 8001b42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b4a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b5a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	695b      	ldr	r3, [r3, #20]
 8001b64:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69d9      	ldr	r1, [r3, #28]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1a      	ldr	r2, [r3, #32]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	430a      	orrs	r2, r1
 8001b84:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f042 0201 	orr.w	r2, r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2220      	movs	r2, #32
 8001ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b20      	cmp	r3, #32
 8001bd0:	d138      	bne.n	8001c44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e032      	b.n	8001c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2201      	movs	r2, #1
 8001be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2224      	movs	r2, #36	; 0x24
 8001bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6819      	ldr	r1, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0201 	orr.w	r2, r2, #1
 8001c2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2220      	movs	r2, #32
 8001c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	e000      	b.n	8001c46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c44:	2302      	movs	r3, #2
  }
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b085      	sub	sp, #20
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
 8001c5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b20      	cmp	r3, #32
 8001c66:	d139      	bne.n	8001cdc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d101      	bne.n	8001c76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e033      	b.n	8001cde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2224      	movs	r2, #36	; 0x24
 8001c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ca4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0201 	orr.w	r2, r2, #1
 8001cc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	e000      	b.n	8001cde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cdc:	2302      	movs	r3, #2
  }
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cec:	b08f      	sub	sp, #60	; 0x3c
 8001cee:	af0a      	add	r7, sp, #40	; 0x28
 8001cf0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e116      	b.n	8001f2a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d106      	bne.n	8001d1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f006 fe14 	bl	8008944 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2203      	movs	r2, #3
 8001d20:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d102      	bne.n	8001d36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 fc09 	bl	8005552 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	687e      	ldr	r6, [r7, #4]
 8001d48:	466d      	mov	r5, sp
 8001d4a:	f106 0410 	add.w	r4, r6, #16
 8001d4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d5e:	1d33      	adds	r3, r6, #4
 8001d60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d62:	6838      	ldr	r0, [r7, #0]
 8001d64:	f003 fb1b 	bl	800539e <USB_CoreInit>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d005      	beq.n	8001d7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e0d7      	b.n	8001f2a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2100      	movs	r1, #0
 8001d80:	4618      	mov	r0, r3
 8001d82:	f003 fbf7 	bl	8005574 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]
 8001d8a:	e04a      	b.n	8001e22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	6879      	ldr	r1, [r7, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	4413      	add	r3, r2
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	440b      	add	r3, r1
 8001d9a:	333d      	adds	r3, #61	; 0x3d
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001da0:	7bfa      	ldrb	r2, [r7, #15]
 8001da2:	6879      	ldr	r1, [r7, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	4413      	add	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	333c      	adds	r3, #60	; 0x3c
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001db4:	7bfa      	ldrb	r2, [r7, #15]
 8001db6:	7bfb      	ldrb	r3, [r7, #15]
 8001db8:	b298      	uxth	r0, r3
 8001dba:	6879      	ldr	r1, [r7, #4]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	3356      	adds	r3, #86	; 0x56
 8001dc8:	4602      	mov	r2, r0
 8001dca:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001dcc:	7bfa      	ldrb	r2, [r7, #15]
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	3340      	adds	r3, #64	; 0x40
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001de0:	7bfa      	ldrb	r2, [r7, #15]
 8001de2:	6879      	ldr	r1, [r7, #4]
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	3344      	adds	r3, #68	; 0x44
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001df4:	7bfa      	ldrb	r2, [r7, #15]
 8001df6:	6879      	ldr	r1, [r7, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	3348      	adds	r3, #72	; 0x48
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001e08:	7bfa      	ldrb	r2, [r7, #15]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	334c      	adds	r3, #76	; 0x4c
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
 8001e22:	7bfa      	ldrb	r2, [r7, #15]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d3af      	bcc.n	8001d8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	73fb      	strb	r3, [r7, #15]
 8001e30:	e044      	b.n	8001ebc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e32:	7bfa      	ldrb	r2, [r7, #15]
 8001e34:	6879      	ldr	r1, [r7, #4]
 8001e36:	4613      	mov	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e48:	7bfa      	ldrb	r2, [r7, #15]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4413      	add	r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	440b      	add	r3, r1
 8001e56:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e5e:	7bfa      	ldrb	r2, [r7, #15]
 8001e60:	6879      	ldr	r1, [r7, #4]
 8001e62:	4613      	mov	r3, r2
 8001e64:	00db      	lsls	r3, r3, #3
 8001e66:	4413      	add	r3, r2
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	6879      	ldr	r1, [r7, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	00db      	lsls	r3, r3, #3
 8001e7c:	4413      	add	r3, r2
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	440b      	add	r3, r1
 8001e82:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e8a:	7bfa      	ldrb	r2, [r7, #15]
 8001e8c:	6879      	ldr	r1, [r7, #4]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	4413      	add	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	440b      	add	r3, r1
 8001e98:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ea0:	7bfa      	ldrb	r2, [r7, #15]
 8001ea2:	6879      	ldr	r1, [r7, #4]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	009b      	lsls	r3, r3, #2
 8001eac:	440b      	add	r3, r1
 8001eae:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001eb6:	7bfb      	ldrb	r3, [r7, #15]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	73fb      	strb	r3, [r7, #15]
 8001ebc:	7bfa      	ldrb	r2, [r7, #15]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d3b5      	bcc.n	8001e32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	603b      	str	r3, [r7, #0]
 8001ecc:	687e      	ldr	r6, [r7, #4]
 8001ece:	466d      	mov	r5, sp
 8001ed0:	f106 0410 	add.w	r4, r6, #16
 8001ed4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001edc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ee0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ee4:	1d33      	adds	r3, r6, #4
 8001ee6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ee8:	6838      	ldr	r0, [r7, #0]
 8001eea:	f003 fb8f 	bl	800560c <USB_DevInit>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e014      	b.n	8001f2a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2200      	movs	r2, #0
 8001f04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d102      	bne.n	8001f1e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f001 f851 	bl	8002fc0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f004 fb3d 	bl	80065a2 <USB_DevDisconnect>

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f32 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d101      	bne.n	8001f4e <HAL_PCD_Start+0x1c>
 8001f4a:	2302      	movs	r3, #2
 8001f4c:	e01c      	b.n	8001f88 <HAL_PCD_Start+0x56>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d105      	bne.n	8001f6a <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f003 fade 	bl	8005530 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f004 faf1 	bl	8006560 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f90:	b590      	push	{r4, r7, lr}
 8001f92:	b08d      	sub	sp, #52	; 0x34
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 fbaf 	bl	800670a <USB_GetMode>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f040 847e 	bne.w	80028b0 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f004 fb13 	bl	80065e4 <USB_ReadInterrupts>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 8474 	beq.w	80028ae <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	0a1b      	lsrs	r3, r3, #8
 8001fd0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f004 fb00 	bl	80065e4 <USB_ReadInterrupts>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d107      	bne.n	8001ffe <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695a      	ldr	r2, [r3, #20]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f002 0202 	and.w	r2, r2, #2
 8001ffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f004 faee 	bl	80065e4 <USB_ReadInterrupts>
 8002008:	4603      	mov	r3, r0
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b10      	cmp	r3, #16
 8002010:	d161      	bne.n	80020d6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	699a      	ldr	r2, [r3, #24]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 0210 	bic.w	r2, r2, #16
 8002020:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002022:	6a3b      	ldr	r3, [r7, #32]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	f003 020f 	and.w	r2, r3, #15
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	3304      	adds	r3, #4
 8002040:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	0c5b      	lsrs	r3, r3, #17
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	2b02      	cmp	r3, #2
 800204c:	d124      	bne.n	8002098 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002054:	4013      	ands	r3, r2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d035      	beq.n	80020c6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800205a:	697b      	ldr	r3, [r7, #20]
 800205c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002064:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002068:	b29b      	uxth	r3, r3
 800206a:	461a      	mov	r2, r3
 800206c:	6a38      	ldr	r0, [r7, #32]
 800206e:	f004 f925 	bl	80062bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800207e:	441a      	add	r2, r3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	091b      	lsrs	r3, r3, #4
 800208c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002090:	441a      	add	r2, r3
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	615a      	str	r2, [r3, #20]
 8002096:	e016      	b.n	80020c6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	0c5b      	lsrs	r3, r3, #17
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	2b06      	cmp	r3, #6
 80020a2:	d110      	bne.n	80020c6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020aa:	2208      	movs	r2, #8
 80020ac:	4619      	mov	r1, r3
 80020ae:	6a38      	ldr	r0, [r7, #32]
 80020b0:	f004 f904 	bl	80062bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	091b      	lsrs	r3, r3, #4
 80020bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80020c0:	441a      	add	r2, r3
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699a      	ldr	r2, [r3, #24]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f042 0210 	orr.w	r2, r2, #16
 80020d4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f004 fa82 	bl	80065e4 <USB_ReadInterrupts>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020ea:	f040 80a7 	bne.w	800223c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4618      	mov	r0, r3
 80020f8:	f004 fa87 	bl	800660a <USB_ReadDevAllOutEpInterrupt>
 80020fc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020fe:	e099      	b.n	8002234 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 808e 	beq.w	8002228 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002112:	b2d2      	uxtb	r2, r2
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f004 faab 	bl	8006672 <USB_ReadDevOutEPInterrupt>
 800211c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00c      	beq.n	8002142 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	4413      	add	r3, r2
 8002130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002134:	461a      	mov	r2, r3
 8002136:	2301      	movs	r3, #1
 8002138:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800213a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fe65 	bl	8002e0c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	f003 0308 	and.w	r3, r3, #8
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00c      	beq.n	8002166 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	4413      	add	r3, r2
 8002154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002158:	461a      	mov	r2, r3
 800215a:	2308      	movs	r3, #8
 800215c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800215e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 fea1 	bl	8002ea8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	d008      	beq.n	8002182 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002172:	015a      	lsls	r2, r3, #5
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	4413      	add	r3, r2
 8002178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217c:	461a      	mov	r2, r3
 800217e:	2310      	movs	r3, #16
 8002180:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d030      	beq.n	80021ee <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800218c:	6a3b      	ldr	r3, [r7, #32]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002194:	2b80      	cmp	r3, #128	; 0x80
 8002196:	d109      	bne.n	80021ac <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	69fa      	ldr	r2, [r7, #28]
 80021a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021aa:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80021ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021ae:	4613      	mov	r3, r2
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	3304      	adds	r3, #4
 80021c0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	78db      	ldrb	r3, [r3, #3]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d108      	bne.n	80021dc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2200      	movs	r2, #0
 80021ce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	4619      	mov	r1, r3
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f006 fd1a 	bl	8008c10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80021dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021de:	015a      	lsls	r2, r3, #5
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	4413      	add	r3, r2
 80021e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e8:	461a      	mov	r2, r3
 80021ea:	2302      	movs	r3, #2
 80021ec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	f003 0320 	and.w	r3, r3, #32
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	015a      	lsls	r2, r3, #5
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	4413      	add	r3, r2
 8002200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002204:	461a      	mov	r2, r3
 8002206:	2320      	movs	r3, #32
 8002208:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d009      	beq.n	8002228 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002216:	015a      	lsls	r2, r3, #5
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	4413      	add	r3, r2
 800221c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002220:	461a      	mov	r2, r3
 8002222:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002226:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	3301      	adds	r3, #1
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002230:	085b      	lsrs	r3, r3, #1
 8002232:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002236:	2b00      	cmp	r3, #0
 8002238:	f47f af62 	bne.w	8002100 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f004 f9cf 	bl	80065e4 <USB_ReadInterrupts>
 8002246:	4603      	mov	r3, r0
 8002248:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800224c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002250:	f040 80a4 	bne.w	800239c <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f004 f9f0 	bl	800663e <USB_ReadDevAllInEpInterrupt>
 800225e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002264:	e096      	b.n	8002394 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 808b 	beq.w	8002388 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f004 fa16 	bl	80066ae <USB_ReadDevInEPInterrupt>
 8002282:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d020      	beq.n	80022d0 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	2201      	movs	r2, #1
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	43db      	mvns	r3, r3
 80022a8:	69f9      	ldr	r1, [r7, #28]
 80022aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022ae:	4013      	ands	r3, r2
 80022b0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	015a      	lsls	r2, r3, #5
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	4413      	add	r3, r2
 80022ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022be:	461a      	mov	r2, r3
 80022c0:	2301      	movs	r3, #1
 80022c2:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4619      	mov	r1, r3
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f006 fc0b 	bl	8008ae6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	015a      	lsls	r2, r3, #5
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	4413      	add	r3, r2
 80022e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022e6:	461a      	mov	r2, r3
 80022e8:	2308      	movs	r3, #8
 80022ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	f003 0310 	and.w	r3, r3, #16
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d008      	beq.n	8002308 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	015a      	lsls	r2, r3, #5
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	4413      	add	r3, r2
 80022fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002302:	461a      	mov	r2, r3
 8002304:	2310      	movs	r3, #16
 8002306:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800231e:	461a      	mov	r2, r3
 8002320:	2340      	movs	r3, #64	; 0x40
 8002322:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d023      	beq.n	8002376 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800232e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002330:	6a38      	ldr	r0, [r7, #32]
 8002332:	f003 faad 	bl	8005890 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002338:	4613      	mov	r3, r2
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4413      	add	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	3338      	adds	r3, #56	; 0x38
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	3304      	adds	r3, #4
 8002348:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	78db      	ldrb	r3, [r3, #3]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d108      	bne.n	8002364 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2200      	movs	r2, #0
 8002356:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	b2db      	uxtb	r3, r3
 800235c:	4619      	mov	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f006 fc68 	bl	8008c34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	015a      	lsls	r2, r3, #5
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	4413      	add	r3, r2
 800236c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002370:	461a      	mov	r2, r3
 8002372:	2302      	movs	r3, #2
 8002374:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237c:	2b00      	cmp	r3, #0
 800237e:	d003      	beq.n	8002388 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f000 fcba 	bl	8002cfc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	3301      	adds	r3, #1
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800238e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002390:	085b      	lsrs	r3, r3, #1
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	2b00      	cmp	r3, #0
 8002398:	f47f af65 	bne.w	8002266 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f004 f91f 	bl	80065e4 <USB_ReadInterrupts>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023b0:	d122      	bne.n	80023f8 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	69fa      	ldr	r2, [r7, #28]
 80023bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023c0:	f023 0301 	bic.w	r3, r3, #1
 80023c4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d108      	bne.n	80023e2 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023d8:	2100      	movs	r1, #0
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f006 fe88 	bl	80090f0 <HAL_PCDEx_LPM_Callback>
 80023e0:	e002      	b.n	80023e8 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f006 fbec 	bl	8008bc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	695a      	ldr	r2, [r3, #20]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f004 f8f1 	bl	80065e4 <USB_ReadInterrupts>
 8002402:	4603      	mov	r3, r0
 8002404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800240c:	d112      	bne.n	8002434 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b01      	cmp	r3, #1
 800241c:	d102      	bne.n	8002424 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f006 fba8 	bl	8008b74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	695a      	ldr	r2, [r3, #20]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002432:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f004 f8d3 	bl	80065e4 <USB_ReadInterrupts>
 800243e:	4603      	mov	r3, r0
 8002440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002444:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002448:	d121      	bne.n	800248e <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695a      	ldr	r2, [r3, #20]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002458:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d111      	bne.n	8002488 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002472:	089b      	lsrs	r3, r3, #2
 8002474:	f003 020f 	and.w	r2, r3, #15
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800247e:	2101      	movs	r1, #1
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f006 fe35 	bl	80090f0 <HAL_PCDEx_LPM_Callback>
 8002486:	e002      	b.n	800248e <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f006 fb73 	bl	8008b74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f004 f8a6 	bl	80065e4 <USB_ReadInterrupts>
 8002498:	4603      	mov	r3, r0
 800249a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800249e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a2:	f040 80b5 	bne.w	8002610 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2110      	movs	r1, #16
 80024c0:	4618      	mov	r0, r3
 80024c2:	f003 f9e5 	bl	8005890 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024ca:	e046      	b.n	800255a <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ce:	015a      	lsls	r2, r3, #5
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	4413      	add	r3, r2
 80024d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024d8:	461a      	mov	r2, r3
 80024da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024f0:	0151      	lsls	r1, r2, #5
 80024f2:	69fa      	ldr	r2, [r7, #28]
 80024f4:	440a      	add	r2, r1
 80024f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002502:	015a      	lsls	r2, r3, #5
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	4413      	add	r3, r2
 8002508:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800250c:	461a      	mov	r2, r3
 800250e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002512:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	4413      	add	r3, r2
 800251c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002524:	0151      	lsls	r1, r2, #5
 8002526:	69fa      	ldr	r2, [r7, #28]
 8002528:	440a      	add	r2, r1
 800252a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800252e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002532:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002536:	015a      	lsls	r2, r3, #5
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	4413      	add	r3, r2
 800253c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002544:	0151      	lsls	r1, r2, #5
 8002546:	69fa      	ldr	r2, [r7, #28]
 8002548:	440a      	add	r2, r1
 800254a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800254e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002552:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002556:	3301      	adds	r3, #1
 8002558:	62fb      	str	r3, [r7, #44]	; 0x2c
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002560:	429a      	cmp	r2, r3
 8002562:	d3b3      	bcc.n	80024cc <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	69fa      	ldr	r2, [r7, #28]
 800256e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002572:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002576:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	2b00      	cmp	r3, #0
 800257e:	d016      	beq.n	80025ae <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800258a:	69fa      	ldr	r2, [r7, #28]
 800258c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002590:	f043 030b 	orr.w	r3, r3, #11
 8002594:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800259e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a6:	f043 030b 	orr.w	r3, r3, #11
 80025aa:	6453      	str	r3, [r2, #68]	; 0x44
 80025ac:	e015      	b.n	80025da <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	69fa      	ldr	r2, [r7, #28]
 80025b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025c0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025c4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025d4:	f043 030b 	orr.w	r3, r3, #11
 80025d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	69fa      	ldr	r2, [r7, #28]
 80025e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025f8:	4619      	mov	r1, r3
 80025fa:	4610      	mov	r0, r2
 80025fc:	f004 f8b6 	bl	800676c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800260e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f003 ffe5 	bl	80065e4 <USB_ReadInterrupts>
 800261a:	4603      	mov	r3, r0
 800261c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002624:	d124      	bne.n	8002670 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f004 f87b 	bl	8006726 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4618      	mov	r0, r3
 8002636:	f003 f9a8 	bl	800598a <USB_GetDevSpeed>
 800263a:	4603      	mov	r3, r0
 800263c:	461a      	mov	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681c      	ldr	r4, [r3, #0]
 8002646:	f001 fb87 	bl	8003d58 <HAL_RCC_GetHCLKFreq>
 800264a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002650:	b2db      	uxtb	r3, r3
 8002652:	461a      	mov	r2, r3
 8002654:	4620      	mov	r0, r4
 8002656:	f002 fecf 	bl	80053f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f006 fa6b 	bl	8008b36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800266e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f003 ffb5 	bl	80065e4 <USB_ReadInterrupts>
 800267a:	4603      	mov	r3, r0
 800267c:	f003 0308 	and.w	r3, r3, #8
 8002680:	2b08      	cmp	r3, #8
 8002682:	d10a      	bne.n	800269a <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f006 fa48 	bl	8008b1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	695a      	ldr	r2, [r3, #20]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f002 0208 	and.w	r2, r2, #8
 8002698:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f003 ffa0 	bl	80065e4 <USB_ReadInterrupts>
 80026a4:	4603      	mov	r3, r0
 80026a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026aa:	2b80      	cmp	r3, #128	; 0x80
 80026ac:	d122      	bne.n	80026f4 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026ba:	2301      	movs	r3, #1
 80026bc:	627b      	str	r3, [r7, #36]	; 0x24
 80026be:	e014      	b.n	80026ea <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c4:	4613      	mov	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4413      	add	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d105      	bne.n	80026e4 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4619      	mov	r1, r3
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 fadb 	bl	8002c9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	3301      	adds	r3, #1
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d3e5      	bcc.n	80026c0 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f003 ff73 	bl	80065e4 <USB_ReadInterrupts>
 80026fe:	4603      	mov	r3, r0
 8002700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002704:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002708:	d13b      	bne.n	8002782 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800270a:	2301      	movs	r3, #1
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
 800270e:	e02b      	b.n	8002768 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002712:	015a      	lsls	r2, r3, #5
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	4413      	add	r3, r2
 8002718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	3340      	adds	r3, #64	; 0x40
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d115      	bne.n	8002762 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002736:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002738:	2b00      	cmp	r3, #0
 800273a:	da12      	bge.n	8002762 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002740:	4613      	mov	r3, r2
 8002742:	00db      	lsls	r3, r3, #3
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	440b      	add	r3, r1
 800274a:	333f      	adds	r3, #63	; 0x3f
 800274c:	2201      	movs	r2, #1
 800274e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	b2db      	uxtb	r3, r3
 8002754:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002758:	b2db      	uxtb	r3, r3
 800275a:	4619      	mov	r1, r3
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fa9c 	bl	8002c9a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	3301      	adds	r3, #1
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800276e:	429a      	cmp	r2, r3
 8002770:	d3ce      	bcc.n	8002710 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f003 ff2c 	bl	80065e4 <USB_ReadInterrupts>
 800278c:	4603      	mov	r3, r0
 800278e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002796:	d155      	bne.n	8002844 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002798:	2301      	movs	r3, #1
 800279a:	627b      	str	r3, [r7, #36]	; 0x24
 800279c:	e045      	b.n	800282a <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	015a      	lsls	r2, r3, #5
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	4413      	add	r3, r2
 80027a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d12e      	bne.n	8002824 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	da2b      	bge.n	8002824 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80027d8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027dc:	429a      	cmp	r2, r3
 80027de:	d121      	bne.n	8002824 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027fe:	6a3b      	ldr	r3, [r7, #32]
 8002800:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10a      	bne.n	8002824 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800281c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002820:	6053      	str	r3, [r2, #4]
            break;
 8002822:	e007      	b.n	8002834 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	3301      	adds	r3, #1
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002830:	429a      	cmp	r2, r3
 8002832:	d3b4      	bcc.n	800279e <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	695a      	ldr	r2, [r3, #20]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002842:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f003 fecb 	bl	80065e4 <USB_ReadInterrupts>
 800284e:	4603      	mov	r3, r0
 8002850:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002858:	d10a      	bne.n	8002870 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f006 f9fc 	bl	8008c58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800286e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f003 feb5 	bl	80065e4 <USB_ReadInterrupts>
 800287a:	4603      	mov	r3, r0
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b04      	cmp	r3, #4
 8002882:	d115      	bne.n	80028b0 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d002      	beq.n	800289c <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f006 f9ec 	bl	8008c74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	e000      	b.n	80028b0 <HAL_PCD_IRQHandler+0x920>
      return;
 80028ae:	bf00      	nop
    }
  }
}
 80028b0:	3734      	adds	r7, #52	; 0x34
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd90      	pop	{r4, r7, pc}

080028b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80028b6:	b580      	push	{r7, lr}
 80028b8:	b082      	sub	sp, #8
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d101      	bne.n	80028d0 <HAL_PCD_SetAddress+0x1a>
 80028cc:	2302      	movs	r3, #2
 80028ce:	e013      	b.n	80028f8 <HAL_PCD_SetAddress+0x42>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	78fa      	ldrb	r2, [r7, #3]
 80028e6:	4611      	mov	r1, r2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f003 fe13 	bl	8006514 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	4608      	mov	r0, r1
 800290a:	4611      	mov	r1, r2
 800290c:	461a      	mov	r2, r3
 800290e:	4603      	mov	r3, r0
 8002910:	70fb      	strb	r3, [r7, #3]
 8002912:	460b      	mov	r3, r1
 8002914:	803b      	strh	r3, [r7, #0]
 8002916:	4613      	mov	r3, r2
 8002918:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800291a:	2300      	movs	r3, #0
 800291c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800291e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002922:	2b00      	cmp	r3, #0
 8002924:	da0f      	bge.n	8002946 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002926:	78fb      	ldrb	r3, [r7, #3]
 8002928:	f003 020f 	and.w	r2, r3, #15
 800292c:	4613      	mov	r3, r2
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	3338      	adds	r3, #56	; 0x38
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	4413      	add	r3, r2
 800293a:	3304      	adds	r3, #4
 800293c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	705a      	strb	r2, [r3, #1]
 8002944:	e00f      	b.n	8002966 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002946:	78fb      	ldrb	r3, [r7, #3]
 8002948:	f003 020f 	and.w	r2, r3, #15
 800294c:	4613      	mov	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4413      	add	r3, r2
 800295c:	3304      	adds	r3, #4
 800295e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002966:	78fb      	ldrb	r3, [r7, #3]
 8002968:	f003 030f 	and.w	r3, r3, #15
 800296c:	b2da      	uxtb	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002972:	883a      	ldrh	r2, [r7, #0]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	78ba      	ldrb	r2, [r7, #2]
 800297c:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	785b      	ldrb	r3, [r3, #1]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d004      	beq.n	8002990 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	b29a      	uxth	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002990:	78bb      	ldrb	r3, [r7, #2]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d102      	bne.n	800299c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_PCD_EP_Open+0xaa>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e00e      	b.n	80029c8 <HAL_PCD_EP_Open+0xc8>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	68f9      	ldr	r1, [r7, #12]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f003 f805 	bl	80059c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80029c6:	7afb      	ldrb	r3, [r7, #11]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3710      	adds	r7, #16
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	da0f      	bge.n	8002a04 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	f003 020f 	and.w	r2, r3, #15
 80029ea:	4613      	mov	r3, r2
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	4413      	add	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	3338      	adds	r3, #56	; 0x38
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	4413      	add	r3, r2
 80029f8:	3304      	adds	r3, #4
 80029fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2201      	movs	r2, #1
 8002a00:	705a      	strb	r2, [r3, #1]
 8002a02:	e00f      	b.n	8002a24 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	f003 020f 	and.w	r2, r3, #15
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	4413      	add	r3, r2
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	b2da      	uxtb	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_PCD_EP_Close+0x6e>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e00e      	b.n	8002a5c <HAL_PCD_EP_Close+0x8c>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68f9      	ldr	r1, [r7, #12]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f003 f843 	bl	8005ad8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	607a      	str	r2, [r7, #4]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	460b      	mov	r3, r1
 8002a72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a74:	7afb      	ldrb	r3, [r7, #11]
 8002a76:	f003 020f 	and.w	r2, r3, #15
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4413      	add	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4413      	add	r3, r2
 8002a8a:	3304      	adds	r3, #4
 8002a8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002aa6:	7afb      	ldrb	r3, [r7, #11]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6979      	ldr	r1, [r7, #20]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f003 f8e9 	bl	8005c90 <USB_EPStartXfer>

  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}

08002ac8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad8:	7afb      	ldrb	r3, [r7, #11]
 8002ada:	f003 020f 	and.w	r2, r3, #15
 8002ade:	4613      	mov	r3, r2
 8002ae0:	00db      	lsls	r3, r3, #3
 8002ae2:	4413      	add	r3, r2
 8002ae4:	009b      	lsls	r3, r3, #2
 8002ae6:	3338      	adds	r3, #56	; 0x38
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4413      	add	r3, r2
 8002aec:	3304      	adds	r3, #4
 8002aee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2200      	movs	r2, #0
 8002b00:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2201      	movs	r2, #1
 8002b06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b08:	7afb      	ldrb	r3, [r7, #11]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	b2da      	uxtb	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6979      	ldr	r1, [r7, #20]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f003 f8b8 	bl	8005c90 <USB_EPStartXfer>

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b084      	sub	sp, #16
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	460b      	mov	r3, r1
 8002b34:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b36:	78fb      	ldrb	r3, [r7, #3]
 8002b38:	f003 020f 	and.w	r2, r3, #15
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d901      	bls.n	8002b48 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e04e      	b.n	8002be6 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	da0f      	bge.n	8002b70 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	f003 020f 	and.w	r2, r3, #15
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	3338      	adds	r3, #56	; 0x38
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	4413      	add	r3, r2
 8002b64:	3304      	adds	r3, #4
 8002b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	705a      	strb	r2, [r3, #1]
 8002b6e:	e00d      	b.n	8002b8c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	4613      	mov	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	4413      	add	r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	3304      	adds	r3, #4
 8002b84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b92:	78fb      	ldrb	r3, [r7, #3]
 8002b94:	f003 030f 	and.w	r3, r3, #15
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_PCD_EP_SetStall+0x82>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e01c      	b.n	8002be6 <HAL_PCD_EP_SetStall+0xbc>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68f9      	ldr	r1, [r7, #12]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f003 fbd6 	bl	800636c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d108      	bne.n	8002bdc <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	f003 fdc8 	bl	800676c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b084      	sub	sp, #16
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bfa:	78fb      	ldrb	r3, [r7, #3]
 8002bfc:	f003 020f 	and.w	r2, r3, #15
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d901      	bls.n	8002c0c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e042      	b.n	8002c92 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	da0f      	bge.n	8002c34 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c14:	78fb      	ldrb	r3, [r7, #3]
 8002c16:	f003 020f 	and.w	r2, r3, #15
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	00db      	lsls	r3, r3, #3
 8002c1e:	4413      	add	r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	3338      	adds	r3, #56	; 0x38
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	4413      	add	r3, r2
 8002c28:	3304      	adds	r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	705a      	strb	r2, [r3, #1]
 8002c32:	e00f      	b.n	8002c54 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c34:	78fb      	ldrb	r3, [r7, #3]
 8002c36:	f003 020f 	and.w	r2, r3, #15
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	00db      	lsls	r3, r3, #3
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	4413      	add	r3, r2
 8002c4a:	3304      	adds	r3, #4
 8002c4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	f003 030f 	and.w	r3, r3, #15
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_PCD_EP_ClrStall+0x86>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e00e      	b.n	8002c92 <HAL_PCD_EP_ClrStall+0xa4>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68f9      	ldr	r1, [r7, #12]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f003 fbe0 	bl	8006448 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ca6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	da0c      	bge.n	8002cc8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f003 020f 	and.w	r2, r3, #15
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	3338      	adds	r3, #56	; 0x38
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	3304      	adds	r3, #4
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	e00c      	b.n	8002ce2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 020f 	and.w	r2, r3, #15
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	3304      	adds	r3, #4
 8002ce0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68f9      	ldr	r1, [r7, #12]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f003 fa03 	bl	80060f4 <USB_EPStopXfer>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002cf2:	7afb      	ldrb	r3, [r7, #11]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	4413      	add	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	3338      	adds	r3, #56	; 0x38
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	3304      	adds	r3, #4
 8002d22:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d901      	bls.n	8002d34 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e067      	b.n	8002e04 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	695b      	ldr	r3, [r3, #20]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d902      	bls.n	8002d50 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	3303      	adds	r3, #3
 8002d54:	089b      	lsrs	r3, r3, #2
 8002d56:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d58:	e026      	b.n	8002da8 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	691a      	ldr	r2, [r3, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	69fa      	ldr	r2, [r7, #28]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d902      	bls.n	8002d76 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3303      	adds	r3, #3
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	68d9      	ldr	r1, [r3, #12]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	6978      	ldr	r0, [r7, #20]
 8002d8c:	f003 fa5c 	bl	8006248 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	441a      	add	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	695a      	ldr	r2, [r3, #20]
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	441a      	add	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d809      	bhi.n	8002dd2 <PCD_WriteEmptyTxFifo+0xd6>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	695a      	ldr	r2, [r3, #20]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d203      	bcs.n	8002dd2 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1c3      	bne.n	8002d5a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	691a      	ldr	r2, [r3, #16]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d811      	bhi.n	8002e02 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	2201      	movs	r2, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	43db      	mvns	r3, r3
 8002df8:	6939      	ldr	r1, [r7, #16]
 8002dfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dfe:	4013      	ands	r3, r2
 8002e00:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3720      	adds	r7, #32
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	333c      	adds	r3, #60	; 0x3c
 8002e24:	3304      	adds	r3, #4
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4a19      	ldr	r2, [pc, #100]	; (8002ea4 <PCD_EP_OutXfrComplete_int+0x98>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d124      	bne.n	8002e8c <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00a      	beq.n	8002e62 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e5e:	6093      	str	r3, [r2, #8]
 8002e60:	e01a      	b.n	8002e98 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2320      	movs	r3, #32
 8002e7c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	4619      	mov	r1, r3
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f005 fe13 	bl	8008ab0 <HAL_PCD_DataOutStageCallback>
 8002e8a:	e005      	b.n	8002e98 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	4619      	mov	r1, r3
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f005 fe0c 	bl	8008ab0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002e98:	2300      	movs	r3, #0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3718      	adds	r7, #24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	4f54310a 	.word	0x4f54310a

08002ea8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	333c      	adds	r3, #60	; 0x3c
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4a0c      	ldr	r2, [pc, #48]	; (8002f0c <PCD_EP_OutSetupPacket_int+0x64>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d90e      	bls.n	8002efc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d009      	beq.n	8002efc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002efa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f005 fdc5 	bl	8008a8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3718      	adds	r7, #24
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	4f54300a 	.word	0x4f54300a

08002f10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	70fb      	strb	r3, [r7, #3]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d107      	bne.n	8002f3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f2e:	883b      	ldrh	r3, [r7, #0]
 8002f30:	0419      	lsls	r1, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68ba      	ldr	r2, [r7, #8]
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	629a      	str	r2, [r3, #40]	; 0x28
 8002f3c:	e028      	b.n	8002f90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	4413      	add	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	73fb      	strb	r3, [r7, #15]
 8002f50:	e00d      	b.n	8002f6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	3340      	adds	r3, #64	; 0x40
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	0c1b      	lsrs	r3, r3, #16
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	4413      	add	r3, r2
 8002f66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	73fb      	strb	r3, [r7, #15]
 8002f6e:	7bfa      	ldrb	r2, [r7, #15]
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d3ec      	bcc.n	8002f52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f78:	883b      	ldrh	r3, [r7, #0]
 8002f7a:	0418      	lsls	r0, r3, #16
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6819      	ldr	r1, [r3, #0]
 8002f80:	78fb      	ldrb	r3, [r7, #3]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	4302      	orrs	r2, r0
 8002f88:	3340      	adds	r3, #64	; 0x40
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	887a      	ldrh	r2, [r7, #2]
 8002fb0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ff2:	f043 0303 	orr.w	r3, r3, #3
 8002ff6:	68fa      	ldr	r2, [r7, #12]
 8002ff8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a04      	ldr	r2, [pc, #16]	; (8003024 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003016:	6013      	str	r3, [r2, #0]
}
 8003018:	bf00      	nop
 800301a:	46bd      	mov	sp, r7
 800301c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	40007000 	.word	0x40007000

08003028 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800302c:	4b04      	ldr	r3, [pc, #16]	; (8003040 <HAL_PWREx_GetVoltageRange+0x18>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	40007000 	.word	0x40007000

08003044 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003044:	b480      	push	{r7}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003052:	d130      	bne.n	80030b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003054:	4b23      	ldr	r3, [pc, #140]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800305c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003060:	d038      	beq.n	80030d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003062:	4b20      	ldr	r3, [pc, #128]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800306a:	4a1e      	ldr	r2, [pc, #120]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800306c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003070:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003072:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2232      	movs	r2, #50	; 0x32
 8003078:	fb02 f303 	mul.w	r3, r2, r3
 800307c:	4a1b      	ldr	r2, [pc, #108]	; (80030ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	0c9b      	lsrs	r3, r3, #18
 8003084:	3301      	adds	r3, #1
 8003086:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003088:	e002      	b.n	8003090 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3b01      	subs	r3, #1
 800308e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003090:	4b14      	ldr	r3, [pc, #80]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309c:	d102      	bne.n	80030a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1f2      	bne.n	800308a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030a4:	4b0f      	ldr	r3, [pc, #60]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030b0:	d110      	bne.n	80030d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e00f      	b.n	80030d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c2:	d007      	beq.n	80030d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030c4:	4b07      	ldr	r3, [pc, #28]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030cc:	4a05      	ldr	r2, [pc, #20]	; (80030e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40007000 	.word	0x40007000
 80030e8:	20000000 	.word	0x20000000
 80030ec:	431bde83 	.word	0x431bde83

080030f0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80030f0:	b480      	push	{r7}
 80030f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <HAL_PWREx_EnableVddUSB+0x1c>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	4a04      	ldr	r2, [pc, #16]	; (800310c <HAL_PWREx_EnableVddUSB+0x1c>)
 80030fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030fe:	6053      	str	r3, [r2, #4]
}
 8003100:	bf00      	nop
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
 800310a:	bf00      	nop
 800310c:	40007000 	.word	0x40007000

08003110 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af02      	add	r7, sp, #8
 8003116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003118:	f7fe f882 	bl	8001220 <HAL_GetTick>
 800311c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e063      	b.n	80031f0 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800312e:	b2db      	uxtb	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10b      	bne.n	800314c <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7fd fe41 	bl	8000dc4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8003142:	f241 3188 	movw	r1, #5000	; 0x1388
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f858 	bl	80031fc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	3b01      	subs	r3, #1
 800315c:	021a      	lsls	r2, r3, #8
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	2120      	movs	r1, #32
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f000 f850 	bl	8003218 <QSPI_WaitFlagStateUntilTimeout>
 8003178:	4603      	mov	r3, r0
 800317a:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 800317c:	7afb      	ldrb	r3, [r7, #11]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d131      	bne.n	80031e6 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800318c:	f023 0310 	bic.w	r3, r3, #16
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6852      	ldr	r2, [r2, #4]
 8003194:	0611      	lsls	r1, r2, #24
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	68d2      	ldr	r2, [r2, #12]
 800319a:	4311      	orrs	r1, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	430b      	orrs	r3, r1
 80031a2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <HAL_QSPI_Init+0xe8>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	6912      	ldr	r2, [r2, #16]
 80031b2:	0411      	lsls	r1, r2, #16
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	6952      	ldr	r2, [r2, #20]
 80031b8:	4311      	orrs	r1, r2
 80031ba:	687a      	ldr	r2, [r7, #4]
 80031bc:	6992      	ldr	r2, [r2, #24]
 80031be:	4311      	orrs	r1, r2
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f042 0201 	orr.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2201      	movs	r2, #1
 80031e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80031ee:	7afb      	ldrb	r3, [r7, #11]
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	ffe0f8fe 	.word	0xffe0f8fe

080031fc <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003228:	e01a      	b.n	8003260 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d016      	beq.n	8003260 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003232:	f7fd fff5 	bl	8001220 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	429a      	cmp	r2, r3
 8003240:	d302      	bcc.n	8003248 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d10b      	bne.n	8003260 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2204      	movs	r2, #4
 800324c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003254:	f043 0201 	orr.w	r2, r3, #1
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e00e      	b.n	800327e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4013      	ands	r3, r2
 800326a:	2b00      	cmp	r3, #0
 800326c:	bf14      	ite	ne
 800326e:	2301      	movne	r3, #1
 8003270:	2300      	moveq	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	461a      	mov	r2, r3
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	429a      	cmp	r2, r3
 800327a:	d1d6      	bne.n	800322a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e3ca      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800329a:	4b97      	ldr	r3, [pc, #604]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 030c 	and.w	r3, r3, #12
 80032a2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032a4:	4b94      	ldr	r3, [pc, #592]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0303 	and.w	r3, r3, #3
 80032ac:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 80e4 	beq.w	8003484 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <HAL_RCC_OscConfig+0x4a>
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	2b0c      	cmp	r3, #12
 80032c6:	f040 808b 	bne.w	80033e0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	f040 8087 	bne.w	80033e0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032d2:	4b89      	ldr	r3, [pc, #548]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d005      	beq.n	80032ea <HAL_RCC_OscConfig+0x62>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e3a2      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1a      	ldr	r2, [r3, #32]
 80032ee:	4b82      	ldr	r3, [pc, #520]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d004      	beq.n	8003304 <HAL_RCC_OscConfig+0x7c>
 80032fa:	4b7f      	ldr	r3, [pc, #508]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003302:	e005      	b.n	8003310 <HAL_RCC_OscConfig+0x88>
 8003304:	4b7c      	ldr	r3, [pc, #496]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 8003306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800330a:	091b      	lsrs	r3, r3, #4
 800330c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003310:	4293      	cmp	r3, r2
 8003312:	d223      	bcs.n	800335c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fd55 	bl	8003dc8 <RCC_SetFlashLatencyFromMSIRange>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e383      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003328:	4b73      	ldr	r3, [pc, #460]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a72      	ldr	r2, [pc, #456]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 800332e:	f043 0308 	orr.w	r3, r3, #8
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b70      	ldr	r3, [pc, #448]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	496d      	ldr	r1, [pc, #436]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 8003342:	4313      	orrs	r3, r2
 8003344:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003346:	4b6c      	ldr	r3, [pc, #432]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	69db      	ldr	r3, [r3, #28]
 8003352:	021b      	lsls	r3, r3, #8
 8003354:	4968      	ldr	r1, [pc, #416]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 8003356:	4313      	orrs	r3, r2
 8003358:	604b      	str	r3, [r1, #4]
 800335a:	e025      	b.n	80033a8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800335c:	4b66      	ldr	r3, [pc, #408]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a65      	ldr	r2, [pc, #404]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 8003362:	f043 0308 	orr.w	r3, r3, #8
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4b63      	ldr	r3, [pc, #396]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4960      	ldr	r1, [pc, #384]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800337a:	4b5f      	ldr	r3, [pc, #380]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	021b      	lsls	r3, r3, #8
 8003388:	495b      	ldr	r1, [pc, #364]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d109      	bne.n	80033a8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	4618      	mov	r0, r3
 800339a:	f000 fd15 	bl	8003dc8 <RCC_SetFlashLatencyFromMSIRange>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e343      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033a8:	f000 fc4a 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 80033ac:	4602      	mov	r2, r0
 80033ae:	4b52      	ldr	r3, [pc, #328]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	4950      	ldr	r1, [pc, #320]	; (80034fc <HAL_RCC_OscConfig+0x274>)
 80033ba:	5ccb      	ldrb	r3, [r1, r3]
 80033bc:	f003 031f 	and.w	r3, r3, #31
 80033c0:	fa22 f303 	lsr.w	r3, r2, r3
 80033c4:	4a4e      	ldr	r2, [pc, #312]	; (8003500 <HAL_RCC_OscConfig+0x278>)
 80033c6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033c8:	4b4e      	ldr	r3, [pc, #312]	; (8003504 <HAL_RCC_OscConfig+0x27c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd fed7 	bl	8001180 <HAL_InitTick>
 80033d2:	4603      	mov	r3, r0
 80033d4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d052      	beq.n	8003482 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	e327      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d032      	beq.n	800344e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033e8:	4b43      	ldr	r3, [pc, #268]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a42      	ldr	r2, [pc, #264]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033f4:	f7fd ff14 	bl	8001220 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033fc:	f7fd ff10 	bl	8001220 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e310      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800340e:	4b3a      	ldr	r3, [pc, #232]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800341a:	4b37      	ldr	r3, [pc, #220]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a36      	ldr	r2, [pc, #216]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 8003420:	f043 0308 	orr.w	r3, r3, #8
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	4b34      	ldr	r3, [pc, #208]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	4931      	ldr	r1, [pc, #196]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003438:	4b2f      	ldr	r3, [pc, #188]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	021b      	lsls	r3, r3, #8
 8003446:	492c      	ldr	r1, [pc, #176]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 8003448:	4313      	orrs	r3, r2
 800344a:	604b      	str	r3, [r1, #4]
 800344c:	e01a      	b.n	8003484 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800344e:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a29      	ldr	r2, [pc, #164]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 8003454:	f023 0301 	bic.w	r3, r3, #1
 8003458:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800345a:	f7fd fee1 	bl	8001220 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003462:	f7fd fedd 	bl	8001220 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e2dd      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003474:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0302 	and.w	r3, r3, #2
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f0      	bne.n	8003462 <HAL_RCC_OscConfig+0x1da>
 8003480:	e000      	b.n	8003484 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003482:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0301 	and.w	r3, r3, #1
 800348c:	2b00      	cmp	r3, #0
 800348e:	d074      	beq.n	800357a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	2b08      	cmp	r3, #8
 8003494:	d005      	beq.n	80034a2 <HAL_RCC_OscConfig+0x21a>
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b0c      	cmp	r3, #12
 800349a:	d10e      	bne.n	80034ba <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d10b      	bne.n	80034ba <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d064      	beq.n	8003578 <HAL_RCC_OscConfig+0x2f0>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d160      	bne.n	8003578 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e2ba      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_OscConfig+0x24a>
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a0b      	ldr	r2, [pc, #44]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 80034ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	e026      	b.n	8003520 <HAL_RCC_OscConfig+0x298>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034da:	d115      	bne.n	8003508 <HAL_RCC_OscConfig+0x280>
 80034dc:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a05      	ldr	r2, [pc, #20]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 80034e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a02      	ldr	r2, [pc, #8]	; (80034f8 <HAL_RCC_OscConfig+0x270>)
 80034ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	e014      	b.n	8003520 <HAL_RCC_OscConfig+0x298>
 80034f6:	bf00      	nop
 80034f8:	40021000 	.word	0x40021000
 80034fc:	08009298 	.word	0x08009298
 8003500:	20000000 	.word	0x20000000
 8003504:	20000004 	.word	0x20000004
 8003508:	4ba0      	ldr	r3, [pc, #640]	; (800378c <HAL_RCC_OscConfig+0x504>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a9f      	ldr	r2, [pc, #636]	; (800378c <HAL_RCC_OscConfig+0x504>)
 800350e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	4b9d      	ldr	r3, [pc, #628]	; (800378c <HAL_RCC_OscConfig+0x504>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a9c      	ldr	r2, [pc, #624]	; (800378c <HAL_RCC_OscConfig+0x504>)
 800351a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800351e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d013      	beq.n	8003550 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003528:	f7fd fe7a 	bl	8001220 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003530:	f7fd fe76 	bl	8001220 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b64      	cmp	r3, #100	; 0x64
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e276      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003542:	4b92      	ldr	r3, [pc, #584]	; (800378c <HAL_RCC_OscConfig+0x504>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x2a8>
 800354e:	e014      	b.n	800357a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003550:	f7fd fe66 	bl	8001220 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003558:	f7fd fe62 	bl	8001220 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b64      	cmp	r3, #100	; 0x64
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e262      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800356a:	4b88      	ldr	r3, [pc, #544]	; (800378c <HAL_RCC_OscConfig+0x504>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x2d0>
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003578:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d060      	beq.n	8003648 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2b04      	cmp	r3, #4
 800358a:	d005      	beq.n	8003598 <HAL_RCC_OscConfig+0x310>
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	2b0c      	cmp	r3, #12
 8003590:	d119      	bne.n	80035c6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b02      	cmp	r3, #2
 8003596:	d116      	bne.n	80035c6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003598:	4b7c      	ldr	r3, [pc, #496]	; (800378c <HAL_RCC_OscConfig+0x504>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_OscConfig+0x328>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e23f      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b0:	4b76      	ldr	r3, [pc, #472]	; (800378c <HAL_RCC_OscConfig+0x504>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	061b      	lsls	r3, r3, #24
 80035be:	4973      	ldr	r1, [pc, #460]	; (800378c <HAL_RCC_OscConfig+0x504>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035c4:	e040      	b.n	8003648 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d023      	beq.n	8003616 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ce:	4b6f      	ldr	r3, [pc, #444]	; (800378c <HAL_RCC_OscConfig+0x504>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a6e      	ldr	r2, [pc, #440]	; (800378c <HAL_RCC_OscConfig+0x504>)
 80035d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035da:	f7fd fe21 	bl	8001220 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035e2:	f7fd fe1d 	bl	8001220 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e21d      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035f4:	4b65      	ldr	r3, [pc, #404]	; (800378c <HAL_RCC_OscConfig+0x504>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003600:	4b62      	ldr	r3, [pc, #392]	; (800378c <HAL_RCC_OscConfig+0x504>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	691b      	ldr	r3, [r3, #16]
 800360c:	061b      	lsls	r3, r3, #24
 800360e:	495f      	ldr	r1, [pc, #380]	; (800378c <HAL_RCC_OscConfig+0x504>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
 8003614:	e018      	b.n	8003648 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003616:	4b5d      	ldr	r3, [pc, #372]	; (800378c <HAL_RCC_OscConfig+0x504>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a5c      	ldr	r2, [pc, #368]	; (800378c <HAL_RCC_OscConfig+0x504>)
 800361c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003620:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003622:	f7fd fdfd 	bl	8001220 <HAL_GetTick>
 8003626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003628:	e008      	b.n	800363c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800362a:	f7fd fdf9 	bl	8001220 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b02      	cmp	r3, #2
 8003636:	d901      	bls.n	800363c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e1f9      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800363c:	4b53      	ldr	r3, [pc, #332]	; (800378c <HAL_RCC_OscConfig+0x504>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003644:	2b00      	cmp	r3, #0
 8003646:	d1f0      	bne.n	800362a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0308 	and.w	r3, r3, #8
 8003650:	2b00      	cmp	r3, #0
 8003652:	d03c      	beq.n	80036ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d01c      	beq.n	8003696 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800365c:	4b4b      	ldr	r3, [pc, #300]	; (800378c <HAL_RCC_OscConfig+0x504>)
 800365e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003662:	4a4a      	ldr	r2, [pc, #296]	; (800378c <HAL_RCC_OscConfig+0x504>)
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800366c:	f7fd fdd8 	bl	8001220 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003674:	f7fd fdd4 	bl	8001220 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e1d4      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003686:	4b41      	ldr	r3, [pc, #260]	; (800378c <HAL_RCC_OscConfig+0x504>)
 8003688:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0ef      	beq.n	8003674 <HAL_RCC_OscConfig+0x3ec>
 8003694:	e01b      	b.n	80036ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003696:	4b3d      	ldr	r3, [pc, #244]	; (800378c <HAL_RCC_OscConfig+0x504>)
 8003698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800369c:	4a3b      	ldr	r2, [pc, #236]	; (800378c <HAL_RCC_OscConfig+0x504>)
 800369e:	f023 0301 	bic.w	r3, r3, #1
 80036a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a6:	f7fd fdbb 	bl	8001220 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ae:	f7fd fdb7 	bl	8001220 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e1b7      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80036c0:	4b32      	ldr	r3, [pc, #200]	; (800378c <HAL_RCC_OscConfig+0x504>)
 80036c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1ef      	bne.n	80036ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80a6 	beq.w	8003828 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036dc:	2300      	movs	r3, #0
 80036de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036e0:	4b2a      	ldr	r3, [pc, #168]	; (800378c <HAL_RCC_OscConfig+0x504>)
 80036e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10d      	bne.n	8003708 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036ec:	4b27      	ldr	r3, [pc, #156]	; (800378c <HAL_RCC_OscConfig+0x504>)
 80036ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036f0:	4a26      	ldr	r2, [pc, #152]	; (800378c <HAL_RCC_OscConfig+0x504>)
 80036f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f6:	6593      	str	r3, [r2, #88]	; 0x58
 80036f8:	4b24      	ldr	r3, [pc, #144]	; (800378c <HAL_RCC_OscConfig+0x504>)
 80036fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003700:	60bb      	str	r3, [r7, #8]
 8003702:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003704:	2301      	movs	r3, #1
 8003706:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003708:	4b21      	ldr	r3, [pc, #132]	; (8003790 <HAL_RCC_OscConfig+0x508>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003710:	2b00      	cmp	r3, #0
 8003712:	d118      	bne.n	8003746 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003714:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <HAL_RCC_OscConfig+0x508>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a1d      	ldr	r2, [pc, #116]	; (8003790 <HAL_RCC_OscConfig+0x508>)
 800371a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003720:	f7fd fd7e 	bl	8001220 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003728:	f7fd fd7a 	bl	8001220 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e17a      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800373a:	4b15      	ldr	r3, [pc, #84]	; (8003790 <HAL_RCC_OscConfig+0x508>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0f0      	beq.n	8003728 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	2b01      	cmp	r3, #1
 800374c:	d108      	bne.n	8003760 <HAL_RCC_OscConfig+0x4d8>
 800374e:	4b0f      	ldr	r3, [pc, #60]	; (800378c <HAL_RCC_OscConfig+0x504>)
 8003750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003754:	4a0d      	ldr	r2, [pc, #52]	; (800378c <HAL_RCC_OscConfig+0x504>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800375e:	e029      	b.n	80037b4 <HAL_RCC_OscConfig+0x52c>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b05      	cmp	r3, #5
 8003766:	d115      	bne.n	8003794 <HAL_RCC_OscConfig+0x50c>
 8003768:	4b08      	ldr	r3, [pc, #32]	; (800378c <HAL_RCC_OscConfig+0x504>)
 800376a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800376e:	4a07      	ldr	r2, [pc, #28]	; (800378c <HAL_RCC_OscConfig+0x504>)
 8003770:	f043 0304 	orr.w	r3, r3, #4
 8003774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003778:	4b04      	ldr	r3, [pc, #16]	; (800378c <HAL_RCC_OscConfig+0x504>)
 800377a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377e:	4a03      	ldr	r2, [pc, #12]	; (800378c <HAL_RCC_OscConfig+0x504>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003788:	e014      	b.n	80037b4 <HAL_RCC_OscConfig+0x52c>
 800378a:	bf00      	nop
 800378c:	40021000 	.word	0x40021000
 8003790:	40007000 	.word	0x40007000
 8003794:	4b9c      	ldr	r3, [pc, #624]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 8003796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379a:	4a9b      	ldr	r2, [pc, #620]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 800379c:	f023 0301 	bic.w	r3, r3, #1
 80037a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80037a4:	4b98      	ldr	r3, [pc, #608]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 80037a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037aa:	4a97      	ldr	r2, [pc, #604]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 80037ac:	f023 0304 	bic.w	r3, r3, #4
 80037b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d016      	beq.n	80037ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7fd fd30 	bl	8001220 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037c2:	e00a      	b.n	80037da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037c4:	f7fd fd2c 	bl	8001220 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e12a      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037da:	4b8b      	ldr	r3, [pc, #556]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 80037dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ed      	beq.n	80037c4 <HAL_RCC_OscConfig+0x53c>
 80037e8:	e015      	b.n	8003816 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ea:	f7fd fd19 	bl	8001220 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037f0:	e00a      	b.n	8003808 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f2:	f7fd fd15 	bl	8001220 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003800:	4293      	cmp	r3, r2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e113      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003808:	4b7f      	ldr	r3, [pc, #508]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1ed      	bne.n	80037f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003816:	7ffb      	ldrb	r3, [r7, #31]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d105      	bne.n	8003828 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381c:	4b7a      	ldr	r3, [pc, #488]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003820:	4a79      	ldr	r2, [pc, #484]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 8003822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003826:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 80fe 	beq.w	8003a2e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003836:	2b02      	cmp	r3, #2
 8003838:	f040 80d0 	bne.w	80039dc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800383c:	4b72      	ldr	r3, [pc, #456]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384c:	429a      	cmp	r2, r3
 800384e:	d130      	bne.n	80038b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	3b01      	subs	r3, #1
 800385c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800385e:	429a      	cmp	r2, r3
 8003860:	d127      	bne.n	80038b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800386c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d11f      	bne.n	80038b2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800387c:	2a07      	cmp	r2, #7
 800387e:	bf14      	ite	ne
 8003880:	2201      	movne	r2, #1
 8003882:	2200      	moveq	r2, #0
 8003884:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003886:	4293      	cmp	r3, r2
 8003888:	d113      	bne.n	80038b2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003894:	085b      	lsrs	r3, r3, #1
 8003896:	3b01      	subs	r3, #1
 8003898:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800389a:	429a      	cmp	r2, r3
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	3b01      	subs	r3, #1
 80038ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d06e      	beq.n	8003990 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	2b0c      	cmp	r3, #12
 80038b6:	d069      	beq.n	800398c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038b8:	4b53      	ldr	r3, [pc, #332]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d105      	bne.n	80038d0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038c4:	4b50      	ldr	r3, [pc, #320]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0ad      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038d4:	4b4c      	ldr	r3, [pc, #304]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a4b      	ldr	r2, [pc, #300]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 80038da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038de:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038e0:	f7fd fc9e 	bl	8001220 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e8:	f7fd fc9a 	bl	8001220 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e09a      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038fa:	4b43      	ldr	r3, [pc, #268]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003906:	4b40      	ldr	r3, [pc, #256]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	4b40      	ldr	r3, [pc, #256]	; (8003a0c <HAL_RCC_OscConfig+0x784>)
 800390c:	4013      	ands	r3, r2
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003916:	3a01      	subs	r2, #1
 8003918:	0112      	lsls	r2, r2, #4
 800391a:	4311      	orrs	r1, r2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003920:	0212      	lsls	r2, r2, #8
 8003922:	4311      	orrs	r1, r2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003928:	0852      	lsrs	r2, r2, #1
 800392a:	3a01      	subs	r2, #1
 800392c:	0552      	lsls	r2, r2, #21
 800392e:	4311      	orrs	r1, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003934:	0852      	lsrs	r2, r2, #1
 8003936:	3a01      	subs	r2, #1
 8003938:	0652      	lsls	r2, r2, #25
 800393a:	4311      	orrs	r1, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003940:	0912      	lsrs	r2, r2, #4
 8003942:	0452      	lsls	r2, r2, #17
 8003944:	430a      	orrs	r2, r1
 8003946:	4930      	ldr	r1, [pc, #192]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 8003948:	4313      	orrs	r3, r2
 800394a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800394c:	4b2e      	ldr	r3, [pc, #184]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a2d      	ldr	r2, [pc, #180]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 8003952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003956:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003958:	4b2b      	ldr	r3, [pc, #172]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	4a2a      	ldr	r2, [pc, #168]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 800395e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003962:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003964:	f7fd fc5c 	bl	8001220 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396c:	f7fd fc58 	bl	8001220 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e058      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800397e:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d0f0      	beq.n	800396c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800398a:	e050      	b.n	8003a2e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e04f      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003990:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d148      	bne.n	8003a2e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800399c:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a19      	ldr	r2, [pc, #100]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 80039a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039a8:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4a16      	ldr	r2, [pc, #88]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 80039ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039b4:	f7fd fc34 	bl	8001220 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fd fc30 	bl	8001220 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e030      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ce:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x734>
 80039da:	e028      	b.n	8003a2e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039dc:	69bb      	ldr	r3, [r7, #24]
 80039de:	2b0c      	cmp	r3, #12
 80039e0:	d023      	beq.n	8003a2a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e2:	4b09      	ldr	r3, [pc, #36]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a08      	ldr	r2, [pc, #32]	; (8003a08 <HAL_RCC_OscConfig+0x780>)
 80039e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ee:	f7fd fc17 	bl	8001220 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039f4:	e00c      	b.n	8003a10 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039f6:	f7fd fc13 	bl	8001220 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d905      	bls.n	8003a10 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e013      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a10:	4b09      	ldr	r3, [pc, #36]	; (8003a38 <HAL_RCC_OscConfig+0x7b0>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1ec      	bne.n	80039f6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a1c:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <HAL_RCC_OscConfig+0x7b0>)
 8003a1e:	68da      	ldr	r2, [r3, #12]
 8003a20:	4905      	ldr	r1, [pc, #20]	; (8003a38 <HAL_RCC_OscConfig+0x7b0>)
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RCC_OscConfig+0x7b4>)
 8003a24:	4013      	ands	r3, r2
 8003a26:	60cb      	str	r3, [r1, #12]
 8003a28:	e001      	b.n	8003a2e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3720      	adds	r7, #32
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	feeefffc 	.word	0xfeeefffc

08003a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e0e7      	b.n	8003c24 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a54:	4b75      	ldr	r3, [pc, #468]	; (8003c2c <HAL_RCC_ClockConfig+0x1ec>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	683a      	ldr	r2, [r7, #0]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d910      	bls.n	8003a84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a62:	4b72      	ldr	r3, [pc, #456]	; (8003c2c <HAL_RCC_ClockConfig+0x1ec>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f023 0207 	bic.w	r2, r3, #7
 8003a6a:	4970      	ldr	r1, [pc, #448]	; (8003c2c <HAL_RCC_ClockConfig+0x1ec>)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a72:	4b6e      	ldr	r3, [pc, #440]	; (8003c2c <HAL_RCC_ClockConfig+0x1ec>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0307 	and.w	r3, r3, #7
 8003a7a:	683a      	ldr	r2, [r7, #0]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d001      	beq.n	8003a84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e0cf      	b.n	8003c24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d010      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	4b66      	ldr	r3, [pc, #408]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d908      	bls.n	8003ab2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa0:	4b63      	ldr	r3, [pc, #396]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	4960      	ldr	r1, [pc, #384]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0301 	and.w	r3, r3, #1
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d04c      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d107      	bne.n	8003ad6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ac6:	4b5a      	ldr	r3, [pc, #360]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d121      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e0a6      	b.n	8003c24 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ade:	4b54      	ldr	r3, [pc, #336]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d115      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e09a      	b.n	8003c24 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d107      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003af6:	4b4e      	ldr	r3, [pc, #312]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e08e      	b.n	8003c24 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b06:	4b4a      	ldr	r3, [pc, #296]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e086      	b.n	8003c24 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b16:	4b46      	ldr	r3, [pc, #280]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 0203 	bic.w	r2, r3, #3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	4943      	ldr	r1, [pc, #268]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b28:	f7fd fb7a 	bl	8001220 <HAL_GetTick>
 8003b2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2e:	e00a      	b.n	8003b46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b30:	f7fd fb76 	bl	8001220 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e06e      	b.n	8003c24 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b46:	4b3a      	ldr	r3, [pc, #232]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 020c 	and.w	r2, r3, #12
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d1eb      	bne.n	8003b30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d010      	beq.n	8003b86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	4b31      	ldr	r3, [pc, #196]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d208      	bcs.n	8003b86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b74:	4b2e      	ldr	r3, [pc, #184]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	492b      	ldr	r1, [pc, #172]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b86:	4b29      	ldr	r3, [pc, #164]	; (8003c2c <HAL_RCC_ClockConfig+0x1ec>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d210      	bcs.n	8003bb6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b94:	4b25      	ldr	r3, [pc, #148]	; (8003c2c <HAL_RCC_ClockConfig+0x1ec>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f023 0207 	bic.w	r2, r3, #7
 8003b9c:	4923      	ldr	r1, [pc, #140]	; (8003c2c <HAL_RCC_ClockConfig+0x1ec>)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba4:	4b21      	ldr	r3, [pc, #132]	; (8003c2c <HAL_RCC_ClockConfig+0x1ec>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0307 	and.w	r3, r3, #7
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e036      	b.n	8003c24 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bc2:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	4918      	ldr	r1, [pc, #96]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0308 	and.w	r3, r3, #8
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d009      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003be0:	4b13      	ldr	r3, [pc, #76]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	4910      	ldr	r1, [pc, #64]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bf4:	f000 f824 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4b0d      	ldr	r3, [pc, #52]	; (8003c30 <HAL_RCC_ClockConfig+0x1f0>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	091b      	lsrs	r3, r3, #4
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	490b      	ldr	r1, [pc, #44]	; (8003c34 <HAL_RCC_ClockConfig+0x1f4>)
 8003c06:	5ccb      	ldrb	r3, [r1, r3]
 8003c08:	f003 031f 	and.w	r3, r3, #31
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c10:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <HAL_RCC_ClockConfig+0x1f8>)
 8003c12:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c14:	4b09      	ldr	r3, [pc, #36]	; (8003c3c <HAL_RCC_ClockConfig+0x1fc>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f7fd fab1 	bl	8001180 <HAL_InitTick>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c22:	7afb      	ldrb	r3, [r7, #11]
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	40022000 	.word	0x40022000
 8003c30:	40021000 	.word	0x40021000
 8003c34:	08009298 	.word	0x08009298
 8003c38:	20000000 	.word	0x20000000
 8003c3c:	20000004 	.word	0x20000004

08003c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b089      	sub	sp, #36	; 0x24
 8003c44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	61fb      	str	r3, [r7, #28]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c4e:	4b3e      	ldr	r3, [pc, #248]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c58:	4b3b      	ldr	r3, [pc, #236]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f003 0303 	and.w	r3, r3, #3
 8003c60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d005      	beq.n	8003c74 <HAL_RCC_GetSysClockFreq+0x34>
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b0c      	cmp	r3, #12
 8003c6c:	d121      	bne.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d11e      	bne.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c74:	4b34      	ldr	r3, [pc, #208]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0308 	and.w	r3, r3, #8
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d107      	bne.n	8003c90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c80:	4b31      	ldr	r3, [pc, #196]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	e005      	b.n	8003c9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c90:	4b2d      	ldr	r3, [pc, #180]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	091b      	lsrs	r3, r3, #4
 8003c96:	f003 030f 	and.w	r3, r3, #15
 8003c9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c9c:	4a2b      	ldr	r2, [pc, #172]	; (8003d4c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ca4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10d      	bne.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cb0:	e00a      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	d102      	bne.n	8003cbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cb8:	4b25      	ldr	r3, [pc, #148]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	e004      	b.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d101      	bne.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	2b0c      	cmp	r3, #12
 8003ccc:	d134      	bne.n	8003d38 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cce:	4b1e      	ldr	r3, [pc, #120]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd0:	68db      	ldr	r3, [r3, #12]
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d003      	beq.n	8003ce6 <HAL_RCC_GetSysClockFreq+0xa6>
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b03      	cmp	r3, #3
 8003ce2:	d003      	beq.n	8003cec <HAL_RCC_GetSysClockFreq+0xac>
 8003ce4:	e005      	b.n	8003cf2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003ce6:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ce8:	617b      	str	r3, [r7, #20]
      break;
 8003cea:	e005      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cee:	617b      	str	r3, [r7, #20]
      break;
 8003cf0:	e002      	b.n	8003cf8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	617b      	str	r3, [r7, #20]
      break;
 8003cf6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cf8:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	3301      	adds	r3, #1
 8003d04:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d06:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	0a1b      	lsrs	r3, r3, #8
 8003d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	fb03 f202 	mul.w	r2, r3, r2
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d1c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d1e:	4b0a      	ldr	r3, [pc, #40]	; (8003d48 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	0e5b      	lsrs	r3, r3, #25
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	3301      	adds	r3, #1
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d38:	69bb      	ldr	r3, [r7, #24]
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3724      	adds	r7, #36	; 0x24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	080092b0 	.word	0x080092b0
 8003d50:	00f42400 	.word	0x00f42400
 8003d54:	007a1200 	.word	0x007a1200

08003d58 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d5c:	4b03      	ldr	r3, [pc, #12]	; (8003d6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	20000000 	.word	0x20000000

08003d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d74:	f7ff fff0 	bl	8003d58 <HAL_RCC_GetHCLKFreq>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	0a1b      	lsrs	r3, r3, #8
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	4904      	ldr	r1, [pc, #16]	; (8003d98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d86:	5ccb      	ldrb	r3, [r1, r3]
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40021000 	.word	0x40021000
 8003d98:	080092a8 	.word	0x080092a8

08003d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003da0:	f7ff ffda 	bl	8003d58 <HAL_RCC_GetHCLKFreq>
 8003da4:	4602      	mov	r2, r0
 8003da6:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	0adb      	lsrs	r3, r3, #11
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	4904      	ldr	r1, [pc, #16]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003db2:	5ccb      	ldrb	r3, [r1, r3]
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40021000 	.word	0x40021000
 8003dc4:	080092a8 	.word	0x080092a8

08003dc8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003dd4:	4b2a      	ldr	r3, [pc, #168]	; (8003e80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003de0:	f7ff f922 	bl	8003028 <HAL_PWREx_GetVoltageRange>
 8003de4:	6178      	str	r0, [r7, #20]
 8003de6:	e014      	b.n	8003e12 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003de8:	4b25      	ldr	r3, [pc, #148]	; (8003e80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dec:	4a24      	ldr	r2, [pc, #144]	; (8003e80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df2:	6593      	str	r3, [r2, #88]	; 0x58
 8003df4:	4b22      	ldr	r3, [pc, #136]	; (8003e80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e00:	f7ff f912 	bl	8003028 <HAL_PWREx_GetVoltageRange>
 8003e04:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e06:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e0a:	4a1d      	ldr	r2, [pc, #116]	; (8003e80 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e10:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e18:	d10b      	bne.n	8003e32 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b80      	cmp	r3, #128	; 0x80
 8003e1e:	d919      	bls.n	8003e54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2ba0      	cmp	r3, #160	; 0xa0
 8003e24:	d902      	bls.n	8003e2c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e26:	2302      	movs	r3, #2
 8003e28:	613b      	str	r3, [r7, #16]
 8003e2a:	e013      	b.n	8003e54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	e010      	b.n	8003e54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b80      	cmp	r3, #128	; 0x80
 8003e36:	d902      	bls.n	8003e3e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e38:	2303      	movs	r3, #3
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	e00a      	b.n	8003e54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b80      	cmp	r3, #128	; 0x80
 8003e42:	d102      	bne.n	8003e4a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e44:	2302      	movs	r3, #2
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	e004      	b.n	8003e54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b70      	cmp	r3, #112	; 0x70
 8003e4e:	d101      	bne.n	8003e54 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e50:	2301      	movs	r3, #1
 8003e52:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e54:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f023 0207 	bic.w	r2, r3, #7
 8003e5c:	4909      	ldr	r1, [pc, #36]	; (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e64:	4b07      	ldr	r3, [pc, #28]	; (8003e84 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d001      	beq.n	8003e76 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e000      	b.n	8003e78 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3718      	adds	r7, #24
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	40021000 	.word	0x40021000
 8003e84:	40022000 	.word	0x40022000

08003e88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e90:	2300      	movs	r3, #0
 8003e92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e94:	2300      	movs	r3, #0
 8003e96:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d041      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ea8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003eac:	d02a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003eae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003eb2:	d824      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003eb4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003eb8:	d008      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003eba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ebe:	d81e      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ec4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ec8:	d010      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003eca:	e018      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ecc:	4b86      	ldr	r3, [pc, #536]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	4a85      	ldr	r2, [pc, #532]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ed8:	e015      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	3304      	adds	r3, #4
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 facb 	bl	800447c <RCCEx_PLLSAI1_Config>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eea:	e00c      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	3320      	adds	r3, #32
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f000 fbb6 	bl	8004664 <RCCEx_PLLSAI2_Config>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003efc:	e003      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	74fb      	strb	r3, [r7, #19]
      break;
 8003f02:	e000      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f06:	7cfb      	ldrb	r3, [r7, #19]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d10b      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f0c:	4b76      	ldr	r3, [pc, #472]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f1a:	4973      	ldr	r1, [pc, #460]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f22:	e001      	b.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d041      	beq.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f3c:	d02a      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f42:	d824      	bhi.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f48:	d008      	beq.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f4e:	d81e      	bhi.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00a      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f58:	d010      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f5a:	e018      	b.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f5c:	4b62      	ldr	r3, [pc, #392]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4a61      	ldr	r2, [pc, #388]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f66:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f68:	e015      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	2100      	movs	r1, #0
 8003f70:	4618      	mov	r0, r3
 8003f72:	f000 fa83 	bl	800447c <RCCEx_PLLSAI1_Config>
 8003f76:	4603      	mov	r3, r0
 8003f78:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f7a:	e00c      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	3320      	adds	r3, #32
 8003f80:	2100      	movs	r1, #0
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 fb6e 	bl	8004664 <RCCEx_PLLSAI2_Config>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f8c:	e003      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	74fb      	strb	r3, [r7, #19]
      break;
 8003f92:	e000      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f96:	7cfb      	ldrb	r3, [r7, #19]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10b      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f9c:	4b52      	ldr	r3, [pc, #328]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003faa:	494f      	ldr	r1, [pc, #316]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003fb2:	e001      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fb4:	7cfb      	ldrb	r3, [r7, #19]
 8003fb6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 80a0 	beq.w	8004106 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fca:	4b47      	ldr	r3, [pc, #284]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00d      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe0:	4b41      	ldr	r3, [pc, #260]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe4:	4a40      	ldr	r2, [pc, #256]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fea:	6593      	str	r3, [r2, #88]	; 0x58
 8003fec:	4b3e      	ldr	r3, [pc, #248]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff4:	60bb      	str	r3, [r7, #8]
 8003ff6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ffc:	4b3b      	ldr	r3, [pc, #236]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a3a      	ldr	r2, [pc, #232]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004006:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004008:	f7fd f90a 	bl	8001220 <HAL_GetTick>
 800400c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800400e:	e009      	b.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004010:	f7fd f906 	bl	8001220 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d902      	bls.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	74fb      	strb	r3, [r7, #19]
        break;
 8004022:	e005      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004024:	4b31      	ldr	r3, [pc, #196]	; (80040ec <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402c:	2b00      	cmp	r3, #0
 800402e:	d0ef      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d15c      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004036:	4b2c      	ldr	r3, [pc, #176]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004040:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01f      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	429a      	cmp	r2, r3
 8004052:	d019      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004054:	4b24      	ldr	r3, [pc, #144]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004060:	4b21      	ldr	r3, [pc, #132]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	4a20      	ldr	r2, [pc, #128]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004070:	4b1d      	ldr	r3, [pc, #116]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004076:	4a1c      	ldr	r2, [pc, #112]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004080:	4a19      	ldr	r2, [pc, #100]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004092:	f7fd f8c5 	bl	8001220 <HAL_GetTick>
 8004096:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004098:	e00b      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409a:	f7fd f8c1 	bl	8001220 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d902      	bls.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	74fb      	strb	r3, [r7, #19]
            break;
 80040b0:	e006      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b2:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0ec      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80040c0:	7cfb      	ldrb	r3, [r7, #19]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040d6:	4904      	ldr	r1, [pc, #16]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040de:	e009      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040e0:	7cfb      	ldrb	r3, [r7, #19]
 80040e2:	74bb      	strb	r3, [r7, #18]
 80040e4:	e006      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80040e6:	bf00      	nop
 80040e8:	40021000 	.word	0x40021000
 80040ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f0:	7cfb      	ldrb	r3, [r7, #19]
 80040f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040f4:	7c7b      	ldrb	r3, [r7, #17]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d105      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040fa:	4b9e      	ldr	r3, [pc, #632]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fe:	4a9d      	ldr	r2, [pc, #628]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004100:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004104:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004112:	4b98      	ldr	r3, [pc, #608]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004118:	f023 0203 	bic.w	r2, r3, #3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004120:	4994      	ldr	r1, [pc, #592]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004134:	4b8f      	ldr	r3, [pc, #572]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413a:	f023 020c 	bic.w	r2, r3, #12
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004142:	498c      	ldr	r1, [pc, #560]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004156:	4b87      	ldr	r3, [pc, #540]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004164:	4983      	ldr	r1, [pc, #524]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004178:	4b7e      	ldr	r3, [pc, #504]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	497b      	ldr	r1, [pc, #492]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0310 	and.w	r3, r3, #16
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800419a:	4b76      	ldr	r3, [pc, #472]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a8:	4972      	ldr	r1, [pc, #456]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0320 	and.w	r3, r3, #32
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041bc:	4b6d      	ldr	r3, [pc, #436]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ca:	496a      	ldr	r1, [pc, #424]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041de:	4b65      	ldr	r3, [pc, #404]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ec:	4961      	ldr	r1, [pc, #388]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004200:	4b5c      	ldr	r3, [pc, #368]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420e:	4959      	ldr	r1, [pc, #356]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004222:	4b54      	ldr	r3, [pc, #336]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004230:	4950      	ldr	r1, [pc, #320]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004244:	4b4b      	ldr	r3, [pc, #300]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004252:	4948      	ldr	r1, [pc, #288]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004266:	4b43      	ldr	r3, [pc, #268]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	493f      	ldr	r1, [pc, #252]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d028      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004288:	4b3a      	ldr	r3, [pc, #232]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004296:	4937      	ldr	r1, [pc, #220]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042a6:	d106      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a8:	4b32      	ldr	r3, [pc, #200]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4a31      	ldr	r2, [pc, #196]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042b2:	60d3      	str	r3, [r2, #12]
 80042b4:	e011      	b.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042be:	d10c      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	3304      	adds	r3, #4
 80042c4:	2101      	movs	r1, #1
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 f8d8 	bl	800447c <RCCEx_PLLSAI1_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80042d6:	7cfb      	ldrb	r3, [r7, #19]
 80042d8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d028      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042e6:	4b23      	ldr	r3, [pc, #140]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	491f      	ldr	r1, [pc, #124]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004304:	d106      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004306:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	4a1a      	ldr	r2, [pc, #104]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800430c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004310:	60d3      	str	r3, [r2, #12]
 8004312:	e011      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800431c:	d10c      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3304      	adds	r3, #4
 8004322:	2101      	movs	r1, #1
 8004324:	4618      	mov	r0, r3
 8004326:	f000 f8a9 	bl	800447c <RCCEx_PLLSAI1_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800432e:	7cfb      	ldrb	r3, [r7, #19]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004334:	7cfb      	ldrb	r3, [r7, #19]
 8004336:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d02b      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004344:	4b0b      	ldr	r3, [pc, #44]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004352:	4908      	ldr	r1, [pc, #32]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004362:	d109      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004364:	4b03      	ldr	r3, [pc, #12]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	4a02      	ldr	r2, [pc, #8]	; (8004374 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800436a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800436e:	60d3      	str	r3, [r2, #12]
 8004370:	e014      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004372:	bf00      	nop
 8004374:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800437c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004380:	d10c      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	3304      	adds	r3, #4
 8004386:	2101      	movs	r1, #1
 8004388:	4618      	mov	r0, r3
 800438a:	f000 f877 	bl	800447c <RCCEx_PLLSAI1_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004392:	7cfb      	ldrb	r3, [r7, #19]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d001      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004398:	7cfb      	ldrb	r3, [r7, #19]
 800439a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d02f      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043a8:	4b2b      	ldr	r3, [pc, #172]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043b6:	4928      	ldr	r1, [pc, #160]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043c6:	d10d      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3304      	adds	r3, #4
 80043cc:	2102      	movs	r1, #2
 80043ce:	4618      	mov	r0, r3
 80043d0:	f000 f854 	bl	800447c <RCCEx_PLLSAI1_Config>
 80043d4:	4603      	mov	r3, r0
 80043d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043d8:	7cfb      	ldrb	r3, [r7, #19]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d014      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043de:	7cfb      	ldrb	r3, [r7, #19]
 80043e0:	74bb      	strb	r3, [r7, #18]
 80043e2:	e011      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043ec:	d10c      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3320      	adds	r3, #32
 80043f2:	2102      	movs	r1, #2
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 f935 	bl	8004664 <RCCEx_PLLSAI2_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043fe:	7cfb      	ldrb	r3, [r7, #19]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004404:	7cfb      	ldrb	r3, [r7, #19]
 8004406:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004414:	4b10      	ldr	r3, [pc, #64]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004422:	490d      	ldr	r1, [pc, #52]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00b      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004436:	4b08      	ldr	r3, [pc, #32]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004446:	4904      	ldr	r1, [pc, #16]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800444e:	7cbb      	ldrb	r3, [r7, #18]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	40021000 	.word	0x40021000

0800445c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a04      	ldr	r2, [pc, #16]	; (8004478 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004466:	f043 0304 	orr.w	r3, r3, #4
 800446a:	6013      	str	r3, [r2, #0]
}
 800446c:	bf00      	nop
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr
 8004476:	bf00      	nop
 8004478:	40021000 	.word	0x40021000

0800447c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004486:	2300      	movs	r3, #0
 8004488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800448a:	4b75      	ldr	r3, [pc, #468]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f003 0303 	and.w	r3, r3, #3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d018      	beq.n	80044c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004496:	4b72      	ldr	r3, [pc, #456]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	f003 0203 	and.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d10d      	bne.n	80044c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
       ||
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d009      	beq.n	80044c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80044ae:	4b6c      	ldr	r3, [pc, #432]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	091b      	lsrs	r3, r3, #4
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	1c5a      	adds	r2, r3, #1
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
       ||
 80044be:	429a      	cmp	r2, r3
 80044c0:	d047      	beq.n	8004552 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	73fb      	strb	r3, [r7, #15]
 80044c6:	e044      	b.n	8004552 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d018      	beq.n	8004502 <RCCEx_PLLSAI1_Config+0x86>
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d825      	bhi.n	8004520 <RCCEx_PLLSAI1_Config+0xa4>
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d002      	beq.n	80044de <RCCEx_PLLSAI1_Config+0x62>
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d009      	beq.n	80044f0 <RCCEx_PLLSAI1_Config+0x74>
 80044dc:	e020      	b.n	8004520 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044de:	4b60      	ldr	r3, [pc, #384]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d11d      	bne.n	8004526 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ee:	e01a      	b.n	8004526 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044f0:	4b5b      	ldr	r3, [pc, #364]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d116      	bne.n	800452a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004500:	e013      	b.n	800452a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004502:	4b57      	ldr	r3, [pc, #348]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10f      	bne.n	800452e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800450e:	4b54      	ldr	r3, [pc, #336]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800451e:	e006      	b.n	800452e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
      break;
 8004524:	e004      	b.n	8004530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004526:	bf00      	nop
 8004528:	e002      	b.n	8004530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800452a:	bf00      	nop
 800452c:	e000      	b.n	8004530 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800452e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004530:	7bfb      	ldrb	r3, [r7, #15]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10d      	bne.n	8004552 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004536:	4b4a      	ldr	r3, [pc, #296]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6819      	ldr	r1, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	3b01      	subs	r3, #1
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	430b      	orrs	r3, r1
 800454c:	4944      	ldr	r1, [pc, #272]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800454e:	4313      	orrs	r3, r2
 8004550:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004552:	7bfb      	ldrb	r3, [r7, #15]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d17d      	bne.n	8004654 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004558:	4b41      	ldr	r3, [pc, #260]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a40      	ldr	r2, [pc, #256]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800455e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004564:	f7fc fe5c 	bl	8001220 <HAL_GetTick>
 8004568:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800456a:	e009      	b.n	8004580 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800456c:	f7fc fe58 	bl	8001220 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d902      	bls.n	8004580 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	73fb      	strb	r3, [r7, #15]
        break;
 800457e:	e005      	b.n	800458c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004580:	4b37      	ldr	r3, [pc, #220]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1ef      	bne.n	800456c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d160      	bne.n	8004654 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d111      	bne.n	80045bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004598:	4b31      	ldr	r3, [pc, #196]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800459a:	691b      	ldr	r3, [r3, #16]
 800459c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80045a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6892      	ldr	r2, [r2, #8]
 80045a8:	0211      	lsls	r1, r2, #8
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	68d2      	ldr	r2, [r2, #12]
 80045ae:	0912      	lsrs	r2, r2, #4
 80045b0:	0452      	lsls	r2, r2, #17
 80045b2:	430a      	orrs	r2, r1
 80045b4:	492a      	ldr	r1, [pc, #168]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	610b      	str	r3, [r1, #16]
 80045ba:	e027      	b.n	800460c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d112      	bne.n	80045e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045c2:	4b27      	ldr	r3, [pc, #156]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6892      	ldr	r2, [r2, #8]
 80045d2:	0211      	lsls	r1, r2, #8
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6912      	ldr	r2, [r2, #16]
 80045d8:	0852      	lsrs	r2, r2, #1
 80045da:	3a01      	subs	r2, #1
 80045dc:	0552      	lsls	r2, r2, #21
 80045de:	430a      	orrs	r2, r1
 80045e0:	491f      	ldr	r1, [pc, #124]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	610b      	str	r3, [r1, #16]
 80045e6:	e011      	b.n	800460c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045e8:	4b1d      	ldr	r3, [pc, #116]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	6892      	ldr	r2, [r2, #8]
 80045f8:	0211      	lsls	r1, r2, #8
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6952      	ldr	r2, [r2, #20]
 80045fe:	0852      	lsrs	r2, r2, #1
 8004600:	3a01      	subs	r2, #1
 8004602:	0652      	lsls	r2, r2, #25
 8004604:	430a      	orrs	r2, r1
 8004606:	4916      	ldr	r1, [pc, #88]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004608:	4313      	orrs	r3, r2
 800460a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800460c:	4b14      	ldr	r3, [pc, #80]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a13      	ldr	r2, [pc, #76]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004612:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004616:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004618:	f7fc fe02 	bl	8001220 <HAL_GetTick>
 800461c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800461e:	e009      	b.n	8004634 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004620:	f7fc fdfe 	bl	8001220 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d902      	bls.n	8004634 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	73fb      	strb	r3, [r7, #15]
          break;
 8004632:	e005      	b.n	8004640 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004634:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0ef      	beq.n	8004620 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	4904      	ldr	r1, [pc, #16]	; (8004660 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004650:	4313      	orrs	r3, r2
 8004652:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004654:	7bfb      	ldrb	r3, [r7, #15]
}
 8004656:	4618      	mov	r0, r3
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40021000 	.word	0x40021000

08004664 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004672:	4b6a      	ldr	r3, [pc, #424]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	f003 0303 	and.w	r3, r3, #3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d018      	beq.n	80046b0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800467e:	4b67      	ldr	r3, [pc, #412]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004680:	68db      	ldr	r3, [r3, #12]
 8004682:	f003 0203 	and.w	r2, r3, #3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d10d      	bne.n	80046aa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
       ||
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004696:	4b61      	ldr	r3, [pc, #388]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	091b      	lsrs	r3, r3, #4
 800469c:	f003 0307 	and.w	r3, r3, #7
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685b      	ldr	r3, [r3, #4]
       ||
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d047      	beq.n	800473a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	73fb      	strb	r3, [r7, #15]
 80046ae:	e044      	b.n	800473a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d018      	beq.n	80046ea <RCCEx_PLLSAI2_Config+0x86>
 80046b8:	2b03      	cmp	r3, #3
 80046ba:	d825      	bhi.n	8004708 <RCCEx_PLLSAI2_Config+0xa4>
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d002      	beq.n	80046c6 <RCCEx_PLLSAI2_Config+0x62>
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d009      	beq.n	80046d8 <RCCEx_PLLSAI2_Config+0x74>
 80046c4:	e020      	b.n	8004708 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046c6:	4b55      	ldr	r3, [pc, #340]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d11d      	bne.n	800470e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d6:	e01a      	b.n	800470e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046d8:	4b50      	ldr	r3, [pc, #320]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d116      	bne.n	8004712 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e8:	e013      	b.n	8004712 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046ea:	4b4c      	ldr	r3, [pc, #304]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10f      	bne.n	8004716 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046f6:	4b49      	ldr	r3, [pc, #292]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004706:	e006      	b.n	8004716 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
      break;
 800470c:	e004      	b.n	8004718 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800470e:	bf00      	nop
 8004710:	e002      	b.n	8004718 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004712:	bf00      	nop
 8004714:	e000      	b.n	8004718 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004716:	bf00      	nop
    }

    if(status == HAL_OK)
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10d      	bne.n	800473a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800471e:	4b3f      	ldr	r3, [pc, #252]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6819      	ldr	r1, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	3b01      	subs	r3, #1
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	430b      	orrs	r3, r1
 8004734:	4939      	ldr	r1, [pc, #228]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004736:	4313      	orrs	r3, r2
 8004738:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800473a:	7bfb      	ldrb	r3, [r7, #15]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d167      	bne.n	8004810 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004740:	4b36      	ldr	r3, [pc, #216]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a35      	ldr	r2, [pc, #212]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004746:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800474a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474c:	f7fc fd68 	bl	8001220 <HAL_GetTick>
 8004750:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004752:	e009      	b.n	8004768 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004754:	f7fc fd64 	bl	8001220 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d902      	bls.n	8004768 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	73fb      	strb	r3, [r7, #15]
        break;
 8004766:	e005      	b.n	8004774 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004768:	4b2c      	ldr	r3, [pc, #176]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1ef      	bne.n	8004754 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d14a      	bne.n	8004810 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d111      	bne.n	80047a4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004780:	4b26      	ldr	r3, [pc, #152]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004788:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6892      	ldr	r2, [r2, #8]
 8004790:	0211      	lsls	r1, r2, #8
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	68d2      	ldr	r2, [r2, #12]
 8004796:	0912      	lsrs	r2, r2, #4
 8004798:	0452      	lsls	r2, r2, #17
 800479a:	430a      	orrs	r2, r1
 800479c:	491f      	ldr	r1, [pc, #124]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	614b      	str	r3, [r1, #20]
 80047a2:	e011      	b.n	80047c8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80047a4:	4b1d      	ldr	r3, [pc, #116]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80047ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6892      	ldr	r2, [r2, #8]
 80047b4:	0211      	lsls	r1, r2, #8
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6912      	ldr	r2, [r2, #16]
 80047ba:	0852      	lsrs	r2, r2, #1
 80047bc:	3a01      	subs	r2, #1
 80047be:	0652      	lsls	r2, r2, #25
 80047c0:	430a      	orrs	r2, r1
 80047c2:	4916      	ldr	r1, [pc, #88]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047c8:	4b14      	ldr	r3, [pc, #80]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a13      	ldr	r2, [pc, #76]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047d4:	f7fc fd24 	bl	8001220 <HAL_GetTick>
 80047d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047da:	e009      	b.n	80047f0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047dc:	f7fc fd20 	bl	8001220 <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d902      	bls.n	80047f0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	73fb      	strb	r3, [r7, #15]
          break;
 80047ee:	e005      	b.n	80047fc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0ef      	beq.n	80047dc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004802:	4b06      	ldr	r3, [pc, #24]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004804:	695a      	ldr	r2, [r3, #20]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	4904      	ldr	r1, [pc, #16]	; (800481c <RCCEx_PLLSAI2_Config+0x1b8>)
 800480c:	4313      	orrs	r3, r2
 800480e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004810:	7bfb      	ldrb	r3, [r7, #15]
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40021000 	.word	0x40021000

08004820 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e095      	b.n	800495e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	2b00      	cmp	r3, #0
 8004838:	d108      	bne.n	800484c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004842:	d009      	beq.n	8004858 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	61da      	str	r2, [r3, #28]
 800484a:	e005      	b.n	8004858 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d106      	bne.n	8004878 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7fc faea 	bl	8000e4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2202      	movs	r2, #2
 800487c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800488e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004898:	d902      	bls.n	80048a0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800489a:	2300      	movs	r3, #0
 800489c:	60fb      	str	r3, [r7, #12]
 800489e:	e002      	b.n	80048a6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048a4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80048ae:	d007      	beq.n	80048c0 <HAL_SPI_Init+0xa0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048b8:	d002      	beq.n	80048c0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048d0:	431a      	orrs	r2, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048f8:	431a      	orrs	r2, r3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004902:	ea42 0103 	orr.w	r1, r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	0c1b      	lsrs	r3, r3, #16
 800491c:	f003 0204 	and.w	r2, r3, #4
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004924:	f003 0310 	and.w	r3, r3, #16
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492e:	f003 0308 	and.w	r3, r3, #8
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800493c:	ea42 0103 	orr.w	r1, r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2200      	movs	r2, #0
 8004952:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3710      	adds	r7, #16
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b082      	sub	sp, #8
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e040      	b.n	80049fa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800497c:	2b00      	cmp	r3, #0
 800497e:	d106      	bne.n	800498e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f7fc faa3 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2224      	movs	r2, #36	; 0x24
 8004992:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 0201 	bic.w	r2, r2, #1
 80049a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 fae1 	bl	8004f74 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f826 	bl	8004a04 <UART_SetConfig>
 80049b8:	4603      	mov	r3, r0
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e01b      	b.n	80049fa <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fb60 	bl	80050b8 <UART_CheckIdleState>
 80049f8:	4603      	mov	r3, r0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3708      	adds	r7, #8
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a08:	b08a      	sub	sp, #40	; 0x28
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	431a      	orrs	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	69db      	ldr	r3, [r3, #28]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4ba4      	ldr	r3, [pc, #656]	; (8004cc4 <UART_SetConfig+0x2c0>)
 8004a34:	4013      	ands	r3, r2
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	6812      	ldr	r2, [r2, #0]
 8004a3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a99      	ldr	r2, [pc, #612]	; (8004cc8 <UART_SetConfig+0x2c4>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d004      	beq.n	8004a70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6a1b      	ldr	r3, [r3, #32]
 8004a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a80:	430a      	orrs	r2, r1
 8004a82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a90      	ldr	r2, [pc, #576]	; (8004ccc <UART_SetConfig+0x2c8>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d126      	bne.n	8004adc <UART_SetConfig+0xd8>
 8004a8e:	4b90      	ldr	r3, [pc, #576]	; (8004cd0 <UART_SetConfig+0x2cc>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a94:	f003 0303 	and.w	r3, r3, #3
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d81b      	bhi.n	8004ad4 <UART_SetConfig+0xd0>
 8004a9c:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <UART_SetConfig+0xa0>)
 8004a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa2:	bf00      	nop
 8004aa4:	08004ab5 	.word	0x08004ab5
 8004aa8:	08004ac5 	.word	0x08004ac5
 8004aac:	08004abd 	.word	0x08004abd
 8004ab0:	08004acd 	.word	0x08004acd
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aba:	e116      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004abc:	2302      	movs	r3, #2
 8004abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ac2:	e112      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004ac4:	2304      	movs	r3, #4
 8004ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aca:	e10e      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004acc:	2308      	movs	r3, #8
 8004ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ad2:	e10a      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004ad4:	2310      	movs	r3, #16
 8004ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ada:	e106      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a7c      	ldr	r2, [pc, #496]	; (8004cd4 <UART_SetConfig+0x2d0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d138      	bne.n	8004b58 <UART_SetConfig+0x154>
 8004ae6:	4b7a      	ldr	r3, [pc, #488]	; (8004cd0 <UART_SetConfig+0x2cc>)
 8004ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aec:	f003 030c 	and.w	r3, r3, #12
 8004af0:	2b0c      	cmp	r3, #12
 8004af2:	d82d      	bhi.n	8004b50 <UART_SetConfig+0x14c>
 8004af4:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0xf8>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b31 	.word	0x08004b31
 8004b00:	08004b51 	.word	0x08004b51
 8004b04:	08004b51 	.word	0x08004b51
 8004b08:	08004b51 	.word	0x08004b51
 8004b0c:	08004b41 	.word	0x08004b41
 8004b10:	08004b51 	.word	0x08004b51
 8004b14:	08004b51 	.word	0x08004b51
 8004b18:	08004b51 	.word	0x08004b51
 8004b1c:	08004b39 	.word	0x08004b39
 8004b20:	08004b51 	.word	0x08004b51
 8004b24:	08004b51 	.word	0x08004b51
 8004b28:	08004b51 	.word	0x08004b51
 8004b2c:	08004b49 	.word	0x08004b49
 8004b30:	2300      	movs	r3, #0
 8004b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b36:	e0d8      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b3e:	e0d4      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004b40:	2304      	movs	r3, #4
 8004b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b46:	e0d0      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004b48:	2308      	movs	r3, #8
 8004b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b4e:	e0cc      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004b50:	2310      	movs	r3, #16
 8004b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b56:	e0c8      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a5e      	ldr	r2, [pc, #376]	; (8004cd8 <UART_SetConfig+0x2d4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d125      	bne.n	8004bae <UART_SetConfig+0x1aa>
 8004b62:	4b5b      	ldr	r3, [pc, #364]	; (8004cd0 <UART_SetConfig+0x2cc>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b6c:	2b30      	cmp	r3, #48	; 0x30
 8004b6e:	d016      	beq.n	8004b9e <UART_SetConfig+0x19a>
 8004b70:	2b30      	cmp	r3, #48	; 0x30
 8004b72:	d818      	bhi.n	8004ba6 <UART_SetConfig+0x1a2>
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d00a      	beq.n	8004b8e <UART_SetConfig+0x18a>
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d814      	bhi.n	8004ba6 <UART_SetConfig+0x1a2>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <UART_SetConfig+0x182>
 8004b80:	2b10      	cmp	r3, #16
 8004b82:	d008      	beq.n	8004b96 <UART_SetConfig+0x192>
 8004b84:	e00f      	b.n	8004ba6 <UART_SetConfig+0x1a2>
 8004b86:	2300      	movs	r3, #0
 8004b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b8c:	e0ad      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b94:	e0a9      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004b96:	2304      	movs	r3, #4
 8004b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b9c:	e0a5      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004b9e:	2308      	movs	r3, #8
 8004ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ba4:	e0a1      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004ba6:	2310      	movs	r3, #16
 8004ba8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bac:	e09d      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a4a      	ldr	r2, [pc, #296]	; (8004cdc <UART_SetConfig+0x2d8>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d125      	bne.n	8004c04 <UART_SetConfig+0x200>
 8004bb8:	4b45      	ldr	r3, [pc, #276]	; (8004cd0 <UART_SetConfig+0x2cc>)
 8004bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004bc2:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc4:	d016      	beq.n	8004bf4 <UART_SetConfig+0x1f0>
 8004bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8004bc8:	d818      	bhi.n	8004bfc <UART_SetConfig+0x1f8>
 8004bca:	2b80      	cmp	r3, #128	; 0x80
 8004bcc:	d00a      	beq.n	8004be4 <UART_SetConfig+0x1e0>
 8004bce:	2b80      	cmp	r3, #128	; 0x80
 8004bd0:	d814      	bhi.n	8004bfc <UART_SetConfig+0x1f8>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <UART_SetConfig+0x1d8>
 8004bd6:	2b40      	cmp	r3, #64	; 0x40
 8004bd8:	d008      	beq.n	8004bec <UART_SetConfig+0x1e8>
 8004bda:	e00f      	b.n	8004bfc <UART_SetConfig+0x1f8>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004be2:	e082      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004be4:	2302      	movs	r3, #2
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bea:	e07e      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004bec:	2304      	movs	r3, #4
 8004bee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bf2:	e07a      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004bf4:	2308      	movs	r3, #8
 8004bf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bfa:	e076      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c02:	e072      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a35      	ldr	r2, [pc, #212]	; (8004ce0 <UART_SetConfig+0x2dc>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d12a      	bne.n	8004c64 <UART_SetConfig+0x260>
 8004c0e:	4b30      	ldr	r3, [pc, #192]	; (8004cd0 <UART_SetConfig+0x2cc>)
 8004c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c1c:	d01a      	beq.n	8004c54 <UART_SetConfig+0x250>
 8004c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c22:	d81b      	bhi.n	8004c5c <UART_SetConfig+0x258>
 8004c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c28:	d00c      	beq.n	8004c44 <UART_SetConfig+0x240>
 8004c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2e:	d815      	bhi.n	8004c5c <UART_SetConfig+0x258>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <UART_SetConfig+0x238>
 8004c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c38:	d008      	beq.n	8004c4c <UART_SetConfig+0x248>
 8004c3a:	e00f      	b.n	8004c5c <UART_SetConfig+0x258>
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c42:	e052      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004c44:	2302      	movs	r3, #2
 8004c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c4a:	e04e      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004c4c:	2304      	movs	r3, #4
 8004c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c52:	e04a      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004c54:	2308      	movs	r3, #8
 8004c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c5a:	e046      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004c5c:	2310      	movs	r3, #16
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c62:	e042      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <UART_SetConfig+0x2c4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d13a      	bne.n	8004ce4 <UART_SetConfig+0x2e0>
 8004c6e:	4b18      	ldr	r3, [pc, #96]	; (8004cd0 <UART_SetConfig+0x2cc>)
 8004c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c7c:	d01a      	beq.n	8004cb4 <UART_SetConfig+0x2b0>
 8004c7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c82:	d81b      	bhi.n	8004cbc <UART_SetConfig+0x2b8>
 8004c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c88:	d00c      	beq.n	8004ca4 <UART_SetConfig+0x2a0>
 8004c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c8e:	d815      	bhi.n	8004cbc <UART_SetConfig+0x2b8>
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d003      	beq.n	8004c9c <UART_SetConfig+0x298>
 8004c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c98:	d008      	beq.n	8004cac <UART_SetConfig+0x2a8>
 8004c9a:	e00f      	b.n	8004cbc <UART_SetConfig+0x2b8>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ca2:	e022      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004ca4:	2302      	movs	r3, #2
 8004ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004caa:	e01e      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004cac:	2304      	movs	r3, #4
 8004cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cb2:	e01a      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004cb4:	2308      	movs	r3, #8
 8004cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cba:	e016      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004cbc:	2310      	movs	r3, #16
 8004cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004cc2:	e012      	b.n	8004cea <UART_SetConfig+0x2e6>
 8004cc4:	efff69f3 	.word	0xefff69f3
 8004cc8:	40008000 	.word	0x40008000
 8004ccc:	40013800 	.word	0x40013800
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	40004400 	.word	0x40004400
 8004cd8:	40004800 	.word	0x40004800
 8004cdc:	40004c00 	.word	0x40004c00
 8004ce0:	40005000 	.word	0x40005000
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a9f      	ldr	r2, [pc, #636]	; (8004f6c <UART_SetConfig+0x568>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d17a      	bne.n	8004dea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d824      	bhi.n	8004d46 <UART_SetConfig+0x342>
 8004cfc:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <UART_SetConfig+0x300>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d29 	.word	0x08004d29
 8004d08:	08004d47 	.word	0x08004d47
 8004d0c:	08004d31 	.word	0x08004d31
 8004d10:	08004d47 	.word	0x08004d47
 8004d14:	08004d37 	.word	0x08004d37
 8004d18:	08004d47 	.word	0x08004d47
 8004d1c:	08004d47 	.word	0x08004d47
 8004d20:	08004d47 	.word	0x08004d47
 8004d24:	08004d3f 	.word	0x08004d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d28:	f7ff f822 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 8004d2c:	61f8      	str	r0, [r7, #28]
        break;
 8004d2e:	e010      	b.n	8004d52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d30:	4b8f      	ldr	r3, [pc, #572]	; (8004f70 <UART_SetConfig+0x56c>)
 8004d32:	61fb      	str	r3, [r7, #28]
        break;
 8004d34:	e00d      	b.n	8004d52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d36:	f7fe ff83 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 8004d3a:	61f8      	str	r0, [r7, #28]
        break;
 8004d3c:	e009      	b.n	8004d52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d42:	61fb      	str	r3, [r7, #28]
        break;
 8004d44:	e005      	b.n	8004d52 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 80fb 	beq.w	8004f50 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	4613      	mov	r3, r2
 8004d60:	005b      	lsls	r3, r3, #1
 8004d62:	4413      	add	r3, r2
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d305      	bcc.n	8004d76 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d903      	bls.n	8004d7e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d7c:	e0e8      	b.n	8004f50 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	2200      	movs	r2, #0
 8004d82:	461c      	mov	r4, r3
 8004d84:	4615      	mov	r5, r2
 8004d86:	f04f 0200 	mov.w	r2, #0
 8004d8a:	f04f 0300 	mov.w	r3, #0
 8004d8e:	022b      	lsls	r3, r5, #8
 8004d90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d94:	0222      	lsls	r2, r4, #8
 8004d96:	68f9      	ldr	r1, [r7, #12]
 8004d98:	6849      	ldr	r1, [r1, #4]
 8004d9a:	0849      	lsrs	r1, r1, #1
 8004d9c:	2000      	movs	r0, #0
 8004d9e:	4688      	mov	r8, r1
 8004da0:	4681      	mov	r9, r0
 8004da2:	eb12 0a08 	adds.w	sl, r2, r8
 8004da6:	eb43 0b09 	adc.w	fp, r3, r9
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	603b      	str	r3, [r7, #0]
 8004db2:	607a      	str	r2, [r7, #4]
 8004db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004db8:	4650      	mov	r0, sl
 8004dba:	4659      	mov	r1, fp
 8004dbc:	f7fb fa04 	bl	80001c8 <__aeabi_uldivmod>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004dce:	d308      	bcc.n	8004de2 <UART_SetConfig+0x3de>
 8004dd0:	69bb      	ldr	r3, [r7, #24]
 8004dd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd6:	d204      	bcs.n	8004de2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	60da      	str	r2, [r3, #12]
 8004de0:	e0b6      	b.n	8004f50 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004de8:	e0b2      	b.n	8004f50 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004df2:	d15e      	bne.n	8004eb2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004df4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d828      	bhi.n	8004e4e <UART_SetConfig+0x44a>
 8004dfc:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <UART_SetConfig+0x400>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e29 	.word	0x08004e29
 8004e08:	08004e31 	.word	0x08004e31
 8004e0c:	08004e39 	.word	0x08004e39
 8004e10:	08004e4f 	.word	0x08004e4f
 8004e14:	08004e3f 	.word	0x08004e3f
 8004e18:	08004e4f 	.word	0x08004e4f
 8004e1c:	08004e4f 	.word	0x08004e4f
 8004e20:	08004e4f 	.word	0x08004e4f
 8004e24:	08004e47 	.word	0x08004e47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e28:	f7fe ffa2 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 8004e2c:	61f8      	str	r0, [r7, #28]
        break;
 8004e2e:	e014      	b.n	8004e5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e30:	f7fe ffb4 	bl	8003d9c <HAL_RCC_GetPCLK2Freq>
 8004e34:	61f8      	str	r0, [r7, #28]
        break;
 8004e36:	e010      	b.n	8004e5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e38:	4b4d      	ldr	r3, [pc, #308]	; (8004f70 <UART_SetConfig+0x56c>)
 8004e3a:	61fb      	str	r3, [r7, #28]
        break;
 8004e3c:	e00d      	b.n	8004e5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e3e:	f7fe feff 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 8004e42:	61f8      	str	r0, [r7, #28]
        break;
 8004e44:	e009      	b.n	8004e5a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e4a:	61fb      	str	r3, [r7, #28]
        break;
 8004e4c:	e005      	b.n	8004e5a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d077      	beq.n	8004f50 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	005a      	lsls	r2, r3, #1
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	085b      	lsrs	r3, r3, #1
 8004e6a:	441a      	add	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e74:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	2b0f      	cmp	r3, #15
 8004e7a:	d916      	bls.n	8004eaa <UART_SetConfig+0x4a6>
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e82:	d212      	bcs.n	8004eaa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f023 030f 	bic.w	r3, r3, #15
 8004e8c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	085b      	lsrs	r3, r3, #1
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	8afb      	ldrh	r3, [r7, #22]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	8afa      	ldrh	r2, [r7, #22]
 8004ea6:	60da      	str	r2, [r3, #12]
 8004ea8:	e052      	b.n	8004f50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004eb0:	e04e      	b.n	8004f50 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004eb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	d827      	bhi.n	8004f0a <UART_SetConfig+0x506>
 8004eba:	a201      	add	r2, pc, #4	; (adr r2, 8004ec0 <UART_SetConfig+0x4bc>)
 8004ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec0:	08004ee5 	.word	0x08004ee5
 8004ec4:	08004eed 	.word	0x08004eed
 8004ec8:	08004ef5 	.word	0x08004ef5
 8004ecc:	08004f0b 	.word	0x08004f0b
 8004ed0:	08004efb 	.word	0x08004efb
 8004ed4:	08004f0b 	.word	0x08004f0b
 8004ed8:	08004f0b 	.word	0x08004f0b
 8004edc:	08004f0b 	.word	0x08004f0b
 8004ee0:	08004f03 	.word	0x08004f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ee4:	f7fe ff44 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 8004ee8:	61f8      	str	r0, [r7, #28]
        break;
 8004eea:	e014      	b.n	8004f16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eec:	f7fe ff56 	bl	8003d9c <HAL_RCC_GetPCLK2Freq>
 8004ef0:	61f8      	str	r0, [r7, #28]
        break;
 8004ef2:	e010      	b.n	8004f16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ef4:	4b1e      	ldr	r3, [pc, #120]	; (8004f70 <UART_SetConfig+0x56c>)
 8004ef6:	61fb      	str	r3, [r7, #28]
        break;
 8004ef8:	e00d      	b.n	8004f16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004efa:	f7fe fea1 	bl	8003c40 <HAL_RCC_GetSysClockFreq>
 8004efe:	61f8      	str	r0, [r7, #28]
        break;
 8004f00:	e009      	b.n	8004f16 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f06:	61fb      	str	r3, [r7, #28]
        break;
 8004f08:	e005      	b.n	8004f16 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004f14:	bf00      	nop
    }

    if (pclk != 0U)
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d019      	beq.n	8004f50 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	085a      	lsrs	r2, r3, #1
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	441a      	add	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f2e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	2b0f      	cmp	r3, #15
 8004f34:	d909      	bls.n	8004f4a <UART_SetConfig+0x546>
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f3c:	d205      	bcs.n	8004f4a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	b29a      	uxth	r2, r3
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	60da      	str	r2, [r3, #12]
 8004f48:	e002      	b.n	8004f50 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f5c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3728      	adds	r7, #40	; 0x28
 8004f64:	46bd      	mov	sp, r7
 8004f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40008000 	.word	0x40008000
 8004f70:	00f42400 	.word	0x00f42400

08004f74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b083      	sub	sp, #12
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	f003 0308 	and.w	r3, r3, #8
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00a      	beq.n	8004f9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00a      	beq.n	8004fc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00a      	beq.n	8004fe2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d00a      	beq.n	8005004 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00a      	beq.n	8005026 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800504c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005050:	2b00      	cmp	r3, #0
 8005052:	d01a      	beq.n	800508a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	430a      	orrs	r2, r1
 8005068:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005072:	d10a      	bne.n	800508a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005092:	2b00      	cmp	r3, #0
 8005094:	d00a      	beq.n	80050ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	430a      	orrs	r2, r1
 80050aa:	605a      	str	r2, [r3, #4]
  }
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b098      	sub	sp, #96	; 0x60
 80050bc:	af02      	add	r7, sp, #8
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050c8:	f7fc f8aa 	bl	8001220 <HAL_GetTick>
 80050cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 0308 	and.w	r3, r3, #8
 80050d8:	2b08      	cmp	r3, #8
 80050da:	d12e      	bne.n	800513a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050e4:	2200      	movs	r2, #0
 80050e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f88c 	bl	8005208 <UART_WaitOnFlagUntilTimeout>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d021      	beq.n	800513a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	e853 3f00 	ldrex	r3, [r3]
 8005102:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005104:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800510a:	653b      	str	r3, [r7, #80]	; 0x50
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	461a      	mov	r2, r3
 8005112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005114:	647b      	str	r3, [r7, #68]	; 0x44
 8005116:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005118:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800511a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800511c:	e841 2300 	strex	r3, r2, [r1]
 8005120:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e6      	bne.n	80050f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2220      	movs	r2, #32
 800512c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e062      	b.n	8005200 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b04      	cmp	r3, #4
 8005146:	d149      	bne.n	80051dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005148:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005150:	2200      	movs	r2, #0
 8005152:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 f856 	bl	8005208 <UART_WaitOnFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d03c      	beq.n	80051dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516a:	e853 3f00 	ldrex	r3, [r3]
 800516e:	623b      	str	r3, [r7, #32]
   return(result);
 8005170:	6a3b      	ldr	r3, [r7, #32]
 8005172:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005176:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	461a      	mov	r2, r3
 800517e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005180:	633b      	str	r3, [r7, #48]	; 0x30
 8005182:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005184:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005186:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005188:	e841 2300 	strex	r3, r2, [r1]
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1e6      	bne.n	8005162 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	3308      	adds	r3, #8
 800519a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	e853 3f00 	ldrex	r3, [r3]
 80051a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f023 0301 	bic.w	r3, r3, #1
 80051aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	3308      	adds	r3, #8
 80051b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051b4:	61fa      	str	r2, [r7, #28]
 80051b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b8:	69b9      	ldr	r1, [r7, #24]
 80051ba:	69fa      	ldr	r2, [r7, #28]
 80051bc:	e841 2300 	strex	r3, r2, [r1]
 80051c0:	617b      	str	r3, [r7, #20]
   return(result);
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1e5      	bne.n	8005194 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e011      	b.n	8005200 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2220      	movs	r2, #32
 80051e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3758      	adds	r7, #88	; 0x58
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	603b      	str	r3, [r7, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005218:	e049      	b.n	80052ae <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005220:	d045      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005222:	f7fb fffd 	bl	8001220 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	69ba      	ldr	r2, [r7, #24]
 800522e:	429a      	cmp	r2, r3
 8005230:	d302      	bcc.n	8005238 <UART_WaitOnFlagUntilTimeout+0x30>
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e048      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b00      	cmp	r3, #0
 8005248:	d031      	beq.n	80052ae <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	69db      	ldr	r3, [r3, #28]
 8005250:	f003 0308 	and.w	r3, r3, #8
 8005254:	2b08      	cmp	r3, #8
 8005256:	d110      	bne.n	800527a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2208      	movs	r2, #8
 800525e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f838 	bl	80052d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2208      	movs	r2, #8
 800526a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e029      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69db      	ldr	r3, [r3, #28]
 8005280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005288:	d111      	bne.n	80052ae <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005292:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f000 f81e 	bl	80052d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e00f      	b.n	80052ce <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	69da      	ldr	r2, [r3, #28]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	4013      	ands	r3, r2
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	bf0c      	ite	eq
 80052be:	2301      	moveq	r3, #1
 80052c0:	2300      	movne	r3, #0
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	461a      	mov	r2, r3
 80052c6:	79fb      	ldrb	r3, [r7, #7]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d0a6      	beq.n	800521a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052d6:	b480      	push	{r7}
 80052d8:	b095      	sub	sp, #84	; 0x54
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052e6:	e853 3f00 	ldrex	r3, [r3]
 80052ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	461a      	mov	r2, r3
 80052fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fc:	643b      	str	r3, [r7, #64]	; 0x40
 80052fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005300:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005302:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005304:	e841 2300 	strex	r3, r2, [r1]
 8005308:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800530c:	2b00      	cmp	r3, #0
 800530e:	d1e6      	bne.n	80052de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3308      	adds	r3, #8
 8005316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	e853 3f00 	ldrex	r3, [r3]
 800531e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	f023 0301 	bic.w	r3, r3, #1
 8005326:	64bb      	str	r3, [r7, #72]	; 0x48
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3308      	adds	r3, #8
 800532e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005330:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005332:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005334:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005336:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005338:	e841 2300 	strex	r3, r2, [r1]
 800533c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1e5      	bne.n	8005310 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005348:	2b01      	cmp	r3, #1
 800534a:	d118      	bne.n	800537e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	e853 3f00 	ldrex	r3, [r3]
 8005358:	60bb      	str	r3, [r7, #8]
   return(result);
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	f023 0310 	bic.w	r3, r3, #16
 8005360:	647b      	str	r3, [r7, #68]	; 0x44
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	461a      	mov	r2, r3
 8005368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800536a:	61bb      	str	r3, [r7, #24]
 800536c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536e:	6979      	ldr	r1, [r7, #20]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	e841 2300 	strex	r3, r2, [r1]
 8005376:	613b      	str	r3, [r7, #16]
   return(result);
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d1e6      	bne.n	800534c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2220      	movs	r2, #32
 8005382:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005392:	bf00      	nop
 8005394:	3754      	adds	r7, #84	; 0x54
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800539e:	b084      	sub	sp, #16
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	f107 001c 	add.w	r0, r7, #28
 80053ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f001 fa1d 	bl	80067fc <USB_CoreReset>
 80053c2:	4603      	mov	r3, r0
 80053c4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80053c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d106      	bne.n	80053da <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38
 80053d8:	e005      	b.n	80053e6 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053f2:	b004      	add	sp, #16
 80053f4:	4770      	bx	lr
	...

080053f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b087      	sub	sp, #28
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	4613      	mov	r3, r2
 8005404:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d165      	bne.n	80054d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	4a3e      	ldr	r2, [pc, #248]	; (8005508 <USB_SetTurnaroundTime+0x110>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d906      	bls.n	8005422 <USB_SetTurnaroundTime+0x2a>
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4a3d      	ldr	r2, [pc, #244]	; (800550c <USB_SetTurnaroundTime+0x114>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d202      	bcs.n	8005422 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800541c:	230f      	movs	r3, #15
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	e05c      	b.n	80054dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	4a39      	ldr	r2, [pc, #228]	; (800550c <USB_SetTurnaroundTime+0x114>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d306      	bcc.n	8005438 <USB_SetTurnaroundTime+0x40>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4a38      	ldr	r2, [pc, #224]	; (8005510 <USB_SetTurnaroundTime+0x118>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d202      	bcs.n	8005438 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005432:	230e      	movs	r3, #14
 8005434:	617b      	str	r3, [r7, #20]
 8005436:	e051      	b.n	80054dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	4a35      	ldr	r2, [pc, #212]	; (8005510 <USB_SetTurnaroundTime+0x118>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d306      	bcc.n	800544e <USB_SetTurnaroundTime+0x56>
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4a34      	ldr	r2, [pc, #208]	; (8005514 <USB_SetTurnaroundTime+0x11c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d202      	bcs.n	800544e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005448:	230d      	movs	r3, #13
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e046      	b.n	80054dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	4a30      	ldr	r2, [pc, #192]	; (8005514 <USB_SetTurnaroundTime+0x11c>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d306      	bcc.n	8005464 <USB_SetTurnaroundTime+0x6c>
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4a2f      	ldr	r2, [pc, #188]	; (8005518 <USB_SetTurnaroundTime+0x120>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d802      	bhi.n	8005464 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800545e:	230c      	movs	r3, #12
 8005460:	617b      	str	r3, [r7, #20]
 8005462:	e03b      	b.n	80054dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4a2c      	ldr	r2, [pc, #176]	; (8005518 <USB_SetTurnaroundTime+0x120>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d906      	bls.n	800547a <USB_SetTurnaroundTime+0x82>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4a2b      	ldr	r2, [pc, #172]	; (800551c <USB_SetTurnaroundTime+0x124>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d802      	bhi.n	800547a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005474:	230b      	movs	r3, #11
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	e030      	b.n	80054dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	4a27      	ldr	r2, [pc, #156]	; (800551c <USB_SetTurnaroundTime+0x124>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d906      	bls.n	8005490 <USB_SetTurnaroundTime+0x98>
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4a26      	ldr	r2, [pc, #152]	; (8005520 <USB_SetTurnaroundTime+0x128>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d802      	bhi.n	8005490 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800548a:	230a      	movs	r3, #10
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	e025      	b.n	80054dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	4a23      	ldr	r2, [pc, #140]	; (8005520 <USB_SetTurnaroundTime+0x128>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d906      	bls.n	80054a6 <USB_SetTurnaroundTime+0xae>
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4a22      	ldr	r2, [pc, #136]	; (8005524 <USB_SetTurnaroundTime+0x12c>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d202      	bcs.n	80054a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80054a0:	2309      	movs	r3, #9
 80054a2:	617b      	str	r3, [r7, #20]
 80054a4:	e01a      	b.n	80054dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	4a1e      	ldr	r2, [pc, #120]	; (8005524 <USB_SetTurnaroundTime+0x12c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d306      	bcc.n	80054bc <USB_SetTurnaroundTime+0xc4>
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4a1d      	ldr	r2, [pc, #116]	; (8005528 <USB_SetTurnaroundTime+0x130>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d802      	bhi.n	80054bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80054b6:	2308      	movs	r3, #8
 80054b8:	617b      	str	r3, [r7, #20]
 80054ba:	e00f      	b.n	80054dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4a1a      	ldr	r2, [pc, #104]	; (8005528 <USB_SetTurnaroundTime+0x130>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d906      	bls.n	80054d2 <USB_SetTurnaroundTime+0xda>
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4a19      	ldr	r2, [pc, #100]	; (800552c <USB_SetTurnaroundTime+0x134>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d202      	bcs.n	80054d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054cc:	2307      	movs	r3, #7
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	e004      	b.n	80054dc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80054d2:	2306      	movs	r3, #6
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	e001      	b.n	80054dc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80054d8:	2309      	movs	r3, #9
 80054da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	68da      	ldr	r2, [r3, #12]
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	029b      	lsls	r3, r3, #10
 80054f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80054f4:	431a      	orrs	r2, r3
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	371c      	adds	r7, #28
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	00d8acbf 	.word	0x00d8acbf
 800550c:	00e4e1c0 	.word	0x00e4e1c0
 8005510:	00f42400 	.word	0x00f42400
 8005514:	01067380 	.word	0x01067380
 8005518:	011a499f 	.word	0x011a499f
 800551c:	01312cff 	.word	0x01312cff
 8005520:	014ca43f 	.word	0x014ca43f
 8005524:	016e3600 	.word	0x016e3600
 8005528:	01a6ab1f 	.word	0x01a6ab1f
 800552c:	01e84800 	.word	0x01e84800

08005530 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f043 0201 	orr.w	r2, r3, #1
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f023 0201 	bic.w	r2, r3, #1
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005566:	2300      	movs	r3, #0
}
 8005568:	4618      	mov	r0, r3
 800556a:	370c      	adds	r7, #12
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
 800557c:	460b      	mov	r3, r1
 800557e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d115      	bne.n	80055c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055a2:	2001      	movs	r0, #1
 80055a4:	f7fb fe48 	bl	8001238 <HAL_Delay>
      ms++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3301      	adds	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f001 f8ab 	bl	800670a <USB_GetMode>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d01e      	beq.n	80055f8 <USB_SetCurrentMode+0x84>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b31      	cmp	r3, #49	; 0x31
 80055be:	d9f0      	bls.n	80055a2 <USB_SetCurrentMode+0x2e>
 80055c0:	e01a      	b.n	80055f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055c2:	78fb      	ldrb	r3, [r7, #3]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d115      	bne.n	80055f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	68db      	ldr	r3, [r3, #12]
 80055cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055d4:	2001      	movs	r0, #1
 80055d6:	f7fb fe2f 	bl	8001238 <HAL_Delay>
      ms++;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3301      	adds	r3, #1
 80055de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f001 f892 	bl	800670a <USB_GetMode>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d005      	beq.n	80055f8 <USB_SetCurrentMode+0x84>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2b31      	cmp	r3, #49	; 0x31
 80055f0:	d9f0      	bls.n	80055d4 <USB_SetCurrentMode+0x60>
 80055f2:	e001      	b.n	80055f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e005      	b.n	8005604 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b32      	cmp	r3, #50	; 0x32
 80055fc:	d101      	bne.n	8005602 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800560c:	b084      	sub	sp, #16
 800560e:	b580      	push	{r7, lr}
 8005610:	b086      	sub	sp, #24
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800561a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005626:	2300      	movs	r3, #0
 8005628:	613b      	str	r3, [r7, #16]
 800562a:	e009      	b.n	8005640 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	3340      	adds	r3, #64	; 0x40
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	2200      	movs	r2, #0
 8005638:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	3301      	adds	r3, #1
 800563e:	613b      	str	r3, [r7, #16]
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	2b0e      	cmp	r3, #14
 8005644:	d9f2      	bls.n	800562c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005646:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005648:	2b00      	cmp	r3, #0
 800564a:	d11c      	bne.n	8005686 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800565a:	f043 0302 	orr.w	r3, r3, #2
 800565e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005664:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	e005      	b.n	8005692 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800568a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005698:	461a      	mov	r2, r3
 800569a:	2300      	movs	r3, #0
 800569c:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800569e:	2103      	movs	r1, #3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 f959 	bl	8005958 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80056a6:	2110      	movs	r1, #16
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f8f1 	bl	8005890 <USB_FlushTxFifo>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d001      	beq.n	80056b8 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f91d 	bl	80058f8 <USB_FlushRxFifo>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ce:	461a      	mov	r2, r3
 80056d0:	2300      	movs	r3, #0
 80056d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056da:	461a      	mov	r2, r3
 80056dc:	2300      	movs	r3, #0
 80056de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056e6:	461a      	mov	r2, r3
 80056e8:	2300      	movs	r3, #0
 80056ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056ec:	2300      	movs	r3, #0
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	e043      	b.n	800577a <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005708:	d118      	bne.n	800573c <USB_DevInit+0x130>
    {
      if (i == 0U)
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571c:	461a      	mov	r2, r3
 800571e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005722:	6013      	str	r3, [r2, #0]
 8005724:	e013      	b.n	800574e <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005732:	461a      	mov	r2, r3
 8005734:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	e008      	b.n	800574e <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	461a      	mov	r2, r3
 800574a:	2300      	movs	r3, #0
 800574c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	015a      	lsls	r2, r3, #5
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4413      	add	r3, r2
 8005756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800575a:	461a      	mov	r2, r3
 800575c:	2300      	movs	r3, #0
 800575e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	015a      	lsls	r2, r3, #5
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4413      	add	r3, r2
 8005768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800576c:	461a      	mov	r2, r3
 800576e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005772:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	3301      	adds	r3, #1
 8005778:	613b      	str	r3, [r7, #16]
 800577a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	429a      	cmp	r2, r3
 8005780:	d3b7      	bcc.n	80056f2 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005782:	2300      	movs	r3, #0
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	e043      	b.n	8005810 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	015a      	lsls	r2, r3, #5
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4413      	add	r3, r2
 8005790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800579a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800579e:	d118      	bne.n	80057d2 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d10a      	bne.n	80057bc <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	015a      	lsls	r2, r3, #5
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	4413      	add	r3, r2
 80057ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b2:	461a      	mov	r2, r3
 80057b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80057b8:	6013      	str	r3, [r2, #0]
 80057ba:	e013      	b.n	80057e4 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	015a      	lsls	r2, r3, #5
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	4413      	add	r3, r2
 80057c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c8:	461a      	mov	r2, r3
 80057ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057ce:	6013      	str	r3, [r2, #0]
 80057d0:	e008      	b.n	80057e4 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057de:	461a      	mov	r2, r3
 80057e0:	2300      	movs	r3, #0
 80057e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057f0:	461a      	mov	r2, r3
 80057f2:	2300      	movs	r3, #0
 80057f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005802:	461a      	mov	r2, r3
 8005804:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005808:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	3301      	adds	r3, #1
 800580e:	613b      	str	r3, [r7, #16]
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	693a      	ldr	r2, [r7, #16]
 8005814:	429a      	cmp	r2, r3
 8005816:	d3b7      	bcc.n	8005788 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005826:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800582a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005838:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	f043 0210 	orr.w	r2, r3, #16
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699a      	ldr	r2, [r3, #24]
 800584a:	4b10      	ldr	r3, [pc, #64]	; (800588c <USB_DevInit+0x280>)
 800584c:	4313      	orrs	r3, r2
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005854:	2b00      	cmp	r3, #0
 8005856:	d005      	beq.n	8005864 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	f043 0208 	orr.w	r2, r3, #8
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005866:	2b01      	cmp	r3, #1
 8005868:	d107      	bne.n	800587a <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005872:	f043 0304 	orr.w	r3, r3, #4
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800587a:	7dfb      	ldrb	r3, [r7, #23]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005886:	b004      	add	sp, #16
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	803c3800 	.word	0x803c3800

08005890 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800589a:	2300      	movs	r3, #0
 800589c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3301      	adds	r3, #1
 80058a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	4a13      	ldr	r2, [pc, #76]	; (80058f4 <USB_FlushTxFifo+0x64>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d901      	bls.n	80058b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e01b      	b.n	80058e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	daf2      	bge.n	800589e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	019b      	lsls	r3, r3, #6
 80058c0:	f043 0220 	orr.w	r2, r3, #32
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3301      	adds	r3, #1
 80058cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	4a08      	ldr	r2, [pc, #32]	; (80058f4 <USB_FlushTxFifo+0x64>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d901      	bls.n	80058da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e006      	b.n	80058e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f003 0320 	and.w	r3, r3, #32
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d0f0      	beq.n	80058c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	00030d40 	.word	0x00030d40

080058f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3301      	adds	r3, #1
 8005908:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4a11      	ldr	r2, [pc, #68]	; (8005954 <USB_FlushRxFifo+0x5c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d901      	bls.n	8005916 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e018      	b.n	8005948 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	daf2      	bge.n	8005904 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2210      	movs	r2, #16
 8005926:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3301      	adds	r3, #1
 800592c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4a08      	ldr	r2, [pc, #32]	; (8005954 <USB_FlushRxFifo+0x5c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d901      	bls.n	800593a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e006      	b.n	8005948 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f003 0310 	and.w	r3, r3, #16
 8005942:	2b10      	cmp	r3, #16
 8005944:	d0f0      	beq.n	8005928 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005946:	2300      	movs	r3, #0
}
 8005948:	4618      	mov	r0, r3
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	00030d40 	.word	0x00030d40

08005958 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
 8005960:	460b      	mov	r3, r1
 8005962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	78fb      	ldrb	r3, [r7, #3]
 8005972:	68f9      	ldr	r1, [r7, #12]
 8005974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005978:	4313      	orrs	r3, r2
 800597a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800598a:	b480      	push	{r7}
 800598c:	b087      	sub	sp, #28
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f003 0306 	and.w	r3, r3, #6
 80059a2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2b02      	cmp	r3, #2
 80059a8:	d002      	beq.n	80059b0 <USB_GetDevSpeed+0x26>
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b06      	cmp	r3, #6
 80059ae:	d102      	bne.n	80059b6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80059b0:	2302      	movs	r3, #2
 80059b2:	75fb      	strb	r3, [r7, #23]
 80059b4:	e001      	b.n	80059ba <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80059b6:	230f      	movs	r3, #15
 80059b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80059ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	371c      	adds	r7, #28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	785b      	ldrb	r3, [r3, #1]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d13a      	bne.n	8005a5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ea:	69da      	ldr	r2, [r3, #28]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	2101      	movs	r1, #1
 80059f6:	fa01 f303 	lsl.w	r3, r1, r3
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	68f9      	ldr	r1, [r7, #12]
 80059fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a02:	4313      	orrs	r3, r2
 8005a04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	015a      	lsls	r2, r3, #5
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d155      	bne.n	8005ac8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	791b      	ldrb	r3, [r3, #4]
 8005a36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	059b      	lsls	r3, r3, #22
 8005a3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a40:	4313      	orrs	r3, r2
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	0151      	lsls	r1, r2, #5
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	440a      	add	r2, r1
 8005a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	e036      	b.n	8005ac8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a60:	69da      	ldr	r2, [r3, #28]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	f003 030f 	and.w	r3, r3, #15
 8005a6a:	2101      	movs	r1, #1
 8005a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a70:	041b      	lsls	r3, r3, #16
 8005a72:	68f9      	ldr	r1, [r7, #12]
 8005a74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d11a      	bne.n	8005ac8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	791b      	ldrb	r3, [r3, #4]
 8005aac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005aae:	430b      	orrs	r3, r1
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	0151      	lsls	r1, r2, #5
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	440a      	add	r2, r1
 8005aba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ac6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
	...

08005ad8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	785b      	ldrb	r3, [r3, #1]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d161      	bne.n	8005bb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	015a      	lsls	r2, r3, #5
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b0a:	d11f      	bne.n	8005b4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	0151      	lsls	r1, r2, #5
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	440a      	add	r2, r1
 8005b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	43db      	mvns	r3, r3
 8005b66:	68f9      	ldr	r1, [r7, #12]
 8005b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b76:	69da      	ldr	r2, [r3, #28]
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	f003 030f 	and.w	r3, r3, #15
 8005b80:	2101      	movs	r1, #1
 8005b82:	fa01 f303 	lsl.w	r3, r1, r3
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	43db      	mvns	r3, r3
 8005b8a:	68f9      	ldr	r1, [r7, #12]
 8005b8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b90:	4013      	ands	r3, r2
 8005b92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	0159      	lsls	r1, r3, #5
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	440b      	add	r3, r1
 8005baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bae:	4619      	mov	r1, r3
 8005bb0:	4b35      	ldr	r3, [pc, #212]	; (8005c88 <USB_DeactivateEndpoint+0x1b0>)
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	600b      	str	r3, [r1, #0]
 8005bb6:	e060      	b.n	8005c7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bce:	d11f      	bne.n	8005c10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	0151      	lsls	r1, r2, #5
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	440a      	add	r2, r1
 8005be6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68ba      	ldr	r2, [r7, #8]
 8005c00:	0151      	lsls	r1, r2, #5
 8005c02:	68fa      	ldr	r2, [r7, #12]
 8005c04:	440a      	add	r2, r1
 8005c06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	2101      	movs	r1, #1
 8005c22:	fa01 f303 	lsl.w	r3, r1, r3
 8005c26:	041b      	lsls	r3, r3, #16
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	68f9      	ldr	r1, [r7, #12]
 8005c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c30:	4013      	ands	r3, r2
 8005c32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c3a:	69da      	ldr	r2, [r3, #28]
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	2101      	movs	r1, #1
 8005c46:	fa01 f303 	lsl.w	r3, r1, r3
 8005c4a:	041b      	lsls	r3, r3, #16
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	68f9      	ldr	r1, [r7, #12]
 8005c50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c54:	4013      	ands	r3, r2
 8005c56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	0159      	lsls	r1, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	440b      	add	r3, r1
 8005c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c72:	4619      	mov	r1, r3
 8005c74:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <USB_DeactivateEndpoint+0x1b4>)
 8005c76:	4013      	ands	r3, r2
 8005c78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c7a:	2300      	movs	r3, #0
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	3714      	adds	r7, #20
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	ec337800 	.word	0xec337800
 8005c8c:	eff37800 	.word	0xeff37800

08005c90 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	785b      	ldrb	r3, [r3, #1]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	f040 8128 	bne.w	8005efe <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d132      	bne.n	8005d1c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	015a      	lsls	r2, r3, #5
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce6:	691b      	ldr	r3, [r3, #16]
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	0151      	lsls	r1, r2, #5
 8005cec:	697a      	ldr	r2, [r7, #20]
 8005cee:	440a      	add	r2, r1
 8005cf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cf8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	015a      	lsls	r2, r3, #5
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	4413      	add	r3, r2
 8005d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	0151      	lsls	r1, r2, #5
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	440a      	add	r2, r1
 8005d10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d14:	0cdb      	lsrs	r3, r3, #19
 8005d16:	04db      	lsls	r3, r3, #19
 8005d18:	6113      	str	r3, [r2, #16]
 8005d1a:	e092      	b.n	8005e42 <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	015a      	lsls	r2, r3, #5
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	4413      	add	r3, r2
 8005d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	0151      	lsls	r1, r2, #5
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	440a      	add	r2, r1
 8005d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d36:	0cdb      	lsrs	r3, r3, #19
 8005d38:	04db      	lsls	r3, r3, #19
 8005d3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	693a      	ldr	r2, [r7, #16]
 8005d4c:	0151      	lsls	r1, r2, #5
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	440a      	add	r2, r1
 8005d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d5e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d11a      	bne.n	8005d9c <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	691a      	ldr	r2, [r3, #16]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d903      	bls.n	8005d7a <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	689a      	ldr	r2, [r3, #8]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d98:	6113      	str	r3, [r2, #16]
 8005d9a:	e01b      	b.n	8005dd4 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	6919      	ldr	r1, [r3, #16]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	440b      	add	r3, r1
 8005db4:	1e59      	subs	r1, r3, #1
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8005dbe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005dc0:	4b8d      	ldr	r3, [pc, #564]	; (8005ff8 <USB_EPStartXfer+0x368>)
 8005dc2:	400b      	ands	r3, r1
 8005dc4:	6939      	ldr	r1, [r7, #16]
 8005dc6:	0148      	lsls	r0, r1, #5
 8005dc8:	6979      	ldr	r1, [r7, #20]
 8005dca:	4401      	add	r1, r0
 8005dcc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de0:	691a      	ldr	r2, [r3, #16]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dea:	6939      	ldr	r1, [r7, #16]
 8005dec:	0148      	lsls	r0, r1, #5
 8005dee:	6979      	ldr	r1, [r7, #20]
 8005df0:	4401      	add	r1, r0
 8005df2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005df6:	4313      	orrs	r3, r2
 8005df8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	791b      	ldrb	r3, [r3, #4]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d11f      	bne.n	8005e42 <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	0151      	lsls	r1, r2, #5
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	440a      	add	r2, r1
 8005e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005e20:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	0151      	lsls	r1, r2, #5
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	440a      	add	r2, r1
 8005e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e40:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	015a      	lsls	r2, r3, #5
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	0151      	lsls	r1, r2, #5
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	440a      	add	r2, r1
 8005e58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e60:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	791b      	ldrb	r3, [r3, #4]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d015      	beq.n	8005e96 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f000 8139 	beq.w	80060e6 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	f003 030f 	and.w	r3, r3, #15
 8005e84:	2101      	movs	r1, #1
 8005e86:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8a:	6979      	ldr	r1, [r7, #20]
 8005e8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e90:	4313      	orrs	r3, r2
 8005e92:	634b      	str	r3, [r1, #52]	; 0x34
 8005e94:	e127      	b.n	80060e6 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d110      	bne.n	8005ec8 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ec0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ec4:	6013      	str	r3, [r2, #0]
 8005ec6:	e00f      	b.n	8005ee8 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	0151      	lsls	r1, r2, #5
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	440a      	add	r2, r1
 8005ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	68d9      	ldr	r1, [r3, #12]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	781a      	ldrb	r2, [r3, #0]
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f9a6 	bl	8006248 <USB_WritePacket>
 8005efc:	e0f3      	b.n	80060e6 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	0151      	lsls	r1, r2, #5
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	440a      	add	r2, r1
 8005f14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f18:	0cdb      	lsrs	r3, r3, #19
 8005f1a:	04db      	lsls	r3, r3, #19
 8005f1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	0151      	lsls	r1, r2, #5
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	440a      	add	r2, r1
 8005f34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f38:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f3c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f40:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d12f      	bne.n	8005fa8 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d003      	beq.n	8005f58 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	689a      	ldr	r2, [r3, #8]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6c:	691a      	ldr	r2, [r3, #16]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f76:	6939      	ldr	r1, [r7, #16]
 8005f78:	0148      	lsls	r0, r1, #5
 8005f7a:	6979      	ldr	r1, [r7, #20]
 8005f7c:	4401      	add	r1, r0
 8005f7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f82:	4313      	orrs	r3, r2
 8005f84:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	015a      	lsls	r2, r3, #5
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	0151      	lsls	r1, r2, #5
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	440a      	add	r2, r1
 8005f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fa4:	6113      	str	r3, [r2, #16]
 8005fa6:	e061      	b.n	800606c <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d125      	bne.n	8005ffc <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	015a      	lsls	r2, r3, #5
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbc:	691a      	ldr	r2, [r3, #16]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	689b      	ldr	r3, [r3, #8]
 8005fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc6:	6939      	ldr	r1, [r7, #16]
 8005fc8:	0148      	lsls	r0, r1, #5
 8005fca:	6979      	ldr	r1, [r7, #20]
 8005fcc:	4401      	add	r1, r0
 8005fce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005ff4:	6113      	str	r3, [r2, #16]
 8005ff6:	e039      	b.n	800606c <USB_EPStartXfer+0x3dc>
 8005ff8:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	691a      	ldr	r2, [r3, #16]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	4413      	add	r3, r2
 8006006:	1e5a      	subs	r2, r3, #1
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006010:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	89fa      	ldrh	r2, [r7, #14]
 8006018:	fb03 f202 	mul.w	r2, r3, r2
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602c:	691a      	ldr	r2, [r3, #16]
 800602e:	89fb      	ldrh	r3, [r7, #14]
 8006030:	04d9      	lsls	r1, r3, #19
 8006032:	4b2f      	ldr	r3, [pc, #188]	; (80060f0 <USB_EPStartXfer+0x460>)
 8006034:	400b      	ands	r3, r1
 8006036:	6939      	ldr	r1, [r7, #16]
 8006038:	0148      	lsls	r0, r1, #5
 800603a:	6979      	ldr	r1, [r7, #20]
 800603c:	4401      	add	r1, r0
 800603e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006042:	4313      	orrs	r3, r2
 8006044:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	4413      	add	r3, r2
 800604e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	6a1b      	ldr	r3, [r3, #32]
 8006058:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800605c:	6939      	ldr	r1, [r7, #16]
 800605e:	0148      	lsls	r0, r1, #5
 8006060:	6979      	ldr	r1, [r7, #20]
 8006062:	4401      	add	r1, r0
 8006064:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006068:	4313      	orrs	r3, r2
 800606a:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	791b      	ldrb	r3, [r3, #4]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d128      	bne.n	80060c6 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006080:	2b00      	cmp	r3, #0
 8006082:	d110      	bne.n	80060a6 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	015a      	lsls	r2, r3, #5
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	4413      	add	r3, r2
 800608c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	693a      	ldr	r2, [r7, #16]
 8006094:	0151      	lsls	r1, r2, #5
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	440a      	add	r2, r1
 800609a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80060a2:	6013      	str	r3, [r2, #0]
 80060a4:	e00f      	b.n	80060c6 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	015a      	lsls	r2, r3, #5
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	4413      	add	r3, r2
 80060ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	693a      	ldr	r2, [r7, #16]
 80060b6:	0151      	lsls	r1, r2, #5
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	440a      	add	r2, r1
 80060bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060c4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	015a      	lsls	r2, r3, #5
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	4413      	add	r3, r2
 80060ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	0151      	lsls	r1, r2, #5
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	440a      	add	r2, r1
 80060dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060e6:	2300      	movs	r3, #0
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3718      	adds	r7, #24
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	1ff80000 	.word	0x1ff80000

080060f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b087      	sub	sp, #28
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	785b      	ldrb	r3, [r3, #1]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d14a      	bne.n	80061a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	015a      	lsls	r2, r3, #5
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	4413      	add	r3, r2
 800611c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006126:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800612a:	f040 8086 	bne.w	800623a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	7812      	ldrb	r2, [r2, #0]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006150:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	7812      	ldrb	r2, [r2, #0]
 8006166:	0151      	lsls	r1, r2, #5
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	440a      	add	r2, r1
 800616c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006170:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006174:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	3301      	adds	r3, #1
 800617a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006182:	4293      	cmp	r3, r2
 8006184:	d902      	bls.n	800618c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	75fb      	strb	r3, [r7, #23]
          break;
 800618a:	e056      	b.n	800623a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	015a      	lsls	r2, r3, #5
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	4413      	add	r3, r2
 8006196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061a4:	d0e7      	beq.n	8006176 <USB_EPStopXfer+0x82>
 80061a6:	e048      	b.n	800623a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	015a      	lsls	r2, r3, #5
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	4413      	add	r3, r2
 80061b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061c0:	d13b      	bne.n	800623a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	7812      	ldrb	r2, [r2, #0]
 80061d6:	0151      	lsls	r1, r2, #5
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	440a      	add	r2, r1
 80061dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	781b      	ldrb	r3, [r3, #0]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	7812      	ldrb	r2, [r2, #0]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006204:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006208:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3301      	adds	r3, #1
 800620e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f242 7210 	movw	r2, #10000	; 0x2710
 8006216:	4293      	cmp	r3, r2
 8006218:	d902      	bls.n	8006220 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800621a:	2301      	movs	r3, #1
 800621c:	75fb      	strb	r3, [r7, #23]
          break;
 800621e:	e00c      	b.n	800623a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	4413      	add	r3, r2
 800622a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006234:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006238:	d0e7      	beq.n	800620a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800623a:	7dfb      	ldrb	r3, [r7, #23]
}
 800623c:	4618      	mov	r0, r3
 800623e:	371c      	adds	r7, #28
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr

08006248 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006248:	b480      	push	{r7}
 800624a:	b089      	sub	sp, #36	; 0x24
 800624c:	af00      	add	r7, sp, #0
 800624e:	60f8      	str	r0, [r7, #12]
 8006250:	60b9      	str	r1, [r7, #8]
 8006252:	4611      	mov	r1, r2
 8006254:	461a      	mov	r2, r3
 8006256:	460b      	mov	r3, r1
 8006258:	71fb      	strb	r3, [r7, #7]
 800625a:	4613      	mov	r3, r2
 800625c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006266:	88bb      	ldrh	r3, [r7, #4]
 8006268:	3303      	adds	r3, #3
 800626a:	089b      	lsrs	r3, r3, #2
 800626c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800626e:	2300      	movs	r3, #0
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	e018      	b.n	80062a6 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006274:	79fb      	ldrb	r3, [r7, #7]
 8006276:	031a      	lsls	r2, r3, #12
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	4413      	add	r3, r2
 800627c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006280:	461a      	mov	r2, r3
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	3301      	adds	r3, #1
 800628c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	3301      	adds	r3, #1
 8006292:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	3301      	adds	r3, #1
 8006298:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	3301      	adds	r3, #1
 800629e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	3301      	adds	r3, #1
 80062a4:	61bb      	str	r3, [r7, #24]
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d3e2      	bcc.n	8006274 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3724      	adds	r7, #36	; 0x24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80062bc:	b480      	push	{r7}
 80062be:	b08b      	sub	sp, #44	; 0x2c
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	4613      	mov	r3, r2
 80062c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062d2:	88fb      	ldrh	r3, [r7, #6]
 80062d4:	089b      	lsrs	r3, r3, #2
 80062d6:	b29b      	uxth	r3, r3
 80062d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062da:	88fb      	ldrh	r3, [r7, #6]
 80062dc:	f003 0303 	and.w	r3, r3, #3
 80062e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062e2:	2300      	movs	r3, #0
 80062e4:	623b      	str	r3, [r7, #32]
 80062e6:	e014      	b.n	8006312 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	3301      	adds	r3, #1
 80062f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	3301      	adds	r3, #1
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006302:	3301      	adds	r3, #1
 8006304:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	3301      	adds	r3, #1
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800630c:	6a3b      	ldr	r3, [r7, #32]
 800630e:	3301      	adds	r3, #1
 8006310:	623b      	str	r3, [r7, #32]
 8006312:	6a3a      	ldr	r2, [r7, #32]
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	429a      	cmp	r2, r3
 8006318:	d3e6      	bcc.n	80062e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800631a:	8bfb      	ldrh	r3, [r7, #30]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01e      	beq.n	800635e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800632a:	461a      	mov	r2, r3
 800632c:	f107 0310 	add.w	r3, r7, #16
 8006330:	6812      	ldr	r2, [r2, #0]
 8006332:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	b2db      	uxtb	r3, r3
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	fa22 f303 	lsr.w	r3, r2, r3
 8006340:	b2da      	uxtb	r2, r3
 8006342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006344:	701a      	strb	r2, [r3, #0]
      i++;
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	3301      	adds	r3, #1
 800634a:	623b      	str	r3, [r7, #32]
      pDest++;
 800634c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634e:	3301      	adds	r3, #1
 8006350:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006352:	8bfb      	ldrh	r3, [r7, #30]
 8006354:	3b01      	subs	r3, #1
 8006356:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006358:	8bfb      	ldrh	r3, [r7, #30]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1ea      	bne.n	8006334 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006360:	4618      	mov	r0, r3
 8006362:	372c      	adds	r7, #44	; 0x2c
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr

0800636c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	785b      	ldrb	r3, [r3, #1]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d12c      	bne.n	80063e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	db12      	blt.n	80063c0 <USB_EPSetStall+0x54>
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00f      	beq.n	80063c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	0151      	lsls	r1, r2, #5
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	440a      	add	r2, r1
 80063b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	68ba      	ldr	r2, [r7, #8]
 80063d0:	0151      	lsls	r1, r2, #5
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	440a      	add	r2, r1
 80063d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063de:	6013      	str	r3, [r2, #0]
 80063e0:	e02b      	b.n	800643a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	015a      	lsls	r2, r3, #5
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4413      	add	r3, r2
 80063ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	db12      	blt.n	800641a <USB_EPSetStall+0xae>
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00f      	beq.n	800641a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	0151      	lsls	r1, r2, #5
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	440a      	add	r2, r1
 8006410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006414:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006418:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68ba      	ldr	r2, [r7, #8]
 800642a:	0151      	lsls	r1, r2, #5
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	440a      	add	r2, r1
 8006430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006434:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006438:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800643a:	2300      	movs	r3, #0
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	785b      	ldrb	r3, [r3, #1]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d128      	bne.n	80064b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	0151      	lsls	r1, r2, #5
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	440a      	add	r2, r1
 800647a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800647e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006482:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	791b      	ldrb	r3, [r3, #4]
 8006488:	2b03      	cmp	r3, #3
 800648a:	d003      	beq.n	8006494 <USB_EPClearStall+0x4c>
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	791b      	ldrb	r3, [r3, #4]
 8006490:	2b02      	cmp	r3, #2
 8006492:	d138      	bne.n	8006506 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	015a      	lsls	r2, r3, #5
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	0151      	lsls	r1, r2, #5
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	440a      	add	r2, r1
 80064aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	e027      	b.n	8006506 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	0151      	lsls	r1, r2, #5
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	440a      	add	r2, r1
 80064cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	791b      	ldrb	r3, [r3, #4]
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d003      	beq.n	80064e6 <USB_EPClearStall+0x9e>
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	791b      	ldrb	r3, [r3, #4]
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d10f      	bne.n	8006506 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	0151      	lsls	r1, r2, #5
 80064f8:	68fa      	ldr	r2, [r7, #12]
 80064fa:	440a      	add	r2, r1
 80064fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006504:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	460b      	mov	r3, r1
 800651e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006532:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006536:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	78fb      	ldrb	r3, [r7, #3]
 8006542:	011b      	lsls	r3, r3, #4
 8006544:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006548:	68f9      	ldr	r1, [r7, #12]
 800654a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800654e:	4313      	orrs	r3, r2
 8006550:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3714      	adds	r7, #20
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800657a:	f023 0303 	bic.w	r3, r3, #3
 800657e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	68fa      	ldr	r2, [r7, #12]
 800658a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800658e:	f023 0302 	bic.w	r3, r3, #2
 8006592:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr

080065a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80065a2:	b480      	push	{r7}
 80065a4:	b085      	sub	sp, #20
 80065a6:	af00      	add	r7, sp, #0
 80065a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80065bc:	f023 0303 	bic.w	r3, r3, #3
 80065c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	68fa      	ldr	r2, [r7, #12]
 80065cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065d0:	f043 0302 	orr.w	r3, r3, #2
 80065d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3714      	adds	r7, #20
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b085      	sub	sp, #20
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	695b      	ldr	r3, [r3, #20]
 80065f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	699b      	ldr	r3, [r3, #24]
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	4013      	ands	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065fc:	68fb      	ldr	r3, [r7, #12]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800660a:	b480      	push	{r7}
 800660c:	b085      	sub	sp, #20
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	4013      	ands	r3, r2
 800662c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	0c1b      	lsrs	r3, r3, #16
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800663e:	b480      	push	{r7}
 8006640:	b085      	sub	sp, #20
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800665a:	69db      	ldr	r3, [r3, #28]
 800665c:	68ba      	ldr	r2, [r7, #8]
 800665e:	4013      	ands	r3, r2
 8006660:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	b29b      	uxth	r3, r3
}
 8006666:	4618      	mov	r0, r3
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006672:	b480      	push	{r7}
 8006674:	b085      	sub	sp, #20
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	460b      	mov	r3, r1
 800667c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006698:	695b      	ldr	r3, [r3, #20]
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	4013      	ands	r3, r2
 800669e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066a0:	68bb      	ldr	r3, [r7, #8]
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b087      	sub	sp, #28
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
 80066b6:	460b      	mov	r3, r1
 80066b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066d2:	78fb      	ldrb	r3, [r7, #3]
 80066d4:	f003 030f 	and.w	r3, r3, #15
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	fa22 f303 	lsr.w	r3, r2, r3
 80066de:	01db      	lsls	r3, r3, #7
 80066e0:	b2db      	uxtb	r3, r3
 80066e2:	693a      	ldr	r2, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066e8:	78fb      	ldrb	r3, [r7, #3]
 80066ea:	015a      	lsls	r2, r3, #5
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	4413      	add	r3, r2
 80066f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f4:	689b      	ldr	r3, [r3, #8]
 80066f6:	693a      	ldr	r2, [r7, #16]
 80066f8:	4013      	ands	r3, r2
 80066fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066fc:	68bb      	ldr	r3, [r7, #8]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	371c      	adds	r7, #28
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	f003 0301 	and.w	r3, r3, #1
}
 800671a:	4618      	mov	r0, r3
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006726:	b480      	push	{r7}
 8006728:	b085      	sub	sp, #20
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006740:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006744:	f023 0307 	bic.w	r3, r3, #7
 8006748:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800675c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800675e:	2300      	movs	r3, #0
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr

0800676c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800676c:	b480      	push	{r7}
 800676e:	b085      	sub	sp, #20
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
 8006774:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	333c      	adds	r3, #60	; 0x3c
 800677e:	3304      	adds	r3, #4
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4a1c      	ldr	r2, [pc, #112]	; (80067f8 <USB_EP0_OutStart+0x8c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d90a      	bls.n	80067a2 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800679c:	d101      	bne.n	80067a2 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800679e:	2300      	movs	r3, #0
 80067a0:	e024      	b.n	80067ec <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a8:	461a      	mov	r2, r3
 80067aa:	2300      	movs	r3, #0
 80067ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067d0:	f043 0318 	orr.w	r3, r3, #24
 80067d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	68fa      	ldr	r2, [r7, #12]
 80067e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067e4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80067e8:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80067ea:	2300      	movs	r3, #0
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3714      	adds	r7, #20
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	4f54300a 	.word	0x4f54300a

080067fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006804:	2300      	movs	r3, #0
 8006806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3301      	adds	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	4a13      	ldr	r2, [pc, #76]	; (8006860 <USB_CoreReset+0x64>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d901      	bls.n	800681a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e01b      	b.n	8006852 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	2b00      	cmp	r3, #0
 8006820:	daf2      	bge.n	8006808 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	f043 0201 	orr.w	r2, r3, #1
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	3301      	adds	r3, #1
 8006836:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	4a09      	ldr	r2, [pc, #36]	; (8006860 <USB_CoreReset+0x64>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d901      	bls.n	8006844 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e006      	b.n	8006852 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b01      	cmp	r3, #1
 800684e:	d0f0      	beq.n	8006832 <USB_CoreReset+0x36>

  return HAL_OK;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	00030d40 	.word	0x00030d40

08006864 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006870:	201c      	movs	r0, #28
 8006872:	f002 fc8b 	bl	800918c <USBD_static_malloc>
 8006876:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d109      	bne.n	8006892 <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	32b0      	adds	r2, #176	; 0xb0
 8006888:	2100      	movs	r1, #0
 800688a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800688e:	2302      	movs	r3, #2
 8006890:	e08a      	b.n	80069a8 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	32b0      	adds	r2, #176	; 0xb0
 800689c:	68f9      	ldr	r1, [r7, #12]
 800689e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	32b0      	adds	r2, #176	; 0xb0
 80068ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	7c1b      	ldrb	r3, [r3, #16]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d11b      	bne.n	80068f6 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80068be:	4b3c      	ldr	r3, [pc, #240]	; (80069b0 <USBD_CUSTOM_HID_Init+0x14c>)
 80068c0:	781b      	ldrb	r3, [r3, #0]
 80068c2:	f003 020f 	and.w	r2, r3, #15
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	4613      	mov	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	440b      	add	r3, r1
 80068d2:	3326      	adds	r3, #38	; 0x26
 80068d4:	2205      	movs	r2, #5
 80068d6:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80068d8:	4b36      	ldr	r3, [pc, #216]	; (80069b4 <USBD_CUSTOM_HID_Init+0x150>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	f003 020f 	and.w	r2, r3, #15
 80068e0:	6879      	ldr	r1, [r7, #4]
 80068e2:	4613      	mov	r3, r2
 80068e4:	009b      	lsls	r3, r3, #2
 80068e6:	4413      	add	r3, r2
 80068e8:	009b      	lsls	r3, r3, #2
 80068ea:	440b      	add	r3, r1
 80068ec:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80068f0:	2205      	movs	r2, #5
 80068f2:	801a      	strh	r2, [r3, #0]
 80068f4:	e01a      	b.n	800692c <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80068f6:	4b2e      	ldr	r3, [pc, #184]	; (80069b0 <USBD_CUSTOM_HID_Init+0x14c>)
 80068f8:	781b      	ldrb	r3, [r3, #0]
 80068fa:	f003 020f 	and.w	r2, r3, #15
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	009b      	lsls	r3, r3, #2
 8006908:	440b      	add	r3, r1
 800690a:	3326      	adds	r3, #38	; 0x26
 800690c:	2205      	movs	r2, #5
 800690e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006910:	4b28      	ldr	r3, [pc, #160]	; (80069b4 <USBD_CUSTOM_HID_Init+0x150>)
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	f003 020f 	and.w	r2, r3, #15
 8006918:	6879      	ldr	r1, [r7, #4]
 800691a:	4613      	mov	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	009b      	lsls	r3, r3, #2
 8006922:	440b      	add	r3, r1
 8006924:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006928:	2205      	movs	r2, #5
 800692a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 800692c:	4b20      	ldr	r3, [pc, #128]	; (80069b0 <USBD_CUSTOM_HID_Init+0x14c>)
 800692e:	7819      	ldrb	r1, [r3, #0]
 8006930:	2302      	movs	r3, #2
 8006932:	2203      	movs	r2, #3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f002 fa29 	bl	8008d8c <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 800693a:	4b1d      	ldr	r3, [pc, #116]	; (80069b0 <USBD_CUSTOM_HID_Init+0x14c>)
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	f003 020f 	and.w	r2, r3, #15
 8006942:	6879      	ldr	r1, [r7, #4]
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	440b      	add	r3, r1
 800694e:	3324      	adds	r3, #36	; 0x24
 8006950:	2201      	movs	r2, #1
 8006952:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006954:	4b17      	ldr	r3, [pc, #92]	; (80069b4 <USBD_CUSTOM_HID_Init+0x150>)
 8006956:	7819      	ldrb	r1, [r3, #0]
 8006958:	2302      	movs	r3, #2
 800695a:	2203      	movs	r2, #3
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f002 fa15 	bl	8008d8c <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 8006962:	4b14      	ldr	r3, [pc, #80]	; (80069b4 <USBD_CUSTOM_HID_Init+0x150>)
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	f003 020f 	and.w	r2, r3, #15
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	440b      	add	r3, r1
 8006976:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800697a:	2201      	movs	r2, #1
 800697c:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2200      	movs	r2, #0
 8006982:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	33b0      	adds	r3, #176	; 0xb0
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006998:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <USBD_CUSTOM_HID_Init+0x150>)
 800699a:	7819      	ldrb	r1, [r3, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	2306      	movs	r3, #6
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f002 fb6d 	bl	8009080 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	20000086 	.word	0x20000086
 80069b4:	20000087 	.word	0x20000087

080069b8 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80069c4:	4b37      	ldr	r3, [pc, #220]	; (8006aa4 <USBD_CUSTOM_HID_DeInit+0xec>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	4619      	mov	r1, r3
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f002 fa1c 	bl	8008e08 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80069d0:	4b34      	ldr	r3, [pc, #208]	; (8006aa4 <USBD_CUSTOM_HID_DeInit+0xec>)
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	f003 020f 	and.w	r2, r3, #15
 80069d8:	6879      	ldr	r1, [r7, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	440b      	add	r3, r1
 80069e4:	3324      	adds	r3, #36	; 0x24
 80069e6:	2200      	movs	r2, #0
 80069e8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80069ea:	4b2e      	ldr	r3, [pc, #184]	; (8006aa4 <USBD_CUSTOM_HID_DeInit+0xec>)
 80069ec:	781b      	ldrb	r3, [r3, #0]
 80069ee:	f003 020f 	and.w	r2, r3, #15
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	4613      	mov	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	440b      	add	r3, r1
 80069fe:	3326      	adds	r3, #38	; 0x26
 8006a00:	2200      	movs	r2, #0
 8006a02:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006a04:	4b28      	ldr	r3, [pc, #160]	; (8006aa8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	4619      	mov	r1, r3
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f002 f9fc 	bl	8008e08 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8006a10:	4b25      	ldr	r3, [pc, #148]	; (8006aa8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	f003 020f 	and.w	r2, r3, #15
 8006a18:	6879      	ldr	r1, [r7, #4]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	4413      	add	r3, r2
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	440b      	add	r3, r1
 8006a24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a28:	2200      	movs	r2, #0
 8006a2a:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006a2c:	4b1e      	ldr	r3, [pc, #120]	; (8006aa8 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006a2e:	781b      	ldrb	r3, [r3, #0]
 8006a30:	f003 020f 	and.w	r2, r3, #15
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	4613      	mov	r3, r2
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	440b      	add	r3, r1
 8006a40:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006a44:	2200      	movs	r2, #0
 8006a46:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	32b0      	adds	r2, #176	; 0xb0
 8006a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d01f      	beq.n	8006a9a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	33b0      	adds	r3, #176	; 0xb0
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4413      	add	r3, r2
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	32b0      	adds	r2, #176	; 0xb0
 8006a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f002 fb93 	bl	80091a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	32b0      	adds	r2, #176	; 0xb0
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3708      	adds	r7, #8
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	20000086 	.word	0x20000086
 8006aa8:	20000087 	.word	0x20000087

08006aac <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b088      	sub	sp, #32
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	32b0      	adds	r2, #176	; 0xb0
 8006ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac4:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006aca:	2300      	movs	r3, #0
 8006acc:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e0f8      	b.n	8006cd2 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d056      	beq.n	8006b9a <USBD_CUSTOM_HID_Setup+0xee>
 8006aec:	2b20      	cmp	r3, #32
 8006aee:	f040 80e8 	bne.w	8006cc2 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	785b      	ldrb	r3, [r3, #1]
 8006af6:	3b02      	subs	r3, #2
 8006af8:	2b09      	cmp	r3, #9
 8006afa:	d846      	bhi.n	8006b8a <USBD_CUSTOM_HID_Setup+0xde>
 8006afc:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <USBD_CUSTOM_HID_Setup+0x58>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b5d 	.word	0x08006b5d
 8006b08:	08006b3b 	.word	0x08006b3b
 8006b0c:	08006b8b 	.word	0x08006b8b
 8006b10:	08006b8b 	.word	0x08006b8b
 8006b14:	08006b8b 	.word	0x08006b8b
 8006b18:	08006b8b 	.word	0x08006b8b
 8006b1c:	08006b8b 	.word	0x08006b8b
 8006b20:	08006b6d 	.word	0x08006b6d
 8006b24:	08006b4b 	.word	0x08006b4b
 8006b28:	08006b2d 	.word	0x08006b2d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	885b      	ldrh	r3, [r3, #2]
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	461a      	mov	r2, r3
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	609a      	str	r2, [r3, #8]
          break;
 8006b38:	e02e      	b.n	8006b98 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	3308      	adds	r3, #8
 8006b3e:	2201      	movs	r2, #1
 8006b40:	4619      	mov	r1, r3
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 fcf6 	bl	8008534 <USBD_CtlSendData>
          break;
 8006b48:	e026      	b.n	8006b98 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	885b      	ldrh	r3, [r3, #2]
 8006b4e:	0a1b      	lsrs	r3, r3, #8
 8006b50:	b29b      	uxth	r3, r3
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	461a      	mov	r2, r3
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	60da      	str	r2, [r3, #12]
          break;
 8006b5a:	e01d      	b.n	8006b98 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	330c      	adds	r3, #12
 8006b60:	2201      	movs	r2, #1
 8006b62:	4619      	mov	r1, r3
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f001 fce5 	bl	8008534 <USBD_CtlSendData>
          break;
 8006b6a:	e015      	b.n	8006b98 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006b72:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	88db      	ldrh	r3, [r3, #6]
 8006b78:	2b06      	cmp	r3, #6
 8006b7a:	bf28      	it	cs
 8006b7c:	2306      	movcs	r3, #6
 8006b7e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006b80:	461a      	mov	r2, r3
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f001 fd02 	bl	800858c <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8006b88:	e006      	b.n	8006b98 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 fc60 	bl	8008452 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b92:	2303      	movs	r3, #3
 8006b94:	75fb      	strb	r3, [r7, #23]
          break;
 8006b96:	bf00      	nop
      }
      break;
 8006b98:	e09a      	b.n	8006cd0 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	785b      	ldrb	r3, [r3, #1]
 8006b9e:	2b0b      	cmp	r3, #11
 8006ba0:	f200 8086 	bhi.w	8006cb0 <USBD_CUSTOM_HID_Setup+0x204>
 8006ba4:	a201      	add	r2, pc, #4	; (adr r2, 8006bac <USBD_CUSTOM_HID_Setup+0x100>)
 8006ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006baa:	bf00      	nop
 8006bac:	08006bdd 	.word	0x08006bdd
 8006bb0:	08006cbf 	.word	0x08006cbf
 8006bb4:	08006cb1 	.word	0x08006cb1
 8006bb8:	08006cb1 	.word	0x08006cb1
 8006bbc:	08006cb1 	.word	0x08006cb1
 8006bc0:	08006cb1 	.word	0x08006cb1
 8006bc4:	08006c07 	.word	0x08006c07
 8006bc8:	08006cb1 	.word	0x08006cb1
 8006bcc:	08006cb1 	.word	0x08006cb1
 8006bd0:	08006cb1 	.word	0x08006cb1
 8006bd4:	08006c5f 	.word	0x08006c5f
 8006bd8:	08006c89 	.word	0x08006c89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d107      	bne.n	8006bf8 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006be8:	f107 030e 	add.w	r3, r7, #14
 8006bec:	2202      	movs	r2, #2
 8006bee:	4619      	mov	r1, r3
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f001 fc9f 	bl	8008534 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bf6:	e063      	b.n	8006cc0 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f001 fc29 	bl	8008452 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c00:	2303      	movs	r3, #3
 8006c02:	75fb      	strb	r3, [r7, #23]
          break;
 8006c04:	e05c      	b.n	8006cc0 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	885b      	ldrh	r3, [r3, #2]
 8006c0a:	0a1b      	lsrs	r3, r3, #8
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b22      	cmp	r3, #34	; 0x22
 8006c10:	d110      	bne.n	8006c34 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	88db      	ldrh	r3, [r3, #6]
 8006c16:	2b1d      	cmp	r3, #29
 8006c18:	bf28      	it	cs
 8006c1a:	231d      	movcs	r3, #29
 8006c1c:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	33b0      	adds	r3, #176	; 0xb0
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	61bb      	str	r3, [r7, #24]
 8006c32:	e00d      	b.n	8006c50 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	885b      	ldrh	r3, [r3, #2]
 8006c38:	0a1b      	lsrs	r3, r3, #8
 8006c3a:	b29b      	uxth	r3, r3
 8006c3c:	2b21      	cmp	r3, #33	; 0x21
 8006c3e:	d107      	bne.n	8006c50 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006c40:	4b26      	ldr	r3, [pc, #152]	; (8006cdc <USBD_CUSTOM_HID_Setup+0x230>)
 8006c42:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	88db      	ldrh	r3, [r3, #6]
 8006c48:	2b09      	cmp	r3, #9
 8006c4a:	bf28      	it	cs
 8006c4c:	2309      	movcs	r3, #9
 8006c4e:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c50:	8bfb      	ldrh	r3, [r7, #30]
 8006c52:	461a      	mov	r2, r3
 8006c54:	69b9      	ldr	r1, [r7, #24]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fc6c 	bl	8008534 <USBD_CtlSendData>
          break;
 8006c5c:	e030      	b.n	8006cc0 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d107      	bne.n	8006c7a <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	3310      	adds	r3, #16
 8006c6e:	2201      	movs	r2, #1
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 fc5e 	bl	8008534 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c78:	e022      	b.n	8006cc0 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f001 fbe8 	bl	8008452 <USBD_CtlError>
            ret = USBD_FAIL;
 8006c82:	2303      	movs	r3, #3
 8006c84:	75fb      	strb	r3, [r7, #23]
          break;
 8006c86:	e01b      	b.n	8006cc0 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b03      	cmp	r3, #3
 8006c92:	d106      	bne.n	8006ca2 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	885b      	ldrh	r3, [r3, #2]
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ca0:	e00e      	b.n	8006cc0 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f001 fbd4 	bl	8008452 <USBD_CtlError>
            ret = USBD_FAIL;
 8006caa:	2303      	movs	r3, #3
 8006cac:	75fb      	strb	r3, [r7, #23]
          break;
 8006cae:	e007      	b.n	8006cc0 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006cb0:	6839      	ldr	r1, [r7, #0]
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f001 fbcd 	bl	8008452 <USBD_CtlError>
          ret = USBD_FAIL;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	75fb      	strb	r3, [r7, #23]
          break;
 8006cbc:	e000      	b.n	8006cc0 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8006cbe:	bf00      	nop
      }
      break;
 8006cc0:	e006      	b.n	8006cd0 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8006cc2:	6839      	ldr	r1, [r7, #0]
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f001 fbc4 	bl	8008452 <USBD_CtlError>
      ret = USBD_FAIL;
 8006cca:	2303      	movs	r3, #3
 8006ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8006cce:	bf00      	nop
  }
  return (uint8_t)ret;
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3720      	adds	r7, #32
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
 8006cda:	bf00      	nop
 8006cdc:	20000070 	.word	0x20000070

08006ce0 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	4613      	mov	r3, r2
 8006cec:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	32b0      	adds	r2, #176	; 0xb0
 8006cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfc:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e017      	b.n	8006d38 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b03      	cmp	r3, #3
 8006d12:	d110      	bne.n	8006d36 <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	7e1b      	ldrb	r3, [r3, #24]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d10a      	bne.n	8006d32 <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	761a      	strb	r2, [r3, #24]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8006d22:	4b07      	ldr	r3, [pc, #28]	; (8006d40 <USBD_CUSTOM_HID_SendReport+0x60>)
 8006d24:	7819      	ldrb	r1, [r3, #0]
 8006d26:	88fb      	ldrh	r3, [r7, #6]
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f002 f970 	bl	8009010 <USBD_LL_Transmit>
 8006d30:	e001      	b.n	8006d36 <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e000      	b.n	8006d38 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	20000086 	.word	0x20000086

08006d44 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006d4c:	2181      	movs	r1, #129	; 0x81
 8006d4e:	4815      	ldr	r0, [pc, #84]	; (8006da4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006d50:	f000 fd1d 	bl	800778e <USBD_GetEpDesc>
 8006d54:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006d56:	2101      	movs	r1, #1
 8006d58:	4812      	ldr	r0, [pc, #72]	; (8006da4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006d5a:	f000 fd18 	bl	800778e <USBD_GetEpDesc>
 8006d5e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d009      	beq.n	8006d7a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f042 0202 	orr.w	r2, r2, #2
 8006d6e:	711a      	strb	r2, [r3, #4]
 8006d70:	2200      	movs	r2, #0
 8006d72:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	2205      	movs	r2, #5
 8006d78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d009      	beq.n	8006d94 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f042 0202 	orr.w	r2, r2, #2
 8006d88:	711a      	strb	r2, [r3, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2205      	movs	r2, #5
 8006d92:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2229      	movs	r2, #41	; 0x29
 8006d98:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006d9a:	4b02      	ldr	r3, [pc, #8]	; (8006da4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3710      	adds	r7, #16
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20000044 	.word	0x20000044

08006da8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006db0:	2181      	movs	r1, #129	; 0x81
 8006db2:	4815      	ldr	r0, [pc, #84]	; (8006e08 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006db4:	f000 fceb 	bl	800778e <USBD_GetEpDesc>
 8006db8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006dba:	2101      	movs	r1, #1
 8006dbc:	4812      	ldr	r0, [pc, #72]	; (8006e08 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006dbe:	f000 fce6 	bl	800778e <USBD_GetEpDesc>
 8006dc2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d009      	beq.n	8006dde <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f042 0202 	orr.w	r2, r2, #2
 8006dd2:	711a      	strb	r2, [r3, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2205      	movs	r2, #5
 8006ddc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d009      	beq.n	8006df8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f042 0202 	orr.w	r2, r2, #2
 8006dec:	711a      	strb	r2, [r3, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2205      	movs	r2, #5
 8006df6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2229      	movs	r2, #41	; 0x29
 8006dfc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006dfe:	4b02      	ldr	r3, [pc, #8]	; (8006e08 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	20000044 	.word	0x20000044

08006e0c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006e14:	2181      	movs	r1, #129	; 0x81
 8006e16:	4815      	ldr	r0, [pc, #84]	; (8006e6c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006e18:	f000 fcb9 	bl	800778e <USBD_GetEpDesc>
 8006e1c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006e1e:	2101      	movs	r1, #1
 8006e20:	4812      	ldr	r0, [pc, #72]	; (8006e6c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006e22:	f000 fcb4 	bl	800778e <USBD_GetEpDesc>
 8006e26:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d009      	beq.n	8006e42 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f042 0202 	orr.w	r2, r2, #2
 8006e36:	711a      	strb	r2, [r3, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2205      	movs	r2, #5
 8006e40:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d009      	beq.n	8006e5c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f042 0202 	orr.w	r2, r2, #2
 8006e50:	711a      	strb	r2, [r3, #4]
 8006e52:	2200      	movs	r2, #0
 8006e54:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2205      	movs	r2, #5
 8006e5a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2229      	movs	r2, #41	; 0x29
 8006e60:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006e62:	4b02      	ldr	r3, [pc, #8]	; (8006e6c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	20000044 	.word	0x20000044

08006e70 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b083      	sub	sp, #12
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	460b      	mov	r3, r1
 8006e7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	32b0      	adds	r2, #176	; 0xb0
 8006e86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	370c      	adds	r7, #12
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	32b0      	adds	r2, #176	; 0xb0
 8006eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e017      	b.n	8006eee <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	32b0      	adds	r2, #176	; 0xb0
 8006ec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ecc:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	33b0      	adds	r3, #176	; 0xb0
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	4413      	add	r3, r2
 8006edc:	685b      	ldr	r3, [r3, #4]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	68fa      	ldr	r2, [r7, #12]
 8006ee2:	7810      	ldrb	r0, [r2, #0]
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	7852      	ldrb	r2, [r2, #1]
 8006ee8:	4611      	mov	r1, r2
 8006eea:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8006eec:	2300      	movs	r3, #0
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
	...

08006ef8 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	32b0      	adds	r2, #176	; 0xb0
 8006f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e00f      	b.n	8006f36 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	32b0      	adds	r2, #176	; 0xb0
 8006f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f24:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006f26:	4b06      	ldr	r3, [pc, #24]	; (8006f40 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8006f28:	7819      	ldrb	r1, [r3, #0]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	2306      	movs	r3, #6
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f002 f8a6 	bl	8009080 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000087 	.word	0x20000087

08006f44 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	32b0      	adds	r2, #176	; 0xb0
 8006f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f5a:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e016      	b.n	8006f94 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	695b      	ldr	r3, [r3, #20]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d111      	bne.n	8006f92 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	33b0      	adds	r3, #176	; 0xb0
 8006f78:	009b      	lsls	r3, r3, #2
 8006f7a:	4413      	add	r3, r2
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	7810      	ldrb	r0, [r2, #0]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	7852      	ldrb	r2, [r2, #1]
 8006f88:	4611      	mov	r1, r2
 8006f8a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	220a      	movs	r2, #10
 8006fa8:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006faa:	4b03      	ldr	r3, [pc, #12]	; (8006fb8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	370c      	adds	r7, #12
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	2000007c 	.word	0x2000007c

08006fbc <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b083      	sub	sp, #12
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d101      	bne.n	8006fd0 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e009      	b.n	8006fe4 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	33b0      	adds	r3, #176	; 0xb0
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	4413      	add	r3, r2
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007004:	2303      	movs	r3, #3
 8007006:	e01f      	b.n	8007048 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d003      	beq.n	800702e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	68ba      	ldr	r2, [r7, #8]
 800702a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2201      	movs	r2, #1
 8007032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	79fa      	ldrb	r2, [r7, #7]
 800703a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800703c:	68f8      	ldr	r0, [r7, #12]
 800703e:	f001 fe27 	bl	8008c90 <USBD_LL_Init>
 8007042:	4603      	mov	r3, r0
 8007044:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007046:	7dfb      	ldrb	r3, [r7, #23]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3718      	adds	r7, #24
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800705a:	2300      	movs	r3, #0
 800705c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007064:	2303      	movs	r3, #3
 8007066:	e025      	b.n	80070b4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	683a      	ldr	r2, [r7, #0]
 800706c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	32ae      	adds	r2, #174	; 0xae
 800707a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800707e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00f      	beq.n	80070a4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	32ae      	adds	r2, #174	; 0xae
 800708e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007094:	f107 020e 	add.w	r2, r7, #14
 8007098:	4610      	mov	r0, r2
 800709a:	4798      	blx	r3
 800709c:	4602      	mov	r2, r0
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80070aa:	1c5a      	adds	r2, r3, #1
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3710      	adds	r7, #16
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f001 fe2f 	bl	8008d28 <USBD_LL_Start>
 80070ca:	4603      	mov	r3, r0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80070dc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80070de:	4618      	mov	r0, r3
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr

080070ea <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	460b      	mov	r3, r1
 80070f4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80070f6:	2300      	movs	r3, #0
 80070f8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007100:	2b00      	cmp	r3, #0
 8007102:	d009      	beq.n	8007118 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	78fa      	ldrb	r2, [r7, #3]
 800710e:	4611      	mov	r1, r2
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	4798      	blx	r3
 8007114:	4603      	mov	r3, r0
 8007116:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007118:	7bfb      	ldrb	r3, [r7, #15]
}
 800711a:	4618      	mov	r0, r3
 800711c:	3710      	adds	r7, #16
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b084      	sub	sp, #16
 8007126:	af00      	add	r7, sp, #0
 8007128:	6078      	str	r0, [r7, #4]
 800712a:	460b      	mov	r3, r1
 800712c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800712e:	2300      	movs	r3, #0
 8007130:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	78fa      	ldrb	r2, [r7, #3]
 800713c:	4611      	mov	r1, r2
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	4798      	blx	r3
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d001      	beq.n	800714c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007148:	2303      	movs	r3, #3
 800714a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800714c:	7bfb      	ldrb	r3, [r7, #15]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	4618      	mov	r0, r3
 800716a:	f001 f938 	bl	80083de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2201      	movs	r2, #1
 8007172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800717c:	461a      	mov	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800718a:	f003 031f 	and.w	r3, r3, #31
 800718e:	2b02      	cmp	r3, #2
 8007190:	d01a      	beq.n	80071c8 <USBD_LL_SetupStage+0x72>
 8007192:	2b02      	cmp	r3, #2
 8007194:	d822      	bhi.n	80071dc <USBD_LL_SetupStage+0x86>
 8007196:	2b00      	cmp	r3, #0
 8007198:	d002      	beq.n	80071a0 <USBD_LL_SetupStage+0x4a>
 800719a:	2b01      	cmp	r3, #1
 800719c:	d00a      	beq.n	80071b4 <USBD_LL_SetupStage+0x5e>
 800719e:	e01d      	b.n	80071dc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fb65 	bl	8007878 <USBD_StdDevReq>
 80071ae:	4603      	mov	r3, r0
 80071b0:	73fb      	strb	r3, [r7, #15]
      break;
 80071b2:	e020      	b.n	80071f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f000 fbcd 	bl	800795c <USBD_StdItfReq>
 80071c2:	4603      	mov	r3, r0
 80071c4:	73fb      	strb	r3, [r7, #15]
      break;
 80071c6:	e016      	b.n	80071f6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80071ce:	4619      	mov	r1, r3
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	f000 fc2f 	bl	8007a34 <USBD_StdEPReq>
 80071d6:	4603      	mov	r3, r0
 80071d8:	73fb      	strb	r3, [r7, #15]
      break;
 80071da:	e00c      	b.n	80071f6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80071e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	4619      	mov	r1, r3
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f001 fe42 	bl	8008e74 <USBD_LL_StallEP>
 80071f0:	4603      	mov	r3, r0
 80071f2:	73fb      	strb	r3, [r7, #15]
      break;
 80071f4:	bf00      	nop
  }

  return ret;
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b086      	sub	sp, #24
 8007204:	af00      	add	r7, sp, #0
 8007206:	60f8      	str	r0, [r7, #12]
 8007208:	460b      	mov	r3, r1
 800720a:	607a      	str	r2, [r7, #4]
 800720c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007212:	7afb      	ldrb	r3, [r7, #11]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d16e      	bne.n	80072f6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800721e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007226:	2b03      	cmp	r3, #3
 8007228:	f040 8098 	bne.w	800735c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	689a      	ldr	r2, [r3, #8]
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	429a      	cmp	r2, r3
 8007236:	d913      	bls.n	8007260 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	1ad2      	subs	r2, r2, r3
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	68da      	ldr	r2, [r3, #12]
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	4293      	cmp	r3, r2
 8007250:	bf28      	it	cs
 8007252:	4613      	movcs	r3, r2
 8007254:	461a      	mov	r2, r3
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f001 f9b4 	bl	80085c6 <USBD_CtlContinueRx>
 800725e:	e07d      	b.n	800735c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007266:	f003 031f 	and.w	r3, r3, #31
 800726a:	2b02      	cmp	r3, #2
 800726c:	d014      	beq.n	8007298 <USBD_LL_DataOutStage+0x98>
 800726e:	2b02      	cmp	r3, #2
 8007270:	d81d      	bhi.n	80072ae <USBD_LL_DataOutStage+0xae>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <USBD_LL_DataOutStage+0x7c>
 8007276:	2b01      	cmp	r3, #1
 8007278:	d003      	beq.n	8007282 <USBD_LL_DataOutStage+0x82>
 800727a:	e018      	b.n	80072ae <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800727c:	2300      	movs	r3, #0
 800727e:	75bb      	strb	r3, [r7, #22]
            break;
 8007280:	e018      	b.n	80072b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007288:	b2db      	uxtb	r3, r3
 800728a:	4619      	mov	r1, r3
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f000 fa64 	bl	800775a <USBD_CoreFindIF>
 8007292:	4603      	mov	r3, r0
 8007294:	75bb      	strb	r3, [r7, #22]
            break;
 8007296:	e00d      	b.n	80072b4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800729e:	b2db      	uxtb	r3, r3
 80072a0:	4619      	mov	r1, r3
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 fa66 	bl	8007774 <USBD_CoreFindEP>
 80072a8:	4603      	mov	r3, r0
 80072aa:	75bb      	strb	r3, [r7, #22]
            break;
 80072ac:	e002      	b.n	80072b4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	75bb      	strb	r3, [r7, #22]
            break;
 80072b2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80072b4:	7dbb      	ldrb	r3, [r7, #22]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d119      	bne.n	80072ee <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d113      	bne.n	80072ee <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80072c6:	7dba      	ldrb	r2, [r7, #22]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	32ae      	adds	r2, #174	; 0xae
 80072cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00b      	beq.n	80072ee <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80072d6:	7dba      	ldrb	r2, [r7, #22]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80072de:	7dba      	ldrb	r2, [r7, #22]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	32ae      	adds	r2, #174	; 0xae
 80072e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f001 f97a 	bl	80085e8 <USBD_CtlSendStatus>
 80072f4:	e032      	b.n	800735c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80072f6:	7afb      	ldrb	r3, [r7, #11]
 80072f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072fc:	b2db      	uxtb	r3, r3
 80072fe:	4619      	mov	r1, r3
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 fa37 	bl	8007774 <USBD_CoreFindEP>
 8007306:	4603      	mov	r3, r0
 8007308:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800730a:	7dbb      	ldrb	r3, [r7, #22]
 800730c:	2bff      	cmp	r3, #255	; 0xff
 800730e:	d025      	beq.n	800735c <USBD_LL_DataOutStage+0x15c>
 8007310:	7dbb      	ldrb	r3, [r7, #22]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d122      	bne.n	800735c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b03      	cmp	r3, #3
 8007320:	d117      	bne.n	8007352 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007322:	7dba      	ldrb	r2, [r7, #22]
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	32ae      	adds	r2, #174	; 0xae
 8007328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800732c:	699b      	ldr	r3, [r3, #24]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00f      	beq.n	8007352 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007332:	7dba      	ldrb	r2, [r7, #22]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800733a:	7dba      	ldrb	r2, [r7, #22]
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	32ae      	adds	r2, #174	; 0xae
 8007340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007344:	699b      	ldr	r3, [r3, #24]
 8007346:	7afa      	ldrb	r2, [r7, #11]
 8007348:	4611      	mov	r1, r2
 800734a:	68f8      	ldr	r0, [r7, #12]
 800734c:	4798      	blx	r3
 800734e:	4603      	mov	r3, r0
 8007350:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007352:	7dfb      	ldrb	r3, [r7, #23]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007358:	7dfb      	ldrb	r3, [r7, #23]
 800735a:	e000      	b.n	800735e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b086      	sub	sp, #24
 800736a:	af00      	add	r7, sp, #0
 800736c:	60f8      	str	r0, [r7, #12]
 800736e:	460b      	mov	r3, r1
 8007370:	607a      	str	r2, [r7, #4]
 8007372:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007374:	7afb      	ldrb	r3, [r7, #11]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d16f      	bne.n	800745a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	3314      	adds	r3, #20
 800737e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007386:	2b02      	cmp	r3, #2
 8007388:	d15a      	bne.n	8007440 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	429a      	cmp	r2, r3
 8007394:	d914      	bls.n	80073c0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	1ad2      	subs	r2, r2, r3
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	461a      	mov	r2, r3
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f001 f8dc 	bl	800856a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073b2:	2300      	movs	r3, #0
 80073b4:	2200      	movs	r2, #0
 80073b6:	2100      	movs	r1, #0
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f001 fe61 	bl	8009080 <USBD_LL_PrepareReceive>
 80073be:	e03f      	b.n	8007440 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d11c      	bne.n	8007406 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d316      	bcc.n	8007406 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d20f      	bcs.n	8007406 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80073e6:	2200      	movs	r2, #0
 80073e8:	2100      	movs	r1, #0
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f001 f8bd 	bl	800856a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073f8:	2300      	movs	r3, #0
 80073fa:	2200      	movs	r2, #0
 80073fc:	2100      	movs	r1, #0
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f001 fe3e 	bl	8009080 <USBD_LL_PrepareReceive>
 8007404:	e01c      	b.n	8007440 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b03      	cmp	r3, #3
 8007410:	d10f      	bne.n	8007432 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d009      	beq.n	8007432 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007432:	2180      	movs	r1, #128	; 0x80
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f001 fd1d 	bl	8008e74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f001 f8e7 	bl	800860e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007446:	2b00      	cmp	r3, #0
 8007448:	d03a      	beq.n	80074c0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800744a:	68f8      	ldr	r0, [r7, #12]
 800744c:	f7ff fe42 	bl	80070d4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2200      	movs	r2, #0
 8007454:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007458:	e032      	b.n	80074c0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800745a:	7afb      	ldrb	r3, [r7, #11]
 800745c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007460:	b2db      	uxtb	r3, r3
 8007462:	4619      	mov	r1, r3
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 f985 	bl	8007774 <USBD_CoreFindEP>
 800746a:	4603      	mov	r3, r0
 800746c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800746e:	7dfb      	ldrb	r3, [r7, #23]
 8007470:	2bff      	cmp	r3, #255	; 0xff
 8007472:	d025      	beq.n	80074c0 <USBD_LL_DataInStage+0x15a>
 8007474:	7dfb      	ldrb	r3, [r7, #23]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d122      	bne.n	80074c0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007480:	b2db      	uxtb	r3, r3
 8007482:	2b03      	cmp	r3, #3
 8007484:	d11c      	bne.n	80074c0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007486:	7dfa      	ldrb	r2, [r7, #23]
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	32ae      	adds	r2, #174	; 0xae
 800748c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d014      	beq.n	80074c0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007496:	7dfa      	ldrb	r2, [r7, #23]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800749e:	7dfa      	ldrb	r2, [r7, #23]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	32ae      	adds	r2, #174	; 0xae
 80074a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074a8:	695b      	ldr	r3, [r3, #20]
 80074aa:	7afa      	ldrb	r2, [r7, #11]
 80074ac:	4611      	mov	r1, r2
 80074ae:	68f8      	ldr	r0, [r7, #12]
 80074b0:	4798      	blx	r3
 80074b2:	4603      	mov	r3, r0
 80074b4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80074b6:	7dbb      	ldrb	r3, [r7, #22]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d001      	beq.n	80074c0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80074bc:	7dbb      	ldrb	r3, [r7, #22]
 80074be:	e000      	b.n	80074c2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b084      	sub	sp, #16
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80074d2:	2300      	movs	r3, #0
 80074d4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2200      	movs	r2, #0
 80074e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2200      	movs	r2, #0
 80074ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007502:	2b00      	cmp	r3, #0
 8007504:	d014      	beq.n	8007530 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00e      	beq.n	8007530 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6852      	ldr	r2, [r2, #4]
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	4611      	mov	r1, r2
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	4798      	blx	r3
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800752c:	2303      	movs	r3, #3
 800752e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007530:	2340      	movs	r3, #64	; 0x40
 8007532:	2200      	movs	r2, #0
 8007534:	2100      	movs	r1, #0
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 fc28 	bl	8008d8c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2201      	movs	r2, #1
 8007540:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2240      	movs	r2, #64	; 0x40
 8007548:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800754c:	2340      	movs	r3, #64	; 0x40
 800754e:	2200      	movs	r2, #0
 8007550:	2180      	movs	r1, #128	; 0x80
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f001 fc1a 	bl	8008d8c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2201      	movs	r2, #1
 800755c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2240      	movs	r2, #64	; 0x40
 8007562:	621a      	str	r2, [r3, #32]

  return ret;
 8007564:	7bfb      	ldrb	r3, [r7, #15]
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}

0800756e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800756e:	b480      	push	{r7}
 8007570:	b083      	sub	sp, #12
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
 8007576:	460b      	mov	r3, r1
 8007578:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	78fa      	ldrb	r2, [r7, #3]
 800757e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800758e:	b480      	push	{r7}
 8007590:	b083      	sub	sp, #12
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b04      	cmp	r3, #4
 80075a0:	d006      	beq.n	80075b0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2204      	movs	r2, #4
 80075b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	370c      	adds	r7, #12
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b083      	sub	sp, #12
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d4:	b2db      	uxtb	r3, r3
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d106      	bne.n	80075e8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075e8:	2300      	movs	r3, #0
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	370c      	adds	r7, #12
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr

080075f6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075f6:	b580      	push	{r7, lr}
 80075f8:	b082      	sub	sp, #8
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b03      	cmp	r3, #3
 8007608:	d110      	bne.n	800762c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00b      	beq.n	800762c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d005      	beq.n	800762c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800762c:	2300      	movs	r3, #0
}
 800762e:	4618      	mov	r0, r3
 8007630:	3708      	adds	r7, #8
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b082      	sub	sp, #8
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
 800763e:	460b      	mov	r3, r1
 8007640:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	32ae      	adds	r2, #174	; 0xae
 800764c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d101      	bne.n	8007658 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007654:	2303      	movs	r3, #3
 8007656:	e01c      	b.n	8007692 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765e:	b2db      	uxtb	r3, r3
 8007660:	2b03      	cmp	r3, #3
 8007662:	d115      	bne.n	8007690 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	32ae      	adds	r2, #174	; 0xae
 800766e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007672:	6a1b      	ldr	r3, [r3, #32]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d00b      	beq.n	8007690 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	32ae      	adds	r2, #174	; 0xae
 8007682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007686:	6a1b      	ldr	r3, [r3, #32]
 8007688:	78fa      	ldrb	r2, [r7, #3]
 800768a:	4611      	mov	r1, r2
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b082      	sub	sp, #8
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
 80076a2:	460b      	mov	r3, r1
 80076a4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	32ae      	adds	r2, #174	; 0xae
 80076b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80076b8:	2303      	movs	r3, #3
 80076ba:	e01c      	b.n	80076f6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076c2:	b2db      	uxtb	r3, r3
 80076c4:	2b03      	cmp	r3, #3
 80076c6:	d115      	bne.n	80076f4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	32ae      	adds	r2, #174	; 0xae
 80076d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00b      	beq.n	80076f4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	32ae      	adds	r2, #174	; 0xae
 80076e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	78fa      	ldrb	r2, [r7, #3]
 80076ee:	4611      	mov	r1, r2
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80076f4:	2300      	movs	r3, #0
}
 80076f6:	4618      	mov	r0, r3
 80076f8:	3708      	adds	r7, #8
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}

080076fe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80076fe:	b480      	push	{r7}
 8007700:	b083      	sub	sp, #12
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800771c:	2300      	movs	r3, #0
 800771e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2201      	movs	r2, #1
 8007724:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00e      	beq.n	8007750 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	6852      	ldr	r2, [r2, #4]
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	4611      	mov	r1, r2
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	4798      	blx	r3
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800774c:	2303      	movs	r3, #3
 800774e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007750:	7bfb      	ldrb	r3, [r7, #15]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800775a:	b480      	push	{r7}
 800775c:	b083      	sub	sp, #12
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	460b      	mov	r3, r1
 8007764:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007766:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007768:	4618      	mov	r0, r3
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	460b      	mov	r3, r1
 800777e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007780:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007782:	4618      	mov	r0, r3
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b086      	sub	sp, #24
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80077a2:	2300      	movs	r3, #0
 80077a4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	885b      	ldrh	r3, [r3, #2]
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d920      	bls.n	80077f8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80077be:	e013      	b.n	80077e8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80077c0:	f107 030a 	add.w	r3, r7, #10
 80077c4:	4619      	mov	r1, r3
 80077c6:	6978      	ldr	r0, [r7, #20]
 80077c8:	f000 f81b 	bl	8007802 <USBD_GetNextDesc>
 80077cc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	785b      	ldrb	r3, [r3, #1]
 80077d2:	2b05      	cmp	r3, #5
 80077d4:	d108      	bne.n	80077e8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	789b      	ldrb	r3, [r3, #2]
 80077de:	78fa      	ldrb	r2, [r7, #3]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d008      	beq.n	80077f6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80077e4:	2300      	movs	r3, #0
 80077e6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	885b      	ldrh	r3, [r3, #2]
 80077ec:	b29a      	uxth	r2, r3
 80077ee:	897b      	ldrh	r3, [r7, #10]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d8e5      	bhi.n	80077c0 <USBD_GetEpDesc+0x32>
 80077f4:	e000      	b.n	80077f8 <USBD_GetEpDesc+0x6a>
          break;
 80077f6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80077f8:	693b      	ldr	r3, [r7, #16]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007802:	b480      	push	{r7}
 8007804:	b085      	sub	sp, #20
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	881a      	ldrh	r2, [r3, #0]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	b29b      	uxth	r3, r3
 800781a:	4413      	add	r3, r2
 800781c:	b29a      	uxth	r2, r3
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4413      	add	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800782e:	68fb      	ldr	r3, [r7, #12]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3714      	adds	r7, #20
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800783c:	b480      	push	{r7}
 800783e:	b087      	sub	sp, #28
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	3301      	adds	r3, #1
 8007852:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800785a:	8a3b      	ldrh	r3, [r7, #16]
 800785c:	021b      	lsls	r3, r3, #8
 800785e:	b21a      	sxth	r2, r3
 8007860:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007864:	4313      	orrs	r3, r2
 8007866:	b21b      	sxth	r3, r3
 8007868:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800786a:	89fb      	ldrh	r3, [r7, #14]
}
 800786c:	4618      	mov	r0, r3
 800786e:	371c      	adds	r7, #28
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800788e:	2b40      	cmp	r3, #64	; 0x40
 8007890:	d005      	beq.n	800789e <USBD_StdDevReq+0x26>
 8007892:	2b40      	cmp	r3, #64	; 0x40
 8007894:	d857      	bhi.n	8007946 <USBD_StdDevReq+0xce>
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00f      	beq.n	80078ba <USBD_StdDevReq+0x42>
 800789a:	2b20      	cmp	r3, #32
 800789c:	d153      	bne.n	8007946 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	32ae      	adds	r2, #174	; 0xae
 80078a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	4798      	blx	r3
 80078b4:	4603      	mov	r3, r0
 80078b6:	73fb      	strb	r3, [r7, #15]
      break;
 80078b8:	e04a      	b.n	8007950 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	785b      	ldrb	r3, [r3, #1]
 80078be:	2b09      	cmp	r3, #9
 80078c0:	d83b      	bhi.n	800793a <USBD_StdDevReq+0xc2>
 80078c2:	a201      	add	r2, pc, #4	; (adr r2, 80078c8 <USBD_StdDevReq+0x50>)
 80078c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c8:	0800791d 	.word	0x0800791d
 80078cc:	08007931 	.word	0x08007931
 80078d0:	0800793b 	.word	0x0800793b
 80078d4:	08007927 	.word	0x08007927
 80078d8:	0800793b 	.word	0x0800793b
 80078dc:	080078fb 	.word	0x080078fb
 80078e0:	080078f1 	.word	0x080078f1
 80078e4:	0800793b 	.word	0x0800793b
 80078e8:	08007913 	.word	0x08007913
 80078ec:	08007905 	.word	0x08007905
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80078f0:	6839      	ldr	r1, [r7, #0]
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f000 fa3c 	bl	8007d70 <USBD_GetDescriptor>
          break;
 80078f8:	e024      	b.n	8007944 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80078fa:	6839      	ldr	r1, [r7, #0]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fbcb 	bl	8008098 <USBD_SetAddress>
          break;
 8007902:	e01f      	b.n	8007944 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007904:	6839      	ldr	r1, [r7, #0]
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 fc0a 	bl	8008120 <USBD_SetConfig>
 800790c:	4603      	mov	r3, r0
 800790e:	73fb      	strb	r3, [r7, #15]
          break;
 8007910:	e018      	b.n	8007944 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007912:	6839      	ldr	r1, [r7, #0]
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fcad 	bl	8008274 <USBD_GetConfig>
          break;
 800791a:	e013      	b.n	8007944 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800791c:	6839      	ldr	r1, [r7, #0]
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 fcde 	bl	80082e0 <USBD_GetStatus>
          break;
 8007924:	e00e      	b.n	8007944 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007926:	6839      	ldr	r1, [r7, #0]
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 fd0d 	bl	8008348 <USBD_SetFeature>
          break;
 800792e:	e009      	b.n	8007944 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fd31 	bl	800839a <USBD_ClrFeature>
          break;
 8007938:	e004      	b.n	8007944 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 fd88 	bl	8008452 <USBD_CtlError>
          break;
 8007942:	bf00      	nop
      }
      break;
 8007944:	e004      	b.n	8007950 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007946:	6839      	ldr	r1, [r7, #0]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fd82 	bl	8008452 <USBD_CtlError>
      break;
 800794e:	bf00      	nop
  }

  return ret;
 8007950:	7bfb      	ldrb	r3, [r7, #15]
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop

0800795c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007966:	2300      	movs	r3, #0
 8007968:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007972:	2b40      	cmp	r3, #64	; 0x40
 8007974:	d005      	beq.n	8007982 <USBD_StdItfReq+0x26>
 8007976:	2b40      	cmp	r3, #64	; 0x40
 8007978:	d852      	bhi.n	8007a20 <USBD_StdItfReq+0xc4>
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <USBD_StdItfReq+0x26>
 800797e:	2b20      	cmp	r3, #32
 8007980:	d14e      	bne.n	8007a20 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007988:	b2db      	uxtb	r3, r3
 800798a:	3b01      	subs	r3, #1
 800798c:	2b02      	cmp	r3, #2
 800798e:	d840      	bhi.n	8007a12 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	889b      	ldrh	r3, [r3, #4]
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b01      	cmp	r3, #1
 8007998:	d836      	bhi.n	8007a08 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	889b      	ldrh	r3, [r3, #4]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	4619      	mov	r1, r3
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f7ff fed9 	bl	800775a <USBD_CoreFindIF>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80079ac:	7bbb      	ldrb	r3, [r7, #14]
 80079ae:	2bff      	cmp	r3, #255	; 0xff
 80079b0:	d01d      	beq.n	80079ee <USBD_StdItfReq+0x92>
 80079b2:	7bbb      	ldrb	r3, [r7, #14]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d11a      	bne.n	80079ee <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80079b8:	7bba      	ldrb	r2, [r7, #14]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	32ae      	adds	r2, #174	; 0xae
 80079be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00f      	beq.n	80079e8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80079c8:	7bba      	ldrb	r2, [r7, #14]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80079d0:	7bba      	ldrb	r2, [r7, #14]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	32ae      	adds	r2, #174	; 0xae
 80079d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	6839      	ldr	r1, [r7, #0]
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	4798      	blx	r3
 80079e2:	4603      	mov	r3, r0
 80079e4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079e6:	e004      	b.n	80079f2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80079e8:	2303      	movs	r3, #3
 80079ea:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80079ec:	e001      	b.n	80079f2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80079ee:	2303      	movs	r3, #3
 80079f0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	88db      	ldrh	r3, [r3, #6]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d110      	bne.n	8007a1c <USBD_StdItfReq+0xc0>
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d10d      	bne.n	8007a1c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f000 fdf1 	bl	80085e8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007a06:	e009      	b.n	8007a1c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fd21 	bl	8008452 <USBD_CtlError>
          break;
 8007a10:	e004      	b.n	8007a1c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007a12:	6839      	ldr	r1, [r7, #0]
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fd1c 	bl	8008452 <USBD_CtlError>
          break;
 8007a1a:	e000      	b.n	8007a1e <USBD_StdItfReq+0xc2>
          break;
 8007a1c:	bf00      	nop
      }
      break;
 8007a1e:	e004      	b.n	8007a2a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fd15 	bl	8008452 <USBD_CtlError>
      break;
 8007a28:	bf00      	nop
  }

  return ret;
 8007a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	889b      	ldrh	r3, [r3, #4]
 8007a46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	781b      	ldrb	r3, [r3, #0]
 8007a4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007a50:	2b40      	cmp	r3, #64	; 0x40
 8007a52:	d007      	beq.n	8007a64 <USBD_StdEPReq+0x30>
 8007a54:	2b40      	cmp	r3, #64	; 0x40
 8007a56:	f200 817f 	bhi.w	8007d58 <USBD_StdEPReq+0x324>
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d02a      	beq.n	8007ab4 <USBD_StdEPReq+0x80>
 8007a5e:	2b20      	cmp	r3, #32
 8007a60:	f040 817a 	bne.w	8007d58 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	4619      	mov	r1, r3
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f7ff fe83 	bl	8007774 <USBD_CoreFindEP>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a72:	7b7b      	ldrb	r3, [r7, #13]
 8007a74:	2bff      	cmp	r3, #255	; 0xff
 8007a76:	f000 8174 	beq.w	8007d62 <USBD_StdEPReq+0x32e>
 8007a7a:	7b7b      	ldrb	r3, [r7, #13]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f040 8170 	bne.w	8007d62 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007a82:	7b7a      	ldrb	r2, [r7, #13]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007a8a:	7b7a      	ldrb	r2, [r7, #13]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	32ae      	adds	r2, #174	; 0xae
 8007a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f000 8163 	beq.w	8007d62 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007a9c:	7b7a      	ldrb	r2, [r7, #13]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	32ae      	adds	r2, #174	; 0xae
 8007aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	6839      	ldr	r1, [r7, #0]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	4798      	blx	r3
 8007aae:	4603      	mov	r3, r0
 8007ab0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007ab2:	e156      	b.n	8007d62 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	785b      	ldrb	r3, [r3, #1]
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d008      	beq.n	8007ace <USBD_StdEPReq+0x9a>
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	f300 8145 	bgt.w	8007d4c <USBD_StdEPReq+0x318>
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	f000 809b 	beq.w	8007bfe <USBD_StdEPReq+0x1ca>
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d03c      	beq.n	8007b46 <USBD_StdEPReq+0x112>
 8007acc:	e13e      	b.n	8007d4c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d002      	beq.n	8007ae0 <USBD_StdEPReq+0xac>
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d016      	beq.n	8007b0c <USBD_StdEPReq+0xd8>
 8007ade:	e02c      	b.n	8007b3a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ae0:	7bbb      	ldrb	r3, [r7, #14]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d00d      	beq.n	8007b02 <USBD_StdEPReq+0xce>
 8007ae6:	7bbb      	ldrb	r3, [r7, #14]
 8007ae8:	2b80      	cmp	r3, #128	; 0x80
 8007aea:	d00a      	beq.n	8007b02 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007aec:	7bbb      	ldrb	r3, [r7, #14]
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f001 f9bf 	bl	8008e74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007af6:	2180      	movs	r1, #128	; 0x80
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f9bb 	bl	8008e74 <USBD_LL_StallEP>
 8007afe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b00:	e020      	b.n	8007b44 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007b02:	6839      	ldr	r1, [r7, #0]
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f000 fca4 	bl	8008452 <USBD_CtlError>
              break;
 8007b0a:	e01b      	b.n	8007b44 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b0c:	683b      	ldr	r3, [r7, #0]
 8007b0e:	885b      	ldrh	r3, [r3, #2]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d10e      	bne.n	8007b32 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007b14:	7bbb      	ldrb	r3, [r7, #14]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00b      	beq.n	8007b32 <USBD_StdEPReq+0xfe>
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	2b80      	cmp	r3, #128	; 0x80
 8007b1e:	d008      	beq.n	8007b32 <USBD_StdEPReq+0xfe>
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	88db      	ldrh	r3, [r3, #6]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d104      	bne.n	8007b32 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b28:	7bbb      	ldrb	r3, [r7, #14]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f001 f9a1 	bl	8008e74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fd58 	bl	80085e8 <USBD_CtlSendStatus>

              break;
 8007b38:	e004      	b.n	8007b44 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007b3a:	6839      	ldr	r1, [r7, #0]
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fc88 	bl	8008452 <USBD_CtlError>
              break;
 8007b42:	bf00      	nop
          }
          break;
 8007b44:	e107      	b.n	8007d56 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b02      	cmp	r3, #2
 8007b50:	d002      	beq.n	8007b58 <USBD_StdEPReq+0x124>
 8007b52:	2b03      	cmp	r3, #3
 8007b54:	d016      	beq.n	8007b84 <USBD_StdEPReq+0x150>
 8007b56:	e04b      	b.n	8007bf0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d00d      	beq.n	8007b7a <USBD_StdEPReq+0x146>
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	2b80      	cmp	r3, #128	; 0x80
 8007b62:	d00a      	beq.n	8007b7a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007b64:	7bbb      	ldrb	r3, [r7, #14]
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f983 	bl	8008e74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b6e:	2180      	movs	r1, #128	; 0x80
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f001 f97f 	bl	8008e74 <USBD_LL_StallEP>
 8007b76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007b78:	e040      	b.n	8007bfc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	6878      	ldr	r0, [r7, #4]
 8007b7e:	f000 fc68 	bl	8008452 <USBD_CtlError>
              break;
 8007b82:	e03b      	b.n	8007bfc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	885b      	ldrh	r3, [r3, #2]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d136      	bne.n	8007bfa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007b8c:	7bbb      	ldrb	r3, [r7, #14]
 8007b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d004      	beq.n	8007ba0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 f9a0 	bl	8008ee0 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fd21 	bl	80085e8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f7ff fde2 	bl	8007774 <USBD_CoreFindEP>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bb4:	7b7b      	ldrb	r3, [r7, #13]
 8007bb6:	2bff      	cmp	r3, #255	; 0xff
 8007bb8:	d01f      	beq.n	8007bfa <USBD_StdEPReq+0x1c6>
 8007bba:	7b7b      	ldrb	r3, [r7, #13]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d11c      	bne.n	8007bfa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007bc0:	7b7a      	ldrb	r2, [r7, #13]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007bc8:	7b7a      	ldrb	r2, [r7, #13]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	32ae      	adds	r2, #174	; 0xae
 8007bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d010      	beq.n	8007bfa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007bd8:	7b7a      	ldrb	r2, [r7, #13]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	32ae      	adds	r2, #174	; 0xae
 8007bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	6839      	ldr	r1, [r7, #0]
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	4798      	blx	r3
 8007bea:	4603      	mov	r3, r0
 8007bec:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007bee:	e004      	b.n	8007bfa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007bf0:	6839      	ldr	r1, [r7, #0]
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 fc2d 	bl	8008452 <USBD_CtlError>
              break;
 8007bf8:	e000      	b.n	8007bfc <USBD_StdEPReq+0x1c8>
              break;
 8007bfa:	bf00      	nop
          }
          break;
 8007bfc:	e0ab      	b.n	8007d56 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d002      	beq.n	8007c10 <USBD_StdEPReq+0x1dc>
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d032      	beq.n	8007c74 <USBD_StdEPReq+0x240>
 8007c0e:	e097      	b.n	8007d40 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c10:	7bbb      	ldrb	r3, [r7, #14]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d007      	beq.n	8007c26 <USBD_StdEPReq+0x1f2>
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	2b80      	cmp	r3, #128	; 0x80
 8007c1a:	d004      	beq.n	8007c26 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fc17 	bl	8008452 <USBD_CtlError>
                break;
 8007c24:	e091      	b.n	8007d4a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	da0b      	bge.n	8007c46 <USBD_StdEPReq+0x212>
 8007c2e:	7bbb      	ldrb	r3, [r7, #14]
 8007c30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	3310      	adds	r3, #16
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	4413      	add	r3, r2
 8007c42:	3304      	adds	r3, #4
 8007c44:	e00b      	b.n	8007c5e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c46:	7bbb      	ldrb	r3, [r7, #14]
 8007c48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	4413      	add	r3, r2
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	3304      	adds	r3, #4
 8007c5e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	2202      	movs	r2, #2
 8007c6a:	4619      	mov	r1, r3
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fc61 	bl	8008534 <USBD_CtlSendData>
              break;
 8007c72:	e06a      	b.n	8007d4a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	da11      	bge.n	8007ca0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007c7c:	7bbb      	ldrb	r3, [r7, #14]
 8007c7e:	f003 020f 	and.w	r2, r3, #15
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	4613      	mov	r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	009b      	lsls	r3, r3, #2
 8007c8c:	440b      	add	r3, r1
 8007c8e:	3324      	adds	r3, #36	; 0x24
 8007c90:	881b      	ldrh	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d117      	bne.n	8007cc6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007c96:	6839      	ldr	r1, [r7, #0]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fbda 	bl	8008452 <USBD_CtlError>
                  break;
 8007c9e:	e054      	b.n	8007d4a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	f003 020f 	and.w	r2, r3, #15
 8007ca6:	6879      	ldr	r1, [r7, #4]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	440b      	add	r3, r1
 8007cb2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007cb6:	881b      	ldrh	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d104      	bne.n	8007cc6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fbc7 	bl	8008452 <USBD_CtlError>
                  break;
 8007cc4:	e041      	b.n	8007d4a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cc6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	da0b      	bge.n	8007ce6 <USBD_StdEPReq+0x2b2>
 8007cce:	7bbb      	ldrb	r3, [r7, #14]
 8007cd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007cd4:	4613      	mov	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	4413      	add	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	3310      	adds	r3, #16
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	e00b      	b.n	8007cfe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ce6:	7bbb      	ldrb	r3, [r7, #14]
 8007ce8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007cec:	4613      	mov	r3, r2
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007cf8:	687a      	ldr	r2, [r7, #4]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	3304      	adds	r3, #4
 8007cfe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d002      	beq.n	8007d0c <USBD_StdEPReq+0x2d8>
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	2b80      	cmp	r3, #128	; 0x80
 8007d0a:	d103      	bne.n	8007d14 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	e00e      	b.n	8007d32 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 f917 	bl	8008f4c <USBD_LL_IsStallEP>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d003      	beq.n	8007d2c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	2201      	movs	r2, #1
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	e002      	b.n	8007d32 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	2202      	movs	r2, #2
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fbfb 	bl	8008534 <USBD_CtlSendData>
              break;
 8007d3e:	e004      	b.n	8007d4a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f000 fb85 	bl	8008452 <USBD_CtlError>
              break;
 8007d48:	bf00      	nop
          }
          break;
 8007d4a:	e004      	b.n	8007d56 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 fb7f 	bl	8008452 <USBD_CtlError>
          break;
 8007d54:	bf00      	nop
      }
      break;
 8007d56:	e005      	b.n	8007d64 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fb79 	bl	8008452 <USBD_CtlError>
      break;
 8007d60:	e000      	b.n	8007d64 <USBD_StdEPReq+0x330>
      break;
 8007d62:	bf00      	nop
  }

  return ret;
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3710      	adds	r7, #16
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}
	...

08007d70 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b084      	sub	sp, #16
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
 8007d78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007d82:	2300      	movs	r3, #0
 8007d84:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	885b      	ldrh	r3, [r3, #2]
 8007d8a:	0a1b      	lsrs	r3, r3, #8
 8007d8c:	b29b      	uxth	r3, r3
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	2b0e      	cmp	r3, #14
 8007d92:	f200 8152 	bhi.w	800803a <USBD_GetDescriptor+0x2ca>
 8007d96:	a201      	add	r2, pc, #4	; (adr r2, 8007d9c <USBD_GetDescriptor+0x2c>)
 8007d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9c:	08007e0d 	.word	0x08007e0d
 8007da0:	08007e25 	.word	0x08007e25
 8007da4:	08007e65 	.word	0x08007e65
 8007da8:	0800803b 	.word	0x0800803b
 8007dac:	0800803b 	.word	0x0800803b
 8007db0:	08007fdb 	.word	0x08007fdb
 8007db4:	08008007 	.word	0x08008007
 8007db8:	0800803b 	.word	0x0800803b
 8007dbc:	0800803b 	.word	0x0800803b
 8007dc0:	0800803b 	.word	0x0800803b
 8007dc4:	0800803b 	.word	0x0800803b
 8007dc8:	0800803b 	.word	0x0800803b
 8007dcc:	0800803b 	.word	0x0800803b
 8007dd0:	0800803b 	.word	0x0800803b
 8007dd4:	08007dd9 	.word	0x08007dd9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dde:	69db      	ldr	r3, [r3, #28]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dea:	69db      	ldr	r3, [r3, #28]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	7c12      	ldrb	r2, [r2, #16]
 8007df0:	f107 0108 	add.w	r1, r7, #8
 8007df4:	4610      	mov	r0, r2
 8007df6:	4798      	blx	r3
 8007df8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007dfa:	e126      	b.n	800804a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007dfc:	6839      	ldr	r1, [r7, #0]
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 fb27 	bl	8008452 <USBD_CtlError>
        err++;
 8007e04:	7afb      	ldrb	r3, [r7, #11]
 8007e06:	3301      	adds	r3, #1
 8007e08:	72fb      	strb	r3, [r7, #11]
      break;
 8007e0a:	e11e      	b.n	800804a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	7c12      	ldrb	r2, [r2, #16]
 8007e18:	f107 0108 	add.w	r1, r7, #8
 8007e1c:	4610      	mov	r0, r2
 8007e1e:	4798      	blx	r3
 8007e20:	60f8      	str	r0, [r7, #12]
      break;
 8007e22:	e112      	b.n	800804a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	7c1b      	ldrb	r3, [r3, #16]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d10d      	bne.n	8007e48 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e34:	f107 0208 	add.w	r2, r7, #8
 8007e38:	4610      	mov	r0, r2
 8007e3a:	4798      	blx	r3
 8007e3c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3301      	adds	r3, #1
 8007e42:	2202      	movs	r2, #2
 8007e44:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007e46:	e100      	b.n	800804a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e50:	f107 0208 	add.w	r2, r7, #8
 8007e54:	4610      	mov	r0, r2
 8007e56:	4798      	blx	r3
 8007e58:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	2202      	movs	r2, #2
 8007e60:	701a      	strb	r2, [r3, #0]
      break;
 8007e62:	e0f2      	b.n	800804a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	885b      	ldrh	r3, [r3, #2]
 8007e68:	b2db      	uxtb	r3, r3
 8007e6a:	2b05      	cmp	r3, #5
 8007e6c:	f200 80ac 	bhi.w	8007fc8 <USBD_GetDescriptor+0x258>
 8007e70:	a201      	add	r2, pc, #4	; (adr r2, 8007e78 <USBD_GetDescriptor+0x108>)
 8007e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e76:	bf00      	nop
 8007e78:	08007e91 	.word	0x08007e91
 8007e7c:	08007ec5 	.word	0x08007ec5
 8007e80:	08007ef9 	.word	0x08007ef9
 8007e84:	08007f2d 	.word	0x08007f2d
 8007e88:	08007f61 	.word	0x08007f61
 8007e8c:	08007f95 	.word	0x08007f95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00b      	beq.n	8007eb4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	7c12      	ldrb	r2, [r2, #16]
 8007ea8:	f107 0108 	add.w	r1, r7, #8
 8007eac:	4610      	mov	r0, r2
 8007eae:	4798      	blx	r3
 8007eb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eb2:	e091      	b.n	8007fd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 facb 	bl	8008452 <USBD_CtlError>
            err++;
 8007ebc:	7afb      	ldrb	r3, [r7, #11]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ec2:	e089      	b.n	8007fd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00b      	beq.n	8007ee8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	7c12      	ldrb	r2, [r2, #16]
 8007edc:	f107 0108 	add.w	r1, r7, #8
 8007ee0:	4610      	mov	r0, r2
 8007ee2:	4798      	blx	r3
 8007ee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ee6:	e077      	b.n	8007fd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fab1 	bl	8008452 <USBD_CtlError>
            err++;
 8007ef0:	7afb      	ldrb	r3, [r7, #11]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ef6:	e06f      	b.n	8007fd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d00b      	beq.n	8007f1c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f0a:	68db      	ldr	r3, [r3, #12]
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	7c12      	ldrb	r2, [r2, #16]
 8007f10:	f107 0108 	add.w	r1, r7, #8
 8007f14:	4610      	mov	r0, r2
 8007f16:	4798      	blx	r3
 8007f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f1a:	e05d      	b.n	8007fd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f1c:	6839      	ldr	r1, [r7, #0]
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f000 fa97 	bl	8008452 <USBD_CtlError>
            err++;
 8007f24:	7afb      	ldrb	r3, [r7, #11]
 8007f26:	3301      	adds	r3, #1
 8007f28:	72fb      	strb	r3, [r7, #11]
          break;
 8007f2a:	e055      	b.n	8007fd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00b      	beq.n	8007f50 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	7c12      	ldrb	r2, [r2, #16]
 8007f44:	f107 0108 	add.w	r1, r7, #8
 8007f48:	4610      	mov	r0, r2
 8007f4a:	4798      	blx	r3
 8007f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f4e:	e043      	b.n	8007fd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fa7d 	bl	8008452 <USBD_CtlError>
            err++;
 8007f58:	7afb      	ldrb	r3, [r7, #11]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8007f5e:	e03b      	b.n	8007fd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f66:	695b      	ldr	r3, [r3, #20]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d00b      	beq.n	8007f84 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f72:	695b      	ldr	r3, [r3, #20]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	7c12      	ldrb	r2, [r2, #16]
 8007f78:	f107 0108 	add.w	r1, r7, #8
 8007f7c:	4610      	mov	r0, r2
 8007f7e:	4798      	blx	r3
 8007f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007f82:	e029      	b.n	8007fd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007f84:	6839      	ldr	r1, [r7, #0]
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f000 fa63 	bl	8008452 <USBD_CtlError>
            err++;
 8007f8c:	7afb      	ldrb	r3, [r7, #11]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	72fb      	strb	r3, [r7, #11]
          break;
 8007f92:	e021      	b.n	8007fd8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f9a:	699b      	ldr	r3, [r3, #24]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d00b      	beq.n	8007fb8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007fa6:	699b      	ldr	r3, [r3, #24]
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	7c12      	ldrb	r2, [r2, #16]
 8007fac:	f107 0108 	add.w	r1, r7, #8
 8007fb0:	4610      	mov	r0, r2
 8007fb2:	4798      	blx	r3
 8007fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007fb6:	e00f      	b.n	8007fd8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fa49 	bl	8008452 <USBD_CtlError>
            err++;
 8007fc0:	7afb      	ldrb	r3, [r7, #11]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8007fc6:	e007      	b.n	8007fd8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007fc8:	6839      	ldr	r1, [r7, #0]
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f000 fa41 	bl	8008452 <USBD_CtlError>
          err++;
 8007fd0:	7afb      	ldrb	r3, [r7, #11]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007fd6:	bf00      	nop
      }
      break;
 8007fd8:	e037      	b.n	800804a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	7c1b      	ldrb	r3, [r3, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d109      	bne.n	8007ff6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fea:	f107 0208 	add.w	r2, r7, #8
 8007fee:	4610      	mov	r0, r2
 8007ff0:	4798      	blx	r3
 8007ff2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007ff4:	e029      	b.n	800804a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007ff6:	6839      	ldr	r1, [r7, #0]
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 fa2a 	bl	8008452 <USBD_CtlError>
        err++;
 8007ffe:	7afb      	ldrb	r3, [r7, #11]
 8008000:	3301      	adds	r3, #1
 8008002:	72fb      	strb	r3, [r7, #11]
      break;
 8008004:	e021      	b.n	800804a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	7c1b      	ldrb	r3, [r3, #16]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d10d      	bne.n	800802a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008016:	f107 0208 	add.w	r2, r7, #8
 800801a:	4610      	mov	r0, r2
 800801c:	4798      	blx	r3
 800801e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	3301      	adds	r3, #1
 8008024:	2207      	movs	r2, #7
 8008026:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008028:	e00f      	b.n	800804a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 fa10 	bl	8008452 <USBD_CtlError>
        err++;
 8008032:	7afb      	ldrb	r3, [r7, #11]
 8008034:	3301      	adds	r3, #1
 8008036:	72fb      	strb	r3, [r7, #11]
      break;
 8008038:	e007      	b.n	800804a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fa08 	bl	8008452 <USBD_CtlError>
      err++;
 8008042:	7afb      	ldrb	r3, [r7, #11]
 8008044:	3301      	adds	r3, #1
 8008046:	72fb      	strb	r3, [r7, #11]
      break;
 8008048:	bf00      	nop
  }

  if (err != 0U)
 800804a:	7afb      	ldrb	r3, [r7, #11]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d11e      	bne.n	800808e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	88db      	ldrh	r3, [r3, #6]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d016      	beq.n	8008086 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008058:	893b      	ldrh	r3, [r7, #8]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00e      	beq.n	800807c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	88da      	ldrh	r2, [r3, #6]
 8008062:	893b      	ldrh	r3, [r7, #8]
 8008064:	4293      	cmp	r3, r2
 8008066:	bf28      	it	cs
 8008068:	4613      	movcs	r3, r2
 800806a:	b29b      	uxth	r3, r3
 800806c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800806e:	893b      	ldrh	r3, [r7, #8]
 8008070:	461a      	mov	r2, r3
 8008072:	68f9      	ldr	r1, [r7, #12]
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 fa5d 	bl	8008534 <USBD_CtlSendData>
 800807a:	e009      	b.n	8008090 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800807c:	6839      	ldr	r1, [r7, #0]
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f9e7 	bl	8008452 <USBD_CtlError>
 8008084:	e004      	b.n	8008090 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 faae 	bl	80085e8 <USBD_CtlSendStatus>
 800808c:	e000      	b.n	8008090 <USBD_GetDescriptor+0x320>
    return;
 800808e:	bf00      	nop
  }
}
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop

08008098 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b084      	sub	sp, #16
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	889b      	ldrh	r3, [r3, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d131      	bne.n	800810e <USBD_SetAddress+0x76>
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	88db      	ldrh	r3, [r3, #6]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d12d      	bne.n	800810e <USBD_SetAddress+0x76>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	885b      	ldrh	r3, [r3, #2]
 80080b6:	2b7f      	cmp	r3, #127	; 0x7f
 80080b8:	d829      	bhi.n	800810e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	885b      	ldrh	r3, [r3, #2]
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	2b03      	cmp	r3, #3
 80080d0:	d104      	bne.n	80080dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80080d2:	6839      	ldr	r1, [r7, #0]
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f9bc 	bl	8008452 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080da:	e01d      	b.n	8008118 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	7bfa      	ldrb	r2, [r7, #15]
 80080e0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80080e4:	7bfb      	ldrb	r3, [r7, #15]
 80080e6:	4619      	mov	r1, r3
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f000 ff5b 	bl	8008fa4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fa7a 	bl	80085e8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80080f4:	7bfb      	ldrb	r3, [r7, #15]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d004      	beq.n	8008104 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2202      	movs	r2, #2
 80080fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008102:	e009      	b.n	8008118 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800810c:	e004      	b.n	8008118 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800810e:	6839      	ldr	r1, [r7, #0]
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f000 f99e 	bl	8008452 <USBD_CtlError>
  }
}
 8008116:	bf00      	nop
 8008118:	bf00      	nop
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	885b      	ldrh	r3, [r3, #2]
 8008132:	b2da      	uxtb	r2, r3
 8008134:	4b4e      	ldr	r3, [pc, #312]	; (8008270 <USBD_SetConfig+0x150>)
 8008136:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008138:	4b4d      	ldr	r3, [pc, #308]	; (8008270 <USBD_SetConfig+0x150>)
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d905      	bls.n	800814c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008140:	6839      	ldr	r1, [r7, #0]
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 f985 	bl	8008452 <USBD_CtlError>
    return USBD_FAIL;
 8008148:	2303      	movs	r3, #3
 800814a:	e08c      	b.n	8008266 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008152:	b2db      	uxtb	r3, r3
 8008154:	2b02      	cmp	r3, #2
 8008156:	d002      	beq.n	800815e <USBD_SetConfig+0x3e>
 8008158:	2b03      	cmp	r3, #3
 800815a:	d029      	beq.n	80081b0 <USBD_SetConfig+0x90>
 800815c:	e075      	b.n	800824a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800815e:	4b44      	ldr	r3, [pc, #272]	; (8008270 <USBD_SetConfig+0x150>)
 8008160:	781b      	ldrb	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d020      	beq.n	80081a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008166:	4b42      	ldr	r3, [pc, #264]	; (8008270 <USBD_SetConfig+0x150>)
 8008168:	781b      	ldrb	r3, [r3, #0]
 800816a:	461a      	mov	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008170:	4b3f      	ldr	r3, [pc, #252]	; (8008270 <USBD_SetConfig+0x150>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7fe ffb7 	bl	80070ea <USBD_SetClassConfig>
 800817c:	4603      	mov	r3, r0
 800817e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008180:	7bfb      	ldrb	r3, [r7, #15]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d008      	beq.n	8008198 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f962 	bl	8008452 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2202      	movs	r2, #2
 8008192:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008196:	e065      	b.n	8008264 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f000 fa25 	bl	80085e8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2203      	movs	r2, #3
 80081a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80081a6:	e05d      	b.n	8008264 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fa1d 	bl	80085e8 <USBD_CtlSendStatus>
      break;
 80081ae:	e059      	b.n	8008264 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80081b0:	4b2f      	ldr	r3, [pc, #188]	; (8008270 <USBD_SetConfig+0x150>)
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d112      	bne.n	80081de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	2202      	movs	r2, #2
 80081bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80081c0:	4b2b      	ldr	r3, [pc, #172]	; (8008270 <USBD_SetConfig+0x150>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	461a      	mov	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80081ca:	4b29      	ldr	r3, [pc, #164]	; (8008270 <USBD_SetConfig+0x150>)
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	4619      	mov	r1, r3
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f7fe ffa6 	bl	8007122 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa06 	bl	80085e8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80081dc:	e042      	b.n	8008264 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80081de:	4b24      	ldr	r3, [pc, #144]	; (8008270 <USBD_SetConfig+0x150>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d02a      	beq.n	8008242 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	b2db      	uxtb	r3, r3
 80081f2:	4619      	mov	r1, r3
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7fe ff94 	bl	8007122 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80081fa:	4b1d      	ldr	r3, [pc, #116]	; (8008270 <USBD_SetConfig+0x150>)
 80081fc:	781b      	ldrb	r3, [r3, #0]
 80081fe:	461a      	mov	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008204:	4b1a      	ldr	r3, [pc, #104]	; (8008270 <USBD_SetConfig+0x150>)
 8008206:	781b      	ldrb	r3, [r3, #0]
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7fe ff6d 	bl	80070ea <USBD_SetClassConfig>
 8008210:	4603      	mov	r3, r0
 8008212:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00f      	beq.n	800823a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800821a:	6839      	ldr	r1, [r7, #0]
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f000 f918 	bl	8008452 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	b2db      	uxtb	r3, r3
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7fe ff79 	bl	8007122 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2202      	movs	r2, #2
 8008234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008238:	e014      	b.n	8008264 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 f9d4 	bl	80085e8 <USBD_CtlSendStatus>
      break;
 8008240:	e010      	b.n	8008264 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f9d0 	bl	80085e8 <USBD_CtlSendStatus>
      break;
 8008248:	e00c      	b.n	8008264 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800824a:	6839      	ldr	r1, [r7, #0]
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f900 	bl	8008452 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008252:	4b07      	ldr	r3, [pc, #28]	; (8008270 <USBD_SetConfig+0x150>)
 8008254:	781b      	ldrb	r3, [r3, #0]
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7fe ff62 	bl	8007122 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800825e:	2303      	movs	r3, #3
 8008260:	73fb      	strb	r3, [r7, #15]
      break;
 8008262:	bf00      	nop
  }

  return ret;
 8008264:	7bfb      	ldrb	r3, [r7, #15]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3710      	adds	r7, #16
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	200003a4 	.word	0x200003a4

08008274 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	88db      	ldrh	r3, [r3, #6]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d004      	beq.n	8008290 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008286:	6839      	ldr	r1, [r7, #0]
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f000 f8e2 	bl	8008452 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800828e:	e023      	b.n	80082d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b02      	cmp	r3, #2
 800829a:	dc02      	bgt.n	80082a2 <USBD_GetConfig+0x2e>
 800829c:	2b00      	cmp	r3, #0
 800829e:	dc03      	bgt.n	80082a8 <USBD_GetConfig+0x34>
 80082a0:	e015      	b.n	80082ce <USBD_GetConfig+0x5a>
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d00b      	beq.n	80082be <USBD_GetConfig+0x4a>
 80082a6:	e012      	b.n	80082ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	3308      	adds	r3, #8
 80082b2:	2201      	movs	r2, #1
 80082b4:	4619      	mov	r1, r3
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f000 f93c 	bl	8008534 <USBD_CtlSendData>
        break;
 80082bc:	e00c      	b.n	80082d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	3304      	adds	r3, #4
 80082c2:	2201      	movs	r2, #1
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f934 	bl	8008534 <USBD_CtlSendData>
        break;
 80082cc:	e004      	b.n	80082d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80082ce:	6839      	ldr	r1, [r7, #0]
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f8be 	bl	8008452 <USBD_CtlError>
        break;
 80082d6:	bf00      	nop
}
 80082d8:	bf00      	nop
 80082da:	3708      	adds	r7, #8
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
 80082e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	3b01      	subs	r3, #1
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	d81e      	bhi.n	8008336 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	88db      	ldrh	r3, [r3, #6]
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	d004      	beq.n	800830a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f8a5 	bl	8008452 <USBD_CtlError>
        break;
 8008308:	e01a      	b.n	8008340 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008316:	2b00      	cmp	r3, #0
 8008318:	d005      	beq.n	8008326 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f043 0202 	orr.w	r2, r3, #2
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	330c      	adds	r3, #12
 800832a:	2202      	movs	r2, #2
 800832c:	4619      	mov	r1, r3
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 f900 	bl	8008534 <USBD_CtlSendData>
      break;
 8008334:	e004      	b.n	8008340 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008336:	6839      	ldr	r1, [r7, #0]
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f88a 	bl	8008452 <USBD_CtlError>
      break;
 800833e:	bf00      	nop
  }
}
 8008340:	bf00      	nop
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	885b      	ldrh	r3, [r3, #2]
 8008356:	2b01      	cmp	r3, #1
 8008358:	d107      	bne.n	800836a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2201      	movs	r2, #1
 800835e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f940 	bl	80085e8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008368:	e013      	b.n	8008392 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	885b      	ldrh	r3, [r3, #2]
 800836e:	2b02      	cmp	r3, #2
 8008370:	d10b      	bne.n	800838a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	889b      	ldrh	r3, [r3, #4]
 8008376:	0a1b      	lsrs	r3, r3, #8
 8008378:	b29b      	uxth	r3, r3
 800837a:	b2da      	uxtb	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f930 	bl	80085e8 <USBD_CtlSendStatus>
}
 8008388:	e003      	b.n	8008392 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800838a:	6839      	ldr	r1, [r7, #0]
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f860 	bl	8008452 <USBD_CtlError>
}
 8008392:	bf00      	nop
 8008394:	3708      	adds	r7, #8
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}

0800839a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800839a:	b580      	push	{r7, lr}
 800839c:	b082      	sub	sp, #8
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
 80083a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083aa:	b2db      	uxtb	r3, r3
 80083ac:	3b01      	subs	r3, #1
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d80b      	bhi.n	80083ca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	885b      	ldrh	r3, [r3, #2]
 80083b6:	2b01      	cmp	r3, #1
 80083b8:	d10c      	bne.n	80083d4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f910 	bl	80085e8 <USBD_CtlSendStatus>
      }
      break;
 80083c8:	e004      	b.n	80083d4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f000 f840 	bl	8008452 <USBD_CtlError>
      break;
 80083d2:	e000      	b.n	80083d6 <USBD_ClrFeature+0x3c>
      break;
 80083d4:	bf00      	nop
  }
}
 80083d6:	bf00      	nop
 80083d8:	3708      	adds	r7, #8
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	781a      	ldrb	r2, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	3301      	adds	r3, #1
 80083f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	781a      	ldrb	r2, [r3, #0]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	3301      	adds	r3, #1
 8008406:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f7ff fa17 	bl	800783c <SWAPBYTE>
 800840e:	4603      	mov	r3, r0
 8008410:	461a      	mov	r2, r3
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3301      	adds	r3, #1
 800841a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3301      	adds	r3, #1
 8008420:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008422:	68f8      	ldr	r0, [r7, #12]
 8008424:	f7ff fa0a 	bl	800783c <SWAPBYTE>
 8008428:	4603      	mov	r3, r0
 800842a:	461a      	mov	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	3301      	adds	r3, #1
 8008434:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	3301      	adds	r3, #1
 800843a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f7ff f9fd 	bl	800783c <SWAPBYTE>
 8008442:	4603      	mov	r3, r0
 8008444:	461a      	mov	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	80da      	strh	r2, [r3, #6]
}
 800844a:	bf00      	nop
 800844c:	3710      	adds	r7, #16
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008452:	b580      	push	{r7, lr}
 8008454:	b082      	sub	sp, #8
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800845c:	2180      	movs	r1, #128	; 0x80
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 fd08 	bl	8008e74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008464:	2100      	movs	r1, #0
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fd04 	bl	8008e74 <USBD_LL_StallEP>
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008480:	2300      	movs	r3, #0
 8008482:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d036      	beq.n	80084f8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800848e:	6938      	ldr	r0, [r7, #16]
 8008490:	f000 f836 	bl	8008500 <USBD_GetLen>
 8008494:	4603      	mov	r3, r0
 8008496:	3301      	adds	r3, #1
 8008498:	b29b      	uxth	r3, r3
 800849a:	005b      	lsls	r3, r3, #1
 800849c:	b29a      	uxth	r2, r3
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	4413      	add	r3, r2
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	7812      	ldrb	r2, [r2, #0]
 80084ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80084ae:	7dfb      	ldrb	r3, [r7, #23]
 80084b0:	3301      	adds	r3, #1
 80084b2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	68ba      	ldr	r2, [r7, #8]
 80084b8:	4413      	add	r3, r2
 80084ba:	2203      	movs	r2, #3
 80084bc:	701a      	strb	r2, [r3, #0]
  idx++;
 80084be:	7dfb      	ldrb	r3, [r7, #23]
 80084c0:	3301      	adds	r3, #1
 80084c2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80084c4:	e013      	b.n	80084ee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	4413      	add	r3, r2
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	7812      	ldrb	r2, [r2, #0]
 80084d0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	3301      	adds	r3, #1
 80084d6:	613b      	str	r3, [r7, #16]
    idx++;
 80084d8:	7dfb      	ldrb	r3, [r7, #23]
 80084da:	3301      	adds	r3, #1
 80084dc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	68ba      	ldr	r2, [r7, #8]
 80084e2:	4413      	add	r3, r2
 80084e4:	2200      	movs	r2, #0
 80084e6:	701a      	strb	r2, [r3, #0]
    idx++;
 80084e8:	7dfb      	ldrb	r3, [r7, #23]
 80084ea:	3301      	adds	r3, #1
 80084ec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1e7      	bne.n	80084c6 <USBD_GetString+0x52>
 80084f6:	e000      	b.n	80084fa <USBD_GetString+0x86>
    return;
 80084f8:	bf00      	nop
  }
}
 80084fa:	3718      	adds	r7, #24
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008500:	b480      	push	{r7}
 8008502:	b085      	sub	sp, #20
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008508:	2300      	movs	r3, #0
 800850a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008510:	e005      	b.n	800851e <USBD_GetLen+0x1e>
  {
    len++;
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	3301      	adds	r3, #1
 8008516:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	3301      	adds	r3, #1
 800851c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1f5      	bne.n	8008512 <USBD_GetLen+0x12>
  }

  return len;
 8008526:	7bfb      	ldrb	r3, [r7, #15]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3714      	adds	r7, #20
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	60f8      	str	r0, [r7, #12]
 800853c:	60b9      	str	r1, [r7, #8]
 800853e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2202      	movs	r2, #2
 8008544:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	687a      	ldr	r2, [r7, #4]
 800854c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	2100      	movs	r1, #0
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 fd58 	bl	8009010 <USBD_LL_Transmit>

  return USBD_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	60f8      	str	r0, [r7, #12]
 8008572:	60b9      	str	r1, [r7, #8]
 8008574:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	2100      	movs	r1, #0
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 fd47 	bl	8009010 <USBD_LL_Transmit>

  return USBD_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	60b9      	str	r1, [r7, #8]
 8008596:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2203      	movs	r2, #3
 800859c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	68ba      	ldr	r2, [r7, #8]
 80085b4:	2100      	movs	r1, #0
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f000 fd62 	bl	8009080 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	60f8      	str	r0, [r7, #12]
 80085ce:	60b9      	str	r1, [r7, #8]
 80085d0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	2100      	movs	r1, #0
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 fd51 	bl	8009080 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80085de:	2300      	movs	r3, #0
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	3710      	adds	r7, #16
 80085e4:	46bd      	mov	sp, r7
 80085e6:	bd80      	pop	{r7, pc}

080085e8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b082      	sub	sp, #8
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2204      	movs	r2, #4
 80085f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80085f8:	2300      	movs	r3, #0
 80085fa:	2200      	movs	r2, #0
 80085fc:	2100      	movs	r1, #0
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 fd06 	bl	8009010 <USBD_LL_Transmit>

  return USBD_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b082      	sub	sp, #8
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2205      	movs	r2, #5
 800861a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800861e:	2300      	movs	r3, #0
 8008620:	2200      	movs	r2, #0
 8008622:	2100      	movs	r1, #0
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fd2b 	bl	8009080 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3708      	adds	r7, #8
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008638:	2200      	movs	r2, #0
 800863a:	4912      	ldr	r1, [pc, #72]	; (8008684 <MX_USB_DEVICE_Init+0x50>)
 800863c:	4812      	ldr	r0, [pc, #72]	; (8008688 <MX_USB_DEVICE_Init+0x54>)
 800863e:	f7fe fcd7 	bl	8006ff0 <USBD_Init>
 8008642:	4603      	mov	r3, r0
 8008644:	2b00      	cmp	r3, #0
 8008646:	d001      	beq.n	800864c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008648:	f7f8 fad0 	bl	8000bec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800864c:	490f      	ldr	r1, [pc, #60]	; (800868c <MX_USB_DEVICE_Init+0x58>)
 800864e:	480e      	ldr	r0, [pc, #56]	; (8008688 <MX_USB_DEVICE_Init+0x54>)
 8008650:	f7fe fcfe 	bl	8007050 <USBD_RegisterClass>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800865a:	f7f8 fac7 	bl	8000bec <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800865e:	490c      	ldr	r1, [pc, #48]	; (8008690 <MX_USB_DEVICE_Init+0x5c>)
 8008660:	4809      	ldr	r0, [pc, #36]	; (8008688 <MX_USB_DEVICE_Init+0x54>)
 8008662:	f7fe fcab 	bl	8006fbc <USBD_CUSTOM_HID_RegisterInterface>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800866c:	f7f8 fabe 	bl	8000bec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008670:	4805      	ldr	r0, [pc, #20]	; (8008688 <MX_USB_DEVICE_Init+0x54>)
 8008672:	f7fe fd23 	bl	80070bc <USBD_Start>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d001      	beq.n	8008680 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800867c:	f7f8 fab6 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008680:	bf00      	nop
 8008682:	bd80      	pop	{r7, pc}
 8008684:	200000b8 	.word	0x200000b8
 8008688:	200003a8 	.word	0x200003a8
 800868c:	2000000c 	.word	0x2000000c
 8008690:	200000a8 	.word	0x200000a8

08008694 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8008694:	b480      	push	{r7}
 8008696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008698:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800869a:	4618      	mov	r0, r3
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80086a8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	4603      	mov	r3, r0
 80086bc:	460a      	mov	r2, r1
 80086be:	71fb      	strb	r3, [r7, #7]
 80086c0:	4613      	mov	r3, r2
 80086c2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 80086c4:	4803      	ldr	r0, [pc, #12]	; (80086d4 <CUSTOM_HID_OutEvent_FS+0x20>)
 80086c6:	f7fe fc17 	bl	8006ef8 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 80086ca:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	200003a8 	.word	0x200003a8

080086d8 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  report: The report to be sent
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 80086e4:	887b      	ldrh	r3, [r7, #2]
 80086e6:	461a      	mov	r2, r3
 80086e8:	6879      	ldr	r1, [r7, #4]
 80086ea:	4804      	ldr	r0, [pc, #16]	; (80086fc <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 80086ec:	f7fe faf8 	bl	8006ce0 <USBD_CUSTOM_HID_SendReport>
 80086f0:	4603      	mov	r3, r0
 80086f2:	b25b      	sxtb	r3, r3
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3708      	adds	r7, #8
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	200003a8 	.word	0x200003a8

08008700 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	4603      	mov	r3, r0
 8008708:	6039      	str	r1, [r7, #0]
 800870a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800870c:	683b      	ldr	r3, [r7, #0]
 800870e:	2212      	movs	r2, #18
 8008710:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008712:	4b03      	ldr	r3, [pc, #12]	; (8008720 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008714:	4618      	mov	r0, r3
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	200000d8 	.word	0x200000d8

08008724 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	4603      	mov	r3, r0
 800872c:	6039      	str	r1, [r7, #0]
 800872e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	2204      	movs	r2, #4
 8008734:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008736:	4b03      	ldr	r3, [pc, #12]	; (8008744 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr
 8008744:	200000f8 	.word	0x200000f8

08008748 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b082      	sub	sp, #8
 800874c:	af00      	add	r7, sp, #0
 800874e:	4603      	mov	r3, r0
 8008750:	6039      	str	r1, [r7, #0]
 8008752:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008754:	79fb      	ldrb	r3, [r7, #7]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d105      	bne.n	8008766 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	4907      	ldr	r1, [pc, #28]	; (800877c <USBD_FS_ProductStrDescriptor+0x34>)
 800875e:	4808      	ldr	r0, [pc, #32]	; (8008780 <USBD_FS_ProductStrDescriptor+0x38>)
 8008760:	f7ff fe88 	bl	8008474 <USBD_GetString>
 8008764:	e004      	b.n	8008770 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	4904      	ldr	r1, [pc, #16]	; (800877c <USBD_FS_ProductStrDescriptor+0x34>)
 800876a:	4805      	ldr	r0, [pc, #20]	; (8008780 <USBD_FS_ProductStrDescriptor+0x38>)
 800876c:	f7ff fe82 	bl	8008474 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008770:	4b02      	ldr	r3, [pc, #8]	; (800877c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008772:	4618      	mov	r0, r3
 8008774:	3708      	adds	r7, #8
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	20000684 	.word	0x20000684
 8008780:	08009238 	.word	0x08009238

08008784 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b082      	sub	sp, #8
 8008788:	af00      	add	r7, sp, #0
 800878a:	4603      	mov	r3, r0
 800878c:	6039      	str	r1, [r7, #0]
 800878e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008790:	683a      	ldr	r2, [r7, #0]
 8008792:	4904      	ldr	r1, [pc, #16]	; (80087a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008794:	4804      	ldr	r0, [pc, #16]	; (80087a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008796:	f7ff fe6d 	bl	8008474 <USBD_GetString>
  return USBD_StrDesc;
 800879a:	4b02      	ldr	r3, [pc, #8]	; (80087a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800879c:	4618      	mov	r0, r3
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20000684 	.word	0x20000684
 80087a8:	08009258 	.word	0x08009258

080087ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	4603      	mov	r3, r0
 80087b4:	6039      	str	r1, [r7, #0]
 80087b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	221a      	movs	r2, #26
 80087bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80087be:	f000 f855 	bl	800886c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80087c2:	4b02      	ldr	r3, [pc, #8]	; (80087cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}
 80087cc:	200000fc 	.word	0x200000fc

080087d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b082      	sub	sp, #8
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	4603      	mov	r3, r0
 80087d8:	6039      	str	r1, [r7, #0]
 80087da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80087dc:	79fb      	ldrb	r3, [r7, #7]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d105      	bne.n	80087ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	4907      	ldr	r1, [pc, #28]	; (8008804 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087e6:	4808      	ldr	r0, [pc, #32]	; (8008808 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087e8:	f7ff fe44 	bl	8008474 <USBD_GetString>
 80087ec:	e004      	b.n	80087f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80087ee:	683a      	ldr	r2, [r7, #0]
 80087f0:	4904      	ldr	r1, [pc, #16]	; (8008804 <USBD_FS_ConfigStrDescriptor+0x34>)
 80087f2:	4805      	ldr	r0, [pc, #20]	; (8008808 <USBD_FS_ConfigStrDescriptor+0x38>)
 80087f4:	f7ff fe3e 	bl	8008474 <USBD_GetString>
  }
  return USBD_StrDesc;
 80087f8:	4b02      	ldr	r3, [pc, #8]	; (8008804 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	20000684 	.word	0x20000684
 8008808:	0800926c 	.word	0x0800926c

0800880c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	4603      	mov	r3, r0
 8008814:	6039      	str	r1, [r7, #0]
 8008816:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d105      	bne.n	800882a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800881e:	683a      	ldr	r2, [r7, #0]
 8008820:	4907      	ldr	r1, [pc, #28]	; (8008840 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008822:	4808      	ldr	r0, [pc, #32]	; (8008844 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008824:	f7ff fe26 	bl	8008474 <USBD_GetString>
 8008828:	e004      	b.n	8008834 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800882a:	683a      	ldr	r2, [r7, #0]
 800882c:	4904      	ldr	r1, [pc, #16]	; (8008840 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800882e:	4805      	ldr	r0, [pc, #20]	; (8008844 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008830:	f7ff fe20 	bl	8008474 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008834:	4b02      	ldr	r3, [pc, #8]	; (8008840 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008836:	4618      	mov	r0, r3
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	20000684 	.word	0x20000684
 8008844:	08009280 	.word	0x08009280

08008848 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	4603      	mov	r3, r0
 8008850:	6039      	str	r1, [r7, #0]
 8008852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	220c      	movs	r2, #12
 8008858:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800885a:	4b03      	ldr	r3, [pc, #12]	; (8008868 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800885c:	4618      	mov	r0, r3
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr
 8008868:	200000ec 	.word	0x200000ec

0800886c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b084      	sub	sp, #16
 8008870:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008872:	4b0f      	ldr	r3, [pc, #60]	; (80088b0 <Get_SerialNum+0x44>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008878:	4b0e      	ldr	r3, [pc, #56]	; (80088b4 <Get_SerialNum+0x48>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800887e:	4b0e      	ldr	r3, [pc, #56]	; (80088b8 <Get_SerialNum+0x4c>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	4413      	add	r3, r2
 800888a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d009      	beq.n	80088a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008892:	2208      	movs	r2, #8
 8008894:	4909      	ldr	r1, [pc, #36]	; (80088bc <Get_SerialNum+0x50>)
 8008896:	68f8      	ldr	r0, [r7, #12]
 8008898:	f000 f814 	bl	80088c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800889c:	2204      	movs	r2, #4
 800889e:	4908      	ldr	r1, [pc, #32]	; (80088c0 <Get_SerialNum+0x54>)
 80088a0:	68b8      	ldr	r0, [r7, #8]
 80088a2:	f000 f80f 	bl	80088c4 <IntToUnicode>
  }
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	1fff7590 	.word	0x1fff7590
 80088b4:	1fff7594 	.word	0x1fff7594
 80088b8:	1fff7598 	.word	0x1fff7598
 80088bc:	200000fe 	.word	0x200000fe
 80088c0:	2000010e 	.word	0x2000010e

080088c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	60f8      	str	r0, [r7, #12]
 80088cc:	60b9      	str	r1, [r7, #8]
 80088ce:	4613      	mov	r3, r2
 80088d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80088d2:	2300      	movs	r3, #0
 80088d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80088d6:	2300      	movs	r3, #0
 80088d8:	75fb      	strb	r3, [r7, #23]
 80088da:	e027      	b.n	800892c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	0f1b      	lsrs	r3, r3, #28
 80088e0:	2b09      	cmp	r3, #9
 80088e2:	d80b      	bhi.n	80088fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	0f1b      	lsrs	r3, r3, #28
 80088e8:	b2da      	uxtb	r2, r3
 80088ea:	7dfb      	ldrb	r3, [r7, #23]
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	4619      	mov	r1, r3
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	440b      	add	r3, r1
 80088f4:	3230      	adds	r2, #48	; 0x30
 80088f6:	b2d2      	uxtb	r2, r2
 80088f8:	701a      	strb	r2, [r3, #0]
 80088fa:	e00a      	b.n	8008912 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	0f1b      	lsrs	r3, r3, #28
 8008900:	b2da      	uxtb	r2, r3
 8008902:	7dfb      	ldrb	r3, [r7, #23]
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	4619      	mov	r1, r3
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	440b      	add	r3, r1
 800890c:	3237      	adds	r2, #55	; 0x37
 800890e:	b2d2      	uxtb	r2, r2
 8008910:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	011b      	lsls	r3, r3, #4
 8008916:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008918:	7dfb      	ldrb	r3, [r7, #23]
 800891a:	005b      	lsls	r3, r3, #1
 800891c:	3301      	adds	r3, #1
 800891e:	68ba      	ldr	r2, [r7, #8]
 8008920:	4413      	add	r3, r2
 8008922:	2200      	movs	r2, #0
 8008924:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008926:	7dfb      	ldrb	r3, [r7, #23]
 8008928:	3301      	adds	r3, #1
 800892a:	75fb      	strb	r3, [r7, #23]
 800892c:	7dfa      	ldrb	r2, [r7, #23]
 800892e:	79fb      	ldrb	r3, [r7, #7]
 8008930:	429a      	cmp	r2, r3
 8008932:	d3d3      	bcc.n	80088dc <IntToUnicode+0x18>
  }
}
 8008934:	bf00      	nop
 8008936:	bf00      	nop
 8008938:	371c      	adds	r7, #28
 800893a:	46bd      	mov	sp, r7
 800893c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008940:	4770      	bx	lr
	...

08008944 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b0ac      	sub	sp, #176	; 0xb0
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800894c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008950:	2200      	movs	r2, #0
 8008952:	601a      	str	r2, [r3, #0]
 8008954:	605a      	str	r2, [r3, #4]
 8008956:	609a      	str	r2, [r3, #8]
 8008958:	60da      	str	r2, [r3, #12]
 800895a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800895c:	f107 0314 	add.w	r3, r7, #20
 8008960:	2288      	movs	r2, #136	; 0x88
 8008962:	2100      	movs	r1, #0
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fc2f 	bl	80091c8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008972:	f040 8085 	bne.w	8008a80 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8008976:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800897a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800897c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8008984:	2301      	movs	r3, #1
 8008986:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008988:	2301      	movs	r3, #1
 800898a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800898c:	2318      	movs	r3, #24
 800898e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008990:	2307      	movs	r3, #7
 8008992:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8008994:	2302      	movs	r3, #2
 8008996:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8008998:	2302      	movs	r3, #2
 800899a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800899c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80089a0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80089a2:	f107 0314 	add.w	r3, r7, #20
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fb fa6e 	bl	8003e88 <HAL_RCCEx_PeriphCLKConfig>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d001      	beq.n	80089b6 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 80089b2:	f7f8 f91b 	bl	8000bec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80089b6:	4b34      	ldr	r3, [pc, #208]	; (8008a88 <HAL_PCD_MspInit+0x144>)
 80089b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089ba:	4a33      	ldr	r2, [pc, #204]	; (8008a88 <HAL_PCD_MspInit+0x144>)
 80089bc:	f043 0301 	orr.w	r3, r3, #1
 80089c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80089c2:	4b31      	ldr	r3, [pc, #196]	; (8008a88 <HAL_PCD_MspInit+0x144>)
 80089c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80089c6:	f003 0301 	and.w	r3, r3, #1
 80089ca:	613b      	str	r3, [r7, #16]
 80089cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80089ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089d2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089d6:	2300      	movs	r3, #0
 80089d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089dc:	2300      	movs	r3, #0
 80089de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80089e2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80089e6:	4619      	mov	r1, r3
 80089e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80089ec:	f7f8 fe66 	bl	80016bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80089f0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80089f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089f8:	2302      	movs	r3, #2
 80089fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089fe:	2300      	movs	r3, #0
 8008a00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008a04:	2303      	movs	r3, #3
 8008a06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008a0a:	230a      	movs	r3, #10
 8008a0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008a14:	4619      	mov	r1, r3
 8008a16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008a1a:	f7f8 fe4f 	bl	80016bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008a1e:	4b1a      	ldr	r3, [pc, #104]	; (8008a88 <HAL_PCD_MspInit+0x144>)
 8008a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a22:	4a19      	ldr	r2, [pc, #100]	; (8008a88 <HAL_PCD_MspInit+0x144>)
 8008a24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a2a:	4b17      	ldr	r3, [pc, #92]	; (8008a88 <HAL_PCD_MspInit+0x144>)
 8008a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a36:	4b14      	ldr	r3, [pc, #80]	; (8008a88 <HAL_PCD_MspInit+0x144>)
 8008a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d114      	bne.n	8008a6c <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a42:	4b11      	ldr	r3, [pc, #68]	; (8008a88 <HAL_PCD_MspInit+0x144>)
 8008a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a46:	4a10      	ldr	r2, [pc, #64]	; (8008a88 <HAL_PCD_MspInit+0x144>)
 8008a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8008a4e:	4b0e      	ldr	r3, [pc, #56]	; (8008a88 <HAL_PCD_MspInit+0x144>)
 8008a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a56:	60bb      	str	r3, [r7, #8]
 8008a58:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008a5a:	f7fa fb49 	bl	80030f0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a5e:	4b0a      	ldr	r3, [pc, #40]	; (8008a88 <HAL_PCD_MspInit+0x144>)
 8008a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a62:	4a09      	ldr	r2, [pc, #36]	; (8008a88 <HAL_PCD_MspInit+0x144>)
 8008a64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a68:	6593      	str	r3, [r2, #88]	; 0x58
 8008a6a:	e001      	b.n	8008a70 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008a6c:	f7fa fb40 	bl	80030f0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008a70:	2200      	movs	r2, #0
 8008a72:	2100      	movs	r1, #0
 8008a74:	2043      	movs	r0, #67	; 0x43
 8008a76:	f7f8 fcde 	bl	8001436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008a7a:	2043      	movs	r0, #67	; 0x43
 8008a7c:	f7f8 fcf7 	bl	800146e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008a80:	bf00      	nop
 8008a82:	37b0      	adds	r7, #176	; 0xb0
 8008a84:	46bd      	mov	sp, r7
 8008a86:	bd80      	pop	{r7, pc}
 8008a88:	40021000 	.word	0x40021000

08008a8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b082      	sub	sp, #8
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	4610      	mov	r0, r2
 8008aa4:	f7fe fb57 	bl	8007156 <USBD_LL_SetupStage>
}
 8008aa8:	bf00      	nop
 8008aaa:	3708      	adds	r7, #8
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b082      	sub	sp, #8
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008ac2:	78fa      	ldrb	r2, [r7, #3]
 8008ac4:	6879      	ldr	r1, [r7, #4]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	00db      	lsls	r3, r3, #3
 8008aca:	4413      	add	r3, r2
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	440b      	add	r3, r1
 8008ad0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	78fb      	ldrb	r3, [r7, #3]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	f7fe fb91 	bl	8007200 <USBD_LL_DataOutStage>
}
 8008ade:	bf00      	nop
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b082      	sub	sp, #8
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	460b      	mov	r3, r1
 8008af0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008af8:	78fa      	ldrb	r2, [r7, #3]
 8008afa:	6879      	ldr	r1, [r7, #4]
 8008afc:	4613      	mov	r3, r2
 8008afe:	00db      	lsls	r3, r3, #3
 8008b00:	4413      	add	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	440b      	add	r3, r1
 8008b06:	3348      	adds	r3, #72	; 0x48
 8008b08:	681a      	ldr	r2, [r3, #0]
 8008b0a:	78fb      	ldrb	r3, [r7, #3]
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	f7fe fc2a 	bl	8007366 <USBD_LL_DataInStage>
}
 8008b12:	bf00      	nop
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b1a:	b580      	push	{r7, lr}
 8008b1c:	b082      	sub	sp, #8
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7fe fd64 	bl	80075f6 <USBD_LL_SOF>
}
 8008b2e:	bf00      	nop
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}

08008b36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b36:	b580      	push	{r7, lr}
 8008b38:	b084      	sub	sp, #16
 8008b3a:	af00      	add	r7, sp, #0
 8008b3c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d001      	beq.n	8008b4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008b4a:	f7f8 f84f 	bl	8000bec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b54:	7bfa      	ldrb	r2, [r7, #15]
 8008b56:	4611      	mov	r1, r2
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fe fd08 	bl	800756e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fe fcb0 	bl	80074ca <USBD_LL_Reset>
}
 8008b6a:	bf00      	nop
 8008b6c:	3710      	adds	r7, #16
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
	...

08008b74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	6812      	ldr	r2, [r2, #0]
 8008b8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008b8e:	f043 0301 	orr.w	r3, r3, #1
 8008b92:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fe fcf7 	bl	800758e <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a1b      	ldr	r3, [r3, #32]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d005      	beq.n	8008bb4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ba8:	4b04      	ldr	r3, [pc, #16]	; (8008bbc <HAL_PCD_SuspendCallback+0x48>)
 8008baa:	691b      	ldr	r3, [r3, #16]
 8008bac:	4a03      	ldr	r2, [pc, #12]	; (8008bbc <HAL_PCD_SuspendCallback+0x48>)
 8008bae:	f043 0306 	orr.w	r3, r3, #6
 8008bb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008bb4:	bf00      	nop
 8008bb6:	3708      	adds	r7, #8
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}
 8008bbc:	e000ed00 	.word	0xe000ed00

08008bc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	6812      	ldr	r2, [r2, #0]
 8008bd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008bda:	f023 0301 	bic.w	r3, r3, #1
 8008bde:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d007      	beq.n	8008bf8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008be8:	4b08      	ldr	r3, [pc, #32]	; (8008c0c <HAL_PCD_ResumeCallback+0x4c>)
 8008bea:	691b      	ldr	r3, [r3, #16]
 8008bec:	4a07      	ldr	r2, [pc, #28]	; (8008c0c <HAL_PCD_ResumeCallback+0x4c>)
 8008bee:	f023 0306 	bic.w	r3, r3, #6
 8008bf2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008bf4:	f000 fae2 	bl	80091bc <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fe fce1 	bl	80075c6 <USBD_LL_Resume>
}
 8008c04:	bf00      	nop
 8008c06:	3708      	adds	r7, #8
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}
 8008c0c:	e000ed00 	.word	0xe000ed00

08008c10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b082      	sub	sp, #8
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	460b      	mov	r3, r1
 8008c1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c22:	78fa      	ldrb	r2, [r7, #3]
 8008c24:	4611      	mov	r1, r2
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe fd37 	bl	800769a <USBD_LL_IsoOUTIncomplete>
}
 8008c2c:	bf00      	nop
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c46:	78fa      	ldrb	r2, [r7, #3]
 8008c48:	4611      	mov	r1, r2
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe fcf3 	bl	8007636 <USBD_LL_IsoINIncomplete>
}
 8008c50:	bf00      	nop
 8008c52:	3708      	adds	r7, #8
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c66:	4618      	mov	r0, r3
 8008c68:	f7fe fd49 	bl	80076fe <USBD_LL_DevConnected>
}
 8008c6c:	bf00      	nop
 8008c6e:	3708      	adds	r7, #8
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bd80      	pop	{r7, pc}

08008c74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b082      	sub	sp, #8
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe fd46 	bl	8007714 <USBD_LL_DevDisconnected>
}
 8008c88:	bf00      	nop
 8008c8a:	3708      	adds	r7, #8
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}

08008c90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d13c      	bne.n	8008d1a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ca0:	4a20      	ldr	r2, [pc, #128]	; (8008d24 <USBD_LL_Init+0x94>)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	4a1e      	ldr	r2, [pc, #120]	; (8008d24 <USBD_LL_Init+0x94>)
 8008cac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008cb0:	4b1c      	ldr	r3, [pc, #112]	; (8008d24 <USBD_LL_Init+0x94>)
 8008cb2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008cb6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008cb8:	4b1a      	ldr	r3, [pc, #104]	; (8008d24 <USBD_LL_Init+0x94>)
 8008cba:	2206      	movs	r2, #6
 8008cbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008cbe:	4b19      	ldr	r3, [pc, #100]	; (8008d24 <USBD_LL_Init+0x94>)
 8008cc0:	2202      	movs	r2, #2
 8008cc2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008cc4:	4b17      	ldr	r3, [pc, #92]	; (8008d24 <USBD_LL_Init+0x94>)
 8008cc6:	2202      	movs	r2, #2
 8008cc8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008cca:	4b16      	ldr	r3, [pc, #88]	; (8008d24 <USBD_LL_Init+0x94>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008cd0:	4b14      	ldr	r3, [pc, #80]	; (8008d24 <USBD_LL_Init+0x94>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008cd6:	4b13      	ldr	r3, [pc, #76]	; (8008d24 <USBD_LL_Init+0x94>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008cdc:	4b11      	ldr	r3, [pc, #68]	; (8008d24 <USBD_LL_Init+0x94>)
 8008cde:	2200      	movs	r2, #0
 8008ce0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008ce2:	4b10      	ldr	r3, [pc, #64]	; (8008d24 <USBD_LL_Init+0x94>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008ce8:	4b0e      	ldr	r3, [pc, #56]	; (8008d24 <USBD_LL_Init+0x94>)
 8008cea:	2200      	movs	r2, #0
 8008cec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008cee:	480d      	ldr	r0, [pc, #52]	; (8008d24 <USBD_LL_Init+0x94>)
 8008cf0:	f7f8 fffb 	bl	8001cea <HAL_PCD_Init>
 8008cf4:	4603      	mov	r3, r0
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d001      	beq.n	8008cfe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008cfa:	f7f7 ff77 	bl	8000bec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008cfe:	2180      	movs	r1, #128	; 0x80
 8008d00:	4808      	ldr	r0, [pc, #32]	; (8008d24 <USBD_LL_Init+0x94>)
 8008d02:	f7fa f94c 	bl	8002f9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008d06:	2240      	movs	r2, #64	; 0x40
 8008d08:	2100      	movs	r1, #0
 8008d0a:	4806      	ldr	r0, [pc, #24]	; (8008d24 <USBD_LL_Init+0x94>)
 8008d0c:	f7fa f900 	bl	8002f10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008d10:	2280      	movs	r2, #128	; 0x80
 8008d12:	2101      	movs	r1, #1
 8008d14:	4803      	ldr	r0, [pc, #12]	; (8008d24 <USBD_LL_Init+0x94>)
 8008d16:	f7fa f8fb 	bl	8002f10 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3708      	adds	r7, #8
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	20000884 	.word	0x20000884

08008d28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d30:	2300      	movs	r3, #0
 8008d32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d34:	2300      	movs	r3, #0
 8008d36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7f9 f8f7 	bl	8001f32 <HAL_PCD_Start>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	2b03      	cmp	r3, #3
 8008d4c:	d816      	bhi.n	8008d7c <USBD_LL_Start+0x54>
 8008d4e:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <USBD_LL_Start+0x2c>)
 8008d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d54:	08008d65 	.word	0x08008d65
 8008d58:	08008d6b 	.word	0x08008d6b
 8008d5c:	08008d71 	.word	0x08008d71
 8008d60:	08008d77 	.word	0x08008d77
    case HAL_OK :
      usb_status = USBD_OK;
 8008d64:	2300      	movs	r3, #0
 8008d66:	73fb      	strb	r3, [r7, #15]
    break;
 8008d68:	e00b      	b.n	8008d82 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d6e:	e008      	b.n	8008d82 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d70:	2301      	movs	r3, #1
 8008d72:	73fb      	strb	r3, [r7, #15]
    break;
 8008d74:	e005      	b.n	8008d82 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d76:	2303      	movs	r3, #3
 8008d78:	73fb      	strb	r3, [r7, #15]
    break;
 8008d7a:	e002      	b.n	8008d82 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008d7c:	2303      	movs	r3, #3
 8008d7e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d80:	bf00      	nop
  }
  return usb_status;
 8008d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3710      	adds	r7, #16
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b084      	sub	sp, #16
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	4608      	mov	r0, r1
 8008d96:	4611      	mov	r1, r2
 8008d98:	461a      	mov	r2, r3
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	70fb      	strb	r3, [r7, #3]
 8008d9e:	460b      	mov	r3, r1
 8008da0:	70bb      	strb	r3, [r7, #2]
 8008da2:	4613      	mov	r3, r2
 8008da4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008daa:	2300      	movs	r3, #0
 8008dac:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008db4:	78bb      	ldrb	r3, [r7, #2]
 8008db6:	883a      	ldrh	r2, [r7, #0]
 8008db8:	78f9      	ldrb	r1, [r7, #3]
 8008dba:	f7f9 fda1 	bl	8002900 <HAL_PCD_EP_Open>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008dc2:	7bbb      	ldrb	r3, [r7, #14]
 8008dc4:	2b03      	cmp	r3, #3
 8008dc6:	d817      	bhi.n	8008df8 <USBD_LL_OpenEP+0x6c>
 8008dc8:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <USBD_LL_OpenEP+0x44>)
 8008dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dce:	bf00      	nop
 8008dd0:	08008de1 	.word	0x08008de1
 8008dd4:	08008de7 	.word	0x08008de7
 8008dd8:	08008ded 	.word	0x08008ded
 8008ddc:	08008df3 	.word	0x08008df3
    case HAL_OK :
      usb_status = USBD_OK;
 8008de0:	2300      	movs	r3, #0
 8008de2:	73fb      	strb	r3, [r7, #15]
    break;
 8008de4:	e00b      	b.n	8008dfe <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008de6:	2303      	movs	r3, #3
 8008de8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dea:	e008      	b.n	8008dfe <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dec:	2301      	movs	r3, #1
 8008dee:	73fb      	strb	r3, [r7, #15]
    break;
 8008df0:	e005      	b.n	8008dfe <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008df2:	2303      	movs	r3, #3
 8008df4:	73fb      	strb	r3, [r7, #15]
    break;
 8008df6:	e002      	b.n	8008dfe <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008dfc:	bf00      	nop
  }
  return usb_status;
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	460b      	mov	r3, r1
 8008e12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e22:	78fa      	ldrb	r2, [r7, #3]
 8008e24:	4611      	mov	r1, r2
 8008e26:	4618      	mov	r0, r3
 8008e28:	f7f9 fdd2 	bl	80029d0 <HAL_PCD_EP_Close>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008e30:	7bbb      	ldrb	r3, [r7, #14]
 8008e32:	2b03      	cmp	r3, #3
 8008e34:	d816      	bhi.n	8008e64 <USBD_LL_CloseEP+0x5c>
 8008e36:	a201      	add	r2, pc, #4	; (adr r2, 8008e3c <USBD_LL_CloseEP+0x34>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008e4d 	.word	0x08008e4d
 8008e40:	08008e53 	.word	0x08008e53
 8008e44:	08008e59 	.word	0x08008e59
 8008e48:	08008e5f 	.word	0x08008e5f
    case HAL_OK :
      usb_status = USBD_OK;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e50:	e00b      	b.n	8008e6a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e52:	2303      	movs	r3, #3
 8008e54:	73fb      	strb	r3, [r7, #15]
    break;
 8008e56:	e008      	b.n	8008e6a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e5c:	e005      	b.n	8008e6a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	73fb      	strb	r3, [r7, #15]
    break;
 8008e62:	e002      	b.n	8008e6a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008e64:	2303      	movs	r3, #3
 8008e66:	73fb      	strb	r3, [r7, #15]
    break;
 8008e68:	bf00      	nop
  }
  return usb_status;
 8008e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3710      	adds	r7, #16
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e80:	2300      	movs	r3, #0
 8008e82:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e84:	2300      	movs	r3, #0
 8008e86:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e8e:	78fa      	ldrb	r2, [r7, #3]
 8008e90:	4611      	mov	r1, r2
 8008e92:	4618      	mov	r0, r3
 8008e94:	f7f9 fe49 	bl	8002b2a <HAL_PCD_EP_SetStall>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
 8008e9e:	2b03      	cmp	r3, #3
 8008ea0:	d816      	bhi.n	8008ed0 <USBD_LL_StallEP+0x5c>
 8008ea2:	a201      	add	r2, pc, #4	; (adr r2, 8008ea8 <USBD_LL_StallEP+0x34>)
 8008ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ea8:	08008eb9 	.word	0x08008eb9
 8008eac:	08008ebf 	.word	0x08008ebf
 8008eb0:	08008ec5 	.word	0x08008ec5
 8008eb4:	08008ecb 	.word	0x08008ecb
    case HAL_OK :
      usb_status = USBD_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	73fb      	strb	r3, [r7, #15]
    break;
 8008ebc:	e00b      	b.n	8008ed6 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ebe:	2303      	movs	r3, #3
 8008ec0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec2:	e008      	b.n	8008ed6 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ec8:	e005      	b.n	8008ed6 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008eca:	2303      	movs	r3, #3
 8008ecc:	73fb      	strb	r3, [r7, #15]
    break;
 8008ece:	e002      	b.n	8008ed6 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008ed0:	2303      	movs	r3, #3
 8008ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ed4:	bf00      	nop
  }
  return usb_status;
 8008ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	460b      	mov	r3, r1
 8008eea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008efa:	78fa      	ldrb	r2, [r7, #3]
 8008efc:	4611      	mov	r1, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7f9 fe75 	bl	8002bee <HAL_PCD_EP_ClrStall>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	d816      	bhi.n	8008f3c <USBD_LL_ClearStallEP+0x5c>
 8008f0e:	a201      	add	r2, pc, #4	; (adr r2, 8008f14 <USBD_LL_ClearStallEP+0x34>)
 8008f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f14:	08008f25 	.word	0x08008f25
 8008f18:	08008f2b 	.word	0x08008f2b
 8008f1c:	08008f31 	.word	0x08008f31
 8008f20:	08008f37 	.word	0x08008f37
    case HAL_OK :
      usb_status = USBD_OK;
 8008f24:	2300      	movs	r3, #0
 8008f26:	73fb      	strb	r3, [r7, #15]
    break;
 8008f28:	e00b      	b.n	8008f42 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	73fb      	strb	r3, [r7, #15]
    break;
 8008f2e:	e008      	b.n	8008f42 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f30:	2301      	movs	r3, #1
 8008f32:	73fb      	strb	r3, [r7, #15]
    break;
 8008f34:	e005      	b.n	8008f42 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f36:	2303      	movs	r3, #3
 8008f38:	73fb      	strb	r3, [r7, #15]
    break;
 8008f3a:	e002      	b.n	8008f42 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	73fb      	strb	r3, [r7, #15]
    break;
 8008f40:	bf00      	nop
  }
  return usb_status;
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b085      	sub	sp, #20
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	460b      	mov	r3, r1
 8008f56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008f5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008f60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	da0b      	bge.n	8008f80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008f68:	78fb      	ldrb	r3, [r7, #3]
 8008f6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f6e:	68f9      	ldr	r1, [r7, #12]
 8008f70:	4613      	mov	r3, r2
 8008f72:	00db      	lsls	r3, r3, #3
 8008f74:	4413      	add	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	440b      	add	r3, r1
 8008f7a:	333e      	adds	r3, #62	; 0x3e
 8008f7c:	781b      	ldrb	r3, [r3, #0]
 8008f7e:	e00b      	b.n	8008f98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008f80:	78fb      	ldrb	r3, [r7, #3]
 8008f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f86:	68f9      	ldr	r1, [r7, #12]
 8008f88:	4613      	mov	r3, r2
 8008f8a:	00db      	lsls	r3, r3, #3
 8008f8c:	4413      	add	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	440b      	add	r3, r1
 8008f92:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008f96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3714      	adds	r7, #20
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	460b      	mov	r3, r1
 8008fae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fbe:	78fa      	ldrb	r2, [r7, #3]
 8008fc0:	4611      	mov	r1, r2
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7f9 fc77 	bl	80028b6 <HAL_PCD_SetAddress>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008fcc:	7bbb      	ldrb	r3, [r7, #14]
 8008fce:	2b03      	cmp	r3, #3
 8008fd0:	d816      	bhi.n	8009000 <USBD_LL_SetUSBAddress+0x5c>
 8008fd2:	a201      	add	r2, pc, #4	; (adr r2, 8008fd8 <USBD_LL_SetUSBAddress+0x34>)
 8008fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd8:	08008fe9 	.word	0x08008fe9
 8008fdc:	08008fef 	.word	0x08008fef
 8008fe0:	08008ff5 	.word	0x08008ff5
 8008fe4:	08008ffb 	.word	0x08008ffb
    case HAL_OK :
      usb_status = USBD_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	73fb      	strb	r3, [r7, #15]
    break;
 8008fec:	e00b      	b.n	8009006 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fee:	2303      	movs	r3, #3
 8008ff0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff2:	e008      	b.n	8009006 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ff8:	e005      	b.n	8009006 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008ffa:	2303      	movs	r3, #3
 8008ffc:	73fb      	strb	r3, [r7, #15]
    break;
 8008ffe:	e002      	b.n	8009006 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8009000:	2303      	movs	r3, #3
 8009002:	73fb      	strb	r3, [r7, #15]
    break;
 8009004:	bf00      	nop
  }
  return usb_status;
 8009006:	7bfb      	ldrb	r3, [r7, #15]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3710      	adds	r7, #16
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b086      	sub	sp, #24
 8009014:	af00      	add	r7, sp, #0
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	607a      	str	r2, [r7, #4]
 800901a:	603b      	str	r3, [r7, #0]
 800901c:	460b      	mov	r3, r1
 800901e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009020:	2300      	movs	r3, #0
 8009022:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800902e:	7af9      	ldrb	r1, [r7, #11]
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	f7f9 fd48 	bl	8002ac8 <HAL_PCD_EP_Transmit>
 8009038:	4603      	mov	r3, r0
 800903a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800903c:	7dbb      	ldrb	r3, [r7, #22]
 800903e:	2b03      	cmp	r3, #3
 8009040:	d816      	bhi.n	8009070 <USBD_LL_Transmit+0x60>
 8009042:	a201      	add	r2, pc, #4	; (adr r2, 8009048 <USBD_LL_Transmit+0x38>)
 8009044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009048:	08009059 	.word	0x08009059
 800904c:	0800905f 	.word	0x0800905f
 8009050:	08009065 	.word	0x08009065
 8009054:	0800906b 	.word	0x0800906b
    case HAL_OK :
      usb_status = USBD_OK;
 8009058:	2300      	movs	r3, #0
 800905a:	75fb      	strb	r3, [r7, #23]
    break;
 800905c:	e00b      	b.n	8009076 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800905e:	2303      	movs	r3, #3
 8009060:	75fb      	strb	r3, [r7, #23]
    break;
 8009062:	e008      	b.n	8009076 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009064:	2301      	movs	r3, #1
 8009066:	75fb      	strb	r3, [r7, #23]
    break;
 8009068:	e005      	b.n	8009076 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800906a:	2303      	movs	r3, #3
 800906c:	75fb      	strb	r3, [r7, #23]
    break;
 800906e:	e002      	b.n	8009076 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8009070:	2303      	movs	r3, #3
 8009072:	75fb      	strb	r3, [r7, #23]
    break;
 8009074:	bf00      	nop
  }
  return usb_status;
 8009076:	7dfb      	ldrb	r3, [r7, #23]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3718      	adds	r7, #24
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}

08009080 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b086      	sub	sp, #24
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	607a      	str	r2, [r7, #4]
 800908a:	603b      	str	r3, [r7, #0]
 800908c:	460b      	mov	r3, r1
 800908e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009090:	2300      	movs	r3, #0
 8009092:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800909e:	7af9      	ldrb	r1, [r7, #11]
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	687a      	ldr	r2, [r7, #4]
 80090a4:	f7f9 fcde 	bl	8002a64 <HAL_PCD_EP_Receive>
 80090a8:	4603      	mov	r3, r0
 80090aa:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80090ac:	7dbb      	ldrb	r3, [r7, #22]
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d816      	bhi.n	80090e0 <USBD_LL_PrepareReceive+0x60>
 80090b2:	a201      	add	r2, pc, #4	; (adr r2, 80090b8 <USBD_LL_PrepareReceive+0x38>)
 80090b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b8:	080090c9 	.word	0x080090c9
 80090bc:	080090cf 	.word	0x080090cf
 80090c0:	080090d5 	.word	0x080090d5
 80090c4:	080090db 	.word	0x080090db
    case HAL_OK :
      usb_status = USBD_OK;
 80090c8:	2300      	movs	r3, #0
 80090ca:	75fb      	strb	r3, [r7, #23]
    break;
 80090cc:	e00b      	b.n	80090e6 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80090ce:	2303      	movs	r3, #3
 80090d0:	75fb      	strb	r3, [r7, #23]
    break;
 80090d2:	e008      	b.n	80090e6 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80090d4:	2301      	movs	r3, #1
 80090d6:	75fb      	strb	r3, [r7, #23]
    break;
 80090d8:	e005      	b.n	80090e6 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80090da:	2303      	movs	r3, #3
 80090dc:	75fb      	strb	r3, [r7, #23]
    break;
 80090de:	e002      	b.n	80090e6 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80090e0:	2303      	movs	r3, #3
 80090e2:	75fb      	strb	r3, [r7, #23]
    break;
 80090e4:	bf00      	nop
  }
  return usb_status;
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3718      	adds	r7, #24
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b082      	sub	sp, #8
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	460b      	mov	r3, r1
 80090fa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80090fc:	78fb      	ldrb	r3, [r7, #3]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <HAL_PCDEx_LPM_Callback+0x18>
 8009102:	2b01      	cmp	r3, #1
 8009104:	d01f      	beq.n	8009146 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8009106:	e03b      	b.n	8009180 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6a1b      	ldr	r3, [r3, #32]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d007      	beq.n	8009120 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009110:	f000 f854 	bl	80091bc <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009114:	4b1c      	ldr	r3, [pc, #112]	; (8009188 <HAL_PCDEx_LPM_Callback+0x98>)
 8009116:	691b      	ldr	r3, [r3, #16]
 8009118:	4a1b      	ldr	r2, [pc, #108]	; (8009188 <HAL_PCDEx_LPM_Callback+0x98>)
 800911a:	f023 0306 	bic.w	r3, r3, #6
 800911e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	6812      	ldr	r2, [r2, #0]
 800912e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009132:	f023 0301 	bic.w	r3, r3, #1
 8009136:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800913e:	4618      	mov	r0, r3
 8009140:	f7fe fa41 	bl	80075c6 <USBD_LL_Resume>
    break;
 8009144:	e01c      	b.n	8009180 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6812      	ldr	r2, [r2, #0]
 8009154:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009158:	f043 0301 	orr.w	r3, r3, #1
 800915c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009164:	4618      	mov	r0, r3
 8009166:	f7fe fa12 	bl	800758e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a1b      	ldr	r3, [r3, #32]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d005      	beq.n	800917e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009172:	4b05      	ldr	r3, [pc, #20]	; (8009188 <HAL_PCDEx_LPM_Callback+0x98>)
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	4a04      	ldr	r2, [pc, #16]	; (8009188 <HAL_PCDEx_LPM_Callback+0x98>)
 8009178:	f043 0306 	orr.w	r3, r3, #6
 800917c:	6113      	str	r3, [r2, #16]
    break;
 800917e:	bf00      	nop
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	e000ed00 	.word	0xe000ed00

0800918c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009194:	4b03      	ldr	r3, [pc, #12]	; (80091a4 <USBD_static_malloc+0x18>)
}
 8009196:	4618      	mov	r0, r3
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr
 80091a2:	bf00      	nop
 80091a4:	20000d90 	.word	0x20000d90

080091a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80091a8:	b480      	push	{r7}
 80091aa:	b083      	sub	sp, #12
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]

}
 80091b0:	bf00      	nop
 80091b2:	370c      	adds	r7, #12
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr

080091bc <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80091c0:	f7f7 f9c6 	bl	8000550 <SystemClock_Config>
}
 80091c4:	bf00      	nop
 80091c6:	bd80      	pop	{r7, pc}

080091c8 <memset>:
 80091c8:	4402      	add	r2, r0
 80091ca:	4603      	mov	r3, r0
 80091cc:	4293      	cmp	r3, r2
 80091ce:	d100      	bne.n	80091d2 <memset+0xa>
 80091d0:	4770      	bx	lr
 80091d2:	f803 1b01 	strb.w	r1, [r3], #1
 80091d6:	e7f9      	b.n	80091cc <memset+0x4>

080091d8 <__libc_init_array>:
 80091d8:	b570      	push	{r4, r5, r6, lr}
 80091da:	4d0d      	ldr	r5, [pc, #52]	; (8009210 <__libc_init_array+0x38>)
 80091dc:	4c0d      	ldr	r4, [pc, #52]	; (8009214 <__libc_init_array+0x3c>)
 80091de:	1b64      	subs	r4, r4, r5
 80091e0:	10a4      	asrs	r4, r4, #2
 80091e2:	2600      	movs	r6, #0
 80091e4:	42a6      	cmp	r6, r4
 80091e6:	d109      	bne.n	80091fc <__libc_init_array+0x24>
 80091e8:	4d0b      	ldr	r5, [pc, #44]	; (8009218 <__libc_init_array+0x40>)
 80091ea:	4c0c      	ldr	r4, [pc, #48]	; (800921c <__libc_init_array+0x44>)
 80091ec:	f000 f818 	bl	8009220 <_init>
 80091f0:	1b64      	subs	r4, r4, r5
 80091f2:	10a4      	asrs	r4, r4, #2
 80091f4:	2600      	movs	r6, #0
 80091f6:	42a6      	cmp	r6, r4
 80091f8:	d105      	bne.n	8009206 <__libc_init_array+0x2e>
 80091fa:	bd70      	pop	{r4, r5, r6, pc}
 80091fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009200:	4798      	blx	r3
 8009202:	3601      	adds	r6, #1
 8009204:	e7ee      	b.n	80091e4 <__libc_init_array+0xc>
 8009206:	f855 3b04 	ldr.w	r3, [r5], #4
 800920a:	4798      	blx	r3
 800920c:	3601      	adds	r6, #1
 800920e:	e7f2      	b.n	80091f6 <__libc_init_array+0x1e>
 8009210:	080092e8 	.word	0x080092e8
 8009214:	080092e8 	.word	0x080092e8
 8009218:	080092e8 	.word	0x080092e8
 800921c:	080092ec 	.word	0x080092ec

08009220 <_init>:
 8009220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009222:	bf00      	nop
 8009224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009226:	bc08      	pop	{r3}
 8009228:	469e      	mov	lr, r3
 800922a:	4770      	bx	lr

0800922c <_fini>:
 800922c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800922e:	bf00      	nop
 8009230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009232:	bc08      	pop	{r3}
 8009234:	469e      	mov	lr, r3
 8009236:	4770      	bx	lr
