
P6Fase2_2Intento.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fb8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009140  08009140  00019140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091e8  080091e8  00020118  2**0
                  CONTENTS
  4 .ARM          00000008  080091e8  080091e8  000191e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091f0  080091f0  00020118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080091f0  080091f0  000191f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091f4  080091f4  000191f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000118  20000000  080091f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c9c  20000118  08009310  00020118  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000db4  08009310  00020db4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d0a1  00000000  00000000  0002018b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040c5  00000000  00000000  0003d22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001950  00000000  00000000  000412f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001377  00000000  00000000  00042c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6a9  00000000  00000000  00043fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fcd0  00000000  00000000  0006e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4fdd  00000000  00000000  0008e338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006af8  00000000  00000000  00183318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00189e10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000118 	.word	0x20000118
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009128 	.word	0x08009128

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000011c 	.word	0x2000011c
 80001c4:	08009128 	.word	0x08009128

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fe2e 	bl	800112a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f82d 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f9c7 	bl	8000864 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d6:	f000 f88b 	bl	80005f0 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004da:	f000 f8c1 	bl	8000660 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004de:	f000 f8fd 	bl	80006dc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004e2:	f000 f921 	bl	8000728 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e6:	f000 f95d 	bl	80007a4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004ea:	f000 f98b 	bl	8000804 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80004ee:	f008 f837 	bl	8008560 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint8_t dato[6];
  int i = 0;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  dato[0]=0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	713b      	strb	r3, [r7, #4]
USBD_LL_PrepareReceive(&hUsbDeviceFS,1, dato, 6);
 80004fa:	1d3a      	adds	r2, r7, #4
 80004fc:	2306      	movs	r3, #6
 80004fe:	2101      	movs	r1, #1
 8000500:	4808      	ldr	r0, [pc, #32]	; (8000524 <main+0x60>)
 8000502:	f008 fd41 	bl	8008f88 <USBD_LL_PrepareReceive>
  while (1)
  {
	  if(miflag==1){
 8000506:	4b08      	ldr	r3, [pc, #32]	; (8000528 <main+0x64>)
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d1fb      	bne.n	8000506 <main+0x42>
		  USBD_LL_PrepareReceive(&hUsbDeviceFS,1, dato, 6);
 800050e:	1d3a      	adds	r2, r7, #4
 8000510:	2306      	movs	r3, #6
 8000512:	2101      	movs	r1, #1
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <main+0x60>)
 8000516:	f008 fd37 	bl	8008f88 <USBD_LL_PrepareReceive>
		  miflag=0; //poner aquí un breakpoint
 800051a:	4b03      	ldr	r3, [pc, #12]	; (8000528 <main+0x64>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
	  if(miflag==1){
 8000520:	e7f1      	b.n	8000506 <main+0x42>
 8000522:	bf00      	nop
 8000524:	200003a8 	.word	0x200003a8
 8000528:	20000684 	.word	0x20000684

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b096      	sub	sp, #88	; 0x58
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	f107 0314 	add.w	r3, r7, #20
 8000536:	2244      	movs	r2, #68	; 0x44
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f008 fdc8 	bl	80090d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000540:	463b      	mov	r3, r7
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000552:	f002 fd65 	bl	8003020 <HAL_PWREx_ControlVoltageScaling>
 8000556:	4603      	mov	r3, r0
 8000558:	2b00      	cmp	r3, #0
 800055a:	d001      	beq.n	8000560 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800055c:	f000 fb34 	bl	8000bc8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000560:	f002 fd40 	bl	8002fe4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000564:	4b21      	ldr	r3, [pc, #132]	; (80005ec <SystemClock_Config+0xc0>)
 8000566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800056a:	4a20      	ldr	r2, [pc, #128]	; (80005ec <SystemClock_Config+0xc0>)
 800056c:	f023 0318 	bic.w	r3, r3, #24
 8000570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000574:	2314      	movs	r3, #20
 8000576:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000578:	2301      	movs	r3, #1
 800057a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000580:	2300      	movs	r3, #0
 8000582:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000584:	2360      	movs	r3, #96	; 0x60
 8000586:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000588:	2302      	movs	r3, #2
 800058a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800058c:	2301      	movs	r3, #1
 800058e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000590:	2301      	movs	r3, #1
 8000592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000594:	2328      	movs	r3, #40	; 0x28
 8000596:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000598:	2307      	movs	r3, #7
 800059a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4618      	mov	r0, r3
 80005aa:	f002 fe5b 	bl	8003264 <HAL_RCC_OscConfig>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005b4:	f000 fb08 	bl	8000bc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005b8:	230f      	movs	r3, #15
 80005ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005bc:	2303      	movs	r3, #3
 80005be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005cc:	463b      	mov	r3, r7
 80005ce:	2104      	movs	r1, #4
 80005d0:	4618      	mov	r0, r3
 80005d2:	f003 fa23 	bl	8003a1c <HAL_RCC_ClockConfig>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005dc:	f000 faf4 	bl	8000bc8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005e0:	f003 ff2a 	bl	8004438 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005e4:	bf00      	nop
 80005e6:	3758      	adds	r7, #88	; 0x58
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	40021000 	.word	0x40021000

080005f0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <MX_DFSDM1_Init+0x68>)
 80005f6:	4a19      	ldr	r2, [pc, #100]	; (800065c <MX_DFSDM1_Init+0x6c>)
 80005f8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <MX_DFSDM1_Init+0x68>)
 80005fc:	2201      	movs	r2, #1
 80005fe:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <MX_DFSDM1_Init+0x68>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_DFSDM1_Init+0x68>)
 8000608:	2202      	movs	r2, #2
 800060a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <MX_DFSDM1_Init+0x68>)
 800060e:	2200      	movs	r2, #0
 8000610:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_DFSDM1_Init+0x68>)
 8000614:	2200      	movs	r2, #0
 8000616:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000618:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <MX_DFSDM1_Init+0x68>)
 800061a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800061e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <MX_DFSDM1_Init+0x68>)
 8000622:	2200      	movs	r2, #0
 8000624:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000626:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <MX_DFSDM1_Init+0x68>)
 8000628:	2204      	movs	r2, #4
 800062a:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800062c:	4b0a      	ldr	r3, [pc, #40]	; (8000658 <MX_DFSDM1_Init+0x68>)
 800062e:	2200      	movs	r2, #0
 8000630:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_DFSDM1_Init+0x68>)
 8000634:	2201      	movs	r2, #1
 8000636:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000638:	4b07      	ldr	r3, [pc, #28]	; (8000658 <MX_DFSDM1_Init+0x68>)
 800063a:	2200      	movs	r2, #0
 800063c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_DFSDM1_Init+0x68>)
 8000640:	2200      	movs	r2, #0
 8000642:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000644:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_DFSDM1_Init+0x68>)
 8000646:	f000 ff1b 	bl	8001480 <HAL_DFSDM_ChannelInit>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000650:	f000 faba 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000134 	.word	0x20000134
 800065c:	40016020 	.word	0x40016020

08000660 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_I2C2_Init+0x74>)
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <MX_I2C2_Init+0x78>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_I2C2_Init+0x74>)
 800066c:	f640 6214 	movw	r2, #3604	; 0xe14
 8000670:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000672:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_I2C2_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000678:	4b16      	ldr	r3, [pc, #88]	; (80006d4 <MX_I2C2_Init+0x74>)
 800067a:	2201      	movs	r2, #1
 800067c:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800067e:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_I2C2_Init+0x74>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <MX_I2C2_Init+0x74>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_I2C2_Init+0x74>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000690:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_I2C2_Init+0x74>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_I2C2_Init+0x74>)
 8000698:	2200      	movs	r2, #0
 800069a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <MX_I2C2_Init+0x74>)
 800069e:	f001 f9e0 	bl	8001a62 <HAL_I2C_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006a8:	f000 fa8e 	bl	8000bc8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ac:	2100      	movs	r1, #0
 80006ae:	4809      	ldr	r0, [pc, #36]	; (80006d4 <MX_I2C2_Init+0x74>)
 80006b0:	f001 fa72 	bl	8001b98 <HAL_I2CEx_ConfigAnalogFilter>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80006ba:	f000 fa85 	bl	8000bc8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006be:	2100      	movs	r1, #0
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_I2C2_Init+0x74>)
 80006c2:	f001 fab4 	bl	8001c2e <HAL_I2CEx_ConfigDigitalFilter>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 80006cc:	f000 fa7c 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000016c 	.word	0x2000016c
 80006d8:	40005800 	.word	0x40005800

080006dc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_QUADSPI_Init+0x44>)
 80006e2:	4a10      	ldr	r2, [pc, #64]	; (8000724 <MX_QUADSPI_Init+0x48>)
 80006e4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_QUADSPI_Init+0x44>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_QUADSPI_Init+0x44>)
 80006ee:	2204      	movs	r2, #4
 80006f0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_QUADSPI_Init+0x44>)
 80006f4:	2210      	movs	r2, #16
 80006f6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_QUADSPI_Init+0x44>)
 80006fa:	2217      	movs	r2, #23
 80006fc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_QUADSPI_Init+0x44>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_QUADSPI_Init+0x44>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_QUADSPI_Init+0x44>)
 800070c:	f002 fcee 	bl	80030ec <HAL_QSPI_Init>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000716:	f000 fa57 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200001c0 	.word	0x200001c0
 8000724:	a0001000 	.word	0xa0001000

08000728 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_SPI3_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_SPI3_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_SPI3_Init+0x74>)
 8000734:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000738:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_SPI3_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_SPI3_Init+0x74>)
 8000742:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000746:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_SPI3_Init+0x74>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_SPI3_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_SPI3_Init+0x74>)
 8000756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800075a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_SPI3_Init+0x74>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_SPI3_Init+0x74>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_SPI3_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_SPI3_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_SPI3_Init+0x74>)
 8000776:	2207      	movs	r2, #7
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_SPI3_Init+0x74>)
 800077c:	2200      	movs	r2, #0
 800077e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_SPI3_Init+0x74>)
 8000782:	2208      	movs	r2, #8
 8000784:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_SPI3_Init+0x74>)
 8000788:	f004 f838 	bl	80047fc <HAL_SPI_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000792:	f000 fa19 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000204 	.word	0x20000204
 80007a0:	40003c00 	.word	0x40003c00

080007a4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007a8:	4b14      	ldr	r3, [pc, #80]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_USART1_UART_Init+0x5c>)
 80007ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ae:	4b13      	ldr	r3, [pc, #76]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007b6:	4b11      	ldr	r3, [pc, #68]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007ca:	220c      	movs	r2, #12
 80007cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d4:	4b09      	ldr	r3, [pc, #36]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007da:	4b08      	ldr	r3, [pc, #32]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007dc:	2200      	movs	r2, #0
 80007de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007e6:	4805      	ldr	r0, [pc, #20]	; (80007fc <MX_USART1_UART_Init+0x58>)
 80007e8:	f004 f8ab 	bl	8004942 <HAL_UART_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007f2:	f000 f9e9 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007f6:	bf00      	nop
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000268 	.word	0x20000268
 8000800:	40013800 	.word	0x40013800

08000804 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000808:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_USART3_UART_Init+0x58>)
 800080a:	4a15      	ldr	r2, [pc, #84]	; (8000860 <MX_USART3_UART_Init+0x5c>)
 800080c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800080e:	4b13      	ldr	r3, [pc, #76]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_USART3_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_USART3_UART_Init+0x58>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_USART3_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000840:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_USART3_UART_Init+0x58>)
 8000848:	f004 f87b 	bl	8004942 <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 f9b9 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200002f0 	.word	0x200002f0
 8000860:	40004800 	.word	0x40004800

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087a:	4bbd      	ldr	r3, [pc, #756]	; (8000b70 <MX_GPIO_Init+0x30c>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4abc      	ldr	r2, [pc, #752]	; (8000b70 <MX_GPIO_Init+0x30c>)
 8000880:	f043 0310 	orr.w	r3, r3, #16
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4bba      	ldr	r3, [pc, #744]	; (8000b70 <MX_GPIO_Init+0x30c>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0310 	and.w	r3, r3, #16
 800088e:	613b      	str	r3, [r7, #16]
 8000890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4bb7      	ldr	r3, [pc, #732]	; (8000b70 <MX_GPIO_Init+0x30c>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4ab6      	ldr	r2, [pc, #728]	; (8000b70 <MX_GPIO_Init+0x30c>)
 8000898:	f043 0304 	orr.w	r3, r3, #4
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4bb4      	ldr	r3, [pc, #720]	; (8000b70 <MX_GPIO_Init+0x30c>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0304 	and.w	r3, r3, #4
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4bb1      	ldr	r3, [pc, #708]	; (8000b70 <MX_GPIO_Init+0x30c>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ae:	4ab0      	ldr	r2, [pc, #704]	; (8000b70 <MX_GPIO_Init+0x30c>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008b6:	4bae      	ldr	r3, [pc, #696]	; (8000b70 <MX_GPIO_Init+0x30c>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	4bab      	ldr	r3, [pc, #684]	; (8000b70 <MX_GPIO_Init+0x30c>)
 80008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c6:	4aaa      	ldr	r2, [pc, #680]	; (8000b70 <MX_GPIO_Init+0x30c>)
 80008c8:	f043 0302 	orr.w	r3, r3, #2
 80008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ce:	4ba8      	ldr	r3, [pc, #672]	; (8000b70 <MX_GPIO_Init+0x30c>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	f003 0302 	and.w	r3, r3, #2
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008da:	4ba5      	ldr	r3, [pc, #660]	; (8000b70 <MX_GPIO_Init+0x30c>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	4aa4      	ldr	r2, [pc, #656]	; (8000b70 <MX_GPIO_Init+0x30c>)
 80008e0:	f043 0308 	orr.w	r3, r3, #8
 80008e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e6:	4ba2      	ldr	r3, [pc, #648]	; (8000b70 <MX_GPIO_Init+0x30c>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	f003 0308 	and.w	r3, r3, #8
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f44f 718a 	mov.w	r1, #276	; 0x114
 80008f8:	489e      	ldr	r0, [pc, #632]	; (8000b74 <MX_GPIO_Init+0x310>)
 80008fa:	f001 f877 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	f248 1104 	movw	r1, #33028	; 0x8104
 8000904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000908:	f001 f870 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800090c:	2200      	movs	r2, #0
 800090e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000912:	4899      	ldr	r0, [pc, #612]	; (8000b78 <MX_GPIO_Init+0x314>)
 8000914:	f001 f86a 	bl	80019ec <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000918:	2200      	movs	r2, #0
 800091a:	f241 0181 	movw	r1, #4225	; 0x1081
 800091e:	4897      	ldr	r0, [pc, #604]	; (8000b7c <MX_GPIO_Init+0x318>)
 8000920:	f001 f864 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000924:	2201      	movs	r2, #1
 8000926:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800092a:	4894      	ldr	r0, [pc, #592]	; (8000b7c <MX_GPIO_Init+0x318>)
 800092c:	f001 f85e 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000930:	2200      	movs	r2, #0
 8000932:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000936:	4892      	ldr	r0, [pc, #584]	; (8000b80 <MX_GPIO_Init+0x31c>)
 8000938:	f001 f858 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2120      	movs	r1, #32
 8000940:	488d      	ldr	r0, [pc, #564]	; (8000b78 <MX_GPIO_Init+0x314>)
 8000942:	f001 f853 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000946:	2201      	movs	r2, #1
 8000948:	2101      	movs	r1, #1
 800094a:	488a      	ldr	r0, [pc, #552]	; (8000b74 <MX_GPIO_Init+0x310>)
 800094c:	f001 f84e 	bl	80019ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000950:	f240 1315 	movw	r3, #277	; 0x115
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000956:	2301      	movs	r3, #1
 8000958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095e:	2300      	movs	r3, #0
 8000960:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000962:	f107 0314 	add.w	r3, r7, #20
 8000966:	4619      	mov	r1, r3
 8000968:	4882      	ldr	r0, [pc, #520]	; (8000b74 <MX_GPIO_Init+0x310>)
 800096a:	f000 fe95 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800096e:	236a      	movs	r3, #106	; 0x6a
 8000970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000972:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000976:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	487c      	ldr	r0, [pc, #496]	; (8000b74 <MX_GPIO_Init+0x310>)
 8000984:	f000 fe88 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000988:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800098c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800098e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000992:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	4619      	mov	r1, r3
 800099e:	4878      	ldr	r0, [pc, #480]	; (8000b80 <MX_GPIO_Init+0x31c>)
 80009a0:	f000 fe7a 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80009a4:	233f      	movs	r3, #63	; 0x3f
 80009a6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009a8:	230b      	movs	r3, #11
 80009aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4872      	ldr	r0, [pc, #456]	; (8000b80 <MX_GPIO_Init+0x31c>)
 80009b8:	f000 fe6e 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80009bc:	2303      	movs	r3, #3
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c0:	2302      	movs	r3, #2
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c8:	2303      	movs	r3, #3
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80009cc:	2308      	movs	r3, #8
 80009ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4619      	mov	r1, r3
 80009d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009da:	f000 fe5d 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80009de:	f248 1304 	movw	r3, #33028	; 0x8104
 80009e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	4619      	mov	r1, r3
 80009f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009fa:	f000 fe4d 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80009fe:	2308      	movs	r3, #8
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a12:	f107 0314 	add.w	r3, r7, #20
 8000a16:	4619      	mov	r1, r3
 8000a18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1c:	f000 fe3c 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000a20:	2310      	movs	r3, #16
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a24:	230b      	movs	r3, #11
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a36:	f000 fe2f 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000a3a:	23e0      	movs	r3, #224	; 0xe0
 8000a3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a4a:	2305      	movs	r3, #5
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a58:	f000 fe1e 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4841      	ldr	r0, [pc, #260]	; (8000b78 <MX_GPIO_Init+0x314>)
 8000a72:	f000 fe11 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000a76:	2302      	movs	r3, #2
 8000a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a7a:	230b      	movs	r3, #11
 8000a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000a82:	f107 0314 	add.w	r3, r7, #20
 8000a86:	4619      	mov	r1, r3
 8000a88:	483b      	ldr	r0, [pc, #236]	; (8000b78 <MX_GPIO_Init+0x314>)
 8000a8a:	f000 fe05 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000a8e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000a92:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4834      	ldr	r0, [pc, #208]	; (8000b78 <MX_GPIO_Init+0x314>)
 8000aa8:	f000 fdf6 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000aac:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000ab0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	482e      	ldr	r0, [pc, #184]	; (8000b7c <MX_GPIO_Init+0x318>)
 8000ac4:	f000 fde8 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000ac8:	f243 0381 	movw	r3, #12417	; 0x3081
 8000acc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4826      	ldr	r0, [pc, #152]	; (8000b7c <MX_GPIO_Init+0x318>)
 8000ae2:	f000 fdd9 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000ae6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4820      	ldr	r0, [pc, #128]	; (8000b80 <MX_GPIO_Init+0x31c>)
 8000b00:	f000 fdca 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b14:	f107 0314 	add.w	r3, r7, #20
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4819      	ldr	r0, [pc, #100]	; (8000b80 <MX_GPIO_Init+0x31c>)
 8000b1c:	f000 fdbc 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000b20:	2302      	movs	r3, #2
 8000b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b24:	2302      	movs	r3, #2
 8000b26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b30:	2305      	movs	r3, #5
 8000b32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4810      	ldr	r0, [pc, #64]	; (8000b7c <MX_GPIO_Init+0x318>)
 8000b3c:	f000 fdac 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000b40:	2378      	movs	r3, #120	; 0x78
 8000b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b44:	2302      	movs	r3, #2
 8000b46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b50:	2307      	movs	r3, #7
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4808      	ldr	r0, [pc, #32]	; (8000b7c <MX_GPIO_Init+0x318>)
 8000b5c:	f000 fd9c 	bl	8001698 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000b60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b66:	2312      	movs	r3, #18
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e00a      	b.n	8000b84 <MX_GPIO_Init+0x320>
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000
 8000b74:	48001000 	.word	0x48001000
 8000b78:	48000400 	.word	0x48000400
 8000b7c:	48000c00 	.word	0x48000c00
 8000b80:	48000800 	.word	0x48000800
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4619      	mov	r1, r3
 8000b94:	480b      	ldr	r0, [pc, #44]	; (8000bc4 <MX_GPIO_Init+0x360>)
 8000b96:	f000 fd7f 	bl	8001698 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	2017      	movs	r0, #23
 8000ba0:	f000 fc37 	bl	8001412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ba4:	2017      	movs	r0, #23
 8000ba6:	f000 fc50 	bl	800144a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000baa:	2200      	movs	r2, #0
 8000bac:	2100      	movs	r1, #0
 8000bae:	2028      	movs	r0, #40	; 0x28
 8000bb0:	f000 fc2f 	bl	8001412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bb4:	2028      	movs	r0, #40	; 0x28
 8000bb6:	f000 fc48 	bl	800144a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	; 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	48000400 	.word	0x48000400

08000bc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bcc:	b672      	cpsid	i
}
 8000bce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <Error_Handler+0x8>
	...

08000bd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bda:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_MspInit+0x44>)
 8000bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bde:	4a0e      	ldr	r2, [pc, #56]	; (8000c18 <HAL_MspInit+0x44>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6613      	str	r3, [r2, #96]	; 0x60
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_MspInit+0x44>)
 8000be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <HAL_MspInit+0x44>)
 8000bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf6:	4a08      	ldr	r2, [pc, #32]	; (8000c18 <HAL_MspInit+0x44>)
 8000bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_MspInit+0x44>)
 8000c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c06:	603b      	str	r3, [r7, #0]
 8000c08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	40021000 	.word	0x40021000

08000c1c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b0ac      	sub	sp, #176	; 0xb0
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2288      	movs	r2, #136	; 0x88
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f008 fa47 	bl	80090d0 <memset>
  if(DFSDM1_Init == 0)
 8000c42:	4b25      	ldr	r3, [pc, #148]	; (8000cd8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d142      	bne.n	8000cd0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000c4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000c50:	2300      	movs	r3, #0
 8000c52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f003 f902 	bl	8003e64 <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000c66:	f7ff ffaf 	bl	8000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c6e:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000c74:	6613      	str	r3, [r2, #96]	; 0x60
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c86:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c88:	f043 0310 	orr.w	r3, r3, #16
 8000c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c92:	f003 0310 	and.w	r3, r3, #16
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000c9a:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000c9e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000cb4:	2306      	movs	r3, #6
 8000cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000cc2:	f000 fce9 	bl	8001698 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	4a02      	ldr	r2, [pc, #8]	; (8000cd8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000cce:	6013      	str	r3, [r2, #0]
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	37b0      	adds	r7, #176	; 0xb0
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000378 	.word	0x20000378
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	48001000 	.word	0x48001000

08000ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0ac      	sub	sp, #176	; 0xb0
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	2288      	movs	r2, #136	; 0x88
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f008 f9e3 	bl	80090d0 <memset>
  if(hi2c->Instance==I2C2)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <HAL_I2C_MspInit+0xb0>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d13b      	bne.n	8000d8c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d14:	2380      	movs	r3, #128	; 0x80
 8000d16:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4618      	mov	r0, r3
 8000d22:	f003 f89f 	bl	8003e64 <HAL_RCCEx_PeriphCLKConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d2c:	f7ff ff4c 	bl	8000bc8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	4b19      	ldr	r3, [pc, #100]	; (8000d98 <HAL_I2C_MspInit+0xb4>)
 8000d32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d34:	4a18      	ldr	r2, [pc, #96]	; (8000d98 <HAL_I2C_MspInit+0xb4>)
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d3c:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HAL_I2C_MspInit+0xb4>)
 8000d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000d48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d50:	2312      	movs	r3, #18
 8000d52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5c:	2303      	movs	r3, #3
 8000d5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d62:	2304      	movs	r3, #4
 8000d64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480b      	ldr	r0, [pc, #44]	; (8000d9c <HAL_I2C_MspInit+0xb8>)
 8000d70:	f000 fc92 	bl	8001698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d74:	4b08      	ldr	r3, [pc, #32]	; (8000d98 <HAL_I2C_MspInit+0xb4>)
 8000d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d78:	4a07      	ldr	r2, [pc, #28]	; (8000d98 <HAL_I2C_MspInit+0xb4>)
 8000d7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d80:	4b05      	ldr	r3, [pc, #20]	; (8000d98 <HAL_I2C_MspInit+0xb4>)
 8000d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	37b0      	adds	r7, #176	; 0xb0
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40005800 	.word	0x40005800
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	48000400 	.word	0x48000400

08000da0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a17      	ldr	r2, [pc, #92]	; (8000e1c <HAL_QSPI_MspInit+0x7c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d128      	bne.n	8000e14 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000dc2:	4b17      	ldr	r3, [pc, #92]	; (8000e20 <HAL_QSPI_MspInit+0x80>)
 8000dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dc6:	4a16      	ldr	r2, [pc, #88]	; (8000e20 <HAL_QSPI_MspInit+0x80>)
 8000dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dcc:	6513      	str	r3, [r2, #80]	; 0x50
 8000dce:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <HAL_QSPI_MspInit+0x80>)
 8000dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dda:	4b11      	ldr	r3, [pc, #68]	; (8000e20 <HAL_QSPI_MspInit+0x80>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a10      	ldr	r2, [pc, #64]	; (8000e20 <HAL_QSPI_MspInit+0x80>)
 8000de0:	f043 0310 	orr.w	r3, r3, #16
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b0e      	ldr	r3, [pc, #56]	; (8000e20 <HAL_QSPI_MspInit+0x80>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0310 	and.w	r3, r3, #16
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000df2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000df6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e00:	2303      	movs	r3, #3
 8000e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e04:	230a      	movs	r3, #10
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <HAL_QSPI_MspInit+0x84>)
 8000e10:	f000 fc42 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000e14:	bf00      	nop
 8000e16:	3728      	adds	r7, #40	; 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	a0001000 	.word	0xa0001000
 8000e20:	40021000 	.word	0x40021000
 8000e24:	48001000 	.word	0x48001000

08000e28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a17      	ldr	r2, [pc, #92]	; (8000ea4 <HAL_SPI_MspInit+0x7c>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d128      	bne.n	8000e9c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e4a:	4b17      	ldr	r3, [pc, #92]	; (8000ea8 <HAL_SPI_MspInit+0x80>)
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4e:	4a16      	ldr	r2, [pc, #88]	; (8000ea8 <HAL_SPI_MspInit+0x80>)
 8000e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e54:	6593      	str	r3, [r2, #88]	; 0x58
 8000e56:	4b14      	ldr	r3, [pc, #80]	; (8000ea8 <HAL_SPI_MspInit+0x80>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e5e:	613b      	str	r3, [r7, #16]
 8000e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e62:	4b11      	ldr	r3, [pc, #68]	; (8000ea8 <HAL_SPI_MspInit+0x80>)
 8000e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e66:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <HAL_SPI_MspInit+0x80>)
 8000e68:	f043 0304 	orr.w	r3, r3, #4
 8000e6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <HAL_SPI_MspInit+0x80>)
 8000e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000e7a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	2302      	movs	r3, #2
 8000e82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e8c:	2306      	movs	r3, #6
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	4619      	mov	r1, r3
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <HAL_SPI_MspInit+0x84>)
 8000e98:	f000 fbfe 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3728      	adds	r7, #40	; 0x28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40003c00 	.word	0x40003c00
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	48000800 	.word	0x48000800

08000eb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b0ae      	sub	sp, #184	; 0xb8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec8:	f107 031c 	add.w	r3, r7, #28
 8000ecc:	2288      	movs	r2, #136	; 0x88
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f008 f8fd 	bl	80090d0 <memset>
  if(huart->Instance==USART1)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a42      	ldr	r2, [pc, #264]	; (8000fe4 <HAL_UART_MspInit+0x134>)
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d13b      	bne.n	8000f58 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee8:	f107 031c 	add.w	r3, r7, #28
 8000eec:	4618      	mov	r0, r3
 8000eee:	f002 ffb9 	bl	8003e64 <HAL_RCCEx_PeriphCLKConfig>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ef8:	f7ff fe66 	bl	8000bc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000efc:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <HAL_UART_MspInit+0x138>)
 8000efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f00:	4a39      	ldr	r2, [pc, #228]	; (8000fe8 <HAL_UART_MspInit+0x138>)
 8000f02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f06:	6613      	str	r3, [r2, #96]	; 0x60
 8000f08:	4b37      	ldr	r3, [pc, #220]	; (8000fe8 <HAL_UART_MspInit+0x138>)
 8000f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f10:	61bb      	str	r3, [r7, #24]
 8000f12:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f14:	4b34      	ldr	r3, [pc, #208]	; (8000fe8 <HAL_UART_MspInit+0x138>)
 8000f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f18:	4a33      	ldr	r2, [pc, #204]	; (8000fe8 <HAL_UART_MspInit+0x138>)
 8000f1a:	f043 0302 	orr.w	r3, r3, #2
 8000f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f20:	4b31      	ldr	r3, [pc, #196]	; (8000fe8 <HAL_UART_MspInit+0x138>)
 8000f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000f2c:	23c0      	movs	r3, #192	; 0xc0
 8000f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f32:	2302      	movs	r3, #2
 8000f34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f3e:	2303      	movs	r3, #3
 8000f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f44:	2307      	movs	r3, #7
 8000f46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f4a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4826      	ldr	r0, [pc, #152]	; (8000fec <HAL_UART_MspInit+0x13c>)
 8000f52:	f000 fba1 	bl	8001698 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f56:	e040      	b.n	8000fda <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a24      	ldr	r2, [pc, #144]	; (8000ff0 <HAL_UART_MspInit+0x140>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d13b      	bne.n	8000fda <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f62:	2304      	movs	r3, #4
 8000f64:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f6a:	f107 031c 	add.w	r3, r7, #28
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 ff78 	bl	8003e64 <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000f7a:	f7ff fe25 	bl	8000bc8 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f7e:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <HAL_UART_MspInit+0x138>)
 8000f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f82:	4a19      	ldr	r2, [pc, #100]	; (8000fe8 <HAL_UART_MspInit+0x138>)
 8000f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f88:	6593      	str	r3, [r2, #88]	; 0x58
 8000f8a:	4b17      	ldr	r3, [pc, #92]	; (8000fe8 <HAL_UART_MspInit+0x138>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f96:	4b14      	ldr	r3, [pc, #80]	; (8000fe8 <HAL_UART_MspInit+0x138>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <HAL_UART_MspInit+0x138>)
 8000f9c:	f043 0308 	orr.w	r3, r3, #8
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b11      	ldr	r3, [pc, #68]	; (8000fe8 <HAL_UART_MspInit+0x138>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0308 	and.w	r3, r3, #8
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000fae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <HAL_UART_MspInit+0x144>)
 8000fd6:	f000 fb5f 	bl	8001698 <HAL_GPIO_Init>
}
 8000fda:	bf00      	nop
 8000fdc:	37b8      	adds	r7, #184	; 0xb8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40013800 	.word	0x40013800
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	48000400 	.word	0x48000400
 8000ff0:	40004800 	.word	0x40004800
 8000ff4:	48000c00 	.word	0x48000c00

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <NMI_Handler+0x4>

08000ffe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <MemManage_Handler+0x4>

0800100a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800100e:	e7fe      	b.n	800100e <BusFault_Handler+0x4>

08001010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <UsageFault_Handler+0x4>

08001016 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr

08001032 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001044:	f000 f8c6 	bl	80011d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	bd80      	pop	{r7, pc}

0800104c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001050:	2020      	movs	r0, #32
 8001052:	f000 fce3 	bl	8001a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001056:	2040      	movs	r0, #64	; 0x40
 8001058:	f000 fce0 	bl	8001a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800105c:	2080      	movs	r0, #128	; 0x80
 800105e:	f000 fcdd 	bl	8001a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8001062:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001066:	f000 fcd9 	bl	8001a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}

0800106e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8001072:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001076:	f000 fcd1 	bl	8001a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800107a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800107e:	f000 fccd 	bl	8001a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001082:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001086:	f000 fcc9 	bl	8001a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800108a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800108e:	f000 fcc5 	bl	8001a1c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001092:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001096:	f000 fcc1 	bl	8001a1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80010a4:	4802      	ldr	r0, [pc, #8]	; (80010b0 <OTG_FS_IRQHandler+0x10>)
 80010a6:	f000 ff61 	bl	8001f6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	20000888 	.word	0x20000888

080010b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <SystemInit+0x20>)
 80010ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010be:	4a05      	ldr	r2, [pc, #20]	; (80010d4 <SystemInit+0x20>)
 80010c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001110 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010dc:	f7ff ffea 	bl	80010b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <LoopForever+0x6>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	; (8001118 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	; (800111c <LoopForever+0xe>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	; (8001124 <LoopForever+0x16>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f007 ffeb 	bl	80090e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800110a:	f7ff f9db 	bl	80004c4 <main>

0800110e <LoopForever>:

LoopForever:
    b LoopForever
 800110e:	e7fe      	b.n	800110e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001110:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001114:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001118:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 800111c:	080091f8 	.word	0x080091f8
  ldr r2, =_sbss
 8001120:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8001124:	20000db4 	.word	0x20000db4

08001128 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC1_2_IRQHandler>

0800112a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001130:	2300      	movs	r3, #0
 8001132:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001134:	2003      	movs	r0, #3
 8001136:	f000 f961 	bl	80013fc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800113a:	2000      	movs	r0, #0
 800113c:	f000 f80e 	bl	800115c <HAL_InitTick>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d002      	beq.n	800114c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	71fb      	strb	r3, [r7, #7]
 800114a:	e001      	b.n	8001150 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800114c:	f7ff fd42 	bl	8000bd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001150:	79fb      	ldrb	r3, [r7, #7]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <HAL_InitTick+0x6c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d023      	beq.n	80011b8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001170:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_InitTick+0x70>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_InitTick+0x6c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4619      	mov	r1, r3
 800117a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001182:	fbb2 f3f3 	udiv	r3, r2, r3
 8001186:	4618      	mov	r0, r3
 8001188:	f000 f96d 	bl	8001466 <HAL_SYSTICK_Config>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d10f      	bne.n	80011b2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d809      	bhi.n	80011ac <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f937 	bl	8001412 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_InitTick+0x74>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
 80011aa:	e007      	b.n	80011bc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	73fb      	strb	r3, [r7, #15]
 80011b0:	e004      	b.n	80011bc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	73fb      	strb	r3, [r7, #15]
 80011b6:	e001      	b.n	80011bc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3710      	adds	r7, #16
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000000 	.word	0x20000000
 80011d0:	20000004 	.word	0x20000004

080011d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x20>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	461a      	mov	r2, r3
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <HAL_IncTick+0x24>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4413      	add	r3, r2
 80011e4:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <HAL_IncTick+0x24>)
 80011e6:	6013      	str	r3, [r2, #0]
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000008 	.word	0x20000008
 80011f8:	2000037c 	.word	0x2000037c

080011fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <HAL_GetTick+0x14>)
 8001202:	681b      	ldr	r3, [r3, #0]
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	2000037c 	.word	0x2000037c

08001214 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff ffee 	bl	80011fc <HAL_GetTick>
 8001220:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800122c:	d005      	beq.n	800123a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800122e:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <HAL_Delay+0x44>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4413      	add	r3, r2
 8001238:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800123a:	bf00      	nop
 800123c:	f7ff ffde 	bl	80011fc <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	68fa      	ldr	r2, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d8f7      	bhi.n	800123c <HAL_Delay+0x28>
  {
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008

0800125c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001272:	68ba      	ldr	r2, [r7, #8]
 8001274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001278:	4013      	ands	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800128c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800128e:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	60d3      	str	r3, [r2, #12]
}
 8001294:	bf00      	nop
 8001296:	3714      	adds	r7, #20
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	e000ed00 	.word	0xe000ed00

080012a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012a8:	4b04      	ldr	r3, [pc, #16]	; (80012bc <__NVIC_GetPriorityGrouping+0x18>)
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	0a1b      	lsrs	r3, r3, #8
 80012ae:	f003 0307 	and.w	r3, r3, #7
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	e000ed00 	.word	0xe000ed00

080012c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	db0b      	blt.n	80012ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	f003 021f 	and.w	r2, r3, #31
 80012d8:	4907      	ldr	r1, [pc, #28]	; (80012f8 <__NVIC_EnableIRQ+0x38>)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	095b      	lsrs	r3, r3, #5
 80012e0:	2001      	movs	r0, #1
 80012e2:	fa00 f202 	lsl.w	r2, r0, r2
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000e100 	.word	0xe000e100

080012fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	6039      	str	r1, [r7, #0]
 8001306:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001308:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130c:	2b00      	cmp	r3, #0
 800130e:	db0a      	blt.n	8001326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	b2da      	uxtb	r2, r3
 8001314:	490c      	ldr	r1, [pc, #48]	; (8001348 <__NVIC_SetPriority+0x4c>)
 8001316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131a:	0112      	lsls	r2, r2, #4
 800131c:	b2d2      	uxtb	r2, r2
 800131e:	440b      	add	r3, r1
 8001320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001324:	e00a      	b.n	800133c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4908      	ldr	r1, [pc, #32]	; (800134c <__NVIC_SetPriority+0x50>)
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	3b04      	subs	r3, #4
 8001334:	0112      	lsls	r2, r2, #4
 8001336:	b2d2      	uxtb	r2, r2
 8001338:	440b      	add	r3, r1
 800133a:	761a      	strb	r2, [r3, #24]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	e000e100 	.word	0xe000e100
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001350:	b480      	push	{r7}
 8001352:	b089      	sub	sp, #36	; 0x24
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	f1c3 0307 	rsb	r3, r3, #7
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf28      	it	cs
 800136e:	2304      	movcs	r3, #4
 8001370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3304      	adds	r3, #4
 8001376:	2b06      	cmp	r3, #6
 8001378:	d902      	bls.n	8001380 <NVIC_EncodePriority+0x30>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3b03      	subs	r3, #3
 800137e:	e000      	b.n	8001382 <NVIC_EncodePriority+0x32>
 8001380:	2300      	movs	r3, #0
 8001382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001384:	f04f 32ff 	mov.w	r2, #4294967295
 8001388:	69bb      	ldr	r3, [r7, #24]
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	401a      	ands	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001398:	f04f 31ff 	mov.w	r1, #4294967295
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa01 f303 	lsl.w	r3, r1, r3
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	4313      	orrs	r3, r2
         );
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3724      	adds	r7, #36	; 0x24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
	...

080013b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3b01      	subs	r3, #1
 80013c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013c8:	d301      	bcc.n	80013ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00f      	b.n	80013ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ce:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <SysTick_Config+0x40>)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013d6:	210f      	movs	r1, #15
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f7ff ff8e 	bl	80012fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e0:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <SysTick_Config+0x40>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <SysTick_Config+0x40>)
 80013e8:	2207      	movs	r2, #7
 80013ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	e000e010 	.word	0xe000e010

080013fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff29 	bl	800125c <__NVIC_SetPriorityGrouping>
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b086      	sub	sp, #24
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	60b9      	str	r1, [r7, #8]
 800141c:	607a      	str	r2, [r7, #4]
 800141e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001424:	f7ff ff3e 	bl	80012a4 <__NVIC_GetPriorityGrouping>
 8001428:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	68b9      	ldr	r1, [r7, #8]
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f7ff ff8e 	bl	8001350 <NVIC_EncodePriority>
 8001434:	4602      	mov	r2, r0
 8001436:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800143a:	4611      	mov	r1, r2
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff ff5d 	bl	80012fc <__NVIC_SetPriority>
}
 8001442:	bf00      	nop
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b082      	sub	sp, #8
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff31 	bl	80012c0 <__NVIC_EnableIRQ>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffa2 	bl	80013b8 <SysTick_Config>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e0ac      	b.n	80015ec <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f8b2 	bl	8001600 <DFSDM_GetChannelFromInstance>
 800149c:	4603      	mov	r3, r0
 800149e:	4a55      	ldr	r2, [pc, #340]	; (80015f4 <HAL_DFSDM_ChannelInit+0x174>)
 80014a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e09f      	b.n	80015ec <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fbb5 	bl	8000c1c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80014b2:	4b51      	ldr	r3, [pc, #324]	; (80015f8 <HAL_DFSDM_ChannelInit+0x178>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	3301      	adds	r3, #1
 80014b8:	4a4f      	ldr	r2, [pc, #316]	; (80015f8 <HAL_DFSDM_ChannelInit+0x178>)
 80014ba:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80014bc:	4b4e      	ldr	r3, [pc, #312]	; (80015f8 <HAL_DFSDM_ChannelInit+0x178>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d125      	bne.n	8001510 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80014c4:	4b4d      	ldr	r3, [pc, #308]	; (80015fc <HAL_DFSDM_ChannelInit+0x17c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a4c      	ldr	r2, [pc, #304]	; (80015fc <HAL_DFSDM_ChannelInit+0x17c>)
 80014ca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80014ce:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80014d0:	4b4a      	ldr	r3, [pc, #296]	; (80015fc <HAL_DFSDM_ChannelInit+0x17c>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	4948      	ldr	r1, [pc, #288]	; (80015fc <HAL_DFSDM_ChannelInit+0x17c>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80014de:	4b47      	ldr	r3, [pc, #284]	; (80015fc <HAL_DFSDM_ChannelInit+0x17c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a46      	ldr	r2, [pc, #280]	; (80015fc <HAL_DFSDM_ChannelInit+0x17c>)
 80014e4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80014e8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	791b      	ldrb	r3, [r3, #4]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d108      	bne.n	8001504 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80014f2:	4b42      	ldr	r3, [pc, #264]	; (80015fc <HAL_DFSDM_ChannelInit+0x17c>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	68db      	ldr	r3, [r3, #12]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	041b      	lsls	r3, r3, #16
 80014fe:	493f      	ldr	r1, [pc, #252]	; (80015fc <HAL_DFSDM_ChannelInit+0x17c>)
 8001500:	4313      	orrs	r3, r2
 8001502:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001504:	4b3d      	ldr	r3, [pc, #244]	; (80015fc <HAL_DFSDM_ChannelInit+0x17c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a3c      	ldr	r2, [pc, #240]	; (80015fc <HAL_DFSDM_ChannelInit+0x17c>)
 800150a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800150e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800151e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6819      	ldr	r1, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800152e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001534:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 020f 	bic.w	r2, r2, #15
 800154c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6819      	ldr	r1, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800155c:	431a      	orrs	r2, r3
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001574:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6899      	ldr	r1, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001584:	3b01      	subs	r3, #1
 8001586:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001588:	431a      	orrs	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	685a      	ldr	r2, [r3, #4]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f002 0207 	and.w	r2, r2, #7
 80015a0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	6859      	ldr	r1, [r3, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ac:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80015b4:	431a      	orrs	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015cc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f810 	bl	8001600 <DFSDM_GetChannelFromInstance>
 80015e0:	4602      	mov	r2, r0
 80015e2:	4904      	ldr	r1, [pc, #16]	; (80015f4 <HAL_DFSDM_ChannelInit+0x174>)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80015ea:	2300      	movs	r3, #0
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	20000384 	.word	0x20000384
 80015f8:	20000380 	.word	0x20000380
 80015fc:	40016000 	.word	0x40016000

08001600 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a1c      	ldr	r2, [pc, #112]	; (800167c <DFSDM_GetChannelFromInstance+0x7c>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d102      	bne.n	8001616 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	e02b      	b.n	800166e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a19      	ldr	r2, [pc, #100]	; (8001680 <DFSDM_GetChannelFromInstance+0x80>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d102      	bne.n	8001624 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800161e:	2301      	movs	r3, #1
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	e024      	b.n	800166e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a17      	ldr	r2, [pc, #92]	; (8001684 <DFSDM_GetChannelFromInstance+0x84>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d102      	bne.n	8001632 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800162c:	2302      	movs	r3, #2
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	e01d      	b.n	800166e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <DFSDM_GetChannelFromInstance+0x88>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d102      	bne.n	8001640 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800163a:	2304      	movs	r3, #4
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	e016      	b.n	800166e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <DFSDM_GetChannelFromInstance+0x8c>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d102      	bne.n	800164e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001648:	2305      	movs	r3, #5
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	e00f      	b.n	800166e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a0f      	ldr	r2, [pc, #60]	; (8001690 <DFSDM_GetChannelFromInstance+0x90>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d102      	bne.n	800165c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001656:	2306      	movs	r3, #6
 8001658:	60fb      	str	r3, [r7, #12]
 800165a:	e008      	b.n	800166e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	4a0d      	ldr	r2, [pc, #52]	; (8001694 <DFSDM_GetChannelFromInstance+0x94>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d102      	bne.n	800166a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001664:	2307      	movs	r3, #7
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	e001      	b.n	800166e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800166a:	2303      	movs	r3, #3
 800166c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40016000 	.word	0x40016000
 8001680:	40016020 	.word	0x40016020
 8001684:	40016040 	.word	0x40016040
 8001688:	40016080 	.word	0x40016080
 800168c:	400160a0 	.word	0x400160a0
 8001690:	400160c0 	.word	0x400160c0
 8001694:	400160e0 	.word	0x400160e0

08001698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001698:	b480      	push	{r7}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016a6:	e17f      	b.n	80019a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2101      	movs	r1, #1
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	fa01 f303 	lsl.w	r3, r1, r3
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	f000 8171 	beq.w	80019a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d005      	beq.n	80016d8 <HAL_GPIO_Init+0x40>
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d130      	bne.n	800173a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	2203      	movs	r2, #3
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800170e:	2201      	movs	r2, #1
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	4013      	ands	r3, r2
 800171c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	091b      	lsrs	r3, r3, #4
 8001724:	f003 0201 	and.w	r2, r3, #1
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b03      	cmp	r3, #3
 8001744:	d118      	bne.n	8001778 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800174c:	2201      	movs	r2, #1
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	fa02 f303 	lsl.w	r3, r2, r3
 8001754:	43db      	mvns	r3, r3
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	08db      	lsrs	r3, r3, #3
 8001762:	f003 0201 	and.w	r2, r3, #1
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	4313      	orrs	r3, r2
 8001770:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b03      	cmp	r3, #3
 8001782:	d017      	beq.n	80017b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	689a      	ldr	r2, [r3, #8]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d123      	bne.n	8001808 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	08da      	lsrs	r2, r3, #3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	3208      	adds	r2, #8
 80017c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	220f      	movs	r2, #15
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4013      	ands	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	691a      	ldr	r2, [r3, #16]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	08da      	lsrs	r2, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3208      	adds	r2, #8
 8001802:	6939      	ldr	r1, [r7, #16]
 8001804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	2203      	movs	r2, #3
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4013      	ands	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 0203 	and.w	r2, r3, #3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4313      	orrs	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80ac 	beq.w	80019a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184a:	4b5f      	ldr	r3, [pc, #380]	; (80019c8 <HAL_GPIO_Init+0x330>)
 800184c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800184e:	4a5e      	ldr	r2, [pc, #376]	; (80019c8 <HAL_GPIO_Init+0x330>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6613      	str	r3, [r2, #96]	; 0x60
 8001856:	4b5c      	ldr	r3, [pc, #368]	; (80019c8 <HAL_GPIO_Init+0x330>)
 8001858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001862:	4a5a      	ldr	r2, [pc, #360]	; (80019cc <HAL_GPIO_Init+0x334>)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	089b      	lsrs	r3, r3, #2
 8001868:	3302      	adds	r3, #2
 800186a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	f003 0303 	and.w	r3, r3, #3
 8001876:	009b      	lsls	r3, r3, #2
 8001878:	220f      	movs	r2, #15
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800188c:	d025      	beq.n	80018da <HAL_GPIO_Init+0x242>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4f      	ldr	r2, [pc, #316]	; (80019d0 <HAL_GPIO_Init+0x338>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d01f      	beq.n	80018d6 <HAL_GPIO_Init+0x23e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4e      	ldr	r2, [pc, #312]	; (80019d4 <HAL_GPIO_Init+0x33c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d019      	beq.n	80018d2 <HAL_GPIO_Init+0x23a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4d      	ldr	r2, [pc, #308]	; (80019d8 <HAL_GPIO_Init+0x340>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d013      	beq.n	80018ce <HAL_GPIO_Init+0x236>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4c      	ldr	r2, [pc, #304]	; (80019dc <HAL_GPIO_Init+0x344>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d00d      	beq.n	80018ca <HAL_GPIO_Init+0x232>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4b      	ldr	r2, [pc, #300]	; (80019e0 <HAL_GPIO_Init+0x348>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d007      	beq.n	80018c6 <HAL_GPIO_Init+0x22e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4a      	ldr	r2, [pc, #296]	; (80019e4 <HAL_GPIO_Init+0x34c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d101      	bne.n	80018c2 <HAL_GPIO_Init+0x22a>
 80018be:	2306      	movs	r3, #6
 80018c0:	e00c      	b.n	80018dc <HAL_GPIO_Init+0x244>
 80018c2:	2307      	movs	r3, #7
 80018c4:	e00a      	b.n	80018dc <HAL_GPIO_Init+0x244>
 80018c6:	2305      	movs	r3, #5
 80018c8:	e008      	b.n	80018dc <HAL_GPIO_Init+0x244>
 80018ca:	2304      	movs	r3, #4
 80018cc:	e006      	b.n	80018dc <HAL_GPIO_Init+0x244>
 80018ce:	2303      	movs	r3, #3
 80018d0:	e004      	b.n	80018dc <HAL_GPIO_Init+0x244>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e002      	b.n	80018dc <HAL_GPIO_Init+0x244>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e000      	b.n	80018dc <HAL_GPIO_Init+0x244>
 80018da:	2300      	movs	r3, #0
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	f002 0203 	and.w	r2, r2, #3
 80018e2:	0092      	lsls	r2, r2, #2
 80018e4:	4093      	lsls	r3, r2
 80018e6:	693a      	ldr	r2, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018ec:	4937      	ldr	r1, [pc, #220]	; (80019cc <HAL_GPIO_Init+0x334>)
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	089b      	lsrs	r3, r3, #2
 80018f2:	3302      	adds	r3, #2
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_GPIO_Init+0x350>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	43db      	mvns	r3, r3
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	4013      	ands	r3, r2
 8001908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800191e:	4a32      	ldr	r2, [pc, #200]	; (80019e8 <HAL_GPIO_Init+0x350>)
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001924:	4b30      	ldr	r3, [pc, #192]	; (80019e8 <HAL_GPIO_Init+0x350>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	43db      	mvns	r3, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d003      	beq.n	8001948 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4313      	orrs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001948:	4a27      	ldr	r2, [pc, #156]	; (80019e8 <HAL_GPIO_Init+0x350>)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800194e:	4b26      	ldr	r3, [pc, #152]	; (80019e8 <HAL_GPIO_Init+0x350>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4313      	orrs	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001972:	4a1d      	ldr	r2, [pc, #116]	; (80019e8 <HAL_GPIO_Init+0x350>)
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <HAL_GPIO_Init+0x350>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	43db      	mvns	r3, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4013      	ands	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	4313      	orrs	r3, r2
 800199a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800199c:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <HAL_GPIO_Init+0x350>)
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3301      	adds	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa22 f303 	lsr.w	r3, r2, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f47f ae78 	bne.w	80016a8 <HAL_GPIO_Init+0x10>
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	371c      	adds	r7, #28
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	40010000 	.word	0x40010000
 80019d0:	48000400 	.word	0x48000400
 80019d4:	48000800 	.word	0x48000800
 80019d8:	48000c00 	.word	0x48000c00
 80019dc:	48001000 	.word	0x48001000
 80019e0:	48001400 	.word	0x48001400
 80019e4:	48001800 	.word	0x48001800
 80019e8:	40010400 	.word	0x40010400

080019ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
 80019f8:	4613      	mov	r3, r2
 80019fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019fc:	787b      	ldrb	r3, [r7, #1]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d003      	beq.n	8001a0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a02:	887a      	ldrh	r2, [r7, #2]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a08:	e002      	b.n	8001a10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a0a:	887a      	ldrh	r2, [r7, #2]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a26:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a28:	695a      	ldr	r2, [r3, #20]
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d006      	beq.n	8001a40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a32:	4a05      	ldr	r2, [pc, #20]	; (8001a48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a34:	88fb      	ldrh	r3, [r7, #6]
 8001a36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f806 	bl	8001a4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40010400 	.word	0x40010400

08001a4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e08d      	b.n	8001b90 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d106      	bne.n	8001a8e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff f92b 	bl	8000ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2224      	movs	r2, #36	; 0x24
 8001a92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 0201 	bic.w	r2, r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ab2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	689a      	ldr	r2, [r3, #8]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ac2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d107      	bne.n	8001adc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	e006      	b.n	8001aea <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ae8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d108      	bne.n	8001b04 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	e007      	b.n	8001b14 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b12:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	6812      	ldr	r2, [r2, #0]
 8001b1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b26:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b36:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691a      	ldr	r2, [r3, #16]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	695b      	ldr	r3, [r3, #20]
 8001b40:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	430a      	orrs	r2, r1
 8001b50:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69d9      	ldr	r1, [r3, #28]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a1a      	ldr	r2, [r3, #32]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f042 0201 	orr.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2200      	movs	r2, #0
 8001b84:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}

08001b98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b20      	cmp	r3, #32
 8001bac:	d138      	bne.n	8001c20 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e032      	b.n	8001c22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2224      	movs	r2, #36	; 0x24
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0201 	bic.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6819      	ldr	r1, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f042 0201 	orr.w	r2, r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2220      	movs	r2, #32
 8001c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	e000      	b.n	8001c22 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c20:	2302      	movs	r3, #2
  }
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b085      	sub	sp, #20
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b20      	cmp	r3, #32
 8001c42:	d139      	bne.n	8001cb8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d101      	bne.n	8001c52 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e033      	b.n	8001cba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2201      	movs	r2, #1
 8001c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2224      	movs	r2, #36	; 0x24
 8001c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0201 	bic.w	r2, r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c80:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0201 	orr.w	r2, r2, #1
 8001ca2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2220      	movs	r2, #32
 8001ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	e000      	b.n	8001cba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001cb8:	2302      	movs	r3, #2
  }
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3714      	adds	r7, #20
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cc8:	b08f      	sub	sp, #60	; 0x3c
 8001cca:	af0a      	add	r7, sp, #40	; 0x28
 8001ccc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e116      	b.n	8001f06 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d106      	bne.n	8001cf8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f006 fdaa 	bl	800884c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f003 fc09 	bl	800552e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	687e      	ldr	r6, [r7, #4]
 8001d24:	466d      	mov	r5, sp
 8001d26:	f106 0410 	add.w	r4, r6, #16
 8001d2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d36:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d3a:	1d33      	adds	r3, r6, #4
 8001d3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d3e:	6838      	ldr	r0, [r7, #0]
 8001d40:	f003 fb1b 	bl	800537a <USB_CoreInit>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e0d7      	b.n	8001f06 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2100      	movs	r1, #0
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 fbf7 	bl	8005550 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	73fb      	strb	r3, [r7, #15]
 8001d66:	e04a      	b.n	8001dfe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d68:	7bfa      	ldrb	r2, [r7, #15]
 8001d6a:	6879      	ldr	r1, [r7, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	00db      	lsls	r3, r3, #3
 8001d70:	4413      	add	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	440b      	add	r3, r1
 8001d76:	333d      	adds	r3, #61	; 0x3d
 8001d78:	2201      	movs	r2, #1
 8001d7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d7c:	7bfa      	ldrb	r2, [r7, #15]
 8001d7e:	6879      	ldr	r1, [r7, #4]
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	4413      	add	r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	333c      	adds	r3, #60	; 0x3c
 8001d8c:	7bfa      	ldrb	r2, [r7, #15]
 8001d8e:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d90:	7bfa      	ldrb	r2, [r7, #15]
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	b298      	uxth	r0, r3
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4413      	add	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	440b      	add	r3, r1
 8001da2:	3356      	adds	r3, #86	; 0x56
 8001da4:	4602      	mov	r2, r0
 8001da6:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001da8:	7bfa      	ldrb	r2, [r7, #15]
 8001daa:	6879      	ldr	r1, [r7, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	00db      	lsls	r3, r3, #3
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	3340      	adds	r3, #64	; 0x40
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001dbc:	7bfa      	ldrb	r2, [r7, #15]
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4413      	add	r3, r2
 8001dc6:	009b      	lsls	r3, r3, #2
 8001dc8:	440b      	add	r3, r1
 8001dca:	3344      	adds	r3, #68	; 0x44
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dd0:	7bfa      	ldrb	r2, [r7, #15]
 8001dd2:	6879      	ldr	r1, [r7, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4413      	add	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	3348      	adds	r3, #72	; 0x48
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001de4:	7bfa      	ldrb	r2, [r7, #15]
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	334c      	adds	r3, #76	; 0x4c
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	73fb      	strb	r3, [r7, #15]
 8001dfe:	7bfa      	ldrb	r2, [r7, #15]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d3af      	bcc.n	8001d68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	73fb      	strb	r3, [r7, #15]
 8001e0c:	e044      	b.n	8001e98 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e0e:	7bfa      	ldrb	r2, [r7, #15]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4613      	mov	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e20:	2200      	movs	r2, #0
 8001e22:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e24:	7bfa      	ldrb	r2, [r7, #15]
 8001e26:	6879      	ldr	r1, [r7, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e36:	7bfa      	ldrb	r2, [r7, #15]
 8001e38:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e3a:	7bfa      	ldrb	r2, [r7, #15]
 8001e3c:	6879      	ldr	r1, [r7, #4]
 8001e3e:	4613      	mov	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4413      	add	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	440b      	add	r3, r1
 8001e48:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e50:	7bfa      	ldrb	r2, [r7, #15]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001e62:	2200      	movs	r2, #0
 8001e64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e66:	7bfa      	ldrb	r2, [r7, #15]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	4413      	add	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	6879      	ldr	r1, [r7, #4]
 8001e80:	4613      	mov	r3, r2
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4413      	add	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e8e:	2200      	movs	r2, #0
 8001e90:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	3301      	adds	r3, #1
 8001e96:	73fb      	strb	r3, [r7, #15]
 8001e98:	7bfa      	ldrb	r2, [r7, #15]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d3b5      	bcc.n	8001e0e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	603b      	str	r3, [r7, #0]
 8001ea8:	687e      	ldr	r6, [r7, #4]
 8001eaa:	466d      	mov	r5, sp
 8001eac:	f106 0410 	add.w	r4, r6, #16
 8001eb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eb8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ebc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ec0:	1d33      	adds	r3, r6, #4
 8001ec2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec4:	6838      	ldr	r0, [r7, #0]
 8001ec6:	f003 fb8f 	bl	80055e8 <USB_DevInit>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d005      	beq.n	8001edc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e014      	b.n	8001f06 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef0:	2b01      	cmp	r3, #1
 8001ef2:	d102      	bne.n	8001efa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f001 f851 	bl	8002f9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f004 fb3d 	bl	800657e <USB_DevDisconnect>

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001f0e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b084      	sub	sp, #16
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d101      	bne.n	8001f2a <HAL_PCD_Start+0x1c>
 8001f26:	2302      	movs	r3, #2
 8001f28:	e01c      	b.n	8001f64 <HAL_PCD_Start+0x56>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d105      	bne.n	8001f46 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 fade 	bl	800550c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f004 faf1 	bl	800653c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f6c:	b590      	push	{r4, r7, lr}
 8001f6e:	b08d      	sub	sp, #52	; 0x34
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f7a:	6a3b      	ldr	r3, [r7, #32]
 8001f7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f004 fbaf 	bl	80066e6 <USB_GetMode>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f040 847e 	bne.w	800288c <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4618      	mov	r0, r3
 8001f96:	f004 fb13 	bl	80065c0 <USB_ReadInterrupts>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	f000 8474 	beq.w	800288a <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	0a1b      	lsrs	r3, r3, #8
 8001fac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f004 fb00 	bl	80065c0 <USB_ReadInterrupts>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d107      	bne.n	8001fda <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f002 0202 	and.w	r2, r2, #2
 8001fd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f004 faee 	bl	80065c0 <USB_ReadInterrupts>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	2b10      	cmp	r3, #16
 8001fec:	d161      	bne.n	80020b2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699a      	ldr	r2, [r3, #24]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0210 	bic.w	r2, r2, #16
 8001ffc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	6a1b      	ldr	r3, [r3, #32]
 8002002:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	f003 020f 	and.w	r2, r3, #15
 800200a:	4613      	mov	r3, r2
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	3304      	adds	r3, #4
 800201c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	0c5b      	lsrs	r3, r3, #17
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	2b02      	cmp	r3, #2
 8002028:	d124      	bne.n	8002074 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002030:	4013      	ands	r3, r2
 8002032:	2b00      	cmp	r3, #0
 8002034:	d035      	beq.n	80020a2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002040:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002044:	b29b      	uxth	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	6a38      	ldr	r0, [r7, #32]
 800204a:	f004 f925 	bl	8006298 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	68da      	ldr	r2, [r3, #12]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800205a:	441a      	add	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	091b      	lsrs	r3, r3, #4
 8002068:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800206c:	441a      	add	r2, r3
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	615a      	str	r2, [r3, #20]
 8002072:	e016      	b.n	80020a2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	0c5b      	lsrs	r3, r3, #17
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	2b06      	cmp	r3, #6
 800207e:	d110      	bne.n	80020a2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002086:	2208      	movs	r2, #8
 8002088:	4619      	mov	r1, r3
 800208a:	6a38      	ldr	r0, [r7, #32]
 800208c:	f004 f904 	bl	8006298 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	695a      	ldr	r2, [r3, #20]
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800209c:	441a      	add	r2, r3
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699a      	ldr	r2, [r3, #24]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f042 0210 	orr.w	r2, r2, #16
 80020b0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f004 fa82 	bl	80065c0 <USB_ReadInterrupts>
 80020bc:	4603      	mov	r3, r0
 80020be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020c2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020c6:	f040 80a7 	bne.w	8002218 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f004 fa87 	bl	80065e6 <USB_ReadDevAllOutEpInterrupt>
 80020d8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020da:	e099      	b.n	8002210 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 808e 	beq.w	8002204 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ee:	b2d2      	uxtb	r2, r2
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f004 faab 	bl	800664e <USB_ReadDevOutEPInterrupt>
 80020f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00c      	beq.n	800211e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	4413      	add	r3, r2
 800210c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002110:	461a      	mov	r2, r3
 8002112:	2301      	movs	r3, #1
 8002114:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f000 fe65 	bl	8002de8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00c      	beq.n	8002142 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	4413      	add	r3, r2
 8002130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002134:	461a      	mov	r2, r3
 8002136:	2308      	movs	r3, #8
 8002138:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800213a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fea1 	bl	8002e84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	f003 0310 	and.w	r3, r3, #16
 8002148:	2b00      	cmp	r3, #0
 800214a:	d008      	beq.n	800215e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	4413      	add	r3, r2
 8002154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002158:	461a      	mov	r2, r3
 800215a:	2310      	movs	r3, #16
 800215c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d030      	beq.n	80021ca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002168:	6a3b      	ldr	r3, [r7, #32]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002170:	2b80      	cmp	r3, #128	; 0x80
 8002172:	d109      	bne.n	8002188 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	69fa      	ldr	r2, [r7, #28]
 800217e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002182:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002186:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800218a:	4613      	mov	r3, r2
 800218c:	00db      	lsls	r3, r3, #3
 800218e:	4413      	add	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	3304      	adds	r3, #4
 800219c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	78db      	ldrb	r3, [r3, #3]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d108      	bne.n	80021b8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2200      	movs	r2, #0
 80021aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	4619      	mov	r1, r3
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f006 fcb0 	bl	8008b18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	015a      	lsls	r2, r3, #5
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	4413      	add	r3, r2
 80021c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021c4:	461a      	mov	r2, r3
 80021c6:	2302      	movs	r3, #2
 80021c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	f003 0320 	and.w	r3, r3, #32
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021e0:	461a      	mov	r2, r3
 80021e2:	2320      	movs	r3, #32
 80021e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d009      	beq.n	8002204 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021fc:	461a      	mov	r2, r3
 80021fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002202:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	3301      	adds	r3, #1
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800220c:	085b      	lsrs	r3, r3, #1
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002212:	2b00      	cmp	r3, #0
 8002214:	f47f af62 	bne.w	80020dc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f004 f9cf 	bl	80065c0 <USB_ReadInterrupts>
 8002222:	4603      	mov	r3, r0
 8002224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002228:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800222c:	f040 80a4 	bne.w	8002378 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4618      	mov	r0, r3
 8002236:	f004 f9f0 	bl	800661a <USB_ReadDevAllInEpInterrupt>
 800223a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002240:	e096      	b.n	8002370 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	f000 808b 	beq.w	8002364 <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f004 fa16 	bl	800668a <USB_ReadDevInEPInterrupt>
 800225e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d020      	beq.n	80022ac <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	f003 030f 	and.w	r3, r3, #15
 8002270:	2201      	movs	r2, #1
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800227e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	43db      	mvns	r3, r3
 8002284:	69f9      	ldr	r1, [r7, #28]
 8002286:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800228a:	4013      	ands	r3, r2
 800228c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	015a      	lsls	r2, r3, #5
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	4413      	add	r3, r2
 8002296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800229a:	461a      	mov	r2, r3
 800229c:	2301      	movs	r3, #1
 800229e:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	4619      	mov	r1, r3
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f006 fba1 	bl	80089ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d008      	beq.n	80022c8 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80022b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022c2:	461a      	mov	r2, r3
 80022c4:	2308      	movs	r3, #8
 80022c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022de:	461a      	mov	r2, r3
 80022e0:	2310      	movs	r3, #16
 80022e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d008      	beq.n	8002300 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	015a      	lsls	r2, r3, #5
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	4413      	add	r3, r2
 80022f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022fa:	461a      	mov	r2, r3
 80022fc:	2340      	movs	r3, #64	; 0x40
 80022fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d023      	beq.n	8002352 <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800230a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800230c:	6a38      	ldr	r0, [r7, #32]
 800230e:	f003 faad 	bl	800586c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002314:	4613      	mov	r3, r2
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	3338      	adds	r3, #56	; 0x38
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	3304      	adds	r3, #4
 8002324:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	78db      	ldrb	r3, [r3, #3]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d108      	bne.n	8002340 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2200      	movs	r2, #0
 8002332:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	b2db      	uxtb	r3, r3
 8002338:	4619      	mov	r1, r3
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f006 fbfe 	bl	8008b3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	015a      	lsls	r2, r3, #5
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	4413      	add	r3, r2
 8002348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800234c:	461a      	mov	r2, r3
 800234e:	2302      	movs	r3, #2
 8002350:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800235c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fcba 	bl	8002cd8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	3301      	adds	r3, #1
 8002368:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800236a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800236c:	085b      	lsrs	r3, r3, #1
 800236e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002372:	2b00      	cmp	r3, #0
 8002374:	f47f af65 	bne.w	8002242 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f004 f91f 	bl	80065c0 <USB_ReadInterrupts>
 8002382:	4603      	mov	r3, r0
 8002384:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002388:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800238c:	d122      	bne.n	80023d4 <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	69fa      	ldr	r2, [r7, #28]
 8002398:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d108      	bne.n	80023be <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80023b4:	2100      	movs	r1, #0
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f006 fe1e 	bl	8008ff8 <HAL_PCDEx_LPM_Callback>
 80023bc:	e002      	b.n	80023c4 <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f006 fb82 	bl	8008ac8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	695a      	ldr	r2, [r3, #20]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80023d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f004 f8f1 	bl	80065c0 <USB_ReadInterrupts>
 80023de:	4603      	mov	r3, r0
 80023e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023e8:	d112      	bne.n	8002410 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d102      	bne.n	8002400 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f006 fb3e 	bl	8008a7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800240e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f004 f8d3 	bl	80065c0 <USB_ReadInterrupts>
 800241a:	4603      	mov	r3, r0
 800241c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002424:	d121      	bne.n	800246a <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	695a      	ldr	r2, [r3, #20]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002434:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d111      	bne.n	8002464 <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800244e:	089b      	lsrs	r3, r3, #2
 8002450:	f003 020f 	and.w	r2, r3, #15
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800245a:	2101      	movs	r1, #1
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f006 fdcb 	bl	8008ff8 <HAL_PCDEx_LPM_Callback>
 8002462:	e002      	b.n	800246a <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f006 fb09 	bl	8008a7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f004 f8a6 	bl	80065c0 <USB_ReadInterrupts>
 8002474:	4603      	mov	r3, r0
 8002476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247e:	f040 80b5 	bne.w	80025ec <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	69fa      	ldr	r2, [r7, #28]
 800248c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2110      	movs	r1, #16
 800249c:	4618      	mov	r0, r3
 800249e:	f003 f9e5 	bl	800586c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a2:	2300      	movs	r3, #0
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a6:	e046      	b.n	8002536 <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024aa:	015a      	lsls	r2, r3, #5
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	4413      	add	r3, r2
 80024b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b4:	461a      	mov	r2, r3
 80024b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024ba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024be:	015a      	lsls	r2, r3, #5
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	4413      	add	r3, r2
 80024c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024cc:	0151      	lsls	r1, r2, #5
 80024ce:	69fa      	ldr	r2, [r7, #28]
 80024d0:	440a      	add	r2, r1
 80024d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e8:	461a      	mov	r2, r3
 80024ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024ee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f2:	015a      	lsls	r2, r3, #5
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	4413      	add	r3, r2
 80024f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002500:	0151      	lsls	r1, r2, #5
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	440a      	add	r2, r1
 8002506:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800250a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800250e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002520:	0151      	lsls	r1, r2, #5
 8002522:	69fa      	ldr	r2, [r7, #28]
 8002524:	440a      	add	r2, r1
 8002526:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800252a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800252e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	3301      	adds	r3, #1
 8002534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800253c:	429a      	cmp	r2, r3
 800253e:	d3b3      	bcc.n	80024a8 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002546:	69db      	ldr	r3, [r3, #28]
 8002548:	69fa      	ldr	r2, [r7, #28]
 800254a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800254e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002552:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002558:	2b00      	cmp	r3, #0
 800255a:	d016      	beq.n	800258a <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002566:	69fa      	ldr	r2, [r7, #28]
 8002568:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800256c:	f043 030b 	orr.w	r3, r3, #11
 8002570:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800257a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257c:	69fa      	ldr	r2, [r7, #28]
 800257e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002582:	f043 030b 	orr.w	r3, r3, #11
 8002586:	6453      	str	r3, [r2, #68]	; 0x44
 8002588:	e015      	b.n	80025b6 <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002598:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800259c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025a0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b0:	f043 030b 	orr.w	r3, r3, #11
 80025b4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	69fa      	ldr	r2, [r7, #28]
 80025c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025c8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025d4:	4619      	mov	r1, r3
 80025d6:	4610      	mov	r0, r2
 80025d8:	f004 f8b6 	bl	8006748 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f003 ffe5 	bl	80065c0 <USB_ReadInterrupts>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002600:	d124      	bne.n	800264c <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f004 f87b 	bl	8006702 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f003 f9a8 	bl	8005966 <USB_GetDevSpeed>
 8002616:	4603      	mov	r3, r0
 8002618:	461a      	mov	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681c      	ldr	r4, [r3, #0]
 8002622:	f001 fb87 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8002626:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800262c:	b2db      	uxtb	r3, r3
 800262e:	461a      	mov	r2, r3
 8002630:	4620      	mov	r0, r4
 8002632:	f002 fecf 	bl	80053d4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f006 fa01 	bl	8008a3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800264a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4618      	mov	r0, r3
 8002652:	f003 ffb5 	bl	80065c0 <USB_ReadInterrupts>
 8002656:	4603      	mov	r3, r0
 8002658:	f003 0308 	and.w	r3, r3, #8
 800265c:	2b08      	cmp	r3, #8
 800265e:	d10a      	bne.n	8002676 <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002660:	6878      	ldr	r0, [r7, #4]
 8002662:	f006 f9de 	bl	8008a22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	695a      	ldr	r2, [r3, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f002 0208 	and.w	r2, r2, #8
 8002674:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f003 ffa0 	bl	80065c0 <USB_ReadInterrupts>
 8002680:	4603      	mov	r3, r0
 8002682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002686:	2b80      	cmp	r3, #128	; 0x80
 8002688:	d122      	bne.n	80026d0 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800268a:	6a3b      	ldr	r3, [r7, #32]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002692:	6a3b      	ldr	r3, [r7, #32]
 8002694:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002696:	2301      	movs	r3, #1
 8002698:	627b      	str	r3, [r7, #36]	; 0x24
 800269a:	e014      	b.n	80026c6 <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	440b      	add	r3, r1
 80026aa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d105      	bne.n	80026c0 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	4619      	mov	r1, r3
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f000 fadb 	bl	8002c76 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	3301      	adds	r3, #1
 80026c4:	627b      	str	r3, [r7, #36]	; 0x24
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d3e5      	bcc.n	800269c <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4618      	mov	r0, r3
 80026d6:	f003 ff73 	bl	80065c0 <USB_ReadInterrupts>
 80026da:	4603      	mov	r3, r0
 80026dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026e4:	d13b      	bne.n	800275e <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026e6:	2301      	movs	r3, #1
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ea:	e02b      	b.n	8002744 <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002700:	4613      	mov	r3, r2
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	4413      	add	r3, r2
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	3340      	adds	r3, #64	; 0x40
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b01      	cmp	r3, #1
 8002710:	d115      	bne.n	800273e <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002712:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002714:	2b00      	cmp	r3, #0
 8002716:	da12      	bge.n	800273e <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271c:	4613      	mov	r3, r2
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	4413      	add	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	440b      	add	r3, r1
 8002726:	333f      	adds	r3, #63	; 0x3f
 8002728:	2201      	movs	r2, #1
 800272a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272e:	b2db      	uxtb	r3, r3
 8002730:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002734:	b2db      	uxtb	r3, r3
 8002736:	4619      	mov	r1, r3
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f000 fa9c 	bl	8002c76 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	3301      	adds	r3, #1
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274a:	429a      	cmp	r2, r3
 800274c:	d3ce      	bcc.n	80026ec <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	695a      	ldr	r2, [r3, #20]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800275c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f003 ff2c 	bl	80065c0 <USB_ReadInterrupts>
 8002768:	4603      	mov	r3, r0
 800276a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002772:	d155      	bne.n	8002820 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002774:	2301      	movs	r3, #1
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
 8002778:	e045      	b.n	8002806 <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	015a      	lsls	r2, r3, #5
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	4413      	add	r3, r2
 8002782:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278e:	4613      	mov	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d12e      	bne.n	8002800 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027a2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	da2b      	bge.n	8002800 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80027b4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d121      	bne.n	8002800 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c0:	4613      	mov	r3, r2
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027ce:	2201      	movs	r2, #1
 80027d0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027d2:	6a3b      	ldr	r3, [r7, #32]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027de:	6a3b      	ldr	r3, [r7, #32]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10a      	bne.n	8002800 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	69fa      	ldr	r2, [r7, #28]
 80027f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027fc:	6053      	str	r3, [r2, #4]
            break;
 80027fe:	e007      	b.n	8002810 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	3301      	adds	r3, #1
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800280c:	429a      	cmp	r2, r3
 800280e:	d3b4      	bcc.n	800277a <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800281e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f003 fecb 	bl	80065c0 <USB_ReadInterrupts>
 800282a:	4603      	mov	r3, r0
 800282c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002834:	d10a      	bne.n	800284c <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f006 f992 	bl	8008b60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800284a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f003 feb5 	bl	80065c0 <USB_ReadInterrupts>
 8002856:	4603      	mov	r3, r0
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b04      	cmp	r3, #4
 800285e:	d115      	bne.n	800288c <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f006 f982 	bl	8008b7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6859      	ldr	r1, [r3, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	430a      	orrs	r2, r1
 8002886:	605a      	str	r2, [r3, #4]
 8002888:	e000      	b.n	800288c <HAL_PCD_IRQHandler+0x920>
      return;
 800288a:	bf00      	nop
    }
  }
}
 800288c:	3734      	adds	r7, #52	; 0x34
 800288e:	46bd      	mov	sp, r7
 8002890:	bd90      	pop	{r4, r7, pc}

08002892 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	460b      	mov	r3, r1
 800289c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d101      	bne.n	80028ac <HAL_PCD_SetAddress+0x1a>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e013      	b.n	80028d4 <HAL_PCD_SetAddress+0x42>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 fe13 	bl	80064f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	4608      	mov	r0, r1
 80028e6:	4611      	mov	r1, r2
 80028e8:	461a      	mov	r2, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	70fb      	strb	r3, [r7, #3]
 80028ee:	460b      	mov	r3, r1
 80028f0:	803b      	strh	r3, [r7, #0]
 80028f2:	4613      	mov	r3, r2
 80028f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028f6:	2300      	movs	r3, #0
 80028f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	da0f      	bge.n	8002922 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	f003 020f 	and.w	r2, r3, #15
 8002908:	4613      	mov	r3, r2
 800290a:	00db      	lsls	r3, r3, #3
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	3338      	adds	r3, #56	; 0x38
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	4413      	add	r3, r2
 8002916:	3304      	adds	r3, #4
 8002918:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2201      	movs	r2, #1
 800291e:	705a      	strb	r2, [r3, #1]
 8002920:	e00f      	b.n	8002942 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002922:	78fb      	ldrb	r3, [r7, #3]
 8002924:	f003 020f 	and.w	r2, r3, #15
 8002928:	4613      	mov	r3, r2
 800292a:	00db      	lsls	r3, r3, #3
 800292c:	4413      	add	r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	4413      	add	r3, r2
 8002938:	3304      	adds	r3, #4
 800293a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002942:	78fb      	ldrb	r3, [r7, #3]
 8002944:	f003 030f 	and.w	r3, r3, #15
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800294e:	883a      	ldrh	r2, [r7, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	78ba      	ldrb	r2, [r7, #2]
 8002958:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	785b      	ldrb	r3, [r3, #1]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d004      	beq.n	800296c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800296c:	78bb      	ldrb	r3, [r7, #2]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d102      	bne.n	8002978 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800297e:	2b01      	cmp	r3, #1
 8002980:	d101      	bne.n	8002986 <HAL_PCD_EP_Open+0xaa>
 8002982:	2302      	movs	r3, #2
 8002984:	e00e      	b.n	80029a4 <HAL_PCD_EP_Open+0xc8>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	68f9      	ldr	r1, [r7, #12]
 8002994:	4618      	mov	r0, r3
 8002996:	f003 f805 	bl	80059a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80029a2:	7afb      	ldrb	r3, [r7, #11]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	460b      	mov	r3, r1
 80029b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	da0f      	bge.n	80029e0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c0:	78fb      	ldrb	r3, [r7, #3]
 80029c2:	f003 020f 	and.w	r2, r3, #15
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	3338      	adds	r3, #56	; 0x38
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	4413      	add	r3, r2
 80029d4:	3304      	adds	r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	705a      	strb	r2, [r3, #1]
 80029de:	e00f      	b.n	8002a00 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029e0:	78fb      	ldrb	r3, [r7, #3]
 80029e2:	f003 020f 	and.w	r2, r3, #15
 80029e6:	4613      	mov	r3, r2
 80029e8:	00db      	lsls	r3, r3, #3
 80029ea:	4413      	add	r3, r2
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	4413      	add	r3, r2
 80029f6:	3304      	adds	r3, #4
 80029f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d101      	bne.n	8002a1a <HAL_PCD_EP_Close+0x6e>
 8002a16:	2302      	movs	r3, #2
 8002a18:	e00e      	b.n	8002a38 <HAL_PCD_EP_Close+0x8c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68f9      	ldr	r1, [r7, #12]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f003 f843 	bl	8005ab4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	607a      	str	r2, [r7, #4]
 8002a4a:	603b      	str	r3, [r7, #0]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a50:	7afb      	ldrb	r3, [r7, #11]
 8002a52:	f003 020f 	and.w	r2, r3, #15
 8002a56:	4613      	mov	r3, r2
 8002a58:	00db      	lsls	r3, r3, #3
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	4413      	add	r3, r2
 8002a66:	3304      	adds	r3, #4
 8002a68:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a82:	7afb      	ldrb	r3, [r7, #11]
 8002a84:	f003 030f 	and.w	r3, r3, #15
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6979      	ldr	r1, [r7, #20]
 8002a94:	4618      	mov	r0, r3
 8002a96:	f003 f8e9 	bl	8005c6c <USB_EPStartXfer>

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b086      	sub	sp, #24
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	607a      	str	r2, [r7, #4]
 8002aae:	603b      	str	r3, [r7, #0]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ab4:	7afb      	ldrb	r3, [r7, #11]
 8002ab6:	f003 020f 	and.w	r2, r3, #15
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	3338      	adds	r3, #56	; 0x38
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3304      	adds	r3, #4
 8002aca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	2200      	movs	r2, #0
 8002adc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ae4:	7afb      	ldrb	r3, [r7, #11]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	b2da      	uxtb	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6979      	ldr	r1, [r7, #20]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f003 f8b8 	bl	8005c6c <USB_EPStartXfer>

  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b084      	sub	sp, #16
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	460b      	mov	r3, r1
 8002b10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	f003 020f 	and.w	r2, r3, #15
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d901      	bls.n	8002b24 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e04e      	b.n	8002bc2 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	da0f      	bge.n	8002b4c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b2c:	78fb      	ldrb	r3, [r7, #3]
 8002b2e:	f003 020f 	and.w	r2, r3, #15
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	3338      	adds	r3, #56	; 0x38
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	4413      	add	r3, r2
 8002b40:	3304      	adds	r3, #4
 8002b42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2201      	movs	r2, #1
 8002b48:	705a      	strb	r2, [r3, #1]
 8002b4a:	e00d      	b.n	8002b68 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	00db      	lsls	r3, r3, #3
 8002b52:	4413      	add	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	3304      	adds	r3, #4
 8002b60:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b6e:	78fb      	ldrb	r3, [r7, #3]
 8002b70:	f003 030f 	and.w	r3, r3, #15
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_PCD_EP_SetStall+0x82>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e01c      	b.n	8002bc2 <HAL_PCD_EP_SetStall+0xbc>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68f9      	ldr	r1, [r7, #12]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f003 fbd6 	bl	8006348 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b9c:	78fb      	ldrb	r3, [r7, #3]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d108      	bne.n	8002bb8 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f003 fdc8 	bl	8006748 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b084      	sub	sp, #16
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002bd6:	78fb      	ldrb	r3, [r7, #3]
 8002bd8:	f003 020f 	and.w	r2, r3, #15
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d901      	bls.n	8002be8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e042      	b.n	8002c6e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002be8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	da0f      	bge.n	8002c10 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	f003 020f 	and.w	r2, r3, #15
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	3338      	adds	r3, #56	; 0x38
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	4413      	add	r3, r2
 8002c04:	3304      	adds	r3, #4
 8002c06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	705a      	strb	r2, [r3, #1]
 8002c0e:	e00f      	b.n	8002c30 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	f003 020f 	and.w	r2, r3, #15
 8002c16:	4613      	mov	r3, r2
 8002c18:	00db      	lsls	r3, r3, #3
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	4413      	add	r3, r2
 8002c26:	3304      	adds	r3, #4
 8002c28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_PCD_EP_ClrStall+0x86>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e00e      	b.n	8002c6e <HAL_PCD_EP_ClrStall+0xa4>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68f9      	ldr	r1, [r7, #12]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f003 fbe0 	bl	8006424 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b084      	sub	sp, #16
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da0c      	bge.n	8002ca4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c8a:	78fb      	ldrb	r3, [r7, #3]
 8002c8c:	f003 020f 	and.w	r2, r3, #15
 8002c90:	4613      	mov	r3, r2
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	3338      	adds	r3, #56	; 0x38
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	e00c      	b.n	8002cbe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ca4:	78fb      	ldrb	r3, [r7, #3]
 8002ca6:	f003 020f 	and.w	r2, r3, #15
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	4413      	add	r3, r2
 8002cba:	3304      	adds	r3, #4
 8002cbc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68f9      	ldr	r1, [r7, #12]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f003 fa03 	bl	80060d0 <USB_EPStopXfer>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002cce:	7afb      	ldrb	r3, [r7, #11]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3710      	adds	r7, #16
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b088      	sub	sp, #32
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	3338      	adds	r3, #56	; 0x38
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d901      	bls.n	8002d10 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e067      	b.n	8002de0 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	69fa      	ldr	r2, [r7, #28]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d902      	bls.n	8002d2c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	3303      	adds	r3, #3
 8002d30:	089b      	lsrs	r3, r3, #2
 8002d32:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d34:	e026      	b.n	8002d84 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	695b      	ldr	r3, [r3, #20]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	69fa      	ldr	r2, [r7, #28]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d902      	bls.n	8002d52 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3303      	adds	r3, #3
 8002d56:	089b      	lsrs	r3, r3, #2
 8002d58:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	68d9      	ldr	r1, [r3, #12]
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	6978      	ldr	r0, [r7, #20]
 8002d68:	f003 fa5c 	bl	8006224 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	68da      	ldr	r2, [r3, #12]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	441a      	add	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	695a      	ldr	r2, [r3, #20]
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	441a      	add	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d809      	bhi.n	8002dae <PCD_WriteEmptyTxFifo+0xd6>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d203      	bcs.n	8002dae <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1c3      	bne.n	8002d36 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d811      	bhi.n	8002dde <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	6939      	ldr	r1, [r7, #16]
 8002dd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002dda:	4013      	ands	r3, r2
 8002ddc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3720      	adds	r7, #32
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	333c      	adds	r3, #60	; 0x3c
 8002e00:	3304      	adds	r3, #4
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	4a19      	ldr	r2, [pc, #100]	; (8002e80 <PCD_EP_OutXfrComplete_int+0x98>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d124      	bne.n	8002e68 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	015a      	lsls	r2, r3, #5
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e34:	461a      	mov	r2, r3
 8002e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e3a:	6093      	str	r3, [r2, #8]
 8002e3c:	e01a      	b.n	8002e74 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e54:	461a      	mov	r2, r3
 8002e56:	2320      	movs	r3, #32
 8002e58:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f005 fda9 	bl	80089b8 <HAL_PCD_DataOutStageCallback>
 8002e66:	e005      	b.n	8002e74 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f005 fda2 	bl	80089b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	4f54310a 	.word	0x4f54310a

08002e84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	333c      	adds	r3, #60	; 0x3c
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4a0c      	ldr	r2, [pc, #48]	; (8002ee8 <PCD_EP_OutSetupPacket_int+0x64>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d90e      	bls.n	8002ed8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d009      	beq.n	8002ed8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ed6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f005 fd5b 	bl	8008994 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	4f54300a 	.word	0x4f54300a

08002eec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d107      	bne.n	8002f1a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f0a:	883b      	ldrh	r3, [r7, #0]
 8002f0c:	0419      	lsls	r1, r3, #16
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	629a      	str	r2, [r3, #40]	; 0x28
 8002f18:	e028      	b.n	8002f6c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	0c1b      	lsrs	r3, r3, #16
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	4413      	add	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	73fb      	strb	r3, [r7, #15]
 8002f2c:	e00d      	b.n	8002f4a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
 8002f34:	3340      	adds	r3, #64	; 0x40
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	0c1b      	lsrs	r3, r3, #16
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	4413      	add	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	3301      	adds	r3, #1
 8002f48:	73fb      	strb	r3, [r7, #15]
 8002f4a:	7bfa      	ldrb	r2, [r7, #15]
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d3ec      	bcc.n	8002f2e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f54:	883b      	ldrh	r3, [r7, #0]
 8002f56:	0418      	lsls	r0, r3, #16
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6819      	ldr	r1, [r3, #0]
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	68ba      	ldr	r2, [r7, #8]
 8002f62:	4302      	orrs	r2, r0
 8002f64:	3340      	adds	r3, #64	; 0x40
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f7a:	b480      	push	{r7}
 8002f7c:	b083      	sub	sp, #12
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	887a      	ldrh	r2, [r7, #2]
 8002f8c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f8e:	2300      	movs	r3, #0
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fce:	f043 0303 	orr.w	r3, r3, #3
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fe8:	4b05      	ldr	r3, [pc, #20]	; (8003000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a04      	ldr	r2, [pc, #16]	; (8003000 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002fee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ff2:	6013      	str	r3, [r2, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	40007000 	.word	0x40007000

08003004 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <HAL_PWREx_GetVoltageRange+0x18>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003010:	4618      	mov	r0, r3
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
 800301a:	bf00      	nop
 800301c:	40007000 	.word	0x40007000

08003020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800302e:	d130      	bne.n	8003092 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003030:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800303c:	d038      	beq.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800303e:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003046:	4a1e      	ldr	r2, [pc, #120]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800304c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800304e:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2232      	movs	r2, #50	; 0x32
 8003054:	fb02 f303 	mul.w	r3, r2, r3
 8003058:	4a1b      	ldr	r2, [pc, #108]	; (80030c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	0c9b      	lsrs	r3, r3, #18
 8003060:	3301      	adds	r3, #1
 8003062:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003064:	e002      	b.n	800306c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	3b01      	subs	r3, #1
 800306a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800306c:	4b14      	ldr	r3, [pc, #80]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003078:	d102      	bne.n	8003080 <HAL_PWREx_ControlVoltageScaling+0x60>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1f2      	bne.n	8003066 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003080:	4b0f      	ldr	r3, [pc, #60]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308c:	d110      	bne.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e00f      	b.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003092:	4b0b      	ldr	r3, [pc, #44]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800309a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800309e:	d007      	beq.n	80030b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030a0:	4b07      	ldr	r3, [pc, #28]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030a8:	4a05      	ldr	r2, [pc, #20]	; (80030c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	40007000 	.word	0x40007000
 80030c4:	20000000 	.word	0x20000000
 80030c8:	431bde83 	.word	0x431bde83

080030cc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80030d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030da:	6053      	str	r3, [r2, #4]
}
 80030dc:	bf00      	nop
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop
 80030e8:	40007000 	.word	0x40007000

080030ec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80030f4:	f7fe f882 	bl	80011fc <HAL_GetTick>
 80030f8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e063      	b.n	80031cc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10b      	bne.n	8003128 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7fd fe41 	bl	8000da0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800311e:	f241 3188 	movw	r1, #5000	; 0x1388
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f858 	bl	80031d8 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	3b01      	subs	r3, #1
 8003138:	021a      	lsls	r2, r3, #8
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	2120      	movs	r1, #32
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f000 f850 	bl	80031f4 <QSPI_WaitFlagStateUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003158:	7afb      	ldrb	r3, [r7, #11]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d131      	bne.n	80031c2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003168:	f023 0310 	bic.w	r3, r3, #16
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	6852      	ldr	r2, [r2, #4]
 8003170:	0611      	lsls	r1, r2, #24
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	68d2      	ldr	r2, [r2, #12]
 8003176:	4311      	orrs	r1, r2
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	430b      	orrs	r3, r1
 800317e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <HAL_QSPI_Init+0xe8>)
 8003188:	4013      	ands	r3, r2
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	6912      	ldr	r2, [r2, #16]
 800318e:	0411      	lsls	r1, r2, #16
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6952      	ldr	r2, [r2, #20]
 8003194:	4311      	orrs	r1, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6992      	ldr	r2, [r2, #24]
 800319a:	4311      	orrs	r1, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	430b      	orrs	r3, r1
 80031a2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80031ca:	7afb      	ldrb	r3, [r7, #11]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	ffe0f8fe 	.word	0xffe0f8fe

080031d8 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	603b      	str	r3, [r7, #0]
 8003200:	4613      	mov	r3, r2
 8003202:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003204:	e01a      	b.n	800323c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320c:	d016      	beq.n	800323c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320e:	f7fd fff5 	bl	80011fc <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	429a      	cmp	r2, r3
 800321c:	d302      	bcc.n	8003224 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2204      	movs	r2, #4
 8003228:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003230:	f043 0201 	orr.w	r2, r3, #1
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e00e      	b.n	800325a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689a      	ldr	r2, [r3, #8]
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	bf14      	ite	ne
 800324a:	2301      	movne	r3, #1
 800324c:	2300      	moveq	r3, #0
 800324e:	b2db      	uxtb	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	429a      	cmp	r2, r3
 8003256:	d1d6      	bne.n	8003206 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003258:	2300      	movs	r3, #0
}
 800325a:	4618      	mov	r0, r3
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
	...

08003264 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e3ca      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003276:	4b97      	ldr	r3, [pc, #604]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003280:	4b94      	ldr	r3, [pc, #592]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80e4 	beq.w	8003460 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d007      	beq.n	80032ae <HAL_RCC_OscConfig+0x4a>
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b0c      	cmp	r3, #12
 80032a2:	f040 808b 	bne.w	80033bc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	f040 8087 	bne.w	80033bc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80032ae:	4b89      	ldr	r3, [pc, #548]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d005      	beq.n	80032c6 <HAL_RCC_OscConfig+0x62>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d101      	bne.n	80032c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e3a2      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1a      	ldr	r2, [r3, #32]
 80032ca:	4b82      	ldr	r3, [pc, #520]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d004      	beq.n	80032e0 <HAL_RCC_OscConfig+0x7c>
 80032d6:	4b7f      	ldr	r3, [pc, #508]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032de:	e005      	b.n	80032ec <HAL_RCC_OscConfig+0x88>
 80032e0:	4b7c      	ldr	r3, [pc, #496]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80032e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e6:	091b      	lsrs	r3, r3, #4
 80032e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d223      	bcs.n	8003338 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a1b      	ldr	r3, [r3, #32]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fd55 	bl	8003da4 <RCC_SetFlashLatencyFromMSIRange>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e383      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003304:	4b73      	ldr	r3, [pc, #460]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a72      	ldr	r2, [pc, #456]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 800330a:	f043 0308 	orr.w	r3, r3, #8
 800330e:	6013      	str	r3, [r2, #0]
 8003310:	4b70      	ldr	r3, [pc, #448]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	496d      	ldr	r1, [pc, #436]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003322:	4b6c      	ldr	r3, [pc, #432]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	69db      	ldr	r3, [r3, #28]
 800332e:	021b      	lsls	r3, r3, #8
 8003330:	4968      	ldr	r1, [pc, #416]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003332:	4313      	orrs	r3, r2
 8003334:	604b      	str	r3, [r1, #4]
 8003336:	e025      	b.n	8003384 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003338:	4b66      	ldr	r3, [pc, #408]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a65      	ldr	r2, [pc, #404]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 800333e:	f043 0308 	orr.w	r3, r3, #8
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	4b63      	ldr	r3, [pc, #396]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	4960      	ldr	r1, [pc, #384]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003352:	4313      	orrs	r3, r2
 8003354:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003356:	4b5f      	ldr	r3, [pc, #380]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	021b      	lsls	r3, r3, #8
 8003364:	495b      	ldr	r1, [pc, #364]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003366:	4313      	orrs	r3, r2
 8003368:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d109      	bne.n	8003384 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fd15 	bl	8003da4 <RCC_SetFlashLatencyFromMSIRange>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e343      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003384:	f000 fc4a 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003388:	4602      	mov	r2, r0
 800338a:	4b52      	ldr	r3, [pc, #328]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	091b      	lsrs	r3, r3, #4
 8003390:	f003 030f 	and.w	r3, r3, #15
 8003394:	4950      	ldr	r1, [pc, #320]	; (80034d8 <HAL_RCC_OscConfig+0x274>)
 8003396:	5ccb      	ldrb	r3, [r1, r3]
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	fa22 f303 	lsr.w	r3, r2, r3
 80033a0:	4a4e      	ldr	r2, [pc, #312]	; (80034dc <HAL_RCC_OscConfig+0x278>)
 80033a2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80033a4:	4b4e      	ldr	r3, [pc, #312]	; (80034e0 <HAL_RCC_OscConfig+0x27c>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7fd fed7 	bl	800115c <HAL_InitTick>
 80033ae:	4603      	mov	r3, r0
 80033b0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d052      	beq.n	800345e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	e327      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d032      	beq.n	800342a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80033c4:	4b43      	ldr	r3, [pc, #268]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a42      	ldr	r2, [pc, #264]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033ca:	f043 0301 	orr.w	r3, r3, #1
 80033ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033d0:	f7fd ff14 	bl	80011fc <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033d8:	f7fd ff10 	bl	80011fc <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e310      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033ea:	4b3a      	ldr	r3, [pc, #232]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d0f0      	beq.n	80033d8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033f6:	4b37      	ldr	r3, [pc, #220]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a36      	ldr	r2, [pc, #216]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80033fc:	f043 0308 	orr.w	r3, r3, #8
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4b34      	ldr	r3, [pc, #208]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	4931      	ldr	r1, [pc, #196]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003410:	4313      	orrs	r3, r2
 8003412:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003414:	4b2f      	ldr	r3, [pc, #188]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	492c      	ldr	r1, [pc, #176]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003424:	4313      	orrs	r3, r2
 8003426:	604b      	str	r3, [r1, #4]
 8003428:	e01a      	b.n	8003460 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800342a:	4b2a      	ldr	r3, [pc, #168]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a29      	ldr	r2, [pc, #164]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003436:	f7fd fee1 	bl	80011fc <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800343e:	f7fd fedd 	bl	80011fc <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e2dd      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003450:	4b20      	ldr	r3, [pc, #128]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1f0      	bne.n	800343e <HAL_RCC_OscConfig+0x1da>
 800345c:	e000      	b.n	8003460 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800345e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d074      	beq.n	8003556 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	2b08      	cmp	r3, #8
 8003470:	d005      	beq.n	800347e <HAL_RCC_OscConfig+0x21a>
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b0c      	cmp	r3, #12
 8003476:	d10e      	bne.n	8003496 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	2b03      	cmp	r3, #3
 800347c:	d10b      	bne.n	8003496 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347e:	4b15      	ldr	r3, [pc, #84]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d064      	beq.n	8003554 <HAL_RCC_OscConfig+0x2f0>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d160      	bne.n	8003554 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e2ba      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800349e:	d106      	bne.n	80034ae <HAL_RCC_OscConfig+0x24a>
 80034a0:	4b0c      	ldr	r3, [pc, #48]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a0b      	ldr	r2, [pc, #44]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	e026      	b.n	80034fc <HAL_RCC_OscConfig+0x298>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034b6:	d115      	bne.n	80034e4 <HAL_RCC_OscConfig+0x280>
 80034b8:	4b06      	ldr	r3, [pc, #24]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a05      	ldr	r2, [pc, #20]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a02      	ldr	r2, [pc, #8]	; (80034d4 <HAL_RCC_OscConfig+0x270>)
 80034ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ce:	6013      	str	r3, [r2, #0]
 80034d0:	e014      	b.n	80034fc <HAL_RCC_OscConfig+0x298>
 80034d2:	bf00      	nop
 80034d4:	40021000 	.word	0x40021000
 80034d8:	080091a0 	.word	0x080091a0
 80034dc:	20000000 	.word	0x20000000
 80034e0:	20000004 	.word	0x20000004
 80034e4:	4ba0      	ldr	r3, [pc, #640]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a9f      	ldr	r2, [pc, #636]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80034ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	4b9d      	ldr	r3, [pc, #628]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a9c      	ldr	r2, [pc, #624]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80034f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d013      	beq.n	800352c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fd fe7a 	bl	80011fc <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800350c:	f7fd fe76 	bl	80011fc <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b64      	cmp	r3, #100	; 0x64
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e276      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800351e:	4b92      	ldr	r3, [pc, #584]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x2a8>
 800352a:	e014      	b.n	8003556 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fd fe66 	bl	80011fc <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003534:	f7fd fe62 	bl	80011fc <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e262      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003546:	4b88      	ldr	r3, [pc, #544]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1f0      	bne.n	8003534 <HAL_RCC_OscConfig+0x2d0>
 8003552:	e000      	b.n	8003556 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d060      	beq.n	8003624 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003562:	69bb      	ldr	r3, [r7, #24]
 8003564:	2b04      	cmp	r3, #4
 8003566:	d005      	beq.n	8003574 <HAL_RCC_OscConfig+0x310>
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	2b0c      	cmp	r3, #12
 800356c:	d119      	bne.n	80035a2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2b02      	cmp	r3, #2
 8003572:	d116      	bne.n	80035a2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003574:	4b7c      	ldr	r3, [pc, #496]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357c:	2b00      	cmp	r3, #0
 800357e:	d005      	beq.n	800358c <HAL_RCC_OscConfig+0x328>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e23f      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800358c:	4b76      	ldr	r3, [pc, #472]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	061b      	lsls	r3, r3, #24
 800359a:	4973      	ldr	r1, [pc, #460]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800359c:	4313      	orrs	r3, r2
 800359e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035a0:	e040      	b.n	8003624 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d023      	beq.n	80035f2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035aa:	4b6f      	ldr	r3, [pc, #444]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a6e      	ldr	r2, [pc, #440]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b6:	f7fd fe21 	bl	80011fc <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035be:	f7fd fe1d 	bl	80011fc <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e21d      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035d0:	4b65      	ldr	r3, [pc, #404]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035dc:	4b62      	ldr	r3, [pc, #392]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	061b      	lsls	r3, r3, #24
 80035ea:	495f      	ldr	r1, [pc, #380]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
 80035f0:	e018      	b.n	8003624 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035f2:	4b5d      	ldr	r3, [pc, #372]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a5c      	ldr	r2, [pc, #368]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80035f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fe:	f7fd fdfd 	bl	80011fc <HAL_GetTick>
 8003602:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003604:	e008      	b.n	8003618 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003606:	f7fd fdf9 	bl	80011fc <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e1f9      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003618:	4b53      	ldr	r3, [pc, #332]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1f0      	bne.n	8003606 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0308 	and.w	r3, r3, #8
 800362c:	2b00      	cmp	r3, #0
 800362e:	d03c      	beq.n	80036aa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01c      	beq.n	8003672 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003638:	4b4b      	ldr	r3, [pc, #300]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800363a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363e:	4a4a      	ldr	r2, [pc, #296]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003648:	f7fd fdd8 	bl	80011fc <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003650:	f7fd fdd4 	bl	80011fc <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e1d4      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003662:	4b41      	ldr	r3, [pc, #260]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003664:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ef      	beq.n	8003650 <HAL_RCC_OscConfig+0x3ec>
 8003670:	e01b      	b.n	80036aa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003672:	4b3d      	ldr	r3, [pc, #244]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003674:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003678:	4a3b      	ldr	r2, [pc, #236]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003682:	f7fd fdbb 	bl	80011fc <HAL_GetTick>
 8003686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003688:	e008      	b.n	800369c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368a:	f7fd fdb7 	bl	80011fc <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b02      	cmp	r3, #2
 8003696:	d901      	bls.n	800369c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e1b7      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800369c:	4b32      	ldr	r3, [pc, #200]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800369e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1ef      	bne.n	800368a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0304 	and.w	r3, r3, #4
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 80a6 	beq.w	8003804 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036b8:	2300      	movs	r3, #0
 80036ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80036bc:	4b2a      	ldr	r3, [pc, #168]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80036be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10d      	bne.n	80036e4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036c8:	4b27      	ldr	r3, [pc, #156]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80036ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036cc:	4a26      	ldr	r2, [pc, #152]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80036ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036d2:	6593      	str	r3, [r2, #88]	; 0x58
 80036d4:	4b24      	ldr	r3, [pc, #144]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 80036d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036dc:	60bb      	str	r3, [r7, #8]
 80036de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036e0:	2301      	movs	r3, #1
 80036e2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e4:	4b21      	ldr	r3, [pc, #132]	; (800376c <HAL_RCC_OscConfig+0x508>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d118      	bne.n	8003722 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036f0:	4b1e      	ldr	r3, [pc, #120]	; (800376c <HAL_RCC_OscConfig+0x508>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a1d      	ldr	r2, [pc, #116]	; (800376c <HAL_RCC_OscConfig+0x508>)
 80036f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036fc:	f7fd fd7e 	bl	80011fc <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003702:	e008      	b.n	8003716 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003704:	f7fd fd7a 	bl	80011fc <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	2b02      	cmp	r3, #2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e17a      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003716:	4b15      	ldr	r3, [pc, #84]	; (800376c <HAL_RCC_OscConfig+0x508>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800371e:	2b00      	cmp	r3, #0
 8003720:	d0f0      	beq.n	8003704 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d108      	bne.n	800373c <HAL_RCC_OscConfig+0x4d8>
 800372a:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	4a0d      	ldr	r2, [pc, #52]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003732:	f043 0301 	orr.w	r3, r3, #1
 8003736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800373a:	e029      	b.n	8003790 <HAL_RCC_OscConfig+0x52c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b05      	cmp	r3, #5
 8003742:	d115      	bne.n	8003770 <HAL_RCC_OscConfig+0x50c>
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800374a:	4a07      	ldr	r2, [pc, #28]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800374c:	f043 0304 	orr.w	r3, r3, #4
 8003750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003754:	4b04      	ldr	r3, [pc, #16]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	4a03      	ldr	r2, [pc, #12]	; (8003768 <HAL_RCC_OscConfig+0x504>)
 800375c:	f043 0301 	orr.w	r3, r3, #1
 8003760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003764:	e014      	b.n	8003790 <HAL_RCC_OscConfig+0x52c>
 8003766:	bf00      	nop
 8003768:	40021000 	.word	0x40021000
 800376c:	40007000 	.word	0x40007000
 8003770:	4b9c      	ldr	r3, [pc, #624]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 8003772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003776:	4a9b      	ldr	r2, [pc, #620]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 8003778:	f023 0301 	bic.w	r3, r3, #1
 800377c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003780:	4b98      	ldr	r3, [pc, #608]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 8003782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003786:	4a97      	ldr	r2, [pc, #604]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 8003788:	f023 0304 	bic.w	r3, r3, #4
 800378c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d016      	beq.n	80037c6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fd fd30 	bl	80011fc <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037a0:	f7fd fd2c 	bl	80011fc <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e12a      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037b6:	4b8b      	ldr	r3, [pc, #556]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0ed      	beq.n	80037a0 <HAL_RCC_OscConfig+0x53c>
 80037c4:	e015      	b.n	80037f2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c6:	f7fd fd19 	bl	80011fc <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037cc:	e00a      	b.n	80037e4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ce:	f7fd fd15 	bl	80011fc <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037dc:	4293      	cmp	r3, r2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e113      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037e4:	4b7f      	ldr	r3, [pc, #508]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1ed      	bne.n	80037ce <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037f2:	7ffb      	ldrb	r3, [r7, #31]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d105      	bne.n	8003804 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037f8:	4b7a      	ldr	r3, [pc, #488]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 80037fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fc:	4a79      	ldr	r2, [pc, #484]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 80037fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003802:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80fe 	beq.w	8003a0a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	2b02      	cmp	r3, #2
 8003814:	f040 80d0 	bne.w	80039b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003818:	4b72      	ldr	r3, [pc, #456]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f003 0203 	and.w	r2, r3, #3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	429a      	cmp	r2, r3
 800382a:	d130      	bne.n	800388e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003836:	3b01      	subs	r3, #1
 8003838:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800383a:	429a      	cmp	r2, r3
 800383c:	d127      	bne.n	800388e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003848:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800384a:	429a      	cmp	r2, r3
 800384c:	d11f      	bne.n	800388e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003858:	2a07      	cmp	r2, #7
 800385a:	bf14      	ite	ne
 800385c:	2201      	movne	r2, #1
 800385e:	2200      	moveq	r2, #0
 8003860:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003862:	4293      	cmp	r3, r2
 8003864:	d113      	bne.n	800388e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003870:	085b      	lsrs	r3, r3, #1
 8003872:	3b01      	subs	r3, #1
 8003874:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003876:	429a      	cmp	r2, r3
 8003878:	d109      	bne.n	800388e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	085b      	lsrs	r3, r3, #1
 8003886:	3b01      	subs	r3, #1
 8003888:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800388a:	429a      	cmp	r2, r3
 800388c:	d06e      	beq.n	800396c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	2b0c      	cmp	r3, #12
 8003892:	d069      	beq.n	8003968 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003894:	4b53      	ldr	r3, [pc, #332]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d105      	bne.n	80038ac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038a0:	4b50      	ldr	r3, [pc, #320]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0ad      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038b0:	4b4c      	ldr	r3, [pc, #304]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a4b      	ldr	r2, [pc, #300]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 80038b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038bc:	f7fd fc9e 	bl	80011fc <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fd fc9a 	bl	80011fc <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e09a      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d6:	4b43      	ldr	r3, [pc, #268]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038e2:	4b40      	ldr	r3, [pc, #256]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	4b40      	ldr	r3, [pc, #256]	; (80039e8 <HAL_RCC_OscConfig+0x784>)
 80038e8:	4013      	ands	r3, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80038f2:	3a01      	subs	r2, #1
 80038f4:	0112      	lsls	r2, r2, #4
 80038f6:	4311      	orrs	r1, r2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80038fc:	0212      	lsls	r2, r2, #8
 80038fe:	4311      	orrs	r1, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003904:	0852      	lsrs	r2, r2, #1
 8003906:	3a01      	subs	r2, #1
 8003908:	0552      	lsls	r2, r2, #21
 800390a:	4311      	orrs	r1, r2
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003910:	0852      	lsrs	r2, r2, #1
 8003912:	3a01      	subs	r2, #1
 8003914:	0652      	lsls	r2, r2, #25
 8003916:	4311      	orrs	r1, r2
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800391c:	0912      	lsrs	r2, r2, #4
 800391e:	0452      	lsls	r2, r2, #17
 8003920:	430a      	orrs	r2, r1
 8003922:	4930      	ldr	r1, [pc, #192]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 8003924:	4313      	orrs	r3, r2
 8003926:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003928:	4b2e      	ldr	r3, [pc, #184]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a2d      	ldr	r2, [pc, #180]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 800392e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003932:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003934:	4b2b      	ldr	r3, [pc, #172]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	4a2a      	ldr	r2, [pc, #168]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 800393a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800393e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003940:	f7fd fc5c 	bl	80011fc <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003946:	e008      	b.n	800395a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003948:	f7fd fc58 	bl	80011fc <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d901      	bls.n	800395a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e058      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800395a:	4b22      	ldr	r3, [pc, #136]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0f0      	beq.n	8003948 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003966:	e050      	b.n	8003a0a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e04f      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396c:	4b1d      	ldr	r3, [pc, #116]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003974:	2b00      	cmp	r3, #0
 8003976:	d148      	bne.n	8003a0a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003978:	4b1a      	ldr	r3, [pc, #104]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a19      	ldr	r2, [pc, #100]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 800397e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003982:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003984:	4b17      	ldr	r3, [pc, #92]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	4a16      	ldr	r2, [pc, #88]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 800398a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800398e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003990:	f7fd fc34 	bl	80011fc <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003998:	f7fd fc30 	bl	80011fc <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e030      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039aa:	4b0e      	ldr	r3, [pc, #56]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x734>
 80039b6:	e028      	b.n	8003a0a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	2b0c      	cmp	r3, #12
 80039bc:	d023      	beq.n	8003a06 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039be:	4b09      	ldr	r3, [pc, #36]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a08      	ldr	r2, [pc, #32]	; (80039e4 <HAL_RCC_OscConfig+0x780>)
 80039c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ca:	f7fd fc17 	bl	80011fc <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039d0:	e00c      	b.n	80039ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d2:	f7fd fc13 	bl	80011fc <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d905      	bls.n	80039ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e013      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
 80039e4:	40021000 	.word	0x40021000
 80039e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ec:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <HAL_RCC_OscConfig+0x7b0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1ec      	bne.n	80039d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80039f8:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <HAL_RCC_OscConfig+0x7b0>)
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	4905      	ldr	r1, [pc, #20]	; (8003a14 <HAL_RCC_OscConfig+0x7b0>)
 80039fe:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <HAL_RCC_OscConfig+0x7b4>)
 8003a00:	4013      	ands	r3, r2
 8003a02:	60cb      	str	r3, [r1, #12]
 8003a04:	e001      	b.n	8003a0a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e000      	b.n	8003a0c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003a0a:	2300      	movs	r3, #0
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3720      	adds	r7, #32
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40021000 	.word	0x40021000
 8003a18:	feeefffc 	.word	0xfeeefffc

08003a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0e7      	b.n	8003c00 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a30:	4b75      	ldr	r3, [pc, #468]	; (8003c08 <HAL_RCC_ClockConfig+0x1ec>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d910      	bls.n	8003a60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b72      	ldr	r3, [pc, #456]	; (8003c08 <HAL_RCC_ClockConfig+0x1ec>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f023 0207 	bic.w	r2, r3, #7
 8003a46:	4970      	ldr	r1, [pc, #448]	; (8003c08 <HAL_RCC_ClockConfig+0x1ec>)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4e:	4b6e      	ldr	r3, [pc, #440]	; (8003c08 <HAL_RCC_ClockConfig+0x1ec>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d001      	beq.n	8003a60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e0cf      	b.n	8003c00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d010      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	4b66      	ldr	r3, [pc, #408]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d908      	bls.n	8003a8e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a7c:	4b63      	ldr	r3, [pc, #396]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	4960      	ldr	r1, [pc, #384]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d04c      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b03      	cmp	r3, #3
 8003aa0:	d107      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aa2:	4b5a      	ldr	r3, [pc, #360]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d121      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e0a6      	b.n	8003c00 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aba:	4b54      	ldr	r3, [pc, #336]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d115      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e09a      	b.n	8003c00 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ad2:	4b4e      	ldr	r3, [pc, #312]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e08e      	b.n	8003c00 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e086      	b.n	8003c00 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003af2:	4b46      	ldr	r3, [pc, #280]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f023 0203 	bic.w	r2, r3, #3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	4943      	ldr	r1, [pc, #268]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b04:	f7fd fb7a 	bl	80011fc <HAL_GetTick>
 8003b08:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	e00a      	b.n	8003b22 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b0c:	f7fd fb76 	bl	80011fc <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e06e      	b.n	8003c00 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	4b3a      	ldr	r3, [pc, #232]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f003 020c 	and.w	r2, r3, #12
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d1eb      	bne.n	8003b0c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d010      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	4b31      	ldr	r3, [pc, #196]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d208      	bcs.n	8003b62 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b50:	4b2e      	ldr	r3, [pc, #184]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	492b      	ldr	r1, [pc, #172]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b62:	4b29      	ldr	r3, [pc, #164]	; (8003c08 <HAL_RCC_ClockConfig+0x1ec>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0307 	and.w	r3, r3, #7
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d210      	bcs.n	8003b92 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b70:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <HAL_RCC_ClockConfig+0x1ec>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 0207 	bic.w	r2, r3, #7
 8003b78:	4923      	ldr	r1, [pc, #140]	; (8003c08 <HAL_RCC_ClockConfig+0x1ec>)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b80:	4b21      	ldr	r3, [pc, #132]	; (8003c08 <HAL_RCC_ClockConfig+0x1ec>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d001      	beq.n	8003b92 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e036      	b.n	8003c00 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b9e:	4b1b      	ldr	r3, [pc, #108]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	4918      	ldr	r1, [pc, #96]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0308 	and.w	r3, r3, #8
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d009      	beq.n	8003bd0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bbc:	4b13      	ldr	r3, [pc, #76]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	00db      	lsls	r3, r3, #3
 8003bca:	4910      	ldr	r1, [pc, #64]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bd0:	f000 f824 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	; (8003c0c <HAL_RCC_ClockConfig+0x1f0>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	091b      	lsrs	r3, r3, #4
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	490b      	ldr	r1, [pc, #44]	; (8003c10 <HAL_RCC_ClockConfig+0x1f4>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bec:	4a09      	ldr	r2, [pc, #36]	; (8003c14 <HAL_RCC_ClockConfig+0x1f8>)
 8003bee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <HAL_RCC_ClockConfig+0x1fc>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7fd fab1 	bl	800115c <HAL_InitTick>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	72fb      	strb	r3, [r7, #11]

  return status;
 8003bfe:	7afb      	ldrb	r3, [r7, #11]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3710      	adds	r7, #16
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40022000 	.word	0x40022000
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	080091a0 	.word	0x080091a0
 8003c14:	20000000 	.word	0x20000000
 8003c18:	20000004 	.word	0x20000004

08003c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	; 0x24
 8003c20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	61fb      	str	r3, [r7, #28]
 8003c26:	2300      	movs	r3, #0
 8003c28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c2a:	4b3e      	ldr	r3, [pc, #248]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c34:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_GetSysClockFreq+0x34>
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d121      	bne.n	8003c8e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d11e      	bne.n	8003c8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c50:	4b34      	ldr	r3, [pc, #208]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0308 	and.w	r3, r3, #8
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c5c:	4b31      	ldr	r3, [pc, #196]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c62:	0a1b      	lsrs	r3, r3, #8
 8003c64:	f003 030f 	and.w	r3, r3, #15
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	e005      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c6c:	4b2d      	ldr	r3, [pc, #180]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c78:	4a2b      	ldr	r2, [pc, #172]	; (8003d28 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c80:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10d      	bne.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c8c:	e00a      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	2b04      	cmp	r3, #4
 8003c92:	d102      	bne.n	8003c9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c94:	4b25      	ldr	r3, [pc, #148]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8003c96:	61bb      	str	r3, [r7, #24]
 8003c98:	e004      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	d101      	bne.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ca0:	4b23      	ldr	r3, [pc, #140]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8003ca2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	2b0c      	cmp	r3, #12
 8003ca8:	d134      	bne.n	8003d14 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003caa:	4b1e      	ldr	r3, [pc, #120]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f003 0303 	and.w	r3, r3, #3
 8003cb2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCC_GetSysClockFreq+0xa6>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d003      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0xac>
 8003cc0:	e005      	b.n	8003cce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cc2:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x110>)
 8003cc4:	617b      	str	r3, [r7, #20]
      break;
 8003cc6:	e005      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003cc8:	4b19      	ldr	r3, [pc, #100]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x114>)
 8003cca:	617b      	str	r3, [r7, #20]
      break;
 8003ccc:	e002      	b.n	8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	617b      	str	r3, [r7, #20]
      break;
 8003cd2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cd4:	4b13      	ldr	r3, [pc, #76]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	091b      	lsrs	r3, r3, #4
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	3301      	adds	r3, #1
 8003ce0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003ce2:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	0a1b      	lsrs	r3, r3, #8
 8003ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	fb03 f202 	mul.w	r2, r3, r2
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cfa:	4b0a      	ldr	r3, [pc, #40]	; (8003d24 <HAL_RCC_GetSysClockFreq+0x108>)
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	0e5b      	lsrs	r3, r3, #25
 8003d00:	f003 0303 	and.w	r3, r3, #3
 8003d04:	3301      	adds	r3, #1
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d12:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d14:	69bb      	ldr	r3, [r7, #24]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3724      	adds	r7, #36	; 0x24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	40021000 	.word	0x40021000
 8003d28:	080091b8 	.word	0x080091b8
 8003d2c:	00f42400 	.word	0x00f42400
 8003d30:	007a1200 	.word	0x007a1200

08003d34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d38:	4b03      	ldr	r3, [pc, #12]	; (8003d48 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000000 	.word	0x20000000

08003d4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d50:	f7ff fff0 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d54:	4602      	mov	r2, r0
 8003d56:	4b06      	ldr	r3, [pc, #24]	; (8003d70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	0a1b      	lsrs	r3, r3, #8
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	4904      	ldr	r1, [pc, #16]	; (8003d74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d62:	5ccb      	ldrb	r3, [r1, r3]
 8003d64:	f003 031f 	and.w	r3, r3, #31
 8003d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	bd80      	pop	{r7, pc}
 8003d70:	40021000 	.word	0x40021000
 8003d74:	080091b0 	.word	0x080091b0

08003d78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d7c:	f7ff ffda 	bl	8003d34 <HAL_RCC_GetHCLKFreq>
 8003d80:	4602      	mov	r2, r0
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	0adb      	lsrs	r3, r3, #11
 8003d88:	f003 0307 	and.w	r3, r3, #7
 8003d8c:	4904      	ldr	r1, [pc, #16]	; (8003da0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d8e:	5ccb      	ldrb	r3, [r1, r3]
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	40021000 	.word	0x40021000
 8003da0:	080091b0 	.word	0x080091b0

08003da4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003dac:	2300      	movs	r3, #0
 8003dae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003db0:	4b2a      	ldr	r3, [pc, #168]	; (8003e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d003      	beq.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003dbc:	f7ff f922 	bl	8003004 <HAL_PWREx_GetVoltageRange>
 8003dc0:	6178      	str	r0, [r7, #20]
 8003dc2:	e014      	b.n	8003dee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003dc4:	4b25      	ldr	r3, [pc, #148]	; (8003e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dc8:	4a24      	ldr	r2, [pc, #144]	; (8003e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dce:	6593      	str	r3, [r2, #88]	; 0x58
 8003dd0:	4b22      	ldr	r3, [pc, #136]	; (8003e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ddc:	f7ff f912 	bl	8003004 <HAL_PWREx_GetVoltageRange>
 8003de0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003de2:	4b1e      	ldr	r3, [pc, #120]	; (8003e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de6:	4a1d      	ldr	r2, [pc, #116]	; (8003e5c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003de8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003df4:	d10b      	bne.n	8003e0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2b80      	cmp	r3, #128	; 0x80
 8003dfa:	d919      	bls.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2ba0      	cmp	r3, #160	; 0xa0
 8003e00:	d902      	bls.n	8003e08 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e02:	2302      	movs	r3, #2
 8003e04:	613b      	str	r3, [r7, #16]
 8003e06:	e013      	b.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e08:	2301      	movs	r3, #1
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	e010      	b.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b80      	cmp	r3, #128	; 0x80
 8003e12:	d902      	bls.n	8003e1a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e14:	2303      	movs	r3, #3
 8003e16:	613b      	str	r3, [r7, #16]
 8003e18:	e00a      	b.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b80      	cmp	r3, #128	; 0x80
 8003e1e:	d102      	bne.n	8003e26 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e20:	2302      	movs	r3, #2
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	e004      	b.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2b70      	cmp	r3, #112	; 0x70
 8003e2a:	d101      	bne.n	8003e30 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e30:	4b0b      	ldr	r3, [pc, #44]	; (8003e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f023 0207 	bic.w	r2, r3, #7
 8003e38:	4909      	ldr	r1, [pc, #36]	; (8003e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e40:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d001      	beq.n	8003e52 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3718      	adds	r7, #24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	40022000 	.word	0x40022000

08003e64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e70:	2300      	movs	r3, #0
 8003e72:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d041      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e88:	d02a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003e8a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e8e:	d824      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e94:	d008      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003e96:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e9a:	d81e      	bhi.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d00a      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ea4:	d010      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ea6:	e018      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ea8:	4b86      	ldr	r3, [pc, #536]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	4a85      	ldr	r2, [pc, #532]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003eb4:	e015      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2100      	movs	r1, #0
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f000 facb 	bl	8004458 <RCCEx_PLLSAI1_Config>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ec6:	e00c      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	3320      	adds	r3, #32
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fbb6 	bl	8004640 <RCCEx_PLLSAI2_Config>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ed8:	e003      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	74fb      	strb	r3, [r7, #19]
      break;
 8003ede:	e000      	b.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee2:	7cfb      	ldrb	r3, [r7, #19]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10b      	bne.n	8003f00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ee8:	4b76      	ldr	r3, [pc, #472]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ef6:	4973      	ldr	r1, [pc, #460]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003efe:	e001      	b.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f00:	7cfb      	ldrb	r3, [r7, #19]
 8003f02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d041      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f18:	d02a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003f1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003f1e:	d824      	bhi.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f24:	d008      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003f26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f2a:	d81e      	bhi.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f34:	d010      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003f36:	e018      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f38:	4b62      	ldr	r3, [pc, #392]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	4a61      	ldr	r2, [pc, #388]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f44:	e015      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	3304      	adds	r3, #4
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fa83 	bl	8004458 <RCCEx_PLLSAI1_Config>
 8003f52:	4603      	mov	r3, r0
 8003f54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f56:	e00c      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3320      	adds	r3, #32
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fb6e 	bl	8004640 <RCCEx_PLLSAI2_Config>
 8003f64:	4603      	mov	r3, r0
 8003f66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003f68:	e003      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	74fb      	strb	r3, [r7, #19]
      break;
 8003f6e:	e000      	b.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003f70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f72:	7cfb      	ldrb	r3, [r7, #19]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10b      	bne.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f78:	4b52      	ldr	r3, [pc, #328]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f86:	494f      	ldr	r1, [pc, #316]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f8e:	e001      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
 8003f92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 80a0 	beq.w	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003fa6:	4b47      	ldr	r3, [pc, #284]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d00d      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fbc:	4b41      	ldr	r3, [pc, #260]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	4a40      	ldr	r2, [pc, #256]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fc8:	4b3e      	ldr	r3, [pc, #248]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd0:	60bb      	str	r3, [r7, #8]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fd8:	4b3b      	ldr	r3, [pc, #236]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a3a      	ldr	r2, [pc, #232]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fe2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003fe4:	f7fd f90a 	bl	80011fc <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003fea:	e009      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fec:	f7fd f906 	bl	80011fc <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d902      	bls.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	74fb      	strb	r3, [r7, #19]
        break;
 8003ffe:	e005      	b.n	800400c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004000:	4b31      	ldr	r3, [pc, #196]	; (80040c8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0ef      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800400c:	7cfb      	ldrb	r3, [r7, #19]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d15c      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004012:	4b2c      	ldr	r3, [pc, #176]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004018:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800401c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01f      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800402a:	697a      	ldr	r2, [r7, #20]
 800402c:	429a      	cmp	r2, r3
 800402e:	d019      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004030:	4b24      	ldr	r3, [pc, #144]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004036:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800403a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800403c:	4b21      	ldr	r3, [pc, #132]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004042:	4a20      	ldr	r2, [pc, #128]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004048:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800404c:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800404e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004052:	4a1c      	ldr	r2, [pc, #112]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004054:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004058:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800405c:	4a19      	ldr	r2, [pc, #100]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b00      	cmp	r3, #0
 800406c:	d016      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800406e:	f7fd f8c5 	bl	80011fc <HAL_GetTick>
 8004072:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004074:	e00b      	b.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004076:	f7fd f8c1 	bl	80011fc <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	f241 3288 	movw	r2, #5000	; 0x1388
 8004084:	4293      	cmp	r3, r2
 8004086:	d902      	bls.n	800408e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	74fb      	strb	r3, [r7, #19]
            break;
 800408c:	e006      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800408e:	4b0d      	ldr	r3, [pc, #52]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0ec      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800409c:	7cfb      	ldrb	r3, [r7, #19]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d10c      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040a2:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b2:	4904      	ldr	r1, [pc, #16]	; (80040c4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040ba:	e009      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040bc:	7cfb      	ldrb	r3, [r7, #19]
 80040be:	74bb      	strb	r3, [r7, #18]
 80040c0:	e006      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80040c2:	bf00      	nop
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040cc:	7cfb      	ldrb	r3, [r7, #19]
 80040ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040d0:	7c7b      	ldrb	r3, [r7, #17]
 80040d2:	2b01      	cmp	r3, #1
 80040d4:	d105      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040d6:	4b9e      	ldr	r3, [pc, #632]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040da:	4a9d      	ldr	r2, [pc, #628]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040ee:	4b98      	ldr	r3, [pc, #608]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f4:	f023 0203 	bic.w	r2, r3, #3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fc:	4994      	ldr	r1, [pc, #592]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00a      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004110:	4b8f      	ldr	r3, [pc, #572]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	f023 020c 	bic.w	r2, r3, #12
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411e:	498c      	ldr	r1, [pc, #560]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0304 	and.w	r3, r3, #4
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004132:	4b87      	ldr	r3, [pc, #540]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004138:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	4983      	ldr	r1, [pc, #524]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0308 	and.w	r3, r3, #8
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00a      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004154:	4b7e      	ldr	r3, [pc, #504]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004162:	497b      	ldr	r1, [pc, #492]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f003 0310 	and.w	r3, r3, #16
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00a      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004176:	4b76      	ldr	r3, [pc, #472]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004184:	4972      	ldr	r1, [pc, #456]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004198:	4b6d      	ldr	r3, [pc, #436]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800419a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041a6:	496a      	ldr	r1, [pc, #424]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ba:	4b65      	ldr	r3, [pc, #404]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c8:	4961      	ldr	r1, [pc, #388]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d00a      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041dc:	4b5c      	ldr	r3, [pc, #368]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ea:	4959      	ldr	r1, [pc, #356]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00a      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041fe:	4b54      	ldr	r3, [pc, #336]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004204:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420c:	4950      	ldr	r1, [pc, #320]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800420e:	4313      	orrs	r3, r2
 8004210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00a      	beq.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004220:	4b4b      	ldr	r3, [pc, #300]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004226:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	4948      	ldr	r1, [pc, #288]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00a      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004242:	4b43      	ldr	r3, [pc, #268]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004248:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004250:	493f      	ldr	r1, [pc, #252]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004252:	4313      	orrs	r3, r2
 8004254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d028      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004264:	4b3a      	ldr	r3, [pc, #232]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004272:	4937      	ldr	r1, [pc, #220]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004274:	4313      	orrs	r3, r2
 8004276:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800427e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004282:	d106      	bne.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004284:	4b32      	ldr	r3, [pc, #200]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	4a31      	ldr	r2, [pc, #196]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800428a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800428e:	60d3      	str	r3, [r2, #12]
 8004290:	e011      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004296:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800429a:	d10c      	bne.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3304      	adds	r3, #4
 80042a0:	2101      	movs	r1, #1
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 f8d8 	bl	8004458 <RCCEx_PLLSAI1_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80042ac:	7cfb      	ldrb	r3, [r7, #19]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d001      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80042b2:	7cfb      	ldrb	r3, [r7, #19]
 80042b4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d028      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042c2:	4b23      	ldr	r3, [pc, #140]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d0:	491f      	ldr	r1, [pc, #124]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042e0:	d106      	bne.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042e2:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	4a1a      	ldr	r2, [pc, #104]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80042e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ec:	60d3      	str	r3, [r2, #12]
 80042ee:	e011      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042f8:	d10c      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	3304      	adds	r3, #4
 80042fe:	2101      	movs	r1, #1
 8004300:	4618      	mov	r0, r3
 8004302:	f000 f8a9 	bl	8004458 <RCCEx_PLLSAI1_Config>
 8004306:	4603      	mov	r3, r0
 8004308:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800430a:	7cfb      	ldrb	r3, [r7, #19]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004310:	7cfb      	ldrb	r3, [r7, #19]
 8004312:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d02b      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004320:	4b0b      	ldr	r3, [pc, #44]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004326:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800432e:	4908      	ldr	r1, [pc, #32]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004330:	4313      	orrs	r3, r2
 8004332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800433e:	d109      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004340:	4b03      	ldr	r3, [pc, #12]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	4a02      	ldr	r2, [pc, #8]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004346:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800434a:	60d3      	str	r3, [r2, #12]
 800434c:	e014      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800434e:	bf00      	nop
 8004350:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004358:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800435c:	d10c      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3304      	adds	r3, #4
 8004362:	2101      	movs	r1, #1
 8004364:	4618      	mov	r0, r3
 8004366:	f000 f877 	bl	8004458 <RCCEx_PLLSAI1_Config>
 800436a:	4603      	mov	r3, r0
 800436c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800436e:	7cfb      	ldrb	r3, [r7, #19]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004374:	7cfb      	ldrb	r3, [r7, #19]
 8004376:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d02f      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004384:	4b2b      	ldr	r3, [pc, #172]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004392:	4928      	ldr	r1, [pc, #160]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800439e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043a2:	d10d      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	2102      	movs	r1, #2
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 f854 	bl	8004458 <RCCEx_PLLSAI1_Config>
 80043b0:	4603      	mov	r3, r0
 80043b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d014      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043ba:	7cfb      	ldrb	r3, [r7, #19]
 80043bc:	74bb      	strb	r3, [r7, #18]
 80043be:	e011      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043c8:	d10c      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	3320      	adds	r3, #32
 80043ce:	2102      	movs	r1, #2
 80043d0:	4618      	mov	r0, r3
 80043d2:	f000 f935 	bl	8004640 <RCCEx_PLLSAI2_Config>
 80043d6:	4603      	mov	r3, r0
 80043d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043da:	7cfb      	ldrb	r3, [r7, #19]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80043e0:	7cfb      	ldrb	r3, [r7, #19]
 80043e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80043f0:	4b10      	ldr	r3, [pc, #64]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043fe:	490d      	ldr	r1, [pc, #52]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004412:	4b08      	ldr	r3, [pc, #32]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004418:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004422:	4904      	ldr	r1, [pc, #16]	; (8004434 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800442a:	7cbb      	ldrb	r3, [r7, #18]
}
 800442c:	4618      	mov	r0, r3
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	40021000 	.word	0x40021000

08004438 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004438:	b480      	push	{r7}
 800443a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a04      	ldr	r2, [pc, #16]	; (8004454 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004442:	f043 0304 	orr.w	r3, r3, #4
 8004446:	6013      	str	r3, [r2, #0]
}
 8004448:	bf00      	nop
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40021000 	.word	0x40021000

08004458 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004462:	2300      	movs	r3, #0
 8004464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004466:	4b75      	ldr	r3, [pc, #468]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d018      	beq.n	80044a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004472:	4b72      	ldr	r3, [pc, #456]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f003 0203 	and.w	r2, r3, #3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d10d      	bne.n	800449e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
       ||
 8004486:	2b00      	cmp	r3, #0
 8004488:	d009      	beq.n	800449e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800448a:	4b6c      	ldr	r3, [pc, #432]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
       ||
 800449a:	429a      	cmp	r2, r3
 800449c:	d047      	beq.n	800452e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	73fb      	strb	r3, [r7, #15]
 80044a2:	e044      	b.n	800452e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d018      	beq.n	80044de <RCCEx_PLLSAI1_Config+0x86>
 80044ac:	2b03      	cmp	r3, #3
 80044ae:	d825      	bhi.n	80044fc <RCCEx_PLLSAI1_Config+0xa4>
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d002      	beq.n	80044ba <RCCEx_PLLSAI1_Config+0x62>
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d009      	beq.n	80044cc <RCCEx_PLLSAI1_Config+0x74>
 80044b8:	e020      	b.n	80044fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80044ba:	4b60      	ldr	r3, [pc, #384]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0302 	and.w	r3, r3, #2
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d11d      	bne.n	8004502 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044ca:	e01a      	b.n	8004502 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80044cc:	4b5b      	ldr	r3, [pc, #364]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d116      	bne.n	8004506 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044dc:	e013      	b.n	8004506 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044de:	4b57      	ldr	r3, [pc, #348]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10f      	bne.n	800450a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044ea:	4b54      	ldr	r3, [pc, #336]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d109      	bne.n	800450a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044fa:	e006      	b.n	800450a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004500:	e004      	b.n	800450c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004502:	bf00      	nop
 8004504:	e002      	b.n	800450c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004506:	bf00      	nop
 8004508:	e000      	b.n	800450c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800450a:	bf00      	nop
    }

    if(status == HAL_OK)
 800450c:	7bfb      	ldrb	r3, [r7, #15]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10d      	bne.n	800452e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004512:	4b4a      	ldr	r3, [pc, #296]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6819      	ldr	r1, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	3b01      	subs	r3, #1
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	430b      	orrs	r3, r1
 8004528:	4944      	ldr	r1, [pc, #272]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 800452a:	4313      	orrs	r3, r2
 800452c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800452e:	7bfb      	ldrb	r3, [r7, #15]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d17d      	bne.n	8004630 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004534:	4b41      	ldr	r3, [pc, #260]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a40      	ldr	r2, [pc, #256]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 800453a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800453e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004540:	f7fc fe5c 	bl	80011fc <HAL_GetTick>
 8004544:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004546:	e009      	b.n	800455c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004548:	f7fc fe58 	bl	80011fc <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	2b02      	cmp	r3, #2
 8004554:	d902      	bls.n	800455c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	73fb      	strb	r3, [r7, #15]
        break;
 800455a:	e005      	b.n	8004568 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800455c:	4b37      	ldr	r3, [pc, #220]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1ef      	bne.n	8004548 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004568:	7bfb      	ldrb	r3, [r7, #15]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d160      	bne.n	8004630 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d111      	bne.n	8004598 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004574:	4b31      	ldr	r3, [pc, #196]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800457c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6892      	ldr	r2, [r2, #8]
 8004584:	0211      	lsls	r1, r2, #8
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	68d2      	ldr	r2, [r2, #12]
 800458a:	0912      	lsrs	r2, r2, #4
 800458c:	0452      	lsls	r2, r2, #17
 800458e:	430a      	orrs	r2, r1
 8004590:	492a      	ldr	r1, [pc, #168]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004592:	4313      	orrs	r3, r2
 8004594:	610b      	str	r3, [r1, #16]
 8004596:	e027      	b.n	80045e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d112      	bne.n	80045c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800459e:	4b27      	ldr	r3, [pc, #156]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80045a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6892      	ldr	r2, [r2, #8]
 80045ae:	0211      	lsls	r1, r2, #8
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6912      	ldr	r2, [r2, #16]
 80045b4:	0852      	lsrs	r2, r2, #1
 80045b6:	3a01      	subs	r2, #1
 80045b8:	0552      	lsls	r2, r2, #21
 80045ba:	430a      	orrs	r2, r1
 80045bc:	491f      	ldr	r1, [pc, #124]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	610b      	str	r3, [r1, #16]
 80045c2:	e011      	b.n	80045e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80045c4:	4b1d      	ldr	r3, [pc, #116]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80045cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6892      	ldr	r2, [r2, #8]
 80045d4:	0211      	lsls	r1, r2, #8
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6952      	ldr	r2, [r2, #20]
 80045da:	0852      	lsrs	r2, r2, #1
 80045dc:	3a01      	subs	r2, #1
 80045de:	0652      	lsls	r2, r2, #25
 80045e0:	430a      	orrs	r2, r1
 80045e2:	4916      	ldr	r1, [pc, #88]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045e8:	4b14      	ldr	r3, [pc, #80]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a13      	ldr	r2, [pc, #76]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80045f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f4:	f7fc fe02 	bl	80011fc <HAL_GetTick>
 80045f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045fa:	e009      	b.n	8004610 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045fc:	f7fc fdfe 	bl	80011fc <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	2b02      	cmp	r3, #2
 8004608:	d902      	bls.n	8004610 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	73fb      	strb	r3, [r7, #15]
          break;
 800460e:	e005      	b.n	800461c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004610:	4b0a      	ldr	r3, [pc, #40]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0ef      	beq.n	80045fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800461c:	7bfb      	ldrb	r3, [r7, #15]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	4904      	ldr	r1, [pc, #16]	; (800463c <RCCEx_PLLSAI1_Config+0x1e4>)
 800462c:	4313      	orrs	r3, r2
 800462e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004630:	7bfb      	ldrb	r3, [r7, #15]
}
 8004632:	4618      	mov	r0, r3
 8004634:	3710      	adds	r7, #16
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
 800463a:	bf00      	nop
 800463c:	40021000 	.word	0x40021000

08004640 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b084      	sub	sp, #16
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800464e:	4b6a      	ldr	r3, [pc, #424]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b00      	cmp	r3, #0
 8004658:	d018      	beq.n	800468c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800465a:	4b67      	ldr	r3, [pc, #412]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f003 0203 	and.w	r2, r3, #3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d10d      	bne.n	8004686 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
       ||
 800466e:	2b00      	cmp	r3, #0
 8004670:	d009      	beq.n	8004686 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004672:	4b61      	ldr	r3, [pc, #388]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	091b      	lsrs	r3, r3, #4
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
       ||
 8004682:	429a      	cmp	r2, r3
 8004684:	d047      	beq.n	8004716 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
 800468a:	e044      	b.n	8004716 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b03      	cmp	r3, #3
 8004692:	d018      	beq.n	80046c6 <RCCEx_PLLSAI2_Config+0x86>
 8004694:	2b03      	cmp	r3, #3
 8004696:	d825      	bhi.n	80046e4 <RCCEx_PLLSAI2_Config+0xa4>
 8004698:	2b01      	cmp	r3, #1
 800469a:	d002      	beq.n	80046a2 <RCCEx_PLLSAI2_Config+0x62>
 800469c:	2b02      	cmp	r3, #2
 800469e:	d009      	beq.n	80046b4 <RCCEx_PLLSAI2_Config+0x74>
 80046a0:	e020      	b.n	80046e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80046a2:	4b55      	ldr	r3, [pc, #340]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d11d      	bne.n	80046ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046b2:	e01a      	b.n	80046ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80046b4:	4b50      	ldr	r3, [pc, #320]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d116      	bne.n	80046ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046c4:	e013      	b.n	80046ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80046c6:	4b4c      	ldr	r3, [pc, #304]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10f      	bne.n	80046f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80046d2:	4b49      	ldr	r3, [pc, #292]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d109      	bne.n	80046f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046e2:	e006      	b.n	80046f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]
      break;
 80046e8:	e004      	b.n	80046f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046ea:	bf00      	nop
 80046ec:	e002      	b.n	80046f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046ee:	bf00      	nop
 80046f0:	e000      	b.n	80046f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d10d      	bne.n	8004716 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046fa:	4b3f      	ldr	r3, [pc, #252]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6819      	ldr	r1, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	3b01      	subs	r3, #1
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	430b      	orrs	r3, r1
 8004710:	4939      	ldr	r1, [pc, #228]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004712:	4313      	orrs	r3, r2
 8004714:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004716:	7bfb      	ldrb	r3, [r7, #15]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d167      	bne.n	80047ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800471c:	4b36      	ldr	r3, [pc, #216]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a35      	ldr	r2, [pc, #212]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004726:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004728:	f7fc fd68 	bl	80011fc <HAL_GetTick>
 800472c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800472e:	e009      	b.n	8004744 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004730:	f7fc fd64 	bl	80011fc <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d902      	bls.n	8004744 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	73fb      	strb	r3, [r7, #15]
        break;
 8004742:	e005      	b.n	8004750 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004744:	4b2c      	ldr	r3, [pc, #176]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1ef      	bne.n	8004730 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004750:	7bfb      	ldrb	r3, [r7, #15]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d14a      	bne.n	80047ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d111      	bne.n	8004780 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800475c:	4b26      	ldr	r3, [pc, #152]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800475e:	695b      	ldr	r3, [r3, #20]
 8004760:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	6892      	ldr	r2, [r2, #8]
 800476c:	0211      	lsls	r1, r2, #8
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	68d2      	ldr	r2, [r2, #12]
 8004772:	0912      	lsrs	r2, r2, #4
 8004774:	0452      	lsls	r2, r2, #17
 8004776:	430a      	orrs	r2, r1
 8004778:	491f      	ldr	r1, [pc, #124]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800477a:	4313      	orrs	r3, r2
 800477c:	614b      	str	r3, [r1, #20]
 800477e:	e011      	b.n	80047a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004780:	4b1d      	ldr	r3, [pc, #116]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004788:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	6892      	ldr	r2, [r2, #8]
 8004790:	0211      	lsls	r1, r2, #8
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	6912      	ldr	r2, [r2, #16]
 8004796:	0852      	lsrs	r2, r2, #1
 8004798:	3a01      	subs	r2, #1
 800479a:	0652      	lsls	r2, r2, #25
 800479c:	430a      	orrs	r2, r1
 800479e:	4916      	ldr	r1, [pc, #88]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80047a4:	4b14      	ldr	r3, [pc, #80]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a13      	ldr	r2, [pc, #76]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b0:	f7fc fd24 	bl	80011fc <HAL_GetTick>
 80047b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047b6:	e009      	b.n	80047cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047b8:	f7fc fd20 	bl	80011fc <HAL_GetTick>
 80047bc:	4602      	mov	r2, r0
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d902      	bls.n	80047cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	73fb      	strb	r3, [r7, #15]
          break;
 80047ca:	e005      	b.n	80047d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0ef      	beq.n	80047b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d106      	bne.n	80047ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047de:	4b06      	ldr	r3, [pc, #24]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e0:	695a      	ldr	r2, [r3, #20]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	4904      	ldr	r1, [pc, #16]	; (80047f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000

080047fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e095      	b.n	800493a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	2b00      	cmp	r3, #0
 8004814:	d108      	bne.n	8004828 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800481e:	d009      	beq.n	8004834 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	61da      	str	r2, [r3, #28]
 8004826:	e005      	b.n	8004834 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d106      	bne.n	8004854 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fc faea 	bl	8000e28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2202      	movs	r2, #2
 8004858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800486a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004874:	d902      	bls.n	800487c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	e002      	b.n	8004882 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800487c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004880:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68db      	ldr	r3, [r3, #12]
 8004886:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800488a:	d007      	beq.n	800489c <HAL_SPI_Init+0xa0>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004894:	d002      	beq.n	800489c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80048ac:	431a      	orrs	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0302 	and.w	r3, r3, #2
 80048b6:	431a      	orrs	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	431a      	orrs	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69db      	ldr	r3, [r3, #28]
 80048d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048d4:	431a      	orrs	r2, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048de:	ea42 0103 	orr.w	r1, r2, r3
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	430a      	orrs	r2, r1
 80048f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	699b      	ldr	r3, [r3, #24]
 80048f6:	0c1b      	lsrs	r3, r3, #16
 80048f8:	f003 0204 	and.w	r2, r3, #4
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004918:	ea42 0103 	orr.w	r1, r2, r3
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004938:	2300      	movs	r3, #0
}
 800493a:	4618      	mov	r0, r3
 800493c:	3710      	adds	r7, #16
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}

08004942 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004942:	b580      	push	{r7, lr}
 8004944:	b082      	sub	sp, #8
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d101      	bne.n	8004954 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e040      	b.n	80049d6 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004958:	2b00      	cmp	r3, #0
 800495a:	d106      	bne.n	800496a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7fc faa3 	bl	8000eb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2224      	movs	r2, #36	; 0x24
 800496e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0201 	bic.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004984:	2b00      	cmp	r3, #0
 8004986:	d002      	beq.n	800498e <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fae1 	bl	8004f50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f826 	bl	80049e0 <UART_SetConfig>
 8004994:	4603      	mov	r3, r0
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e01b      	b.n	80049d6 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f042 0201 	orr.w	r2, r2, #1
 80049cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fb60 	bl	8005094 <UART_CheckIdleState>
 80049d4:	4603      	mov	r3, r0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e4:	b08a      	sub	sp, #40	; 0x28
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049ea:	2300      	movs	r3, #0
 80049ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689a      	ldr	r2, [r3, #8]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	431a      	orrs	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	69db      	ldr	r3, [r3, #28]
 8004a04:	4313      	orrs	r3, r2
 8004a06:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4ba4      	ldr	r3, [pc, #656]	; (8004ca0 <UART_SetConfig+0x2c0>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a18:	430b      	orrs	r3, r1
 8004a1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a99      	ldr	r2, [pc, #612]	; (8004ca4 <UART_SetConfig+0x2c4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d004      	beq.n	8004a4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a5c:	430a      	orrs	r2, r1
 8004a5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a90      	ldr	r2, [pc, #576]	; (8004ca8 <UART_SetConfig+0x2c8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d126      	bne.n	8004ab8 <UART_SetConfig+0xd8>
 8004a6a:	4b90      	ldr	r3, [pc, #576]	; (8004cac <UART_SetConfig+0x2cc>)
 8004a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	2b03      	cmp	r3, #3
 8004a76:	d81b      	bhi.n	8004ab0 <UART_SetConfig+0xd0>
 8004a78:	a201      	add	r2, pc, #4	; (adr r2, 8004a80 <UART_SetConfig+0xa0>)
 8004a7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7e:	bf00      	nop
 8004a80:	08004a91 	.word	0x08004a91
 8004a84:	08004aa1 	.word	0x08004aa1
 8004a88:	08004a99 	.word	0x08004a99
 8004a8c:	08004aa9 	.word	0x08004aa9
 8004a90:	2301      	movs	r3, #1
 8004a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a96:	e116      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004a9e:	e112      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004aa0:	2304      	movs	r3, #4
 8004aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aa6:	e10e      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004aa8:	2308      	movs	r3, #8
 8004aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004aae:	e10a      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004ab0:	2310      	movs	r3, #16
 8004ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ab6:	e106      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a7c      	ldr	r2, [pc, #496]	; (8004cb0 <UART_SetConfig+0x2d0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d138      	bne.n	8004b34 <UART_SetConfig+0x154>
 8004ac2:	4b7a      	ldr	r3, [pc, #488]	; (8004cac <UART_SetConfig+0x2cc>)
 8004ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b0c      	cmp	r3, #12
 8004ace:	d82d      	bhi.n	8004b2c <UART_SetConfig+0x14c>
 8004ad0:	a201      	add	r2, pc, #4	; (adr r2, 8004ad8 <UART_SetConfig+0xf8>)
 8004ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad6:	bf00      	nop
 8004ad8:	08004b0d 	.word	0x08004b0d
 8004adc:	08004b2d 	.word	0x08004b2d
 8004ae0:	08004b2d 	.word	0x08004b2d
 8004ae4:	08004b2d 	.word	0x08004b2d
 8004ae8:	08004b1d 	.word	0x08004b1d
 8004aec:	08004b2d 	.word	0x08004b2d
 8004af0:	08004b2d 	.word	0x08004b2d
 8004af4:	08004b2d 	.word	0x08004b2d
 8004af8:	08004b15 	.word	0x08004b15
 8004afc:	08004b2d 	.word	0x08004b2d
 8004b00:	08004b2d 	.word	0x08004b2d
 8004b04:	08004b2d 	.word	0x08004b2d
 8004b08:	08004b25 	.word	0x08004b25
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b12:	e0d8      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b14:	2302      	movs	r3, #2
 8004b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b1a:	e0d4      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b22:	e0d0      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b24:	2308      	movs	r3, #8
 8004b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b2a:	e0cc      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b32:	e0c8      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a5e      	ldr	r2, [pc, #376]	; (8004cb4 <UART_SetConfig+0x2d4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d125      	bne.n	8004b8a <UART_SetConfig+0x1aa>
 8004b3e:	4b5b      	ldr	r3, [pc, #364]	; (8004cac <UART_SetConfig+0x2cc>)
 8004b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b44:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004b48:	2b30      	cmp	r3, #48	; 0x30
 8004b4a:	d016      	beq.n	8004b7a <UART_SetConfig+0x19a>
 8004b4c:	2b30      	cmp	r3, #48	; 0x30
 8004b4e:	d818      	bhi.n	8004b82 <UART_SetConfig+0x1a2>
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d00a      	beq.n	8004b6a <UART_SetConfig+0x18a>
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d814      	bhi.n	8004b82 <UART_SetConfig+0x1a2>
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <UART_SetConfig+0x182>
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d008      	beq.n	8004b72 <UART_SetConfig+0x192>
 8004b60:	e00f      	b.n	8004b82 <UART_SetConfig+0x1a2>
 8004b62:	2300      	movs	r3, #0
 8004b64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b68:	e0ad      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b6a:	2302      	movs	r3, #2
 8004b6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b70:	e0a9      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b72:	2304      	movs	r3, #4
 8004b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b78:	e0a5      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b7a:	2308      	movs	r3, #8
 8004b7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b80:	e0a1      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b82:	2310      	movs	r3, #16
 8004b84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004b88:	e09d      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a4a      	ldr	r2, [pc, #296]	; (8004cb8 <UART_SetConfig+0x2d8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d125      	bne.n	8004be0 <UART_SetConfig+0x200>
 8004b94:	4b45      	ldr	r3, [pc, #276]	; (8004cac <UART_SetConfig+0x2cc>)
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b9e:	2bc0      	cmp	r3, #192	; 0xc0
 8004ba0:	d016      	beq.n	8004bd0 <UART_SetConfig+0x1f0>
 8004ba2:	2bc0      	cmp	r3, #192	; 0xc0
 8004ba4:	d818      	bhi.n	8004bd8 <UART_SetConfig+0x1f8>
 8004ba6:	2b80      	cmp	r3, #128	; 0x80
 8004ba8:	d00a      	beq.n	8004bc0 <UART_SetConfig+0x1e0>
 8004baa:	2b80      	cmp	r3, #128	; 0x80
 8004bac:	d814      	bhi.n	8004bd8 <UART_SetConfig+0x1f8>
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <UART_SetConfig+0x1d8>
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d008      	beq.n	8004bc8 <UART_SetConfig+0x1e8>
 8004bb6:	e00f      	b.n	8004bd8 <UART_SetConfig+0x1f8>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bbe:	e082      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bc6:	e07e      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bce:	e07a      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004bd0:	2308      	movs	r3, #8
 8004bd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bd6:	e076      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004bd8:	2310      	movs	r3, #16
 8004bda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004bde:	e072      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a35      	ldr	r2, [pc, #212]	; (8004cbc <UART_SetConfig+0x2dc>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d12a      	bne.n	8004c40 <UART_SetConfig+0x260>
 8004bea:	4b30      	ldr	r3, [pc, #192]	; (8004cac <UART_SetConfig+0x2cc>)
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bf8:	d01a      	beq.n	8004c30 <UART_SetConfig+0x250>
 8004bfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bfe:	d81b      	bhi.n	8004c38 <UART_SetConfig+0x258>
 8004c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c04:	d00c      	beq.n	8004c20 <UART_SetConfig+0x240>
 8004c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c0a:	d815      	bhi.n	8004c38 <UART_SetConfig+0x258>
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <UART_SetConfig+0x238>
 8004c10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c14:	d008      	beq.n	8004c28 <UART_SetConfig+0x248>
 8004c16:	e00f      	b.n	8004c38 <UART_SetConfig+0x258>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c1e:	e052      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c20:	2302      	movs	r3, #2
 8004c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c26:	e04e      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c28:	2304      	movs	r3, #4
 8004c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c2e:	e04a      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c30:	2308      	movs	r3, #8
 8004c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c36:	e046      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c38:	2310      	movs	r3, #16
 8004c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c3e:	e042      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a17      	ldr	r2, [pc, #92]	; (8004ca4 <UART_SetConfig+0x2c4>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d13a      	bne.n	8004cc0 <UART_SetConfig+0x2e0>
 8004c4a:	4b18      	ldr	r3, [pc, #96]	; (8004cac <UART_SetConfig+0x2cc>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004c54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c58:	d01a      	beq.n	8004c90 <UART_SetConfig+0x2b0>
 8004c5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c5e:	d81b      	bhi.n	8004c98 <UART_SetConfig+0x2b8>
 8004c60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c64:	d00c      	beq.n	8004c80 <UART_SetConfig+0x2a0>
 8004c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6a:	d815      	bhi.n	8004c98 <UART_SetConfig+0x2b8>
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d003      	beq.n	8004c78 <UART_SetConfig+0x298>
 8004c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c74:	d008      	beq.n	8004c88 <UART_SetConfig+0x2a8>
 8004c76:	e00f      	b.n	8004c98 <UART_SetConfig+0x2b8>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c7e:	e022      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c80:	2302      	movs	r3, #2
 8004c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c86:	e01e      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c8e:	e01a      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c90:	2308      	movs	r3, #8
 8004c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c96:	e016      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004c98:	2310      	movs	r3, #16
 8004c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004c9e:	e012      	b.n	8004cc6 <UART_SetConfig+0x2e6>
 8004ca0:	efff69f3 	.word	0xefff69f3
 8004ca4:	40008000 	.word	0x40008000
 8004ca8:	40013800 	.word	0x40013800
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	40004400 	.word	0x40004400
 8004cb4:	40004800 	.word	0x40004800
 8004cb8:	40004c00 	.word	0x40004c00
 8004cbc:	40005000 	.word	0x40005000
 8004cc0:	2310      	movs	r3, #16
 8004cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a9f      	ldr	r2, [pc, #636]	; (8004f48 <UART_SetConfig+0x568>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d17a      	bne.n	8004dc6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d824      	bhi.n	8004d22 <UART_SetConfig+0x342>
 8004cd8:	a201      	add	r2, pc, #4	; (adr r2, 8004ce0 <UART_SetConfig+0x300>)
 8004cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cde:	bf00      	nop
 8004ce0:	08004d05 	.word	0x08004d05
 8004ce4:	08004d23 	.word	0x08004d23
 8004ce8:	08004d0d 	.word	0x08004d0d
 8004cec:	08004d23 	.word	0x08004d23
 8004cf0:	08004d13 	.word	0x08004d13
 8004cf4:	08004d23 	.word	0x08004d23
 8004cf8:	08004d23 	.word	0x08004d23
 8004cfc:	08004d23 	.word	0x08004d23
 8004d00:	08004d1b 	.word	0x08004d1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d04:	f7ff f822 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8004d08:	61f8      	str	r0, [r7, #28]
        break;
 8004d0a:	e010      	b.n	8004d2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d0c:	4b8f      	ldr	r3, [pc, #572]	; (8004f4c <UART_SetConfig+0x56c>)
 8004d0e:	61fb      	str	r3, [r7, #28]
        break;
 8004d10:	e00d      	b.n	8004d2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d12:	f7fe ff83 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8004d16:	61f8      	str	r0, [r7, #28]
        break;
 8004d18:	e009      	b.n	8004d2e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d1e:	61fb      	str	r3, [r7, #28]
        break;
 8004d20:	e005      	b.n	8004d2e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004d2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 80fb 	beq.w	8004f2c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	4413      	add	r3, r2
 8004d40:	69fa      	ldr	r2, [r7, #28]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d305      	bcc.n	8004d52 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d4c:	69fa      	ldr	r2, [r7, #28]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d903      	bls.n	8004d5a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004d58:	e0e8      	b.n	8004f2c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	461c      	mov	r4, r3
 8004d60:	4615      	mov	r5, r2
 8004d62:	f04f 0200 	mov.w	r2, #0
 8004d66:	f04f 0300 	mov.w	r3, #0
 8004d6a:	022b      	lsls	r3, r5, #8
 8004d6c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004d70:	0222      	lsls	r2, r4, #8
 8004d72:	68f9      	ldr	r1, [r7, #12]
 8004d74:	6849      	ldr	r1, [r1, #4]
 8004d76:	0849      	lsrs	r1, r1, #1
 8004d78:	2000      	movs	r0, #0
 8004d7a:	4688      	mov	r8, r1
 8004d7c:	4681      	mov	r9, r0
 8004d7e:	eb12 0a08 	adds.w	sl, r2, r8
 8004d82:	eb43 0b09 	adc.w	fp, r3, r9
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	603b      	str	r3, [r7, #0]
 8004d8e:	607a      	str	r2, [r7, #4]
 8004d90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d94:	4650      	mov	r0, sl
 8004d96:	4659      	mov	r1, fp
 8004d98:	f7fb fa16 	bl	80001c8 <__aeabi_uldivmod>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	4613      	mov	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004daa:	d308      	bcc.n	8004dbe <UART_SetConfig+0x3de>
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004db2:	d204      	bcs.n	8004dbe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	60da      	str	r2, [r3, #12]
 8004dbc:	e0b6      	b.n	8004f2c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004dc4:	e0b2      	b.n	8004f2c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	69db      	ldr	r3, [r3, #28]
 8004dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dce:	d15e      	bne.n	8004e8e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004dd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004dd4:	2b08      	cmp	r3, #8
 8004dd6:	d828      	bhi.n	8004e2a <UART_SetConfig+0x44a>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <UART_SetConfig+0x400>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004e05 	.word	0x08004e05
 8004de4:	08004e0d 	.word	0x08004e0d
 8004de8:	08004e15 	.word	0x08004e15
 8004dec:	08004e2b 	.word	0x08004e2b
 8004df0:	08004e1b 	.word	0x08004e1b
 8004df4:	08004e2b 	.word	0x08004e2b
 8004df8:	08004e2b 	.word	0x08004e2b
 8004dfc:	08004e2b 	.word	0x08004e2b
 8004e00:	08004e23 	.word	0x08004e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e04:	f7fe ffa2 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8004e08:	61f8      	str	r0, [r7, #28]
        break;
 8004e0a:	e014      	b.n	8004e36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e0c:	f7fe ffb4 	bl	8003d78 <HAL_RCC_GetPCLK2Freq>
 8004e10:	61f8      	str	r0, [r7, #28]
        break;
 8004e12:	e010      	b.n	8004e36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e14:	4b4d      	ldr	r3, [pc, #308]	; (8004f4c <UART_SetConfig+0x56c>)
 8004e16:	61fb      	str	r3, [r7, #28]
        break;
 8004e18:	e00d      	b.n	8004e36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e1a:	f7fe feff 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8004e1e:	61f8      	str	r0, [r7, #28]
        break;
 8004e20:	e009      	b.n	8004e36 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e26:	61fb      	str	r3, [r7, #28]
        break;
 8004e28:	e005      	b.n	8004e36 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004e34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d077      	beq.n	8004f2c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	005a      	lsls	r2, r3, #1
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	085b      	lsrs	r3, r3, #1
 8004e46:	441a      	add	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b0f      	cmp	r3, #15
 8004e56:	d916      	bls.n	8004e86 <UART_SetConfig+0x4a6>
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5e:	d212      	bcs.n	8004e86 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	f023 030f 	bic.w	r3, r3, #15
 8004e68:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	f003 0307 	and.w	r3, r3, #7
 8004e74:	b29a      	uxth	r2, r3
 8004e76:	8afb      	ldrh	r3, [r7, #22]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	8afa      	ldrh	r2, [r7, #22]
 8004e82:	60da      	str	r2, [r3, #12]
 8004e84:	e052      	b.n	8004f2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004e8c:	e04e      	b.n	8004f2c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e92:	2b08      	cmp	r3, #8
 8004e94:	d827      	bhi.n	8004ee6 <UART_SetConfig+0x506>
 8004e96:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <UART_SetConfig+0x4bc>)
 8004e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9c:	08004ec1 	.word	0x08004ec1
 8004ea0:	08004ec9 	.word	0x08004ec9
 8004ea4:	08004ed1 	.word	0x08004ed1
 8004ea8:	08004ee7 	.word	0x08004ee7
 8004eac:	08004ed7 	.word	0x08004ed7
 8004eb0:	08004ee7 	.word	0x08004ee7
 8004eb4:	08004ee7 	.word	0x08004ee7
 8004eb8:	08004ee7 	.word	0x08004ee7
 8004ebc:	08004edf 	.word	0x08004edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ec0:	f7fe ff44 	bl	8003d4c <HAL_RCC_GetPCLK1Freq>
 8004ec4:	61f8      	str	r0, [r7, #28]
        break;
 8004ec6:	e014      	b.n	8004ef2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ec8:	f7fe ff56 	bl	8003d78 <HAL_RCC_GetPCLK2Freq>
 8004ecc:	61f8      	str	r0, [r7, #28]
        break;
 8004ece:	e010      	b.n	8004ef2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ed0:	4b1e      	ldr	r3, [pc, #120]	; (8004f4c <UART_SetConfig+0x56c>)
 8004ed2:	61fb      	str	r3, [r7, #28]
        break;
 8004ed4:	e00d      	b.n	8004ef2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ed6:	f7fe fea1 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8004eda:	61f8      	str	r0, [r7, #28]
        break;
 8004edc:	e009      	b.n	8004ef2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ee2:	61fb      	str	r3, [r7, #28]
        break;
 8004ee4:	e005      	b.n	8004ef2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ef0:	bf00      	nop
    }

    if (pclk != 0U)
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d019      	beq.n	8004f2c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	085a      	lsrs	r2, r3, #1
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	441a      	add	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	2b0f      	cmp	r3, #15
 8004f10:	d909      	bls.n	8004f26 <UART_SetConfig+0x546>
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f18:	d205      	bcs.n	8004f26 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	60da      	str	r2, [r3, #12]
 8004f24:	e002      	b.n	8004f2c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3728      	adds	r7, #40	; 0x28
 8004f40:	46bd      	mov	sp, r7
 8004f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f46:	bf00      	nop
 8004f48:	40008000 	.word	0x40008000
 8004f4c:	00f42400 	.word	0x00f42400

08004f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	f003 0308 	and.w	r3, r3, #8
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00a      	beq.n	8004f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00a      	beq.n	8004f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d00a      	beq.n	8004fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00a      	beq.n	8004fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00a      	beq.n	8005002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	430a      	orrs	r2, r1
 8005022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01a      	beq.n	8005066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800504e:	d10a      	bne.n	8005066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	430a      	orrs	r2, r1
 8005064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	430a      	orrs	r2, r1
 8005086:	605a      	str	r2, [r3, #4]
  }
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b098      	sub	sp, #96	; 0x60
 8005098:	af02      	add	r7, sp, #8
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80050a4:	f7fc f8aa 	bl	80011fc <HAL_GetTick>
 80050a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0308 	and.w	r3, r3, #8
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d12e      	bne.n	8005116 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050bc:	9300      	str	r3, [sp, #0]
 80050be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050c0:	2200      	movs	r2, #0
 80050c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f88c 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d021      	beq.n	8005116 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80050e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050e6:	653b      	str	r3, [r7, #80]	; 0x50
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	461a      	mov	r2, r3
 80050ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050f0:	647b      	str	r3, [r7, #68]	; 0x44
 80050f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80050f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80050fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e6      	bne.n	80050d2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	e062      	b.n	80051dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b04      	cmp	r3, #4
 8005122:	d149      	bne.n	80051b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005124:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800512c:	2200      	movs	r2, #0
 800512e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f856 	bl	80051e4 <UART_WaitOnFlagUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d03c      	beq.n	80051b8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005146:	e853 3f00 	ldrex	r3, [r3]
 800514a:	623b      	str	r3, [r7, #32]
   return(result);
 800514c:	6a3b      	ldr	r3, [r7, #32]
 800514e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800515c:	633b      	str	r3, [r7, #48]	; 0x30
 800515e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005162:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005164:	e841 2300 	strex	r3, r2, [r1]
 8005168:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e6      	bne.n	800513e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3308      	adds	r3, #8
 8005176:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	e853 3f00 	ldrex	r3, [r3]
 800517e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0301 	bic.w	r3, r3, #1
 8005186:	64bb      	str	r3, [r7, #72]	; 0x48
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3308      	adds	r3, #8
 800518e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005190:	61fa      	str	r2, [r7, #28]
 8005192:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005194:	69b9      	ldr	r1, [r7, #24]
 8005196:	69fa      	ldr	r2, [r7, #28]
 8005198:	e841 2300 	strex	r3, r2, [r1]
 800519c:	617b      	str	r3, [r7, #20]
   return(result);
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1e5      	bne.n	8005170 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2220      	movs	r2, #32
 80051a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e011      	b.n	80051dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2220      	movs	r2, #32
 80051c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3758      	adds	r7, #88	; 0x58
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	603b      	str	r3, [r7, #0]
 80051f0:	4613      	mov	r3, r2
 80051f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051f4:	e049      	b.n	800528a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fc:	d045      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051fe:	f7fb fffd 	bl	80011fc <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	429a      	cmp	r2, r3
 800520c:	d302      	bcc.n	8005214 <UART_WaitOnFlagUntilTimeout+0x30>
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d101      	bne.n	8005218 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e048      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0304 	and.w	r3, r3, #4
 8005222:	2b00      	cmp	r3, #0
 8005224:	d031      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69db      	ldr	r3, [r3, #28]
 800522c:	f003 0308 	and.w	r3, r3, #8
 8005230:	2b08      	cmp	r3, #8
 8005232:	d110      	bne.n	8005256 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	2208      	movs	r2, #8
 800523a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 f838 	bl	80052b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2208      	movs	r2, #8
 8005246:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e029      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69db      	ldr	r3, [r3, #28]
 800525c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005260:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005264:	d111      	bne.n	800528a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800526e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f81e 	bl	80052b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e00f      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	69da      	ldr	r2, [r3, #28]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4013      	ands	r3, r2
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	429a      	cmp	r2, r3
 8005298:	bf0c      	ite	eq
 800529a:	2301      	moveq	r3, #1
 800529c:	2300      	movne	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d0a6      	beq.n	80051f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b095      	sub	sp, #84	; 0x54
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c2:	e853 3f00 	ldrex	r3, [r3]
 80052c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052d8:	643b      	str	r3, [r7, #64]	; 0x40
 80052da:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052e0:	e841 2300 	strex	r3, r2, [r1]
 80052e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d1e6      	bne.n	80052ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3308      	adds	r3, #8
 80052f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	e853 3f00 	ldrex	r3, [r3]
 80052fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80052fc:	69fb      	ldr	r3, [r7, #28]
 80052fe:	f023 0301 	bic.w	r3, r3, #1
 8005302:	64bb      	str	r3, [r7, #72]	; 0x48
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3308      	adds	r3, #8
 800530a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800530c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800530e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005310:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005312:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005314:	e841 2300 	strex	r3, r2, [r1]
 8005318:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1e5      	bne.n	80052ec <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005324:	2b01      	cmp	r3, #1
 8005326:	d118      	bne.n	800535a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	e853 3f00 	ldrex	r3, [r3]
 8005334:	60bb      	str	r3, [r7, #8]
   return(result);
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	f023 0310 	bic.w	r3, r3, #16
 800533c:	647b      	str	r3, [r7, #68]	; 0x44
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005346:	61bb      	str	r3, [r7, #24]
 8005348:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800534a:	6979      	ldr	r1, [r7, #20]
 800534c:	69ba      	ldr	r2, [r7, #24]
 800534e:	e841 2300 	strex	r3, r2, [r1]
 8005352:	613b      	str	r3, [r7, #16]
   return(result);
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1e6      	bne.n	8005328 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800536e:	bf00      	nop
 8005370:	3754      	adds	r7, #84	; 0x54
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800537a:	b084      	sub	sp, #16
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	f107 001c 	add.w	r0, r7, #28
 8005388:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	68db      	ldr	r3, [r3, #12]
 8005390:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f001 fa1d 	bl	80067d8 <USB_CoreReset>
 800539e:	4603      	mov	r3, r0
 80053a0:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80053a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d106      	bne.n	80053b6 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	639a      	str	r2, [r3, #56]	; 0x38
 80053b4:	e005      	b.n	80053c2 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3710      	adds	r7, #16
 80053c8:	46bd      	mov	sp, r7
 80053ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053ce:	b004      	add	sp, #16
 80053d0:	4770      	bx	lr
	...

080053d4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	4613      	mov	r3, r2
 80053e0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d165      	bne.n	80054b4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	4a3e      	ldr	r2, [pc, #248]	; (80054e4 <USB_SetTurnaroundTime+0x110>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d906      	bls.n	80053fe <USB_SetTurnaroundTime+0x2a>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4a3d      	ldr	r2, [pc, #244]	; (80054e8 <USB_SetTurnaroundTime+0x114>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d202      	bcs.n	80053fe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80053f8:	230f      	movs	r3, #15
 80053fa:	617b      	str	r3, [r7, #20]
 80053fc:	e05c      	b.n	80054b8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	4a39      	ldr	r2, [pc, #228]	; (80054e8 <USB_SetTurnaroundTime+0x114>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d306      	bcc.n	8005414 <USB_SetTurnaroundTime+0x40>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	4a38      	ldr	r2, [pc, #224]	; (80054ec <USB_SetTurnaroundTime+0x118>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d202      	bcs.n	8005414 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800540e:	230e      	movs	r3, #14
 8005410:	617b      	str	r3, [r7, #20]
 8005412:	e051      	b.n	80054b8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	4a35      	ldr	r2, [pc, #212]	; (80054ec <USB_SetTurnaroundTime+0x118>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d306      	bcc.n	800542a <USB_SetTurnaroundTime+0x56>
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	4a34      	ldr	r2, [pc, #208]	; (80054f0 <USB_SetTurnaroundTime+0x11c>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d202      	bcs.n	800542a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005424:	230d      	movs	r3, #13
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	e046      	b.n	80054b8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	4a30      	ldr	r2, [pc, #192]	; (80054f0 <USB_SetTurnaroundTime+0x11c>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d306      	bcc.n	8005440 <USB_SetTurnaroundTime+0x6c>
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	4a2f      	ldr	r2, [pc, #188]	; (80054f4 <USB_SetTurnaroundTime+0x120>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d802      	bhi.n	8005440 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800543a:	230c      	movs	r3, #12
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	e03b      	b.n	80054b8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	4a2c      	ldr	r2, [pc, #176]	; (80054f4 <USB_SetTurnaroundTime+0x120>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d906      	bls.n	8005456 <USB_SetTurnaroundTime+0x82>
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	4a2b      	ldr	r2, [pc, #172]	; (80054f8 <USB_SetTurnaroundTime+0x124>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d802      	bhi.n	8005456 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005450:	230b      	movs	r3, #11
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e030      	b.n	80054b8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	4a27      	ldr	r2, [pc, #156]	; (80054f8 <USB_SetTurnaroundTime+0x124>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d906      	bls.n	800546c <USB_SetTurnaroundTime+0x98>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4a26      	ldr	r2, [pc, #152]	; (80054fc <USB_SetTurnaroundTime+0x128>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d802      	bhi.n	800546c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005466:	230a      	movs	r3, #10
 8005468:	617b      	str	r3, [r7, #20]
 800546a:	e025      	b.n	80054b8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	4a23      	ldr	r2, [pc, #140]	; (80054fc <USB_SetTurnaroundTime+0x128>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d906      	bls.n	8005482 <USB_SetTurnaroundTime+0xae>
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	4a22      	ldr	r2, [pc, #136]	; (8005500 <USB_SetTurnaroundTime+0x12c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d202      	bcs.n	8005482 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800547c:	2309      	movs	r3, #9
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e01a      	b.n	80054b8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	4a1e      	ldr	r2, [pc, #120]	; (8005500 <USB_SetTurnaroundTime+0x12c>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d306      	bcc.n	8005498 <USB_SetTurnaroundTime+0xc4>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	4a1d      	ldr	r2, [pc, #116]	; (8005504 <USB_SetTurnaroundTime+0x130>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d802      	bhi.n	8005498 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005492:	2308      	movs	r3, #8
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	e00f      	b.n	80054b8 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <USB_SetTurnaroundTime+0x130>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d906      	bls.n	80054ae <USB_SetTurnaroundTime+0xda>
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	4a19      	ldr	r2, [pc, #100]	; (8005508 <USB_SetTurnaroundTime+0x134>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d202      	bcs.n	80054ae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80054a8:	2307      	movs	r3, #7
 80054aa:	617b      	str	r3, [r7, #20]
 80054ac:	e004      	b.n	80054b8 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80054ae:	2306      	movs	r3, #6
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	e001      	b.n	80054b8 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80054b4:	2309      	movs	r3, #9
 80054b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	029b      	lsls	r3, r3, #10
 80054cc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80054d0:	431a      	orrs	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	00d8acbf 	.word	0x00d8acbf
 80054e8:	00e4e1c0 	.word	0x00e4e1c0
 80054ec:	00f42400 	.word	0x00f42400
 80054f0:	01067380 	.word	0x01067380
 80054f4:	011a499f 	.word	0x011a499f
 80054f8:	01312cff 	.word	0x01312cff
 80054fc:	014ca43f 	.word	0x014ca43f
 8005500:	016e3600 	.word	0x016e3600
 8005504:	01a6ab1f 	.word	0x01a6ab1f
 8005508:	01e84800 	.word	0x01e84800

0800550c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f043 0201 	orr.w	r2, r3, #1
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f023 0201 	bic.w	r2, r3, #1
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	460b      	mov	r3, r1
 800555a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800555c:	2300      	movs	r3, #0
 800555e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800556c:	78fb      	ldrb	r3, [r7, #3]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d115      	bne.n	800559e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800557e:	2001      	movs	r0, #1
 8005580:	f7fb fe48 	bl	8001214 <HAL_Delay>
      ms++;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	3301      	adds	r3, #1
 8005588:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f001 f8ab 	bl	80066e6 <USB_GetMode>
 8005590:	4603      	mov	r3, r0
 8005592:	2b01      	cmp	r3, #1
 8005594:	d01e      	beq.n	80055d4 <USB_SetCurrentMode+0x84>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2b31      	cmp	r3, #49	; 0x31
 800559a:	d9f0      	bls.n	800557e <USB_SetCurrentMode+0x2e>
 800559c:	e01a      	b.n	80055d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d115      	bne.n	80055d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80055b0:	2001      	movs	r0, #1
 80055b2:	f7fb fe2f 	bl	8001214 <HAL_Delay>
      ms++;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	3301      	adds	r3, #1
 80055ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f001 f892 	bl	80066e6 <USB_GetMode>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <USB_SetCurrentMode+0x84>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b31      	cmp	r3, #49	; 0x31
 80055cc:	d9f0      	bls.n	80055b0 <USB_SetCurrentMode+0x60>
 80055ce:	e001      	b.n	80055d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e005      	b.n	80055e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b32      	cmp	r3, #50	; 0x32
 80055d8:	d101      	bne.n	80055de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80055e8:	b084      	sub	sp, #16
 80055ea:	b580      	push	{r7, lr}
 80055ec:	b086      	sub	sp, #24
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
 80055f2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80055f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80055fa:	2300      	movs	r3, #0
 80055fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005602:	2300      	movs	r3, #0
 8005604:	613b      	str	r3, [r7, #16]
 8005606:	e009      	b.n	800561c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	3340      	adds	r3, #64	; 0x40
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	2200      	movs	r2, #0
 8005614:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	3301      	adds	r3, #1
 800561a:	613b      	str	r3, [r7, #16]
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	2b0e      	cmp	r3, #14
 8005620:	d9f2      	bls.n	8005608 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d11c      	bne.n	8005662 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005636:	f043 0302 	orr.w	r3, r3, #2
 800563a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	601a      	str	r2, [r3, #0]
 8005660:	e005      	b.n	800566e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005666:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005674:	461a      	mov	r2, r3
 8005676:	2300      	movs	r3, #0
 8005678:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800567a:	2103      	movs	r1, #3
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f959 	bl	8005934 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005682:	2110      	movs	r1, #16
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f8f1 	bl	800586c <USB_FlushTxFifo>
 800568a:	4603      	mov	r3, r0
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f91d 	bl	80058d4 <USB_FlushRxFifo>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056aa:	461a      	mov	r2, r3
 80056ac:	2300      	movs	r3, #0
 80056ae:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056b6:	461a      	mov	r2, r3
 80056b8:	2300      	movs	r3, #0
 80056ba:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c2:	461a      	mov	r2, r3
 80056c4:	2300      	movs	r3, #0
 80056c6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056c8:	2300      	movs	r3, #0
 80056ca:	613b      	str	r3, [r7, #16]
 80056cc:	e043      	b.n	8005756 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	015a      	lsls	r2, r3, #5
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4413      	add	r3, r2
 80056d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056e4:	d118      	bne.n	8005718 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f8:	461a      	mov	r2, r3
 80056fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	e013      	b.n	800572a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800570e:	461a      	mov	r2, r3
 8005710:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	e008      	b.n	800572a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005724:	461a      	mov	r2, r3
 8005726:	2300      	movs	r3, #0
 8005728:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005736:	461a      	mov	r2, r3
 8005738:	2300      	movs	r3, #0
 800573a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	461a      	mov	r2, r3
 800574a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800574e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	3301      	adds	r3, #1
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	429a      	cmp	r2, r3
 800575c:	d3b7      	bcc.n	80056ce <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800575e:	2300      	movs	r3, #0
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	e043      	b.n	80057ec <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	015a      	lsls	r2, r3, #5
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4413      	add	r3, r2
 800576c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005776:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800577a:	d118      	bne.n	80057ae <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10a      	bne.n	8005798 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578e:	461a      	mov	r2, r3
 8005790:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	e013      	b.n	80057c0 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a4:	461a      	mov	r2, r3
 80057a6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80057aa:	6013      	str	r3, [r2, #0]
 80057ac:	e008      	b.n	80057c0 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ba:	461a      	mov	r2, r3
 80057bc:	2300      	movs	r3, #0
 80057be:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057cc:	461a      	mov	r2, r3
 80057ce:	2300      	movs	r3, #0
 80057d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057de:	461a      	mov	r2, r3
 80057e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80057e4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	3301      	adds	r3, #1
 80057ea:	613b      	str	r3, [r7, #16]
 80057ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	429a      	cmp	r2, r3
 80057f2:	d3b7      	bcc.n	8005764 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fa:	691b      	ldr	r3, [r3, #16]
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005802:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005806:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2200      	movs	r2, #0
 800580c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005814:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	f043 0210 	orr.w	r2, r3, #16
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	4b10      	ldr	r3, [pc, #64]	; (8005868 <USB_DevInit+0x280>)
 8005828:	4313      	orrs	r3, r2
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800582e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d005      	beq.n	8005840 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	f043 0208 	orr.w	r2, r3, #8
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005842:	2b01      	cmp	r3, #1
 8005844:	d107      	bne.n	8005856 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800584e:	f043 0304 	orr.w	r3, r3, #4
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005856:	7dfb      	ldrb	r3, [r7, #23]
}
 8005858:	4618      	mov	r0, r3
 800585a:	3718      	adds	r7, #24
 800585c:	46bd      	mov	sp, r7
 800585e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005862:	b004      	add	sp, #16
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	803c3800 	.word	0x803c3800

0800586c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800586c:	b480      	push	{r7}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005876:	2300      	movs	r3, #0
 8005878:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3301      	adds	r3, #1
 800587e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	4a13      	ldr	r2, [pc, #76]	; (80058d0 <USB_FlushTxFifo+0x64>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d901      	bls.n	800588c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e01b      	b.n	80058c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	daf2      	bge.n	800587a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005894:	2300      	movs	r3, #0
 8005896:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	019b      	lsls	r3, r3, #6
 800589c:	f043 0220 	orr.w	r2, r3, #32
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3301      	adds	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	4a08      	ldr	r2, [pc, #32]	; (80058d0 <USB_FlushTxFifo+0x64>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d901      	bls.n	80058b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e006      	b.n	80058c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	f003 0320 	and.w	r3, r3, #32
 80058be:	2b20      	cmp	r3, #32
 80058c0:	d0f0      	beq.n	80058a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80058c2:	2300      	movs	r3, #0
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3714      	adds	r7, #20
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr
 80058d0:	00030d40 	.word	0x00030d40

080058d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b085      	sub	sp, #20
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	3301      	adds	r3, #1
 80058e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4a11      	ldr	r2, [pc, #68]	; (8005930 <USB_FlushRxFifo+0x5c>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d901      	bls.n	80058f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e018      	b.n	8005924 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	daf2      	bge.n	80058e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2210      	movs	r2, #16
 8005902:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	3301      	adds	r3, #1
 8005908:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4a08      	ldr	r2, [pc, #32]	; (8005930 <USB_FlushRxFifo+0x5c>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d901      	bls.n	8005916 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e006      	b.n	8005924 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0310 	and.w	r3, r3, #16
 800591e:	2b10      	cmp	r3, #16
 8005920:	d0f0      	beq.n	8005904 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3714      	adds	r7, #20
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	00030d40 	.word	0x00030d40

08005934 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	460b      	mov	r3, r1
 800593e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	68f9      	ldr	r1, [r7, #12]
 8005950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005954:	4313      	orrs	r3, r2
 8005956:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3714      	adds	r7, #20
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005966:	b480      	push	{r7}
 8005968:	b087      	sub	sp, #28
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f003 0306 	and.w	r3, r3, #6
 800597e:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b02      	cmp	r3, #2
 8005984:	d002      	beq.n	800598c <USB_GetDevSpeed+0x26>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2b06      	cmp	r3, #6
 800598a:	d102      	bne.n	8005992 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800598c:	2302      	movs	r3, #2
 800598e:	75fb      	strb	r3, [r7, #23]
 8005990:	e001      	b.n	8005996 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8005992:	230f      	movs	r3, #15
 8005994:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005996:	7dfb      	ldrb	r3, [r7, #23]
}
 8005998:	4618      	mov	r0, r3
 800599a:	371c      	adds	r7, #28
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b085      	sub	sp, #20
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	785b      	ldrb	r3, [r3, #1]
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d13a      	bne.n	8005a36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c6:	69da      	ldr	r2, [r3, #28]
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	2101      	movs	r1, #1
 80059d2:	fa01 f303 	lsl.w	r3, r1, r3
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	68f9      	ldr	r1, [r7, #12]
 80059da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059de:	4313      	orrs	r3, r2
 80059e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d155      	bne.n	8005aa4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	015a      	lsls	r2, r3, #5
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	4413      	add	r3, r2
 8005a00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	791b      	ldrb	r3, [r3, #4]
 8005a12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	059b      	lsls	r3, r3, #22
 8005a1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	68ba      	ldr	r2, [r7, #8]
 8005a20:	0151      	lsls	r1, r2, #5
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	440a      	add	r2, r1
 8005a26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	e036      	b.n	8005aa4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3c:	69da      	ldr	r2, [r3, #28]
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	2101      	movs	r1, #1
 8005a48:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4c:	041b      	lsls	r3, r3, #16
 8005a4e:	68f9      	ldr	r1, [r7, #12]
 8005a50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a54:	4313      	orrs	r3, r2
 8005a56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d11a      	bne.n	8005aa4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	791b      	ldrb	r3, [r3, #4]
 8005a88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005a8a:	430b      	orrs	r3, r1
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	0151      	lsls	r1, r2, #5
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	440a      	add	r2, r1
 8005a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005aa2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3714      	adds	r7, #20
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	785b      	ldrb	r3, [r3, #1]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d161      	bne.n	8005b94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	015a      	lsls	r2, r3, #5
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ae6:	d11f      	bne.n	8005b28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	0151      	lsls	r1, r2, #5
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	440a      	add	r2, r1
 8005afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	f003 030f 	and.w	r3, r3, #15
 8005b38:	2101      	movs	r1, #1
 8005b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	43db      	mvns	r3, r3
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b48:	4013      	ands	r3, r2
 8005b4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	f003 030f 	and.w	r3, r3, #15
 8005b5c:	2101      	movs	r1, #1
 8005b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	43db      	mvns	r3, r3
 8005b66:	68f9      	ldr	r1, [r7, #12]
 8005b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	015a      	lsls	r2, r3, #5
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	0159      	lsls	r1, r3, #5
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	440b      	add	r3, r1
 8005b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4b35      	ldr	r3, [pc, #212]	; (8005c64 <USB_DeactivateEndpoint+0x1b0>)
 8005b8e:	4013      	ands	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]
 8005b92:	e060      	b.n	8005c56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	015a      	lsls	r2, r3, #5
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	4413      	add	r3, r2
 8005b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005baa:	d11f      	bne.n	8005bec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	015a      	lsls	r2, r3, #5
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	0151      	lsls	r1, r2, #5
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	440a      	add	r2, r1
 8005bc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005bca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	0151      	lsls	r1, r2, #5
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	440a      	add	r2, r1
 8005be2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	f003 030f 	and.w	r3, r3, #15
 8005bfc:	2101      	movs	r1, #1
 8005bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8005c02:	041b      	lsls	r3, r3, #16
 8005c04:	43db      	mvns	r3, r3
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	f003 030f 	and.w	r3, r3, #15
 8005c20:	2101      	movs	r1, #1
 8005c22:	fa01 f303 	lsl.w	r3, r1, r3
 8005c26:	041b      	lsls	r3, r3, #16
 8005c28:	43db      	mvns	r3, r3
 8005c2a:	68f9      	ldr	r1, [r7, #12]
 8005c2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c30:	4013      	ands	r3, r2
 8005c32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005c34:	68bb      	ldr	r3, [r7, #8]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	0159      	lsls	r1, r3, #5
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	440b      	add	r3, r1
 8005c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <USB_DeactivateEndpoint+0x1b4>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	ec337800 	.word	0xec337800
 8005c68:	eff37800 	.word	0xeff37800

08005c6c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	785b      	ldrb	r3, [r3, #1]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	f040 8128 	bne.w	8005eda <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d132      	bne.n	8005cf8 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9e:	691b      	ldr	r3, [r3, #16]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	697a      	ldr	r2, [r7, #20]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005cb0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005cb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	015a      	lsls	r2, r3, #5
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc2:	691b      	ldr	r3, [r3, #16]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	0151      	lsls	r1, r2, #5
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	440a      	add	r2, r1
 8005ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	0151      	lsls	r1, r2, #5
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	440a      	add	r2, r1
 8005cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cf0:	0cdb      	lsrs	r3, r3, #19
 8005cf2:	04db      	lsls	r3, r3, #19
 8005cf4:	6113      	str	r3, [r2, #16]
 8005cf6:	e092      	b.n	8005e1e <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	015a      	lsls	r2, r3, #5
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	4413      	add	r3, r2
 8005d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	0151      	lsls	r1, r2, #5
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	440a      	add	r2, r1
 8005d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d12:	0cdb      	lsrs	r3, r3, #19
 8005d14:	04db      	lsls	r3, r3, #19
 8005d16:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d32:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d36:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d3a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d11a      	bne.n	8005d78 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	691a      	ldr	r2, [r3, #16]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d903      	bls.n	8005d56 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	689a      	ldr	r2, [r3, #8]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	015a      	lsls	r2, r3, #5
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	0151      	lsls	r1, r2, #5
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	440a      	add	r2, r1
 8005d6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d74:	6113      	str	r3, [r2, #16]
 8005d76:	e01b      	b.n	8005db0 <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d84:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	6919      	ldr	r1, [r3, #16]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	689b      	ldr	r3, [r3, #8]
 8005d8e:	440b      	add	r3, r1
 8005d90:	1e59      	subs	r1, r3, #1
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d9a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005d9c:	4b8d      	ldr	r3, [pc, #564]	; (8005fd4 <USB_EPStartXfer+0x368>)
 8005d9e:	400b      	ands	r3, r1
 8005da0:	6939      	ldr	r1, [r7, #16]
 8005da2:	0148      	lsls	r0, r1, #5
 8005da4:	6979      	ldr	r1, [r7, #20]
 8005da6:	4401      	add	r1, r0
 8005da8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dac:	4313      	orrs	r3, r2
 8005dae:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dbc:	691a      	ldr	r2, [r3, #16]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dc6:	6939      	ldr	r1, [r7, #16]
 8005dc8:	0148      	lsls	r0, r1, #5
 8005dca:	6979      	ldr	r1, [r7, #20]
 8005dcc:	4401      	add	r1, r0
 8005dce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	791b      	ldrb	r3, [r3, #4]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d11f      	bne.n	8005e1e <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	015a      	lsls	r2, r3, #5
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	4413      	add	r3, r2
 8005de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	693a      	ldr	r2, [r7, #16]
 8005dee:	0151      	lsls	r1, r2, #5
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	440a      	add	r2, r1
 8005df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005df8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005dfc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	693a      	ldr	r2, [r7, #16]
 8005e0e:	0151      	lsls	r1, r2, #5
 8005e10:	697a      	ldr	r2, [r7, #20]
 8005e12:	440a      	add	r2, r1
 8005e14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005e1c:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	0151      	lsls	r1, r2, #5
 8005e30:	697a      	ldr	r2, [r7, #20]
 8005e32:	440a      	add	r2, r1
 8005e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e38:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e3c:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	791b      	ldrb	r3, [r3, #4]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d015      	beq.n	8005e72 <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 8139 	beq.w	80060c2 <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	f003 030f 	and.w	r3, r3, #15
 8005e60:	2101      	movs	r1, #1
 8005e62:	fa01 f303 	lsl.w	r3, r1, r3
 8005e66:	6979      	ldr	r1, [r7, #20]
 8005e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	634b      	str	r3, [r1, #52]	; 0x34
 8005e70:	e127      	b.n	80060c2 <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d110      	bne.n	8005ea4 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e9c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ea0:	6013      	str	r3, [r2, #0]
 8005ea2:	e00f      	b.n	8005ec4 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	697a      	ldr	r2, [r7, #20]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ebe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ec2:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	68d9      	ldr	r1, [r3, #12]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f9a6 	bl	8006224 <USB_WritePacket>
 8005ed8:	e0f3      	b.n	80060c2 <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee6:	691b      	ldr	r3, [r3, #16]
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	0151      	lsls	r1, r2, #5
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	440a      	add	r2, r1
 8005ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ef4:	0cdb      	lsrs	r3, r3, #19
 8005ef6:	04db      	lsls	r3, r3, #19
 8005ef8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	693a      	ldr	r2, [r7, #16]
 8005f0a:	0151      	lsls	r1, r2, #5
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	440a      	add	r2, r1
 8005f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f1c:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d12f      	bne.n	8005f84 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	691b      	ldr	r3, [r3, #16]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d003      	beq.n	8005f34 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f48:	691a      	ldr	r2, [r3, #16]
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f52:	6939      	ldr	r1, [r7, #16]
 8005f54:	0148      	lsls	r0, r1, #5
 8005f56:	6979      	ldr	r1, [r7, #20]
 8005f58:	4401      	add	r1, r0
 8005f5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	015a      	lsls	r2, r3, #5
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	4413      	add	r3, r2
 8005f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	693a      	ldr	r2, [r7, #16]
 8005f72:	0151      	lsls	r1, r2, #5
 8005f74:	697a      	ldr	r2, [r7, #20]
 8005f76:	440a      	add	r2, r1
 8005f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f80:	6113      	str	r3, [r2, #16]
 8005f82:	e061      	b.n	8006048 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d125      	bne.n	8005fd8 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	015a      	lsls	r2, r3, #5
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	4413      	add	r3, r2
 8005f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f98:	691a      	ldr	r2, [r3, #16]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa2:	6939      	ldr	r1, [r7, #16]
 8005fa4:	0148      	lsls	r0, r1, #5
 8005fa6:	6979      	ldr	r1, [r7, #20]
 8005fa8:	4401      	add	r1, r0
 8005faa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fd0:	6113      	str	r3, [r2, #16]
 8005fd2:	e039      	b.n	8006048 <USB_EPStartXfer+0x3dc>
 8005fd4:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	689b      	ldr	r3, [r3, #8]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	1e5a      	subs	r2, r3, #1
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fec:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	89fa      	ldrh	r2, [r7, #14]
 8005ff4:	fb03 f202 	mul.w	r2, r3, r2
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006008:	691a      	ldr	r2, [r3, #16]
 800600a:	89fb      	ldrh	r3, [r7, #14]
 800600c:	04d9      	lsls	r1, r3, #19
 800600e:	4b2f      	ldr	r3, [pc, #188]	; (80060cc <USB_EPStartXfer+0x460>)
 8006010:	400b      	ands	r3, r1
 8006012:	6939      	ldr	r1, [r7, #16]
 8006014:	0148      	lsls	r0, r1, #5
 8006016:	6979      	ldr	r1, [r7, #20]
 8006018:	4401      	add	r1, r0
 800601a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800601e:	4313      	orrs	r3, r2
 8006020:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	015a      	lsls	r2, r3, #5
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	4413      	add	r3, r2
 800602a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800602e:	691a      	ldr	r2, [r3, #16]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006038:	6939      	ldr	r1, [r7, #16]
 800603a:	0148      	lsls	r0, r1, #5
 800603c:	6979      	ldr	r1, [r7, #20]
 800603e:	4401      	add	r1, r0
 8006040:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006044:	4313      	orrs	r3, r2
 8006046:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	791b      	ldrb	r3, [r3, #4]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d128      	bne.n	80060a2 <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800605c:	2b00      	cmp	r3, #0
 800605e:	d110      	bne.n	8006082 <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	015a      	lsls	r2, r3, #5
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	4413      	add	r3, r2
 8006068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	0151      	lsls	r1, r2, #5
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	440a      	add	r2, r1
 8006076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800607a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800607e:	6013      	str	r3, [r2, #0]
 8006080:	e00f      	b.n	80060a2 <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	693a      	ldr	r2, [r7, #16]
 8006092:	0151      	lsls	r1, r2, #5
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	440a      	add	r2, r1
 8006098:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800609c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060a0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	697a      	ldr	r2, [r7, #20]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	1ff80000 	.word	0x1ff80000

080060d0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b087      	sub	sp, #28
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	785b      	ldrb	r3, [r3, #1]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d14a      	bne.n	8006184 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	4413      	add	r3, r2
 80060f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006106:	f040 8086 	bne.w	8006216 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	015a      	lsls	r2, r3, #5
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	4413      	add	r3, r2
 8006114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	7812      	ldrb	r2, [r2, #0]
 800611e:	0151      	lsls	r1, r2, #5
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	440a      	add	r2, r1
 8006124:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006128:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800612c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	4413      	add	r3, r2
 8006138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	683a      	ldr	r2, [r7, #0]
 8006140:	7812      	ldrb	r2, [r2, #0]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	440a      	add	r2, r1
 8006148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800614c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006150:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3301      	adds	r3, #1
 8006156:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f242 7210 	movw	r2, #10000	; 0x2710
 800615e:	4293      	cmp	r3, r2
 8006160:	d902      	bls.n	8006168 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	75fb      	strb	r3, [r7, #23]
          break;
 8006166:	e056      	b.n	8006216 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800617c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006180:	d0e7      	beq.n	8006152 <USB_EPStopXfer+0x82>
 8006182:	e048      	b.n	8006216 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	015a      	lsls	r2, r3, #5
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	4413      	add	r3, r2
 800618e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800619c:	d13b      	bne.n	8006216 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	683a      	ldr	r2, [r7, #0]
 80061b0:	7812      	ldrb	r2, [r2, #0]
 80061b2:	0151      	lsls	r1, r2, #5
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	440a      	add	r2, r1
 80061b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061c0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	7812      	ldrb	r2, [r2, #0]
 80061d6:	0151      	lsls	r1, r2, #5
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	440a      	add	r2, r1
 80061dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80061e4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f242 7210 	movw	r2, #10000	; 0x2710
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d902      	bls.n	80061fc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	75fb      	strb	r3, [r7, #23]
          break;
 80061fa:	e00c      	b.n	8006216 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	015a      	lsls	r2, r3, #5
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4413      	add	r3, r2
 8006206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006210:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006214:	d0e7      	beq.n	80061e6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006216:	7dfb      	ldrb	r3, [r7, #23]
}
 8006218:	4618      	mov	r0, r3
 800621a:	371c      	adds	r7, #28
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006224:	b480      	push	{r7}
 8006226:	b089      	sub	sp, #36	; 0x24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	4611      	mov	r1, r2
 8006230:	461a      	mov	r2, r3
 8006232:	460b      	mov	r3, r1
 8006234:	71fb      	strb	r3, [r7, #7]
 8006236:	4613      	mov	r3, r2
 8006238:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8006242:	88bb      	ldrh	r3, [r7, #4]
 8006244:	3303      	adds	r3, #3
 8006246:	089b      	lsrs	r3, r3, #2
 8006248:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800624a:	2300      	movs	r3, #0
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	e018      	b.n	8006282 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	031a      	lsls	r2, r3, #12
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	4413      	add	r3, r2
 8006258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800625c:	461a      	mov	r2, r3
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	6013      	str	r3, [r2, #0]
    pSrc++;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	3301      	adds	r3, #1
 8006268:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	3301      	adds	r3, #1
 800626e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	3301      	adds	r3, #1
 8006274:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	3301      	adds	r3, #1
 800627a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	3301      	adds	r3, #1
 8006280:	61bb      	str	r3, [r7, #24]
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	429a      	cmp	r2, r3
 8006288:	d3e2      	bcc.n	8006250 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3724      	adds	r7, #36	; 0x24
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006298:	b480      	push	{r7}
 800629a:	b08b      	sub	sp, #44	; 0x2c
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	4613      	mov	r3, r2
 80062a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80062ae:	88fb      	ldrh	r3, [r7, #6]
 80062b0:	089b      	lsrs	r3, r3, #2
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062b6:	88fb      	ldrh	r3, [r7, #6]
 80062b8:	f003 0303 	and.w	r3, r3, #3
 80062bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062be:	2300      	movs	r3, #0
 80062c0:	623b      	str	r3, [r7, #32]
 80062c2:	e014      	b.n	80062ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	601a      	str	r2, [r3, #0]
    pDest++;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	3301      	adds	r3, #1
 80062d4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d8:	3301      	adds	r3, #1
 80062da:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062de:	3301      	adds	r3, #1
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	3301      	adds	r3, #1
 80062e6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	3301      	adds	r3, #1
 80062ec:	623b      	str	r3, [r7, #32]
 80062ee:	6a3a      	ldr	r2, [r7, #32]
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d3e6      	bcc.n	80062c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062f6:	8bfb      	ldrh	r3, [r7, #30]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d01e      	beq.n	800633a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062fc:	2300      	movs	r3, #0
 80062fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006306:	461a      	mov	r2, r3
 8006308:	f107 0310 	add.w	r3, r7, #16
 800630c:	6812      	ldr	r2, [r2, #0]
 800630e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	b2db      	uxtb	r3, r3
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	fa22 f303 	lsr.w	r3, r2, r3
 800631c:	b2da      	uxtb	r2, r3
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	701a      	strb	r2, [r3, #0]
      i++;
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	3301      	adds	r3, #1
 8006326:	623b      	str	r3, [r7, #32]
      pDest++;
 8006328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800632a:	3301      	adds	r3, #1
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800632e:	8bfb      	ldrh	r3, [r7, #30]
 8006330:	3b01      	subs	r3, #1
 8006332:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006334:	8bfb      	ldrh	r3, [r7, #30]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1ea      	bne.n	8006310 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800633a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800633c:	4618      	mov	r0, r3
 800633e:	372c      	adds	r7, #44	; 0x2c
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	785b      	ldrb	r3, [r3, #1]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d12c      	bne.n	80063be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	db12      	blt.n	800639c <USB_EPSetStall+0x54>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00f      	beq.n	800639c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	015a      	lsls	r2, r3, #5
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	4413      	add	r3, r2
 8006384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	0151      	lsls	r1, r2, #5
 800638e:	68fa      	ldr	r2, [r7, #12]
 8006390:	440a      	add	r2, r1
 8006392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006396:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800639a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	0151      	lsls	r1, r2, #5
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	440a      	add	r2, r1
 80063b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	e02b      	b.n	8006416 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	db12      	blt.n	80063f6 <USB_EPSetStall+0xae>
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00f      	beq.n	80063f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	015a      	lsls	r2, r3, #5
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	4413      	add	r3, r2
 80063de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	0151      	lsls	r1, r2, #5
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	440a      	add	r2, r1
 80063ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80063f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80063f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	015a      	lsls	r2, r3, #5
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	4413      	add	r3, r2
 80063fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	0151      	lsls	r1, r2, #5
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	440a      	add	r2, r1
 800640c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006414:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	3714      	adds	r7, #20
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	785b      	ldrb	r3, [r3, #1]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d128      	bne.n	8006492 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	0151      	lsls	r1, r2, #5
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	440a      	add	r2, r1
 8006456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800645a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800645e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	791b      	ldrb	r3, [r3, #4]
 8006464:	2b03      	cmp	r3, #3
 8006466:	d003      	beq.n	8006470 <USB_EPClearStall+0x4c>
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	791b      	ldrb	r3, [r3, #4]
 800646c:	2b02      	cmp	r3, #2
 800646e:	d138      	bne.n	80064e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	0151      	lsls	r1, r2, #5
 8006482:	68fa      	ldr	r2, [r7, #12]
 8006484:	440a      	add	r2, r1
 8006486:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800648a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	e027      	b.n	80064e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	4413      	add	r3, r2
 800649a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	0151      	lsls	r1, r2, #5
 80064a4:	68fa      	ldr	r2, [r7, #12]
 80064a6:	440a      	add	r2, r1
 80064a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064ac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	791b      	ldrb	r3, [r3, #4]
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d003      	beq.n	80064c2 <USB_EPClearStall+0x9e>
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	791b      	ldrb	r3, [r3, #4]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d10f      	bne.n	80064e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	015a      	lsls	r2, r3, #5
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4413      	add	r3, r2
 80064ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	0151      	lsls	r1, r2, #5
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	440a      	add	r2, r1
 80064d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	460b      	mov	r3, r1
 80064fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800650e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006512:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	011b      	lsls	r3, r3, #4
 8006520:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006524:	68f9      	ldr	r1, [r7, #12]
 8006526:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800652a:	4313      	orrs	r3, r2
 800652c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	68fa      	ldr	r2, [r7, #12]
 8006552:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006556:	f023 0303 	bic.w	r3, r3, #3
 800655a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800656a:	f023 0302 	bic.w	r3, r3, #2
 800656e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800657e:	b480      	push	{r7}
 8006580:	b085      	sub	sp, #20
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006598:	f023 0303 	bic.w	r3, r3, #3
 800659c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065ac:	f043 0302 	orr.w	r3, r3, #2
 80065b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4013      	ands	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80065d8:	68fb      	ldr	r3, [r7, #12]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b085      	sub	sp, #20
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f8:	699b      	ldr	r3, [r3, #24]
 80065fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	4013      	ands	r3, r2
 8006608:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	0c1b      	lsrs	r3, r3, #16
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr

0800661a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800661a:	b480      	push	{r7}
 800661c:	b085      	sub	sp, #20
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662c:	699b      	ldr	r3, [r3, #24]
 800662e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006636:	69db      	ldr	r3, [r3, #28]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	4013      	ands	r3, r2
 800663c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	b29b      	uxth	r3, r3
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800664e:	b480      	push	{r7}
 8006650:	b085      	sub	sp, #20
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800665e:	78fb      	ldrb	r3, [r7, #3]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	4413      	add	r3, r2
 8006666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	4013      	ands	r3, r2
 800667a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800667c:	68bb      	ldr	r3, [r7, #8]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3714      	adds	r7, #20
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800668a:	b480      	push	{r7}
 800668c:	b087      	sub	sp, #28
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	460b      	mov	r3, r1
 8006694:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800669a:	697b      	ldr	r3, [r7, #20]
 800669c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	f003 030f 	and.w	r3, r3, #15
 80066b4:	68fa      	ldr	r2, [r7, #12]
 80066b6:	fa22 f303 	lsr.w	r3, r2, r3
 80066ba:	01db      	lsls	r3, r3, #7
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80066c4:	78fb      	ldrb	r3, [r7, #3]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	693a      	ldr	r2, [r7, #16]
 80066d4:	4013      	ands	r3, r2
 80066d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80066d8:	68bb      	ldr	r3, [r7, #8]
}
 80066da:	4618      	mov	r0, r3
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	695b      	ldr	r3, [r3, #20]
 80066f2:	f003 0301 	and.w	r3, r3, #1
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	370c      	adds	r7, #12
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr

08006702 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006702:	b480      	push	{r7}
 8006704:	b085      	sub	sp, #20
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800671c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006720:	f023 0307 	bic.w	r3, r3, #7
 8006724:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006738:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	333c      	adds	r3, #60	; 0x3c
 800675a:	3304      	adds	r3, #4
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	4a1c      	ldr	r2, [pc, #112]	; (80067d4 <USB_EP0_OutStart+0x8c>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d90a      	bls.n	800677e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006774:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006778:	d101      	bne.n	800677e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	e024      	b.n	80067c8 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006784:	461a      	mov	r2, r3
 8006786:	2300      	movs	r3, #0
 8006788:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006798:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800679c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067ac:	f043 0318 	orr.w	r3, r3, #24
 80067b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80067c4:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	4f54300a 	.word	0x4f54300a

080067d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80067d8:	b480      	push	{r7}
 80067da:	b085      	sub	sp, #20
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	3301      	adds	r3, #1
 80067e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4a13      	ldr	r2, [pc, #76]	; (800683c <USB_CoreReset+0x64>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d901      	bls.n	80067f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e01b      	b.n	800682e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	691b      	ldr	r3, [r3, #16]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	daf2      	bge.n	80067e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f043 0201 	orr.w	r2, r3, #1
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3301      	adds	r3, #1
 8006812:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	4a09      	ldr	r2, [pc, #36]	; (800683c <USB_CoreReset+0x64>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d901      	bls.n	8006820 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e006      	b.n	800682e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b01      	cmp	r3, #1
 800682a:	d0f0      	beq.n	800680e <USB_CoreReset+0x36>

  return HAL_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3714      	adds	r7, #20
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	00030d40 	.word	0x00030d40

08006840 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	460b      	mov	r3, r1
 800684a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800684c:	201c      	movs	r0, #28
 800684e:	f002 fc21 	bl	8009094 <USBD_static_malloc>
 8006852:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	32b0      	adds	r2, #176	; 0xb0
 8006864:	2100      	movs	r1, #0
 8006866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800686a:	2302      	movs	r3, #2
 800686c:	e08a      	b.n	8006984 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	32b0      	adds	r2, #176	; 0xb0
 8006878:	68f9      	ldr	r1, [r7, #12]
 800687a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	32b0      	adds	r2, #176	; 0xb0
 8006888:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	7c1b      	ldrb	r3, [r3, #16]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d11b      	bne.n	80068d2 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800689a:	4b3c      	ldr	r3, [pc, #240]	; (800698c <USBD_CUSTOM_HID_Init+0x14c>)
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	f003 020f 	and.w	r2, r3, #15
 80068a2:	6879      	ldr	r1, [r7, #4]
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	440b      	add	r3, r1
 80068ae:	3326      	adds	r3, #38	; 0x26
 80068b0:	2205      	movs	r2, #5
 80068b2:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80068b4:	4b36      	ldr	r3, [pc, #216]	; (8006990 <USBD_CUSTOM_HID_Init+0x150>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	f003 020f 	and.w	r2, r3, #15
 80068bc:	6879      	ldr	r1, [r7, #4]
 80068be:	4613      	mov	r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	4413      	add	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	440b      	add	r3, r1
 80068c8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80068cc:	2205      	movs	r2, #5
 80068ce:	801a      	strh	r2, [r3, #0]
 80068d0:	e01a      	b.n	8006908 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80068d2:	4b2e      	ldr	r3, [pc, #184]	; (800698c <USBD_CUSTOM_HID_Init+0x14c>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	f003 020f 	and.w	r2, r3, #15
 80068da:	6879      	ldr	r1, [r7, #4]
 80068dc:	4613      	mov	r3, r2
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	440b      	add	r3, r1
 80068e6:	3326      	adds	r3, #38	; 0x26
 80068e8:	2205      	movs	r2, #5
 80068ea:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80068ec:	4b28      	ldr	r3, [pc, #160]	; (8006990 <USBD_CUSTOM_HID_Init+0x150>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	f003 020f 	and.w	r2, r3, #15
 80068f4:	6879      	ldr	r1, [r7, #4]
 80068f6:	4613      	mov	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	440b      	add	r3, r1
 8006900:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006904:	2205      	movs	r2, #5
 8006906:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8006908:	4b20      	ldr	r3, [pc, #128]	; (800698c <USBD_CUSTOM_HID_Init+0x14c>)
 800690a:	7819      	ldrb	r1, [r3, #0]
 800690c:	2302      	movs	r3, #2
 800690e:	2203      	movs	r2, #3
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f002 f9bf 	bl	8008c94 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8006916:	4b1d      	ldr	r3, [pc, #116]	; (800698c <USBD_CUSTOM_HID_Init+0x14c>)
 8006918:	781b      	ldrb	r3, [r3, #0]
 800691a:	f003 020f 	and.w	r2, r3, #15
 800691e:	6879      	ldr	r1, [r7, #4]
 8006920:	4613      	mov	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	440b      	add	r3, r1
 800692a:	3324      	adds	r3, #36	; 0x24
 800692c:	2201      	movs	r2, #1
 800692e:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 8006930:	4b17      	ldr	r3, [pc, #92]	; (8006990 <USBD_CUSTOM_HID_Init+0x150>)
 8006932:	7819      	ldrb	r1, [r3, #0]
 8006934:	2302      	movs	r3, #2
 8006936:	2203      	movs	r2, #3
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f002 f9ab 	bl	8008c94 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800693e:	4b14      	ldr	r3, [pc, #80]	; (8006990 <USBD_CUSTOM_HID_Init+0x150>)
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	f003 020f 	and.w	r2, r3, #15
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	4613      	mov	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	4413      	add	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	440b      	add	r3, r1
 8006952:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006956:	2201      	movs	r2, #1
 8006958:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	33b0      	adds	r3, #176	; 0xb0
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	4413      	add	r3, r2
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006974:	4b06      	ldr	r3, [pc, #24]	; (8006990 <USBD_CUSTOM_HID_Init+0x150>)
 8006976:	7819      	ldrb	r1, [r3, #0]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	2306      	movs	r3, #6
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f002 fb03 	bl	8008f88 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	20000086 	.word	0x20000086
 8006990:	20000087 	.word	0x20000087

08006994 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80069a0:	4b37      	ldr	r3, [pc, #220]	; (8006a80 <USBD_CUSTOM_HID_DeInit+0xec>)
 80069a2:	781b      	ldrb	r3, [r3, #0]
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f002 f9b2 	bl	8008d10 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80069ac:	4b34      	ldr	r3, [pc, #208]	; (8006a80 <USBD_CUSTOM_HID_DeInit+0xec>)
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	f003 020f 	and.w	r2, r3, #15
 80069b4:	6879      	ldr	r1, [r7, #4]
 80069b6:	4613      	mov	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	440b      	add	r3, r1
 80069c0:	3324      	adds	r3, #36	; 0x24
 80069c2:	2200      	movs	r2, #0
 80069c4:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80069c6:	4b2e      	ldr	r3, [pc, #184]	; (8006a80 <USBD_CUSTOM_HID_DeInit+0xec>)
 80069c8:	781b      	ldrb	r3, [r3, #0]
 80069ca:	f003 020f 	and.w	r2, r3, #15
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	4613      	mov	r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	440b      	add	r3, r1
 80069da:	3326      	adds	r3, #38	; 0x26
 80069dc:	2200      	movs	r2, #0
 80069de:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80069e0:	4b28      	ldr	r3, [pc, #160]	; (8006a84 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	4619      	mov	r1, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f002 f992 	bl	8008d10 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80069ec:	4b25      	ldr	r3, [pc, #148]	; (8006a84 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	f003 020f 	and.w	r2, r3, #15
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	440b      	add	r3, r1
 8006a00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006a04:	2200      	movs	r2, #0
 8006a06:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8006a08:	4b1e      	ldr	r3, [pc, #120]	; (8006a84 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	f003 020f 	and.w	r2, r3, #15
 8006a10:	6879      	ldr	r1, [r7, #4]
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	440b      	add	r3, r1
 8006a1c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8006a20:	2200      	movs	r2, #0
 8006a22:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	32b0      	adds	r2, #176	; 0xb0
 8006a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d01f      	beq.n	8006a76 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	33b0      	adds	r3, #176	; 0xb0
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	32b0      	adds	r2, #176	; 0xb0
 8006a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f002 fb29 	bl	80090b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	32b0      	adds	r2, #176	; 0xb0
 8006a68:	2100      	movs	r1, #0
 8006a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3708      	adds	r7, #8
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	20000086 	.word	0x20000086
 8006a84:	20000087 	.word	0x20000087

08006a88 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b088      	sub	sp, #32
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	32b0      	adds	r2, #176	; 0xb0
 8006a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006ab2:	693b      	ldr	r3, [r7, #16]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d101      	bne.n	8006abc <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e0f8      	b.n	8006cae <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	781b      	ldrb	r3, [r3, #0]
 8006ac0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d056      	beq.n	8006b76 <USBD_CUSTOM_HID_Setup+0xee>
 8006ac8:	2b20      	cmp	r3, #32
 8006aca:	f040 80e8 	bne.w	8006c9e <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	785b      	ldrb	r3, [r3, #1]
 8006ad2:	3b02      	subs	r3, #2
 8006ad4:	2b09      	cmp	r3, #9
 8006ad6:	d846      	bhi.n	8006b66 <USBD_CUSTOM_HID_Setup+0xde>
 8006ad8:	a201      	add	r2, pc, #4	; (adr r2, 8006ae0 <USBD_CUSTOM_HID_Setup+0x58>)
 8006ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ade:	bf00      	nop
 8006ae0:	08006b39 	.word	0x08006b39
 8006ae4:	08006b17 	.word	0x08006b17
 8006ae8:	08006b67 	.word	0x08006b67
 8006aec:	08006b67 	.word	0x08006b67
 8006af0:	08006b67 	.word	0x08006b67
 8006af4:	08006b67 	.word	0x08006b67
 8006af8:	08006b67 	.word	0x08006b67
 8006afc:	08006b49 	.word	0x08006b49
 8006b00:	08006b27 	.word	0x08006b27
 8006b04:	08006b09 	.word	0x08006b09
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	885b      	ldrh	r3, [r3, #2]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	461a      	mov	r2, r3
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	609a      	str	r2, [r3, #8]
          break;
 8006b14:	e02e      	b.n	8006b74 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	3308      	adds	r3, #8
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f001 fc9e 	bl	8008460 <USBD_CtlSendData>
          break;
 8006b24:	e026      	b.n	8006b74 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	885b      	ldrh	r3, [r3, #2]
 8006b2a:	0a1b      	lsrs	r3, r3, #8
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	b2db      	uxtb	r3, r3
 8006b30:	461a      	mov	r2, r3
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	60da      	str	r2, [r3, #12]
          break;
 8006b36:	e01d      	b.n	8006b74 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	330c      	adds	r3, #12
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	4619      	mov	r1, r3
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 fc8d 	bl	8008460 <USBD_CtlSendData>
          break;
 8006b46:	e015      	b.n	8006b74 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006b4e:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	88db      	ldrh	r3, [r3, #6]
 8006b54:	2b06      	cmp	r3, #6
 8006b56:	bf28      	it	cs
 8006b58:	2306      	movcs	r3, #6
 8006b5a:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f001 fcaa 	bl	80084b8 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8006b64:	e006      	b.n	8006b74 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8006b66:	6839      	ldr	r1, [r7, #0]
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f001 fc08 	bl	800837e <USBD_CtlError>
          ret = USBD_FAIL;
 8006b6e:	2303      	movs	r3, #3
 8006b70:	75fb      	strb	r3, [r7, #23]
          break;
 8006b72:	bf00      	nop
      }
      break;
 8006b74:	e09a      	b.n	8006cac <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	785b      	ldrb	r3, [r3, #1]
 8006b7a:	2b0b      	cmp	r3, #11
 8006b7c:	f200 8086 	bhi.w	8006c8c <USBD_CUSTOM_HID_Setup+0x204>
 8006b80:	a201      	add	r2, pc, #4	; (adr r2, 8006b88 <USBD_CUSTOM_HID_Setup+0x100>)
 8006b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b86:	bf00      	nop
 8006b88:	08006bb9 	.word	0x08006bb9
 8006b8c:	08006c9b 	.word	0x08006c9b
 8006b90:	08006c8d 	.word	0x08006c8d
 8006b94:	08006c8d 	.word	0x08006c8d
 8006b98:	08006c8d 	.word	0x08006c8d
 8006b9c:	08006c8d 	.word	0x08006c8d
 8006ba0:	08006be3 	.word	0x08006be3
 8006ba4:	08006c8d 	.word	0x08006c8d
 8006ba8:	08006c8d 	.word	0x08006c8d
 8006bac:	08006c8d 	.word	0x08006c8d
 8006bb0:	08006c3b 	.word	0x08006c3b
 8006bb4:	08006c65 	.word	0x08006c65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d107      	bne.n	8006bd4 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006bc4:	f107 030e 	add.w	r3, r7, #14
 8006bc8:	2202      	movs	r2, #2
 8006bca:	4619      	mov	r1, r3
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 fc47 	bl	8008460 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006bd2:	e063      	b.n	8006c9c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f001 fbd1 	bl	800837e <USBD_CtlError>
            ret = USBD_FAIL;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	75fb      	strb	r3, [r7, #23]
          break;
 8006be0:	e05c      	b.n	8006c9c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	885b      	ldrh	r3, [r3, #2]
 8006be6:	0a1b      	lsrs	r3, r3, #8
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	2b22      	cmp	r3, #34	; 0x22
 8006bec:	d110      	bne.n	8006c10 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	88db      	ldrh	r3, [r3, #6]
 8006bf2:	2b1d      	cmp	r3, #29
 8006bf4:	bf28      	it	cs
 8006bf6:	231d      	movcs	r3, #29
 8006bf8:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	33b0      	adds	r3, #176	; 0xb0
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	4413      	add	r3, r2
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	61bb      	str	r3, [r7, #24]
 8006c0e:	e00d      	b.n	8006c2c <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	885b      	ldrh	r3, [r3, #2]
 8006c14:	0a1b      	lsrs	r3, r3, #8
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	2b21      	cmp	r3, #33	; 0x21
 8006c1a:	d107      	bne.n	8006c2c <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006c1c:	4b26      	ldr	r3, [pc, #152]	; (8006cb8 <USBD_CUSTOM_HID_Setup+0x230>)
 8006c1e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	88db      	ldrh	r3, [r3, #6]
 8006c24:	2b09      	cmp	r3, #9
 8006c26:	bf28      	it	cs
 8006c28:	2309      	movcs	r3, #9
 8006c2a:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006c2c:	8bfb      	ldrh	r3, [r7, #30]
 8006c2e:	461a      	mov	r2, r3
 8006c30:	69b9      	ldr	r1, [r7, #24]
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f001 fc14 	bl	8008460 <USBD_CtlSendData>
          break;
 8006c38:	e030      	b.n	8006c9c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	2b03      	cmp	r3, #3
 8006c44:	d107      	bne.n	8006c56 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	3310      	adds	r3, #16
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f001 fc06 	bl	8008460 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c54:	e022      	b.n	8006c9c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006c56:	6839      	ldr	r1, [r7, #0]
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f001 fb90 	bl	800837e <USBD_CtlError>
            ret = USBD_FAIL;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	75fb      	strb	r3, [r7, #23]
          break;
 8006c62:	e01b      	b.n	8006c9c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b03      	cmp	r3, #3
 8006c6e:	d106      	bne.n	8006c7e <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	885b      	ldrh	r3, [r3, #2]
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006c7c:	e00e      	b.n	8006c9c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006c7e:	6839      	ldr	r1, [r7, #0]
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f001 fb7c 	bl	800837e <USBD_CtlError>
            ret = USBD_FAIL;
 8006c86:	2303      	movs	r3, #3
 8006c88:	75fb      	strb	r3, [r7, #23]
          break;
 8006c8a:	e007      	b.n	8006c9c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f001 fb75 	bl	800837e <USBD_CtlError>
          ret = USBD_FAIL;
 8006c94:	2303      	movs	r3, #3
 8006c96:	75fb      	strb	r3, [r7, #23]
          break;
 8006c98:	e000      	b.n	8006c9c <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8006c9a:	bf00      	nop
      }
      break;
 8006c9c:	e006      	b.n	8006cac <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8006c9e:	6839      	ldr	r1, [r7, #0]
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 fb6c 	bl	800837e <USBD_CtlError>
      ret = USBD_FAIL;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	75fb      	strb	r3, [r7, #23]
      break;
 8006caa:	bf00      	nop
  }
  return (uint8_t)ret;
 8006cac:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3720      	adds	r7, #32
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}
 8006cb6:	bf00      	nop
 8006cb8:	20000070 	.word	0x20000070

08006cbc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006cc4:	2181      	movs	r1, #129	; 0x81
 8006cc6:	4815      	ldr	r0, [pc, #84]	; (8006d1c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006cc8:	f000 fcf7 	bl	80076ba <USBD_GetEpDesc>
 8006ccc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006cce:	2101      	movs	r1, #1
 8006cd0:	4812      	ldr	r0, [pc, #72]	; (8006d1c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006cd2:	f000 fcf2 	bl	80076ba <USBD_GetEpDesc>
 8006cd6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d009      	beq.n	8006cf2 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f042 0202 	orr.w	r2, r2, #2
 8006ce6:	711a      	strb	r2, [r3, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2205      	movs	r2, #5
 8006cf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d009      	beq.n	8006d0c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	f042 0202 	orr.w	r2, r2, #2
 8006d00:	711a      	strb	r2, [r3, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2205      	movs	r2, #5
 8006d0a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2229      	movs	r2, #41	; 0x29
 8006d10:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006d12:	4b02      	ldr	r3, [pc, #8]	; (8006d1c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3710      	adds	r7, #16
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}
 8006d1c:	20000044 	.word	0x20000044

08006d20 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006d28:	2181      	movs	r1, #129	; 0x81
 8006d2a:	4815      	ldr	r0, [pc, #84]	; (8006d80 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006d2c:	f000 fcc5 	bl	80076ba <USBD_GetEpDesc>
 8006d30:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006d32:	2101      	movs	r1, #1
 8006d34:	4812      	ldr	r0, [pc, #72]	; (8006d80 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006d36:	f000 fcc0 	bl	80076ba <USBD_GetEpDesc>
 8006d3a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d009      	beq.n	8006d56 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f042 0202 	orr.w	r2, r2, #2
 8006d4a:	711a      	strb	r2, [r3, #4]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2205      	movs	r2, #5
 8006d54:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d009      	beq.n	8006d70 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f042 0202 	orr.w	r2, r2, #2
 8006d64:	711a      	strb	r2, [r3, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	2205      	movs	r2, #5
 8006d6e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2229      	movs	r2, #41	; 0x29
 8006d74:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006d76:	4b02      	ldr	r3, [pc, #8]	; (8006d80 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20000044 	.word	0x20000044

08006d84 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006d8c:	2181      	movs	r1, #129	; 0x81
 8006d8e:	4815      	ldr	r0, [pc, #84]	; (8006de4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006d90:	f000 fc93 	bl	80076ba <USBD_GetEpDesc>
 8006d94:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006d96:	2101      	movs	r1, #1
 8006d98:	4812      	ldr	r0, [pc, #72]	; (8006de4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006d9a:	f000 fc8e 	bl	80076ba <USBD_GetEpDesc>
 8006d9e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d009      	beq.n	8006dba <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f042 0202 	orr.w	r2, r2, #2
 8006dae:	711a      	strb	r2, [r3, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2205      	movs	r2, #5
 8006db8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d009      	beq.n	8006dd4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f042 0202 	orr.w	r2, r2, #2
 8006dc8:	711a      	strb	r2, [r3, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	2205      	movs	r2, #5
 8006dd2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2229      	movs	r2, #41	; 0x29
 8006dd8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006dda:	4b02      	ldr	r3, [pc, #8]	; (8006de4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	20000044 	.word	0x20000044

08006de8 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	32b0      	adds	r2, #176	; 0xb0
 8006dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e02:	2200      	movs	r2, #0
 8006e04:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	370c      	adds	r7, #12
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e12:	4770      	bx	lr

08006e14 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	32b0      	adds	r2, #176	; 0xb0
 8006e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d101      	bne.n	8006e36 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e017      	b.n	8006e66 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	32b0      	adds	r2, #176	; 0xb0
 8006e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e44:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e4c:	687a      	ldr	r2, [r7, #4]
 8006e4e:	33b0      	adds	r3, #176	; 0xb0
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	685b      	ldr	r3, [r3, #4]
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	7810      	ldrb	r0, [r2, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	7852      	ldrb	r2, [r2, #1]
 8006e60:	4611      	mov	r1, r2
 8006e62:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8006e64:	2300      	movs	r3, #0
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}

08006e6e <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	32b0      	adds	r2, #176	; 0xb0
 8006e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e84:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d101      	bne.n	8006e90 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e016      	b.n	8006ebe <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d111      	bne.n	8006ebc <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	33b0      	adds	r3, #176	; 0xb0
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	68db      	ldr	r3, [r3, #12]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	7810      	ldrb	r0, [r2, #0]
 8006eae:	68fa      	ldr	r2, [r7, #12]
 8006eb0:	7852      	ldrb	r2, [r2, #1]
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
	...

08006ec8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	220a      	movs	r2, #10
 8006ed4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006ed6:	4b03      	ldr	r3, [pc, #12]	; (8006ee4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	2000007c 	.word	0x2000007c

08006ee8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d101      	bne.n	8006efc <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e009      	b.n	8006f10 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	33b0      	adds	r3, #176	; 0xb0
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	370c      	adds	r7, #12
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	4613      	mov	r3, r2
 8006f28:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e01f      	b.n	8006f74 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2200      	movs	r2, #0
 8006f38:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2201      	movs	r2, #1
 8006f5e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	79fa      	ldrb	r2, [r7, #7]
 8006f66:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006f68:	68f8      	ldr	r0, [r7, #12]
 8006f6a:	f001 fe15 	bl	8008b98 <USBD_LL_Init>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d101      	bne.n	8006f94 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e025      	b.n	8006fe0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	32ae      	adds	r2, #174	; 0xae
 8006fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00f      	beq.n	8006fd0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	32ae      	adds	r2, #174	; 0xae
 8006fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc0:	f107 020e 	add.w	r2, r7, #14
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	4798      	blx	r3
 8006fc8:	4602      	mov	r2, r0
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006fd6:	1c5a      	adds	r2, r3, #1
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 fe1d 	bl	8008c30 <USBD_LL_Start>
 8006ff6:	4603      	mov	r3, r0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007008:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800700a:	4618      	mov	r0, r3
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800702c:	2b00      	cmp	r3, #0
 800702e:	d009      	beq.n	8007044 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	78fa      	ldrb	r2, [r7, #3]
 800703a:	4611      	mov	r1, r2
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	4798      	blx	r3
 8007040:	4603      	mov	r3, r0
 8007042:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007044:	7bfb      	ldrb	r3, [r7, #15]
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b084      	sub	sp, #16
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800705a:	2300      	movs	r3, #0
 800705c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	78fa      	ldrb	r2, [r7, #3]
 8007068:	4611      	mov	r1, r2
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	4798      	blx	r3
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007074:	2303      	movs	r3, #3
 8007076:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007078:	7bfb      	ldrb	r3, [r7, #15]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	4618      	mov	r0, r3
 8007096:	f001 f938 	bl	800830a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80070a8:	461a      	mov	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80070b6:	f003 031f 	and.w	r3, r3, #31
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d01a      	beq.n	80070f4 <USBD_LL_SetupStage+0x72>
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d822      	bhi.n	8007108 <USBD_LL_SetupStage+0x86>
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <USBD_LL_SetupStage+0x4a>
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d00a      	beq.n	80070e0 <USBD_LL_SetupStage+0x5e>
 80070ca:	e01d      	b.n	8007108 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fb65 	bl	80077a4 <USBD_StdDevReq>
 80070da:	4603      	mov	r3, r0
 80070dc:	73fb      	strb	r3, [r7, #15]
      break;
 80070de:	e020      	b.n	8007122 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070e6:	4619      	mov	r1, r3
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 fbcd 	bl	8007888 <USBD_StdItfReq>
 80070ee:	4603      	mov	r3, r0
 80070f0:	73fb      	strb	r3, [r7, #15]
      break;
 80070f2:	e016      	b.n	8007122 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80070fa:	4619      	mov	r1, r3
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fc2f 	bl	8007960 <USBD_StdEPReq>
 8007102:	4603      	mov	r3, r0
 8007104:	73fb      	strb	r3, [r7, #15]
      break;
 8007106:	e00c      	b.n	8007122 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800710e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007112:	b2db      	uxtb	r3, r3
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f001 fe30 	bl	8008d7c <USBD_LL_StallEP>
 800711c:	4603      	mov	r3, r0
 800711e:	73fb      	strb	r3, [r7, #15]
      break;
 8007120:	bf00      	nop
  }

  return ret;
 8007122:	7bfb      	ldrb	r3, [r7, #15]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b086      	sub	sp, #24
 8007130:	af00      	add	r7, sp, #0
 8007132:	60f8      	str	r0, [r7, #12]
 8007134:	460b      	mov	r3, r1
 8007136:	607a      	str	r2, [r7, #4]
 8007138:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800713a:	2300      	movs	r3, #0
 800713c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800713e:	7afb      	ldrb	r3, [r7, #11]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d16e      	bne.n	8007222 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800714a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007152:	2b03      	cmp	r3, #3
 8007154:	f040 8098 	bne.w	8007288 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	429a      	cmp	r2, r3
 8007162:	d913      	bls.n	800718c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	1ad2      	subs	r2, r2, r3
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	68da      	ldr	r2, [r3, #12]
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	689b      	ldr	r3, [r3, #8]
 800717a:	4293      	cmp	r3, r2
 800717c:	bf28      	it	cs
 800717e:	4613      	movcs	r3, r2
 8007180:	461a      	mov	r2, r3
 8007182:	6879      	ldr	r1, [r7, #4]
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f001 f9b4 	bl	80084f2 <USBD_CtlContinueRx>
 800718a:	e07d      	b.n	8007288 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007192:	f003 031f 	and.w	r3, r3, #31
 8007196:	2b02      	cmp	r3, #2
 8007198:	d014      	beq.n	80071c4 <USBD_LL_DataOutStage+0x98>
 800719a:	2b02      	cmp	r3, #2
 800719c:	d81d      	bhi.n	80071da <USBD_LL_DataOutStage+0xae>
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <USBD_LL_DataOutStage+0x7c>
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d003      	beq.n	80071ae <USBD_LL_DataOutStage+0x82>
 80071a6:	e018      	b.n	80071da <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	75bb      	strb	r3, [r7, #22]
            break;
 80071ac:	e018      	b.n	80071e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	4619      	mov	r1, r3
 80071b8:	68f8      	ldr	r0, [r7, #12]
 80071ba:	f000 fa64 	bl	8007686 <USBD_CoreFindIF>
 80071be:	4603      	mov	r3, r0
 80071c0:	75bb      	strb	r3, [r7, #22]
            break;
 80071c2:	e00d      	b.n	80071e0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	4619      	mov	r1, r3
 80071ce:	68f8      	ldr	r0, [r7, #12]
 80071d0:	f000 fa66 	bl	80076a0 <USBD_CoreFindEP>
 80071d4:	4603      	mov	r3, r0
 80071d6:	75bb      	strb	r3, [r7, #22]
            break;
 80071d8:	e002      	b.n	80071e0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	75bb      	strb	r3, [r7, #22]
            break;
 80071de:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80071e0:	7dbb      	ldrb	r3, [r7, #22]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d119      	bne.n	800721a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d113      	bne.n	800721a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80071f2:	7dba      	ldrb	r2, [r7, #22]
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	32ae      	adds	r2, #174	; 0xae
 80071f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00b      	beq.n	800721a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007202:	7dba      	ldrb	r2, [r7, #22]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800720a:	7dba      	ldrb	r2, [r7, #22]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	32ae      	adds	r2, #174	; 0xae
 8007210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f001 f97a 	bl	8008514 <USBD_CtlSendStatus>
 8007220:	e032      	b.n	8007288 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007222:	7afb      	ldrb	r3, [r7, #11]
 8007224:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007228:	b2db      	uxtb	r3, r3
 800722a:	4619      	mov	r1, r3
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 fa37 	bl	80076a0 <USBD_CoreFindEP>
 8007232:	4603      	mov	r3, r0
 8007234:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007236:	7dbb      	ldrb	r3, [r7, #22]
 8007238:	2bff      	cmp	r3, #255	; 0xff
 800723a:	d025      	beq.n	8007288 <USBD_LL_DataOutStage+0x15c>
 800723c:	7dbb      	ldrb	r3, [r7, #22]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d122      	bne.n	8007288 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b03      	cmp	r3, #3
 800724c:	d117      	bne.n	800727e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800724e:	7dba      	ldrb	r2, [r7, #22]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	32ae      	adds	r2, #174	; 0xae
 8007254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007258:	699b      	ldr	r3, [r3, #24]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00f      	beq.n	800727e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800725e:	7dba      	ldrb	r2, [r7, #22]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007266:	7dba      	ldrb	r2, [r7, #22]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	32ae      	adds	r2, #174	; 0xae
 800726c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	7afa      	ldrb	r2, [r7, #11]
 8007274:	4611      	mov	r1, r2
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	4798      	blx	r3
 800727a:	4603      	mov	r3, r0
 800727c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800727e:	7dfb      	ldrb	r3, [r7, #23]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
 8007286:	e000      	b.n	800728a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3718      	adds	r7, #24
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b086      	sub	sp, #24
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	460b      	mov	r3, r1
 800729c:	607a      	str	r2, [r7, #4]
 800729e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80072a0:	7afb      	ldrb	r3, [r7, #11]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d16f      	bne.n	8007386 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3314      	adds	r3, #20
 80072aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d15a      	bne.n	800736c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	429a      	cmp	r2, r3
 80072c0:	d914      	bls.n	80072ec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	689a      	ldr	r2, [r3, #8]
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	1ad2      	subs	r2, r2, r3
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	461a      	mov	r2, r3
 80072d6:	6879      	ldr	r1, [r7, #4]
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f001 f8dc 	bl	8008496 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072de:	2300      	movs	r3, #0
 80072e0:	2200      	movs	r2, #0
 80072e2:	2100      	movs	r1, #0
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f001 fe4f 	bl	8008f88 <USBD_LL_PrepareReceive>
 80072ea:	e03f      	b.n	800736c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	689b      	ldr	r3, [r3, #8]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d11c      	bne.n	8007332 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007300:	429a      	cmp	r2, r3
 8007302:	d316      	bcc.n	8007332 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	685a      	ldr	r2, [r3, #4]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800730e:	429a      	cmp	r2, r3
 8007310:	d20f      	bcs.n	8007332 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007312:	2200      	movs	r2, #0
 8007314:	2100      	movs	r1, #0
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f001 f8bd 	bl	8008496 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007324:	2300      	movs	r3, #0
 8007326:	2200      	movs	r2, #0
 8007328:	2100      	movs	r1, #0
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f001 fe2c 	bl	8008f88 <USBD_LL_PrepareReceive>
 8007330:	e01c      	b.n	800736c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b03      	cmp	r3, #3
 800733c:	d10f      	bne.n	800735e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d009      	beq.n	800735e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2200      	movs	r2, #0
 800734e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800735e:	2180      	movs	r1, #128	; 0x80
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f001 fd0b 	bl	8008d7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f001 f8e7 	bl	800853a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007372:	2b00      	cmp	r3, #0
 8007374:	d03a      	beq.n	80073ec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7ff fe42 	bl	8007000 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007384:	e032      	b.n	80073ec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007386:	7afb      	ldrb	r3, [r7, #11]
 8007388:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800738c:	b2db      	uxtb	r3, r3
 800738e:	4619      	mov	r1, r3
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f985 	bl	80076a0 <USBD_CoreFindEP>
 8007396:	4603      	mov	r3, r0
 8007398:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	2bff      	cmp	r3, #255	; 0xff
 800739e:	d025      	beq.n	80073ec <USBD_LL_DataInStage+0x15a>
 80073a0:	7dfb      	ldrb	r3, [r7, #23]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d122      	bne.n	80073ec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ac:	b2db      	uxtb	r3, r3
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d11c      	bne.n	80073ec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80073b2:	7dfa      	ldrb	r2, [r7, #23]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	32ae      	adds	r2, #174	; 0xae
 80073b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073bc:	695b      	ldr	r3, [r3, #20]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d014      	beq.n	80073ec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80073c2:	7dfa      	ldrb	r2, [r7, #23]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80073ca:	7dfa      	ldrb	r2, [r7, #23]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	32ae      	adds	r2, #174	; 0xae
 80073d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	7afa      	ldrb	r2, [r7, #11]
 80073d8:	4611      	mov	r1, r2
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	4798      	blx	r3
 80073de:	4603      	mov	r3, r0
 80073e0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80073e2:	7dbb      	ldrb	r3, [r7, #22]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d001      	beq.n	80073ec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80073e8:	7dbb      	ldrb	r3, [r7, #22]
 80073ea:	e000      	b.n	80073ee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80073fe:	2300      	movs	r3, #0
 8007400:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2201      	movs	r2, #1
 8007406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800742e:	2b00      	cmp	r3, #0
 8007430:	d014      	beq.n	800745c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00e      	beq.n	800745c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6852      	ldr	r2, [r2, #4]
 800744a:	b2d2      	uxtb	r2, r2
 800744c:	4611      	mov	r1, r2
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	4798      	blx	r3
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007458:	2303      	movs	r3, #3
 800745a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800745c:	2340      	movs	r3, #64	; 0x40
 800745e:	2200      	movs	r2, #0
 8007460:	2100      	movs	r1, #0
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f001 fc16 	bl	8008c94 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2201      	movs	r2, #1
 800746c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2240      	movs	r2, #64	; 0x40
 8007474:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007478:	2340      	movs	r3, #64	; 0x40
 800747a:	2200      	movs	r2, #0
 800747c:	2180      	movs	r1, #128	; 0x80
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f001 fc08 	bl	8008c94 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2240      	movs	r2, #64	; 0x40
 800748e:	621a      	str	r2, [r3, #32]

  return ret;
 8007490:	7bfb      	ldrb	r3, [r7, #15]
}
 8007492:	4618      	mov	r0, r3
 8007494:	3710      	adds	r7, #16
 8007496:	46bd      	mov	sp, r7
 8007498:	bd80      	pop	{r7, pc}

0800749a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800749a:	b480      	push	{r7}
 800749c:	b083      	sub	sp, #12
 800749e:	af00      	add	r7, sp, #0
 80074a0:	6078      	str	r0, [r7, #4]
 80074a2:	460b      	mov	r3, r1
 80074a4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	78fa      	ldrb	r2, [r7, #3]
 80074aa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80074ac:	2300      	movs	r3, #0
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80074ba:	b480      	push	{r7}
 80074bc:	b083      	sub	sp, #12
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b04      	cmp	r3, #4
 80074cc:	d006      	beq.n	80074dc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2204      	movs	r2, #4
 80074e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	370c      	adds	r7, #12
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b083      	sub	sp, #12
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007500:	b2db      	uxtb	r3, r3
 8007502:	2b04      	cmp	r3, #4
 8007504:	d106      	bne.n	8007514 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800750c:	b2da      	uxtb	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	370c      	adds	r7, #12
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007522:	b580      	push	{r7, lr}
 8007524:	b082      	sub	sp, #8
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b03      	cmp	r3, #3
 8007534:	d110      	bne.n	8007558 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00b      	beq.n	8007558 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007546:	69db      	ldr	r3, [r3, #28]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007558:	2300      	movs	r3, #0
}
 800755a:	4618      	mov	r0, r3
 800755c:	3708      	adds	r7, #8
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}

08007562 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b082      	sub	sp, #8
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	32ae      	adds	r2, #174	; 0xae
 8007578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d101      	bne.n	8007584 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007580:	2303      	movs	r3, #3
 8007582:	e01c      	b.n	80075be <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800758a:	b2db      	uxtb	r3, r3
 800758c:	2b03      	cmp	r3, #3
 800758e:	d115      	bne.n	80075bc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	32ae      	adds	r2, #174	; 0xae
 800759a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d00b      	beq.n	80075bc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	32ae      	adds	r2, #174	; 0xae
 80075ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075b2:	6a1b      	ldr	r3, [r3, #32]
 80075b4:	78fa      	ldrb	r2, [r7, #3]
 80075b6:	4611      	mov	r1, r2
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3708      	adds	r7, #8
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}

080075c6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80075c6:	b580      	push	{r7, lr}
 80075c8:	b082      	sub	sp, #8
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	6078      	str	r0, [r7, #4]
 80075ce:	460b      	mov	r3, r1
 80075d0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	32ae      	adds	r2, #174	; 0xae
 80075dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e01c      	b.n	8007622 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d115      	bne.n	8007620 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	32ae      	adds	r2, #174	; 0xae
 80075fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00b      	beq.n	8007620 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	32ae      	adds	r2, #174	; 0xae
 8007612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007618:	78fa      	ldrb	r2, [r7, #3]
 800761a:	4611      	mov	r1, r2
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007620:	2300      	movs	r3, #0
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}

0800762a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b084      	sub	sp, #16
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2201      	movs	r2, #1
 8007650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00e      	beq.n	800767c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007664:	685b      	ldr	r3, [r3, #4]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	6852      	ldr	r2, [r2, #4]
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	4611      	mov	r1, r2
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	4798      	blx	r3
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007678:	2303      	movs	r3, #3
 800767a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800767c:	7bfb      	ldrb	r3, [r7, #15]
}
 800767e:	4618      	mov	r0, r3
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007686:	b480      	push	{r7}
 8007688:	b083      	sub	sp, #12
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	460b      	mov	r3, r1
 8007690:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007692:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007694:	4618      	mov	r0, r3
 8007696:	370c      	adds	r7, #12
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b083      	sub	sp, #12
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80076ac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80076ba:	b580      	push	{r7, lr}
 80076bc:	b086      	sub	sp, #24
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
 80076c2:	460b      	mov	r3, r1
 80076c4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80076ce:	2300      	movs	r3, #0
 80076d0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	885b      	ldrh	r3, [r3, #2]
 80076d6:	b29a      	uxth	r2, r3
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	429a      	cmp	r2, r3
 80076e0:	d920      	bls.n	8007724 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80076ea:	e013      	b.n	8007714 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80076ec:	f107 030a 	add.w	r3, r7, #10
 80076f0:	4619      	mov	r1, r3
 80076f2:	6978      	ldr	r0, [r7, #20]
 80076f4:	f000 f81b 	bl	800772e <USBD_GetNextDesc>
 80076f8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	785b      	ldrb	r3, [r3, #1]
 80076fe:	2b05      	cmp	r3, #5
 8007700:	d108      	bne.n	8007714 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	789b      	ldrb	r3, [r3, #2]
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	429a      	cmp	r2, r3
 800770e:	d008      	beq.n	8007722 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007710:	2300      	movs	r3, #0
 8007712:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	885b      	ldrh	r3, [r3, #2]
 8007718:	b29a      	uxth	r2, r3
 800771a:	897b      	ldrh	r3, [r7, #10]
 800771c:	429a      	cmp	r2, r3
 800771e:	d8e5      	bhi.n	80076ec <USBD_GetEpDesc+0x32>
 8007720:	e000      	b.n	8007724 <USBD_GetEpDesc+0x6a>
          break;
 8007722:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007724:	693b      	ldr	r3, [r7, #16]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3718      	adds	r7, #24
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800772e:	b480      	push	{r7}
 8007730:	b085      	sub	sp, #20
 8007732:	af00      	add	r7, sp, #0
 8007734:	6078      	str	r0, [r7, #4]
 8007736:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	881a      	ldrh	r2, [r3, #0]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	b29b      	uxth	r3, r3
 8007746:	4413      	add	r3, r2
 8007748:	b29a      	uxth	r2, r3
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	461a      	mov	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4413      	add	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800775a:	68fb      	ldr	r3, [r7, #12]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007768:	b480      	push	{r7}
 800776a:	b087      	sub	sp, #28
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	3301      	adds	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007786:	8a3b      	ldrh	r3, [r7, #16]
 8007788:	021b      	lsls	r3, r3, #8
 800778a:	b21a      	sxth	r2, r3
 800778c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007790:	4313      	orrs	r3, r2
 8007792:	b21b      	sxth	r3, r3
 8007794:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007796:	89fb      	ldrh	r3, [r7, #14]
}
 8007798:	4618      	mov	r0, r3
 800779a:	371c      	adds	r7, #28
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077ba:	2b40      	cmp	r3, #64	; 0x40
 80077bc:	d005      	beq.n	80077ca <USBD_StdDevReq+0x26>
 80077be:	2b40      	cmp	r3, #64	; 0x40
 80077c0:	d857      	bhi.n	8007872 <USBD_StdDevReq+0xce>
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00f      	beq.n	80077e6 <USBD_StdDevReq+0x42>
 80077c6:	2b20      	cmp	r3, #32
 80077c8:	d153      	bne.n	8007872 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	32ae      	adds	r2, #174	; 0xae
 80077d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	6839      	ldr	r1, [r7, #0]
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	4798      	blx	r3
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]
      break;
 80077e4:	e04a      	b.n	800787c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	785b      	ldrb	r3, [r3, #1]
 80077ea:	2b09      	cmp	r3, #9
 80077ec:	d83b      	bhi.n	8007866 <USBD_StdDevReq+0xc2>
 80077ee:	a201      	add	r2, pc, #4	; (adr r2, 80077f4 <USBD_StdDevReq+0x50>)
 80077f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f4:	08007849 	.word	0x08007849
 80077f8:	0800785d 	.word	0x0800785d
 80077fc:	08007867 	.word	0x08007867
 8007800:	08007853 	.word	0x08007853
 8007804:	08007867 	.word	0x08007867
 8007808:	08007827 	.word	0x08007827
 800780c:	0800781d 	.word	0x0800781d
 8007810:	08007867 	.word	0x08007867
 8007814:	0800783f 	.word	0x0800783f
 8007818:	08007831 	.word	0x08007831
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 fa3c 	bl	8007c9c <USBD_GetDescriptor>
          break;
 8007824:	e024      	b.n	8007870 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fbcb 	bl	8007fc4 <USBD_SetAddress>
          break;
 800782e:	e01f      	b.n	8007870 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007830:	6839      	ldr	r1, [r7, #0]
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f000 fc0a 	bl	800804c <USBD_SetConfig>
 8007838:	4603      	mov	r3, r0
 800783a:	73fb      	strb	r3, [r7, #15]
          break;
 800783c:	e018      	b.n	8007870 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800783e:	6839      	ldr	r1, [r7, #0]
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fcad 	bl	80081a0 <USBD_GetConfig>
          break;
 8007846:	e013      	b.n	8007870 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fcde 	bl	800820c <USBD_GetStatus>
          break;
 8007850:	e00e      	b.n	8007870 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007852:	6839      	ldr	r1, [r7, #0]
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fd0d 	bl	8008274 <USBD_SetFeature>
          break;
 800785a:	e009      	b.n	8007870 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800785c:	6839      	ldr	r1, [r7, #0]
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 fd31 	bl	80082c6 <USBD_ClrFeature>
          break;
 8007864:	e004      	b.n	8007870 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007866:	6839      	ldr	r1, [r7, #0]
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 fd88 	bl	800837e <USBD_CtlError>
          break;
 800786e:	bf00      	nop
      }
      break;
 8007870:	e004      	b.n	800787c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fd82 	bl	800837e <USBD_CtlError>
      break;
 800787a:	bf00      	nop
  }

  return ret;
 800787c:	7bfb      	ldrb	r3, [r7, #15]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop

08007888 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b084      	sub	sp, #16
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007892:	2300      	movs	r3, #0
 8007894:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800789e:	2b40      	cmp	r3, #64	; 0x40
 80078a0:	d005      	beq.n	80078ae <USBD_StdItfReq+0x26>
 80078a2:	2b40      	cmp	r3, #64	; 0x40
 80078a4:	d852      	bhi.n	800794c <USBD_StdItfReq+0xc4>
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <USBD_StdItfReq+0x26>
 80078aa:	2b20      	cmp	r3, #32
 80078ac:	d14e      	bne.n	800794c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	3b01      	subs	r3, #1
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d840      	bhi.n	800793e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	889b      	ldrh	r3, [r3, #4]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d836      	bhi.n	8007934 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	889b      	ldrh	r3, [r3, #4]
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	4619      	mov	r1, r3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7ff fed9 	bl	8007686 <USBD_CoreFindIF>
 80078d4:	4603      	mov	r3, r0
 80078d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	2bff      	cmp	r3, #255	; 0xff
 80078dc:	d01d      	beq.n	800791a <USBD_StdItfReq+0x92>
 80078de:	7bbb      	ldrb	r3, [r7, #14]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d11a      	bne.n	800791a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80078e4:	7bba      	ldrb	r2, [r7, #14]
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	32ae      	adds	r2, #174	; 0xae
 80078ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00f      	beq.n	8007914 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80078f4:	7bba      	ldrb	r2, [r7, #14]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80078fc:	7bba      	ldrb	r2, [r7, #14]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	32ae      	adds	r2, #174	; 0xae
 8007902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007906:	689b      	ldr	r3, [r3, #8]
 8007908:	6839      	ldr	r1, [r7, #0]
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	4798      	blx	r3
 800790e:	4603      	mov	r3, r0
 8007910:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007912:	e004      	b.n	800791e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007914:	2303      	movs	r3, #3
 8007916:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007918:	e001      	b.n	800791e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800791a:	2303      	movs	r3, #3
 800791c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	88db      	ldrh	r3, [r3, #6]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d110      	bne.n	8007948 <USBD_StdItfReq+0xc0>
 8007926:	7bfb      	ldrb	r3, [r7, #15]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d10d      	bne.n	8007948 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 fdf1 	bl	8008514 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007932:	e009      	b.n	8007948 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007934:	6839      	ldr	r1, [r7, #0]
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fd21 	bl	800837e <USBD_CtlError>
          break;
 800793c:	e004      	b.n	8007948 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800793e:	6839      	ldr	r1, [r7, #0]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 fd1c 	bl	800837e <USBD_CtlError>
          break;
 8007946:	e000      	b.n	800794a <USBD_StdItfReq+0xc2>
          break;
 8007948:	bf00      	nop
      }
      break;
 800794a:	e004      	b.n	8007956 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fd15 	bl	800837e <USBD_CtlError>
      break;
 8007954:	bf00      	nop
  }

  return ret;
 8007956:	7bfb      	ldrb	r3, [r7, #15]
}
 8007958:	4618      	mov	r0, r3
 800795a:	3710      	adds	r7, #16
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800796a:	2300      	movs	r3, #0
 800796c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	889b      	ldrh	r3, [r3, #4]
 8007972:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	781b      	ldrb	r3, [r3, #0]
 8007978:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800797c:	2b40      	cmp	r3, #64	; 0x40
 800797e:	d007      	beq.n	8007990 <USBD_StdEPReq+0x30>
 8007980:	2b40      	cmp	r3, #64	; 0x40
 8007982:	f200 817f 	bhi.w	8007c84 <USBD_StdEPReq+0x324>
 8007986:	2b00      	cmp	r3, #0
 8007988:	d02a      	beq.n	80079e0 <USBD_StdEPReq+0x80>
 800798a:	2b20      	cmp	r3, #32
 800798c:	f040 817a 	bne.w	8007c84 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007990:	7bbb      	ldrb	r3, [r7, #14]
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f7ff fe83 	bl	80076a0 <USBD_CoreFindEP>
 800799a:	4603      	mov	r3, r0
 800799c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800799e:	7b7b      	ldrb	r3, [r7, #13]
 80079a0:	2bff      	cmp	r3, #255	; 0xff
 80079a2:	f000 8174 	beq.w	8007c8e <USBD_StdEPReq+0x32e>
 80079a6:	7b7b      	ldrb	r3, [r7, #13]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f040 8170 	bne.w	8007c8e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80079ae:	7b7a      	ldrb	r2, [r7, #13]
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80079b6:	7b7a      	ldrb	r2, [r7, #13]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	32ae      	adds	r2, #174	; 0xae
 80079bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	f000 8163 	beq.w	8007c8e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80079c8:	7b7a      	ldrb	r2, [r7, #13]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	32ae      	adds	r2, #174	; 0xae
 80079ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	6839      	ldr	r1, [r7, #0]
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	4798      	blx	r3
 80079da:	4603      	mov	r3, r0
 80079dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079de:	e156      	b.n	8007c8e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	785b      	ldrb	r3, [r3, #1]
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d008      	beq.n	80079fa <USBD_StdEPReq+0x9a>
 80079e8:	2b03      	cmp	r3, #3
 80079ea:	f300 8145 	bgt.w	8007c78 <USBD_StdEPReq+0x318>
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 809b 	beq.w	8007b2a <USBD_StdEPReq+0x1ca>
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d03c      	beq.n	8007a72 <USBD_StdEPReq+0x112>
 80079f8:	e13e      	b.n	8007c78 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d002      	beq.n	8007a0c <USBD_StdEPReq+0xac>
 8007a06:	2b03      	cmp	r3, #3
 8007a08:	d016      	beq.n	8007a38 <USBD_StdEPReq+0xd8>
 8007a0a:	e02c      	b.n	8007a66 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a0c:	7bbb      	ldrb	r3, [r7, #14]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00d      	beq.n	8007a2e <USBD_StdEPReq+0xce>
 8007a12:	7bbb      	ldrb	r3, [r7, #14]
 8007a14:	2b80      	cmp	r3, #128	; 0x80
 8007a16:	d00a      	beq.n	8007a2e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a18:	7bbb      	ldrb	r3, [r7, #14]
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 f9ad 	bl	8008d7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a22:	2180      	movs	r1, #128	; 0x80
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 f9a9 	bl	8008d7c <USBD_LL_StallEP>
 8007a2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a2c:	e020      	b.n	8007a70 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007a2e:	6839      	ldr	r1, [r7, #0]
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fca4 	bl	800837e <USBD_CtlError>
              break;
 8007a36:	e01b      	b.n	8007a70 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	885b      	ldrh	r3, [r3, #2]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10e      	bne.n	8007a5e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00b      	beq.n	8007a5e <USBD_StdEPReq+0xfe>
 8007a46:	7bbb      	ldrb	r3, [r7, #14]
 8007a48:	2b80      	cmp	r3, #128	; 0x80
 8007a4a:	d008      	beq.n	8007a5e <USBD_StdEPReq+0xfe>
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	88db      	ldrh	r3, [r3, #6]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d104      	bne.n	8007a5e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a54:	7bbb      	ldrb	r3, [r7, #14]
 8007a56:	4619      	mov	r1, r3
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f001 f98f 	bl	8008d7c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fd58 	bl	8008514 <USBD_CtlSendStatus>

              break;
 8007a64:	e004      	b.n	8007a70 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fc88 	bl	800837e <USBD_CtlError>
              break;
 8007a6e:	bf00      	nop
          }
          break;
 8007a70:	e107      	b.n	8007c82 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d002      	beq.n	8007a84 <USBD_StdEPReq+0x124>
 8007a7e:	2b03      	cmp	r3, #3
 8007a80:	d016      	beq.n	8007ab0 <USBD_StdEPReq+0x150>
 8007a82:	e04b      	b.n	8007b1c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00d      	beq.n	8007aa6 <USBD_StdEPReq+0x146>
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b80      	cmp	r3, #128	; 0x80
 8007a8e:	d00a      	beq.n	8007aa6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007a90:	7bbb      	ldrb	r3, [r7, #14]
 8007a92:	4619      	mov	r1, r3
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f001 f971 	bl	8008d7c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a9a:	2180      	movs	r1, #128	; 0x80
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f001 f96d 	bl	8008d7c <USBD_LL_StallEP>
 8007aa2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007aa4:	e040      	b.n	8007b28 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fc68 	bl	800837e <USBD_CtlError>
              break;
 8007aae:	e03b      	b.n	8007b28 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	885b      	ldrh	r3, [r3, #2]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d136      	bne.n	8007b26 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ab8:	7bbb      	ldrb	r3, [r7, #14]
 8007aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d004      	beq.n	8007acc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007ac2:	7bbb      	ldrb	r3, [r7, #14]
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f001 f98e 	bl	8008de8 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007acc:	6878      	ldr	r0, [r7, #4]
 8007ace:	f000 fd21 	bl	8008514 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ad2:	7bbb      	ldrb	r3, [r7, #14]
 8007ad4:	4619      	mov	r1, r3
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f7ff fde2 	bl	80076a0 <USBD_CoreFindEP>
 8007adc:	4603      	mov	r3, r0
 8007ade:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ae0:	7b7b      	ldrb	r3, [r7, #13]
 8007ae2:	2bff      	cmp	r3, #255	; 0xff
 8007ae4:	d01f      	beq.n	8007b26 <USBD_StdEPReq+0x1c6>
 8007ae6:	7b7b      	ldrb	r3, [r7, #13]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d11c      	bne.n	8007b26 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007aec:	7b7a      	ldrb	r2, [r7, #13]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007af4:	7b7a      	ldrb	r2, [r7, #13]
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	32ae      	adds	r2, #174	; 0xae
 8007afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d010      	beq.n	8007b26 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007b04:	7b7a      	ldrb	r2, [r7, #13]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	32ae      	adds	r2, #174	; 0xae
 8007b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0e:	689b      	ldr	r3, [r3, #8]
 8007b10:	6839      	ldr	r1, [r7, #0]
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	4798      	blx	r3
 8007b16:	4603      	mov	r3, r0
 8007b18:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007b1a:	e004      	b.n	8007b26 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007b1c:	6839      	ldr	r1, [r7, #0]
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f000 fc2d 	bl	800837e <USBD_CtlError>
              break;
 8007b24:	e000      	b.n	8007b28 <USBD_StdEPReq+0x1c8>
              break;
 8007b26:	bf00      	nop
          }
          break;
 8007b28:	e0ab      	b.n	8007c82 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d002      	beq.n	8007b3c <USBD_StdEPReq+0x1dc>
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	d032      	beq.n	8007ba0 <USBD_StdEPReq+0x240>
 8007b3a:	e097      	b.n	8007c6c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007b3c:	7bbb      	ldrb	r3, [r7, #14]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d007      	beq.n	8007b52 <USBD_StdEPReq+0x1f2>
 8007b42:	7bbb      	ldrb	r3, [r7, #14]
 8007b44:	2b80      	cmp	r3, #128	; 0x80
 8007b46:	d004      	beq.n	8007b52 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fc17 	bl	800837e <USBD_CtlError>
                break;
 8007b50:	e091      	b.n	8007c76 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	da0b      	bge.n	8007b72 <USBD_StdEPReq+0x212>
 8007b5a:	7bbb      	ldrb	r3, [r7, #14]
 8007b5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007b60:	4613      	mov	r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	4413      	add	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	3310      	adds	r3, #16
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3304      	adds	r3, #4
 8007b70:	e00b      	b.n	8007b8a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b78:	4613      	mov	r3, r2
 8007b7a:	009b      	lsls	r3, r3, #2
 8007b7c:	4413      	add	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007b84:	687a      	ldr	r2, [r7, #4]
 8007b86:	4413      	add	r3, r2
 8007b88:	3304      	adds	r3, #4
 8007b8a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	2202      	movs	r2, #2
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f000 fc61 	bl	8008460 <USBD_CtlSendData>
              break;
 8007b9e:	e06a      	b.n	8007c76 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007ba0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	da11      	bge.n	8007bcc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007ba8:	7bbb      	ldrb	r3, [r7, #14]
 8007baa:	f003 020f 	and.w	r2, r3, #15
 8007bae:	6879      	ldr	r1, [r7, #4]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	4413      	add	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	440b      	add	r3, r1
 8007bba:	3324      	adds	r3, #36	; 0x24
 8007bbc:	881b      	ldrh	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d117      	bne.n	8007bf2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007bc2:	6839      	ldr	r1, [r7, #0]
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f000 fbda 	bl	800837e <USBD_CtlError>
                  break;
 8007bca:	e054      	b.n	8007c76 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007bcc:	7bbb      	ldrb	r3, [r7, #14]
 8007bce:	f003 020f 	and.w	r2, r3, #15
 8007bd2:	6879      	ldr	r1, [r7, #4]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	009b      	lsls	r3, r3, #2
 8007bdc:	440b      	add	r3, r1
 8007bde:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007be2:	881b      	ldrh	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d104      	bne.n	8007bf2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fbc7 	bl	800837e <USBD_CtlError>
                  break;
 8007bf0:	e041      	b.n	8007c76 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007bf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	da0b      	bge.n	8007c12 <USBD_StdEPReq+0x2b2>
 8007bfa:	7bbb      	ldrb	r3, [r7, #14]
 8007bfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	3310      	adds	r3, #16
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	3304      	adds	r3, #4
 8007c10:	e00b      	b.n	8007c2a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c24:	687a      	ldr	r2, [r7, #4]
 8007c26:	4413      	add	r3, r2
 8007c28:	3304      	adds	r3, #4
 8007c2a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d002      	beq.n	8007c38 <USBD_StdEPReq+0x2d8>
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	2b80      	cmp	r3, #128	; 0x80
 8007c36:	d103      	bne.n	8007c40 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e00e      	b.n	8007c5e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007c40:	7bbb      	ldrb	r3, [r7, #14]
 8007c42:	4619      	mov	r1, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f001 f905 	bl	8008e54 <USBD_LL_IsStallEP>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2201      	movs	r2, #1
 8007c54:	601a      	str	r2, [r3, #0]
 8007c56:	e002      	b.n	8007c5e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2200      	movs	r2, #0
 8007c5c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2202      	movs	r2, #2
 8007c62:	4619      	mov	r1, r3
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 fbfb 	bl	8008460 <USBD_CtlSendData>
              break;
 8007c6a:	e004      	b.n	8007c76 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 fb85 	bl	800837e <USBD_CtlError>
              break;
 8007c74:	bf00      	nop
          }
          break;
 8007c76:	e004      	b.n	8007c82 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007c78:	6839      	ldr	r1, [r7, #0]
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f000 fb7f 	bl	800837e <USBD_CtlError>
          break;
 8007c80:	bf00      	nop
      }
      break;
 8007c82:	e005      	b.n	8007c90 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007c84:	6839      	ldr	r1, [r7, #0]
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fb79 	bl	800837e <USBD_CtlError>
      break;
 8007c8c:	e000      	b.n	8007c90 <USBD_StdEPReq+0x330>
      break;
 8007c8e:	bf00      	nop
  }

  return ret;
 8007c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}
	...

08007c9c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	885b      	ldrh	r3, [r3, #2]
 8007cb6:	0a1b      	lsrs	r3, r3, #8
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	2b0e      	cmp	r3, #14
 8007cbe:	f200 8152 	bhi.w	8007f66 <USBD_GetDescriptor+0x2ca>
 8007cc2:	a201      	add	r2, pc, #4	; (adr r2, 8007cc8 <USBD_GetDescriptor+0x2c>)
 8007cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cc8:	08007d39 	.word	0x08007d39
 8007ccc:	08007d51 	.word	0x08007d51
 8007cd0:	08007d91 	.word	0x08007d91
 8007cd4:	08007f67 	.word	0x08007f67
 8007cd8:	08007f67 	.word	0x08007f67
 8007cdc:	08007f07 	.word	0x08007f07
 8007ce0:	08007f33 	.word	0x08007f33
 8007ce4:	08007f67 	.word	0x08007f67
 8007ce8:	08007f67 	.word	0x08007f67
 8007cec:	08007f67 	.word	0x08007f67
 8007cf0:	08007f67 	.word	0x08007f67
 8007cf4:	08007f67 	.word	0x08007f67
 8007cf8:	08007f67 	.word	0x08007f67
 8007cfc:	08007f67 	.word	0x08007f67
 8007d00:	08007d05 	.word	0x08007d05
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d0a:	69db      	ldr	r3, [r3, #28]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d00b      	beq.n	8007d28 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d16:	69db      	ldr	r3, [r3, #28]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	7c12      	ldrb	r2, [r2, #16]
 8007d1c:	f107 0108 	add.w	r1, r7, #8
 8007d20:	4610      	mov	r0, r2
 8007d22:	4798      	blx	r3
 8007d24:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d26:	e126      	b.n	8007f76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007d28:	6839      	ldr	r1, [r7, #0]
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fb27 	bl	800837e <USBD_CtlError>
        err++;
 8007d30:	7afb      	ldrb	r3, [r7, #11]
 8007d32:	3301      	adds	r3, #1
 8007d34:	72fb      	strb	r3, [r7, #11]
      break;
 8007d36:	e11e      	b.n	8007f76 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	687a      	ldr	r2, [r7, #4]
 8007d42:	7c12      	ldrb	r2, [r2, #16]
 8007d44:	f107 0108 	add.w	r1, r7, #8
 8007d48:	4610      	mov	r0, r2
 8007d4a:	4798      	blx	r3
 8007d4c:	60f8      	str	r0, [r7, #12]
      break;
 8007d4e:	e112      	b.n	8007f76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	7c1b      	ldrb	r3, [r3, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d10d      	bne.n	8007d74 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d60:	f107 0208 	add.w	r2, r7, #8
 8007d64:	4610      	mov	r0, r2
 8007d66:	4798      	blx	r3
 8007d68:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	2202      	movs	r2, #2
 8007d70:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007d72:	e100      	b.n	8007f76 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	f107 0208 	add.w	r2, r7, #8
 8007d80:	4610      	mov	r0, r2
 8007d82:	4798      	blx	r3
 8007d84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	701a      	strb	r2, [r3, #0]
      break;
 8007d8e:	e0f2      	b.n	8007f76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	885b      	ldrh	r3, [r3, #2]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b05      	cmp	r3, #5
 8007d98:	f200 80ac 	bhi.w	8007ef4 <USBD_GetDescriptor+0x258>
 8007d9c:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <USBD_GetDescriptor+0x108>)
 8007d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da2:	bf00      	nop
 8007da4:	08007dbd 	.word	0x08007dbd
 8007da8:	08007df1 	.word	0x08007df1
 8007dac:	08007e25 	.word	0x08007e25
 8007db0:	08007e59 	.word	0x08007e59
 8007db4:	08007e8d 	.word	0x08007e8d
 8007db8:	08007ec1 	.word	0x08007ec1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00b      	beq.n	8007de0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	7c12      	ldrb	r2, [r2, #16]
 8007dd4:	f107 0108 	add.w	r1, r7, #8
 8007dd8:	4610      	mov	r0, r2
 8007dda:	4798      	blx	r3
 8007ddc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dde:	e091      	b.n	8007f04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007de0:	6839      	ldr	r1, [r7, #0]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 facb 	bl	800837e <USBD_CtlError>
            err++;
 8007de8:	7afb      	ldrb	r3, [r7, #11]
 8007dea:	3301      	adds	r3, #1
 8007dec:	72fb      	strb	r3, [r7, #11]
          break;
 8007dee:	e089      	b.n	8007f04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d00b      	beq.n	8007e14 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	7c12      	ldrb	r2, [r2, #16]
 8007e08:	f107 0108 	add.w	r1, r7, #8
 8007e0c:	4610      	mov	r0, r2
 8007e0e:	4798      	blx	r3
 8007e10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e12:	e077      	b.n	8007f04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e14:	6839      	ldr	r1, [r7, #0]
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f000 fab1 	bl	800837e <USBD_CtlError>
            err++;
 8007e1c:	7afb      	ldrb	r3, [r7, #11]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	72fb      	strb	r3, [r7, #11]
          break;
 8007e22:	e06f      	b.n	8007f04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00b      	beq.n	8007e48 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	7c12      	ldrb	r2, [r2, #16]
 8007e3c:	f107 0108 	add.w	r1, r7, #8
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
 8007e44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e46:	e05d      	b.n	8007f04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f000 fa97 	bl	800837e <USBD_CtlError>
            err++;
 8007e50:	7afb      	ldrb	r3, [r7, #11]
 8007e52:	3301      	adds	r3, #1
 8007e54:	72fb      	strb	r3, [r7, #11]
          break;
 8007e56:	e055      	b.n	8007f04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00b      	beq.n	8007e7c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	687a      	ldr	r2, [r7, #4]
 8007e6e:	7c12      	ldrb	r2, [r2, #16]
 8007e70:	f107 0108 	add.w	r1, r7, #8
 8007e74:	4610      	mov	r0, r2
 8007e76:	4798      	blx	r3
 8007e78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007e7a:	e043      	b.n	8007f04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007e7c:	6839      	ldr	r1, [r7, #0]
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 fa7d 	bl	800837e <USBD_CtlError>
            err++;
 8007e84:	7afb      	ldrb	r3, [r7, #11]
 8007e86:	3301      	adds	r3, #1
 8007e88:	72fb      	strb	r3, [r7, #11]
          break;
 8007e8a:	e03b      	b.n	8007f04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e92:	695b      	ldr	r3, [r3, #20]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d00b      	beq.n	8007eb0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007e9e:	695b      	ldr	r3, [r3, #20]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	7c12      	ldrb	r2, [r2, #16]
 8007ea4:	f107 0108 	add.w	r1, r7, #8
 8007ea8:	4610      	mov	r0, r2
 8007eaa:	4798      	blx	r3
 8007eac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007eae:	e029      	b.n	8007f04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007eb0:	6839      	ldr	r1, [r7, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fa63 	bl	800837e <USBD_CtlError>
            err++;
 8007eb8:	7afb      	ldrb	r3, [r7, #11]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	72fb      	strb	r3, [r7, #11]
          break;
 8007ebe:	e021      	b.n	8007f04 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00b      	beq.n	8007ee4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	7c12      	ldrb	r2, [r2, #16]
 8007ed8:	f107 0108 	add.w	r1, r7, #8
 8007edc:	4610      	mov	r0, r2
 8007ede:	4798      	blx	r3
 8007ee0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ee2:	e00f      	b.n	8007f04 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8007ee4:	6839      	ldr	r1, [r7, #0]
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fa49 	bl	800837e <USBD_CtlError>
            err++;
 8007eec:	7afb      	ldrb	r3, [r7, #11]
 8007eee:	3301      	adds	r3, #1
 8007ef0:	72fb      	strb	r3, [r7, #11]
          break;
 8007ef2:	e007      	b.n	8007f04 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ef4:	6839      	ldr	r1, [r7, #0]
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa41 	bl	800837e <USBD_CtlError>
          err++;
 8007efc:	7afb      	ldrb	r3, [r7, #11]
 8007efe:	3301      	adds	r3, #1
 8007f00:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007f02:	bf00      	nop
      }
      break;
 8007f04:	e037      	b.n	8007f76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	7c1b      	ldrb	r3, [r3, #16]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d109      	bne.n	8007f22 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f16:	f107 0208 	add.w	r2, r7, #8
 8007f1a:	4610      	mov	r0, r2
 8007f1c:	4798      	blx	r3
 8007f1e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f20:	e029      	b.n	8007f76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f22:	6839      	ldr	r1, [r7, #0]
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fa2a 	bl	800837e <USBD_CtlError>
        err++;
 8007f2a:	7afb      	ldrb	r3, [r7, #11]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	72fb      	strb	r3, [r7, #11]
      break;
 8007f30:	e021      	b.n	8007f76 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	7c1b      	ldrb	r3, [r3, #16]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d10d      	bne.n	8007f56 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f42:	f107 0208 	add.w	r2, r7, #8
 8007f46:	4610      	mov	r0, r2
 8007f48:	4798      	blx	r3
 8007f4a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	3301      	adds	r3, #1
 8007f50:	2207      	movs	r2, #7
 8007f52:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007f54:	e00f      	b.n	8007f76 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8007f56:	6839      	ldr	r1, [r7, #0]
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fa10 	bl	800837e <USBD_CtlError>
        err++;
 8007f5e:	7afb      	ldrb	r3, [r7, #11]
 8007f60:	3301      	adds	r3, #1
 8007f62:	72fb      	strb	r3, [r7, #11]
      break;
 8007f64:	e007      	b.n	8007f76 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fa08 	bl	800837e <USBD_CtlError>
      err++;
 8007f6e:	7afb      	ldrb	r3, [r7, #11]
 8007f70:	3301      	adds	r3, #1
 8007f72:	72fb      	strb	r3, [r7, #11]
      break;
 8007f74:	bf00      	nop
  }

  if (err != 0U)
 8007f76:	7afb      	ldrb	r3, [r7, #11]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d11e      	bne.n	8007fba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	88db      	ldrh	r3, [r3, #6]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d016      	beq.n	8007fb2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8007f84:	893b      	ldrh	r3, [r7, #8]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00e      	beq.n	8007fa8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	88da      	ldrh	r2, [r3, #6]
 8007f8e:	893b      	ldrh	r3, [r7, #8]
 8007f90:	4293      	cmp	r3, r2
 8007f92:	bf28      	it	cs
 8007f94:	4613      	movcs	r3, r2
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007f9a:	893b      	ldrh	r3, [r7, #8]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	68f9      	ldr	r1, [r7, #12]
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 fa5d 	bl	8008460 <USBD_CtlSendData>
 8007fa6:	e009      	b.n	8007fbc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007fa8:	6839      	ldr	r1, [r7, #0]
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f9e7 	bl	800837e <USBD_CtlError>
 8007fb0:	e004      	b.n	8007fbc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f000 faae 	bl	8008514 <USBD_CtlSendStatus>
 8007fb8:	e000      	b.n	8007fbc <USBD_GetDescriptor+0x320>
    return;
 8007fba:	bf00      	nop
  }
}
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	bf00      	nop

08007fc4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
 8007fcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	889b      	ldrh	r3, [r3, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d131      	bne.n	800803a <USBD_SetAddress+0x76>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	88db      	ldrh	r3, [r3, #6]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d12d      	bne.n	800803a <USBD_SetAddress+0x76>
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	885b      	ldrh	r3, [r3, #2]
 8007fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8007fe4:	d829      	bhi.n	800803a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	885b      	ldrh	r3, [r3, #2]
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ff0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d104      	bne.n	8008008 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007ffe:	6839      	ldr	r1, [r7, #0]
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f000 f9bc 	bl	800837e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008006:	e01d      	b.n	8008044 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	7bfa      	ldrb	r2, [r7, #15]
 800800c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008010:	7bfb      	ldrb	r3, [r7, #15]
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f000 ff49 	bl	8008eac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 fa7a 	bl	8008514 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008020:	7bfb      	ldrb	r3, [r7, #15]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d004      	beq.n	8008030 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2202      	movs	r2, #2
 800802a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800802e:	e009      	b.n	8008044 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008038:	e004      	b.n	8008044 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800803a:	6839      	ldr	r1, [r7, #0]
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 f99e 	bl	800837e <USBD_CtlError>
  }
}
 8008042:	bf00      	nop
 8008044:	bf00      	nop
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008056:	2300      	movs	r3, #0
 8008058:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	885b      	ldrh	r3, [r3, #2]
 800805e:	b2da      	uxtb	r2, r3
 8008060:	4b4e      	ldr	r3, [pc, #312]	; (800819c <USBD_SetConfig+0x150>)
 8008062:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008064:	4b4d      	ldr	r3, [pc, #308]	; (800819c <USBD_SetConfig+0x150>)
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d905      	bls.n	8008078 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800806c:	6839      	ldr	r1, [r7, #0]
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f985 	bl	800837e <USBD_CtlError>
    return USBD_FAIL;
 8008074:	2303      	movs	r3, #3
 8008076:	e08c      	b.n	8008192 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b02      	cmp	r3, #2
 8008082:	d002      	beq.n	800808a <USBD_SetConfig+0x3e>
 8008084:	2b03      	cmp	r3, #3
 8008086:	d029      	beq.n	80080dc <USBD_SetConfig+0x90>
 8008088:	e075      	b.n	8008176 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800808a:	4b44      	ldr	r3, [pc, #272]	; (800819c <USBD_SetConfig+0x150>)
 800808c:	781b      	ldrb	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d020      	beq.n	80080d4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008092:	4b42      	ldr	r3, [pc, #264]	; (800819c <USBD_SetConfig+0x150>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800809c:	4b3f      	ldr	r3, [pc, #252]	; (800819c <USBD_SetConfig+0x150>)
 800809e:	781b      	ldrb	r3, [r3, #0]
 80080a0:	4619      	mov	r1, r3
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7fe ffb7 	bl	8007016 <USBD_SetClassConfig>
 80080a8:	4603      	mov	r3, r0
 80080aa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80080ac:	7bfb      	ldrb	r3, [r7, #15]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d008      	beq.n	80080c4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80080b2:	6839      	ldr	r1, [r7, #0]
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f962 	bl	800837e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2202      	movs	r2, #2
 80080be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80080c2:	e065      	b.n	8008190 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 fa25 	bl	8008514 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2203      	movs	r2, #3
 80080ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80080d2:	e05d      	b.n	8008190 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 fa1d 	bl	8008514 <USBD_CtlSendStatus>
      break;
 80080da:	e059      	b.n	8008190 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080dc:	4b2f      	ldr	r3, [pc, #188]	; (800819c <USBD_SetConfig+0x150>)
 80080de:	781b      	ldrb	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d112      	bne.n	800810a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2202      	movs	r2, #2
 80080e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80080ec:	4b2b      	ldr	r3, [pc, #172]	; (800819c <USBD_SetConfig+0x150>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	461a      	mov	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80080f6:	4b29      	ldr	r3, [pc, #164]	; (800819c <USBD_SetConfig+0x150>)
 80080f8:	781b      	ldrb	r3, [r3, #0]
 80080fa:	4619      	mov	r1, r3
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f7fe ffa6 	bl	800704e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fa06 	bl	8008514 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008108:	e042      	b.n	8008190 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800810a:	4b24      	ldr	r3, [pc, #144]	; (800819c <USBD_SetConfig+0x150>)
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	429a      	cmp	r2, r3
 8008116:	d02a      	beq.n	800816e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	b2db      	uxtb	r3, r3
 800811e:	4619      	mov	r1, r3
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f7fe ff94 	bl	800704e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008126:	4b1d      	ldr	r3, [pc, #116]	; (800819c <USBD_SetConfig+0x150>)
 8008128:	781b      	ldrb	r3, [r3, #0]
 800812a:	461a      	mov	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008130:	4b1a      	ldr	r3, [pc, #104]	; (800819c <USBD_SetConfig+0x150>)
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7fe ff6d 	bl	8007016 <USBD_SetClassConfig>
 800813c:	4603      	mov	r3, r0
 800813e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008140:	7bfb      	ldrb	r3, [r7, #15]
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00f      	beq.n	8008166 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008146:	6839      	ldr	r1, [r7, #0]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 f918 	bl	800837e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	b2db      	uxtb	r3, r3
 8008154:	4619      	mov	r1, r3
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f7fe ff79 	bl	800704e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2202      	movs	r2, #2
 8008160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008164:	e014      	b.n	8008190 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f9d4 	bl	8008514 <USBD_CtlSendStatus>
      break;
 800816c:	e010      	b.n	8008190 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f000 f9d0 	bl	8008514 <USBD_CtlSendStatus>
      break;
 8008174:	e00c      	b.n	8008190 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008176:	6839      	ldr	r1, [r7, #0]
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f900 	bl	800837e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800817e:	4b07      	ldr	r3, [pc, #28]	; (800819c <USBD_SetConfig+0x150>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7fe ff62 	bl	800704e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800818a:	2303      	movs	r3, #3
 800818c:	73fb      	strb	r3, [r7, #15]
      break;
 800818e:	bf00      	nop
  }

  return ret;
 8008190:	7bfb      	ldrb	r3, [r7, #15]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	200003a4 	.word	0x200003a4

080081a0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b082      	sub	sp, #8
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	88db      	ldrh	r3, [r3, #6]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d004      	beq.n	80081bc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80081b2:	6839      	ldr	r1, [r7, #0]
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f8e2 	bl	800837e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80081ba:	e023      	b.n	8008204 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b02      	cmp	r3, #2
 80081c6:	dc02      	bgt.n	80081ce <USBD_GetConfig+0x2e>
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	dc03      	bgt.n	80081d4 <USBD_GetConfig+0x34>
 80081cc:	e015      	b.n	80081fa <USBD_GetConfig+0x5a>
 80081ce:	2b03      	cmp	r3, #3
 80081d0:	d00b      	beq.n	80081ea <USBD_GetConfig+0x4a>
 80081d2:	e012      	b.n	80081fa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2200      	movs	r2, #0
 80081d8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	3308      	adds	r3, #8
 80081de:	2201      	movs	r2, #1
 80081e0:	4619      	mov	r1, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f93c 	bl	8008460 <USBD_CtlSendData>
        break;
 80081e8:	e00c      	b.n	8008204 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3304      	adds	r3, #4
 80081ee:	2201      	movs	r2, #1
 80081f0:	4619      	mov	r1, r3
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f934 	bl	8008460 <USBD_CtlSendData>
        break;
 80081f8:	e004      	b.n	8008204 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f8be 	bl	800837e <USBD_CtlError>
        break;
 8008202:	bf00      	nop
}
 8008204:	bf00      	nop
 8008206:	3708      	adds	r7, #8
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
 8008214:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800821c:	b2db      	uxtb	r3, r3
 800821e:	3b01      	subs	r3, #1
 8008220:	2b02      	cmp	r3, #2
 8008222:	d81e      	bhi.n	8008262 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	88db      	ldrh	r3, [r3, #6]
 8008228:	2b02      	cmp	r3, #2
 800822a:	d004      	beq.n	8008236 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800822c:	6839      	ldr	r1, [r7, #0]
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f8a5 	bl	800837e <USBD_CtlError>
        break;
 8008234:	e01a      	b.n	800826c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008242:	2b00      	cmp	r3, #0
 8008244:	d005      	beq.n	8008252 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	68db      	ldr	r3, [r3, #12]
 800824a:	f043 0202 	orr.w	r2, r3, #2
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	330c      	adds	r3, #12
 8008256:	2202      	movs	r2, #2
 8008258:	4619      	mov	r1, r3
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f900 	bl	8008460 <USBD_CtlSendData>
      break;
 8008260:	e004      	b.n	800826c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008262:	6839      	ldr	r1, [r7, #0]
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f000 f88a 	bl	800837e <USBD_CtlError>
      break;
 800826a:	bf00      	nop
  }
}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b082      	sub	sp, #8
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	885b      	ldrh	r3, [r3, #2]
 8008282:	2b01      	cmp	r3, #1
 8008284:	d107      	bne.n	8008296 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2201      	movs	r2, #1
 800828a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f940 	bl	8008514 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008294:	e013      	b.n	80082be <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	885b      	ldrh	r3, [r3, #2]
 800829a:	2b02      	cmp	r3, #2
 800829c:	d10b      	bne.n	80082b6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	889b      	ldrh	r3, [r3, #4]
 80082a2:	0a1b      	lsrs	r3, r3, #8
 80082a4:	b29b      	uxth	r3, r3
 80082a6:	b2da      	uxtb	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f000 f930 	bl	8008514 <USBD_CtlSendStatus>
}
 80082b4:	e003      	b.n	80082be <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f000 f860 	bl	800837e <USBD_CtlError>
}
 80082be:	bf00      	nop
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}

080082c6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082c6:	b580      	push	{r7, lr}
 80082c8:	b082      	sub	sp, #8
 80082ca:	af00      	add	r7, sp, #0
 80082cc:	6078      	str	r0, [r7, #4]
 80082ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	3b01      	subs	r3, #1
 80082da:	2b02      	cmp	r3, #2
 80082dc:	d80b      	bhi.n	80082f6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	885b      	ldrh	r3, [r3, #2]
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d10c      	bne.n	8008300 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f910 	bl	8008514 <USBD_CtlSendStatus>
      }
      break;
 80082f4:	e004      	b.n	8008300 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80082f6:	6839      	ldr	r1, [r7, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f840 	bl	800837e <USBD_CtlError>
      break;
 80082fe:	e000      	b.n	8008302 <USBD_ClrFeature+0x3c>
      break;
 8008300:	bf00      	nop
  }
}
 8008302:	bf00      	nop
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	781a      	ldrb	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	3301      	adds	r3, #1
 8008324:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	781a      	ldrb	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	3301      	adds	r3, #1
 8008332:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	f7ff fa17 	bl	8007768 <SWAPBYTE>
 800833a:	4603      	mov	r3, r0
 800833c:	461a      	mov	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3301      	adds	r3, #1
 8008346:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	3301      	adds	r3, #1
 800834c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f7ff fa0a 	bl	8007768 <SWAPBYTE>
 8008354:	4603      	mov	r3, r0
 8008356:	461a      	mov	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3301      	adds	r3, #1
 8008360:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3301      	adds	r3, #1
 8008366:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff f9fd 	bl	8007768 <SWAPBYTE>
 800836e:	4603      	mov	r3, r0
 8008370:	461a      	mov	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	80da      	strh	r2, [r3, #6]
}
 8008376:	bf00      	nop
 8008378:	3710      	adds	r7, #16
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800837e:	b580      	push	{r7, lr}
 8008380:	b082      	sub	sp, #8
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
 8008386:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008388:	2180      	movs	r1, #128	; 0x80
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f000 fcf6 	bl	8008d7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008390:	2100      	movs	r1, #0
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fcf2 	bl	8008d7c <USBD_LL_StallEP>
}
 8008398:	bf00      	nop
 800839a:	3708      	adds	r7, #8
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}

080083a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80083ac:	2300      	movs	r3, #0
 80083ae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d036      	beq.n	8008424 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80083ba:	6938      	ldr	r0, [r7, #16]
 80083bc:	f000 f836 	bl	800842c <USBD_GetLen>
 80083c0:	4603      	mov	r3, r0
 80083c2:	3301      	adds	r3, #1
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80083ce:	7dfb      	ldrb	r3, [r7, #23]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	4413      	add	r3, r2
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	7812      	ldrb	r2, [r2, #0]
 80083d8:	701a      	strb	r2, [r3, #0]
  idx++;
 80083da:	7dfb      	ldrb	r3, [r7, #23]
 80083dc:	3301      	adds	r3, #1
 80083de:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
 80083e2:	68ba      	ldr	r2, [r7, #8]
 80083e4:	4413      	add	r3, r2
 80083e6:	2203      	movs	r2, #3
 80083e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	3301      	adds	r3, #1
 80083ee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80083f0:	e013      	b.n	800841a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80083f2:	7dfb      	ldrb	r3, [r7, #23]
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	4413      	add	r3, r2
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	7812      	ldrb	r2, [r2, #0]
 80083fc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	3301      	adds	r3, #1
 8008402:	613b      	str	r3, [r7, #16]
    idx++;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
 8008406:	3301      	adds	r3, #1
 8008408:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800840a:	7dfb      	ldrb	r3, [r7, #23]
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	4413      	add	r3, r2
 8008410:	2200      	movs	r2, #0
 8008412:	701a      	strb	r2, [r3, #0]
    idx++;
 8008414:	7dfb      	ldrb	r3, [r7, #23]
 8008416:	3301      	adds	r3, #1
 8008418:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1e7      	bne.n	80083f2 <USBD_GetString+0x52>
 8008422:	e000      	b.n	8008426 <USBD_GetString+0x86>
    return;
 8008424:	bf00      	nop
  }
}
 8008426:	3718      	adds	r7, #24
 8008428:	46bd      	mov	sp, r7
 800842a:	bd80      	pop	{r7, pc}

0800842c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008434:	2300      	movs	r3, #0
 8008436:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800843c:	e005      	b.n	800844a <USBD_GetLen+0x1e>
  {
    len++;
 800843e:	7bfb      	ldrb	r3, [r7, #15]
 8008440:	3301      	adds	r3, #1
 8008442:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	3301      	adds	r3, #1
 8008448:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1f5      	bne.n	800843e <USBD_GetLen+0x12>
  }

  return len;
 8008452:	7bfb      	ldrb	r3, [r7, #15]
}
 8008454:	4618      	mov	r0, r3
 8008456:	3714      	adds	r7, #20
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2202      	movs	r2, #2
 8008470:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	687a      	ldr	r2, [r7, #4]
 8008478:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	2100      	movs	r1, #0
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f000 fd46 	bl	8008f18 <USBD_LL_Transmit>

  return USBD_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b084      	sub	sp, #16
 800849a:	af00      	add	r7, sp, #0
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	2100      	movs	r1, #0
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f000 fd35 	bl	8008f18 <USBD_LL_Transmit>

  return USBD_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b084      	sub	sp, #16
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	2203      	movs	r2, #3
 80084c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	2100      	movs	r1, #0
 80084e2:	68f8      	ldr	r0, [r7, #12]
 80084e4:	f000 fd50 	bl	8008f88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3710      	adds	r7, #16
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b084      	sub	sp, #16
 80084f6:	af00      	add	r7, sp, #0
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	2100      	movs	r1, #0
 8008504:	68f8      	ldr	r0, [r7, #12]
 8008506:	f000 fd3f 	bl	8008f88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3710      	adds	r7, #16
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b082      	sub	sp, #8
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2204      	movs	r2, #4
 8008520:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008524:	2300      	movs	r3, #0
 8008526:	2200      	movs	r2, #0
 8008528:	2100      	movs	r1, #0
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 fcf4 	bl	8008f18 <USBD_LL_Transmit>

  return USBD_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b082      	sub	sp, #8
 800853e:	af00      	add	r7, sp, #0
 8008540:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2205      	movs	r2, #5
 8008546:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800854a:	2300      	movs	r3, #0
 800854c:	2200      	movs	r2, #0
 800854e:	2100      	movs	r1, #0
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fd19 	bl	8008f88 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3708      	adds	r7, #8
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008564:	2200      	movs	r2, #0
 8008566:	4912      	ldr	r1, [pc, #72]	; (80085b0 <MX_USB_DEVICE_Init+0x50>)
 8008568:	4812      	ldr	r0, [pc, #72]	; (80085b4 <MX_USB_DEVICE_Init+0x54>)
 800856a:	f7fe fcd7 	bl	8006f1c <USBD_Init>
 800856e:	4603      	mov	r3, r0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008574:	f7f8 fb28 	bl	8000bc8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008578:	490f      	ldr	r1, [pc, #60]	; (80085b8 <MX_USB_DEVICE_Init+0x58>)
 800857a:	480e      	ldr	r0, [pc, #56]	; (80085b4 <MX_USB_DEVICE_Init+0x54>)
 800857c:	f7fe fcfe 	bl	8006f7c <USBD_RegisterClass>
 8008580:	4603      	mov	r3, r0
 8008582:	2b00      	cmp	r3, #0
 8008584:	d001      	beq.n	800858a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008586:	f7f8 fb1f 	bl	8000bc8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800858a:	490c      	ldr	r1, [pc, #48]	; (80085bc <MX_USB_DEVICE_Init+0x5c>)
 800858c:	4809      	ldr	r0, [pc, #36]	; (80085b4 <MX_USB_DEVICE_Init+0x54>)
 800858e:	f7fe fcab 	bl	8006ee8 <USBD_CUSTOM_HID_RegisterInterface>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d001      	beq.n	800859c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008598:	f7f8 fb16 	bl	8000bc8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800859c:	4805      	ldr	r0, [pc, #20]	; (80085b4 <MX_USB_DEVICE_Init+0x54>)
 800859e:	f7fe fd23 	bl	8006fe8 <USBD_Start>
 80085a2:	4603      	mov	r3, r0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d001      	beq.n	80085ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80085a8:	f7f8 fb0e 	bl	8000bc8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80085ac:	bf00      	nop
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	200000b8 	.word	0x200000b8
 80085b4:	200003a8 	.word	0x200003a8
 80085b8:	2000000c 	.word	0x2000000c
 80085bc:	200000a8 	.word	0x200000a8

080085c0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80085c0:	b480      	push	{r7}
 80085c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80085c4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	46bd      	mov	sp, r7
 80085ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ce:	4770      	bx	lr

080085d0 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80085d0:	b480      	push	{r7}
 80085d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80085d4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	46bd      	mov	sp, r7
 80085da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085de:	4770      	bx	lr

080085e0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b083      	sub	sp, #12
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	4603      	mov	r3, r0
 80085e8:	460a      	mov	r2, r1
 80085ea:	71fb      	strb	r3, [r7, #7]
 80085ec:	4613      	mov	r3, r2
 80085ee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);
  miflag = 1;
 80085f0:	4b04      	ldr	r3, [pc, #16]	; (8008604 <CUSTOM_HID_OutEvent_FS+0x24>)
 80085f2:	2201      	movs	r2, #1
 80085f4:	701a      	strb	r2, [r3, #0]
  /* Start next USB packet transfer once data processing is completed */
  //USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);

  return (USBD_OK);
 80085f6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	370c      	adds	r7, #12
 80085fc:	46bd      	mov	sp, r7
 80085fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008602:	4770      	bx	lr
 8008604:	20000684 	.word	0x20000684

08008608 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	4603      	mov	r3, r0
 8008610:	6039      	str	r1, [r7, #0]
 8008612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	2212      	movs	r2, #18
 8008618:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800861a:	4b03      	ldr	r3, [pc, #12]	; (8008628 <USBD_FS_DeviceDescriptor+0x20>)
}
 800861c:	4618      	mov	r0, r3
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	200000d8 	.word	0x200000d8

0800862c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	2204      	movs	r2, #4
 800863c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800863e:	4b03      	ldr	r3, [pc, #12]	; (800864c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008640:	4618      	mov	r0, r3
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	200000f8 	.word	0x200000f8

08008650 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b082      	sub	sp, #8
 8008654:	af00      	add	r7, sp, #0
 8008656:	4603      	mov	r3, r0
 8008658:	6039      	str	r1, [r7, #0]
 800865a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800865c:	79fb      	ldrb	r3, [r7, #7]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d105      	bne.n	800866e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008662:	683a      	ldr	r2, [r7, #0]
 8008664:	4907      	ldr	r1, [pc, #28]	; (8008684 <USBD_FS_ProductStrDescriptor+0x34>)
 8008666:	4808      	ldr	r0, [pc, #32]	; (8008688 <USBD_FS_ProductStrDescriptor+0x38>)
 8008668:	f7ff fe9a 	bl	80083a0 <USBD_GetString>
 800866c:	e004      	b.n	8008678 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800866e:	683a      	ldr	r2, [r7, #0]
 8008670:	4904      	ldr	r1, [pc, #16]	; (8008684 <USBD_FS_ProductStrDescriptor+0x34>)
 8008672:	4805      	ldr	r0, [pc, #20]	; (8008688 <USBD_FS_ProductStrDescriptor+0x38>)
 8008674:	f7ff fe94 	bl	80083a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008678:	4b02      	ldr	r3, [pc, #8]	; (8008684 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	20000688 	.word	0x20000688
 8008688:	08009140 	.word	0x08009140

0800868c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	4603      	mov	r3, r0
 8008694:	6039      	str	r1, [r7, #0]
 8008696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008698:	683a      	ldr	r2, [r7, #0]
 800869a:	4904      	ldr	r1, [pc, #16]	; (80086ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800869c:	4804      	ldr	r0, [pc, #16]	; (80086b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800869e:	f7ff fe7f 	bl	80083a0 <USBD_GetString>
  return USBD_StrDesc;
 80086a2:	4b02      	ldr	r3, [pc, #8]	; (80086ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	20000688 	.word	0x20000688
 80086b0:	08009160 	.word	0x08009160

080086b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b082      	sub	sp, #8
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	4603      	mov	r3, r0
 80086bc:	6039      	str	r1, [r7, #0]
 80086be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	221a      	movs	r2, #26
 80086c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80086c6:	f000 f855 	bl	8008774 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80086ca:	4b02      	ldr	r3, [pc, #8]	; (80086d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3708      	adds	r7, #8
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	200000fc 	.word	0x200000fc

080086d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	4603      	mov	r3, r0
 80086e0:	6039      	str	r1, [r7, #0]
 80086e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80086e4:	79fb      	ldrb	r3, [r7, #7]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d105      	bne.n	80086f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086ea:	683a      	ldr	r2, [r7, #0]
 80086ec:	4907      	ldr	r1, [pc, #28]	; (800870c <USBD_FS_ConfigStrDescriptor+0x34>)
 80086ee:	4808      	ldr	r0, [pc, #32]	; (8008710 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086f0:	f7ff fe56 	bl	80083a0 <USBD_GetString>
 80086f4:	e004      	b.n	8008700 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80086f6:	683a      	ldr	r2, [r7, #0]
 80086f8:	4904      	ldr	r1, [pc, #16]	; (800870c <USBD_FS_ConfigStrDescriptor+0x34>)
 80086fa:	4805      	ldr	r0, [pc, #20]	; (8008710 <USBD_FS_ConfigStrDescriptor+0x38>)
 80086fc:	f7ff fe50 	bl	80083a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008700:	4b02      	ldr	r3, [pc, #8]	; (800870c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008702:	4618      	mov	r0, r3
 8008704:	3708      	adds	r7, #8
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	20000688 	.word	0x20000688
 8008710:	08009174 	.word	0x08009174

08008714 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b082      	sub	sp, #8
 8008718:	af00      	add	r7, sp, #0
 800871a:	4603      	mov	r3, r0
 800871c:	6039      	str	r1, [r7, #0]
 800871e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008720:	79fb      	ldrb	r3, [r7, #7]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d105      	bne.n	8008732 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008726:	683a      	ldr	r2, [r7, #0]
 8008728:	4907      	ldr	r1, [pc, #28]	; (8008748 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800872a:	4808      	ldr	r0, [pc, #32]	; (800874c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800872c:	f7ff fe38 	bl	80083a0 <USBD_GetString>
 8008730:	e004      	b.n	800873c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008732:	683a      	ldr	r2, [r7, #0]
 8008734:	4904      	ldr	r1, [pc, #16]	; (8008748 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008736:	4805      	ldr	r0, [pc, #20]	; (800874c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008738:	f7ff fe32 	bl	80083a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800873c:	4b02      	ldr	r3, [pc, #8]	; (8008748 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800873e:	4618      	mov	r0, r3
 8008740:	3708      	adds	r7, #8
 8008742:	46bd      	mov	sp, r7
 8008744:	bd80      	pop	{r7, pc}
 8008746:	bf00      	nop
 8008748:	20000688 	.word	0x20000688
 800874c:	08009188 	.word	0x08009188

08008750 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	4603      	mov	r3, r0
 8008758:	6039      	str	r1, [r7, #0]
 800875a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	220c      	movs	r2, #12
 8008760:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008762:	4b03      	ldr	r3, [pc, #12]	; (8008770 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008764:	4618      	mov	r0, r3
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	200000ec 	.word	0x200000ec

08008774 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800877a:	4b0f      	ldr	r3, [pc, #60]	; (80087b8 <Get_SerialNum+0x44>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008780:	4b0e      	ldr	r3, [pc, #56]	; (80087bc <Get_SerialNum+0x48>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008786:	4b0e      	ldr	r3, [pc, #56]	; (80087c0 <Get_SerialNum+0x4c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	4413      	add	r3, r2
 8008792:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d009      	beq.n	80087ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800879a:	2208      	movs	r2, #8
 800879c:	4909      	ldr	r1, [pc, #36]	; (80087c4 <Get_SerialNum+0x50>)
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 f814 	bl	80087cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80087a4:	2204      	movs	r2, #4
 80087a6:	4908      	ldr	r1, [pc, #32]	; (80087c8 <Get_SerialNum+0x54>)
 80087a8:	68b8      	ldr	r0, [r7, #8]
 80087aa:	f000 f80f 	bl	80087cc <IntToUnicode>
  }
}
 80087ae:	bf00      	nop
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	1fff7590 	.word	0x1fff7590
 80087bc:	1fff7594 	.word	0x1fff7594
 80087c0:	1fff7598 	.word	0x1fff7598
 80087c4:	200000fe 	.word	0x200000fe
 80087c8:	2000010e 	.word	0x2000010e

080087cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b087      	sub	sp, #28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	4613      	mov	r3, r2
 80087d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80087de:	2300      	movs	r3, #0
 80087e0:	75fb      	strb	r3, [r7, #23]
 80087e2:	e027      	b.n	8008834 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	0f1b      	lsrs	r3, r3, #28
 80087e8:	2b09      	cmp	r3, #9
 80087ea:	d80b      	bhi.n	8008804 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	0f1b      	lsrs	r3, r3, #28
 80087f0:	b2da      	uxtb	r2, r3
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
 80087f4:	005b      	lsls	r3, r3, #1
 80087f6:	4619      	mov	r1, r3
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	440b      	add	r3, r1
 80087fc:	3230      	adds	r2, #48	; 0x30
 80087fe:	b2d2      	uxtb	r2, r2
 8008800:	701a      	strb	r2, [r3, #0]
 8008802:	e00a      	b.n	800881a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	0f1b      	lsrs	r3, r3, #28
 8008808:	b2da      	uxtb	r2, r3
 800880a:	7dfb      	ldrb	r3, [r7, #23]
 800880c:	005b      	lsls	r3, r3, #1
 800880e:	4619      	mov	r1, r3
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	440b      	add	r3, r1
 8008814:	3237      	adds	r2, #55	; 0x37
 8008816:	b2d2      	uxtb	r2, r2
 8008818:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	011b      	lsls	r3, r3, #4
 800881e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008820:	7dfb      	ldrb	r3, [r7, #23]
 8008822:	005b      	lsls	r3, r3, #1
 8008824:	3301      	adds	r3, #1
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	4413      	add	r3, r2
 800882a:	2200      	movs	r2, #0
 800882c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800882e:	7dfb      	ldrb	r3, [r7, #23]
 8008830:	3301      	adds	r3, #1
 8008832:	75fb      	strb	r3, [r7, #23]
 8008834:	7dfa      	ldrb	r2, [r7, #23]
 8008836:	79fb      	ldrb	r3, [r7, #7]
 8008838:	429a      	cmp	r2, r3
 800883a:	d3d3      	bcc.n	80087e4 <IntToUnicode+0x18>
  }
}
 800883c:	bf00      	nop
 800883e:	bf00      	nop
 8008840:	371c      	adds	r7, #28
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
	...

0800884c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b0ac      	sub	sp, #176	; 0xb0
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008854:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	605a      	str	r2, [r3, #4]
 800885e:	609a      	str	r2, [r3, #8]
 8008860:	60da      	str	r2, [r3, #12]
 8008862:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008864:	f107 0314 	add.w	r3, r7, #20
 8008868:	2288      	movs	r2, #136	; 0x88
 800886a:	2100      	movs	r1, #0
 800886c:	4618      	mov	r0, r3
 800886e:	f000 fc2f 	bl	80090d0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800887a:	f040 8085 	bne.w	8008988 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800887e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008882:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8008884:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800888c:	2301      	movs	r3, #1
 800888e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8008890:	2301      	movs	r3, #1
 8008892:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8008894:	2318      	movs	r3, #24
 8008896:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8008898:	2307      	movs	r3, #7
 800889a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800889c:	2302      	movs	r3, #2
 800889e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80088a0:	2302      	movs	r3, #2
 80088a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80088a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80088a8:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80088aa:	f107 0314 	add.w	r3, r7, #20
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fb fad8 	bl	8003e64 <HAL_RCCEx_PeriphCLKConfig>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 80088ba:	f7f8 f985 	bl	8000bc8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80088be:	4b34      	ldr	r3, [pc, #208]	; (8008990 <HAL_PCD_MspInit+0x144>)
 80088c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088c2:	4a33      	ldr	r2, [pc, #204]	; (8008990 <HAL_PCD_MspInit+0x144>)
 80088c4:	f043 0301 	orr.w	r3, r3, #1
 80088c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088ca:	4b31      	ldr	r3, [pc, #196]	; (8008990 <HAL_PCD_MspInit+0x144>)
 80088cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088ce:	f003 0301 	and.w	r3, r3, #1
 80088d2:	613b      	str	r3, [r7, #16]
 80088d4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80088d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80088da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088de:	2300      	movs	r3, #0
 80088e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088e4:	2300      	movs	r3, #0
 80088e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80088ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80088ee:	4619      	mov	r1, r3
 80088f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80088f4:	f7f8 fed0 	bl	8001698 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80088f8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80088fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008900:	2302      	movs	r3, #2
 8008902:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008906:	2300      	movs	r3, #0
 8008908:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800890c:	2303      	movs	r3, #3
 800890e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008912:	230a      	movs	r3, #10
 8008914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008918:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800891c:	4619      	mov	r1, r3
 800891e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008922:	f7f8 feb9 	bl	8001698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008926:	4b1a      	ldr	r3, [pc, #104]	; (8008990 <HAL_PCD_MspInit+0x144>)
 8008928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800892a:	4a19      	ldr	r2, [pc, #100]	; (8008990 <HAL_PCD_MspInit+0x144>)
 800892c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008932:	4b17      	ldr	r3, [pc, #92]	; (8008990 <HAL_PCD_MspInit+0x144>)
 8008934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800893e:	4b14      	ldr	r3, [pc, #80]	; (8008990 <HAL_PCD_MspInit+0x144>)
 8008940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008946:	2b00      	cmp	r3, #0
 8008948:	d114      	bne.n	8008974 <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800894a:	4b11      	ldr	r3, [pc, #68]	; (8008990 <HAL_PCD_MspInit+0x144>)
 800894c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800894e:	4a10      	ldr	r2, [pc, #64]	; (8008990 <HAL_PCD_MspInit+0x144>)
 8008950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008954:	6593      	str	r3, [r2, #88]	; 0x58
 8008956:	4b0e      	ldr	r3, [pc, #56]	; (8008990 <HAL_PCD_MspInit+0x144>)
 8008958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800895a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800895e:	60bb      	str	r3, [r7, #8]
 8008960:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8008962:	f7fa fbb3 	bl	80030cc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008966:	4b0a      	ldr	r3, [pc, #40]	; (8008990 <HAL_PCD_MspInit+0x144>)
 8008968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800896a:	4a09      	ldr	r2, [pc, #36]	; (8008990 <HAL_PCD_MspInit+0x144>)
 800896c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008970:	6593      	str	r3, [r2, #88]	; 0x58
 8008972:	e001      	b.n	8008978 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8008974:	f7fa fbaa 	bl	80030cc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008978:	2200      	movs	r2, #0
 800897a:	2100      	movs	r1, #0
 800897c:	2043      	movs	r0, #67	; 0x43
 800897e:	f7f8 fd48 	bl	8001412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008982:	2043      	movs	r0, #67	; 0x43
 8008984:	f7f8 fd61 	bl	800144a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008988:	bf00      	nop
 800898a:	37b0      	adds	r7, #176	; 0xb0
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	40021000 	.word	0x40021000

08008994 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089a8:	4619      	mov	r1, r3
 80089aa:	4610      	mov	r0, r2
 80089ac:	f7fe fb69 	bl	8007082 <USBD_LL_SetupStage>
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	460b      	mov	r3, r1
 80089c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80089ca:	78fa      	ldrb	r2, [r7, #3]
 80089cc:	6879      	ldr	r1, [r7, #4]
 80089ce:	4613      	mov	r3, r2
 80089d0:	00db      	lsls	r3, r3, #3
 80089d2:	4413      	add	r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	440b      	add	r3, r1
 80089d8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	78fb      	ldrb	r3, [r7, #3]
 80089e0:	4619      	mov	r1, r3
 80089e2:	f7fe fba3 	bl	800712c <USBD_LL_DataOutStage>
}
 80089e6:	bf00      	nop
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008a00:	78fa      	ldrb	r2, [r7, #3]
 8008a02:	6879      	ldr	r1, [r7, #4]
 8008a04:	4613      	mov	r3, r2
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	4413      	add	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	440b      	add	r3, r1
 8008a0e:	3348      	adds	r3, #72	; 0x48
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	78fb      	ldrb	r3, [r7, #3]
 8008a14:	4619      	mov	r1, r3
 8008a16:	f7fe fc3c 	bl	8007292 <USBD_LL_DataInStage>
}
 8008a1a:	bf00      	nop
 8008a1c:	3708      	adds	r7, #8
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b082      	sub	sp, #8
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a30:	4618      	mov	r0, r3
 8008a32:	f7fe fd76 	bl	8007522 <USBD_LL_SOF>
}
 8008a36:	bf00      	nop
 8008a38:	3708      	adds	r7, #8
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bd80      	pop	{r7, pc}

08008a3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a3e:	b580      	push	{r7, lr}
 8008a40:	b084      	sub	sp, #16
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008a46:	2301      	movs	r3, #1
 8008a48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	691b      	ldr	r3, [r3, #16]
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	d001      	beq.n	8008a56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008a52:	f7f8 f8b9 	bl	8000bc8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a5c:	7bfa      	ldrb	r2, [r7, #15]
 8008a5e:	4611      	mov	r1, r2
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fe fd1a 	bl	800749a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7fe fcc2 	bl	80073f6 <USBD_LL_Reset>
}
 8008a72:	bf00      	nop
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
	...

08008a7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	6812      	ldr	r2, [r2, #0]
 8008a92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008a96:	f043 0301 	orr.w	r3, r3, #1
 8008a9a:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f7fe fd09 	bl	80074ba <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d005      	beq.n	8008abc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008ab0:	4b04      	ldr	r3, [pc, #16]	; (8008ac4 <HAL_PCD_SuspendCallback+0x48>)
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	4a03      	ldr	r2, [pc, #12]	; (8008ac4 <HAL_PCD_SuspendCallback+0x48>)
 8008ab6:	f043 0306 	orr.w	r3, r3, #6
 8008aba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008abc:	bf00      	nop
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	e000ed00 	.word	0xe000ed00

08008ac8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	6812      	ldr	r2, [r2, #0]
 8008ade:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ae2:	f023 0301 	bic.w	r3, r3, #1
 8008ae6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a1b      	ldr	r3, [r3, #32]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d007      	beq.n	8008b00 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008af0:	4b08      	ldr	r3, [pc, #32]	; (8008b14 <HAL_PCD_ResumeCallback+0x4c>)
 8008af2:	691b      	ldr	r3, [r3, #16]
 8008af4:	4a07      	ldr	r2, [pc, #28]	; (8008b14 <HAL_PCD_ResumeCallback+0x4c>)
 8008af6:	f023 0306 	bic.w	r3, r3, #6
 8008afa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8008afc:	f000 fae2 	bl	80090c4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fe fcf3 	bl	80074f2 <USBD_LL_Resume>
}
 8008b0c:	bf00      	nop
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	e000ed00 	.word	0xe000ed00

08008b18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b082      	sub	sp, #8
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	460b      	mov	r3, r1
 8008b22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b2a:	78fa      	ldrb	r2, [r7, #3]
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe fd49 	bl	80075c6 <USBD_LL_IsoOUTIncomplete>
}
 8008b34:	bf00      	nop
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}

08008b3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b082      	sub	sp, #8
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	460b      	mov	r3, r1
 8008b46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b4e:	78fa      	ldrb	r2, [r7, #3]
 8008b50:	4611      	mov	r1, r2
 8008b52:	4618      	mov	r0, r3
 8008b54:	f7fe fd05 	bl	8007562 <USBD_LL_IsoINIncomplete>
}
 8008b58:	bf00      	nop
 8008b5a:	3708      	adds	r7, #8
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f7fe fd5b 	bl	800762a <USBD_LL_DevConnected>
}
 8008b74:	bf00      	nop
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fe fd58 	bl	8007640 <USBD_LL_DevDisconnected>
}
 8008b90:	bf00      	nop
 8008b92:	3708      	adds	r7, #8
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d13c      	bne.n	8008c22 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008ba8:	4a20      	ldr	r2, [pc, #128]	; (8008c2c <USBD_LL_Init+0x94>)
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4a1e      	ldr	r2, [pc, #120]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bb4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008bb8:	4b1c      	ldr	r3, [pc, #112]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008bbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8008bc0:	4b1a      	ldr	r3, [pc, #104]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bc2:	2206      	movs	r2, #6
 8008bc4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008bc6:	4b19      	ldr	r3, [pc, #100]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bc8:	2202      	movs	r2, #2
 8008bca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008bcc:	4b17      	ldr	r3, [pc, #92]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bce:	2202      	movs	r2, #2
 8008bd0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008bd2:	4b16      	ldr	r3, [pc, #88]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008bd8:	4b14      	ldr	r3, [pc, #80]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bda:	2200      	movs	r2, #0
 8008bdc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008bde:	4b13      	ldr	r3, [pc, #76]	; (8008c2c <USBD_LL_Init+0x94>)
 8008be0:	2200      	movs	r2, #0
 8008be2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8008be4:	4b11      	ldr	r3, [pc, #68]	; (8008c2c <USBD_LL_Init+0x94>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008bea:	4b10      	ldr	r3, [pc, #64]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bec:	2200      	movs	r2, #0
 8008bee:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008bf0:	4b0e      	ldr	r3, [pc, #56]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008bf6:	480d      	ldr	r0, [pc, #52]	; (8008c2c <USBD_LL_Init+0x94>)
 8008bf8:	f7f9 f865 	bl	8001cc6 <HAL_PCD_Init>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d001      	beq.n	8008c06 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008c02:	f7f7 ffe1 	bl	8000bc8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008c06:	2180      	movs	r1, #128	; 0x80
 8008c08:	4808      	ldr	r0, [pc, #32]	; (8008c2c <USBD_LL_Init+0x94>)
 8008c0a:	f7fa f9b6 	bl	8002f7a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008c0e:	2240      	movs	r2, #64	; 0x40
 8008c10:	2100      	movs	r1, #0
 8008c12:	4806      	ldr	r0, [pc, #24]	; (8008c2c <USBD_LL_Init+0x94>)
 8008c14:	f7fa f96a 	bl	8002eec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008c18:	2280      	movs	r2, #128	; 0x80
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	4803      	ldr	r0, [pc, #12]	; (8008c2c <USBD_LL_Init+0x94>)
 8008c1e:	f7fa f965 	bl	8002eec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008c22:	2300      	movs	r3, #0
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3708      	adds	r7, #8
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	20000888 	.word	0x20000888

08008c30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b084      	sub	sp, #16
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7f9 f961 	bl	8001f0e <HAL_PCD_Start>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	2b03      	cmp	r3, #3
 8008c54:	d816      	bhi.n	8008c84 <USBD_LL_Start+0x54>
 8008c56:	a201      	add	r2, pc, #4	; (adr r2, 8008c5c <USBD_LL_Start+0x2c>)
 8008c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c5c:	08008c6d 	.word	0x08008c6d
 8008c60:	08008c73 	.word	0x08008c73
 8008c64:	08008c79 	.word	0x08008c79
 8008c68:	08008c7f 	.word	0x08008c7f
    case HAL_OK :
      usb_status = USBD_OK;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c70:	e00b      	b.n	8008c8a <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c72:	2303      	movs	r3, #3
 8008c74:	73fb      	strb	r3, [r7, #15]
    break;
 8008c76:	e008      	b.n	8008c8a <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c78:	2301      	movs	r3, #1
 8008c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c7c:	e005      	b.n	8008c8a <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	73fb      	strb	r3, [r7, #15]
    break;
 8008c82:	e002      	b.n	8008c8a <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8008c84:	2303      	movs	r3, #3
 8008c86:	73fb      	strb	r3, [r7, #15]
    break;
 8008c88:	bf00      	nop
  }
  return usb_status;
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	4608      	mov	r0, r1
 8008c9e:	4611      	mov	r1, r2
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	70fb      	strb	r3, [r7, #3]
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	70bb      	strb	r3, [r7, #2]
 8008caa:	4613      	mov	r3, r2
 8008cac:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008cbc:	78bb      	ldrb	r3, [r7, #2]
 8008cbe:	883a      	ldrh	r2, [r7, #0]
 8008cc0:	78f9      	ldrb	r1, [r7, #3]
 8008cc2:	f7f9 fe0b 	bl	80028dc <HAL_PCD_EP_Open>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008cca:	7bbb      	ldrb	r3, [r7, #14]
 8008ccc:	2b03      	cmp	r3, #3
 8008cce:	d817      	bhi.n	8008d00 <USBD_LL_OpenEP+0x6c>
 8008cd0:	a201      	add	r2, pc, #4	; (adr r2, 8008cd8 <USBD_LL_OpenEP+0x44>)
 8008cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd6:	bf00      	nop
 8008cd8:	08008ce9 	.word	0x08008ce9
 8008cdc:	08008cef 	.word	0x08008cef
 8008ce0:	08008cf5 	.word	0x08008cf5
 8008ce4:	08008cfb 	.word	0x08008cfb
    case HAL_OK :
      usb_status = USBD_OK;
 8008ce8:	2300      	movs	r3, #0
 8008cea:	73fb      	strb	r3, [r7, #15]
    break;
 8008cec:	e00b      	b.n	8008d06 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf2:	e008      	b.n	8008d06 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	73fb      	strb	r3, [r7, #15]
    break;
 8008cf8:	e005      	b.n	8008d06 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	73fb      	strb	r3, [r7, #15]
    break;
 8008cfe:	e002      	b.n	8008d06 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8008d00:	2303      	movs	r3, #3
 8008d02:	73fb      	strb	r3, [r7, #15]
    break;
 8008d04:	bf00      	nop
  }
  return usb_status;
 8008d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3710      	adds	r7, #16
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	460b      	mov	r3, r1
 8008d1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d20:	2300      	movs	r3, #0
 8008d22:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d2a:	78fa      	ldrb	r2, [r7, #3]
 8008d2c:	4611      	mov	r1, r2
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7f9 fe3c 	bl	80029ac <HAL_PCD_EP_Close>
 8008d34:	4603      	mov	r3, r0
 8008d36:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b03      	cmp	r3, #3
 8008d3c:	d816      	bhi.n	8008d6c <USBD_LL_CloseEP+0x5c>
 8008d3e:	a201      	add	r2, pc, #4	; (adr r2, 8008d44 <USBD_LL_CloseEP+0x34>)
 8008d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d44:	08008d55 	.word	0x08008d55
 8008d48:	08008d5b 	.word	0x08008d5b
 8008d4c:	08008d61 	.word	0x08008d61
 8008d50:	08008d67 	.word	0x08008d67
    case HAL_OK :
      usb_status = USBD_OK;
 8008d54:	2300      	movs	r3, #0
 8008d56:	73fb      	strb	r3, [r7, #15]
    break;
 8008d58:	e00b      	b.n	8008d72 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5e:	e008      	b.n	8008d72 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d60:	2301      	movs	r3, #1
 8008d62:	73fb      	strb	r3, [r7, #15]
    break;
 8008d64:	e005      	b.n	8008d72 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d66:	2303      	movs	r3, #3
 8008d68:	73fb      	strb	r3, [r7, #15]
    break;
 8008d6a:	e002      	b.n	8008d72 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008d6c:	2303      	movs	r3, #3
 8008d6e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d70:	bf00      	nop
  }
  return usb_status;
 8008d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3710      	adds	r7, #16
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}

08008d7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	460b      	mov	r3, r1
 8008d86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d88:	2300      	movs	r3, #0
 8008d8a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008d96:	78fa      	ldrb	r2, [r7, #3]
 8008d98:	4611      	mov	r1, r2
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7f9 feb3 	bl	8002b06 <HAL_PCD_EP_SetStall>
 8008da0:	4603      	mov	r3, r0
 8008da2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
 8008da6:	2b03      	cmp	r3, #3
 8008da8:	d816      	bhi.n	8008dd8 <USBD_LL_StallEP+0x5c>
 8008daa:	a201      	add	r2, pc, #4	; (adr r2, 8008db0 <USBD_LL_StallEP+0x34>)
 8008dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008db0:	08008dc1 	.word	0x08008dc1
 8008db4:	08008dc7 	.word	0x08008dc7
 8008db8:	08008dcd 	.word	0x08008dcd
 8008dbc:	08008dd3 	.word	0x08008dd3
    case HAL_OK :
      usb_status = USBD_OK;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	73fb      	strb	r3, [r7, #15]
    break;
 8008dc4:	e00b      	b.n	8008dde <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008dc6:	2303      	movs	r3, #3
 8008dc8:	73fb      	strb	r3, [r7, #15]
    break;
 8008dca:	e008      	b.n	8008dde <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd0:	e005      	b.n	8008dde <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	73fb      	strb	r3, [r7, #15]
    break;
 8008dd6:	e002      	b.n	8008dde <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	73fb      	strb	r3, [r7, #15]
    break;
 8008ddc:	bf00      	nop
  }
  return usb_status;
 8008dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b084      	sub	sp, #16
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	460b      	mov	r3, r1
 8008df2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008df4:	2300      	movs	r3, #0
 8008df6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e02:	78fa      	ldrb	r2, [r7, #3]
 8008e04:	4611      	mov	r1, r2
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7f9 fedf 	bl	8002bca <HAL_PCD_EP_ClrStall>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d816      	bhi.n	8008e44 <USBD_LL_ClearStallEP+0x5c>
 8008e16:	a201      	add	r2, pc, #4	; (adr r2, 8008e1c <USBD_LL_ClearStallEP+0x34>)
 8008e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1c:	08008e2d 	.word	0x08008e2d
 8008e20:	08008e33 	.word	0x08008e33
 8008e24:	08008e39 	.word	0x08008e39
 8008e28:	08008e3f 	.word	0x08008e3f
    case HAL_OK :
      usb_status = USBD_OK;
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	73fb      	strb	r3, [r7, #15]
    break;
 8008e30:	e00b      	b.n	8008e4a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008e32:	2303      	movs	r3, #3
 8008e34:	73fb      	strb	r3, [r7, #15]
    break;
 8008e36:	e008      	b.n	8008e4a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008e38:	2301      	movs	r3, #1
 8008e3a:	73fb      	strb	r3, [r7, #15]
    break;
 8008e3c:	e005      	b.n	8008e4a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008e3e:	2303      	movs	r3, #3
 8008e40:	73fb      	strb	r3, [r7, #15]
    break;
 8008e42:	e002      	b.n	8008e4a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8008e44:	2303      	movs	r3, #3
 8008e46:	73fb      	strb	r3, [r7, #15]
    break;
 8008e48:	bf00      	nop
  }
  return usb_status;
 8008e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b085      	sub	sp, #20
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008e66:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	da0b      	bge.n	8008e88 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e76:	68f9      	ldr	r1, [r7, #12]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	00db      	lsls	r3, r3, #3
 8008e7c:	4413      	add	r3, r2
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	440b      	add	r3, r1
 8008e82:	333e      	adds	r3, #62	; 0x3e
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	e00b      	b.n	8008ea0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008e88:	78fb      	ldrb	r3, [r7, #3]
 8008e8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e8e:	68f9      	ldr	r1, [r7, #12]
 8008e90:	4613      	mov	r3, r2
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	4413      	add	r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	440b      	add	r3, r1
 8008e9a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008e9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	3714      	adds	r7, #20
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ec6:	78fa      	ldrb	r2, [r7, #3]
 8008ec8:	4611      	mov	r1, r2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7f9 fce1 	bl	8002892 <HAL_PCD_SetAddress>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8008ed4:	7bbb      	ldrb	r3, [r7, #14]
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	d816      	bhi.n	8008f08 <USBD_LL_SetUSBAddress+0x5c>
 8008eda:	a201      	add	r2, pc, #4	; (adr r2, 8008ee0 <USBD_LL_SetUSBAddress+0x34>)
 8008edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee0:	08008ef1 	.word	0x08008ef1
 8008ee4:	08008ef7 	.word	0x08008ef7
 8008ee8:	08008efd 	.word	0x08008efd
 8008eec:	08008f03 	.word	0x08008f03
    case HAL_OK :
      usb_status = USBD_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ef4:	e00b      	b.n	8008f0e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	73fb      	strb	r3, [r7, #15]
    break;
 8008efa:	e008      	b.n	8008f0e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008efc:	2301      	movs	r3, #1
 8008efe:	73fb      	strb	r3, [r7, #15]
    break;
 8008f00:	e005      	b.n	8008f0e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f02:	2303      	movs	r3, #3
 8008f04:	73fb      	strb	r3, [r7, #15]
    break;
 8008f06:	e002      	b.n	8008f0e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8008f0c:	bf00      	nop
  }
  return usb_status;
 8008f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3710      	adds	r7, #16
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b086      	sub	sp, #24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	607a      	str	r2, [r7, #4]
 8008f22:	603b      	str	r3, [r7, #0]
 8008f24:	460b      	mov	r3, r1
 8008f26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008f36:	7af9      	ldrb	r1, [r7, #11]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	f7f9 fdb2 	bl	8002aa4 <HAL_PCD_EP_Transmit>
 8008f40:	4603      	mov	r3, r0
 8008f42:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008f44:	7dbb      	ldrb	r3, [r7, #22]
 8008f46:	2b03      	cmp	r3, #3
 8008f48:	d816      	bhi.n	8008f78 <USBD_LL_Transmit+0x60>
 8008f4a:	a201      	add	r2, pc, #4	; (adr r2, 8008f50 <USBD_LL_Transmit+0x38>)
 8008f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f50:	08008f61 	.word	0x08008f61
 8008f54:	08008f67 	.word	0x08008f67
 8008f58:	08008f6d 	.word	0x08008f6d
 8008f5c:	08008f73 	.word	0x08008f73
    case HAL_OK :
      usb_status = USBD_OK;
 8008f60:	2300      	movs	r3, #0
 8008f62:	75fb      	strb	r3, [r7, #23]
    break;
 8008f64:	e00b      	b.n	8008f7e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008f66:	2303      	movs	r3, #3
 8008f68:	75fb      	strb	r3, [r7, #23]
    break;
 8008f6a:	e008      	b.n	8008f7e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	75fb      	strb	r3, [r7, #23]
    break;
 8008f70:	e005      	b.n	8008f7e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008f72:	2303      	movs	r3, #3
 8008f74:	75fb      	strb	r3, [r7, #23]
    break;
 8008f76:	e002      	b.n	8008f7e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8008f78:	2303      	movs	r3, #3
 8008f7a:	75fb      	strb	r3, [r7, #23]
    break;
 8008f7c:	bf00      	nop
  }
  return usb_status;
 8008f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3718      	adds	r7, #24
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	607a      	str	r2, [r7, #4]
 8008f92:	603b      	str	r3, [r7, #0]
 8008f94:	460b      	mov	r3, r1
 8008f96:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008fa6:	7af9      	ldrb	r1, [r7, #11]
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	f7f9 fd48 	bl	8002a40 <HAL_PCD_EP_Receive>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8008fb4:	7dbb      	ldrb	r3, [r7, #22]
 8008fb6:	2b03      	cmp	r3, #3
 8008fb8:	d816      	bhi.n	8008fe8 <USBD_LL_PrepareReceive+0x60>
 8008fba:	a201      	add	r2, pc, #4	; (adr r2, 8008fc0 <USBD_LL_PrepareReceive+0x38>)
 8008fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fc0:	08008fd1 	.word	0x08008fd1
 8008fc4:	08008fd7 	.word	0x08008fd7
 8008fc8:	08008fdd 	.word	0x08008fdd
 8008fcc:	08008fe3 	.word	0x08008fe3
    case HAL_OK :
      usb_status = USBD_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	75fb      	strb	r3, [r7, #23]
    break;
 8008fd4:	e00b      	b.n	8008fee <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008fd6:	2303      	movs	r3, #3
 8008fd8:	75fb      	strb	r3, [r7, #23]
    break;
 8008fda:	e008      	b.n	8008fee <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	75fb      	strb	r3, [r7, #23]
    break;
 8008fe0:	e005      	b.n	8008fee <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008fe2:	2303      	movs	r3, #3
 8008fe4:	75fb      	strb	r3, [r7, #23]
    break;
 8008fe6:	e002      	b.n	8008fee <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8008fe8:	2303      	movs	r3, #3
 8008fea:	75fb      	strb	r3, [r7, #23]
    break;
 8008fec:	bf00      	nop
  }
  return usb_status;
 8008fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	460b      	mov	r3, r1
 8009002:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009004:	78fb      	ldrb	r3, [r7, #3]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d002      	beq.n	8009010 <HAL_PCDEx_LPM_Callback+0x18>
 800900a:	2b01      	cmp	r3, #1
 800900c:	d01f      	beq.n	800904e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800900e:	e03b      	b.n	8009088 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6a1b      	ldr	r3, [r3, #32]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d007      	beq.n	8009028 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8009018:	f000 f854 	bl	80090c4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800901c:	4b1c      	ldr	r3, [pc, #112]	; (8009090 <HAL_PCDEx_LPM_Callback+0x98>)
 800901e:	691b      	ldr	r3, [r3, #16]
 8009020:	4a1b      	ldr	r2, [pc, #108]	; (8009090 <HAL_PCDEx_LPM_Callback+0x98>)
 8009022:	f023 0306 	bic.w	r3, r3, #6
 8009026:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	687a      	ldr	r2, [r7, #4]
 8009034:	6812      	ldr	r2, [r2, #0]
 8009036:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800903a:	f023 0301 	bic.w	r3, r3, #1
 800903e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009046:	4618      	mov	r0, r3
 8009048:	f7fe fa53 	bl	80074f2 <USBD_LL_Resume>
    break;
 800904c:	e01c      	b.n	8009088 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	6812      	ldr	r2, [r2, #0]
 800905c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009060:	f043 0301 	orr.w	r3, r3, #1
 8009064:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800906c:	4618      	mov	r0, r3
 800906e:	f7fe fa24 	bl	80074ba <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d005      	beq.n	8009086 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800907a:	4b05      	ldr	r3, [pc, #20]	; (8009090 <HAL_PCDEx_LPM_Callback+0x98>)
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	4a04      	ldr	r2, [pc, #16]	; (8009090 <HAL_PCDEx_LPM_Callback+0x98>)
 8009080:	f043 0306 	orr.w	r3, r3, #6
 8009084:	6113      	str	r3, [r2, #16]
    break;
 8009086:	bf00      	nop
}
 8009088:	bf00      	nop
 800908a:	3708      	adds	r7, #8
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	e000ed00 	.word	0xe000ed00

08009094 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800909c:	4b03      	ldr	r3, [pc, #12]	; (80090ac <USBD_static_malloc+0x18>)
}
 800909e:	4618      	mov	r0, r3
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr
 80090aa:	bf00      	nop
 80090ac:	20000d94 	.word	0x20000d94

080090b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]

}
 80090b8:	bf00      	nop
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80090c8:	f7f7 fa30 	bl	800052c <SystemClock_Config>
}
 80090cc:	bf00      	nop
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <memset>:
 80090d0:	4402      	add	r2, r0
 80090d2:	4603      	mov	r3, r0
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d100      	bne.n	80090da <memset+0xa>
 80090d8:	4770      	bx	lr
 80090da:	f803 1b01 	strb.w	r1, [r3], #1
 80090de:	e7f9      	b.n	80090d4 <memset+0x4>

080090e0 <__libc_init_array>:
 80090e0:	b570      	push	{r4, r5, r6, lr}
 80090e2:	4d0d      	ldr	r5, [pc, #52]	; (8009118 <__libc_init_array+0x38>)
 80090e4:	4c0d      	ldr	r4, [pc, #52]	; (800911c <__libc_init_array+0x3c>)
 80090e6:	1b64      	subs	r4, r4, r5
 80090e8:	10a4      	asrs	r4, r4, #2
 80090ea:	2600      	movs	r6, #0
 80090ec:	42a6      	cmp	r6, r4
 80090ee:	d109      	bne.n	8009104 <__libc_init_array+0x24>
 80090f0:	4d0b      	ldr	r5, [pc, #44]	; (8009120 <__libc_init_array+0x40>)
 80090f2:	4c0c      	ldr	r4, [pc, #48]	; (8009124 <__libc_init_array+0x44>)
 80090f4:	f000 f818 	bl	8009128 <_init>
 80090f8:	1b64      	subs	r4, r4, r5
 80090fa:	10a4      	asrs	r4, r4, #2
 80090fc:	2600      	movs	r6, #0
 80090fe:	42a6      	cmp	r6, r4
 8009100:	d105      	bne.n	800910e <__libc_init_array+0x2e>
 8009102:	bd70      	pop	{r4, r5, r6, pc}
 8009104:	f855 3b04 	ldr.w	r3, [r5], #4
 8009108:	4798      	blx	r3
 800910a:	3601      	adds	r6, #1
 800910c:	e7ee      	b.n	80090ec <__libc_init_array+0xc>
 800910e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009112:	4798      	blx	r3
 8009114:	3601      	adds	r6, #1
 8009116:	e7f2      	b.n	80090fe <__libc_init_array+0x1e>
 8009118:	080091f0 	.word	0x080091f0
 800911c:	080091f0 	.word	0x080091f0
 8009120:	080091f0 	.word	0x080091f0
 8009124:	080091f4 	.word	0x080091f4

08009128 <_init>:
 8009128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800912a:	bf00      	nop
 800912c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912e:	bc08      	pop	{r3}
 8009130:	469e      	mov	lr, r3
 8009132:	4770      	bx	lr

08009134 <_fini>:
 8009134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009136:	bf00      	nop
 8009138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800913a:	bc08      	pop	{r3}
 800913c:	469e      	mov	lr, r3
 800913e:	4770      	bx	lr
