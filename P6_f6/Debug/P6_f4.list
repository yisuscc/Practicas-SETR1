
P6_f4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  0800da70  0800da70  0001da70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dea4  0800dea4  000202e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dea4  0800dea4  0001dea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800deac  0800deac  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800deac  0800deac  0001deac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800deb0  0800deb0  0001deb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0800deb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e44  200002e0  0800e194  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001124  0800e194  00021124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022863  00000000  00000000  00020353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a21  00000000  00000000  00042bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002008  00000000  00000000  000475d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018d4  00000000  00000000  000495e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cbb9  00000000  00000000  0004aeb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000277e6  00000000  00000000  00077a6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101e65  00000000  00000000  0009f253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009a5c  00000000  00000000  001a10b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001aab14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e0 	.word	0x200002e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800da58 	.word	0x0800da58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	0800da58 	.word	0x0800da58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b970 	b.w	8000ee0 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	460d      	mov	r5, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	460f      	mov	r7, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4694      	mov	ip, r2
 8000c2c:	d965      	bls.n	8000cfa <__udivmoddi4+0xe2>
 8000c2e:	fab2 f382 	clz	r3, r2
 8000c32:	b143      	cbz	r3, 8000c46 <__udivmoddi4+0x2e>
 8000c34:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c38:	f1c3 0220 	rsb	r2, r3, #32
 8000c3c:	409f      	lsls	r7, r3
 8000c3e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c42:	4317      	orrs	r7, r2
 8000c44:	409c      	lsls	r4, r3
 8000c46:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c4a:	fa1f f58c 	uxth.w	r5, ip
 8000c4e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c52:	0c22      	lsrs	r2, r4, #16
 8000c54:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c58:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c5c:	fb01 f005 	mul.w	r0, r1, r5
 8000c60:	4290      	cmp	r0, r2
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c64:	eb1c 0202 	adds.w	r2, ip, r2
 8000c68:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c6c:	f080 811c 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c70:	4290      	cmp	r0, r2
 8000c72:	f240 8119 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000c76:	3902      	subs	r1, #2
 8000c78:	4462      	add	r2, ip
 8000c7a:	1a12      	subs	r2, r2, r0
 8000c7c:	b2a4      	uxth	r4, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c8a:	fb00 f505 	mul.w	r5, r0, r5
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	d90a      	bls.n	8000ca8 <__udivmoddi4+0x90>
 8000c92:	eb1c 0404 	adds.w	r4, ip, r4
 8000c96:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c9a:	f080 8107 	bcs.w	8000eac <__udivmoddi4+0x294>
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	f240 8104 	bls.w	8000eac <__udivmoddi4+0x294>
 8000ca4:	4464      	add	r4, ip
 8000ca6:	3802      	subs	r0, #2
 8000ca8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cac:	1b64      	subs	r4, r4, r5
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11e      	cbz	r6, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40dc      	lsrs	r4, r3
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d908      	bls.n	8000cd4 <__udivmoddi4+0xbc>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80ed 	beq.w	8000ea2 <__udivmoddi4+0x28a>
 8000cc8:	2100      	movs	r1, #0
 8000cca:	e9c6 0500 	strd	r0, r5, [r6]
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd4:	fab3 f183 	clz	r1, r3
 8000cd8:	2900      	cmp	r1, #0
 8000cda:	d149      	bne.n	8000d70 <__udivmoddi4+0x158>
 8000cdc:	42ab      	cmp	r3, r5
 8000cde:	d302      	bcc.n	8000ce6 <__udivmoddi4+0xce>
 8000ce0:	4282      	cmp	r2, r0
 8000ce2:	f200 80f8 	bhi.w	8000ed6 <__udivmoddi4+0x2be>
 8000ce6:	1a84      	subs	r4, r0, r2
 8000ce8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cec:	2001      	movs	r0, #1
 8000cee:	4617      	mov	r7, r2
 8000cf0:	2e00      	cmp	r6, #0
 8000cf2:	d0e2      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cf8:	e7df      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cfa:	b902      	cbnz	r2, 8000cfe <__udivmoddi4+0xe6>
 8000cfc:	deff      	udf	#255	; 0xff
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d08:	1a8a      	subs	r2, r1, r2
 8000d0a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	2101      	movs	r1, #1
 8000d14:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d18:	fb07 2015 	mls	r0, r7, r5, r2
 8000d1c:	0c22      	lsrs	r2, r4, #16
 8000d1e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d22:	fb0e f005 	mul.w	r0, lr, r5
 8000d26:	4290      	cmp	r0, r2
 8000d28:	d908      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d2e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4290      	cmp	r0, r2
 8000d36:	f200 80cb 	bhi.w	8000ed0 <__udivmoddi4+0x2b8>
 8000d3a:	4645      	mov	r5, r8
 8000d3c:	1a12      	subs	r2, r2, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d44:	fb07 2210 	mls	r2, r7, r0, r2
 8000d48:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d50:	45a6      	cmp	lr, r4
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x14e>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5c:	d202      	bcs.n	8000d64 <__udivmoddi4+0x14c>
 8000d5e:	45a6      	cmp	lr, r4
 8000d60:	f200 80bb 	bhi.w	8000eda <__udivmoddi4+0x2c2>
 8000d64:	4610      	mov	r0, r2
 8000d66:	eba4 040e 	sub.w	r4, r4, lr
 8000d6a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d6e:	e79f      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d70:	f1c1 0720 	rsb	r7, r1, #32
 8000d74:	408b      	lsls	r3, r1
 8000d76:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d7e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d82:	fa20 f307 	lsr.w	r3, r0, r7
 8000d86:	40fd      	lsrs	r5, r7
 8000d88:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d8c:	4323      	orrs	r3, r4
 8000d8e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d92:	fa1f fe8c 	uxth.w	lr, ip
 8000d96:	fb09 5518 	mls	r5, r9, r8, r5
 8000d9a:	0c1c      	lsrs	r4, r3, #16
 8000d9c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000da0:	fb08 f50e 	mul.w	r5, r8, lr
 8000da4:	42a5      	cmp	r5, r4
 8000da6:	fa02 f201 	lsl.w	r2, r2, r1
 8000daa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db8:	f080 8088 	bcs.w	8000ecc <__udivmoddi4+0x2b4>
 8000dbc:	42a5      	cmp	r5, r4
 8000dbe:	f240 8085 	bls.w	8000ecc <__udivmoddi4+0x2b4>
 8000dc2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dc6:	4464      	add	r4, ip
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	b29d      	uxth	r5, r3
 8000dcc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dd0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dd4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dd8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ddc:	45a6      	cmp	lr, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000de8:	d26c      	bcs.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dea:	45a6      	cmp	lr, r4
 8000dec:	d96a      	bls.n	8000ec4 <__udivmoddi4+0x2ac>
 8000dee:	3b02      	subs	r3, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000df6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dfa:	eba4 040e 	sub.w	r4, r4, lr
 8000dfe:	42ac      	cmp	r4, r5
 8000e00:	46c8      	mov	r8, r9
 8000e02:	46ae      	mov	lr, r5
 8000e04:	d356      	bcc.n	8000eb4 <__udivmoddi4+0x29c>
 8000e06:	d053      	beq.n	8000eb0 <__udivmoddi4+0x298>
 8000e08:	b156      	cbz	r6, 8000e20 <__udivmoddi4+0x208>
 8000e0a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e0e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	40ca      	lsrs	r2, r1
 8000e18:	40cc      	lsrs	r4, r1
 8000e1a:	4317      	orrs	r7, r2
 8000e1c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e20:	4618      	mov	r0, r3
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	f1c3 0120 	rsb	r1, r3, #32
 8000e2c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e30:	fa20 f201 	lsr.w	r2, r0, r1
 8000e34:	fa25 f101 	lsr.w	r1, r5, r1
 8000e38:	409d      	lsls	r5, r3
 8000e3a:	432a      	orrs	r2, r5
 8000e3c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1510 	mls	r5, r7, r0, r1
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e52:	fb00 f50e 	mul.w	r5, r0, lr
 8000e56:	428d      	cmp	r5, r1
 8000e58:	fa04 f403 	lsl.w	r4, r4, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x258>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e66:	d22f      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e68:	428d      	cmp	r5, r1
 8000e6a:	d92d      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1b49      	subs	r1, r1, r5
 8000e72:	b292      	uxth	r2, r2
 8000e74:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e78:	fb07 1115 	mls	r1, r7, r5, r1
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	fb05 f10e 	mul.w	r1, r5, lr
 8000e84:	4291      	cmp	r1, r2
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x282>
 8000e88:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e90:	d216      	bcs.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e92:	4291      	cmp	r1, r2
 8000e94:	d914      	bls.n	8000ec0 <__udivmoddi4+0x2a8>
 8000e96:	3d02      	subs	r5, #2
 8000e98:	4462      	add	r2, ip
 8000e9a:	1a52      	subs	r2, r2, r1
 8000e9c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ea0:	e738      	b.n	8000d14 <__udivmoddi4+0xfc>
 8000ea2:	4631      	mov	r1, r6
 8000ea4:	4630      	mov	r0, r6
 8000ea6:	e708      	b.n	8000cba <__udivmoddi4+0xa2>
 8000ea8:	4639      	mov	r1, r7
 8000eaa:	e6e6      	b.n	8000c7a <__udivmoddi4+0x62>
 8000eac:	4610      	mov	r0, r2
 8000eae:	e6fb      	b.n	8000ca8 <__udivmoddi4+0x90>
 8000eb0:	4548      	cmp	r0, r9
 8000eb2:	d2a9      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb4:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ebc:	3b01      	subs	r3, #1
 8000ebe:	e7a3      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ec0:	4645      	mov	r5, r8
 8000ec2:	e7ea      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	e794      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec8:	4640      	mov	r0, r8
 8000eca:	e7d1      	b.n	8000e70 <__udivmoddi4+0x258>
 8000ecc:	46d0      	mov	r8, sl
 8000ece:	e77b      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ed0:	3d02      	subs	r5, #2
 8000ed2:	4462      	add	r2, ip
 8000ed4:	e732      	b.n	8000d3c <__udivmoddi4+0x124>
 8000ed6:	4608      	mov	r0, r1
 8000ed8:	e70a      	b.n	8000cf0 <__udivmoddi4+0xd8>
 8000eda:	4464      	add	r4, ip
 8000edc:	3802      	subs	r0, #2
 8000ede:	e742      	b.n	8000d66 <__udivmoddi4+0x14e>

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
    // Pulse clock
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 1);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f001 fe27 	bl	8002b44 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f001 fa38 	bl	800236c <HAL_Delay>
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8000efc:	2200      	movs	r2, #0
 8000efe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f06:	f001 fe1d 	bl	8002b44 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f001 fa2e 	bl	800236c <HAL_Delay>
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <lcd_reset>:

void lcd_reset(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2104      	movs	r1, #4
 8000f1c:	4820      	ldr	r0, [pc, #128]	; (8000fa0 <lcd_reset+0x8c>)
 8000f1e:	f001 fe11 	bl	8002b44 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2110      	movs	r1, #16
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2a:	f001 fe0b 	bl	8002b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2108      	movs	r1, #8
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f001 fe05 	bl	8002b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2110      	movs	r1, #16
 8000f3e:	4818      	ldr	r0, [pc, #96]	; (8000fa0 <lcd_reset+0x8c>)
 8000f40:	f001 fe00 	bl	8002b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2102      	movs	r1, #2
 8000f48:	4815      	ldr	r0, [pc, #84]	; (8000fa0 <lcd_reset+0x8c>)
 8000f4a:	f001 fdfb 	bl	8002b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f58:	f001 fdf4 	bl	8002b44 <HAL_GPIO_WritePin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	2108      	movs	r1, #8
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f64:	f001 fdee 	bl	8002b44 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	2110      	movs	r1, #16
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <lcd_reset+0x8c>)
 8000f6e:	f001 fde9 	bl	8002b44 <HAL_GPIO_WritePin>
    lcd_clock();
 8000f72:	f7ff ffb7 	bl	8000ee4 <lcd_clock>
    lcd_clock();
 8000f76:	f7ff ffb5 	bl	8000ee4 <lcd_clock>
    lcd_clock();
 8000f7a:	f7ff ffb3 	bl	8000ee4 <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2108      	movs	r1, #8
 8000f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f86:	f001 fddd 	bl	8002b44 <HAL_GPIO_WritePin>
    lcd_clock();
 8000f8a:	f7ff ffab 	bl	8000ee4 <lcd_clock>

    HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 8000f8e:	2201      	movs	r2, #1
 8000f90:	2104      	movs	r1, #4
 8000f92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f96:	f001 fdd5 	bl	8002b44 <HAL_GPIO_WritePin>
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	48000400 	.word	0x48000400

08000fa4 <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	460a      	mov	r2, r1
 8000fae:	71fb      	strb	r3, [r7, #7]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	091b      	lsrs	r3, r3, #4
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d006      	beq.n	8000fd0 <lcd_write+0x2c>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2108      	movs	r1, #8
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fca:	f001 fdbb 	bl	8002b44 <HAL_GPIO_WritePin>
 8000fce:	e005      	b.n	8000fdc <lcd_write+0x38>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2108      	movs	r1, #8
 8000fd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd8:	f001 fdb4 	bl	8002b44 <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	095b      	lsrs	r3, r3, #5
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <lcd_write+0x52>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2110      	movs	r1, #16
 8000fee:	4847      	ldr	r0, [pc, #284]	; (800110c <lcd_write+0x168>)
 8000ff0:	f001 fda8 	bl	8002b44 <HAL_GPIO_WritePin>
 8000ff4:	e004      	b.n	8001000 <lcd_write+0x5c>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2110      	movs	r1, #16
 8000ffa:	4844      	ldr	r0, [pc, #272]	; (800110c <lcd_write+0x168>)
 8000ffc:	f001 fda2 	bl	8002b44 <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	099b      	lsrs	r3, r3, #6
 8001004:	b2db      	uxtb	r3, r3
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	2b00      	cmp	r3, #0
 800100c:	d005      	beq.n	800101a <lcd_write+0x76>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 800100e:	2201      	movs	r2, #1
 8001010:	2102      	movs	r1, #2
 8001012:	483e      	ldr	r0, [pc, #248]	; (800110c <lcd_write+0x168>)
 8001014:	f001 fd96 	bl	8002b44 <HAL_GPIO_WritePin>
 8001018:	e004      	b.n	8001024 <lcd_write+0x80>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2102      	movs	r1, #2
 800101e:	483b      	ldr	r0, [pc, #236]	; (800110c <lcd_write+0x168>)
 8001020:	f001 fd90 	bl	8002b44 <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	09db      	lsrs	r3, r3, #7
 8001028:	b2db      	uxtb	r3, r3
 800102a:	f003 0301 	and.w	r3, r3, #1
 800102e:	2b00      	cmp	r3, #0
 8001030:	d006      	beq.n	8001040 <lcd_write+0x9c>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 8001032:	2201      	movs	r2, #1
 8001034:	2110      	movs	r1, #16
 8001036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103a:	f001 fd83 	bl	8002b44 <HAL_GPIO_WritePin>
 800103e:	e005      	b.n	800104c <lcd_write+0xa8>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2110      	movs	r1, #16
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f001 fd7c 	bl	8002b44 <HAL_GPIO_WritePin>

    if(rs)
 800104c:	79bb      	ldrb	r3, [r7, #6]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d005      	beq.n	800105e <lcd_write+0xba>
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 1);
 8001052:	2201      	movs	r2, #1
 8001054:	2104      	movs	r1, #4
 8001056:	482d      	ldr	r0, [pc, #180]	; (800110c <lcd_write+0x168>)
 8001058:	f001 fd74 	bl	8002b44 <HAL_GPIO_WritePin>
 800105c:	e004      	b.n	8001068 <lcd_write+0xc4>
    else
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2104      	movs	r1, #4
 8001062:	482a      	ldr	r0, [pc, #168]	; (800110c <lcd_write+0x168>)
 8001064:	f001 fd6e 	bl	8002b44 <HAL_GPIO_WritePin>

    lcd_clock();
 8001068:	f7ff ff3c 	bl	8000ee4 <lcd_clock>

    // Write first nibble

    if(byte & 1)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	2b00      	cmp	r3, #0
 8001074:	d006      	beq.n	8001084 <lcd_write+0xe0>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 8001076:	2201      	movs	r2, #1
 8001078:	2108      	movs	r1, #8
 800107a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107e:	f001 fd61 	bl	8002b44 <HAL_GPIO_WritePin>
 8001082:	e005      	b.n	8001090 <lcd_write+0xec>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8001084:	2200      	movs	r2, #0
 8001086:	2108      	movs	r1, #8
 8001088:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800108c:	f001 fd5a 	bl	8002b44 <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	085b      	lsrs	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <lcd_write+0x106>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 800109e:	2201      	movs	r2, #1
 80010a0:	2110      	movs	r1, #16
 80010a2:	481a      	ldr	r0, [pc, #104]	; (800110c <lcd_write+0x168>)
 80010a4:	f001 fd4e 	bl	8002b44 <HAL_GPIO_WritePin>
 80010a8:	e004      	b.n	80010b4 <lcd_write+0x110>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 80010aa:	2200      	movs	r2, #0
 80010ac:	2110      	movs	r1, #16
 80010ae:	4817      	ldr	r0, [pc, #92]	; (800110c <lcd_write+0x168>)
 80010b0:	f001 fd48 	bl	8002b44 <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	089b      	lsrs	r3, r3, #2
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d005      	beq.n	80010ce <lcd_write+0x12a>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2102      	movs	r1, #2
 80010c6:	4811      	ldr	r0, [pc, #68]	; (800110c <lcd_write+0x168>)
 80010c8:	f001 fd3c 	bl	8002b44 <HAL_GPIO_WritePin>
 80010cc:	e004      	b.n	80010d8 <lcd_write+0x134>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2102      	movs	r1, #2
 80010d2:	480e      	ldr	r0, [pc, #56]	; (800110c <lcd_write+0x168>)
 80010d4:	f001 fd36 	bl	8002b44 <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	08db      	lsrs	r3, r3, #3
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d006      	beq.n	80010f4 <lcd_write+0x150>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 80010e6:	2201      	movs	r2, #1
 80010e8:	2110      	movs	r1, #16
 80010ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ee:	f001 fd29 	bl	8002b44 <HAL_GPIO_WritePin>
 80010f2:	e005      	b.n	8001100 <lcd_write+0x15c>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2110      	movs	r1, #16
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fc:	f001 fd22 	bl	8002b44 <HAL_GPIO_WritePin>

    lcd_clock();
 8001100:	f7ff fef0 	bl	8000ee4 <lcd_clock>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	48000400 	.word	0x48000400

08001110 <lcd_clear>:

void lcd_clear(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 8001114:	2100      	movs	r1, #0
 8001116:	2001      	movs	r0, #1
 8001118:	f7ff ff44 	bl	8000fa4 <lcd_write>
    _lcd_char = 0;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <lcd_clear+0x1c>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 8001122:	4b03      	ldr	r3, [pc, #12]	; (8001130 <lcd_clear+0x20>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000304 	.word	0x20000304
 8001130:	20000305 	.word	0x20000305

08001134 <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
 800113e:	460b      	mov	r3, r1
 8001140:	71bb      	strb	r3, [r7, #6]
 8001142:	4613      	mov	r3, r2
 8001144:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	b25b      	sxtb	r3, r3
 800114c:	f043 0308 	orr.w	r3, r3, #8
 8001150:	b25a      	sxtb	r2, r3
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	b25b      	sxtb	r3, r3
 8001158:	4313      	orrs	r3, r2
 800115a:	b25a      	sxtb	r2, r3
 800115c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001160:	4313      	orrs	r3, r2
 8001162:	b25b      	sxtb	r3, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff ff1b 	bl	8000fa4 <lcd_write>
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	4603      	mov	r3, r0
 800117e:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff0a 	bl	8000fa4 <lcd_write>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <lcd_print>:
{
	lcd_write(0b01000000 | address, 0);
}

void lcd_print(char string[])
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e055      	b.n	8001252 <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 80011a6:	4b30      	ldr	r3, [pc, #192]	; (8001268 <lcd_print+0xd0>)
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d01c      	beq.n	80011e8 <lcd_print+0x50>
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b0a      	cmp	r3, #10
 80011b8:	d116      	bne.n	80011e8 <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 80011ba:	4b2c      	ldr	r3, [pc, #176]	; (800126c <lcd_print+0xd4>)
 80011bc:	781a      	ldrb	r2, [r3, #0]
 80011be:	4b2a      	ldr	r3, [pc, #168]	; (8001268 <lcd_print+0xd0>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d242      	bcs.n	800124c <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <lcd_print+0xd8>)
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	4b28      	ldr	r3, [pc, #160]	; (800126c <lcd_print+0xd4>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	1c59      	adds	r1, r3, #1
 80011d0:	b2c8      	uxtb	r0, r1
 80011d2:	4926      	ldr	r1, [pc, #152]	; (800126c <lcd_print+0xd4>)
 80011d4:	7008      	strb	r0, [r1, #0]
 80011d6:	4413      	add	r3, r2
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff ffcb 	bl	8001176 <lcd_display_address>
                _lcd_char = 0;
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <lcd_print+0xdc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 80011e6:	e031      	b.n	800124c <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 80011e8:	4b23      	ldr	r3, [pc, #140]	; (8001278 <lcd_print+0xe0>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d01b      	beq.n	8001228 <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <lcd_print+0xdc>)
 80011f2:	781a      	ldrb	r2, [r3, #0]
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <lcd_print+0xe0>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d115      	bne.n	8001228 <lcd_print+0x90>
 80011fc:	4b1b      	ldr	r3, [pc, #108]	; (800126c <lcd_print+0xd4>)
 80011fe:	781a      	ldrb	r2, [r3, #0]
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <lcd_print+0xd0>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	429a      	cmp	r2, r3
 8001206:	d20f      	bcs.n	8001228 <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <lcd_print+0xd8>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b17      	ldr	r3, [pc, #92]	; (800126c <lcd_print+0xd4>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	1c59      	adds	r1, r3, #1
 8001212:	b2c8      	uxtb	r0, r1
 8001214:	4915      	ldr	r1, [pc, #84]	; (800126c <lcd_print+0xd4>)
 8001216:	7008      	strb	r0, [r1, #0]
 8001218:	4413      	add	r3, r2
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ffaa 	bl	8001176 <lcd_display_address>
                    _lcd_char = 0;
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <lcd_print+0xdc>)
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2101      	movs	r1, #1
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff feb6 	bl	8000fa4 <lcd_write>
            if(lcd_chars) _lcd_char++;
 8001238:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <lcd_print+0xe0>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <lcd_print+0xb4>
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <lcd_print+0xdc>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	b2da      	uxtb	r2, r3
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <lcd_print+0xdc>)
 800124a:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	3301      	adds	r3, #1
 8001250:	73fb      	strb	r3, [r7, #15]
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	687a      	ldr	r2, [r7, #4]
 8001256:	4413      	add	r3, r2
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1a3      	bne.n	80011a6 <lcd_print+0xe>
        }
    }
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	3710      	adds	r7, #16
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	200002fd 	.word	0x200002fd
 800126c:	20000305 	.word	0x20000305
 8001270:	20000300 	.word	0x20000300
 8001274:	20000304 	.word	0x20000304
 8001278:	200002fc 	.word	0x200002fc
 800127c:	00000000 	.word	0x00000000

08001280 <setServoPos>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern USBD_HandleTypeDef hUsbDeviceFS;
extern uint8_t miflag;
void setServoPos(float ang){
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	ed87 0a01 	vstr	s0, [r7, #4]
	if(ang>= 0 && ang<= 180){
 800128a:	edd7 7a01 	vldr	s15, [r7, #4]
 800128e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001296:	da00      	bge.n	800129a <setServoPos+0x1a>
    uint16_t grad  = 11.11*ang+500;
 	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,grad);
	}
}
 8001298:	e026      	b.n	80012e8 <setServoPos+0x68>
	if(ang>= 0 && ang<= 180){
 800129a:	edd7 7a01 	vldr	s15, [r7, #4]
 800129e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80012f8 <setServoPos+0x78>
 80012a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012aa:	d900      	bls.n	80012ae <setServoPos+0x2e>
}
 80012ac:	e01c      	b.n	80012e8 <setServoPos+0x68>
    uint16_t grad  = 11.11*ang+500;
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff f94a 	bl	8000548 <__aeabi_f2d>
 80012b4:	a30e      	add	r3, pc, #56	; (adr r3, 80012f0 <setServoPos+0x70>)
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f7ff f99d 	bl	80005f8 <__aeabi_dmul>
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4610      	mov	r0, r2
 80012c4:	4619      	mov	r1, r3
 80012c6:	f04f 0200 	mov.w	r2, #0
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <setServoPos+0x7c>)
 80012cc:	f7fe ffde 	bl	800028c <__adddf3>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fc66 	bl	8000ba8 <__aeabi_d2uiz>
 80012dc:	4603      	mov	r3, r0
 80012de:	81fb      	strh	r3, [r7, #14]
 	 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,grad);
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <setServoPos+0x80>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	89fa      	ldrh	r2, [r7, #14]
 80012e6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012e8:	bf00      	nop
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	eb851eb8 	.word	0xeb851eb8
 80012f4:	40263851 	.word	0x40263851
 80012f8:	43340000 	.word	0x43340000
 80012fc:	407f4000 	.word	0x407f4000
 8001300:	2000043c 	.word	0x2000043c

08001304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b08c      	sub	sp, #48	; 0x30
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800130a:	f000 ffba 	bl	8002282 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130e:	f000 f873 	bl	80013f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001312:	f000 fa69 	bl	80017e8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8001316:	f000 f8d1 	bl	80014bc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800131a:	f000 f907 	bl	800152c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800131e:	f000 f945 	bl	80015ac <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8001322:	f000 f969 	bl	80015f8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001326:	f000 f9ff 	bl	8001728 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800132a:	f000 fa2d 	bl	8001788 <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 800132e:	f008 ff57 	bl	800a1e0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001332:	f000 f99f 	bl	8001674 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

lcd_reset();
 8001336:	f7ff fded 	bl	8000f14 <lcd_reset>
lcd_display_settings(1,0,0);
 800133a:	2200      	movs	r2, #0
 800133c:	2100      	movs	r1, #0
 800133e:	2001      	movs	r0, #1
 8001340:	f7ff fef8 	bl	8001134 <lcd_display_settings>
lcd_clear();
 8001344:	f7ff fee4 	bl	8001110 <lcd_clear>
HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 8001348:	2201      	movs	r2, #1
 800134a:	2104      	movs	r1, #4
 800134c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001350:	f001 fbf8 	bl	8002b44 <HAL_GPIO_WritePin>
lcd_print("Fase4");
 8001354:	4823      	ldr	r0, [pc, #140]	; (80013e4 <main+0xe0>)
 8001356:	f7ff ff1f 	bl	8001198 <lcd_print>
HAL_Delay(5000);
 800135a:	f241 3088 	movw	r0, #5000	; 0x1388
 800135e:	f001 f805 	bl	800236c <HAL_Delay>

uint8_t dato[6];
USBD_LL_PrepareReceive(&hUsbDeviceFS, 1,dato, 6);
 8001362:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001366:	2306      	movs	r3, #6
 8001368:	2101      	movs	r1, #1
 800136a:	481f      	ldr	r0, [pc, #124]	; (80013e8 <main+0xe4>)
 800136c:	f009 fc60 	bl	800ac30 <USBD_LL_PrepareReceive>
uint8_t datoCiclo[6] = {115,101,116,114,0,0}; //setr ascii
 8001370:	4a1e      	ldr	r2, [pc, #120]	; (80013ec <main+0xe8>)
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	e892 0003 	ldmia.w	r2, {r0, r1}
 800137a:	6018      	str	r0, [r3, #0]
 800137c:	3304      	adds	r3, #4
 800137e:	8019      	strh	r1, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
if(miflag==1){
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <main+0xec>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d125      	bne.n	80013d4 <main+0xd0>
	USBD_LL_PrepareReceive(&hUsbDeviceFS, 1,dato, 6);
 8001388:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800138c:	2306      	movs	r3, #6
 800138e:	2101      	movs	r1, #1
 8001390:	4815      	ldr	r0, [pc, #84]	; (80013e8 <main+0xe4>)
 8001392:	f009 fc4d 	bl	800ac30 <USBD_LL_PrepareReceive>
	miflag=0; //bajamos la bandera
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <main+0xec>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
	//uasumo que un floatocupa cuatro bytes 32 bits
	//raconstruimos el ángulo
	//float ang = (float)((dato[3]<<24)|(dato[2]<<16)|(dato[1]<<8)|dato[0]);
	float ang = (float)dato[0];
 800139c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013a8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	//siempre imprimimos el caracter en la pantalla
	lcd_clear();
 80013ac:	f7ff feb0 	bl	8001110 <lcd_clear>
	char string[20];
	//enablear el float
	setServoPos(ang);
 80013b0:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 80013b4:	f7ff ff64 	bl	8001280 <setServoPos>
	sprintf(str,"Ang: %.1f",ang);
 80013b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013ba:	f7ff f8c5 	bl	8000548 <__aeabi_f2d>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	f107 0018 	add.w	r0, r7, #24
 80013c6:	490b      	ldr	r1, [pc, #44]	; (80013f4 <main+0xf0>)
 80013c8:	f00a f9ec 	bl	800b7a4 <siprintf>
	lcd_print(string);
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff fee2 	bl	8001198 <lcd_print>

}
//enviamos esta cadena  para saber que se ha terminado el ciclo
USBD_CUSTOM_HID_SendReport_FS(datoCiclo,6);
 80013d4:	f107 031c 	add.w	r3, r7, #28
 80013d8:	2106      	movs	r1, #6
 80013da:	4618      	mov	r0, r3
 80013dc:	f008 ff54 	bl	800a288 <USBD_CUSTOM_HID_SendReport_FS>
  {
 80013e0:	e7ce      	b.n	8001380 <main+0x7c>
 80013e2:	bf00      	nop
 80013e4:	0800da70 	.word	0x0800da70
 80013e8:	200005cc 	.word	0x200005cc
 80013ec:	0800da84 	.word	0x0800da84
 80013f0:	200008a8 	.word	0x200008a8
 80013f4:	0800da78 	.word	0x0800da78

080013f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b096      	sub	sp, #88	; 0x58
 80013fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fe:	f107 0314 	add.w	r3, r7, #20
 8001402:	2244      	movs	r2, #68	; 0x44
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f00a fa2f 	bl	800b86a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140c:	463b      	mov	r3, r7
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800141a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800141e:	f002 feab 	bl	8004178 <HAL_PWREx_ControlVoltageScaling>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001428:	f000 fb62 	bl	8001af0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800142c:	f002 fe86 	bl	800413c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001430:	4b21      	ldr	r3, [pc, #132]	; (80014b8 <SystemClock_Config+0xc0>)
 8001432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001436:	4a20      	ldr	r2, [pc, #128]	; (80014b8 <SystemClock_Config+0xc0>)
 8001438:	f023 0318 	bic.w	r3, r3, #24
 800143c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001440:	2314      	movs	r3, #20
 8001442:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001444:	2301      	movs	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001448:	2301      	movs	r3, #1
 800144a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800144c:	2300      	movs	r3, #0
 800144e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001450:	2360      	movs	r3, #96	; 0x60
 8001452:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001454:	2302      	movs	r3, #2
 8001456:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001458:	2301      	movs	r3, #1
 800145a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800145c:	2301      	movs	r3, #1
 800145e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001460:	2328      	movs	r3, #40	; 0x28
 8001462:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001464:	2307      	movs	r3, #7
 8001466:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001468:	2302      	movs	r3, #2
 800146a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800146c:	2302      	movs	r3, #2
 800146e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4618      	mov	r0, r3
 8001476:	f002 ffa1 	bl	80043bc <HAL_RCC_OscConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001480:	f000 fb36 	bl	8001af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001484:	230f      	movs	r3, #15
 8001486:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001488:	2303      	movs	r3, #3
 800148a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	2104      	movs	r1, #4
 800149c:	4618      	mov	r0, r3
 800149e:	f003 fb69 	bl	8004b74 <HAL_RCC_ClockConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80014a8:	f000 fb22 	bl	8001af0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80014ac:	f004 f870 	bl	8005590 <HAL_RCCEx_EnableMSIPLLMode>
}
 80014b0:	bf00      	nop
 80014b2:	3758      	adds	r7, #88	; 0x58
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40021000 	.word	0x40021000

080014bc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <MX_DFSDM1_Init+0x68>)
 80014c2:	4a19      	ldr	r2, [pc, #100]	; (8001528 <MX_DFSDM1_Init+0x6c>)
 80014c4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <MX_DFSDM1_Init+0x68>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <MX_DFSDM1_Init+0x68>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_DFSDM1_Init+0x68>)
 80014d4:	2202      	movs	r2, #2
 80014d6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <MX_DFSDM1_Init+0x68>)
 80014da:	2200      	movs	r2, #0
 80014dc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_DFSDM1_Init+0x68>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_DFSDM1_Init+0x68>)
 80014e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014ea:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <MX_DFSDM1_Init+0x68>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80014f2:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_DFSDM1_Init+0x68>)
 80014f4:	2204      	movs	r2, #4
 80014f6:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <MX_DFSDM1_Init+0x68>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80014fe:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_DFSDM1_Init+0x68>)
 8001500:	2201      	movs	r2, #1
 8001502:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <MX_DFSDM1_Init+0x68>)
 8001506:	2200      	movs	r2, #0
 8001508:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800150a:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_DFSDM1_Init+0x68>)
 800150c:	2200      	movs	r2, #0
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <MX_DFSDM1_Init+0x68>)
 8001512:	f001 f861 	bl	80025d8 <HAL_DFSDM_ChannelInit>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800151c:	f000 fae8 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000308 	.word	0x20000308
 8001528:	40016020 	.word	0x40016020

0800152c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <MX_I2C2_Init+0x74>)
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <MX_I2C2_Init+0x78>)
 8001534:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_I2C2_Init+0x74>)
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <MX_I2C2_Init+0x7c>)
 800153a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MX_I2C2_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_I2C2_Init+0x74>)
 8001544:	2201      	movs	r2, #1
 8001546:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_I2C2_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_I2C2_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <MX_I2C2_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_I2C2_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_I2C2_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001566:	480e      	ldr	r0, [pc, #56]	; (80015a0 <MX_I2C2_Init+0x74>)
 8001568:	f001 fb27 	bl	8002bba <HAL_I2C_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001572:	f000 fabd 	bl	8001af0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001576:	2100      	movs	r1, #0
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <MX_I2C2_Init+0x74>)
 800157a:	f001 fbb9 	bl	8002cf0 <HAL_I2CEx_ConfigAnalogFilter>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001584:	f000 fab4 	bl	8001af0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001588:	2100      	movs	r1, #0
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_I2C2_Init+0x74>)
 800158c:	f001 fbfb 	bl	8002d86 <HAL_I2CEx_ConfigDigitalFilter>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001596:	f000 faab 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000340 	.word	0x20000340
 80015a4:	40005800 	.word	0x40005800
 80015a8:	10909cec 	.word	0x10909cec

080015ac <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <MX_QUADSPI_Init+0x44>)
 80015b2:	4a10      	ldr	r2, [pc, #64]	; (80015f4 <MX_QUADSPI_Init+0x48>)
 80015b4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <MX_QUADSPI_Init+0x44>)
 80015b8:	2202      	movs	r2, #2
 80015ba:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	; (80015f0 <MX_QUADSPI_Init+0x44>)
 80015be:	2204      	movs	r2, #4
 80015c0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_QUADSPI_Init+0x44>)
 80015c4:	2210      	movs	r2, #16
 80015c6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <MX_QUADSPI_Init+0x44>)
 80015ca:	2217      	movs	r2, #23
 80015cc:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_QUADSPI_Init+0x44>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80015d4:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <MX_QUADSPI_Init+0x44>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	; (80015f0 <MX_QUADSPI_Init+0x44>)
 80015dc:	f002 fe32 	bl	8004244 <HAL_QSPI_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80015e6:	f000 fa83 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	20000394 	.word	0x20000394
 80015f4:	a0001000 	.word	0xa0001000

080015f8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80015fc:	4b1b      	ldr	r3, [pc, #108]	; (800166c <MX_SPI3_Init+0x74>)
 80015fe:	4a1c      	ldr	r2, [pc, #112]	; (8001670 <MX_SPI3_Init+0x78>)
 8001600:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001602:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_SPI3_Init+0x74>)
 8001604:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001608:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800160a:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_SPI3_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001610:	4b16      	ldr	r3, [pc, #88]	; (800166c <MX_SPI3_Init+0x74>)
 8001612:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001616:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_SPI3_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800161e:	4b13      	ldr	r3, [pc, #76]	; (800166c <MX_SPI3_Init+0x74>)
 8001620:	2200      	movs	r2, #0
 8001622:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_SPI3_Init+0x74>)
 8001626:	f44f 7200 	mov.w	r2, #512	; 0x200
 800162a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_SPI3_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_SPI3_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_SPI3_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_SPI3_Init+0x74>)
 8001640:	2200      	movs	r2, #0
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001644:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_SPI3_Init+0x74>)
 8001646:	2207      	movs	r2, #7
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <MX_SPI3_Init+0x74>)
 800164c:	2200      	movs	r2, #0
 800164e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_SPI3_Init+0x74>)
 8001652:	2208      	movs	r2, #8
 8001654:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001656:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_SPI3_Init+0x74>)
 8001658:	f004 f97c 	bl	8005954 <HAL_SPI_Init>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001662:	f000 fa45 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001666:	bf00      	nop
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	200003d8 	.word	0x200003d8
 8001670:	40003c00 	.word	0x40003c00

08001674 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	; 0x28
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800167a:	f107 031c 	add.w	r3, r7, #28
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001686:	463b      	mov	r3, r7
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
 8001694:	615a      	str	r2, [r3, #20]
 8001696:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001698:	4b22      	ldr	r3, [pc, #136]	; (8001724 <MX_TIM2_Init+0xb0>)
 800169a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800169e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016a0:	4b20      	ldr	r3, [pc, #128]	; (8001724 <MX_TIM2_Init+0xb0>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016a6:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <MX_TIM2_Init+0xb0>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 80016ac:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <MX_TIM2_Init+0xb0>)
 80016ae:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80016b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <MX_TIM2_Init+0xb0>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_TIM2_Init+0xb0>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80016c0:	4818      	ldr	r0, [pc, #96]	; (8001724 <MX_TIM2_Init+0xb0>)
 80016c2:	f004 f9ea 	bl	8005a9a <HAL_TIM_PWM_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80016cc:	f000 fa10 	bl	8001af0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016d8:	f107 031c 	add.w	r3, r7, #28
 80016dc:	4619      	mov	r1, r3
 80016de:	4811      	ldr	r0, [pc, #68]	; (8001724 <MX_TIM2_Init+0xb0>)
 80016e0:	f004 feb6 	bl	8006450 <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80016ea:	f000 fa01 	bl	8001af0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ee:	2360      	movs	r3, #96	; 0x60
 80016f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016fa:	2300      	movs	r3, #0
 80016fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016fe:	463b      	mov	r3, r7
 8001700:	2200      	movs	r2, #0
 8001702:	4619      	mov	r1, r3
 8001704:	4807      	ldr	r0, [pc, #28]	; (8001724 <MX_TIM2_Init+0xb0>)
 8001706:	f004 fa1f 	bl	8005b48 <HAL_TIM_PWM_ConfigChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001710:	f000 f9ee 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001714:	4803      	ldr	r0, [pc, #12]	; (8001724 <MX_TIM2_Init+0xb0>)
 8001716:	f000 fb7d 	bl	8001e14 <HAL_TIM_MspPostInit>

}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	; 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	2000043c 	.word	0x2000043c

08001728 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <MX_USART1_UART_Init+0x58>)
 800172e:	4a15      	ldr	r2, [pc, #84]	; (8001784 <MX_USART1_UART_Init+0x5c>)
 8001730:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001732:	4b13      	ldr	r3, [pc, #76]	; (8001780 <MX_USART1_UART_Init+0x58>)
 8001734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001738:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <MX_USART1_UART_Init+0x58>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001740:	4b0f      	ldr	r3, [pc, #60]	; (8001780 <MX_USART1_UART_Init+0x58>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MX_USART1_UART_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800174c:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <MX_USART1_UART_Init+0x58>)
 800174e:	220c      	movs	r2, #12
 8001750:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MX_USART1_UART_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <MX_USART1_UART_Init+0x58>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800175e:	4b08      	ldr	r3, [pc, #32]	; (8001780 <MX_USART1_UART_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MX_USART1_UART_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800176a:	4805      	ldr	r0, [pc, #20]	; (8001780 <MX_USART1_UART_Init+0x58>)
 800176c:	f004 fef8 	bl	8006560 <HAL_UART_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001776:	f000 f9bb 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000488 	.word	0x20000488
 8001784:	40013800 	.word	0x40013800

08001788 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <MX_USART3_UART_Init+0x58>)
 800178e:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <MX_USART3_UART_Init+0x5c>)
 8001790:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <MX_USART3_UART_Init+0x58>)
 8001794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001798:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800179a:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <MX_USART3_UART_Init+0x58>)
 800179c:	2200      	movs	r2, #0
 800179e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <MX_USART3_UART_Init+0x58>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017a6:	4b0e      	ldr	r3, [pc, #56]	; (80017e0 <MX_USART3_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <MX_USART3_UART_Init+0x58>)
 80017ae:	220c      	movs	r2, #12
 80017b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <MX_USART3_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017b8:	4b09      	ldr	r3, [pc, #36]	; (80017e0 <MX_USART3_UART_Init+0x58>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017be:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <MX_USART3_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017c4:	4b06      	ldr	r3, [pc, #24]	; (80017e0 <MX_USART3_UART_Init+0x58>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017ca:	4805      	ldr	r0, [pc, #20]	; (80017e0 <MX_USART3_UART_Init+0x58>)
 80017cc:	f004 fec8 	bl	8006560 <HAL_UART_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017d6:	f000 f98b 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000510 	.word	0x20000510
 80017e4:	40004800 	.word	0x40004800

080017e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
 80017f6:	605a      	str	r2, [r3, #4]
 80017f8:	609a      	str	r2, [r3, #8]
 80017fa:	60da      	str	r2, [r3, #12]
 80017fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017fe:	4bb7      	ldr	r3, [pc, #732]	; (8001adc <MX_GPIO_Init+0x2f4>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4ab6      	ldr	r2, [pc, #728]	; (8001adc <MX_GPIO_Init+0x2f4>)
 8001804:	f043 0310 	orr.w	r3, r3, #16
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4bb4      	ldr	r3, [pc, #720]	; (8001adc <MX_GPIO_Init+0x2f4>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0310 	and.w	r3, r3, #16
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001816:	4bb1      	ldr	r3, [pc, #708]	; (8001adc <MX_GPIO_Init+0x2f4>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	4ab0      	ldr	r2, [pc, #704]	; (8001adc <MX_GPIO_Init+0x2f4>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001822:	4bae      	ldr	r3, [pc, #696]	; (8001adc <MX_GPIO_Init+0x2f4>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f003 0304 	and.w	r3, r3, #4
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182e:	4bab      	ldr	r3, [pc, #684]	; (8001adc <MX_GPIO_Init+0x2f4>)
 8001830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001832:	4aaa      	ldr	r2, [pc, #680]	; (8001adc <MX_GPIO_Init+0x2f4>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183a:	4ba8      	ldr	r3, [pc, #672]	; (8001adc <MX_GPIO_Init+0x2f4>)
 800183c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	4ba5      	ldr	r3, [pc, #660]	; (8001adc <MX_GPIO_Init+0x2f4>)
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184a:	4aa4      	ldr	r2, [pc, #656]	; (8001adc <MX_GPIO_Init+0x2f4>)
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001852:	4ba2      	ldr	r3, [pc, #648]	; (8001adc <MX_GPIO_Init+0x2f4>)
 8001854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800185e:	4b9f      	ldr	r3, [pc, #636]	; (8001adc <MX_GPIO_Init+0x2f4>)
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	4a9e      	ldr	r2, [pc, #632]	; (8001adc <MX_GPIO_Init+0x2f4>)
 8001864:	f043 0308 	orr.w	r3, r3, #8
 8001868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186a:	4b9c      	ldr	r3, [pc, #624]	; (8001adc <MX_GPIO_Init+0x2f4>)
 800186c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001876:	2200      	movs	r2, #0
 8001878:	f44f 718a 	mov.w	r1, #276	; 0x114
 800187c:	4898      	ldr	r0, [pc, #608]	; (8001ae0 <MX_GPIO_Init+0x2f8>)
 800187e:	f001 f961 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001882:	2200      	movs	r2, #0
 8001884:	f248 111c 	movw	r1, #33052	; 0x811c
 8001888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188c:	f001 f95a 	bl	8002b44 <HAL_GPIO_WritePin>
                          |E_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001890:	2200      	movs	r2, #0
 8001892:	f24f 0116 	movw	r1, #61462	; 0xf016
 8001896:	4893      	ldr	r0, [pc, #588]	; (8001ae4 <MX_GPIO_Init+0x2fc>)
 8001898:	f001 f954 	bl	8002b44 <HAL_GPIO_WritePin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800189c:	2200      	movs	r2, #0
 800189e:	f241 0181 	movw	r1, #4225	; 0x1081
 80018a2:	4891      	ldr	r0, [pc, #580]	; (8001ae8 <MX_GPIO_Init+0x300>)
 80018a4:	f001 f94e 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80018a8:	2201      	movs	r2, #1
 80018aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ae:	488e      	ldr	r0, [pc, #568]	; (8001ae8 <MX_GPIO_Init+0x300>)
 80018b0:	f001 f948 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80018ba:	488c      	ldr	r0, [pc, #560]	; (8001aec <MX_GPIO_Init+0x304>)
 80018bc:	f001 f942 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80018c0:	2201      	movs	r2, #1
 80018c2:	2120      	movs	r1, #32
 80018c4:	4887      	ldr	r0, [pc, #540]	; (8001ae4 <MX_GPIO_Init+0x2fc>)
 80018c6:	f001 f93d 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2101      	movs	r1, #1
 80018ce:	4884      	ldr	r0, [pc, #528]	; (8001ae0 <MX_GPIO_Init+0x2f8>)
 80018d0:	f001 f938 	bl	8002b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80018d4:	f240 1315 	movw	r3, #277	; 0x115
 80018d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018da:	2301      	movs	r3, #1
 80018dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	487c      	ldr	r0, [pc, #496]	; (8001ae0 <MX_GPIO_Init+0x2f8>)
 80018ee:	f000 ff7f 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80018f2:	236a      	movs	r3, #106	; 0x6a
 80018f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	4619      	mov	r1, r3
 8001906:	4876      	ldr	r0, [pc, #472]	; (8001ae0 <MX_GPIO_Init+0x2f8>)
 8001908:	f000 ff72 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 800190c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001910:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001912:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	4872      	ldr	r0, [pc, #456]	; (8001aec <MX_GPIO_Init+0x304>)
 8001924:	f000 ff64 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001928:	233f      	movs	r3, #63	; 0x3f
 800192a:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800192c:	230b      	movs	r3, #11
 800192e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	4619      	mov	r1, r3
 800193a:	486c      	ldr	r0, [pc, #432]	; (8001aec <MX_GPIO_Init+0x304>)
 800193c:	f000 ff58 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001940:	2303      	movs	r3, #3
 8001942:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001950:	2308      	movs	r3, #8
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	4619      	mov	r1, r3
 800195a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195e:	f000 ff47 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin SPBTLE_RF_RST_Pin
                           E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001962:	f248 131c 	movw	r3, #33052	; 0x811c
 8001966:	617b      	str	r3, [r7, #20]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001968:	2301      	movs	r3, #1
 800196a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196c:	2300      	movs	r3, #0
 800196e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001970:	2300      	movs	r3, #0
 8001972:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001974:	f107 0314 	add.w	r3, r7, #20
 8001978:	4619      	mov	r1, r3
 800197a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197e:	f000 ff37 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001982:	23c0      	movs	r3, #192	; 0xc0
 8001984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001992:	2305      	movs	r3, #5
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001996:	f107 0314 	add.w	r3, r7, #20
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a0:	f000 ff26 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80019a4:	2301      	movs	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019a8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	484a      	ldr	r0, [pc, #296]	; (8001ae4 <MX_GPIO_Init+0x2fc>)
 80019ba:	f000 ff19 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           LED2_Pin SPSGRF_915_SDN_Pin D5_LCD_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 80019be:	f24f 0336 	movw	r3, #61494	; 0xf036
 80019c2:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c4:	2301      	movs	r3, #1
 80019c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	f107 0314 	add.w	r3, r7, #20
 80019d4:	4619      	mov	r1, r3
 80019d6:	4843      	ldr	r0, [pc, #268]	; (8001ae4 <MX_GPIO_Init+0x2fc>)
 80019d8:	f000 ff0a 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80019dc:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80019e0:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e8:	2300      	movs	r3, #0
 80019ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4619      	mov	r1, r3
 80019f2:	483d      	ldr	r0, [pc, #244]	; (8001ae8 <MX_GPIO_Init+0x300>)
 80019f4:	f000 fefc 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80019f8:	f243 0381 	movw	r3, #12417	; 0x3081
 80019fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a0a:	f107 0314 	add.w	r3, r7, #20
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4835      	ldr	r0, [pc, #212]	; (8001ae8 <MX_GPIO_Init+0x300>)
 8001a12:	f000 feed 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001a16:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a28:	f107 0314 	add.w	r3, r7, #20
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	482f      	ldr	r0, [pc, #188]	; (8001aec <MX_GPIO_Init+0x304>)
 8001a30:	f000 fede 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001a34:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a3a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4828      	ldr	r0, [pc, #160]	; (8001aec <MX_GPIO_Init+0x304>)
 8001a4c:	f000 fed0 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001a50:	2302      	movs	r3, #2
 8001a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a60:	2305      	movs	r3, #5
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	4619      	mov	r1, r3
 8001a6a:	481f      	ldr	r0, [pc, #124]	; (8001ae8 <MX_GPIO_Init+0x300>)
 8001a6c:	f000 fec0 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001a70:	2378      	movs	r3, #120	; 0x78
 8001a72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a80:	2307      	movs	r3, #7
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4817      	ldr	r0, [pc, #92]	; (8001ae8 <MX_GPIO_Init+0x300>)
 8001a8c:	f000 feb0 	bl	80027f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001a90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a96:	2312      	movs	r3, #18
 8001a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aa2:	2304      	movs	r3, #4
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa6:	f107 0314 	add.w	r3, r7, #20
 8001aaa:	4619      	mov	r1, r3
 8001aac:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <MX_GPIO_Init+0x2fc>)
 8001aae:	f000 fe9f 	bl	80027f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2017      	movs	r0, #23
 8001ab8:	f000 fd57 	bl	800256a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001abc:	2017      	movs	r0, #23
 8001abe:	f000 fd70 	bl	80025a2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2028      	movs	r0, #40	; 0x28
 8001ac8:	f000 fd4f 	bl	800256a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001acc:	2028      	movs	r0, #40	; 0x28
 8001ace:	f000 fd68 	bl	80025a2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3728      	adds	r7, #40	; 0x28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	48001000 	.word	0x48001000
 8001ae4:	48000400 	.word	0x48000400
 8001ae8:	48000c00 	.word	0x48000c00
 8001aec:	48000800 	.word	0x48000800

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001af4:	b672      	cpsid	i
}
 8001af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <Error_Handler+0x8>
	...

08001afc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <HAL_MspInit+0x44>)
 8001b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b06:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <HAL_MspInit+0x44>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <HAL_MspInit+0x44>)
 8001b10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	607b      	str	r3, [r7, #4]
 8001b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_MspInit+0x44>)
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <HAL_MspInit+0x44>)
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b24:	6593      	str	r3, [r2, #88]	; 0x58
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <HAL_MspInit+0x44>)
 8001b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2e:	603b      	str	r3, [r7, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000

08001b44 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0ac      	sub	sp, #176	; 0xb0
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2288      	movs	r2, #136	; 0x88
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f009 fe80 	bl	800b86a <memset>
  if(DFSDM1_Init == 0)
 8001b6a:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d142      	bne.n	8001bf8 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001b72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b76:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fa1a 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001b8e:	f7ff ffaf 	bl	8001af0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b96:	4a1b      	ldr	r2, [pc, #108]	; (8001c04 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b9e:	4b19      	ldr	r3, [pc, #100]	; (8001c04 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001ba0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bae:	4a15      	ldr	r2, [pc, #84]	; (8001c04 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bb0:	f043 0310 	orr.w	r3, r3, #16
 8001bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001bc2:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001bc6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001bdc:	2306      	movs	r3, #6
 8001bde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001be2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001be6:	4619      	mov	r1, r3
 8001be8:	4807      	ldr	r0, [pc, #28]	; (8001c08 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001bea:	f000 fe01 	bl	80027f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001bee:	4b04      	ldr	r3, [pc, #16]	; (8001c00 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	4a02      	ldr	r2, [pc, #8]	; (8001c00 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001bf6:	6013      	str	r3, [r2, #0]
  }

}
 8001bf8:	bf00      	nop
 8001bfa:	37b0      	adds	r7, #176	; 0xb0
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	20000598 	.word	0x20000598
 8001c04:	40021000 	.word	0x40021000
 8001c08:	48001000 	.word	0x48001000

08001c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b0ac      	sub	sp, #176	; 0xb0
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	2288      	movs	r2, #136	; 0x88
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f009 fe1c 	bl	800b86a <memset>
  if(hi2c->Instance==I2C2)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a21      	ldr	r2, [pc, #132]	; (8001cbc <HAL_I2C_MspInit+0xb0>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d13b      	bne.n	8001cb4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c3c:	2380      	movs	r3, #128	; 0x80
 8001c3e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f003 f9b7 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c54:	f7ff ff4c 	bl	8001af0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_I2C_MspInit+0xb4>)
 8001c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c5c:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <HAL_I2C_MspInit+0xb4>)
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c64:	4b16      	ldr	r3, [pc, #88]	; (8001cc0 <HAL_I2C_MspInit+0xb4>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001c70:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c78:	2312      	movs	r3, #18
 8001c7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c84:	2303      	movs	r3, #3
 8001c86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c94:	4619      	mov	r1, r3
 8001c96:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <HAL_I2C_MspInit+0xb8>)
 8001c98:	f000 fdaa 	bl	80027f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_I2C_MspInit+0xb4>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <HAL_I2C_MspInit+0xb4>)
 8001ca2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <HAL_I2C_MspInit+0xb4>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001cb4:	bf00      	nop
 8001cb6:	37b0      	adds	r7, #176	; 0xb0
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40005800 	.word	0x40005800
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	48000400 	.word	0x48000400

08001cc8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a17      	ldr	r2, [pc, #92]	; (8001d44 <HAL_QSPI_MspInit+0x7c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d128      	bne.n	8001d3c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001cea:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_QSPI_MspInit+0x80>)
 8001cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cee:	4a16      	ldr	r2, [pc, #88]	; (8001d48 <HAL_QSPI_MspInit+0x80>)
 8001cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf4:	6513      	str	r3, [r2, #80]	; 0x50
 8001cf6:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <HAL_QSPI_MspInit+0x80>)
 8001cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HAL_QSPI_MspInit+0x80>)
 8001d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d06:	4a10      	ldr	r2, [pc, #64]	; (8001d48 <HAL_QSPI_MspInit+0x80>)
 8001d08:	f043 0310 	orr.w	r3, r3, #16
 8001d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d0e:	4b0e      	ldr	r3, [pc, #56]	; (8001d48 <HAL_QSPI_MspInit+0x80>)
 8001d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001d1a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001d1e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001d2c:	230a      	movs	r3, #10
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	4805      	ldr	r0, [pc, #20]	; (8001d4c <HAL_QSPI_MspInit+0x84>)
 8001d38:	f000 fd5a 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001d3c:	bf00      	nop
 8001d3e:	3728      	adds	r7, #40	; 0x28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	a0001000 	.word	0xa0001000
 8001d48:	40021000 	.word	0x40021000
 8001d4c:	48001000 	.word	0x48001000

08001d50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <HAL_SPI_MspInit+0x7c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d128      	bne.n	8001dc4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d72:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <HAL_SPI_MspInit+0x80>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	4a16      	ldr	r2, [pc, #88]	; (8001dd0 <HAL_SPI_MspInit+0x80>)
 8001d78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7e:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <HAL_SPI_MspInit+0x80>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_SPI_MspInit+0x80>)
 8001d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_SPI_MspInit+0x80>)
 8001d90:	f043 0304 	orr.w	r3, r3, #4
 8001d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_SPI_MspInit+0x80>)
 8001d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001da2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001da6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db0:	2303      	movs	r3, #3
 8001db2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001db4:	2306      	movs	r3, #6
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <HAL_SPI_MspInit+0x84>)
 8001dc0:	f000 fd16 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001dc4:	bf00      	nop
 8001dc6:	3728      	adds	r7, #40	; 0x28
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40003c00 	.word	0x40003c00
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	48000800 	.word	0x48000800

08001dd8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de8:	d10b      	bne.n	8001e02 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dea:	4b09      	ldr	r3, [pc, #36]	; (8001e10 <HAL_TIM_PWM_MspInit+0x38>)
 8001dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dee:	4a08      	ldr	r2, [pc, #32]	; (8001e10 <HAL_TIM_PWM_MspInit+0x38>)
 8001df0:	f043 0301 	orr.w	r3, r3, #1
 8001df4:	6593      	str	r3, [r2, #88]	; 0x58
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_TIM_PWM_MspInit+0x38>)
 8001df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	60fb      	str	r3, [r7, #12]
 8001e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001e02:	bf00      	nop
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000

08001e14 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b088      	sub	sp, #32
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e1c:	f107 030c 	add.w	r3, r7, #12
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
 8001e28:	60da      	str	r2, [r3, #12]
 8001e2a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e34:	d11c      	bne.n	8001e70 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_TIM_MspPostInit+0x64>)
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	4a0f      	ldr	r2, [pc, #60]	; (8001e78 <HAL_TIM_MspPostInit+0x64>)
 8001e3c:	f043 0301 	orr.w	r3, r3, #1
 8001e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <HAL_TIM_MspPostInit+0x64>)
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	f003 0301 	and.w	r3, r3, #1
 8001e4a:	60bb      	str	r3, [r7, #8]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e4e:	2320      	movs	r3, #32
 8001e50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e52:	2302      	movs	r3, #2
 8001e54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4619      	mov	r1, r3
 8001e68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e6c:	f000 fcc0 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001e70:	bf00      	nop
 8001e72:	3720      	adds	r7, #32
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40021000 	.word	0x40021000

08001e7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b0ae      	sub	sp, #184	; 0xb8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	2288      	movs	r2, #136	; 0x88
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f009 fce4 	bl	800b86a <memset>
  if(huart->Instance==USART1)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a42      	ldr	r2, [pc, #264]	; (8001fb0 <HAL_UART_MspInit+0x134>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d13b      	bne.n	8001f24 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001eac:	2301      	movs	r3, #1
 8001eae:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eb4:	f107 031c 	add.w	r3, r7, #28
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 f87f 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ec4:	f7ff fe14 	bl	8001af0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ec8:	4b3a      	ldr	r3, [pc, #232]	; (8001fb4 <HAL_UART_MspInit+0x138>)
 8001eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ecc:	4a39      	ldr	r2, [pc, #228]	; (8001fb4 <HAL_UART_MspInit+0x138>)
 8001ece:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed4:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <HAL_UART_MspInit+0x138>)
 8001ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee0:	4b34      	ldr	r3, [pc, #208]	; (8001fb4 <HAL_UART_MspInit+0x138>)
 8001ee2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee4:	4a33      	ldr	r2, [pc, #204]	; (8001fb4 <HAL_UART_MspInit+0x138>)
 8001ee6:	f043 0302 	orr.w	r3, r3, #2
 8001eea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001eec:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <HAL_UART_MspInit+0x138>)
 8001eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001ef8:	23c0      	movs	r3, #192	; 0xc0
 8001efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f10:	2307      	movs	r3, #7
 8001f12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f16:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4826      	ldr	r0, [pc, #152]	; (8001fb8 <HAL_UART_MspInit+0x13c>)
 8001f1e:	f000 fc67 	bl	80027f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f22:	e040      	b.n	8001fa6 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a24      	ldr	r2, [pc, #144]	; (8001fbc <HAL_UART_MspInit+0x140>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d13b      	bne.n	8001fa6 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f2e:	2304      	movs	r3, #4
 8001f30:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f32:	2300      	movs	r3, #0
 8001f34:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f36:	f107 031c 	add.w	r3, r7, #28
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f003 f83e 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001f46:	f7ff fdd3 	bl	8001af0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <HAL_UART_MspInit+0x138>)
 8001f4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f4e:	4a19      	ldr	r2, [pc, #100]	; (8001fb4 <HAL_UART_MspInit+0x138>)
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f54:	6593      	str	r3, [r2, #88]	; 0x58
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <HAL_UART_MspInit+0x138>)
 8001f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f62:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <HAL_UART_MspInit+0x138>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	4a13      	ldr	r2, [pc, #76]	; (8001fb4 <HAL_UART_MspInit+0x138>)
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f6e:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <HAL_UART_MspInit+0x138>)
 8001f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f72:	f003 0308 	and.w	r3, r3, #8
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001f7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f82:	2302      	movs	r3, #2
 8001f84:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f94:	2307      	movs	r3, #7
 8001f96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f9a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4807      	ldr	r0, [pc, #28]	; (8001fc0 <HAL_UART_MspInit+0x144>)
 8001fa2:	f000 fc25 	bl	80027f0 <HAL_GPIO_Init>
}
 8001fa6:	bf00      	nop
 8001fa8:	37b8      	adds	r7, #184	; 0xb8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40013800 	.word	0x40013800
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	48000400 	.word	0x48000400
 8001fbc:	40004800 	.word	0x40004800
 8001fc0:	48000c00 	.word	0x48000c00

08001fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fc8:	e7fe      	b.n	8001fc8 <NMI_Handler+0x4>

08001fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fce:	e7fe      	b.n	8001fce <HardFault_Handler+0x4>

08001fd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd4:	e7fe      	b.n	8001fd4 <MemManage_Handler+0x4>

08001fd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fda:	e7fe      	b.n	8001fda <BusFault_Handler+0x4>

08001fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <UsageFault_Handler+0x4>

08001fe2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr

08001ffe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002010:	f000 f98c 	bl	800232c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}

08002018 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800201c:	2020      	movs	r0, #32
 800201e:	f000 fda9 	bl	8002b74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002022:	2040      	movs	r0, #64	; 0x40
 8002024:	f000 fda6 	bl	8002b74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002028:	2080      	movs	r0, #128	; 0x80
 800202a:	f000 fda3 	bl	8002b74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800202e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002032:	f000 fd9f 	bl	8002b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}

0800203a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800203e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002042:	f000 fd97 	bl	8002b74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002046:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800204a:	f000 fd93 	bl	8002b74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800204e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002052:	f000 fd8f 	bl	8002b74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002056:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800205a:	f000 fd8b 	bl	8002b74 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800205e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002062:	f000 fd87 	bl	8002b74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002070:	4802      	ldr	r0, [pc, #8]	; (800207c <OTG_FS_IRQHandler+0x10>)
 8002072:	f001 f827 	bl	80030c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000aac 	.word	0x20000aac

08002080 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return 1;
 8002084:	2301      	movs	r3, #1
}
 8002086:	4618      	mov	r0, r3
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <_kill>:

int _kill(int pid, int sig)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800209a:	f009 fc39 	bl	800b910 <__errno>
 800209e:	4603      	mov	r3, r0
 80020a0:	2216      	movs	r2, #22
 80020a2:	601a      	str	r2, [r3, #0]
  return -1;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}

080020b0 <_exit>:

void _exit (int status)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff ffe7 	bl	8002090 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020c2:	e7fe      	b.n	80020c2 <_exit+0x12>

080020c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e00a      	b.n	80020ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020d6:	f3af 8000 	nop.w
 80020da:	4601      	mov	r1, r0
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	60ba      	str	r2, [r7, #8]
 80020e2:	b2ca      	uxtb	r2, r1
 80020e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	3301      	adds	r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	dbf0      	blt.n	80020d6 <_read+0x12>
  }

  return len;
 80020f4:	687b      	ldr	r3, [r7, #4]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	e009      	b.n	8002124 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	60ba      	str	r2, [r7, #8]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4618      	mov	r0, r3
 800211a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	3301      	adds	r3, #1
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	dbf1      	blt.n	8002110 <_write+0x12>
  }
  return len;
 800212c:	687b      	ldr	r3, [r7, #4]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <_close>:

int _close(int file)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002142:	4618      	mov	r0, r3
 8002144:	370c      	adds	r7, #12
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr

0800214e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800215e:	605a      	str	r2, [r3, #4]
  return 0;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <_isatty>:

int _isatty(int file)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002176:	2301      	movs	r3, #1
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3714      	adds	r7, #20
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021a8:	4a14      	ldr	r2, [pc, #80]	; (80021fc <_sbrk+0x5c>)
 80021aa:	4b15      	ldr	r3, [pc, #84]	; (8002200 <_sbrk+0x60>)
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b4:	4b13      	ldr	r3, [pc, #76]	; (8002204 <_sbrk+0x64>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d102      	bne.n	80021c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021bc:	4b11      	ldr	r3, [pc, #68]	; (8002204 <_sbrk+0x64>)
 80021be:	4a12      	ldr	r2, [pc, #72]	; (8002208 <_sbrk+0x68>)
 80021c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <_sbrk+0x64>)
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4413      	add	r3, r2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d207      	bcs.n	80021e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d0:	f009 fb9e 	bl	800b910 <__errno>
 80021d4:	4603      	mov	r3, r0
 80021d6:	220c      	movs	r2, #12
 80021d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295
 80021de:	e009      	b.n	80021f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <_sbrk+0x64>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021e6:	4b07      	ldr	r3, [pc, #28]	; (8002204 <_sbrk+0x64>)
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4413      	add	r3, r2
 80021ee:	4a05      	ldr	r2, [pc, #20]	; (8002204 <_sbrk+0x64>)
 80021f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3718      	adds	r7, #24
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20018000 	.word	0x20018000
 8002200:	00000400 	.word	0x00000400
 8002204:	2000059c 	.word	0x2000059c
 8002208:	20001128 	.word	0x20001128

0800220c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <SystemInit+0x20>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	4a05      	ldr	r2, [pc, #20]	; (800222c <SystemInit+0x20>)
 8002218:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800221c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002230:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002268 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002234:	f7ff ffea 	bl	800220c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002238:	480c      	ldr	r0, [pc, #48]	; (800226c <LoopForever+0x6>)
  ldr r1, =_edata
 800223a:	490d      	ldr	r1, [pc, #52]	; (8002270 <LoopForever+0xa>)
  ldr r2, =_sidata
 800223c:	4a0d      	ldr	r2, [pc, #52]	; (8002274 <LoopForever+0xe>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002240:	e002      	b.n	8002248 <LoopCopyDataInit>

08002242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002246:	3304      	adds	r3, #4

08002248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800224c:	d3f9      	bcc.n	8002242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002250:	4c0a      	ldr	r4, [pc, #40]	; (800227c <LoopForever+0x16>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002254:	e001      	b.n	800225a <LoopFillZerobss>

08002256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002258:	3204      	adds	r2, #4

0800225a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800225c:	d3fb      	bcc.n	8002256 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800225e:	f009 fb5d 	bl	800b91c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002262:	f7ff f84f 	bl	8001304 <main>

08002266 <LoopForever>:

LoopForever:
    b LoopForever
 8002266:	e7fe      	b.n	8002266 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002268:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800226c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002270:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8002274:	0800deb4 	.word	0x0800deb4
  ldr r2, =_sbss
 8002278:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 800227c:	20001124 	.word	0x20001124

08002280 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002280:	e7fe      	b.n	8002280 <ADC1_2_IRQHandler>

08002282 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228c:	2003      	movs	r0, #3
 800228e:	f000 f961 	bl	8002554 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002292:	2000      	movs	r0, #0
 8002294:	f000 f80e 	bl	80022b4 <HAL_InitTick>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	71fb      	strb	r3, [r7, #7]
 80022a2:	e001      	b.n	80022a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022a4:	f7ff fc2a 	bl	8001afc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022a8:	79fb      	ldrb	r3, [r7, #7]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80022c0:	4b17      	ldr	r3, [pc, #92]	; (8002320 <HAL_InitTick+0x6c>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d023      	beq.n	8002310 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80022c8:	4b16      	ldr	r3, [pc, #88]	; (8002324 <HAL_InitTick+0x70>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <HAL_InitTick+0x6c>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f96d 	bl	80025be <HAL_SYSTICK_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10f      	bne.n	800230a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b0f      	cmp	r3, #15
 80022ee:	d809      	bhi.n	8002304 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f0:	2200      	movs	r2, #0
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	f04f 30ff 	mov.w	r0, #4294967295
 80022f8:	f000 f937 	bl	800256a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022fc:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <HAL_InitTick+0x74>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	e007      	b.n	8002314 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	e004      	b.n	8002314 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	e001      	b.n	8002314 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	20000008 	.word	0x20000008
 8002324:	20000000 	.word	0x20000000
 8002328:	20000004 	.word	0x20000004

0800232c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_IncTick+0x20>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_IncTick+0x24>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4413      	add	r3, r2
 800233c:	4a04      	ldr	r2, [pc, #16]	; (8002350 <HAL_IncTick+0x24>)
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000008 	.word	0x20000008
 8002350:	200005a0 	.word	0x200005a0

08002354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return uwTick;
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <HAL_GetTick+0x14>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	200005a0 	.word	0x200005a0

0800236c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002374:	f7ff ffee 	bl	8002354 <HAL_GetTick>
 8002378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d005      	beq.n	8002392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_Delay+0x44>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002392:	bf00      	nop
 8002394:	f7ff ffde 	bl	8002354 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d8f7      	bhi.n	8002394 <HAL_Delay+0x28>
  {
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000008 	.word	0x20000008

080023b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d0:	4013      	ands	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e6:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	60d3      	str	r3, [r2, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <__NVIC_GetPriorityGrouping+0x18>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	f003 0307 	and.w	r3, r3, #7
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	2b00      	cmp	r3, #0
 8002428:	db0b      	blt.n	8002442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	4907      	ldr	r1, [pc, #28]	; (8002450 <__NVIC_EnableIRQ+0x38>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2001      	movs	r0, #1
 800243a:	fa00 f202 	lsl.w	r2, r0, r2
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000e100 	.word	0xe000e100

08002454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	6039      	str	r1, [r7, #0]
 800245e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	2b00      	cmp	r3, #0
 8002466:	db0a      	blt.n	800247e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	b2da      	uxtb	r2, r3
 800246c:	490c      	ldr	r1, [pc, #48]	; (80024a0 <__NVIC_SetPriority+0x4c>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	0112      	lsls	r2, r2, #4
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	440b      	add	r3, r1
 8002478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800247c:	e00a      	b.n	8002494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4908      	ldr	r1, [pc, #32]	; (80024a4 <__NVIC_SetPriority+0x50>)
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	3b04      	subs	r3, #4
 800248c:	0112      	lsls	r2, r2, #4
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	440b      	add	r3, r1
 8002492:	761a      	strb	r2, [r3, #24]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000e100 	.word	0xe000e100
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f1c3 0307 	rsb	r3, r3, #7
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	bf28      	it	cs
 80024c6:	2304      	movcs	r3, #4
 80024c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2b06      	cmp	r3, #6
 80024d0:	d902      	bls.n	80024d8 <NVIC_EncodePriority+0x30>
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3b03      	subs	r3, #3
 80024d6:	e000      	b.n	80024da <NVIC_EncodePriority+0x32>
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	401a      	ands	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f0:	f04f 31ff 	mov.w	r1, #4294967295
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	43d9      	mvns	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	4313      	orrs	r3, r2
         );
}
 8002502:	4618      	mov	r0, r3
 8002504:	3724      	adds	r7, #36	; 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002520:	d301      	bcc.n	8002526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002522:	2301      	movs	r3, #1
 8002524:	e00f      	b.n	8002546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002526:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <SysTick_Config+0x40>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800252e:	210f      	movs	r1, #15
 8002530:	f04f 30ff 	mov.w	r0, #4294967295
 8002534:	f7ff ff8e 	bl	8002454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <SysTick_Config+0x40>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <SysTick_Config+0x40>)
 8002540:	2207      	movs	r2, #7
 8002542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	e000e010 	.word	0xe000e010

08002554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff29 	bl	80023b4 <__NVIC_SetPriorityGrouping>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800257c:	f7ff ff3e 	bl	80023fc <__NVIC_GetPriorityGrouping>
 8002580:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	6978      	ldr	r0, [r7, #20]
 8002588:	f7ff ff8e 	bl	80024a8 <NVIC_EncodePriority>
 800258c:	4602      	mov	r2, r0
 800258e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff5d 	bl	8002454 <__NVIC_SetPriority>
}
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff31 	bl	8002418 <__NVIC_EnableIRQ>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ffa2 	bl	8002510 <SysTick_Config>
 80025cc:	4603      	mov	r3, r0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e0ac      	b.n	8002744 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f8b2 	bl	8002758 <DFSDM_GetChannelFromInstance>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4a55      	ldr	r2, [pc, #340]	; (800274c <HAL_DFSDM_ChannelInit+0x174>)
 80025f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e09f      	b.n	8002744 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff fa9d 	bl	8001b44 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800260a:	4b51      	ldr	r3, [pc, #324]	; (8002750 <HAL_DFSDM_ChannelInit+0x178>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3301      	adds	r3, #1
 8002610:	4a4f      	ldr	r2, [pc, #316]	; (8002750 <HAL_DFSDM_ChannelInit+0x178>)
 8002612:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002614:	4b4e      	ldr	r3, [pc, #312]	; (8002750 <HAL_DFSDM_ChannelInit+0x178>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d125      	bne.n	8002668 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800261c:	4b4d      	ldr	r3, [pc, #308]	; (8002754 <HAL_DFSDM_ChannelInit+0x17c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a4c      	ldr	r2, [pc, #304]	; (8002754 <HAL_DFSDM_ChannelInit+0x17c>)
 8002622:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002626:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8002628:	4b4a      	ldr	r3, [pc, #296]	; (8002754 <HAL_DFSDM_ChannelInit+0x17c>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	4948      	ldr	r1, [pc, #288]	; (8002754 <HAL_DFSDM_ChannelInit+0x17c>)
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8002636:	4b47      	ldr	r3, [pc, #284]	; (8002754 <HAL_DFSDM_ChannelInit+0x17c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a46      	ldr	r2, [pc, #280]	; (8002754 <HAL_DFSDM_ChannelInit+0x17c>)
 800263c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8002640:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	791b      	ldrb	r3, [r3, #4]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d108      	bne.n	800265c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800264a:	4b42      	ldr	r3, [pc, #264]	; (8002754 <HAL_DFSDM_ChannelInit+0x17c>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	3b01      	subs	r3, #1
 8002654:	041b      	lsls	r3, r3, #16
 8002656:	493f      	ldr	r1, [pc, #252]	; (8002754 <HAL_DFSDM_ChannelInit+0x17c>)
 8002658:	4313      	orrs	r3, r2
 800265a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800265c:	4b3d      	ldr	r3, [pc, #244]	; (8002754 <HAL_DFSDM_ChannelInit+0x17c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a3c      	ldr	r2, [pc, #240]	; (8002754 <HAL_DFSDM_ChannelInit+0x17c>)
 8002662:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002666:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002676:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6819      	ldr	r1, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002686:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800268c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	430a      	orrs	r2, r1
 8002694:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 020f 	bic.w	r2, r2, #15
 80026a4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6819      	ldr	r1, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80026b4:	431a      	orrs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	689a      	ldr	r2, [r3, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80026cc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6899      	ldr	r1, [r3, #8]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026dc:	3b01      	subs	r3, #1
 80026de:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f002 0207 	and.w	r2, r2, #7
 80026f8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6859      	ldr	r1, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002704:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800270c:	431a      	orrs	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	430a      	orrs	r2, r1
 8002714:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002724:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f000 f810 	bl	8002758 <DFSDM_GetChannelFromInstance>
 8002738:	4602      	mov	r2, r0
 800273a:	4904      	ldr	r1, [pc, #16]	; (800274c <HAL_DFSDM_ChannelInit+0x174>)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	200005a8 	.word	0x200005a8
 8002750:	200005a4 	.word	0x200005a4
 8002754:	40016000 	.word	0x40016000

08002758 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002758:	b480      	push	{r7}
 800275a:	b085      	sub	sp, #20
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	4a1c      	ldr	r2, [pc, #112]	; (80027d4 <DFSDM_GetChannelFromInstance+0x7c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d102      	bne.n	800276e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002768:	2300      	movs	r3, #0
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	e02b      	b.n	80027c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a19      	ldr	r2, [pc, #100]	; (80027d8 <DFSDM_GetChannelFromInstance+0x80>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d102      	bne.n	800277c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002776:	2301      	movs	r3, #1
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	e024      	b.n	80027c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	4a17      	ldr	r2, [pc, #92]	; (80027dc <DFSDM_GetChannelFromInstance+0x84>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d102      	bne.n	800278a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002784:	2302      	movs	r3, #2
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	e01d      	b.n	80027c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a14      	ldr	r2, [pc, #80]	; (80027e0 <DFSDM_GetChannelFromInstance+0x88>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d102      	bne.n	8002798 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002792:	2304      	movs	r3, #4
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	e016      	b.n	80027c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a12      	ldr	r2, [pc, #72]	; (80027e4 <DFSDM_GetChannelFromInstance+0x8c>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d102      	bne.n	80027a6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80027a0:	2305      	movs	r3, #5
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e00f      	b.n	80027c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <DFSDM_GetChannelFromInstance+0x90>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d102      	bne.n	80027b4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80027ae:	2306      	movs	r3, #6
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	e008      	b.n	80027c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <DFSDM_GetChannelFromInstance+0x94>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d102      	bne.n	80027c2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80027bc:	2307      	movs	r3, #7
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	e001      	b.n	80027c6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80027c2:	2303      	movs	r3, #3
 80027c4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr
 80027d4:	40016000 	.word	0x40016000
 80027d8:	40016020 	.word	0x40016020
 80027dc:	40016040 	.word	0x40016040
 80027e0:	40016080 	.word	0x40016080
 80027e4:	400160a0 	.word	0x400160a0
 80027e8:	400160c0 	.word	0x400160c0
 80027ec:	400160e0 	.word	0x400160e0

080027f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027fe:	e17f      	b.n	8002b00 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2101      	movs	r1, #1
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	fa01 f303 	lsl.w	r3, r1, r3
 800280c:	4013      	ands	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8171 	beq.w	8002afa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b01      	cmp	r3, #1
 8002822:	d005      	beq.n	8002830 <HAL_GPIO_Init+0x40>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d130      	bne.n	8002892 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	005b      	lsls	r3, r3, #1
 800283a:	2203      	movs	r2, #3
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	4013      	ands	r3, r2
 8002846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	005b      	lsls	r3, r3, #1
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	693a      	ldr	r2, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	693a      	ldr	r2, [r7, #16]
 800285e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002866:	2201      	movs	r2, #1
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	43db      	mvns	r3, r3
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	4013      	ands	r3, r2
 8002874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	f003 0201 	and.w	r2, r3, #1
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f003 0303 	and.w	r3, r3, #3
 800289a:	2b03      	cmp	r3, #3
 800289c:	d118      	bne.n	80028d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028a4:	2201      	movs	r2, #1
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	08db      	lsrs	r3, r3, #3
 80028ba:	f003 0201 	and.w	r2, r3, #1
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f003 0303 	and.w	r3, r3, #3
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d017      	beq.n	800290c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	4013      	ands	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 0303 	and.w	r3, r3, #3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d123      	bne.n	8002960 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	08da      	lsrs	r2, r3, #3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3208      	adds	r2, #8
 8002920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002924:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	220f      	movs	r2, #15
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	691a      	ldr	r2, [r3, #16]
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	08da      	lsrs	r2, r3, #3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	3208      	adds	r2, #8
 800295a:	6939      	ldr	r1, [r7, #16]
 800295c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	2203      	movs	r2, #3
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	43db      	mvns	r3, r3
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	4013      	ands	r3, r2
 8002976:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f003 0203 	and.w	r2, r3, #3
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 80ac 	beq.w	8002afa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a2:	4b5f      	ldr	r3, [pc, #380]	; (8002b20 <HAL_GPIO_Init+0x330>)
 80029a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029a6:	4a5e      	ldr	r2, [pc, #376]	; (8002b20 <HAL_GPIO_Init+0x330>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6613      	str	r3, [r2, #96]	; 0x60
 80029ae:	4b5c      	ldr	r3, [pc, #368]	; (8002b20 <HAL_GPIO_Init+0x330>)
 80029b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	60bb      	str	r3, [r7, #8]
 80029b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029ba:	4a5a      	ldr	r2, [pc, #360]	; (8002b24 <HAL_GPIO_Init+0x334>)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3302      	adds	r3, #2
 80029c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f003 0303 	and.w	r3, r3, #3
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	220f      	movs	r2, #15
 80029d2:	fa02 f303 	lsl.w	r3, r2, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	4013      	ands	r3, r2
 80029dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80029e4:	d025      	beq.n	8002a32 <HAL_GPIO_Init+0x242>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4f      	ldr	r2, [pc, #316]	; (8002b28 <HAL_GPIO_Init+0x338>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d01f      	beq.n	8002a2e <HAL_GPIO_Init+0x23e>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4e      	ldr	r2, [pc, #312]	; (8002b2c <HAL_GPIO_Init+0x33c>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d019      	beq.n	8002a2a <HAL_GPIO_Init+0x23a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4d      	ldr	r2, [pc, #308]	; (8002b30 <HAL_GPIO_Init+0x340>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d013      	beq.n	8002a26 <HAL_GPIO_Init+0x236>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4a4c      	ldr	r2, [pc, #304]	; (8002b34 <HAL_GPIO_Init+0x344>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00d      	beq.n	8002a22 <HAL_GPIO_Init+0x232>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4b      	ldr	r2, [pc, #300]	; (8002b38 <HAL_GPIO_Init+0x348>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d007      	beq.n	8002a1e <HAL_GPIO_Init+0x22e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4a      	ldr	r2, [pc, #296]	; (8002b3c <HAL_GPIO_Init+0x34c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d101      	bne.n	8002a1a <HAL_GPIO_Init+0x22a>
 8002a16:	2306      	movs	r3, #6
 8002a18:	e00c      	b.n	8002a34 <HAL_GPIO_Init+0x244>
 8002a1a:	2307      	movs	r3, #7
 8002a1c:	e00a      	b.n	8002a34 <HAL_GPIO_Init+0x244>
 8002a1e:	2305      	movs	r3, #5
 8002a20:	e008      	b.n	8002a34 <HAL_GPIO_Init+0x244>
 8002a22:	2304      	movs	r3, #4
 8002a24:	e006      	b.n	8002a34 <HAL_GPIO_Init+0x244>
 8002a26:	2303      	movs	r3, #3
 8002a28:	e004      	b.n	8002a34 <HAL_GPIO_Init+0x244>
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	e002      	b.n	8002a34 <HAL_GPIO_Init+0x244>
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e000      	b.n	8002a34 <HAL_GPIO_Init+0x244>
 8002a32:	2300      	movs	r3, #0
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	f002 0203 	and.w	r2, r2, #3
 8002a3a:	0092      	lsls	r2, r2, #2
 8002a3c:	4093      	lsls	r3, r2
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a44:	4937      	ldr	r1, [pc, #220]	; (8002b24 <HAL_GPIO_Init+0x334>)
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	089b      	lsrs	r3, r3, #2
 8002a4a:	3302      	adds	r3, #2
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a52:	4b3b      	ldr	r3, [pc, #236]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a76:	4a32      	ldr	r2, [pc, #200]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a7c:	4b30      	ldr	r3, [pc, #192]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	43db      	mvns	r3, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d003      	beq.n	8002aa0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002aa0:	4a27      	ldr	r2, [pc, #156]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002aa6:	4b26      	ldr	r3, [pc, #152]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d003      	beq.n	8002aca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002aca:	4a1d      	ldr	r2, [pc, #116]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ad0:	4b1b      	ldr	r3, [pc, #108]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	4013      	ands	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002af4:	4a12      	ldr	r2, [pc, #72]	; (8002b40 <HAL_GPIO_Init+0x350>)
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	3301      	adds	r3, #1
 8002afe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	fa22 f303 	lsr.w	r3, r2, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	f47f ae78 	bne.w	8002800 <HAL_GPIO_Init+0x10>
  }
}
 8002b10:	bf00      	nop
 8002b12:	bf00      	nop
 8002b14:	371c      	adds	r7, #28
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40021000 	.word	0x40021000
 8002b24:	40010000 	.word	0x40010000
 8002b28:	48000400 	.word	0x48000400
 8002b2c:	48000800 	.word	0x48000800
 8002b30:	48000c00 	.word	0x48000c00
 8002b34:	48001000 	.word	0x48001000
 8002b38:	48001400 	.word	0x48001400
 8002b3c:	48001800 	.word	0x48001800
 8002b40:	40010400 	.word	0x40010400

08002b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	807b      	strh	r3, [r7, #2]
 8002b50:	4613      	mov	r3, r2
 8002b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b54:	787b      	ldrb	r3, [r7, #1]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b5a:	887a      	ldrh	r2, [r7, #2]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b60:	e002      	b.n	8002b68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b62:	887a      	ldrh	r2, [r7, #2]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b80:	695a      	ldr	r2, [r3, #20]
 8002b82:	88fb      	ldrh	r3, [r7, #6]
 8002b84:	4013      	ands	r3, r2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d006      	beq.n	8002b98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b8a:	4a05      	ldr	r2, [pc, #20]	; (8002ba0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b8c:	88fb      	ldrh	r3, [r7, #6]
 8002b8e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b90:	88fb      	ldrh	r3, [r7, #6]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 f806 	bl	8002ba4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40010400 	.word	0x40010400

08002ba4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e08d      	b.n	8002ce8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d106      	bne.n	8002be6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff f813 	bl	8001c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2224      	movs	r2, #36	; 0x24
 8002bea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 0201 	bic.w	r2, r2, #1
 8002bfc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002c0a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c1a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d107      	bne.n	8002c34 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c30:	609a      	str	r2, [r3, #8]
 8002c32:	e006      	b.n	8002c42 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002c40:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d108      	bne.n	8002c5c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c58:	605a      	str	r2, [r3, #4]
 8002c5a:	e007      	b.n	8002c6c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	685a      	ldr	r2, [r3, #4]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c7e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c8e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691a      	ldr	r2, [r3, #16]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	69d9      	ldr	r1, [r3, #28]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1a      	ldr	r2, [r3, #32]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f042 0201 	orr.w	r2, r2, #1
 8002cc8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2220      	movs	r2, #32
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ce6:	2300      	movs	r3, #0
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
 8002cf8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b20      	cmp	r3, #32
 8002d04:	d138      	bne.n	8002d78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e032      	b.n	8002d7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	; 0x24
 8002d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 0201 	bic.w	r2, r2, #1
 8002d32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	6819      	ldr	r1, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f042 0201 	orr.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d74:	2300      	movs	r3, #0
 8002d76:	e000      	b.n	8002d7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d78:	2302      	movs	r3, #2
  }
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr

08002d86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b085      	sub	sp, #20
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	d139      	bne.n	8002e10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002da6:	2302      	movs	r3, #2
 8002da8:	e033      	b.n	8002e12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2224      	movs	r2, #36	; 0x24
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f022 0201 	bic.w	r2, r2, #1
 8002dc8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002dd8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	68fa      	ldr	r2, [r7, #12]
 8002de0:	4313      	orrs	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68fa      	ldr	r2, [r7, #12]
 8002dea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	e000      	b.n	8002e12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e10:	2302      	movs	r3, #2
  }
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3714      	adds	r7, #20
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002e1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e20:	b08f      	sub	sp, #60	; 0x3c
 8002e22:	af0a      	add	r7, sp, #40	; 0x28
 8002e24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e116      	b.n	800305e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d106      	bne.n	8002e50 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f007 fb52 	bl	800a4f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2203      	movs	r2, #3
 8002e54:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d102      	bne.n	8002e6a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f004 f96b 	bl	800714a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	603b      	str	r3, [r7, #0]
 8002e7a:	687e      	ldr	r6, [r7, #4]
 8002e7c:	466d      	mov	r5, sp
 8002e7e:	f106 0410 	add.w	r4, r6, #16
 8002e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e8a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e8e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e92:	1d33      	adds	r3, r6, #4
 8002e94:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e96:	6838      	ldr	r0, [r7, #0]
 8002e98:	f004 f87d 	bl	8006f96 <USB_CoreInit>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e0d7      	b.n	800305e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f004 f959 	bl	800716c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]
 8002ebe:	e04a      	b.n	8002f56 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ec0:	7bfa      	ldrb	r2, [r7, #15]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	00db      	lsls	r3, r3, #3
 8002ec8:	4413      	add	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	333d      	adds	r3, #61	; 0x3d
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ed4:	7bfa      	ldrb	r2, [r7, #15]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	333c      	adds	r3, #60	; 0x3c
 8002ee4:	7bfa      	ldrb	r2, [r7, #15]
 8002ee6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	b298      	uxth	r0, r3
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	3356      	adds	r3, #86	; 0x56
 8002efc:	4602      	mov	r2, r0
 8002efe:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002f00:	7bfa      	ldrb	r2, [r7, #15]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4413      	add	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	3340      	adds	r3, #64	; 0x40
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	3344      	adds	r3, #68	; 0x44
 8002f24:	2200      	movs	r2, #0
 8002f26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002f28:	7bfa      	ldrb	r2, [r7, #15]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4413      	add	r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	3348      	adds	r3, #72	; 0x48
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002f3c:	7bfa      	ldrb	r2, [r7, #15]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4413      	add	r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	334c      	adds	r3, #76	; 0x4c
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	3301      	adds	r3, #1
 8002f54:	73fb      	strb	r3, [r7, #15]
 8002f56:	7bfa      	ldrb	r2, [r7, #15]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d3af      	bcc.n	8002ec0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	73fb      	strb	r3, [r7, #15]
 8002f64:	e044      	b.n	8002ff0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002f66:	7bfa      	ldrb	r2, [r7, #15]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002f78:	2200      	movs	r2, #0
 8002f7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002f7c:	7bfa      	ldrb	r2, [r7, #15]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002f8e:	7bfa      	ldrb	r2, [r7, #15]
 8002f90:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002f92:	7bfa      	ldrb	r2, [r7, #15]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002fa8:	7bfa      	ldrb	r2, [r7, #15]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002fba:	2200      	movs	r2, #0
 8002fbc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002fbe:	7bfa      	ldrb	r2, [r7, #15]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002fd4:	7bfa      	ldrb	r2, [r7, #15]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4413      	add	r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fea:	7bfb      	ldrb	r3, [r7, #15]
 8002fec:	3301      	adds	r3, #1
 8002fee:	73fb      	strb	r3, [r7, #15]
 8002ff0:	7bfa      	ldrb	r2, [r7, #15]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d3b5      	bcc.n	8002f66 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	603b      	str	r3, [r7, #0]
 8003000:	687e      	ldr	r6, [r7, #4]
 8003002:	466d      	mov	r5, sp
 8003004:	f106 0410 	add.w	r4, r6, #16
 8003008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800300a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800300c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800300e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003010:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003014:	e885 0003 	stmia.w	r5, {r0, r1}
 8003018:	1d33      	adds	r3, r6, #4
 800301a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800301c:	6838      	ldr	r0, [r7, #0]
 800301e:	f004 f8f1 	bl	8007204 <USB_DevInit>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2202      	movs	r2, #2
 800302c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e014      	b.n	800305e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003048:	2b01      	cmp	r3, #1
 800304a:	d102      	bne.n	8003052 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f001 f851 	bl	80040f4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4618      	mov	r0, r3
 8003058:	f005 f89f 	bl	800819a <USB_DevDisconnect>

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003066 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_PCD_Start+0x1c>
 800307e:	2302      	movs	r3, #2
 8003080:	e01c      	b.n	80030bc <HAL_PCD_Start+0x56>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	2b01      	cmp	r3, #1
 8003090:	d105      	bne.n	800309e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f004 f840 	bl	8007128 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f005 f853 	bl	8008158 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b08d      	sub	sp, #52	; 0x34
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030d2:	6a3b      	ldr	r3, [r7, #32]
 80030d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f005 f911 	bl	8008302 <USB_GetMode>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 847e 	bne.w	80039e4 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4618      	mov	r0, r3
 80030ee:	f005 f875 	bl	80081dc <USB_ReadInterrupts>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8474 	beq.w	80039e2 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f005 f862 	bl	80081dc <USB_ReadInterrupts>
 8003118:	4603      	mov	r3, r0
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b02      	cmp	r3, #2
 8003120:	d107      	bne.n	8003132 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695a      	ldr	r2, [r3, #20]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f002 0202 	and.w	r2, r2, #2
 8003130:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f005 f850 	bl	80081dc <USB_ReadInterrupts>
 800313c:	4603      	mov	r3, r0
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b10      	cmp	r3, #16
 8003144:	d161      	bne.n	800320a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0210 	bic.w	r2, r2, #16
 8003154:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f003 020f 	and.w	r2, r3, #15
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	4413      	add	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	4413      	add	r3, r2
 8003172:	3304      	adds	r3, #4
 8003174:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	0c5b      	lsrs	r3, r3, #17
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	2b02      	cmp	r3, #2
 8003180:	d124      	bne.n	80031cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d035      	beq.n	80031fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003198:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800319c:	b29b      	uxth	r3, r3
 800319e:	461a      	mov	r2, r3
 80031a0:	6a38      	ldr	r0, [r7, #32]
 80031a2:	f004 fe87 	bl	8007eb4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	091b      	lsrs	r3, r3, #4
 80031ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031b2:	441a      	add	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	695a      	ldr	r2, [r3, #20]
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	091b      	lsrs	r3, r3, #4
 80031c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031c4:	441a      	add	r2, r3
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	615a      	str	r2, [r3, #20]
 80031ca:	e016      	b.n	80031fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	0c5b      	lsrs	r3, r3, #17
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	2b06      	cmp	r3, #6
 80031d6:	d110      	bne.n	80031fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031de:	2208      	movs	r2, #8
 80031e0:	4619      	mov	r1, r3
 80031e2:	6a38      	ldr	r0, [r7, #32]
 80031e4:	f004 fe66 	bl	8007eb4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	695a      	ldr	r2, [r3, #20]
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	091b      	lsrs	r3, r3, #4
 80031f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80031f4:	441a      	add	r2, r3
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0210 	orr.w	r2, r2, #16
 8003208:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f004 ffe4 	bl	80081dc <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800321a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800321e:	f040 80a7 	bne.w	8003370 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f004 ffe9 	bl	8008202 <USB_ReadDevAllOutEpInterrupt>
 8003230:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003232:	e099      	b.n	8003368 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 808e 	beq.w	800335c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	4611      	mov	r1, r2
 800324a:	4618      	mov	r0, r3
 800324c:	f005 f80d 	bl	800826a <USB_ReadDevOutEPInterrupt>
 8003250:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00c      	beq.n	8003276 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003268:	461a      	mov	r2, r3
 800326a:	2301      	movs	r3, #1
 800326c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800326e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 fe65 	bl	8003f40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00c      	beq.n	800329a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	4413      	add	r3, r2
 8003288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800328c:	461a      	mov	r2, r3
 800328e:	2308      	movs	r3, #8
 8003290:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003292:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f000 fea1 	bl	8003fdc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d008      	beq.n	80032b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80032a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b0:	461a      	mov	r2, r3
 80032b2:	2310      	movs	r3, #16
 80032b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d030      	beq.n	8003322 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80032c0:	6a3b      	ldr	r3, [r7, #32]
 80032c2:	695b      	ldr	r3, [r3, #20]
 80032c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c8:	2b80      	cmp	r3, #128	; 0x80
 80032ca:	d109      	bne.n	80032e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	69fa      	ldr	r2, [r7, #28]
 80032d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80032e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e2:	4613      	mov	r3, r2
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4413      	add	r3, r2
 80032f2:	3304      	adds	r3, #4
 80032f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	78db      	ldrb	r3, [r3, #3]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d108      	bne.n	8003310 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	2200      	movs	r2, #0
 8003302:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003306:	b2db      	uxtb	r3, r3
 8003308:	4619      	mov	r1, r3
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f007 fa58 	bl	800a7c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	4413      	add	r3, r2
 8003318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331c:	461a      	mov	r2, r3
 800331e:	2302      	movs	r3, #2
 8003320:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003338:	461a      	mov	r2, r3
 800333a:	2320      	movs	r3, #32
 800333c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d009      	beq.n	800335c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	015a      	lsls	r2, r3, #5
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	4413      	add	r3, r2
 8003350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003354:	461a      	mov	r2, r3
 8003356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800335a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	3301      	adds	r3, #1
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336a:	2b00      	cmp	r3, #0
 800336c:	f47f af62 	bne.w	8003234 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4618      	mov	r0, r3
 8003376:	f004 ff31 	bl	80081dc <USB_ReadInterrupts>
 800337a:	4603      	mov	r3, r0
 800337c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003380:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003384:	f040 80a4 	bne.w	80034d0 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f004 ff52 	bl	8008236 <USB_ReadDevAllInEpInterrupt>
 8003392:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003394:	2300      	movs	r3, #0
 8003396:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003398:	e096      	b.n	80034c8 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	f003 0301 	and.w	r3, r3, #1
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f000 808b 	beq.w	80034bc <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	4611      	mov	r1, r2
 80033b0:	4618      	mov	r0, r3
 80033b2:	f004 ff78 	bl	80082a6 <USB_ReadDevInEPInterrupt>
 80033b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d020      	beq.n	8003404 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	f003 030f 	and.w	r3, r3, #15
 80033c8:	2201      	movs	r2, #1
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	43db      	mvns	r3, r3
 80033dc:	69f9      	ldr	r1, [r7, #28]
 80033de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033e2:	4013      	ands	r3, r2
 80033e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80033e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033f2:	461a      	mov	r2, r3
 80033f4:	2301      	movs	r3, #1
 80033f6:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	4619      	mov	r1, r3
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f007 f949 	bl	800a696 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	f003 0308 	and.w	r3, r3, #8
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	015a      	lsls	r2, r3, #5
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	4413      	add	r3, r2
 8003416:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800341a:	461a      	mov	r2, r3
 800341c:	2308      	movs	r3, #8
 800341e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	d008      	beq.n	800343c <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003436:	461a      	mov	r2, r3
 8003438:	2310      	movs	r3, #16
 800343a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d008      	beq.n	8003458 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	015a      	lsls	r2, r3, #5
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003452:	461a      	mov	r2, r3
 8003454:	2340      	movs	r3, #64	; 0x40
 8003456:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d023      	beq.n	80034aa <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003462:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003464:	6a38      	ldr	r0, [r7, #32]
 8003466:	f004 f80f 	bl	8007488 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800346a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	3338      	adds	r3, #56	; 0x38
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	4413      	add	r3, r2
 800347a:	3304      	adds	r3, #4
 800347c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	78db      	ldrb	r3, [r3, #3]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d108      	bne.n	8003498 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800348c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348e:	b2db      	uxtb	r3, r3
 8003490:	4619      	mov	r1, r3
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f007 f9a6 	bl	800a7e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a4:	461a      	mov	r2, r3
 80034a6:	2302      	movs	r3, #2
 80034a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80034b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f000 fcba 	bl	8003e30 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80034bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034be:	3301      	adds	r3, #1
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80034c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c4:	085b      	lsrs	r3, r3, #1
 80034c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f47f af65 	bne.w	800339a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f004 fe81 	bl	80081dc <USB_ReadInterrupts>
 80034da:	4603      	mov	r3, r0
 80034dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034e4:	d122      	bne.n	800352c <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003500:	2b01      	cmp	r3, #1
 8003502:	d108      	bne.n	8003516 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800350c:	2100      	movs	r1, #0
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f007 fbc6 	bl	800aca0 <HAL_PCDEx_LPM_Callback>
 8003514:	e002      	b.n	800351c <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f007 f92a 	bl	800a770 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695a      	ldr	r2, [r3, #20]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800352a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f004 fe53 	bl	80081dc <USB_ReadInterrupts>
 8003536:	4603      	mov	r3, r0
 8003538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800353c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003540:	d112      	bne.n	8003568 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b01      	cmp	r3, #1
 8003550:	d102      	bne.n	8003558 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f007 f8e6 	bl	800a724 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	695a      	ldr	r2, [r3, #20]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003566:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f004 fe35 	bl	80081dc <USB_ReadInterrupts>
 8003572:	4603      	mov	r3, r0
 8003574:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003578:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800357c:	d121      	bne.n	80035c2 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	695a      	ldr	r2, [r3, #20]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800358c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003594:	2b00      	cmp	r3, #0
 8003596:	d111      	bne.n	80035bc <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a6:	089b      	lsrs	r3, r3, #2
 80035a8:	f003 020f 	and.w	r2, r3, #15
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80035b2:	2101      	movs	r1, #1
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f007 fb73 	bl	800aca0 <HAL_PCDEx_LPM_Callback>
 80035ba:	e002      	b.n	80035c2 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f007 f8b1 	bl	800a724 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f004 fe08 	bl	80081dc <USB_ReadInterrupts>
 80035cc:	4603      	mov	r3, r0
 80035ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d6:	f040 80b5 	bne.w	8003744 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	69fa      	ldr	r2, [r7, #28]
 80035e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2110      	movs	r1, #16
 80035f4:	4618      	mov	r0, r3
 80035f6:	f003 ff47 	bl	8007488 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035fa:	2300      	movs	r3, #0
 80035fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035fe:	e046      	b.n	800368e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360c:	461a      	mov	r2, r3
 800360e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003612:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003624:	0151      	lsls	r1, r2, #5
 8003626:	69fa      	ldr	r2, [r7, #28]
 8003628:	440a      	add	r2, r1
 800362a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800362e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003632:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	015a      	lsls	r2, r3, #5
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	4413      	add	r3, r2
 800363c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003640:	461a      	mov	r2, r3
 8003642:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003646:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003658:	0151      	lsls	r1, r2, #5
 800365a:	69fa      	ldr	r2, [r7, #28]
 800365c:	440a      	add	r2, r1
 800365e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003662:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003666:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366a:	015a      	lsls	r2, r3, #5
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	4413      	add	r3, r2
 8003670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003678:	0151      	lsls	r1, r2, #5
 800367a:	69fa      	ldr	r2, [r7, #28]
 800367c:	440a      	add	r2, r1
 800367e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003682:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003686:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368a:	3301      	adds	r3, #1
 800368c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003694:	429a      	cmp	r2, r3
 8003696:	d3b3      	bcc.n	8003600 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	69fa      	ldr	r2, [r7, #28]
 80036a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80036aa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d016      	beq.n	80036e2 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036c4:	f043 030b 	orr.w	r3, r3, #11
 80036c8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036da:	f043 030b 	orr.w	r3, r3, #11
 80036de:	6453      	str	r3, [r2, #68]	; 0x44
 80036e0:	e015      	b.n	800370e <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	69fa      	ldr	r2, [r7, #28]
 80036ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80036f4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80036f8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003708:	f043 030b 	orr.w	r3, r3, #11
 800370c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800371c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003720:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800372c:	4619      	mov	r1, r3
 800372e:	4610      	mov	r0, r2
 8003730:	f004 fe18 	bl	8008364 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695a      	ldr	r2, [r3, #20]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f004 fd47 	bl	80081dc <USB_ReadInterrupts>
 800374e:	4603      	mov	r3, r0
 8003750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003758:	d124      	bne.n	80037a4 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f004 fddd 	bl	800831e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f003 ff0a 	bl	8007582 <USB_GetDevSpeed>
 800376e:	4603      	mov	r3, r0
 8003770:	461a      	mov	r2, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681c      	ldr	r4, [r3, #0]
 800377a:	f001 fb87 	bl	8004e8c <HAL_RCC_GetHCLKFreq>
 800377e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003784:	b2db      	uxtb	r3, r3
 8003786:	461a      	mov	r2, r3
 8003788:	4620      	mov	r0, r4
 800378a:	f003 fc31 	bl	8006ff0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f006 ffa9 	bl	800a6e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80037a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f004 fd17 	bl	80081dc <USB_ReadInterrupts>
 80037ae:	4603      	mov	r3, r0
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d10a      	bne.n	80037ce <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f006 ff86 	bl	800a6ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f002 0208 	and.w	r2, r2, #8
 80037cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4618      	mov	r0, r3
 80037d4:	f004 fd02 	bl	80081dc <USB_ReadInterrupts>
 80037d8:	4603      	mov	r3, r0
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b80      	cmp	r3, #128	; 0x80
 80037e0:	d122      	bne.n	8003828 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80037e2:	6a3b      	ldr	r3, [r7, #32]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037ee:	2301      	movs	r3, #1
 80037f0:	627b      	str	r3, [r7, #36]	; 0x24
 80037f2:	e014      	b.n	800381e <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d105      	bne.n	8003818 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	b2db      	uxtb	r3, r3
 8003810:	4619      	mov	r1, r3
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f000 fadb 	bl	8003dce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	3301      	adds	r3, #1
 800381c:	627b      	str	r3, [r7, #36]	; 0x24
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003824:	429a      	cmp	r2, r3
 8003826:	d3e5      	bcc.n	80037f4 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f004 fcd5 	bl	80081dc <USB_ReadInterrupts>
 8003832:	4603      	mov	r3, r0
 8003834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800383c:	d13b      	bne.n	80038b6 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800383e:	2301      	movs	r3, #1
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
 8003842:	e02b      	b.n	800389c <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	015a      	lsls	r2, r3, #5
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	4413      	add	r3, r2
 800384c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003858:	4613      	mov	r3, r2
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	3340      	adds	r3, #64	; 0x40
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d115      	bne.n	8003896 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800386a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800386c:	2b00      	cmp	r3, #0
 800386e:	da12      	bge.n	8003896 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003874:	4613      	mov	r3, r2
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	333f      	adds	r3, #63	; 0x3f
 8003880:	2201      	movs	r2, #1
 8003882:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	b2db      	uxtb	r3, r3
 8003888:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800388c:	b2db      	uxtb	r3, r3
 800388e:	4619      	mov	r1, r3
 8003890:	6878      	ldr	r0, [r7, #4]
 8003892:	f000 fa9c 	bl	8003dce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	3301      	adds	r3, #1
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d3ce      	bcc.n	8003844 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	695a      	ldr	r2, [r3, #20]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80038b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f004 fc8e 	bl	80081dc <USB_ReadInterrupts>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038ca:	d155      	bne.n	8003978 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038cc:	2301      	movs	r3, #1
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
 80038d0:	e045      	b.n	800395e <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80038d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d4:	015a      	lsls	r2, r3, #5
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	4413      	add	r3, r2
 80038da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e6:	4613      	mov	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	440b      	add	r3, r1
 80038f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d12e      	bne.n	8003958 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038fa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	da2b      	bge.n	8003958 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800390c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003910:	429a      	cmp	r2, r3
 8003912:	d121      	bne.n	8003958 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003918:	4613      	mov	r3, r2
 800391a:	00db      	lsls	r3, r3, #3
 800391c:	4413      	add	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003926:	2201      	movs	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	699b      	ldr	r3, [r3, #24]
 800392e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003932:	6a3b      	ldr	r3, [r7, #32]
 8003934:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10a      	bne.n	8003958 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003950:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003954:	6053      	str	r3, [r2, #4]
            break;
 8003956:	e007      	b.n	8003968 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800395a:	3301      	adds	r3, #1
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003964:	429a      	cmp	r2, r3
 8003966:	d3b4      	bcc.n	80038d2 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003976:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f004 fc2d 	bl	80081dc <USB_ReadInterrupts>
 8003982:	4603      	mov	r3, r0
 8003984:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800398c:	d10a      	bne.n	80039a4 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f006 ff3a 	bl	800a808 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80039a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f004 fc17 	bl	80081dc <USB_ReadInterrupts>
 80039ae:	4603      	mov	r3, r0
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d115      	bne.n	80039e4 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d002      	beq.n	80039d0 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f006 ff2a 	bl	800a824 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6859      	ldr	r1, [r3, #4]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	430a      	orrs	r2, r1
 80039de:	605a      	str	r2, [r3, #4]
 80039e0:	e000      	b.n	80039e4 <HAL_PCD_IRQHandler+0x920>
      return;
 80039e2:	bf00      	nop
    }
  }
}
 80039e4:	3734      	adds	r7, #52	; 0x34
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd90      	pop	{r4, r7, pc}

080039ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	460b      	mov	r3, r1
 80039f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d101      	bne.n	8003a04 <HAL_PCD_SetAddress+0x1a>
 8003a00:	2302      	movs	r3, #2
 8003a02:	e013      	b.n	8003a2c <HAL_PCD_SetAddress+0x42>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	78fa      	ldrb	r2, [r7, #3]
 8003a10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f004 fb75 	bl	800810c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3708      	adds	r7, #8
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}

08003a34 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b084      	sub	sp, #16
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	4608      	mov	r0, r1
 8003a3e:	4611      	mov	r1, r2
 8003a40:	461a      	mov	r2, r3
 8003a42:	4603      	mov	r3, r0
 8003a44:	70fb      	strb	r3, [r7, #3]
 8003a46:	460b      	mov	r3, r1
 8003a48:	803b      	strh	r3, [r7, #0]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	da0f      	bge.n	8003a7a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a5a:	78fb      	ldrb	r3, [r7, #3]
 8003a5c:	f003 020f 	and.w	r2, r3, #15
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	3338      	adds	r3, #56	; 0x38
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	3304      	adds	r3, #4
 8003a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2201      	movs	r2, #1
 8003a76:	705a      	strb	r2, [r3, #1]
 8003a78:	e00f      	b.n	8003a9a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a7a:	78fb      	ldrb	r3, [r7, #3]
 8003a7c:	f003 020f 	and.w	r2, r3, #15
 8003a80:	4613      	mov	r3, r2
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	4413      	add	r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	4413      	add	r3, r2
 8003a90:	3304      	adds	r3, #4
 8003a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003aa6:	883a      	ldrh	r2, [r7, #0]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	78ba      	ldrb	r2, [r7, #2]
 8003ab0:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	785b      	ldrb	r3, [r3, #1]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d004      	beq.n	8003ac4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ac4:	78bb      	ldrb	r3, [r7, #2]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d102      	bne.n	8003ad0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d101      	bne.n	8003ade <HAL_PCD_EP_Open+0xaa>
 8003ada:	2302      	movs	r3, #2
 8003adc:	e00e      	b.n	8003afc <HAL_PCD_EP_Open+0xc8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68f9      	ldr	r1, [r7, #12]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f003 fd67 	bl	80075c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003afa:	7afb      	ldrb	r3, [r7, #11]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	da0f      	bge.n	8003b38 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b18:	78fb      	ldrb	r3, [r7, #3]
 8003b1a:	f003 020f 	and.w	r2, r3, #15
 8003b1e:	4613      	mov	r3, r2
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4413      	add	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	3338      	adds	r3, #56	; 0x38
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3304      	adds	r3, #4
 8003b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2201      	movs	r2, #1
 8003b34:	705a      	strb	r2, [r3, #1]
 8003b36:	e00f      	b.n	8003b58 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b38:	78fb      	ldrb	r3, [r7, #3]
 8003b3a:	f003 020f 	and.w	r2, r3, #15
 8003b3e:	4613      	mov	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	3304      	adds	r3, #4
 8003b50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b58:	78fb      	ldrb	r3, [r7, #3]
 8003b5a:	f003 030f 	and.w	r3, r3, #15
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <HAL_PCD_EP_Close+0x6e>
 8003b6e:	2302      	movs	r3, #2
 8003b70:	e00e      	b.n	8003b90 <HAL_PCD_EP_Close+0x8c>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68f9      	ldr	r1, [r7, #12]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f003 fda5 	bl	80076d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b086      	sub	sp, #24
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	607a      	str	r2, [r7, #4]
 8003ba2:	603b      	str	r3, [r7, #0]
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ba8:	7afb      	ldrb	r3, [r7, #11]
 8003baa:	f003 020f 	and.w	r2, r3, #15
 8003bae:	4613      	mov	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4413      	add	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	687a      	ldr	r2, [r7, #4]
 8003bc6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	683a      	ldr	r2, [r7, #0]
 8003bcc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003bda:	7afb      	ldrb	r3, [r7, #11]
 8003bdc:	f003 030f 	and.w	r3, r3, #15
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6979      	ldr	r1, [r7, #20]
 8003bec:	4618      	mov	r0, r3
 8003bee:	f003 fe4b 	bl	8007888 <USB_EPStartXfer>

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3718      	adds	r7, #24
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b086      	sub	sp, #24
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	607a      	str	r2, [r7, #4]
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c0c:	7afb      	ldrb	r3, [r7, #11]
 8003c0e:	f003 020f 	and.w	r2, r3, #15
 8003c12:	4613      	mov	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	3338      	adds	r3, #56	; 0x38
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	3304      	adds	r3, #4
 8003c22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2200      	movs	r2, #0
 8003c34:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2201      	movs	r2, #1
 8003c3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c3c:	7afb      	ldrb	r3, [r7, #11]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6979      	ldr	r1, [r7, #20]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f003 fe1a 	bl	8007888 <USB_EPStartXfer>

  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	460b      	mov	r3, r1
 8003c68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c6a:	78fb      	ldrb	r3, [r7, #3]
 8003c6c:	f003 020f 	and.w	r2, r3, #15
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d901      	bls.n	8003c7c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e04e      	b.n	8003d1a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	da0f      	bge.n	8003ca4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	f003 020f 	and.w	r2, r3, #15
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	3338      	adds	r3, #56	; 0x38
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	4413      	add	r3, r2
 8003c98:	3304      	adds	r3, #4
 8003c9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	705a      	strb	r2, [r3, #1]
 8003ca2:	e00d      	b.n	8003cc0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003ca4:	78fa      	ldrb	r2, [r7, #3]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4413      	add	r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4413      	add	r3, r2
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cc6:	78fb      	ldrb	r3, [r7, #3]
 8003cc8:	f003 030f 	and.w	r3, r3, #15
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_PCD_EP_SetStall+0x82>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e01c      	b.n	8003d1a <HAL_PCD_EP_SetStall+0xbc>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f004 f938 	bl	8007f64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d108      	bne.n	8003d10 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d08:	4619      	mov	r1, r3
 8003d0a:	4610      	mov	r0, r2
 8003d0c:	f004 fb2a 	bl	8008364 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d22:	b580      	push	{r7, lr}
 8003d24:	b084      	sub	sp, #16
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	f003 020f 	and.w	r2, r3, #15
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d901      	bls.n	8003d40 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e042      	b.n	8003dc6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	da0f      	bge.n	8003d68 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	f003 020f 	and.w	r2, r3, #15
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	3338      	adds	r3, #56	; 0x38
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	4413      	add	r3, r2
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	705a      	strb	r2, [r3, #1]
 8003d66:	e00f      	b.n	8003d88 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	f003 020f 	and.w	r2, r3, #15
 8003d6e:	4613      	mov	r3, r2
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	4413      	add	r3, r2
 8003d7e:	3304      	adds	r3, #4
 8003d80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d8e:	78fb      	ldrb	r3, [r7, #3]
 8003d90:	f003 030f 	and.w	r3, r3, #15
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_PCD_EP_ClrStall+0x86>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e00e      	b.n	8003dc6 <HAL_PCD_EP_ClrStall+0xa4>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68f9      	ldr	r1, [r7, #12]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f004 f942 	bl	8008040 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003dda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	da0c      	bge.n	8003dfc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003de2:	78fb      	ldrb	r3, [r7, #3]
 8003de4:	f003 020f 	and.w	r2, r3, #15
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	3338      	adds	r3, #56	; 0x38
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	4413      	add	r3, r2
 8003df6:	3304      	adds	r3, #4
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e00c      	b.n	8003e16 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dfc:	78fb      	ldrb	r3, [r7, #3]
 8003dfe:	f003 020f 	and.w	r2, r3, #15
 8003e02:	4613      	mov	r3, r2
 8003e04:	00db      	lsls	r3, r3, #3
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4413      	add	r3, r2
 8003e12:	3304      	adds	r3, #4
 8003e14:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68f9      	ldr	r1, [r7, #12]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f003 ff65 	bl	8007cec <USB_EPStopXfer>
 8003e22:	4603      	mov	r3, r0
 8003e24:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e26:	7afb      	ldrb	r3, [r7, #11]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	4613      	mov	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	3338      	adds	r3, #56	; 0x38
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	4413      	add	r3, r2
 8003e54:	3304      	adds	r3, #4
 8003e56:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	695a      	ldr	r2, [r3, #20]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d901      	bls.n	8003e68 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e067      	b.n	8003f38 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	691a      	ldr	r2, [r3, #16]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	69fa      	ldr	r2, [r7, #28]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d902      	bls.n	8003e84 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	3303      	adds	r3, #3
 8003e88:	089b      	lsrs	r3, r3, #2
 8003e8a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e8c:	e026      	b.n	8003edc <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	69fa      	ldr	r2, [r7, #28]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d902      	bls.n	8003eaa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	3303      	adds	r3, #3
 8003eae:	089b      	lsrs	r3, r3, #2
 8003eb0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	68d9      	ldr	r1, [r3, #12]
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	6978      	ldr	r0, [r7, #20]
 8003ec0:	f003 ffbe 	bl	8007e40 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	441a      	add	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	441a      	add	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d809      	bhi.n	8003f06 <PCD_WriteEmptyTxFifo+0xd6>
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d203      	bcs.n	8003f06 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1c3      	bne.n	8003e8e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	691a      	ldr	r2, [r3, #16]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d811      	bhi.n	8003f36 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	f003 030f 	and.w	r3, r3, #15
 8003f18:	2201      	movs	r2, #1
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	6939      	ldr	r1, [r7, #16]
 8003f2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f32:	4013      	ands	r3, r2
 8003f34:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3720      	adds	r7, #32
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	333c      	adds	r3, #60	; 0x3c
 8003f58:	3304      	adds	r3, #4
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	015a      	lsls	r2, r3, #5
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	4413      	add	r3, r2
 8003f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4a19      	ldr	r2, [pc, #100]	; (8003fd8 <PCD_EP_OutXfrComplete_int+0x98>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d124      	bne.n	8003fc0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00a      	beq.n	8003f96 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f92:	6093      	str	r3, [r2, #8]
 8003f94:	e01a      	b.n	8003fcc <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fac:	461a      	mov	r2, r3
 8003fae:	2320      	movs	r3, #32
 8003fb0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f006 fb51 	bl	800a660 <HAL_PCD_DataOutStageCallback>
 8003fbe:	e005      	b.n	8003fcc <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f006 fb4a 	bl	800a660 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	4f54310a 	.word	0x4f54310a

08003fdc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	333c      	adds	r3, #60	; 0x3c
 8003ff4:	3304      	adds	r3, #4
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a0c      	ldr	r2, [pc, #48]	; (8004040 <PCD_EP_OutSetupPacket_int+0x64>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d90e      	bls.n	8004030 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004018:	2b00      	cmp	r3, #0
 800401a:	d009      	beq.n	8004030 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004028:	461a      	mov	r2, r3
 800402a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800402e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f006 fb03 	bl	800a63c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3718      	adds	r7, #24
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	4f54300a 	.word	0x4f54300a

08004044 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	460b      	mov	r3, r1
 800404e:	70fb      	strb	r3, [r7, #3]
 8004050:	4613      	mov	r3, r2
 8004052:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d107      	bne.n	8004072 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004062:	883b      	ldrh	r3, [r7, #0]
 8004064:	0419      	lsls	r1, r3, #16
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	430a      	orrs	r2, r1
 800406e:	629a      	str	r2, [r3, #40]	; 0x28
 8004070:	e028      	b.n	80040c4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004078:	0c1b      	lsrs	r3, r3, #16
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	4413      	add	r3, r2
 800407e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004080:	2300      	movs	r3, #0
 8004082:	73fb      	strb	r3, [r7, #15]
 8004084:	e00d      	b.n	80040a2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	7bfb      	ldrb	r3, [r7, #15]
 800408c:	3340      	adds	r3, #64	; 0x40
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	0c1b      	lsrs	r3, r3, #16
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	4413      	add	r3, r2
 800409a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800409c:	7bfb      	ldrb	r3, [r7, #15]
 800409e:	3301      	adds	r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
 80040a2:	7bfa      	ldrb	r2, [r7, #15]
 80040a4:	78fb      	ldrb	r3, [r7, #3]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d3ec      	bcc.n	8004086 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040ac:	883b      	ldrh	r3, [r7, #0]
 80040ae:	0418      	lsls	r0, r3, #16
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6819      	ldr	r1, [r3, #0]
 80040b4:	78fb      	ldrb	r3, [r7, #3]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	4302      	orrs	r2, r0
 80040bc:	3340      	adds	r3, #64	; 0x40
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	440b      	add	r3, r1
 80040c2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	460b      	mov	r3, r1
 80040dc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	887a      	ldrh	r2, [r7, #2]
 80040e4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004126:	f043 0303 	orr.w	r3, r3, #3
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3714      	adds	r7, #20
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a04      	ldr	r2, [pc, #16]	; (8004158 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800414a:	6013      	str	r3, [r2, #0]
}
 800414c:	bf00      	nop
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	40007000 	.word	0x40007000

0800415c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800415c:	b480      	push	{r7}
 800415e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004160:	4b04      	ldr	r3, [pc, #16]	; (8004174 <HAL_PWREx_GetVoltageRange+0x18>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004168:	4618      	mov	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40007000 	.word	0x40007000

08004178 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004186:	d130      	bne.n	80041ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004188:	4b23      	ldr	r3, [pc, #140]	; (8004218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004194:	d038      	beq.n	8004208 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004196:	4b20      	ldr	r3, [pc, #128]	; (8004218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800419e:	4a1e      	ldr	r2, [pc, #120]	; (8004218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041a6:	4b1d      	ldr	r3, [pc, #116]	; (800421c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2232      	movs	r2, #50	; 0x32
 80041ac:	fb02 f303 	mul.w	r3, r2, r3
 80041b0:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	0c9b      	lsrs	r3, r3, #18
 80041b8:	3301      	adds	r3, #1
 80041ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041bc:	e002      	b.n	80041c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041c4:	4b14      	ldr	r3, [pc, #80]	; (8004218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d0:	d102      	bne.n	80041d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1f2      	bne.n	80041be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041d8:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041da:	695b      	ldr	r3, [r3, #20]
 80041dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e4:	d110      	bne.n	8004208 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e00f      	b.n	800420a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80041ea:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041f6:	d007      	beq.n	8004208 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041f8:	4b07      	ldr	r3, [pc, #28]	; (8004218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004200:	4a05      	ldr	r2, [pc, #20]	; (8004218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004206:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3714      	adds	r7, #20
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	40007000 	.word	0x40007000
 800421c:	20000000 	.word	0x20000000
 8004220:	431bde83 	.word	0x431bde83

08004224 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004228:	4b05      	ldr	r3, [pc, #20]	; (8004240 <HAL_PWREx_EnableVddUSB+0x1c>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	4a04      	ldr	r2, [pc, #16]	; (8004240 <HAL_PWREx_EnableVddUSB+0x1c>)
 800422e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004232:	6053      	str	r3, [r2, #4]
}
 8004234:	bf00      	nop
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40007000 	.word	0x40007000

08004244 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af02      	add	r7, sp, #8
 800424a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800424c:	f7fe f882 	bl	8002354 <HAL_GetTick>
 8004250:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d101      	bne.n	800425c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e063      	b.n	8004324 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b00      	cmp	r3, #0
 8004266:	d10b      	bne.n	8004280 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f7fd fd29 	bl	8001cc8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004276:	f241 3188 	movw	r1, #5000	; 0x1388
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f858 	bl	8004330 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	3b01      	subs	r3, #1
 8004290:	021a      	lsls	r2, r3, #8
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	2120      	movs	r1, #32
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f850 	bl	800434c <QSPI_WaitFlagStateUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80042b0:	7afb      	ldrb	r3, [r7, #11]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d131      	bne.n	800431a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80042c0:	f023 0310 	bic.w	r3, r3, #16
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6852      	ldr	r2, [r2, #4]
 80042c8:	0611      	lsls	r1, r2, #24
 80042ca:	687a      	ldr	r2, [r7, #4]
 80042cc:	68d2      	ldr	r2, [r2, #12]
 80042ce:	4311      	orrs	r1, r2
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	6812      	ldr	r2, [r2, #0]
 80042d4:	430b      	orrs	r3, r1
 80042d6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	685a      	ldr	r2, [r3, #4]
 80042de:	4b13      	ldr	r3, [pc, #76]	; (800432c <HAL_QSPI_Init+0xe8>)
 80042e0:	4013      	ands	r3, r2
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6912      	ldr	r2, [r2, #16]
 80042e6:	0411      	lsls	r1, r2, #16
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	6952      	ldr	r2, [r2, #20]
 80042ec:	4311      	orrs	r1, r2
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	6992      	ldr	r2, [r2, #24]
 80042f2:	4311      	orrs	r1, r2
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	6812      	ldr	r2, [r2, #0]
 80042f8:	430b      	orrs	r3, r1
 80042fa:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f042 0201 	orr.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8004322:	7afb      	ldrb	r3, [r7, #11]
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}
 800432c:	ffe0f8fe 	.word	0xffe0f8fe

08004330 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	603b      	str	r3, [r7, #0]
 8004358:	4613      	mov	r3, r2
 800435a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800435c:	e01a      	b.n	8004394 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004364:	d016      	beq.n	8004394 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004366:	f7fd fff5 	bl	8002354 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	429a      	cmp	r2, r3
 8004374:	d302      	bcc.n	800437c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10b      	bne.n	8004394 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2204      	movs	r2, #4
 8004380:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004388:	f043 0201 	orr.w	r2, r3, #1
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e00e      	b.n	80043b2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	689a      	ldr	r2, [r3, #8]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	4013      	ands	r3, r2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	bf14      	ite	ne
 80043a2:	2301      	movne	r3, #1
 80043a4:	2300      	moveq	r3, #0
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	461a      	mov	r2, r3
 80043aa:	79fb      	ldrb	r3, [r7, #7]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d1d6      	bne.n	800435e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
	...

080043bc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b088      	sub	sp, #32
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e3ca      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ce:	4b97      	ldr	r3, [pc, #604]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043d8:	4b94      	ldr	r3, [pc, #592]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 0303 	and.w	r3, r3, #3
 80043e0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f000 80e4 	beq.w	80045b8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d007      	beq.n	8004406 <HAL_RCC_OscConfig+0x4a>
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	2b0c      	cmp	r3, #12
 80043fa:	f040 808b 	bne.w	8004514 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b01      	cmp	r3, #1
 8004402:	f040 8087 	bne.w	8004514 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004406:	4b89      	ldr	r3, [pc, #548]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d005      	beq.n	800441e <HAL_RCC_OscConfig+0x62>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e3a2      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1a      	ldr	r2, [r3, #32]
 8004422:	4b82      	ldr	r3, [pc, #520]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d004      	beq.n	8004438 <HAL_RCC_OscConfig+0x7c>
 800442e:	4b7f      	ldr	r3, [pc, #508]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004436:	e005      	b.n	8004444 <HAL_RCC_OscConfig+0x88>
 8004438:	4b7c      	ldr	r3, [pc, #496]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800443a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800443e:	091b      	lsrs	r3, r3, #4
 8004440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004444:	4293      	cmp	r3, r2
 8004446:	d223      	bcs.n	8004490 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	4618      	mov	r0, r3
 800444e:	f000 fd55 	bl	8004efc <RCC_SetFlashLatencyFromMSIRange>
 8004452:	4603      	mov	r3, r0
 8004454:	2b00      	cmp	r3, #0
 8004456:	d001      	beq.n	800445c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e383      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800445c:	4b73      	ldr	r3, [pc, #460]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a72      	ldr	r2, [pc, #456]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004462:	f043 0308 	orr.w	r3, r3, #8
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4b70      	ldr	r3, [pc, #448]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	496d      	ldr	r1, [pc, #436]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004476:	4313      	orrs	r3, r2
 8004478:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800447a:	4b6c      	ldr	r3, [pc, #432]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69db      	ldr	r3, [r3, #28]
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	4968      	ldr	r1, [pc, #416]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800448a:	4313      	orrs	r3, r2
 800448c:	604b      	str	r3, [r1, #4]
 800448e:	e025      	b.n	80044dc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004490:	4b66      	ldr	r3, [pc, #408]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a65      	ldr	r2, [pc, #404]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004496:	f043 0308 	orr.w	r3, r3, #8
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	4b63      	ldr	r3, [pc, #396]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a1b      	ldr	r3, [r3, #32]
 80044a8:	4960      	ldr	r1, [pc, #384]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044ae:	4b5f      	ldr	r3, [pc, #380]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	021b      	lsls	r3, r3, #8
 80044bc:	495b      	ldr	r1, [pc, #364]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d109      	bne.n	80044dc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fd15 	bl	8004efc <RCC_SetFlashLatencyFromMSIRange>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e343      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044dc:	f000 fc4a 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 80044e0:	4602      	mov	r2, r0
 80044e2:	4b52      	ldr	r3, [pc, #328]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	091b      	lsrs	r3, r3, #4
 80044e8:	f003 030f 	and.w	r3, r3, #15
 80044ec:	4950      	ldr	r1, [pc, #320]	; (8004630 <HAL_RCC_OscConfig+0x274>)
 80044ee:	5ccb      	ldrb	r3, [r1, r3]
 80044f0:	f003 031f 	and.w	r3, r3, #31
 80044f4:	fa22 f303 	lsr.w	r3, r2, r3
 80044f8:	4a4e      	ldr	r2, [pc, #312]	; (8004634 <HAL_RCC_OscConfig+0x278>)
 80044fa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80044fc:	4b4e      	ldr	r3, [pc, #312]	; (8004638 <HAL_RCC_OscConfig+0x27c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7fd fed7 	bl	80022b4 <HAL_InitTick>
 8004506:	4603      	mov	r3, r0
 8004508:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d052      	beq.n	80045b6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004510:	7bfb      	ldrb	r3, [r7, #15]
 8004512:	e327      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	699b      	ldr	r3, [r3, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d032      	beq.n	8004582 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800451c:	4b43      	ldr	r3, [pc, #268]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a42      	ldr	r2, [pc, #264]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004522:	f043 0301 	orr.w	r3, r3, #1
 8004526:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004528:	f7fd ff14 	bl	8002354 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004530:	f7fd ff10 	bl	8002354 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e310      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004542:	4b3a      	ldr	r3, [pc, #232]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0f0      	beq.n	8004530 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800454e:	4b37      	ldr	r3, [pc, #220]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a36      	ldr	r2, [pc, #216]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004554:	f043 0308 	orr.w	r3, r3, #8
 8004558:	6013      	str	r3, [r2, #0]
 800455a:	4b34      	ldr	r3, [pc, #208]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a1b      	ldr	r3, [r3, #32]
 8004566:	4931      	ldr	r1, [pc, #196]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004568:	4313      	orrs	r3, r2
 800456a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800456c:	4b2f      	ldr	r3, [pc, #188]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	69db      	ldr	r3, [r3, #28]
 8004578:	021b      	lsls	r3, r3, #8
 800457a:	492c      	ldr	r1, [pc, #176]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800457c:	4313      	orrs	r3, r2
 800457e:	604b      	str	r3, [r1, #4]
 8004580:	e01a      	b.n	80045b8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004582:	4b2a      	ldr	r3, [pc, #168]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a29      	ldr	r2, [pc, #164]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004588:	f023 0301 	bic.w	r3, r3, #1
 800458c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800458e:	f7fd fee1 	bl	8002354 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004596:	f7fd fedd 	bl	8002354 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e2dd      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80045a8:	4b20      	ldr	r3, [pc, #128]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1f0      	bne.n	8004596 <HAL_RCC_OscConfig+0x1da>
 80045b4:	e000      	b.n	80045b8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80045b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d074      	beq.n	80046ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	2b08      	cmp	r3, #8
 80045c8:	d005      	beq.n	80045d6 <HAL_RCC_OscConfig+0x21a>
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b0c      	cmp	r3, #12
 80045ce:	d10e      	bne.n	80045ee <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d10b      	bne.n	80045ee <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d064      	beq.n	80046ac <HAL_RCC_OscConfig+0x2f0>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d160      	bne.n	80046ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e2ba      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045f6:	d106      	bne.n	8004606 <HAL_RCC_OscConfig+0x24a>
 80045f8:	4b0c      	ldr	r3, [pc, #48]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a0b      	ldr	r2, [pc, #44]	; (800462c <HAL_RCC_OscConfig+0x270>)
 80045fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004602:	6013      	str	r3, [r2, #0]
 8004604:	e026      	b.n	8004654 <HAL_RCC_OscConfig+0x298>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800460e:	d115      	bne.n	800463c <HAL_RCC_OscConfig+0x280>
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a05      	ldr	r2, [pc, #20]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004616:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800461a:	6013      	str	r3, [r2, #0]
 800461c:	4b03      	ldr	r3, [pc, #12]	; (800462c <HAL_RCC_OscConfig+0x270>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a02      	ldr	r2, [pc, #8]	; (800462c <HAL_RCC_OscConfig+0x270>)
 8004622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004626:	6013      	str	r3, [r2, #0]
 8004628:	e014      	b.n	8004654 <HAL_RCC_OscConfig+0x298>
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000
 8004630:	0800daec 	.word	0x0800daec
 8004634:	20000000 	.word	0x20000000
 8004638:	20000004 	.word	0x20000004
 800463c:	4ba0      	ldr	r3, [pc, #640]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a9f      	ldr	r2, [pc, #636]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004642:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004646:	6013      	str	r3, [r2, #0]
 8004648:	4b9d      	ldr	r3, [pc, #628]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a9c      	ldr	r2, [pc, #624]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 800464e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004652:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d013      	beq.n	8004684 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7fd fe7a 	bl	8002354 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004664:	f7fd fe76 	bl	8002354 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b64      	cmp	r3, #100	; 0x64
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e276      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004676:	4b92      	ldr	r3, [pc, #584]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d0f0      	beq.n	8004664 <HAL_RCC_OscConfig+0x2a8>
 8004682:	e014      	b.n	80046ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004684:	f7fd fe66 	bl	8002354 <HAL_GetTick>
 8004688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800468a:	e008      	b.n	800469e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800468c:	f7fd fe62 	bl	8002354 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	2b64      	cmp	r3, #100	; 0x64
 8004698:	d901      	bls.n	800469e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	e262      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800469e:	4b88      	ldr	r3, [pc, #544]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d1f0      	bne.n	800468c <HAL_RCC_OscConfig+0x2d0>
 80046aa:	e000      	b.n	80046ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d060      	beq.n	800477c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	2b04      	cmp	r3, #4
 80046be:	d005      	beq.n	80046cc <HAL_RCC_OscConfig+0x310>
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	2b0c      	cmp	r3, #12
 80046c4:	d119      	bne.n	80046fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d116      	bne.n	80046fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046cc:	4b7c      	ldr	r3, [pc, #496]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d005      	beq.n	80046e4 <HAL_RCC_OscConfig+0x328>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d101      	bne.n	80046e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e23f      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e4:	4b76      	ldr	r3, [pc, #472]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	061b      	lsls	r3, r3, #24
 80046f2:	4973      	ldr	r1, [pc, #460]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046f8:	e040      	b.n	800477c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d023      	beq.n	800474a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004702:	4b6f      	ldr	r3, [pc, #444]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a6e      	ldr	r2, [pc, #440]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800470c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470e:	f7fd fe21 	bl	8002354 <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004714:	e008      	b.n	8004728 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004716:	f7fd fe1d 	bl	8002354 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	2b02      	cmp	r3, #2
 8004722:	d901      	bls.n	8004728 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e21d      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004728:	4b65      	ldr	r3, [pc, #404]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0f0      	beq.n	8004716 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004734:	4b62      	ldr	r3, [pc, #392]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	061b      	lsls	r3, r3, #24
 8004742:	495f      	ldr	r1, [pc, #380]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004744:	4313      	orrs	r3, r2
 8004746:	604b      	str	r3, [r1, #4]
 8004748:	e018      	b.n	800477c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800474a:	4b5d      	ldr	r3, [pc, #372]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a5c      	ldr	r2, [pc, #368]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004756:	f7fd fdfd 	bl	8002354 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800475e:	f7fd fdf9 	bl	8002354 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e1f9      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004770:	4b53      	ldr	r3, [pc, #332]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f0      	bne.n	800475e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0308 	and.w	r3, r3, #8
 8004784:	2b00      	cmp	r3, #0
 8004786:	d03c      	beq.n	8004802 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d01c      	beq.n	80047ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004790:	4b4b      	ldr	r3, [pc, #300]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004796:	4a4a      	ldr	r2, [pc, #296]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004798:	f043 0301 	orr.w	r3, r3, #1
 800479c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047a0:	f7fd fdd8 	bl	8002354 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a8:	f7fd fdd4 	bl	8002354 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e1d4      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80047ba:	4b41      	ldr	r3, [pc, #260]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80047bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0ef      	beq.n	80047a8 <HAL_RCC_OscConfig+0x3ec>
 80047c8:	e01b      	b.n	8004802 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047ca:	4b3d      	ldr	r3, [pc, #244]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80047cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d0:	4a3b      	ldr	r2, [pc, #236]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80047d2:	f023 0301 	bic.w	r3, r3, #1
 80047d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047da:	f7fd fdbb 	bl	8002354 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e2:	f7fd fdb7 	bl	8002354 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e1b7      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80047f4:	4b32      	ldr	r3, [pc, #200]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80047f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1ef      	bne.n	80047e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0304 	and.w	r3, r3, #4
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80a6 	beq.w	800495c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004810:	2300      	movs	r3, #0
 8004812:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004814:	4b2a      	ldr	r3, [pc, #168]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10d      	bne.n	800483c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004820:	4b27      	ldr	r3, [pc, #156]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004824:	4a26      	ldr	r2, [pc, #152]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482a:	6593      	str	r3, [r2, #88]	; 0x58
 800482c:	4b24      	ldr	r3, [pc, #144]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004838:	2301      	movs	r3, #1
 800483a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800483c:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <HAL_RCC_OscConfig+0x508>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004844:	2b00      	cmp	r3, #0
 8004846:	d118      	bne.n	800487a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004848:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <HAL_RCC_OscConfig+0x508>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a1d      	ldr	r2, [pc, #116]	; (80048c4 <HAL_RCC_OscConfig+0x508>)
 800484e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004852:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004854:	f7fd fd7e 	bl	8002354 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800485c:	f7fd fd7a 	bl	8002354 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e17a      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800486e:	4b15      	ldr	r3, [pc, #84]	; (80048c4 <HAL_RCC_OscConfig+0x508>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004876:	2b00      	cmp	r3, #0
 8004878:	d0f0      	beq.n	800485c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d108      	bne.n	8004894 <HAL_RCC_OscConfig+0x4d8>
 8004882:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 8004884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004888:	4a0d      	ldr	r2, [pc, #52]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 800488a:	f043 0301 	orr.w	r3, r3, #1
 800488e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004892:	e029      	b.n	80048e8 <HAL_RCC_OscConfig+0x52c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	2b05      	cmp	r3, #5
 800489a:	d115      	bne.n	80048c8 <HAL_RCC_OscConfig+0x50c>
 800489c:	4b08      	ldr	r3, [pc, #32]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	4a07      	ldr	r2, [pc, #28]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80048a4:	f043 0304 	orr.w	r3, r3, #4
 80048a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048ac:	4b04      	ldr	r3, [pc, #16]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80048ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b2:	4a03      	ldr	r2, [pc, #12]	; (80048c0 <HAL_RCC_OscConfig+0x504>)
 80048b4:	f043 0301 	orr.w	r3, r3, #1
 80048b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048bc:	e014      	b.n	80048e8 <HAL_RCC_OscConfig+0x52c>
 80048be:	bf00      	nop
 80048c0:	40021000 	.word	0x40021000
 80048c4:	40007000 	.word	0x40007000
 80048c8:	4b9c      	ldr	r3, [pc, #624]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	4a9b      	ldr	r2, [pc, #620]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 80048d0:	f023 0301 	bic.w	r3, r3, #1
 80048d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80048d8:	4b98      	ldr	r3, [pc, #608]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	4a97      	ldr	r2, [pc, #604]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 80048e0:	f023 0304 	bic.w	r3, r3, #4
 80048e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d016      	beq.n	800491e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048f0:	f7fd fd30 	bl	8002354 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048f6:	e00a      	b.n	800490e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f8:	f7fd fd2c 	bl	8002354 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	; 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e12a      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800490e:	4b8b      	ldr	r3, [pc, #556]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0ed      	beq.n	80048f8 <HAL_RCC_OscConfig+0x53c>
 800491c:	e015      	b.n	800494a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800491e:	f7fd fd19 	bl	8002354 <HAL_GetTick>
 8004922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004924:	e00a      	b.n	800493c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004926:	f7fd fd15 	bl	8002354 <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	f241 3288 	movw	r2, #5000	; 0x1388
 8004934:	4293      	cmp	r3, r2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e113      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800493c:	4b7f      	ldr	r3, [pc, #508]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 800493e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1ed      	bne.n	8004926 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800494a:	7ffb      	ldrb	r3, [r7, #31]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d105      	bne.n	800495c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004950:	4b7a      	ldr	r3, [pc, #488]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004954:	4a79      	ldr	r2, [pc, #484]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800495a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004960:	2b00      	cmp	r3, #0
 8004962:	f000 80fe 	beq.w	8004b62 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496a:	2b02      	cmp	r3, #2
 800496c:	f040 80d0 	bne.w	8004b10 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004970:	4b72      	ldr	r3, [pc, #456]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f003 0203 	and.w	r2, r3, #3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	429a      	cmp	r2, r3
 8004982:	d130      	bne.n	80049e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	3b01      	subs	r3, #1
 8004990:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d127      	bne.n	80049e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d11f      	bne.n	80049e6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049b0:	2a07      	cmp	r2, #7
 80049b2:	bf14      	ite	ne
 80049b4:	2201      	movne	r2, #1
 80049b6:	2200      	moveq	r2, #0
 80049b8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d113      	bne.n	80049e6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c8:	085b      	lsrs	r3, r3, #1
 80049ca:	3b01      	subs	r3, #1
 80049cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d109      	bne.n	80049e6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049dc:	085b      	lsrs	r3, r3, #1
 80049de:	3b01      	subs	r3, #1
 80049e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d06e      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b0c      	cmp	r3, #12
 80049ea:	d069      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80049ec:	4b53      	ldr	r3, [pc, #332]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d105      	bne.n	8004a04 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80049f8:	4b50      	ldr	r3, [pc, #320]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0ad      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004a08:	4b4c      	ldr	r3, [pc, #304]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a4b      	ldr	r2, [pc, #300]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a12:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a14:	f7fd fc9e 	bl	8002354 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1c:	f7fd fc9a 	bl	8002354 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e09a      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a2e:	4b43      	ldr	r3, [pc, #268]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a3a:	4b40      	ldr	r3, [pc, #256]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	4b40      	ldr	r3, [pc, #256]	; (8004b40 <HAL_RCC_OscConfig+0x784>)
 8004a40:	4013      	ands	r3, r2
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004a4a:	3a01      	subs	r2, #1
 8004a4c:	0112      	lsls	r2, r2, #4
 8004a4e:	4311      	orrs	r1, r2
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a54:	0212      	lsls	r2, r2, #8
 8004a56:	4311      	orrs	r1, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a5c:	0852      	lsrs	r2, r2, #1
 8004a5e:	3a01      	subs	r2, #1
 8004a60:	0552      	lsls	r2, r2, #21
 8004a62:	4311      	orrs	r1, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a68:	0852      	lsrs	r2, r2, #1
 8004a6a:	3a01      	subs	r2, #1
 8004a6c:	0652      	lsls	r2, r2, #25
 8004a6e:	4311      	orrs	r1, r2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a74:	0912      	lsrs	r2, r2, #4
 8004a76:	0452      	lsls	r2, r2, #17
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	4930      	ldr	r1, [pc, #192]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004a80:	4b2e      	ldr	r3, [pc, #184]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a2d      	ldr	r2, [pc, #180]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a8a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a8c:	4b2b      	ldr	r3, [pc, #172]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	4a2a      	ldr	r2, [pc, #168]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004a92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a96:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004a98:	f7fd fc5c 	bl	8002354 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aa0:	f7fd fc58 	bl	8002354 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e058      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ab2:	4b22      	ldr	r3, [pc, #136]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004abe:	e050      	b.n	8004b62 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e04f      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac4:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d148      	bne.n	8004b62 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004ad0:	4b1a      	ldr	r3, [pc, #104]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a19      	ldr	r2, [pc, #100]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ada:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004adc:	4b17      	ldr	r3, [pc, #92]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ae6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ae8:	f7fd fc34 	bl	8002354 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004af0:	f7fd fc30 	bl	8002354 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e030      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b02:	4b0e      	ldr	r3, [pc, #56]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0f0      	beq.n	8004af0 <HAL_RCC_OscConfig+0x734>
 8004b0e:	e028      	b.n	8004b62 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b0c      	cmp	r3, #12
 8004b14:	d023      	beq.n	8004b5e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b16:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a08      	ldr	r2, [pc, #32]	; (8004b3c <HAL_RCC_OscConfig+0x780>)
 8004b1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b22:	f7fd fc17 	bl	8002354 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b28:	e00c      	b.n	8004b44 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b2a:	f7fd fc13 	bl	8002354 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d905      	bls.n	8004b44 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e013      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
 8004b3c:	40021000 	.word	0x40021000
 8004b40:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b44:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <HAL_RCC_OscConfig+0x7b0>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1ec      	bne.n	8004b2a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004b50:	4b06      	ldr	r3, [pc, #24]	; (8004b6c <HAL_RCC_OscConfig+0x7b0>)
 8004b52:	68da      	ldr	r2, [r3, #12]
 8004b54:	4905      	ldr	r1, [pc, #20]	; (8004b6c <HAL_RCC_OscConfig+0x7b0>)
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <HAL_RCC_OscConfig+0x7b4>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60cb      	str	r3, [r1, #12]
 8004b5c:	e001      	b.n	8004b62 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e000      	b.n	8004b64 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3720      	adds	r7, #32
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}
 8004b6c:	40021000 	.word	0x40021000
 8004b70:	feeefffc 	.word	0xfeeefffc

08004b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d101      	bne.n	8004b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e0e7      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004b88:	4b75      	ldr	r3, [pc, #468]	; (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0307 	and.w	r3, r3, #7
 8004b90:	683a      	ldr	r2, [r7, #0]
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d910      	bls.n	8004bb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b96:	4b72      	ldr	r3, [pc, #456]	; (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f023 0207 	bic.w	r2, r3, #7
 8004b9e:	4970      	ldr	r1, [pc, #448]	; (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba6:	4b6e      	ldr	r3, [pc, #440]	; (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d001      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e0cf      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0302 	and.w	r3, r3, #2
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d010      	beq.n	8004be6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	4b66      	ldr	r3, [pc, #408]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d908      	bls.n	8004be6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd4:	4b63      	ldr	r3, [pc, #396]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	4960      	ldr	r1, [pc, #384]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d04c      	beq.n	8004c8c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	2b03      	cmp	r3, #3
 8004bf8:	d107      	bne.n	8004c0a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004bfa:	4b5a      	ldr	r3, [pc, #360]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d121      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e0a6      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d107      	bne.n	8004c22 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c12:	4b54      	ldr	r3, [pc, #336]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d115      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e09a      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d107      	bne.n	8004c3a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c2a:	4b4e      	ldr	r3, [pc, #312]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d109      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e08e      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c3a:	4b4a      	ldr	r3, [pc, #296]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e086      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c4a:	4b46      	ldr	r3, [pc, #280]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f023 0203 	bic.w	r2, r3, #3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	4943      	ldr	r1, [pc, #268]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c5c:	f7fd fb7a 	bl	8002354 <HAL_GetTick>
 8004c60:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c62:	e00a      	b.n	8004c7a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c64:	f7fd fb76 	bl	8002354 <HAL_GetTick>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	1ad3      	subs	r3, r2, r3
 8004c6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e06e      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7a:	4b3a      	ldr	r3, [pc, #232]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 020c 	and.w	r2, r3, #12
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d1eb      	bne.n	8004c64 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d010      	beq.n	8004cba <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	689a      	ldr	r2, [r3, #8]
 8004c9c:	4b31      	ldr	r3, [pc, #196]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d208      	bcs.n	8004cba <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ca8:	4b2e      	ldr	r3, [pc, #184]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004caa:	689b      	ldr	r3, [r3, #8]
 8004cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	492b      	ldr	r1, [pc, #172]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cba:	4b29      	ldr	r3, [pc, #164]	; (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d210      	bcs.n	8004cea <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc8:	4b25      	ldr	r3, [pc, #148]	; (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f023 0207 	bic.w	r2, r3, #7
 8004cd0:	4923      	ldr	r1, [pc, #140]	; (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd8:	4b21      	ldr	r3, [pc, #132]	; (8004d60 <HAL_RCC_ClockConfig+0x1ec>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0307 	and.w	r3, r3, #7
 8004ce0:	683a      	ldr	r2, [r7, #0]
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d001      	beq.n	8004cea <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e036      	b.n	8004d58 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0304 	and.w	r3, r3, #4
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d008      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cf6:	4b1b      	ldr	r3, [pc, #108]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	4918      	ldr	r1, [pc, #96]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0308 	and.w	r3, r3, #8
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d009      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	00db      	lsls	r3, r3, #3
 8004d22:	4910      	ldr	r1, [pc, #64]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d28:	f000 f824 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <HAL_RCC_ClockConfig+0x1f0>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	f003 030f 	and.w	r3, r3, #15
 8004d38:	490b      	ldr	r1, [pc, #44]	; (8004d68 <HAL_RCC_ClockConfig+0x1f4>)
 8004d3a:	5ccb      	ldrb	r3, [r1, r3]
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	fa22 f303 	lsr.w	r3, r2, r3
 8004d44:	4a09      	ldr	r2, [pc, #36]	; (8004d6c <HAL_RCC_ClockConfig+0x1f8>)
 8004d46:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d48:	4b09      	ldr	r3, [pc, #36]	; (8004d70 <HAL_RCC_ClockConfig+0x1fc>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7fd fab1 	bl	80022b4 <HAL_InitTick>
 8004d52:	4603      	mov	r3, r0
 8004d54:	72fb      	strb	r3, [r7, #11]

  return status;
 8004d56:	7afb      	ldrb	r3, [r7, #11]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40022000 	.word	0x40022000
 8004d64:	40021000 	.word	0x40021000
 8004d68:	0800daec 	.word	0x0800daec
 8004d6c:	20000000 	.word	0x20000000
 8004d70:	20000004 	.word	0x20000004

08004d74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b089      	sub	sp, #36	; 0x24
 8004d78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d82:	4b3e      	ldr	r3, [pc, #248]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f003 030c 	and.w	r3, r3, #12
 8004d8a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d8c:	4b3b      	ldr	r3, [pc, #236]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0303 	and.w	r3, r3, #3
 8004d94:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <HAL_RCC_GetSysClockFreq+0x34>
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	2b0c      	cmp	r3, #12
 8004da0:	d121      	bne.n	8004de6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d11e      	bne.n	8004de6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004da8:	4b34      	ldr	r3, [pc, #208]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d107      	bne.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004db4:	4b31      	ldr	r3, [pc, #196]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	f003 030f 	and.w	r3, r3, #15
 8004dc0:	61fb      	str	r3, [r7, #28]
 8004dc2:	e005      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004dc4:	4b2d      	ldr	r3, [pc, #180]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	091b      	lsrs	r3, r3, #4
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004dd0:	4a2b      	ldr	r2, [pc, #172]	; (8004e80 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dd8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10d      	bne.n	8004dfc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004de4:	e00a      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	2b04      	cmp	r3, #4
 8004dea:	d102      	bne.n	8004df2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004dec:	4b25      	ldr	r3, [pc, #148]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004dee:	61bb      	str	r3, [r7, #24]
 8004df0:	e004      	b.n	8004dfc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b08      	cmp	r3, #8
 8004df6:	d101      	bne.n	8004dfc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004df8:	4b23      	ldr	r3, [pc, #140]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x114>)
 8004dfa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	2b0c      	cmp	r3, #12
 8004e00:	d134      	bne.n	8004e6c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004e02:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d003      	beq.n	8004e1a <HAL_RCC_GetSysClockFreq+0xa6>
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d003      	beq.n	8004e20 <HAL_RCC_GetSysClockFreq+0xac>
 8004e18:	e005      	b.n	8004e26 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004e1a:	4b1a      	ldr	r3, [pc, #104]	; (8004e84 <HAL_RCC_GetSysClockFreq+0x110>)
 8004e1c:	617b      	str	r3, [r7, #20]
      break;
 8004e1e:	e005      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004e20:	4b19      	ldr	r3, [pc, #100]	; (8004e88 <HAL_RCC_GetSysClockFreq+0x114>)
 8004e22:	617b      	str	r3, [r7, #20]
      break;
 8004e24:	e002      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	617b      	str	r3, [r7, #20]
      break;
 8004e2a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e2c:	4b13      	ldr	r3, [pc, #76]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	091b      	lsrs	r3, r3, #4
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	3301      	adds	r3, #1
 8004e38:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e3a:	4b10      	ldr	r3, [pc, #64]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	fb03 f202 	mul.w	r2, r3, r2
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e50:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e52:	4b0a      	ldr	r3, [pc, #40]	; (8004e7c <HAL_RCC_GetSysClockFreq+0x108>)
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	0e5b      	lsrs	r3, r3, #25
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	005b      	lsls	r3, r3, #1
 8004e60:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e6a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e6c:	69bb      	ldr	r3, [r7, #24]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3724      	adds	r7, #36	; 0x24
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	0800db04 	.word	0x0800db04
 8004e84:	00f42400 	.word	0x00f42400
 8004e88:	007a1200 	.word	0x007a1200

08004e8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e90:	4b03      	ldr	r3, [pc, #12]	; (8004ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e92:	681b      	ldr	r3, [r3, #0]
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	20000000 	.word	0x20000000

08004ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ea8:	f7ff fff0 	bl	8004e8c <HAL_RCC_GetHCLKFreq>
 8004eac:	4602      	mov	r2, r0
 8004eae:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	0a1b      	lsrs	r3, r3, #8
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	4904      	ldr	r1, [pc, #16]	; (8004ecc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004eba:	5ccb      	ldrb	r3, [r1, r3]
 8004ebc:	f003 031f 	and.w	r3, r3, #31
 8004ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	0800dafc 	.word	0x0800dafc

08004ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004ed4:	f7ff ffda 	bl	8004e8c <HAL_RCC_GetHCLKFreq>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	4b06      	ldr	r3, [pc, #24]	; (8004ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004edc:	689b      	ldr	r3, [r3, #8]
 8004ede:	0adb      	lsrs	r3, r3, #11
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	4904      	ldr	r1, [pc, #16]	; (8004ef8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ee6:	5ccb      	ldrb	r3, [r1, r3]
 8004ee8:	f003 031f 	and.w	r3, r3, #31
 8004eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	0800dafc 	.word	0x0800dafc

08004efc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004f08:	4b2a      	ldr	r3, [pc, #168]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d003      	beq.n	8004f1c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004f14:	f7ff f922 	bl	800415c <HAL_PWREx_GetVoltageRange>
 8004f18:	6178      	str	r0, [r7, #20]
 8004f1a:	e014      	b.n	8004f46 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004f1c:	4b25      	ldr	r3, [pc, #148]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f20:	4a24      	ldr	r2, [pc, #144]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f26:	6593      	str	r3, [r2, #88]	; 0x58
 8004f28:	4b22      	ldr	r3, [pc, #136]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004f34:	f7ff f912 	bl	800415c <HAL_PWREx_GetVoltageRange>
 8004f38:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004f3a:	4b1e      	ldr	r3, [pc, #120]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f3e:	4a1d      	ldr	r2, [pc, #116]	; (8004fb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004f40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f44:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f4c:	d10b      	bne.n	8004f66 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b80      	cmp	r3, #128	; 0x80
 8004f52:	d919      	bls.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2ba0      	cmp	r3, #160	; 0xa0
 8004f58:	d902      	bls.n	8004f60 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	613b      	str	r3, [r7, #16]
 8004f5e:	e013      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f60:	2301      	movs	r3, #1
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	e010      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b80      	cmp	r3, #128	; 0x80
 8004f6a:	d902      	bls.n	8004f72 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	e00a      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b80      	cmp	r3, #128	; 0x80
 8004f76:	d102      	bne.n	8004f7e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f78:	2302      	movs	r3, #2
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	e004      	b.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b70      	cmp	r3, #112	; 0x70
 8004f82:	d101      	bne.n	8004f88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f84:	2301      	movs	r3, #1
 8004f86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f88:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f023 0207 	bic.w	r2, r3, #7
 8004f90:	4909      	ldr	r1, [pc, #36]	; (8004fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f98:	4b07      	ldr	r3, [pc, #28]	; (8004fb8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 0307 	and.w	r3, r3, #7
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d001      	beq.n	8004faa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40022000 	.word	0x40022000

08004fbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b086      	sub	sp, #24
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fc8:	2300      	movs	r3, #0
 8004fca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d041      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fdc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fe0:	d02a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004fe2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fe6:	d824      	bhi.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004fe8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fec:	d008      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004fee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ff2:	d81e      	bhi.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00a      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ff8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ffc:	d010      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ffe:	e018      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005000:	4b86      	ldr	r3, [pc, #536]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4a85      	ldr	r2, [pc, #532]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005006:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800500a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800500c:	e015      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3304      	adds	r3, #4
 8005012:	2100      	movs	r1, #0
 8005014:	4618      	mov	r0, r3
 8005016:	f000 facb 	bl	80055b0 <RCCEx_PLLSAI1_Config>
 800501a:	4603      	mov	r3, r0
 800501c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800501e:	e00c      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	3320      	adds	r3, #32
 8005024:	2100      	movs	r1, #0
 8005026:	4618      	mov	r0, r3
 8005028:	f000 fbb6 	bl	8005798 <RCCEx_PLLSAI2_Config>
 800502c:	4603      	mov	r3, r0
 800502e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005030:	e003      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	74fb      	strb	r3, [r7, #19]
      break;
 8005036:	e000      	b.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800503a:	7cfb      	ldrb	r3, [r7, #19]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10b      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005040:	4b76      	ldr	r3, [pc, #472]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005046:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800504e:	4973      	ldr	r1, [pc, #460]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005056:	e001      	b.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005058:	7cfb      	ldrb	r3, [r7, #19]
 800505a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d041      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800506c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005070:	d02a      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005072:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005076:	d824      	bhi.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005078:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800507c:	d008      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800507e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005082:	d81e      	bhi.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005084:	2b00      	cmp	r3, #0
 8005086:	d00a      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800508c:	d010      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800508e:	e018      	b.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005090:	4b62      	ldr	r3, [pc, #392]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	4a61      	ldr	r2, [pc, #388]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800509a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800509c:	e015      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3304      	adds	r3, #4
 80050a2:	2100      	movs	r1, #0
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fa83 	bl	80055b0 <RCCEx_PLLSAI1_Config>
 80050aa:	4603      	mov	r3, r0
 80050ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050ae:	e00c      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	3320      	adds	r3, #32
 80050b4:	2100      	movs	r1, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fb6e 	bl	8005798 <RCCEx_PLLSAI2_Config>
 80050bc:	4603      	mov	r3, r0
 80050be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050c0:	e003      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	74fb      	strb	r3, [r7, #19]
      break;
 80050c6:	e000      	b.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80050c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ca:	7cfb      	ldrb	r3, [r7, #19]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10b      	bne.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050d0:	4b52      	ldr	r3, [pc, #328]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80050de:	494f      	ldr	r1, [pc, #316]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80050e6:	e001      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050e8:	7cfb      	ldrb	r3, [r7, #19]
 80050ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f000 80a0 	beq.w	800523a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050fa:	2300      	movs	r3, #0
 80050fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80050fe:	4b47      	ldr	r3, [pc, #284]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800510e:	2300      	movs	r3, #0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00d      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005114:	4b41      	ldr	r3, [pc, #260]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005118:	4a40      	ldr	r2, [pc, #256]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800511a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800511e:	6593      	str	r3, [r2, #88]	; 0x58
 8005120:	4b3e      	ldr	r3, [pc, #248]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800512c:	2301      	movs	r3, #1
 800512e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005130:	4b3b      	ldr	r3, [pc, #236]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a3a      	ldr	r2, [pc, #232]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800513a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800513c:	f7fd f90a 	bl	8002354 <HAL_GetTick>
 8005140:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005142:	e009      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005144:	f7fd f906 	bl	8002354 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d902      	bls.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	74fb      	strb	r3, [r7, #19]
        break;
 8005156:	e005      	b.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005158:	4b31      	ldr	r3, [pc, #196]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0ef      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005164:	7cfb      	ldrb	r3, [r7, #19]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d15c      	bne.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800516a:	4b2c      	ldr	r3, [pc, #176]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005170:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005174:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d01f      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	429a      	cmp	r2, r3
 8005186:	d019      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005188:	4b24      	ldr	r3, [pc, #144]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005192:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005194:	4b21      	ldr	r3, [pc, #132]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519a:	4a20      	ldr	r2, [pc, #128]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800519c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051a4:	4b1d      	ldr	r3, [pc, #116]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	4a1c      	ldr	r2, [pc, #112]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051b4:	4a19      	ldr	r2, [pc, #100]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d016      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c6:	f7fd f8c5 	bl	8002354 <HAL_GetTick>
 80051ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051cc:	e00b      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ce:	f7fd f8c1 	bl	8002354 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051dc:	4293      	cmp	r3, r2
 80051de:	d902      	bls.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	74fb      	strb	r3, [r7, #19]
            break;
 80051e4:	e006      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051e6:	4b0d      	ldr	r3, [pc, #52]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0ec      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80051f4:	7cfb      	ldrb	r3, [r7, #19]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10c      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051fa:	4b08      	ldr	r3, [pc, #32]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005200:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800520a:	4904      	ldr	r1, [pc, #16]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005212:	e009      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005214:	7cfb      	ldrb	r3, [r7, #19]
 8005216:	74bb      	strb	r3, [r7, #18]
 8005218:	e006      	b.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800521a:	bf00      	nop
 800521c:	40021000 	.word	0x40021000
 8005220:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005224:	7cfb      	ldrb	r3, [r7, #19]
 8005226:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005228:	7c7b      	ldrb	r3, [r7, #17]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d105      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800522e:	4b9e      	ldr	r3, [pc, #632]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	4a9d      	ldr	r2, [pc, #628]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005234:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005238:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005246:	4b98      	ldr	r3, [pc, #608]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524c:	f023 0203 	bic.w	r2, r3, #3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005254:	4994      	ldr	r1, [pc, #592]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 0302 	and.w	r3, r3, #2
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005268:	4b8f      	ldr	r3, [pc, #572]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526e:	f023 020c 	bic.w	r2, r3, #12
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005276:	498c      	ldr	r1, [pc, #560]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800528a:	4b87      	ldr	r3, [pc, #540]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005290:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005298:	4983      	ldr	r1, [pc, #524]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00a      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052ac:	4b7e      	ldr	r3, [pc, #504]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052ba:	497b      	ldr	r1, [pc, #492]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0310 	and.w	r3, r3, #16
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052ce:	4b76      	ldr	r3, [pc, #472]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052dc:	4972      	ldr	r1, [pc, #456]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0320 	and.w	r3, r3, #32
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052f0:	4b6d      	ldr	r3, [pc, #436]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052fe:	496a      	ldr	r1, [pc, #424]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005300:	4313      	orrs	r3, r2
 8005302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00a      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005312:	4b65      	ldr	r3, [pc, #404]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005318:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005320:	4961      	ldr	r1, [pc, #388]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00a      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005334:	4b5c      	ldr	r3, [pc, #368]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005342:	4959      	ldr	r1, [pc, #356]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005344:	4313      	orrs	r3, r2
 8005346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005356:	4b54      	ldr	r3, [pc, #336]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005364:	4950      	ldr	r1, [pc, #320]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005366:	4313      	orrs	r3, r2
 8005368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00a      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005378:	4b4b      	ldr	r3, [pc, #300]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800537a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005386:	4948      	ldr	r1, [pc, #288]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005388:	4313      	orrs	r3, r2
 800538a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800539a:	4b43      	ldr	r3, [pc, #268]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800539c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a8:	493f      	ldr	r1, [pc, #252]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d028      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053bc:	4b3a      	ldr	r3, [pc, #232]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ca:	4937      	ldr	r1, [pc, #220]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053da:	d106      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053dc:	4b32      	ldr	r3, [pc, #200]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053de:	68db      	ldr	r3, [r3, #12]
 80053e0:	4a31      	ldr	r2, [pc, #196]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053e6:	60d3      	str	r3, [r2, #12]
 80053e8:	e011      	b.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053f2:	d10c      	bne.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	3304      	adds	r3, #4
 80053f8:	2101      	movs	r1, #1
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 f8d8 	bl	80055b0 <RCCEx_PLLSAI1_Config>
 8005400:	4603      	mov	r3, r0
 8005402:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005404:	7cfb      	ldrb	r3, [r7, #19]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800540a:	7cfb      	ldrb	r3, [r7, #19]
 800540c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d028      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800541a:	4b23      	ldr	r3, [pc, #140]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800541c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005420:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005428:	491f      	ldr	r1, [pc, #124]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800542a:	4313      	orrs	r3, r2
 800542c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005434:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005438:	d106      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800543a:	4b1b      	ldr	r3, [pc, #108]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800543c:	68db      	ldr	r3, [r3, #12]
 800543e:	4a1a      	ldr	r2, [pc, #104]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005440:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005444:	60d3      	str	r3, [r2, #12]
 8005446:	e011      	b.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800544c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005450:	d10c      	bne.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3304      	adds	r3, #4
 8005456:	2101      	movs	r1, #1
 8005458:	4618      	mov	r0, r3
 800545a:	f000 f8a9 	bl	80055b0 <RCCEx_PLLSAI1_Config>
 800545e:	4603      	mov	r3, r0
 8005460:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005462:	7cfb      	ldrb	r3, [r7, #19]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d001      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005468:	7cfb      	ldrb	r3, [r7, #19]
 800546a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005474:	2b00      	cmp	r3, #0
 8005476:	d02b      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005478:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005486:	4908      	ldr	r1, [pc, #32]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005492:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005496:	d109      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005498:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	4a02      	ldr	r2, [pc, #8]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800549e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054a2:	60d3      	str	r3, [r2, #12]
 80054a4:	e014      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80054a6:	bf00      	nop
 80054a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054b4:	d10c      	bne.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	3304      	adds	r3, #4
 80054ba:	2101      	movs	r1, #1
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 f877 	bl	80055b0 <RCCEx_PLLSAI1_Config>
 80054c2:	4603      	mov	r3, r0
 80054c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054c6:	7cfb      	ldrb	r3, [r7, #19]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80054cc:	7cfb      	ldrb	r3, [r7, #19]
 80054ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d02f      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054dc:	4b2b      	ldr	r3, [pc, #172]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054ea:	4928      	ldr	r1, [pc, #160]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80054ec:	4313      	orrs	r3, r2
 80054ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80054fa:	d10d      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3304      	adds	r3, #4
 8005500:	2102      	movs	r1, #2
 8005502:	4618      	mov	r0, r3
 8005504:	f000 f854 	bl	80055b0 <RCCEx_PLLSAI1_Config>
 8005508:	4603      	mov	r3, r0
 800550a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800550c:	7cfb      	ldrb	r3, [r7, #19]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d014      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005512:	7cfb      	ldrb	r3, [r7, #19]
 8005514:	74bb      	strb	r3, [r7, #18]
 8005516:	e011      	b.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800551c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005520:	d10c      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	3320      	adds	r3, #32
 8005526:	2102      	movs	r1, #2
 8005528:	4618      	mov	r0, r3
 800552a:	f000 f935 	bl	8005798 <RCCEx_PLLSAI2_Config>
 800552e:	4603      	mov	r3, r0
 8005530:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005532:	7cfb      	ldrb	r3, [r7, #19]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d001      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005538:	7cfb      	ldrb	r3, [r7, #19]
 800553a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00a      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005548:	4b10      	ldr	r3, [pc, #64]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800554a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005556:	490d      	ldr	r1, [pc, #52]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00b      	beq.n	8005582 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800556a:	4b08      	ldr	r3, [pc, #32]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800556c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005570:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800557a:	4904      	ldr	r1, [pc, #16]	; (800558c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800557c:	4313      	orrs	r3, r2
 800557e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005582:	7cbb      	ldrb	r3, [r7, #18]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3718      	adds	r7, #24
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40021000 	.word	0x40021000

08005590 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005590:	b480      	push	{r7}
 8005592:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a04      	ldr	r2, [pc, #16]	; (80055ac <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800559a:	f043 0304 	orr.w	r3, r3, #4
 800559e:	6013      	str	r3, [r2, #0]
}
 80055a0:	bf00      	nop
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40021000 	.word	0x40021000

080055b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055ba:	2300      	movs	r3, #0
 80055bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055be:	4b75      	ldr	r3, [pc, #468]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	f003 0303 	and.w	r3, r3, #3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d018      	beq.n	80055fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80055ca:	4b72      	ldr	r3, [pc, #456]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0203 	and.w	r2, r3, #3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d10d      	bne.n	80055f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
       ||
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80055e2:	4b6c      	ldr	r3, [pc, #432]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	091b      	lsrs	r3, r3, #4
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	1c5a      	adds	r2, r3, #1
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
       ||
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d047      	beq.n	8005686 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	73fb      	strb	r3, [r7, #15]
 80055fa:	e044      	b.n	8005686 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2b03      	cmp	r3, #3
 8005602:	d018      	beq.n	8005636 <RCCEx_PLLSAI1_Config+0x86>
 8005604:	2b03      	cmp	r3, #3
 8005606:	d825      	bhi.n	8005654 <RCCEx_PLLSAI1_Config+0xa4>
 8005608:	2b01      	cmp	r3, #1
 800560a:	d002      	beq.n	8005612 <RCCEx_PLLSAI1_Config+0x62>
 800560c:	2b02      	cmp	r3, #2
 800560e:	d009      	beq.n	8005624 <RCCEx_PLLSAI1_Config+0x74>
 8005610:	e020      	b.n	8005654 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005612:	4b60      	ldr	r3, [pc, #384]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0302 	and.w	r3, r3, #2
 800561a:	2b00      	cmp	r3, #0
 800561c:	d11d      	bne.n	800565a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005622:	e01a      	b.n	800565a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005624:	4b5b      	ldr	r3, [pc, #364]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800562c:	2b00      	cmp	r3, #0
 800562e:	d116      	bne.n	800565e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005634:	e013      	b.n	800565e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005636:	4b57      	ldr	r3, [pc, #348]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10f      	bne.n	8005662 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005642:	4b54      	ldr	r3, [pc, #336]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d109      	bne.n	8005662 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005652:	e006      	b.n	8005662 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	73fb      	strb	r3, [r7, #15]
      break;
 8005658:	e004      	b.n	8005664 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800565a:	bf00      	nop
 800565c:	e002      	b.n	8005664 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800565e:	bf00      	nop
 8005660:	e000      	b.n	8005664 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005662:	bf00      	nop
    }

    if(status == HAL_OK)
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10d      	bne.n	8005686 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800566a:	4b4a      	ldr	r3, [pc, #296]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6819      	ldr	r1, [r3, #0]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	3b01      	subs	r3, #1
 800567c:	011b      	lsls	r3, r3, #4
 800567e:	430b      	orrs	r3, r1
 8005680:	4944      	ldr	r1, [pc, #272]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005682:	4313      	orrs	r3, r2
 8005684:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005686:	7bfb      	ldrb	r3, [r7, #15]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d17d      	bne.n	8005788 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800568c:	4b41      	ldr	r3, [pc, #260]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a40      	ldr	r2, [pc, #256]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005692:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005696:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005698:	f7fc fe5c 	bl	8002354 <HAL_GetTick>
 800569c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800569e:	e009      	b.n	80056b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056a0:	f7fc fe58 	bl	8002354 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d902      	bls.n	80056b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	73fb      	strb	r3, [r7, #15]
        break;
 80056b2:	e005      	b.n	80056c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056b4:	4b37      	ldr	r3, [pc, #220]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d1ef      	bne.n	80056a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056c0:	7bfb      	ldrb	r3, [r7, #15]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d160      	bne.n	8005788 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d111      	bne.n	80056f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056cc:	4b31      	ldr	r3, [pc, #196]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80056d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6892      	ldr	r2, [r2, #8]
 80056dc:	0211      	lsls	r1, r2, #8
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	68d2      	ldr	r2, [r2, #12]
 80056e2:	0912      	lsrs	r2, r2, #4
 80056e4:	0452      	lsls	r2, r2, #17
 80056e6:	430a      	orrs	r2, r1
 80056e8:	492a      	ldr	r1, [pc, #168]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	610b      	str	r3, [r1, #16]
 80056ee:	e027      	b.n	8005740 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d112      	bne.n	800571c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056f6:	4b27      	ldr	r3, [pc, #156]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80056fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6892      	ldr	r2, [r2, #8]
 8005706:	0211      	lsls	r1, r2, #8
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6912      	ldr	r2, [r2, #16]
 800570c:	0852      	lsrs	r2, r2, #1
 800570e:	3a01      	subs	r2, #1
 8005710:	0552      	lsls	r2, r2, #21
 8005712:	430a      	orrs	r2, r1
 8005714:	491f      	ldr	r1, [pc, #124]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005716:	4313      	orrs	r3, r2
 8005718:	610b      	str	r3, [r1, #16]
 800571a:	e011      	b.n	8005740 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800571c:	4b1d      	ldr	r3, [pc, #116]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005724:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6892      	ldr	r2, [r2, #8]
 800572c:	0211      	lsls	r1, r2, #8
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6952      	ldr	r2, [r2, #20]
 8005732:	0852      	lsrs	r2, r2, #1
 8005734:	3a01      	subs	r2, #1
 8005736:	0652      	lsls	r2, r2, #25
 8005738:	430a      	orrs	r2, r1
 800573a:	4916      	ldr	r1, [pc, #88]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800573c:	4313      	orrs	r3, r2
 800573e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005740:	4b14      	ldr	r3, [pc, #80]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a13      	ldr	r2, [pc, #76]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005746:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800574a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800574c:	f7fc fe02 	bl	8002354 <HAL_GetTick>
 8005750:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005752:	e009      	b.n	8005768 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005754:	f7fc fdfe 	bl	8002354 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d902      	bls.n	8005768 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	73fb      	strb	r3, [r7, #15]
          break;
 8005766:	e005      	b.n	8005774 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0ef      	beq.n	8005754 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005774:	7bfb      	ldrb	r3, [r7, #15]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d106      	bne.n	8005788 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800577a:	4b06      	ldr	r3, [pc, #24]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 800577c:	691a      	ldr	r2, [r3, #16]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	4904      	ldr	r1, [pc, #16]	; (8005794 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005784:	4313      	orrs	r3, r2
 8005786:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005788:	7bfb      	ldrb	r3, [r7, #15]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	40021000 	.word	0x40021000

08005798 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057a6:	4b6a      	ldr	r3, [pc, #424]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f003 0303 	and.w	r3, r3, #3
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d018      	beq.n	80057e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80057b2:	4b67      	ldr	r3, [pc, #412]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0203 	and.w	r2, r3, #3
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	429a      	cmp	r2, r3
 80057c0:	d10d      	bne.n	80057de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
       ||
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d009      	beq.n	80057de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80057ca:	4b61      	ldr	r3, [pc, #388]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	091b      	lsrs	r3, r3, #4
 80057d0:	f003 0307 	and.w	r3, r3, #7
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
       ||
 80057da:	429a      	cmp	r2, r3
 80057dc:	d047      	beq.n	800586e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	73fb      	strb	r3, [r7, #15]
 80057e2:	e044      	b.n	800586e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d018      	beq.n	800581e <RCCEx_PLLSAI2_Config+0x86>
 80057ec:	2b03      	cmp	r3, #3
 80057ee:	d825      	bhi.n	800583c <RCCEx_PLLSAI2_Config+0xa4>
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d002      	beq.n	80057fa <RCCEx_PLLSAI2_Config+0x62>
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d009      	beq.n	800580c <RCCEx_PLLSAI2_Config+0x74>
 80057f8:	e020      	b.n	800583c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057fa:	4b55      	ldr	r3, [pc, #340]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d11d      	bne.n	8005842 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800580a:	e01a      	b.n	8005842 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800580c:	4b50      	ldr	r3, [pc, #320]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005814:	2b00      	cmp	r3, #0
 8005816:	d116      	bne.n	8005846 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800581c:	e013      	b.n	8005846 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800581e:	4b4c      	ldr	r3, [pc, #304]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10f      	bne.n	800584a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800582a:	4b49      	ldr	r3, [pc, #292]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d109      	bne.n	800584a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005836:	2301      	movs	r3, #1
 8005838:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800583a:	e006      	b.n	800584a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	73fb      	strb	r3, [r7, #15]
      break;
 8005840:	e004      	b.n	800584c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005842:	bf00      	nop
 8005844:	e002      	b.n	800584c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005846:	bf00      	nop
 8005848:	e000      	b.n	800584c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800584a:	bf00      	nop
    }

    if(status == HAL_OK)
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10d      	bne.n	800586e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005852:	4b3f      	ldr	r3, [pc, #252]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6819      	ldr	r1, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	3b01      	subs	r3, #1
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	430b      	orrs	r3, r1
 8005868:	4939      	ldr	r1, [pc, #228]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800586a:	4313      	orrs	r3, r2
 800586c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d167      	bne.n	8005944 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005874:	4b36      	ldr	r3, [pc, #216]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a35      	ldr	r2, [pc, #212]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800587a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800587e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005880:	f7fc fd68 	bl	8002354 <HAL_GetTick>
 8005884:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005886:	e009      	b.n	800589c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005888:	f7fc fd64 	bl	8002354 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b02      	cmp	r3, #2
 8005894:	d902      	bls.n	800589c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	73fb      	strb	r3, [r7, #15]
        break;
 800589a:	e005      	b.n	80058a8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800589c:	4b2c      	ldr	r3, [pc, #176]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d1ef      	bne.n	8005888 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d14a      	bne.n	8005944 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d111      	bne.n	80058d8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058b4:	4b26      	ldr	r3, [pc, #152]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058b6:	695b      	ldr	r3, [r3, #20]
 80058b8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80058bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	6892      	ldr	r2, [r2, #8]
 80058c4:	0211      	lsls	r1, r2, #8
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	68d2      	ldr	r2, [r2, #12]
 80058ca:	0912      	lsrs	r2, r2, #4
 80058cc:	0452      	lsls	r2, r2, #17
 80058ce:	430a      	orrs	r2, r1
 80058d0:	491f      	ldr	r1, [pc, #124]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	614b      	str	r3, [r1, #20]
 80058d6:	e011      	b.n	80058fc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80058d8:	4b1d      	ldr	r3, [pc, #116]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058da:	695b      	ldr	r3, [r3, #20]
 80058dc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80058e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6892      	ldr	r2, [r2, #8]
 80058e8:	0211      	lsls	r1, r2, #8
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6912      	ldr	r2, [r2, #16]
 80058ee:	0852      	lsrs	r2, r2, #1
 80058f0:	3a01      	subs	r2, #1
 80058f2:	0652      	lsls	r2, r2, #25
 80058f4:	430a      	orrs	r2, r1
 80058f6:	4916      	ldr	r1, [pc, #88]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80058fc:	4b14      	ldr	r3, [pc, #80]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a13      	ldr	r2, [pc, #76]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005902:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005906:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005908:	f7fc fd24 	bl	8002354 <HAL_GetTick>
 800590c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800590e:	e009      	b.n	8005924 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005910:	f7fc fd20 	bl	8002354 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b02      	cmp	r3, #2
 800591c:	d902      	bls.n	8005924 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	73fb      	strb	r3, [r7, #15]
          break;
 8005922:	e005      	b.n	8005930 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005924:	4b0a      	ldr	r3, [pc, #40]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d0ef      	beq.n	8005910 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005938:	695a      	ldr	r2, [r3, #20]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	4904      	ldr	r1, [pc, #16]	; (8005950 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005940:	4313      	orrs	r3, r2
 8005942:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005944:	7bfb      	ldrb	r3, [r7, #15]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3710      	adds	r7, #16
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000

08005954 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e095      	b.n	8005a92 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	2b00      	cmp	r3, #0
 800596c:	d108      	bne.n	8005980 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005976:	d009      	beq.n	800598c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	61da      	str	r2, [r3, #28]
 800597e:	e005      	b.n	800598c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005998:	b2db      	uxtb	r3, r3
 800599a:	2b00      	cmp	r3, #0
 800599c:	d106      	bne.n	80059ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fc f9d2 	bl	8001d50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	681a      	ldr	r2, [r3, #0]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059cc:	d902      	bls.n	80059d4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	e002      	b.n	80059da <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80059d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80059d8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	68db      	ldr	r3, [r3, #12]
 80059de:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80059e2:	d007      	beq.n	80059f4 <HAL_SPI_Init+0xa0>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	68db      	ldr	r3, [r3, #12]
 80059e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059ec:	d002      	beq.n	80059f4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a04:	431a      	orrs	r2, r3
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0302 	and.w	r3, r3, #2
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	699b      	ldr	r3, [r3, #24]
 8005a1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a36:	ea42 0103 	orr.w	r1, r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a3e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	0c1b      	lsrs	r3, r3, #16
 8005a50:	f003 0204 	and.w	r2, r3, #4
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a62:	f003 0308 	and.w	r3, r3, #8
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a70:	ea42 0103 	orr.w	r1, r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e049      	b.n	8005b40 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d106      	bne.n	8005ac6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f7fc f989 	bl	8001dd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2202      	movs	r2, #2
 8005aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4610      	mov	r0, r2
 8005ada:	f000 f949 	bl	8005d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2201      	movs	r2, #1
 8005b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2201      	movs	r2, #1
 8005b22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b3e:	2300      	movs	r3, #0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b54:	2300      	movs	r3, #0
 8005b56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e0ff      	b.n	8005d66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2b14      	cmp	r3, #20
 8005b72:	f200 80f0 	bhi.w	8005d56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b76:	a201      	add	r2, pc, #4	; (adr r2, 8005b7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b7c:	08005bd1 	.word	0x08005bd1
 8005b80:	08005d57 	.word	0x08005d57
 8005b84:	08005d57 	.word	0x08005d57
 8005b88:	08005d57 	.word	0x08005d57
 8005b8c:	08005c11 	.word	0x08005c11
 8005b90:	08005d57 	.word	0x08005d57
 8005b94:	08005d57 	.word	0x08005d57
 8005b98:	08005d57 	.word	0x08005d57
 8005b9c:	08005c53 	.word	0x08005c53
 8005ba0:	08005d57 	.word	0x08005d57
 8005ba4:	08005d57 	.word	0x08005d57
 8005ba8:	08005d57 	.word	0x08005d57
 8005bac:	08005c93 	.word	0x08005c93
 8005bb0:	08005d57 	.word	0x08005d57
 8005bb4:	08005d57 	.word	0x08005d57
 8005bb8:	08005d57 	.word	0x08005d57
 8005bbc:	08005cd5 	.word	0x08005cd5
 8005bc0:	08005d57 	.word	0x08005d57
 8005bc4:	08005d57 	.word	0x08005d57
 8005bc8:	08005d57 	.word	0x08005d57
 8005bcc:	08005d15 	.word	0x08005d15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 f964 	bl	8005ea4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	699a      	ldr	r2, [r3, #24]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f042 0208 	orr.w	r2, r2, #8
 8005bea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	699a      	ldr	r2, [r3, #24]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0204 	bic.w	r2, r2, #4
 8005bfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	6999      	ldr	r1, [r3, #24]
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	691a      	ldr	r2, [r3, #16]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	430a      	orrs	r2, r1
 8005c0c:	619a      	str	r2, [r3, #24]
      break;
 8005c0e:	e0a5      	b.n	8005d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 f9d4 	bl	8005fc4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699a      	ldr	r2, [r3, #24]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6999      	ldr	r1, [r3, #24]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	021a      	lsls	r2, r3, #8
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	619a      	str	r2, [r3, #24]
      break;
 8005c50:	e084      	b.n	8005d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 fa3d 	bl	80060d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	69da      	ldr	r2, [r3, #28]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f042 0208 	orr.w	r2, r2, #8
 8005c6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	69da      	ldr	r2, [r3, #28]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f022 0204 	bic.w	r2, r2, #4
 8005c7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69d9      	ldr	r1, [r3, #28]
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	691a      	ldr	r2, [r3, #16]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	61da      	str	r2, [r3, #28]
      break;
 8005c90:	e064      	b.n	8005d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 faa5 	bl	80061e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69da      	ldr	r2, [r3, #28]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69da      	ldr	r2, [r3, #28]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69d9      	ldr	r1, [r3, #28]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	021a      	lsls	r2, r3, #8
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	430a      	orrs	r2, r1
 8005cd0:	61da      	str	r2, [r3, #28]
      break;
 8005cd2:	e043      	b.n	8005d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68b9      	ldr	r1, [r7, #8]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 faee 	bl	80062bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0208 	orr.w	r2, r2, #8
 8005cee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0204 	bic.w	r2, r2, #4
 8005cfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	691a      	ldr	r2, [r3, #16]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d12:	e023      	b.n	8005d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fb32 	bl	8006384 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	021a      	lsls	r2, r3, #8
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d54:	e002      	b.n	8005d5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d56:	2301      	movs	r3, #1
 8005d58:	75fb      	strb	r3, [r7, #23]
      break;
 8005d5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3718      	adds	r7, #24
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop

08005d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a40      	ldr	r2, [pc, #256]	; (8005e84 <TIM_Base_SetConfig+0x114>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d013      	beq.n	8005db0 <TIM_Base_SetConfig+0x40>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d8e:	d00f      	beq.n	8005db0 <TIM_Base_SetConfig+0x40>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a3d      	ldr	r2, [pc, #244]	; (8005e88 <TIM_Base_SetConfig+0x118>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00b      	beq.n	8005db0 <TIM_Base_SetConfig+0x40>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	4a3c      	ldr	r2, [pc, #240]	; (8005e8c <TIM_Base_SetConfig+0x11c>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d007      	beq.n	8005db0 <TIM_Base_SetConfig+0x40>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a3b      	ldr	r2, [pc, #236]	; (8005e90 <TIM_Base_SetConfig+0x120>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d003      	beq.n	8005db0 <TIM_Base_SetConfig+0x40>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a3a      	ldr	r2, [pc, #232]	; (8005e94 <TIM_Base_SetConfig+0x124>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d108      	bne.n	8005dc2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	4a2f      	ldr	r2, [pc, #188]	; (8005e84 <TIM_Base_SetConfig+0x114>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d01f      	beq.n	8005e0a <TIM_Base_SetConfig+0x9a>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd0:	d01b      	beq.n	8005e0a <TIM_Base_SetConfig+0x9a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a2c      	ldr	r2, [pc, #176]	; (8005e88 <TIM_Base_SetConfig+0x118>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d017      	beq.n	8005e0a <TIM_Base_SetConfig+0x9a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a2b      	ldr	r2, [pc, #172]	; (8005e8c <TIM_Base_SetConfig+0x11c>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d013      	beq.n	8005e0a <TIM_Base_SetConfig+0x9a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a2a      	ldr	r2, [pc, #168]	; (8005e90 <TIM_Base_SetConfig+0x120>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00f      	beq.n	8005e0a <TIM_Base_SetConfig+0x9a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a29      	ldr	r2, [pc, #164]	; (8005e94 <TIM_Base_SetConfig+0x124>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00b      	beq.n	8005e0a <TIM_Base_SetConfig+0x9a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a28      	ldr	r2, [pc, #160]	; (8005e98 <TIM_Base_SetConfig+0x128>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d007      	beq.n	8005e0a <TIM_Base_SetConfig+0x9a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a27      	ldr	r2, [pc, #156]	; (8005e9c <TIM_Base_SetConfig+0x12c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d003      	beq.n	8005e0a <TIM_Base_SetConfig+0x9a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a26      	ldr	r2, [pc, #152]	; (8005ea0 <TIM_Base_SetConfig+0x130>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d108      	bne.n	8005e1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a10      	ldr	r2, [pc, #64]	; (8005e84 <TIM_Base_SetConfig+0x114>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d00f      	beq.n	8005e68 <TIM_Base_SetConfig+0xf8>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a12      	ldr	r2, [pc, #72]	; (8005e94 <TIM_Base_SetConfig+0x124>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d00b      	beq.n	8005e68 <TIM_Base_SetConfig+0xf8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a11      	ldr	r2, [pc, #68]	; (8005e98 <TIM_Base_SetConfig+0x128>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d007      	beq.n	8005e68 <TIM_Base_SetConfig+0xf8>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4a10      	ldr	r2, [pc, #64]	; (8005e9c <TIM_Base_SetConfig+0x12c>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d003      	beq.n	8005e68 <TIM_Base_SetConfig+0xf8>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a0f      	ldr	r2, [pc, #60]	; (8005ea0 <TIM_Base_SetConfig+0x130>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d103      	bne.n	8005e70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	691a      	ldr	r2, [r3, #16]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	615a      	str	r2, [r3, #20]
}
 8005e76:	bf00      	nop
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40012c00 	.word	0x40012c00
 8005e88:	40000400 	.word	0x40000400
 8005e8c:	40000800 	.word	0x40000800
 8005e90:	40000c00 	.word	0x40000c00
 8005e94:	40013400 	.word	0x40013400
 8005e98:	40014000 	.word	0x40014000
 8005e9c:	40014400 	.word	0x40014400
 8005ea0:	40014800 	.word	0x40014800

08005ea4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b087      	sub	sp, #28
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	f023 0201 	bic.w	r2, r3, #1
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 0303 	bic.w	r3, r3, #3
 8005ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f023 0302 	bic.w	r3, r3, #2
 8005ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a2c      	ldr	r2, [pc, #176]	; (8005fb0 <TIM_OC1_SetConfig+0x10c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d00f      	beq.n	8005f24 <TIM_OC1_SetConfig+0x80>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a2b      	ldr	r2, [pc, #172]	; (8005fb4 <TIM_OC1_SetConfig+0x110>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d00b      	beq.n	8005f24 <TIM_OC1_SetConfig+0x80>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a2a      	ldr	r2, [pc, #168]	; (8005fb8 <TIM_OC1_SetConfig+0x114>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d007      	beq.n	8005f24 <TIM_OC1_SetConfig+0x80>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a29      	ldr	r2, [pc, #164]	; (8005fbc <TIM_OC1_SetConfig+0x118>)
 8005f18:	4293      	cmp	r3, r2
 8005f1a:	d003      	beq.n	8005f24 <TIM_OC1_SetConfig+0x80>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	4a28      	ldr	r2, [pc, #160]	; (8005fc0 <TIM_OC1_SetConfig+0x11c>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d10c      	bne.n	8005f3e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f023 0308 	bic.w	r3, r3, #8
 8005f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	4313      	orrs	r3, r2
 8005f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f023 0304 	bic.w	r3, r3, #4
 8005f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a1b      	ldr	r2, [pc, #108]	; (8005fb0 <TIM_OC1_SetConfig+0x10c>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00f      	beq.n	8005f66 <TIM_OC1_SetConfig+0xc2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a1a      	ldr	r2, [pc, #104]	; (8005fb4 <TIM_OC1_SetConfig+0x110>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00b      	beq.n	8005f66 <TIM_OC1_SetConfig+0xc2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a19      	ldr	r2, [pc, #100]	; (8005fb8 <TIM_OC1_SetConfig+0x114>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d007      	beq.n	8005f66 <TIM_OC1_SetConfig+0xc2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a18      	ldr	r2, [pc, #96]	; (8005fbc <TIM_OC1_SetConfig+0x118>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d003      	beq.n	8005f66 <TIM_OC1_SetConfig+0xc2>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a17      	ldr	r2, [pc, #92]	; (8005fc0 <TIM_OC1_SetConfig+0x11c>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d111      	bne.n	8005f8a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	699b      	ldr	r3, [r3, #24]
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	693a      	ldr	r2, [r7, #16]
 8005f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	621a      	str	r2, [r3, #32]
}
 8005fa4:	bf00      	nop
 8005fa6:	371c      	adds	r7, #28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	40012c00 	.word	0x40012c00
 8005fb4:	40013400 	.word	0x40013400
 8005fb8:	40014000 	.word	0x40014000
 8005fbc:	40014400 	.word	0x40014400
 8005fc0:	40014800 	.word	0x40014800

08005fc4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b087      	sub	sp, #28
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	f023 0210 	bic.w	r2, r3, #16
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	021b      	lsls	r3, r3, #8
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4313      	orrs	r3, r2
 800600a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	f023 0320 	bic.w	r3, r3, #32
 8006012:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a28      	ldr	r2, [pc, #160]	; (80060c4 <TIM_OC2_SetConfig+0x100>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_OC2_SetConfig+0x6c>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a27      	ldr	r2, [pc, #156]	; (80060c8 <TIM_OC2_SetConfig+0x104>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d10d      	bne.n	800604c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006036:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800604a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	4a1d      	ldr	r2, [pc, #116]	; (80060c4 <TIM_OC2_SetConfig+0x100>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d00f      	beq.n	8006074 <TIM_OC2_SetConfig+0xb0>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a1c      	ldr	r2, [pc, #112]	; (80060c8 <TIM_OC2_SetConfig+0x104>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d00b      	beq.n	8006074 <TIM_OC2_SetConfig+0xb0>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a1b      	ldr	r2, [pc, #108]	; (80060cc <TIM_OC2_SetConfig+0x108>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d007      	beq.n	8006074 <TIM_OC2_SetConfig+0xb0>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4a1a      	ldr	r2, [pc, #104]	; (80060d0 <TIM_OC2_SetConfig+0x10c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d003      	beq.n	8006074 <TIM_OC2_SetConfig+0xb0>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a19      	ldr	r2, [pc, #100]	; (80060d4 <TIM_OC2_SetConfig+0x110>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d113      	bne.n	800609c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800607a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	695b      	ldr	r3, [r3, #20]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	4313      	orrs	r3, r2
 800608e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	4313      	orrs	r3, r2
 800609a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	685a      	ldr	r2, [r3, #4]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	697a      	ldr	r2, [r7, #20]
 80060b4:	621a      	str	r2, [r3, #32]
}
 80060b6:	bf00      	nop
 80060b8:	371c      	adds	r7, #28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40012c00 	.word	0x40012c00
 80060c8:	40013400 	.word	0x40013400
 80060cc:	40014000 	.word	0x40014000
 80060d0:	40014400 	.word	0x40014400
 80060d4:	40014800 	.word	0x40014800

080060d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060d8:	b480      	push	{r7}
 80060da:	b087      	sub	sp, #28
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a1b      	ldr	r3, [r3, #32]
 80060ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800610a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f023 0303 	bic.w	r3, r3, #3
 8006112:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	4313      	orrs	r3, r2
 800611c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006124:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	689b      	ldr	r3, [r3, #8]
 800612a:	021b      	lsls	r3, r3, #8
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	4313      	orrs	r3, r2
 8006130:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a27      	ldr	r2, [pc, #156]	; (80061d4 <TIM_OC3_SetConfig+0xfc>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d003      	beq.n	8006142 <TIM_OC3_SetConfig+0x6a>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a26      	ldr	r2, [pc, #152]	; (80061d8 <TIM_OC3_SetConfig+0x100>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d10d      	bne.n	800615e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006148:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	021b      	lsls	r3, r3, #8
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800615c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a1c      	ldr	r2, [pc, #112]	; (80061d4 <TIM_OC3_SetConfig+0xfc>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d00f      	beq.n	8006186 <TIM_OC3_SetConfig+0xae>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a1b      	ldr	r2, [pc, #108]	; (80061d8 <TIM_OC3_SetConfig+0x100>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00b      	beq.n	8006186 <TIM_OC3_SetConfig+0xae>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4a1a      	ldr	r2, [pc, #104]	; (80061dc <TIM_OC3_SetConfig+0x104>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d007      	beq.n	8006186 <TIM_OC3_SetConfig+0xae>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4a19      	ldr	r2, [pc, #100]	; (80061e0 <TIM_OC3_SetConfig+0x108>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d003      	beq.n	8006186 <TIM_OC3_SetConfig+0xae>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	4a18      	ldr	r2, [pc, #96]	; (80061e4 <TIM_OC3_SetConfig+0x10c>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d113      	bne.n	80061ae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800618c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006194:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	695b      	ldr	r3, [r3, #20]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	693a      	ldr	r2, [r7, #16]
 800619e:	4313      	orrs	r3, r2
 80061a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	011b      	lsls	r3, r3, #4
 80061a8:	693a      	ldr	r2, [r7, #16]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	697a      	ldr	r2, [r7, #20]
 80061c6:	621a      	str	r2, [r3, #32]
}
 80061c8:	bf00      	nop
 80061ca:	371c      	adds	r7, #28
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	40012c00 	.word	0x40012c00
 80061d8:	40013400 	.word	0x40013400
 80061dc:	40014000 	.word	0x40014000
 80061e0:	40014400 	.word	0x40014400
 80061e4:	40014800 	.word	0x40014800

080061e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b087      	sub	sp, #28
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a1b      	ldr	r3, [r3, #32]
 80061fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	69db      	ldr	r3, [r3, #28]
 800620e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006216:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800621a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006222:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	021b      	lsls	r3, r3, #8
 800622a:	68fa      	ldr	r2, [r7, #12]
 800622c:	4313      	orrs	r3, r2
 800622e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006236:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	031b      	lsls	r3, r3, #12
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4313      	orrs	r3, r2
 8006242:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a18      	ldr	r2, [pc, #96]	; (80062a8 <TIM_OC4_SetConfig+0xc0>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d00f      	beq.n	800626c <TIM_OC4_SetConfig+0x84>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a17      	ldr	r2, [pc, #92]	; (80062ac <TIM_OC4_SetConfig+0xc4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d00b      	beq.n	800626c <TIM_OC4_SetConfig+0x84>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a16      	ldr	r2, [pc, #88]	; (80062b0 <TIM_OC4_SetConfig+0xc8>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d007      	beq.n	800626c <TIM_OC4_SetConfig+0x84>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	4a15      	ldr	r2, [pc, #84]	; (80062b4 <TIM_OC4_SetConfig+0xcc>)
 8006260:	4293      	cmp	r3, r2
 8006262:	d003      	beq.n	800626c <TIM_OC4_SetConfig+0x84>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4a14      	ldr	r2, [pc, #80]	; (80062b8 <TIM_OC4_SetConfig+0xd0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d109      	bne.n	8006280 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006272:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	695b      	ldr	r3, [r3, #20]
 8006278:	019b      	lsls	r3, r3, #6
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	4313      	orrs	r3, r2
 800627e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	621a      	str	r2, [r3, #32]
}
 800629a:	bf00      	nop
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	40012c00 	.word	0x40012c00
 80062ac:	40013400 	.word	0x40013400
 80062b0:	40014000 	.word	0x40014000
 80062b4:	40014400 	.word	0x40014400
 80062b8:	40014800 	.word	0x40014800

080062bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a1b      	ldr	r3, [r3, #32]
 80062d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006300:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	041b      	lsls	r3, r3, #16
 8006308:	693a      	ldr	r2, [r7, #16]
 800630a:	4313      	orrs	r3, r2
 800630c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a17      	ldr	r2, [pc, #92]	; (8006370 <TIM_OC5_SetConfig+0xb4>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00f      	beq.n	8006336 <TIM_OC5_SetConfig+0x7a>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a16      	ldr	r2, [pc, #88]	; (8006374 <TIM_OC5_SetConfig+0xb8>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00b      	beq.n	8006336 <TIM_OC5_SetConfig+0x7a>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a15      	ldr	r2, [pc, #84]	; (8006378 <TIM_OC5_SetConfig+0xbc>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d007      	beq.n	8006336 <TIM_OC5_SetConfig+0x7a>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a14      	ldr	r2, [pc, #80]	; (800637c <TIM_OC5_SetConfig+0xc0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d003      	beq.n	8006336 <TIM_OC5_SetConfig+0x7a>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a13      	ldr	r2, [pc, #76]	; (8006380 <TIM_OC5_SetConfig+0xc4>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d109      	bne.n	800634a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800633c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	021b      	lsls	r3, r3, #8
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	68fa      	ldr	r2, [r7, #12]
 8006354:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	621a      	str	r2, [r3, #32]
}
 8006364:	bf00      	nop
 8006366:	371c      	adds	r7, #28
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	40012c00 	.word	0x40012c00
 8006374:	40013400 	.word	0x40013400
 8006378:	40014000 	.word	0x40014000
 800637c:	40014400 	.word	0x40014400
 8006380:	40014800 	.word	0x40014800

08006384 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80063b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	021b      	lsls	r3, r3, #8
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	689b      	ldr	r3, [r3, #8]
 80063d0:	051b      	lsls	r3, r3, #20
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a18      	ldr	r2, [pc, #96]	; (800643c <TIM_OC6_SetConfig+0xb8>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d00f      	beq.n	8006400 <TIM_OC6_SetConfig+0x7c>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a17      	ldr	r2, [pc, #92]	; (8006440 <TIM_OC6_SetConfig+0xbc>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d00b      	beq.n	8006400 <TIM_OC6_SetConfig+0x7c>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a16      	ldr	r2, [pc, #88]	; (8006444 <TIM_OC6_SetConfig+0xc0>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d007      	beq.n	8006400 <TIM_OC6_SetConfig+0x7c>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	4a15      	ldr	r2, [pc, #84]	; (8006448 <TIM_OC6_SetConfig+0xc4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d003      	beq.n	8006400 <TIM_OC6_SetConfig+0x7c>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a14      	ldr	r2, [pc, #80]	; (800644c <TIM_OC6_SetConfig+0xc8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d109      	bne.n	8006414 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006406:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	029b      	lsls	r3, r3, #10
 800640e:	697a      	ldr	r2, [r7, #20]
 8006410:	4313      	orrs	r3, r2
 8006412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	621a      	str	r2, [r3, #32]
}
 800642e:	bf00      	nop
 8006430:	371c      	adds	r7, #28
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	40012c00 	.word	0x40012c00
 8006440:	40013400 	.word	0x40013400
 8006444:	40014000 	.word	0x40014000
 8006448:	40014400 	.word	0x40014400
 800644c:	40014800 	.word	0x40014800

08006450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006460:	2b01      	cmp	r3, #1
 8006462:	d101      	bne.n	8006468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006464:	2302      	movs	r3, #2
 8006466:	e068      	b.n	800653a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2201      	movs	r2, #1
 800646c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2202      	movs	r2, #2
 8006474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a2e      	ldr	r2, [pc, #184]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d004      	beq.n	800649c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a2d      	ldr	r2, [pc, #180]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d108      	bne.n	80064ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	4313      	orrs	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68fa      	ldr	r2, [r7, #12]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a1e      	ldr	r2, [pc, #120]	; (8006548 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d01d      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064da:	d018      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1b      	ldr	r2, [pc, #108]	; (8006550 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d013      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1a      	ldr	r2, [pc, #104]	; (8006554 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00e      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a18      	ldr	r2, [pc, #96]	; (8006558 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d009      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a13      	ldr	r2, [pc, #76]	; (800654c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d004      	beq.n	800650e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a14      	ldr	r2, [pc, #80]	; (800655c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d10c      	bne.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	4313      	orrs	r3, r2
 800651e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40013400 	.word	0x40013400
 8006550:	40000400 	.word	0x40000400
 8006554:	40000800 	.word	0x40000800
 8006558:	40000c00 	.word	0x40000c00
 800655c:	40014000 	.word	0x40014000

08006560 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e040      	b.n	80065f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006576:	2b00      	cmp	r3, #0
 8006578:	d106      	bne.n	8006588 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f7fb fc7a 	bl	8001e7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2224      	movs	r2, #36	; 0x24
 800658c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f022 0201 	bic.w	r2, r2, #1
 800659c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d002      	beq.n	80065ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 fae0 	bl	8006b6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 f825 	bl	80065fc <UART_SetConfig>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e01b      	b.n	80065f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689a      	ldr	r2, [r3, #8]
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f000 fb5f 	bl	8006cb0 <UART_CheckIdleState>
 80065f2:	4603      	mov	r3, r0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006600:	b08a      	sub	sp, #40	; 0x28
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	689a      	ldr	r2, [r3, #8]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	431a      	orrs	r2, r3
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	431a      	orrs	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	4313      	orrs	r3, r2
 8006622:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4ba4      	ldr	r3, [pc, #656]	; (80068bc <UART_SetConfig+0x2c0>)
 800662c:	4013      	ands	r3, r2
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	6812      	ldr	r2, [r2, #0]
 8006632:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006634:	430b      	orrs	r3, r1
 8006636:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	68da      	ldr	r2, [r3, #12]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	430a      	orrs	r2, r1
 800664c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a99      	ldr	r2, [pc, #612]	; (80068c0 <UART_SetConfig+0x2c4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d004      	beq.n	8006668 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006664:	4313      	orrs	r3, r2
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006678:	430a      	orrs	r2, r1
 800667a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a90      	ldr	r2, [pc, #576]	; (80068c4 <UART_SetConfig+0x2c8>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d126      	bne.n	80066d4 <UART_SetConfig+0xd8>
 8006686:	4b90      	ldr	r3, [pc, #576]	; (80068c8 <UART_SetConfig+0x2cc>)
 8006688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800668c:	f003 0303 	and.w	r3, r3, #3
 8006690:	2b03      	cmp	r3, #3
 8006692:	d81b      	bhi.n	80066cc <UART_SetConfig+0xd0>
 8006694:	a201      	add	r2, pc, #4	; (adr r2, 800669c <UART_SetConfig+0xa0>)
 8006696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800669a:	bf00      	nop
 800669c:	080066ad 	.word	0x080066ad
 80066a0:	080066bd 	.word	0x080066bd
 80066a4:	080066b5 	.word	0x080066b5
 80066a8:	080066c5 	.word	0x080066c5
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066b2:	e116      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80066b4:	2302      	movs	r3, #2
 80066b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ba:	e112      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80066bc:	2304      	movs	r3, #4
 80066be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c2:	e10e      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80066c4:	2308      	movs	r3, #8
 80066c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ca:	e10a      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80066cc:	2310      	movs	r3, #16
 80066ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066d2:	e106      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a7c      	ldr	r2, [pc, #496]	; (80068cc <UART_SetConfig+0x2d0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d138      	bne.n	8006750 <UART_SetConfig+0x154>
 80066de:	4b7a      	ldr	r3, [pc, #488]	; (80068c8 <UART_SetConfig+0x2cc>)
 80066e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e4:	f003 030c 	and.w	r3, r3, #12
 80066e8:	2b0c      	cmp	r3, #12
 80066ea:	d82d      	bhi.n	8006748 <UART_SetConfig+0x14c>
 80066ec:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <UART_SetConfig+0xf8>)
 80066ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f2:	bf00      	nop
 80066f4:	08006729 	.word	0x08006729
 80066f8:	08006749 	.word	0x08006749
 80066fc:	08006749 	.word	0x08006749
 8006700:	08006749 	.word	0x08006749
 8006704:	08006739 	.word	0x08006739
 8006708:	08006749 	.word	0x08006749
 800670c:	08006749 	.word	0x08006749
 8006710:	08006749 	.word	0x08006749
 8006714:	08006731 	.word	0x08006731
 8006718:	08006749 	.word	0x08006749
 800671c:	08006749 	.word	0x08006749
 8006720:	08006749 	.word	0x08006749
 8006724:	08006741 	.word	0x08006741
 8006728:	2300      	movs	r3, #0
 800672a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800672e:	e0d8      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006730:	2302      	movs	r3, #2
 8006732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006736:	e0d4      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006738:	2304      	movs	r3, #4
 800673a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800673e:	e0d0      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006740:	2308      	movs	r3, #8
 8006742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006746:	e0cc      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006748:	2310      	movs	r3, #16
 800674a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800674e:	e0c8      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a5e      	ldr	r2, [pc, #376]	; (80068d0 <UART_SetConfig+0x2d4>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d125      	bne.n	80067a6 <UART_SetConfig+0x1aa>
 800675a:	4b5b      	ldr	r3, [pc, #364]	; (80068c8 <UART_SetConfig+0x2cc>)
 800675c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006760:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006764:	2b30      	cmp	r3, #48	; 0x30
 8006766:	d016      	beq.n	8006796 <UART_SetConfig+0x19a>
 8006768:	2b30      	cmp	r3, #48	; 0x30
 800676a:	d818      	bhi.n	800679e <UART_SetConfig+0x1a2>
 800676c:	2b20      	cmp	r3, #32
 800676e:	d00a      	beq.n	8006786 <UART_SetConfig+0x18a>
 8006770:	2b20      	cmp	r3, #32
 8006772:	d814      	bhi.n	800679e <UART_SetConfig+0x1a2>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d002      	beq.n	800677e <UART_SetConfig+0x182>
 8006778:	2b10      	cmp	r3, #16
 800677a:	d008      	beq.n	800678e <UART_SetConfig+0x192>
 800677c:	e00f      	b.n	800679e <UART_SetConfig+0x1a2>
 800677e:	2300      	movs	r3, #0
 8006780:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006784:	e0ad      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006786:	2302      	movs	r3, #2
 8006788:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800678c:	e0a9      	b.n	80068e2 <UART_SetConfig+0x2e6>
 800678e:	2304      	movs	r3, #4
 8006790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006794:	e0a5      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006796:	2308      	movs	r3, #8
 8006798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800679c:	e0a1      	b.n	80068e2 <UART_SetConfig+0x2e6>
 800679e:	2310      	movs	r3, #16
 80067a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067a4:	e09d      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a4a      	ldr	r2, [pc, #296]	; (80068d4 <UART_SetConfig+0x2d8>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d125      	bne.n	80067fc <UART_SetConfig+0x200>
 80067b0:	4b45      	ldr	r3, [pc, #276]	; (80068c8 <UART_SetConfig+0x2cc>)
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80067ba:	2bc0      	cmp	r3, #192	; 0xc0
 80067bc:	d016      	beq.n	80067ec <UART_SetConfig+0x1f0>
 80067be:	2bc0      	cmp	r3, #192	; 0xc0
 80067c0:	d818      	bhi.n	80067f4 <UART_SetConfig+0x1f8>
 80067c2:	2b80      	cmp	r3, #128	; 0x80
 80067c4:	d00a      	beq.n	80067dc <UART_SetConfig+0x1e0>
 80067c6:	2b80      	cmp	r3, #128	; 0x80
 80067c8:	d814      	bhi.n	80067f4 <UART_SetConfig+0x1f8>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <UART_SetConfig+0x1d8>
 80067ce:	2b40      	cmp	r3, #64	; 0x40
 80067d0:	d008      	beq.n	80067e4 <UART_SetConfig+0x1e8>
 80067d2:	e00f      	b.n	80067f4 <UART_SetConfig+0x1f8>
 80067d4:	2300      	movs	r3, #0
 80067d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067da:	e082      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80067dc:	2302      	movs	r3, #2
 80067de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e2:	e07e      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80067e4:	2304      	movs	r3, #4
 80067e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ea:	e07a      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80067ec:	2308      	movs	r3, #8
 80067ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067f2:	e076      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80067f4:	2310      	movs	r3, #16
 80067f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067fa:	e072      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a35      	ldr	r2, [pc, #212]	; (80068d8 <UART_SetConfig+0x2dc>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d12a      	bne.n	800685c <UART_SetConfig+0x260>
 8006806:	4b30      	ldr	r3, [pc, #192]	; (80068c8 <UART_SetConfig+0x2cc>)
 8006808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800680c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006814:	d01a      	beq.n	800684c <UART_SetConfig+0x250>
 8006816:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800681a:	d81b      	bhi.n	8006854 <UART_SetConfig+0x258>
 800681c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006820:	d00c      	beq.n	800683c <UART_SetConfig+0x240>
 8006822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006826:	d815      	bhi.n	8006854 <UART_SetConfig+0x258>
 8006828:	2b00      	cmp	r3, #0
 800682a:	d003      	beq.n	8006834 <UART_SetConfig+0x238>
 800682c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006830:	d008      	beq.n	8006844 <UART_SetConfig+0x248>
 8006832:	e00f      	b.n	8006854 <UART_SetConfig+0x258>
 8006834:	2300      	movs	r3, #0
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800683a:	e052      	b.n	80068e2 <UART_SetConfig+0x2e6>
 800683c:	2302      	movs	r3, #2
 800683e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006842:	e04e      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006844:	2304      	movs	r3, #4
 8006846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800684a:	e04a      	b.n	80068e2 <UART_SetConfig+0x2e6>
 800684c:	2308      	movs	r3, #8
 800684e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006852:	e046      	b.n	80068e2 <UART_SetConfig+0x2e6>
 8006854:	2310      	movs	r3, #16
 8006856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800685a:	e042      	b.n	80068e2 <UART_SetConfig+0x2e6>
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a17      	ldr	r2, [pc, #92]	; (80068c0 <UART_SetConfig+0x2c4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d13a      	bne.n	80068dc <UART_SetConfig+0x2e0>
 8006866:	4b18      	ldr	r3, [pc, #96]	; (80068c8 <UART_SetConfig+0x2cc>)
 8006868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006870:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006874:	d01a      	beq.n	80068ac <UART_SetConfig+0x2b0>
 8006876:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800687a:	d81b      	bhi.n	80068b4 <UART_SetConfig+0x2b8>
 800687c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006880:	d00c      	beq.n	800689c <UART_SetConfig+0x2a0>
 8006882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006886:	d815      	bhi.n	80068b4 <UART_SetConfig+0x2b8>
 8006888:	2b00      	cmp	r3, #0
 800688a:	d003      	beq.n	8006894 <UART_SetConfig+0x298>
 800688c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006890:	d008      	beq.n	80068a4 <UART_SetConfig+0x2a8>
 8006892:	e00f      	b.n	80068b4 <UART_SetConfig+0x2b8>
 8006894:	2300      	movs	r3, #0
 8006896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800689a:	e022      	b.n	80068e2 <UART_SetConfig+0x2e6>
 800689c:	2302      	movs	r3, #2
 800689e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a2:	e01e      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80068a4:	2304      	movs	r3, #4
 80068a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068aa:	e01a      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80068ac:	2308      	movs	r3, #8
 80068ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068b2:	e016      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80068b4:	2310      	movs	r3, #16
 80068b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ba:	e012      	b.n	80068e2 <UART_SetConfig+0x2e6>
 80068bc:	efff69f3 	.word	0xefff69f3
 80068c0:	40008000 	.word	0x40008000
 80068c4:	40013800 	.word	0x40013800
 80068c8:	40021000 	.word	0x40021000
 80068cc:	40004400 	.word	0x40004400
 80068d0:	40004800 	.word	0x40004800
 80068d4:	40004c00 	.word	0x40004c00
 80068d8:	40005000 	.word	0x40005000
 80068dc:	2310      	movs	r3, #16
 80068de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a9f      	ldr	r2, [pc, #636]	; (8006b64 <UART_SetConfig+0x568>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d17a      	bne.n	80069e2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80068ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80068f0:	2b08      	cmp	r3, #8
 80068f2:	d824      	bhi.n	800693e <UART_SetConfig+0x342>
 80068f4:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <UART_SetConfig+0x300>)
 80068f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fa:	bf00      	nop
 80068fc:	08006921 	.word	0x08006921
 8006900:	0800693f 	.word	0x0800693f
 8006904:	08006929 	.word	0x08006929
 8006908:	0800693f 	.word	0x0800693f
 800690c:	0800692f 	.word	0x0800692f
 8006910:	0800693f 	.word	0x0800693f
 8006914:	0800693f 	.word	0x0800693f
 8006918:	0800693f 	.word	0x0800693f
 800691c:	08006937 	.word	0x08006937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006920:	f7fe fac0 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 8006924:	61f8      	str	r0, [r7, #28]
        break;
 8006926:	e010      	b.n	800694a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006928:	4b8f      	ldr	r3, [pc, #572]	; (8006b68 <UART_SetConfig+0x56c>)
 800692a:	61fb      	str	r3, [r7, #28]
        break;
 800692c:	e00d      	b.n	800694a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800692e:	f7fe fa21 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8006932:	61f8      	str	r0, [r7, #28]
        break;
 8006934:	e009      	b.n	800694a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800693a:	61fb      	str	r3, [r7, #28]
        break;
 800693c:	e005      	b.n	800694a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800693e:	2300      	movs	r3, #0
 8006940:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006948:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	2b00      	cmp	r3, #0
 800694e:	f000 80fb 	beq.w	8006b48 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	4613      	mov	r3, r2
 8006958:	005b      	lsls	r3, r3, #1
 800695a:	4413      	add	r3, r2
 800695c:	69fa      	ldr	r2, [r7, #28]
 800695e:	429a      	cmp	r2, r3
 8006960:	d305      	bcc.n	800696e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006968:	69fa      	ldr	r2, [r7, #28]
 800696a:	429a      	cmp	r2, r3
 800696c:	d903      	bls.n	8006976 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800696e:	2301      	movs	r3, #1
 8006970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006974:	e0e8      	b.n	8006b48 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	2200      	movs	r2, #0
 800697a:	461c      	mov	r4, r3
 800697c:	4615      	mov	r5, r2
 800697e:	f04f 0200 	mov.w	r2, #0
 8006982:	f04f 0300 	mov.w	r3, #0
 8006986:	022b      	lsls	r3, r5, #8
 8006988:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800698c:	0222      	lsls	r2, r4, #8
 800698e:	68f9      	ldr	r1, [r7, #12]
 8006990:	6849      	ldr	r1, [r1, #4]
 8006992:	0849      	lsrs	r1, r1, #1
 8006994:	2000      	movs	r0, #0
 8006996:	4688      	mov	r8, r1
 8006998:	4681      	mov	r9, r0
 800699a:	eb12 0a08 	adds.w	sl, r2, r8
 800699e:	eb43 0b09 	adc.w	fp, r3, r9
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	603b      	str	r3, [r7, #0]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069b0:	4650      	mov	r0, sl
 80069b2:	4659      	mov	r1, fp
 80069b4:	f7fa f918 	bl	8000be8 <__aeabi_uldivmod>
 80069b8:	4602      	mov	r2, r0
 80069ba:	460b      	mov	r3, r1
 80069bc:	4613      	mov	r3, r2
 80069be:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069c6:	d308      	bcc.n	80069da <UART_SetConfig+0x3de>
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069ce:	d204      	bcs.n	80069da <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	60da      	str	r2, [r3, #12]
 80069d8:	e0b6      	b.n	8006b48 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069e0:	e0b2      	b.n	8006b48 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	69db      	ldr	r3, [r3, #28]
 80069e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ea:	d15e      	bne.n	8006aaa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80069ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d828      	bhi.n	8006a46 <UART_SetConfig+0x44a>
 80069f4:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <UART_SetConfig+0x400>)
 80069f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fa:	bf00      	nop
 80069fc:	08006a21 	.word	0x08006a21
 8006a00:	08006a29 	.word	0x08006a29
 8006a04:	08006a31 	.word	0x08006a31
 8006a08:	08006a47 	.word	0x08006a47
 8006a0c:	08006a37 	.word	0x08006a37
 8006a10:	08006a47 	.word	0x08006a47
 8006a14:	08006a47 	.word	0x08006a47
 8006a18:	08006a47 	.word	0x08006a47
 8006a1c:	08006a3f 	.word	0x08006a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a20:	f7fe fa40 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 8006a24:	61f8      	str	r0, [r7, #28]
        break;
 8006a26:	e014      	b.n	8006a52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a28:	f7fe fa52 	bl	8004ed0 <HAL_RCC_GetPCLK2Freq>
 8006a2c:	61f8      	str	r0, [r7, #28]
        break;
 8006a2e:	e010      	b.n	8006a52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a30:	4b4d      	ldr	r3, [pc, #308]	; (8006b68 <UART_SetConfig+0x56c>)
 8006a32:	61fb      	str	r3, [r7, #28]
        break;
 8006a34:	e00d      	b.n	8006a52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a36:	f7fe f99d 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8006a3a:	61f8      	str	r0, [r7, #28]
        break;
 8006a3c:	e009      	b.n	8006a52 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a42:	61fb      	str	r3, [r7, #28]
        break;
 8006a44:	e005      	b.n	8006a52 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006a46:	2300      	movs	r3, #0
 8006a48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a50:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d077      	beq.n	8006b48 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	005a      	lsls	r2, r3, #1
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	085b      	lsrs	r3, r3, #1
 8006a62:	441a      	add	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a6c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b0f      	cmp	r3, #15
 8006a72:	d916      	bls.n	8006aa2 <UART_SetConfig+0x4a6>
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a7a:	d212      	bcs.n	8006aa2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	f023 030f 	bic.w	r3, r3, #15
 8006a84:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	085b      	lsrs	r3, r3, #1
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	f003 0307 	and.w	r3, r3, #7
 8006a90:	b29a      	uxth	r2, r3
 8006a92:	8afb      	ldrh	r3, [r7, #22]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	8afa      	ldrh	r2, [r7, #22]
 8006a9e:	60da      	str	r2, [r3, #12]
 8006aa0:	e052      	b.n	8006b48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006aa8:	e04e      	b.n	8006b48 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006aaa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006aae:	2b08      	cmp	r3, #8
 8006ab0:	d827      	bhi.n	8006b02 <UART_SetConfig+0x506>
 8006ab2:	a201      	add	r2, pc, #4	; (adr r2, 8006ab8 <UART_SetConfig+0x4bc>)
 8006ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ab8:	08006add 	.word	0x08006add
 8006abc:	08006ae5 	.word	0x08006ae5
 8006ac0:	08006aed 	.word	0x08006aed
 8006ac4:	08006b03 	.word	0x08006b03
 8006ac8:	08006af3 	.word	0x08006af3
 8006acc:	08006b03 	.word	0x08006b03
 8006ad0:	08006b03 	.word	0x08006b03
 8006ad4:	08006b03 	.word	0x08006b03
 8006ad8:	08006afb 	.word	0x08006afb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006adc:	f7fe f9e2 	bl	8004ea4 <HAL_RCC_GetPCLK1Freq>
 8006ae0:	61f8      	str	r0, [r7, #28]
        break;
 8006ae2:	e014      	b.n	8006b0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ae4:	f7fe f9f4 	bl	8004ed0 <HAL_RCC_GetPCLK2Freq>
 8006ae8:	61f8      	str	r0, [r7, #28]
        break;
 8006aea:	e010      	b.n	8006b0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006aec:	4b1e      	ldr	r3, [pc, #120]	; (8006b68 <UART_SetConfig+0x56c>)
 8006aee:	61fb      	str	r3, [r7, #28]
        break;
 8006af0:	e00d      	b.n	8006b0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006af2:	f7fe f93f 	bl	8004d74 <HAL_RCC_GetSysClockFreq>
 8006af6:	61f8      	str	r0, [r7, #28]
        break;
 8006af8:	e009      	b.n	8006b0e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006afa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006afe:	61fb      	str	r3, [r7, #28]
        break;
 8006b00:	e005      	b.n	8006b0e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b02:	2300      	movs	r3, #0
 8006b04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b0c:	bf00      	nop
    }

    if (pclk != 0U)
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d019      	beq.n	8006b48 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	085a      	lsrs	r2, r3, #1
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	441a      	add	r2, r3
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b26:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	2b0f      	cmp	r3, #15
 8006b2c:	d909      	bls.n	8006b42 <UART_SetConfig+0x546>
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b34:	d205      	bcs.n	8006b42 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b36:	69bb      	ldr	r3, [r7, #24]
 8006b38:	b29a      	uxth	r2, r3
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60da      	str	r2, [r3, #12]
 8006b40:	e002      	b.n	8006b48 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006b54:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3728      	adds	r7, #40	; 0x28
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b62:	bf00      	nop
 8006b64:	40008000 	.word	0x40008000
 8006b68:	00f42400 	.word	0x00f42400

08006b6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	f003 0308 	and.w	r3, r3, #8
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00a      	beq.n	8006b96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	f003 0301 	and.w	r3, r3, #1
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00a      	beq.n	8006bb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	f003 0302 	and.w	r3, r3, #2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00a      	beq.n	8006bda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bde:	f003 0304 	and.w	r3, r3, #4
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d00a      	beq.n	8006bfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	430a      	orrs	r2, r1
 8006bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	f003 0310 	and.w	r3, r3, #16
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00a      	beq.n	8006c1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	430a      	orrs	r2, r1
 8006c1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	430a      	orrs	r2, r1
 8006c3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01a      	beq.n	8006c82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	430a      	orrs	r2, r1
 8006c60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c6a:	d10a      	bne.n	8006c82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00a      	beq.n	8006ca4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	605a      	str	r2, [r3, #4]
  }
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b098      	sub	sp, #96	; 0x60
 8006cb4:	af02      	add	r7, sp, #8
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006cc0:	f7fb fb48 	bl	8002354 <HAL_GetTick>
 8006cc4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0308 	and.w	r3, r3, #8
 8006cd0:	2b08      	cmp	r3, #8
 8006cd2:	d12e      	bne.n	8006d32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cd8:	9300      	str	r3, [sp, #0]
 8006cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 f88c 	bl	8006e00 <UART_WaitOnFlagUntilTimeout>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d021      	beq.n	8006d32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf6:	e853 3f00 	ldrex	r3, [r3]
 8006cfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d02:	653b      	str	r3, [r7, #80]	; 0x50
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d0e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e6      	bne.n	8006cee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2220      	movs	r2, #32
 8006d24:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e062      	b.n	8006df8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d149      	bne.n	8006dd4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d44:	9300      	str	r3, [sp, #0]
 8006d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f856 	bl	8006e00 <UART_WaitOnFlagUntilTimeout>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d03c      	beq.n	8006dd4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d62:	e853 3f00 	ldrex	r3, [r3]
 8006d66:	623b      	str	r3, [r7, #32]
   return(result);
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	461a      	mov	r2, r3
 8006d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d78:	633b      	str	r3, [r7, #48]	; 0x30
 8006d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d80:	e841 2300 	strex	r3, r2, [r1]
 8006d84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d1e6      	bne.n	8006d5a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3308      	adds	r3, #8
 8006d92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	e853 3f00 	ldrex	r3, [r3]
 8006d9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f023 0301 	bic.w	r3, r3, #1
 8006da2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3308      	adds	r3, #8
 8006daa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006dac:	61fa      	str	r2, [r7, #28]
 8006dae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db0:	69b9      	ldr	r1, [r7, #24]
 8006db2:	69fa      	ldr	r2, [r7, #28]
 8006db4:	e841 2300 	strex	r3, r2, [r1]
 8006db8:	617b      	str	r3, [r7, #20]
   return(result);
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d1e5      	bne.n	8006d8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dd0:	2303      	movs	r3, #3
 8006dd2:	e011      	b.n	8006df8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2220      	movs	r2, #32
 8006dd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3758      	adds	r7, #88	; 0x58
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	603b      	str	r3, [r7, #0]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e10:	e049      	b.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e18:	d045      	beq.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e1a:	f7fb fa9b 	bl	8002354 <HAL_GetTick>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	1ad3      	subs	r3, r2, r3
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d302      	bcc.n	8006e30 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e048      	b.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0304 	and.w	r3, r3, #4
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d031      	beq.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	69db      	ldr	r3, [r3, #28]
 8006e48:	f003 0308 	and.w	r3, r3, #8
 8006e4c:	2b08      	cmp	r3, #8
 8006e4e:	d110      	bne.n	8006e72 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2208      	movs	r2, #8
 8006e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f000 f838 	bl	8006ece <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2208      	movs	r2, #8
 8006e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e029      	b.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	69db      	ldr	r3, [r3, #28]
 8006e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e80:	d111      	bne.n	8006ea6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 f81e 	bl	8006ece <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006ea2:	2303      	movs	r3, #3
 8006ea4:	e00f      	b.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	bf0c      	ite	eq
 8006eb6:	2301      	moveq	r3, #1
 8006eb8:	2300      	movne	r3, #0
 8006eba:	b2db      	uxtb	r3, r3
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	79fb      	ldrb	r3, [r7, #7]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d0a6      	beq.n	8006e12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ece:	b480      	push	{r7}
 8006ed0:	b095      	sub	sp, #84	; 0x54
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ede:	e853 3f00 	ldrex	r3, [r3]
 8006ee2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ef6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006efa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e6      	bne.n	8006ed6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	6a3b      	ldr	r3, [r7, #32]
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f023 0301 	bic.w	r3, r3, #1
 8006f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	3308      	adds	r3, #8
 8006f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f30:	e841 2300 	strex	r3, r2, [r1]
 8006f34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1e5      	bne.n	8006f08 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d118      	bne.n	8006f76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	e853 3f00 	ldrex	r3, [r3]
 8006f50:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f023 0310 	bic.w	r3, r3, #16
 8006f58:	647b      	str	r3, [r7, #68]	; 0x44
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f62:	61bb      	str	r3, [r7, #24]
 8006f64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f66:	6979      	ldr	r1, [r7, #20]
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	e841 2300 	strex	r3, r2, [r1]
 8006f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1e6      	bne.n	8006f44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2220      	movs	r2, #32
 8006f7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2200      	movs	r2, #0
 8006f82:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f8a:	bf00      	nop
 8006f8c:	3754      	adds	r7, #84	; 0x54
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr

08006f96 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f96:	b084      	sub	sp, #16
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	f107 001c 	add.w	r0, r7, #28
 8006fa4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f001 fa1d 	bl	80083f4 <USB_CoreReset>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8006fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d106      	bne.n	8006fd2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fc8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	639a      	str	r2, [r3, #56]	; 0x38
 8006fd0:	e005      	b.n	8006fde <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fea:	b004      	add	sp, #16
 8006fec:	4770      	bx	lr
	...

08006ff0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b087      	sub	sp, #28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006ffe:	79fb      	ldrb	r3, [r7, #7]
 8007000:	2b02      	cmp	r3, #2
 8007002:	d165      	bne.n	80070d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	4a3e      	ldr	r2, [pc, #248]	; (8007100 <USB_SetTurnaroundTime+0x110>)
 8007008:	4293      	cmp	r3, r2
 800700a:	d906      	bls.n	800701a <USB_SetTurnaroundTime+0x2a>
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	4a3d      	ldr	r2, [pc, #244]	; (8007104 <USB_SetTurnaroundTime+0x114>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d202      	bcs.n	800701a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007014:	230f      	movs	r3, #15
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	e05c      	b.n	80070d4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	4a39      	ldr	r2, [pc, #228]	; (8007104 <USB_SetTurnaroundTime+0x114>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d306      	bcc.n	8007030 <USB_SetTurnaroundTime+0x40>
 8007022:	68bb      	ldr	r3, [r7, #8]
 8007024:	4a38      	ldr	r2, [pc, #224]	; (8007108 <USB_SetTurnaroundTime+0x118>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d202      	bcs.n	8007030 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800702a:	230e      	movs	r3, #14
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	e051      	b.n	80070d4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	4a35      	ldr	r2, [pc, #212]	; (8007108 <USB_SetTurnaroundTime+0x118>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d306      	bcc.n	8007046 <USB_SetTurnaroundTime+0x56>
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	4a34      	ldr	r2, [pc, #208]	; (800710c <USB_SetTurnaroundTime+0x11c>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d202      	bcs.n	8007046 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007040:	230d      	movs	r3, #13
 8007042:	617b      	str	r3, [r7, #20]
 8007044:	e046      	b.n	80070d4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	4a30      	ldr	r2, [pc, #192]	; (800710c <USB_SetTurnaroundTime+0x11c>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d306      	bcc.n	800705c <USB_SetTurnaroundTime+0x6c>
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	4a2f      	ldr	r2, [pc, #188]	; (8007110 <USB_SetTurnaroundTime+0x120>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d802      	bhi.n	800705c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007056:	230c      	movs	r3, #12
 8007058:	617b      	str	r3, [r7, #20]
 800705a:	e03b      	b.n	80070d4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	4a2c      	ldr	r2, [pc, #176]	; (8007110 <USB_SetTurnaroundTime+0x120>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d906      	bls.n	8007072 <USB_SetTurnaroundTime+0x82>
 8007064:	68bb      	ldr	r3, [r7, #8]
 8007066:	4a2b      	ldr	r2, [pc, #172]	; (8007114 <USB_SetTurnaroundTime+0x124>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d802      	bhi.n	8007072 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800706c:	230b      	movs	r3, #11
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	e030      	b.n	80070d4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	4a27      	ldr	r2, [pc, #156]	; (8007114 <USB_SetTurnaroundTime+0x124>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d906      	bls.n	8007088 <USB_SetTurnaroundTime+0x98>
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	4a26      	ldr	r2, [pc, #152]	; (8007118 <USB_SetTurnaroundTime+0x128>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d802      	bhi.n	8007088 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007082:	230a      	movs	r3, #10
 8007084:	617b      	str	r3, [r7, #20]
 8007086:	e025      	b.n	80070d4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	4a23      	ldr	r2, [pc, #140]	; (8007118 <USB_SetTurnaroundTime+0x128>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d906      	bls.n	800709e <USB_SetTurnaroundTime+0xae>
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	4a22      	ldr	r2, [pc, #136]	; (800711c <USB_SetTurnaroundTime+0x12c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d202      	bcs.n	800709e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007098:	2309      	movs	r3, #9
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e01a      	b.n	80070d4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	4a1e      	ldr	r2, [pc, #120]	; (800711c <USB_SetTurnaroundTime+0x12c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d306      	bcc.n	80070b4 <USB_SetTurnaroundTime+0xc4>
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	4a1d      	ldr	r2, [pc, #116]	; (8007120 <USB_SetTurnaroundTime+0x130>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d802      	bhi.n	80070b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80070ae:	2308      	movs	r3, #8
 80070b0:	617b      	str	r3, [r7, #20]
 80070b2:	e00f      	b.n	80070d4 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	4a1a      	ldr	r2, [pc, #104]	; (8007120 <USB_SetTurnaroundTime+0x130>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d906      	bls.n	80070ca <USB_SetTurnaroundTime+0xda>
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	4a19      	ldr	r2, [pc, #100]	; (8007124 <USB_SetTurnaroundTime+0x134>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d202      	bcs.n	80070ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80070c4:	2307      	movs	r3, #7
 80070c6:	617b      	str	r3, [r7, #20]
 80070c8:	e004      	b.n	80070d4 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80070ca:	2306      	movs	r3, #6
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	e001      	b.n	80070d4 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80070d0:	2309      	movs	r3, #9
 80070d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	68da      	ldr	r2, [r3, #12]
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	029b      	lsls	r3, r3, #10
 80070e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80070ec:	431a      	orrs	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	371c      	adds	r7, #28
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr
 8007100:	00d8acbf 	.word	0x00d8acbf
 8007104:	00e4e1c0 	.word	0x00e4e1c0
 8007108:	00f42400 	.word	0x00f42400
 800710c:	01067380 	.word	0x01067380
 8007110:	011a499f 	.word	0x011a499f
 8007114:	01312cff 	.word	0x01312cff
 8007118:	014ca43f 	.word	0x014ca43f
 800711c:	016e3600 	.word	0x016e3600
 8007120:	01a6ab1f 	.word	0x01a6ab1f
 8007124:	01e84800 	.word	0x01e84800

08007128 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	f043 0201 	orr.w	r2, r3, #1
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f023 0201 	bic.w	r2, r3, #1
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800715e:	2300      	movs	r3, #0
}
 8007160:	4618      	mov	r0, r3
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007188:	78fb      	ldrb	r3, [r7, #3]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d115      	bne.n	80071ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800719a:	2001      	movs	r0, #1
 800719c:	f7fb f8e6 	bl	800236c <HAL_Delay>
      ms++;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	3301      	adds	r3, #1
 80071a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f001 f8ab 	bl	8008302 <USB_GetMode>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d01e      	beq.n	80071f0 <USB_SetCurrentMode+0x84>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	2b31      	cmp	r3, #49	; 0x31
 80071b6:	d9f0      	bls.n	800719a <USB_SetCurrentMode+0x2e>
 80071b8:	e01a      	b.n	80071f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80071ba:	78fb      	ldrb	r3, [r7, #3]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d115      	bne.n	80071ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80071cc:	2001      	movs	r0, #1
 80071ce:	f7fb f8cd 	bl	800236c <HAL_Delay>
      ms++;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3301      	adds	r3, #1
 80071d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f001 f892 	bl	8008302 <USB_GetMode>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d005      	beq.n	80071f0 <USB_SetCurrentMode+0x84>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2b31      	cmp	r3, #49	; 0x31
 80071e8:	d9f0      	bls.n	80071cc <USB_SetCurrentMode+0x60>
 80071ea:	e001      	b.n	80071f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e005      	b.n	80071fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b32      	cmp	r3, #50	; 0x32
 80071f4:	d101      	bne.n	80071fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e000      	b.n	80071fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80071fa:	2300      	movs	r3, #0
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3710      	adds	r7, #16
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007204:	b084      	sub	sp, #16
 8007206:	b580      	push	{r7, lr}
 8007208:	b086      	sub	sp, #24
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
 800720e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007212:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007216:	2300      	movs	r3, #0
 8007218:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800721e:	2300      	movs	r3, #0
 8007220:	613b      	str	r3, [r7, #16]
 8007222:	e009      	b.n	8007238 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	3340      	adds	r3, #64	; 0x40
 800722a:	009b      	lsls	r3, r3, #2
 800722c:	4413      	add	r3, r2
 800722e:	2200      	movs	r2, #0
 8007230:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	3301      	adds	r3, #1
 8007236:	613b      	str	r3, [r7, #16]
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	2b0e      	cmp	r3, #14
 800723c:	d9f2      	bls.n	8007224 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800723e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d11c      	bne.n	800727e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007252:	f043 0302 	orr.w	r3, r3, #2
 8007256:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	601a      	str	r2, [r3, #0]
 800727c:	e005      	b.n	800728a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007282:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007290:	461a      	mov	r2, r3
 8007292:	2300      	movs	r3, #0
 8007294:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007296:	2103      	movs	r1, #3
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f959 	bl	8007550 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800729e:	2110      	movs	r1, #16
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f8f1 	bl	8007488 <USB_FlushTxFifo>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d001      	beq.n	80072b0 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f91d 	bl	80074f0 <USB_FlushRxFifo>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072c6:	461a      	mov	r2, r3
 80072c8:	2300      	movs	r3, #0
 80072ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072d2:	461a      	mov	r2, r3
 80072d4:	2300      	movs	r3, #0
 80072d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072de:	461a      	mov	r2, r3
 80072e0:	2300      	movs	r3, #0
 80072e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072e4:	2300      	movs	r3, #0
 80072e6:	613b      	str	r3, [r7, #16]
 80072e8:	e043      	b.n	8007372 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	015a      	lsls	r2, r3, #5
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4413      	add	r3, r2
 80072f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007300:	d118      	bne.n	8007334 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d10a      	bne.n	800731e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007308:	693b      	ldr	r3, [r7, #16]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007314:	461a      	mov	r2, r3
 8007316:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800731a:	6013      	str	r3, [r2, #0]
 800731c:	e013      	b.n	8007346 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732a:	461a      	mov	r2, r3
 800732c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007330:	6013      	str	r3, [r2, #0]
 8007332:	e008      	b.n	8007346 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007340:	461a      	mov	r2, r3
 8007342:	2300      	movs	r3, #0
 8007344:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007352:	461a      	mov	r2, r3
 8007354:	2300      	movs	r3, #0
 8007356:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007364:	461a      	mov	r2, r3
 8007366:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800736a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	3301      	adds	r3, #1
 8007370:	613b      	str	r3, [r7, #16]
 8007372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	429a      	cmp	r2, r3
 8007378:	d3b7      	bcc.n	80072ea <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800737a:	2300      	movs	r3, #0
 800737c:	613b      	str	r3, [r7, #16]
 800737e:	e043      	b.n	8007408 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007392:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007396:	d118      	bne.n	80073ca <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10a      	bne.n	80073b4 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	015a      	lsls	r2, r3, #5
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	4413      	add	r3, r2
 80073a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073aa:	461a      	mov	r2, r3
 80073ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80073b0:	6013      	str	r3, [r2, #0]
 80073b2:	e013      	b.n	80073dc <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	015a      	lsls	r2, r3, #5
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	4413      	add	r3, r2
 80073bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c0:	461a      	mov	r2, r3
 80073c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80073c6:	6013      	str	r3, [r2, #0]
 80073c8:	e008      	b.n	80073dc <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	015a      	lsls	r2, r3, #5
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4413      	add	r3, r2
 80073d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d6:	461a      	mov	r2, r3
 80073d8:	2300      	movs	r3, #0
 80073da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e8:	461a      	mov	r2, r3
 80073ea:	2300      	movs	r3, #0
 80073ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fa:	461a      	mov	r2, r3
 80073fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007400:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	3301      	adds	r3, #1
 8007406:	613b      	str	r3, [r7, #16]
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	429a      	cmp	r2, r3
 800740e:	d3b7      	bcc.n	8007380 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007416:	691b      	ldr	r3, [r3, #16]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800741e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007422:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007430:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	699b      	ldr	r3, [r3, #24]
 8007436:	f043 0210 	orr.w	r2, r3, #16
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	699a      	ldr	r2, [r3, #24]
 8007442:	4b10      	ldr	r3, [pc, #64]	; (8007484 <USB_DevInit+0x280>)
 8007444:	4313      	orrs	r3, r2
 8007446:	687a      	ldr	r2, [r7, #4]
 8007448:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800744a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800744c:	2b00      	cmp	r3, #0
 800744e:	d005      	beq.n	800745c <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	699b      	ldr	r3, [r3, #24]
 8007454:	f043 0208 	orr.w	r2, r3, #8
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800745c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800745e:	2b01      	cmp	r3, #1
 8007460:	d107      	bne.n	8007472 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	699b      	ldr	r3, [r3, #24]
 8007466:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800746a:	f043 0304 	orr.w	r3, r3, #4
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007472:	7dfb      	ldrb	r3, [r7, #23]
}
 8007474:	4618      	mov	r0, r3
 8007476:	3718      	adds	r7, #24
 8007478:	46bd      	mov	sp, r7
 800747a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800747e:	b004      	add	sp, #16
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	803c3800 	.word	0x803c3800

08007488 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	3301      	adds	r3, #1
 800749a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4a13      	ldr	r2, [pc, #76]	; (80074ec <USB_FlushTxFifo+0x64>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d901      	bls.n	80074a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80074a4:	2303      	movs	r3, #3
 80074a6:	e01b      	b.n	80074e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	daf2      	bge.n	8007496 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80074b0:	2300      	movs	r3, #0
 80074b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	019b      	lsls	r3, r3, #6
 80074b8:	f043 0220 	orr.w	r2, r3, #32
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	3301      	adds	r3, #1
 80074c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4a08      	ldr	r2, [pc, #32]	; (80074ec <USB_FlushTxFifo+0x64>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d901      	bls.n	80074d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e006      	b.n	80074e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	f003 0320 	and.w	r3, r3, #32
 80074da:	2b20      	cmp	r3, #32
 80074dc:	d0f0      	beq.n	80074c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80074de:	2300      	movs	r3, #0
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3714      	adds	r7, #20
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr
 80074ec:	00030d40 	.word	0x00030d40

080074f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3301      	adds	r3, #1
 8007500:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	4a11      	ldr	r2, [pc, #68]	; (800754c <USB_FlushRxFifo+0x5c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d901      	bls.n	800750e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800750a:	2303      	movs	r3, #3
 800750c:	e018      	b.n	8007540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	daf2      	bge.n	80074fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007516:	2300      	movs	r3, #0
 8007518:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2210      	movs	r2, #16
 800751e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	3301      	adds	r3, #1
 8007524:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	4a08      	ldr	r2, [pc, #32]	; (800754c <USB_FlushRxFifo+0x5c>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d901      	bls.n	8007532 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e006      	b.n	8007540 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	f003 0310 	and.w	r3, r3, #16
 800753a:	2b10      	cmp	r3, #16
 800753c:	d0f0      	beq.n	8007520 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr
 800754c:	00030d40 	.word	0x00030d40

08007550 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007550:	b480      	push	{r7}
 8007552:	b085      	sub	sp, #20
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	460b      	mov	r3, r1
 800755a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007566:	681a      	ldr	r2, [r3, #0]
 8007568:	78fb      	ldrb	r3, [r7, #3]
 800756a:	68f9      	ldr	r1, [r7, #12]
 800756c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007570:	4313      	orrs	r3, r2
 8007572:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3714      	adds	r7, #20
 800757a:	46bd      	mov	sp, r7
 800757c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007580:	4770      	bx	lr

08007582 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007582:	b480      	push	{r7}
 8007584:	b087      	sub	sp, #28
 8007586:	af00      	add	r7, sp, #0
 8007588:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007594:	689b      	ldr	r3, [r3, #8]
 8007596:	f003 0306 	and.w	r3, r3, #6
 800759a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	2b02      	cmp	r3, #2
 80075a0:	d002      	beq.n	80075a8 <USB_GetDevSpeed+0x26>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2b06      	cmp	r3, #6
 80075a6:	d102      	bne.n	80075ae <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80075a8:	2302      	movs	r3, #2
 80075aa:	75fb      	strb	r3, [r7, #23]
 80075ac:	e001      	b.n	80075b2 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 80075ae:	230f      	movs	r3, #15
 80075b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	371c      	adds	r7, #28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	785b      	ldrb	r3, [r3, #1]
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d13a      	bne.n	8007652 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075e2:	69da      	ldr	r2, [r3, #28]
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	f003 030f 	and.w	r3, r3, #15
 80075ec:	2101      	movs	r1, #1
 80075ee:	fa01 f303 	lsl.w	r3, r1, r3
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	68f9      	ldr	r1, [r7, #12]
 80075f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075fa:	4313      	orrs	r3, r2
 80075fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	015a      	lsls	r2, r3, #5
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	4413      	add	r3, r2
 8007606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d155      	bne.n	80076c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	015a      	lsls	r2, r3, #5
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	4413      	add	r3, r2
 800761c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	791b      	ldrb	r3, [r3, #4]
 800762e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007630:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	059b      	lsls	r3, r3, #22
 8007636:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007638:	4313      	orrs	r3, r2
 800763a:	68ba      	ldr	r2, [r7, #8]
 800763c:	0151      	lsls	r1, r2, #5
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	440a      	add	r2, r1
 8007642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800764a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	e036      	b.n	80076c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007658:	69da      	ldr	r2, [r3, #28]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	f003 030f 	and.w	r3, r3, #15
 8007662:	2101      	movs	r1, #1
 8007664:	fa01 f303 	lsl.w	r3, r1, r3
 8007668:	041b      	lsls	r3, r3, #16
 800766a:	68f9      	ldr	r1, [r7, #12]
 800766c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007670:	4313      	orrs	r3, r2
 8007672:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007686:	2b00      	cmp	r3, #0
 8007688:	d11a      	bne.n	80076c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007696:	681a      	ldr	r2, [r3, #0]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	791b      	ldrb	r3, [r3, #4]
 80076a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80076a6:	430b      	orrs	r3, r1
 80076a8:	4313      	orrs	r3, r2
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	0151      	lsls	r1, r2, #5
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	440a      	add	r2, r1
 80076b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3714      	adds	r7, #20
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
	...

080076d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b085      	sub	sp, #20
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	785b      	ldrb	r3, [r3, #1]
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d161      	bne.n	80077b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007702:	d11f      	bne.n	8007744 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	015a      	lsls	r2, r3, #5
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	4413      	add	r3, r2
 800770c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	0151      	lsls	r1, r2, #5
 8007716:	68fa      	ldr	r2, [r7, #12]
 8007718:	440a      	add	r2, r1
 800771a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800771e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007722:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	0151      	lsls	r1, r2, #5
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	440a      	add	r2, r1
 800773a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800773e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007742:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800774a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	f003 030f 	and.w	r3, r3, #15
 8007754:	2101      	movs	r1, #1
 8007756:	fa01 f303 	lsl.w	r3, r1, r3
 800775a:	b29b      	uxth	r3, r3
 800775c:	43db      	mvns	r3, r3
 800775e:	68f9      	ldr	r1, [r7, #12]
 8007760:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007764:	4013      	ands	r3, r2
 8007766:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800776e:	69da      	ldr	r2, [r3, #28]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	f003 030f 	and.w	r3, r3, #15
 8007778:	2101      	movs	r1, #1
 800777a:	fa01 f303 	lsl.w	r3, r1, r3
 800777e:	b29b      	uxth	r3, r3
 8007780:	43db      	mvns	r3, r3
 8007782:	68f9      	ldr	r1, [r7, #12]
 8007784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007788:	4013      	ands	r3, r2
 800778a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	0159      	lsls	r1, r3, #5
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	440b      	add	r3, r1
 80077a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a6:	4619      	mov	r1, r3
 80077a8:	4b35      	ldr	r3, [pc, #212]	; (8007880 <USB_DeactivateEndpoint+0x1b0>)
 80077aa:	4013      	ands	r3, r2
 80077ac:	600b      	str	r3, [r1, #0]
 80077ae:	e060      	b.n	8007872 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	015a      	lsls	r2, r3, #5
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	4413      	add	r3, r2
 80077b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077c6:	d11f      	bne.n	8007808 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	0151      	lsls	r1, r2, #5
 80077da:	68fa      	ldr	r2, [r7, #12]
 80077dc:	440a      	add	r2, r1
 80077de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	0151      	lsls	r1, r2, #5
 80077fa:	68fa      	ldr	r2, [r7, #12]
 80077fc:	440a      	add	r2, r1
 80077fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007802:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007806:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800780e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	f003 030f 	and.w	r3, r3, #15
 8007818:	2101      	movs	r1, #1
 800781a:	fa01 f303 	lsl.w	r3, r1, r3
 800781e:	041b      	lsls	r3, r3, #16
 8007820:	43db      	mvns	r3, r3
 8007822:	68f9      	ldr	r1, [r7, #12]
 8007824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007828:	4013      	ands	r3, r2
 800782a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007832:	69da      	ldr	r2, [r3, #28]
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	f003 030f 	and.w	r3, r3, #15
 800783c:	2101      	movs	r1, #1
 800783e:	fa01 f303 	lsl.w	r3, r1, r3
 8007842:	041b      	lsls	r3, r3, #16
 8007844:	43db      	mvns	r3, r3
 8007846:	68f9      	ldr	r1, [r7, #12]
 8007848:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800784c:	4013      	ands	r3, r2
 800784e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	0159      	lsls	r1, r3, #5
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	440b      	add	r3, r1
 8007866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786a:	4619      	mov	r1, r3
 800786c:	4b05      	ldr	r3, [pc, #20]	; (8007884 <USB_DeactivateEndpoint+0x1b4>)
 800786e:	4013      	ands	r3, r2
 8007870:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007872:	2300      	movs	r3, #0
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	ec337800 	.word	0xec337800
 8007884:	eff37800 	.word	0xeff37800

08007888 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	785b      	ldrb	r3, [r3, #1]
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	f040 8128 	bne.w	8007af6 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d132      	bne.n	8007914 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	015a      	lsls	r2, r3, #5
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	4413      	add	r3, r2
 80078b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	0151      	lsls	r1, r2, #5
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	440a      	add	r2, r1
 80078c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	015a      	lsls	r2, r3, #5
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	0151      	lsls	r1, r2, #5
 80078e4:	697a      	ldr	r2, [r7, #20]
 80078e6:	440a      	add	r2, r1
 80078e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	015a      	lsls	r2, r3, #5
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	4413      	add	r3, r2
 80078fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fe:	691b      	ldr	r3, [r3, #16]
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	0151      	lsls	r1, r2, #5
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	440a      	add	r2, r1
 8007908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800790c:	0cdb      	lsrs	r3, r3, #19
 800790e:	04db      	lsls	r3, r3, #19
 8007910:	6113      	str	r3, [r2, #16]
 8007912:	e092      	b.n	8007a3a <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007914:	693b      	ldr	r3, [r7, #16]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	0151      	lsls	r1, r2, #5
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	440a      	add	r2, r1
 800792a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800792e:	0cdb      	lsrs	r3, r3, #19
 8007930:	04db      	lsls	r3, r3, #19
 8007932:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	015a      	lsls	r2, r3, #5
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	4413      	add	r3, r2
 800793c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	0151      	lsls	r1, r2, #5
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	440a      	add	r2, r1
 800794a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800794e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007952:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007956:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d11a      	bne.n	8007994 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	691a      	ldr	r2, [r3, #16]
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	429a      	cmp	r2, r3
 8007968:	d903      	bls.n	8007972 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	689a      	ldr	r2, [r3, #8]
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	015a      	lsls	r2, r3, #5
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	4413      	add	r3, r2
 800797a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	693a      	ldr	r2, [r7, #16]
 8007982:	0151      	lsls	r1, r2, #5
 8007984:	697a      	ldr	r2, [r7, #20]
 8007986:	440a      	add	r2, r1
 8007988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800798c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007990:	6113      	str	r3, [r2, #16]
 8007992:	e01b      	b.n	80079cc <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	6919      	ldr	r1, [r3, #16]
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	440b      	add	r3, r1
 80079ac:	1e59      	subs	r1, r3, #1
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80079b6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80079b8:	4b8d      	ldr	r3, [pc, #564]	; (8007bf0 <USB_EPStartXfer+0x368>)
 80079ba:	400b      	ands	r3, r1
 80079bc:	6939      	ldr	r1, [r7, #16]
 80079be:	0148      	lsls	r0, r1, #5
 80079c0:	6979      	ldr	r1, [r7, #20]
 80079c2:	4401      	add	r1, r0
 80079c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80079c8:	4313      	orrs	r3, r2
 80079ca:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	015a      	lsls	r2, r3, #5
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	4413      	add	r3, r2
 80079d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079d8:	691a      	ldr	r2, [r3, #16]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079e2:	6939      	ldr	r1, [r7, #16]
 80079e4:	0148      	lsls	r0, r1, #5
 80079e6:	6979      	ldr	r1, [r7, #20]
 80079e8:	4401      	add	r1, r0
 80079ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80079ee:	4313      	orrs	r3, r2
 80079f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	791b      	ldrb	r3, [r3, #4]
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d11f      	bne.n	8007a3a <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a06:	691b      	ldr	r3, [r3, #16]
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	0151      	lsls	r1, r2, #5
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	440a      	add	r2, r1
 8007a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a14:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007a18:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a26:	691b      	ldr	r3, [r3, #16]
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	0151      	lsls	r1, r2, #5
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	440a      	add	r2, r1
 8007a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007a38:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	0151      	lsls	r1, r2, #5
 8007a4c:	697a      	ldr	r2, [r7, #20]
 8007a4e:	440a      	add	r2, r1
 8007a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a58:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	791b      	ldrb	r3, [r3, #4]
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d015      	beq.n	8007a8e <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	691b      	ldr	r3, [r3, #16]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 8139 	beq.w	8007cde <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a74:	683b      	ldr	r3, [r7, #0]
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	f003 030f 	and.w	r3, r3, #15
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a82:	6979      	ldr	r1, [r7, #20]
 8007a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a88:	4313      	orrs	r3, r2
 8007a8a:	634b      	str	r3, [r1, #52]	; 0x34
 8007a8c:	e127      	b.n	8007cde <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d110      	bne.n	8007ac0 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	0151      	lsls	r1, r2, #5
 8007ab0:	697a      	ldr	r2, [r7, #20]
 8007ab2:	440a      	add	r2, r1
 8007ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ab8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	e00f      	b.n	8007ae0 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	015a      	lsls	r2, r3, #5
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	4413      	add	r3, r2
 8007ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	0151      	lsls	r1, r2, #5
 8007ad2:	697a      	ldr	r2, [r7, #20]
 8007ad4:	440a      	add	r2, r1
 8007ad6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ade:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	68d9      	ldr	r1, [r3, #12]
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	781a      	ldrb	r2, [r3, #0]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 f9a6 	bl	8007e40 <USB_WritePacket>
 8007af4:	e0f3      	b.n	8007cde <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	697b      	ldr	r3, [r7, #20]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b02:	691b      	ldr	r3, [r3, #16]
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	0151      	lsls	r1, r2, #5
 8007b08:	697a      	ldr	r2, [r7, #20]
 8007b0a:	440a      	add	r2, r1
 8007b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b10:	0cdb      	lsrs	r3, r3, #19
 8007b12:	04db      	lsls	r3, r3, #19
 8007b14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	0151      	lsls	r1, r2, #5
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	440a      	add	r2, r1
 8007b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007b34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007b38:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d12f      	bne.n	8007ba0 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d003      	beq.n	8007b50 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	689a      	ldr	r2, [r3, #8]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	689a      	ldr	r2, [r3, #8]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	015a      	lsls	r2, r3, #5
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	4413      	add	r3, r2
 8007b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b64:	691a      	ldr	r2, [r3, #16]
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b6e:	6939      	ldr	r1, [r7, #16]
 8007b70:	0148      	lsls	r0, r1, #5
 8007b72:	6979      	ldr	r1, [r7, #20]
 8007b74:	4401      	add	r1, r0
 8007b76:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	693a      	ldr	r2, [r7, #16]
 8007b8e:	0151      	lsls	r1, r2, #5
 8007b90:	697a      	ldr	r2, [r7, #20]
 8007b92:	440a      	add	r2, r1
 8007b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b98:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b9c:	6113      	str	r3, [r2, #16]
 8007b9e:	e061      	b.n	8007c64 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	691b      	ldr	r3, [r3, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d125      	bne.n	8007bf4 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	015a      	lsls	r2, r3, #5
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	4413      	add	r3, r2
 8007bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bb4:	691a      	ldr	r2, [r3, #16]
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007bbe:	6939      	ldr	r1, [r7, #16]
 8007bc0:	0148      	lsls	r0, r1, #5
 8007bc2:	6979      	ldr	r1, [r7, #20]
 8007bc4:	4401      	add	r1, r0
 8007bc6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	015a      	lsls	r2, r3, #5
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	0151      	lsls	r1, r2, #5
 8007be0:	697a      	ldr	r2, [r7, #20]
 8007be2:	440a      	add	r2, r1
 8007be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007be8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bec:	6113      	str	r3, [r2, #16]
 8007bee:	e039      	b.n	8007c64 <USB_EPStartXfer+0x3dc>
 8007bf0:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	691a      	ldr	r2, [r3, #16]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	1e5a      	subs	r2, r3, #1
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c08:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	89fa      	ldrh	r2, [r7, #14]
 8007c10:	fb03 f202 	mul.w	r2, r3, r2
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	015a      	lsls	r2, r3, #5
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	4413      	add	r3, r2
 8007c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c24:	691a      	ldr	r2, [r3, #16]
 8007c26:	89fb      	ldrh	r3, [r7, #14]
 8007c28:	04d9      	lsls	r1, r3, #19
 8007c2a:	4b2f      	ldr	r3, [pc, #188]	; (8007ce8 <USB_EPStartXfer+0x460>)
 8007c2c:	400b      	ands	r3, r1
 8007c2e:	6939      	ldr	r1, [r7, #16]
 8007c30:	0148      	lsls	r0, r1, #5
 8007c32:	6979      	ldr	r1, [r7, #20]
 8007c34:	4401      	add	r1, r0
 8007c36:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4a:	691a      	ldr	r2, [r3, #16]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	6a1b      	ldr	r3, [r3, #32]
 8007c50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c54:	6939      	ldr	r1, [r7, #16]
 8007c56:	0148      	lsls	r0, r1, #5
 8007c58:	6979      	ldr	r1, [r7, #20]
 8007c5a:	4401      	add	r1, r0
 8007c5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c60:	4313      	orrs	r3, r2
 8007c62:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	791b      	ldrb	r3, [r3, #4]
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d128      	bne.n	8007cbe <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d110      	bne.n	8007c9e <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	693a      	ldr	r2, [r7, #16]
 8007c8c:	0151      	lsls	r1, r2, #5
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	440a      	add	r2, r1
 8007c92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c9a:	6013      	str	r3, [r2, #0]
 8007c9c:	e00f      	b.n	8007cbe <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	015a      	lsls	r2, r3, #5
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	693a      	ldr	r2, [r7, #16]
 8007cae:	0151      	lsls	r1, r2, #5
 8007cb0:	697a      	ldr	r2, [r7, #20]
 8007cb2:	440a      	add	r2, r1
 8007cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cbc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	015a      	lsls	r2, r3, #5
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	4413      	add	r3, r2
 8007cc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	0151      	lsls	r1, r2, #5
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	440a      	add	r2, r1
 8007cd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cdc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3718      	adds	r7, #24
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}
 8007ce8:	1ff80000 	.word	0x1ff80000

08007cec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b087      	sub	sp, #28
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	785b      	ldrb	r3, [r3, #1]
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d14a      	bne.n	8007da0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	015a      	lsls	r2, r3, #5
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	4413      	add	r3, r2
 8007d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d22:	f040 8086 	bne.w	8007e32 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	015a      	lsls	r2, r3, #5
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	4413      	add	r3, r2
 8007d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	683a      	ldr	r2, [r7, #0]
 8007d38:	7812      	ldrb	r2, [r2, #0]
 8007d3a:	0151      	lsls	r1, r2, #5
 8007d3c:	693a      	ldr	r2, [r7, #16]
 8007d3e:	440a      	add	r2, r1
 8007d40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d48:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	781b      	ldrb	r3, [r3, #0]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	7812      	ldrb	r2, [r2, #0]
 8007d5e:	0151      	lsls	r1, r2, #5
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	440a      	add	r2, r1
 8007d64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3301      	adds	r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d902      	bls.n	8007d84 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	75fb      	strb	r3, [r7, #23]
          break;
 8007d82:	e056      	b.n	8007e32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	781b      	ldrb	r3, [r3, #0]
 8007d88:	015a      	lsls	r2, r3, #5
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d9c:	d0e7      	beq.n	8007d6e <USB_EPStopXfer+0x82>
 8007d9e:	e048      	b.n	8007e32 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	781b      	ldrb	r3, [r3, #0]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007db8:	d13b      	bne.n	8007e32 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	015a      	lsls	r2, r3, #5
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	7812      	ldrb	r2, [r2, #0]
 8007dce:	0151      	lsls	r1, r2, #5
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	440a      	add	r2, r1
 8007dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007ddc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	683a      	ldr	r2, [r7, #0]
 8007df0:	7812      	ldrb	r2, [r2, #0]
 8007df2:	0151      	lsls	r1, r2, #5
 8007df4:	693a      	ldr	r2, [r7, #16]
 8007df6:	440a      	add	r2, r1
 8007df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dfc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007e00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	3301      	adds	r3, #1
 8007e06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f242 7210 	movw	r2, #10000	; 0x2710
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d902      	bls.n	8007e18 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007e12:	2301      	movs	r3, #1
 8007e14:	75fb      	strb	r3, [r7, #23]
          break;
 8007e16:	e00c      	b.n	8007e32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	781b      	ldrb	r3, [r3, #0]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e30:	d0e7      	beq.n	8007e02 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	371c      	adds	r7, #28
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b089      	sub	sp, #36	; 0x24
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	60f8      	str	r0, [r7, #12]
 8007e48:	60b9      	str	r1, [r7, #8]
 8007e4a:	4611      	mov	r1, r2
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	460b      	mov	r3, r1
 8007e50:	71fb      	strb	r3, [r7, #7]
 8007e52:	4613      	mov	r3, r2
 8007e54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8007e5e:	88bb      	ldrh	r3, [r7, #4]
 8007e60:	3303      	adds	r3, #3
 8007e62:	089b      	lsrs	r3, r3, #2
 8007e64:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8007e66:	2300      	movs	r3, #0
 8007e68:	61bb      	str	r3, [r7, #24]
 8007e6a:	e018      	b.n	8007e9e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e6c:	79fb      	ldrb	r3, [r7, #7]
 8007e6e:	031a      	lsls	r2, r3, #12
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	4413      	add	r3, r2
 8007e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e78:	461a      	mov	r2, r3
 8007e7a:	69fb      	ldr	r3, [r7, #28]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	6013      	str	r3, [r2, #0]
    pSrc++;
 8007e80:	69fb      	ldr	r3, [r7, #28]
 8007e82:	3301      	adds	r3, #1
 8007e84:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	3301      	adds	r3, #1
 8007e90:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	3301      	adds	r3, #1
 8007e96:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	3301      	adds	r3, #1
 8007e9c:	61bb      	str	r3, [r7, #24]
 8007e9e:	69ba      	ldr	r2, [r7, #24]
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d3e2      	bcc.n	8007e6c <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3724      	adds	r7, #36	; 0x24
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b08b      	sub	sp, #44	; 0x2c
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007eca:	88fb      	ldrh	r3, [r7, #6]
 8007ecc:	089b      	lsrs	r3, r3, #2
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ed2:	88fb      	ldrh	r3, [r7, #6]
 8007ed4:	f003 0303 	and.w	r3, r3, #3
 8007ed8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007eda:	2300      	movs	r3, #0
 8007edc:	623b      	str	r3, [r7, #32]
 8007ede:	e014      	b.n	8007f0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ee6:	681a      	ldr	r2, [r3, #0]
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	601a      	str	r2, [r3, #0]
    pDest++;
 8007eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eee:	3301      	adds	r3, #1
 8007ef0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efa:	3301      	adds	r3, #1
 8007efc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f00:	3301      	adds	r3, #1
 8007f02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	3301      	adds	r3, #1
 8007f08:	623b      	str	r3, [r7, #32]
 8007f0a:	6a3a      	ldr	r2, [r7, #32]
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d3e6      	bcc.n	8007ee0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f12:	8bfb      	ldrh	r3, [r7, #30]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01e      	beq.n	8007f56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f18:	2300      	movs	r3, #0
 8007f1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f22:	461a      	mov	r2, r3
 8007f24:	f107 0310 	add.w	r3, r7, #16
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	00db      	lsls	r3, r3, #3
 8007f34:	fa22 f303 	lsr.w	r3, r2, r3
 8007f38:	b2da      	uxtb	r2, r3
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	701a      	strb	r2, [r3, #0]
      i++;
 8007f3e:	6a3b      	ldr	r3, [r7, #32]
 8007f40:	3301      	adds	r3, #1
 8007f42:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f46:	3301      	adds	r3, #1
 8007f48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007f4a:	8bfb      	ldrh	r3, [r7, #30]
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f50:	8bfb      	ldrh	r3, [r7, #30]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1ea      	bne.n	8007f2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	372c      	adds	r7, #44	; 0x2c
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	785b      	ldrb	r3, [r3, #1]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d12c      	bne.n	8007fda <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	db12      	blt.n	8007fb8 <USB_EPSetStall+0x54>
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00f      	beq.n	8007fb8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	68ba      	ldr	r2, [r7, #8]
 8007fa8:	0151      	lsls	r1, r2, #5
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	440a      	add	r2, r1
 8007fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fb2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fb6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	0151      	lsls	r1, r2, #5
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	440a      	add	r2, r1
 8007fce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	e02b      	b.n	8008032 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	015a      	lsls	r2, r3, #5
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	db12      	blt.n	8008012 <USB_EPSetStall+0xae>
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00f      	beq.n	8008012 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	015a      	lsls	r2, r3, #5
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	4413      	add	r3, r2
 8007ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	68ba      	ldr	r2, [r7, #8]
 8008002:	0151      	lsls	r1, r2, #5
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	440a      	add	r2, r1
 8008008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800800c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008010:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	015a      	lsls	r2, r3, #5
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4413      	add	r3, r2
 800801a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68ba      	ldr	r2, [r7, #8]
 8008022:	0151      	lsls	r1, r2, #5
 8008024:	68fa      	ldr	r2, [r7, #12]
 8008026:	440a      	add	r2, r1
 8008028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800802c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008030:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3714      	adds	r7, #20
 8008038:	46bd      	mov	sp, r7
 800803a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803e:	4770      	bx	lr

08008040 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
 8008048:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	785b      	ldrb	r3, [r3, #1]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d128      	bne.n	80080ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	015a      	lsls	r2, r3, #5
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	4413      	add	r3, r2
 8008064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68ba      	ldr	r2, [r7, #8]
 800806c:	0151      	lsls	r1, r2, #5
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	440a      	add	r2, r1
 8008072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008076:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800807a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	791b      	ldrb	r3, [r3, #4]
 8008080:	2b03      	cmp	r3, #3
 8008082:	d003      	beq.n	800808c <USB_EPClearStall+0x4c>
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	791b      	ldrb	r3, [r3, #4]
 8008088:	2b02      	cmp	r3, #2
 800808a:	d138      	bne.n	80080fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	015a      	lsls	r2, r3, #5
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	4413      	add	r3, r2
 8008094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	0151      	lsls	r1, r2, #5
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	440a      	add	r2, r1
 80080a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080aa:	6013      	str	r3, [r2, #0]
 80080ac:	e027      	b.n	80080fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	015a      	lsls	r2, r3, #5
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	4413      	add	r3, r2
 80080b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	0151      	lsls	r1, r2, #5
 80080c0:	68fa      	ldr	r2, [r7, #12]
 80080c2:	440a      	add	r2, r1
 80080c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	791b      	ldrb	r3, [r3, #4]
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	d003      	beq.n	80080de <USB_EPClearStall+0x9e>
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	791b      	ldrb	r3, [r3, #4]
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d10f      	bne.n	80080fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	015a      	lsls	r2, r3, #5
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	4413      	add	r3, r2
 80080e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68ba      	ldr	r2, [r7, #8]
 80080ee:	0151      	lsls	r1, r2, #5
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	440a      	add	r2, r1
 80080f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800812a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800812e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	78fb      	ldrb	r3, [r7, #3]
 800813a:	011b      	lsls	r3, r3, #4
 800813c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008140:	68f9      	ldr	r1, [r7, #12]
 8008142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008146:	4313      	orrs	r3, r2
 8008148:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008172:	f023 0303 	bic.w	r3, r3, #3
 8008176:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008186:	f023 0302 	bic.w	r3, r3, #2
 800818a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3714      	adds	r7, #20
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800819a:	b480      	push	{r7}
 800819c:	b085      	sub	sp, #20
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081b4:	f023 0303 	bic.w	r3, r3, #3
 80081b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	68fa      	ldr	r2, [r7, #12]
 80081c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081c8:	f043 0302 	orr.w	r3, r3, #2
 80081cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80081dc:	b480      	push	{r7}
 80081de:	b085      	sub	sp, #20
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	4013      	ands	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80081f4:	68fb      	ldr	r3, [r7, #12]
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008202:	b480      	push	{r7}
 8008204:	b085      	sub	sp, #20
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800821e:	69db      	ldr	r3, [r3, #28]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	4013      	ands	r3, r2
 8008224:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	0c1b      	lsrs	r3, r3, #16
}
 800822a:	4618      	mov	r0, r3
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008236:	b480      	push	{r7}
 8008238:	b085      	sub	sp, #20
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008248:	699b      	ldr	r3, [r3, #24]
 800824a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	68ba      	ldr	r2, [r7, #8]
 8008256:	4013      	ands	r3, r2
 8008258:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	b29b      	uxth	r3, r3
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr

0800826a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800826a:	b480      	push	{r7}
 800826c:	b085      	sub	sp, #20
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	460b      	mov	r3, r1
 8008274:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800827a:	78fb      	ldrb	r3, [r7, #3]
 800827c:	015a      	lsls	r2, r3, #5
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4413      	add	r3, r2
 8008282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	4013      	ands	r3, r2
 8008296:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008298:	68bb      	ldr	r3, [r7, #8]
}
 800829a:	4618      	mov	r0, r3
 800829c:	3714      	adds	r7, #20
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b087      	sub	sp, #28
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	460b      	mov	r3, r1
 80082b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80082ca:	78fb      	ldrb	r3, [r7, #3]
 80082cc:	f003 030f 	and.w	r3, r3, #15
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	fa22 f303 	lsr.w	r3, r2, r3
 80082d6:	01db      	lsls	r3, r3, #7
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	693a      	ldr	r2, [r7, #16]
 80082dc:	4313      	orrs	r3, r2
 80082de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80082e0:	78fb      	ldrb	r3, [r7, #3]
 80082e2:	015a      	lsls	r2, r3, #5
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	4413      	add	r3, r2
 80082e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	693a      	ldr	r2, [r7, #16]
 80082f0:	4013      	ands	r3, r2
 80082f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082f4:	68bb      	ldr	r3, [r7, #8]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	371c      	adds	r7, #28
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008302:	b480      	push	{r7}
 8008304:	b083      	sub	sp, #12
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	695b      	ldr	r3, [r3, #20]
 800830e:	f003 0301 	and.w	r3, r3, #1
}
 8008312:	4618      	mov	r0, r3
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800831e:	b480      	push	{r7}
 8008320:	b085      	sub	sp, #20
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	68fa      	ldr	r2, [r7, #12]
 8008334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008338:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800833c:	f023 0307 	bic.w	r3, r3, #7
 8008340:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008354:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3714      	adds	r7, #20
 800835c:	46bd      	mov	sp, r7
 800835e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008362:	4770      	bx	lr

08008364 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8008364:	b480      	push	{r7}
 8008366:	b085      	sub	sp, #20
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	333c      	adds	r3, #60	; 0x3c
 8008376:	3304      	adds	r3, #4
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	4a1c      	ldr	r2, [pc, #112]	; (80083f0 <USB_EP0_OutStart+0x8c>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d90a      	bls.n	800839a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008394:	d101      	bne.n	800839a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8008396:	2300      	movs	r3, #0
 8008398:	e024      	b.n	80083e4 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a0:	461a      	mov	r2, r3
 80083a2:	2300      	movs	r3, #0
 80083a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c0:	691b      	ldr	r3, [r3, #16]
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083c8:	f043 0318 	orr.w	r3, r3, #24
 80083cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083d4:	691b      	ldr	r3, [r3, #16]
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083dc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80083e0:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr
 80083f0:	4f54300a 	.word	0x4f54300a

080083f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b085      	sub	sp, #20
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80083fc:	2300      	movs	r3, #0
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	3301      	adds	r3, #1
 8008404:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	4a13      	ldr	r2, [pc, #76]	; (8008458 <USB_CoreReset+0x64>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d901      	bls.n	8008412 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e01b      	b.n	800844a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	691b      	ldr	r3, [r3, #16]
 8008416:	2b00      	cmp	r3, #0
 8008418:	daf2      	bge.n	8008400 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	f043 0201 	orr.w	r2, r3, #1
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	3301      	adds	r3, #1
 800842e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4a09      	ldr	r2, [pc, #36]	; (8008458 <USB_CoreReset+0x64>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d901      	bls.n	800843c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e006      	b.n	800844a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	f003 0301 	and.w	r3, r3, #1
 8008444:	2b01      	cmp	r3, #1
 8008446:	d0f0      	beq.n	800842a <USB_CoreReset+0x36>

  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	00030d40 	.word	0x00030d40

0800845c <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b084      	sub	sp, #16
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	460b      	mov	r3, r1
 8008466:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008468:	201c      	movs	r0, #28
 800846a:	f002 fc67 	bl	800ad3c <USBD_static_malloc>
 800846e:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d109      	bne.n	800848a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	32b0      	adds	r2, #176	; 0xb0
 8008480:	2100      	movs	r1, #0
 8008482:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008486:	2302      	movs	r3, #2
 8008488:	e08a      	b.n	80085a0 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	32b0      	adds	r2, #176	; 0xb0
 8008494:	68f9      	ldr	r1, [r7, #12]
 8008496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	32b0      	adds	r2, #176	; 0xb0
 80084a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	7c1b      	ldrb	r3, [r3, #16]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d11b      	bne.n	80084ee <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80084b6:	4b3c      	ldr	r3, [pc, #240]	; (80085a8 <USBD_CUSTOM_HID_Init+0x14c>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	f003 020f 	and.w	r2, r3, #15
 80084be:	6879      	ldr	r1, [r7, #4]
 80084c0:	4613      	mov	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	440b      	add	r3, r1
 80084ca:	3326      	adds	r3, #38	; 0x26
 80084cc:	2205      	movs	r2, #5
 80084ce:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80084d0:	4b36      	ldr	r3, [pc, #216]	; (80085ac <USBD_CUSTOM_HID_Init+0x150>)
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	f003 020f 	and.w	r2, r3, #15
 80084d8:	6879      	ldr	r1, [r7, #4]
 80084da:	4613      	mov	r3, r2
 80084dc:	009b      	lsls	r3, r3, #2
 80084de:	4413      	add	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	440b      	add	r3, r1
 80084e4:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80084e8:	2205      	movs	r2, #5
 80084ea:	801a      	strh	r2, [r3, #0]
 80084ec:	e01a      	b.n	8008524 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80084ee:	4b2e      	ldr	r3, [pc, #184]	; (80085a8 <USBD_CUSTOM_HID_Init+0x14c>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	f003 020f 	and.w	r2, r3, #15
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	4613      	mov	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4413      	add	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	440b      	add	r3, r1
 8008502:	3326      	adds	r3, #38	; 0x26
 8008504:	2205      	movs	r2, #5
 8008506:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008508:	4b28      	ldr	r3, [pc, #160]	; (80085ac <USBD_CUSTOM_HID_Init+0x150>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	f003 020f 	and.w	r2, r3, #15
 8008510:	6879      	ldr	r1, [r7, #4]
 8008512:	4613      	mov	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4413      	add	r3, r2
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	440b      	add	r3, r1
 800851c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8008520:	2205      	movs	r2, #5
 8008522:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 8008524:	4b20      	ldr	r3, [pc, #128]	; (80085a8 <USBD_CUSTOM_HID_Init+0x14c>)
 8008526:	7819      	ldrb	r1, [r3, #0]
 8008528:	2302      	movs	r3, #2
 800852a:	2203      	movs	r2, #3
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f002 fa05 	bl	800a93c <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 8008532:	4b1d      	ldr	r3, [pc, #116]	; (80085a8 <USBD_CUSTOM_HID_Init+0x14c>)
 8008534:	781b      	ldrb	r3, [r3, #0]
 8008536:	f003 020f 	and.w	r2, r3, #15
 800853a:	6879      	ldr	r1, [r7, #4]
 800853c:	4613      	mov	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	440b      	add	r3, r1
 8008546:	3324      	adds	r3, #36	; 0x24
 8008548:	2201      	movs	r2, #1
 800854a:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 800854c:	4b17      	ldr	r3, [pc, #92]	; (80085ac <USBD_CUSTOM_HID_Init+0x150>)
 800854e:	7819      	ldrb	r1, [r3, #0]
 8008550:	2302      	movs	r3, #2
 8008552:	2203      	movs	r2, #3
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f002 f9f1 	bl	800a93c <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 800855a:	4b14      	ldr	r3, [pc, #80]	; (80085ac <USBD_CUSTOM_HID_Init+0x150>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	f003 020f 	and.w	r2, r3, #15
 8008562:	6879      	ldr	r1, [r7, #4]
 8008564:	4613      	mov	r3, r2
 8008566:	009b      	lsls	r3, r3, #2
 8008568:	4413      	add	r3, r2
 800856a:	009b      	lsls	r3, r3, #2
 800856c:	440b      	add	r3, r1
 800856e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008572:	2201      	movs	r2, #1
 8008574:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2200      	movs	r2, #0
 800857a:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008582:	687a      	ldr	r2, [r7, #4]
 8008584:	33b0      	adds	r3, #176	; 0xb0
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8008590:	4b06      	ldr	r3, [pc, #24]	; (80085ac <USBD_CUSTOM_HID_Init+0x150>)
 8008592:	7819      	ldrb	r1, [r3, #0]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	2307      	movs	r3, #7
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f002 fb49 	bl	800ac30 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800859e:	2300      	movs	r3, #0
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}
 80085a8:	20000086 	.word	0x20000086
 80085ac:	20000087 	.word	0x20000087

080085b0 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	460b      	mov	r3, r1
 80085ba:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 80085bc:	4b37      	ldr	r3, [pc, #220]	; (800869c <USBD_CUSTOM_HID_DeInit+0xec>)
 80085be:	781b      	ldrb	r3, [r3, #0]
 80085c0:	4619      	mov	r1, r3
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f002 f9f8 	bl	800a9b8 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 80085c8:	4b34      	ldr	r3, [pc, #208]	; (800869c <USBD_CUSTOM_HID_DeInit+0xec>)
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	f003 020f 	and.w	r2, r3, #15
 80085d0:	6879      	ldr	r1, [r7, #4]
 80085d2:	4613      	mov	r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4413      	add	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	440b      	add	r3, r1
 80085dc:	3324      	adds	r3, #36	; 0x24
 80085de:	2200      	movs	r2, #0
 80085e0:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 80085e2:	4b2e      	ldr	r3, [pc, #184]	; (800869c <USBD_CUSTOM_HID_DeInit+0xec>)
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	f003 020f 	and.w	r2, r3, #15
 80085ea:	6879      	ldr	r1, [r7, #4]
 80085ec:	4613      	mov	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	4413      	add	r3, r2
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	440b      	add	r3, r1
 80085f6:	3326      	adds	r3, #38	; 0x26
 80085f8:	2200      	movs	r2, #0
 80085fa:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 80085fc:	4b28      	ldr	r3, [pc, #160]	; (80086a0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f002 f9d8 	bl	800a9b8 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8008608:	4b25      	ldr	r3, [pc, #148]	; (80086a0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	f003 020f 	and.w	r2, r3, #15
 8008610:	6879      	ldr	r1, [r7, #4]
 8008612:	4613      	mov	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4413      	add	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	440b      	add	r3, r1
 800861c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008620:	2200      	movs	r2, #0
 8008622:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 8008624:	4b1e      	ldr	r3, [pc, #120]	; (80086a0 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8008626:	781b      	ldrb	r3, [r3, #0]
 8008628:	f003 020f 	and.w	r2, r3, #15
 800862c:	6879      	ldr	r1, [r7, #4]
 800862e:	4613      	mov	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	4413      	add	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	440b      	add	r3, r1
 8008638:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800863c:	2200      	movs	r2, #0
 800863e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	32b0      	adds	r2, #176	; 0xb0
 800864a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d01f      	beq.n	8008692 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	33b0      	adds	r3, #176	; 0xb0
 800865c:	009b      	lsls	r3, r3, #2
 800865e:	4413      	add	r3, r2
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	32b0      	adds	r2, #176	; 0xb0
 8008670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008674:	4618      	mov	r0, r3
 8008676:	f002 fb6f 	bl	800ad58 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	32b0      	adds	r2, #176	; 0xb0
 8008684:	2100      	movs	r1, #0
 8008686:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	20000086 	.word	0x20000086
 80086a0:	20000087 	.word	0x20000087

080086a4 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b088      	sub	sp, #32
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	32b0      	adds	r2, #176	; 0xb0
 80086b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086bc:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80086be:	2300      	movs	r3, #0
 80086c0:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 80086c2:	2300      	movs	r3, #0
 80086c4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d101      	bne.n	80086d8 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e0f8      	b.n	80088ca <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d056      	beq.n	8008792 <USBD_CUSTOM_HID_Setup+0xee>
 80086e4:	2b20      	cmp	r3, #32
 80086e6:	f040 80e8 	bne.w	80088ba <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	785b      	ldrb	r3, [r3, #1]
 80086ee:	3b02      	subs	r3, #2
 80086f0:	2b09      	cmp	r3, #9
 80086f2:	d846      	bhi.n	8008782 <USBD_CUSTOM_HID_Setup+0xde>
 80086f4:	a201      	add	r2, pc, #4	; (adr r2, 80086fc <USBD_CUSTOM_HID_Setup+0x58>)
 80086f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fa:	bf00      	nop
 80086fc:	08008755 	.word	0x08008755
 8008700:	08008733 	.word	0x08008733
 8008704:	08008783 	.word	0x08008783
 8008708:	08008783 	.word	0x08008783
 800870c:	08008783 	.word	0x08008783
 8008710:	08008783 	.word	0x08008783
 8008714:	08008783 	.word	0x08008783
 8008718:	08008765 	.word	0x08008765
 800871c:	08008743 	.word	0x08008743
 8008720:	08008725 	.word	0x08008725
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008724:	683b      	ldr	r3, [r7, #0]
 8008726:	885b      	ldrh	r3, [r3, #2]
 8008728:	b2db      	uxtb	r3, r3
 800872a:	461a      	mov	r2, r3
 800872c:	693b      	ldr	r3, [r7, #16]
 800872e:	609a      	str	r2, [r3, #8]
          break;
 8008730:	e02e      	b.n	8008790 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	3308      	adds	r3, #8
 8008736:	2201      	movs	r2, #1
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f001 fcd0 	bl	800a0e0 <USBD_CtlSendData>
          break;
 8008740:	e026      	b.n	8008790 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	885b      	ldrh	r3, [r3, #2]
 8008746:	0a1b      	lsrs	r3, r3, #8
 8008748:	b29b      	uxth	r3, r3
 800874a:	b2db      	uxtb	r3, r3
 800874c:	461a      	mov	r2, r3
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	60da      	str	r2, [r3, #12]
          break;
 8008752:	e01d      	b.n	8008790 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	330c      	adds	r3, #12
 8008758:	2201      	movs	r2, #1
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f001 fcbf 	bl	800a0e0 <USBD_CtlSendData>
          break;
 8008762:	e015      	b.n	8008790 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	2201      	movs	r2, #1
 8008768:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800876a:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	88db      	ldrh	r3, [r3, #6]
 8008770:	2b07      	cmp	r3, #7
 8008772:	bf28      	it	cs
 8008774:	2307      	movcs	r3, #7
 8008776:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8008778:	461a      	mov	r2, r3
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f001 fcdc 	bl	800a138 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8008780:	e006      	b.n	8008790 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8008782:	6839      	ldr	r1, [r7, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 fc3a 	bl	8009ffe <USBD_CtlError>
          ret = USBD_FAIL;
 800878a:	2303      	movs	r3, #3
 800878c:	75fb      	strb	r3, [r7, #23]
          break;
 800878e:	bf00      	nop
      }
      break;
 8008790:	e09a      	b.n	80088c8 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	785b      	ldrb	r3, [r3, #1]
 8008796:	2b0b      	cmp	r3, #11
 8008798:	f200 8086 	bhi.w	80088a8 <USBD_CUSTOM_HID_Setup+0x204>
 800879c:	a201      	add	r2, pc, #4	; (adr r2, 80087a4 <USBD_CUSTOM_HID_Setup+0x100>)
 800879e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a2:	bf00      	nop
 80087a4:	080087d5 	.word	0x080087d5
 80087a8:	080088b7 	.word	0x080088b7
 80087ac:	080088a9 	.word	0x080088a9
 80087b0:	080088a9 	.word	0x080088a9
 80087b4:	080088a9 	.word	0x080088a9
 80087b8:	080088a9 	.word	0x080088a9
 80087bc:	080087ff 	.word	0x080087ff
 80087c0:	080088a9 	.word	0x080088a9
 80087c4:	080088a9 	.word	0x080088a9
 80087c8:	080088a9 	.word	0x080088a9
 80087cc:	08008857 	.word	0x08008857
 80087d0:	08008881 	.word	0x08008881
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b03      	cmp	r3, #3
 80087de:	d107      	bne.n	80087f0 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80087e0:	f107 030e 	add.w	r3, r7, #14
 80087e4:	2202      	movs	r2, #2
 80087e6:	4619      	mov	r1, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f001 fc79 	bl	800a0e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80087ee:	e063      	b.n	80088b8 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80087f0:	6839      	ldr	r1, [r7, #0]
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f001 fc03 	bl	8009ffe <USBD_CtlError>
            ret = USBD_FAIL;
 80087f8:	2303      	movs	r3, #3
 80087fa:	75fb      	strb	r3, [r7, #23]
          break;
 80087fc:	e05c      	b.n	80088b8 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	885b      	ldrh	r3, [r3, #2]
 8008802:	0a1b      	lsrs	r3, r3, #8
 8008804:	b29b      	uxth	r3, r3
 8008806:	2b22      	cmp	r3, #34	; 0x22
 8008808:	d110      	bne.n	800882c <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	88db      	ldrh	r3, [r3, #6]
 800880e:	2b1d      	cmp	r3, #29
 8008810:	bf28      	it	cs
 8008812:	231d      	movcs	r3, #29
 8008814:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	33b0      	adds	r3, #176	; 0xb0
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4413      	add	r3, r2
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	61bb      	str	r3, [r7, #24]
 800882a:	e00d      	b.n	8008848 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	885b      	ldrh	r3, [r3, #2]
 8008830:	0a1b      	lsrs	r3, r3, #8
 8008832:	b29b      	uxth	r3, r3
 8008834:	2b21      	cmp	r3, #33	; 0x21
 8008836:	d107      	bne.n	8008848 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008838:	4b26      	ldr	r3, [pc, #152]	; (80088d4 <USBD_CUSTOM_HID_Setup+0x230>)
 800883a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	88db      	ldrh	r3, [r3, #6]
 8008840:	2b09      	cmp	r3, #9
 8008842:	bf28      	it	cs
 8008844:	2309      	movcs	r3, #9
 8008846:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8008848:	8bfb      	ldrh	r3, [r7, #30]
 800884a:	461a      	mov	r2, r3
 800884c:	69b9      	ldr	r1, [r7, #24]
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f001 fc46 	bl	800a0e0 <USBD_CtlSendData>
          break;
 8008854:	e030      	b.n	80088b8 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800885c:	b2db      	uxtb	r3, r3
 800885e:	2b03      	cmp	r3, #3
 8008860:	d107      	bne.n	8008872 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	3310      	adds	r3, #16
 8008866:	2201      	movs	r2, #1
 8008868:	4619      	mov	r1, r3
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 fc38 	bl	800a0e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008870:	e022      	b.n	80088b8 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8008872:	6839      	ldr	r1, [r7, #0]
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f001 fbc2 	bl	8009ffe <USBD_CtlError>
            ret = USBD_FAIL;
 800887a:	2303      	movs	r3, #3
 800887c:	75fb      	strb	r3, [r7, #23]
          break;
 800887e:	e01b      	b.n	80088b8 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008886:	b2db      	uxtb	r3, r3
 8008888:	2b03      	cmp	r3, #3
 800888a:	d106      	bne.n	800889a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	885b      	ldrh	r3, [r3, #2]
 8008890:	b2db      	uxtb	r3, r3
 8008892:	461a      	mov	r2, r3
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008898:	e00e      	b.n	80088b8 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800889a:	6839      	ldr	r1, [r7, #0]
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f001 fbae 	bl	8009ffe <USBD_CtlError>
            ret = USBD_FAIL;
 80088a2:	2303      	movs	r3, #3
 80088a4:	75fb      	strb	r3, [r7, #23]
          break;
 80088a6:	e007      	b.n	80088b8 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80088a8:	6839      	ldr	r1, [r7, #0]
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f001 fba7 	bl	8009ffe <USBD_CtlError>
          ret = USBD_FAIL;
 80088b0:	2303      	movs	r3, #3
 80088b2:	75fb      	strb	r3, [r7, #23]
          break;
 80088b4:	e000      	b.n	80088b8 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 80088b6:	bf00      	nop
      }
      break;
 80088b8:	e006      	b.n	80088c8 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f001 fb9e 	bl	8009ffe <USBD_CtlError>
      ret = USBD_FAIL;
 80088c2:	2303      	movs	r3, #3
 80088c4:	75fb      	strb	r3, [r7, #23]
      break;
 80088c6:	bf00      	nop
  }
  return (uint8_t)ret;
 80088c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3720      	adds	r7, #32
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20000070 	.word	0x20000070

080088d8 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	4613      	mov	r3, r2
 80088e4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	32b0      	adds	r2, #176	; 0xb0
 80088f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f4:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d101      	bne.n	8008900 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e017      	b.n	8008930 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b03      	cmp	r3, #3
 800890a:	d110      	bne.n	800892e <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	7e1b      	ldrb	r3, [r3, #24]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d10a      	bne.n	800892a <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	2201      	movs	r2, #1
 8008918:	761a      	strb	r2, [r3, #24]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 800891a:	4b07      	ldr	r3, [pc, #28]	; (8008938 <USBD_CUSTOM_HID_SendReport+0x60>)
 800891c:	7819      	ldrb	r1, [r3, #0]
 800891e:	88fb      	ldrh	r3, [r7, #6]
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f002 f94c 	bl	800abc0 <USBD_LL_Transmit>
 8008928:	e001      	b.n	800892e <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 800892a:	2301      	movs	r3, #1
 800892c:	e000      	b.n	8008930 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3718      	adds	r7, #24
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}
 8008938:	20000086 	.word	0x20000086

0800893c <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008944:	2181      	movs	r1, #129	; 0x81
 8008946:	4815      	ldr	r0, [pc, #84]	; (800899c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008948:	f000 fcf7 	bl	800933a <USBD_GetEpDesc>
 800894c:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 800894e:	2101      	movs	r1, #1
 8008950:	4812      	ldr	r0, [pc, #72]	; (800899c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8008952:	f000 fcf2 	bl	800933a <USBD_GetEpDesc>
 8008956:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d009      	beq.n	8008972 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f042 0202 	orr.w	r2, r2, #2
 8008966:	711a      	strb	r2, [r3, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2205      	movs	r2, #5
 8008970:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d009      	beq.n	800898c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	2200      	movs	r2, #0
 800897c:	f042 0202 	orr.w	r2, r2, #2
 8008980:	711a      	strb	r2, [r3, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	2205      	movs	r2, #5
 800898a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2229      	movs	r2, #41	; 0x29
 8008990:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008992:	4b02      	ldr	r3, [pc, #8]	; (800899c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}
 800899c:	20000044 	.word	0x20000044

080089a0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80089a8:	2181      	movs	r1, #129	; 0x81
 80089aa:	4815      	ldr	r0, [pc, #84]	; (8008a00 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80089ac:	f000 fcc5 	bl	800933a <USBD_GetEpDesc>
 80089b0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80089b2:	2101      	movs	r1, #1
 80089b4:	4812      	ldr	r0, [pc, #72]	; (8008a00 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 80089b6:	f000 fcc0 	bl	800933a <USBD_GetEpDesc>
 80089ba:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d009      	beq.n	80089d6 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2200      	movs	r2, #0
 80089c6:	f042 0202 	orr.w	r2, r2, #2
 80089ca:	711a      	strb	r2, [r3, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2205      	movs	r2, #5
 80089d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d009      	beq.n	80089f0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2200      	movs	r2, #0
 80089e0:	f042 0202 	orr.w	r2, r2, #2
 80089e4:	711a      	strb	r2, [r3, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	2205      	movs	r2, #5
 80089ee:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2229      	movs	r2, #41	; 0x29
 80089f4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80089f6:	4b02      	ldr	r3, [pc, #8]	; (8008a00 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	3710      	adds	r7, #16
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	20000044 	.word	0x20000044

08008a04 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b084      	sub	sp, #16
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8008a0c:	2181      	movs	r1, #129	; 0x81
 8008a0e:	4815      	ldr	r0, [pc, #84]	; (8008a64 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008a10:	f000 fc93 	bl	800933a <USBD_GetEpDesc>
 8008a14:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8008a16:	2101      	movs	r1, #1
 8008a18:	4812      	ldr	r0, [pc, #72]	; (8008a64 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8008a1a:	f000 fc8e 	bl	800933a <USBD_GetEpDesc>
 8008a1e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d009      	beq.n	8008a3a <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f042 0202 	orr.w	r2, r2, #2
 8008a2e:	711a      	strb	r2, [r3, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2205      	movs	r2, #5
 8008a38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d009      	beq.n	8008a54 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f042 0202 	orr.w	r2, r2, #2
 8008a48:	711a      	strb	r2, [r3, #4]
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	2205      	movs	r2, #5
 8008a52:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2229      	movs	r2, #41	; 0x29
 8008a58:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8008a5a:	4b02      	ldr	r3, [pc, #8]	; (8008a64 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	20000044 	.word	0x20000044

08008a68 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	32b0      	adds	r2, #176	; 0xb0
 8008a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a82:	2200      	movs	r2, #0
 8008a84:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	32b0      	adds	r2, #176	; 0xb0
 8008aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d101      	bne.n	8008ab6 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	e017      	b.n	8008ae6 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	32b0      	adds	r2, #176	; 0xb0
 8008ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac4:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	33b0      	adds	r3, #176	; 0xb0
 8008ad0:	009b      	lsls	r3, r3, #2
 8008ad2:	4413      	add	r3, r2
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	7810      	ldrb	r0, [r2, #0]
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	7852      	ldrb	r2, [r2, #1]
 8008ae0:	4611      	mov	r1, r2
 8008ae2:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8008ae4:	2300      	movs	r3, #0
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	32b0      	adds	r2, #176	; 0xb0
 8008b00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b04:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e016      	b.n	8008b3e <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	695b      	ldr	r3, [r3, #20]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d111      	bne.n	8008b3c <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b1e:	687a      	ldr	r2, [r7, #4]
 8008b20:	33b0      	adds	r3, #176	; 0xb0
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	4413      	add	r3, r2
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	68db      	ldr	r3, [r3, #12]
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	7810      	ldrb	r0, [r2, #0]
 8008b2e:	68fa      	ldr	r2, [r7, #12]
 8008b30:	7852      	ldrb	r2, [r2, #1]
 8008b32:	4611      	mov	r1, r2
 8008b34:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
	...

08008b48 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	220a      	movs	r2, #10
 8008b54:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008b56:	4b03      	ldr	r3, [pc, #12]	; (8008b64 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	2000007c 	.word	0x2000007c

08008b68 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d101      	bne.n	8008b7c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008b78:	2303      	movs	r3, #3
 8008b7a:	e009      	b.n	8008b90 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b82:	687a      	ldr	r2, [r7, #4]
 8008b84:	33b0      	adds	r3, #176	; 0xb0
 8008b86:	009b      	lsls	r3, r3, #2
 8008b88:	4413      	add	r3, r2
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	60f8      	str	r0, [r7, #12]
 8008ba4:	60b9      	str	r1, [r7, #8]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d101      	bne.n	8008bb4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e01f      	b.n	8008bf4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	68ba      	ldr	r2, [r7, #8]
 8008bd6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	2201      	movs	r2, #1
 8008bde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	79fa      	ldrb	r2, [r7, #7]
 8008be6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f001 fe29 	bl	800a840 <USBD_LL_Init>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d101      	bne.n	8008c14 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008c10:	2303      	movs	r3, #3
 8008c12:	e025      	b.n	8008c60 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	683a      	ldr	r2, [r7, #0]
 8008c18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	32ae      	adds	r2, #174	; 0xae
 8008c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d00f      	beq.n	8008c50 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	32ae      	adds	r2, #174	; 0xae
 8008c3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c40:	f107 020e 	add.w	r2, r7, #14
 8008c44:	4610      	mov	r0, r2
 8008c46:	4798      	blx	r3
 8008c48:	4602      	mov	r2, r0
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008c56:	1c5a      	adds	r2, r3, #1
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f001 fe31 	bl	800a8d8 <USBD_LL_Start>
 8008c76:	4603      	mov	r3, r0
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008c88:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b084      	sub	sp, #16
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d009      	beq.n	8008cc4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	78fa      	ldrb	r2, [r7, #3]
 8008cba:	4611      	mov	r1, r2
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	4798      	blx	r3
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce4:	685b      	ldr	r3, [r3, #4]
 8008ce6:	78fa      	ldrb	r2, [r7, #3]
 8008ce8:	4611      	mov	r1, r2
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	4798      	blx	r3
 8008cee:	4603      	mov	r3, r0
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d001      	beq.n	8008cf8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
 8008d0a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d12:	6839      	ldr	r1, [r7, #0]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f001 f938 	bl	8009f8a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008d28:	461a      	mov	r2, r3
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d36:	f003 031f 	and.w	r3, r3, #31
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d01a      	beq.n	8008d74 <USBD_LL_SetupStage+0x72>
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d822      	bhi.n	8008d88 <USBD_LL_SetupStage+0x86>
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d002      	beq.n	8008d4c <USBD_LL_SetupStage+0x4a>
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d00a      	beq.n	8008d60 <USBD_LL_SetupStage+0x5e>
 8008d4a:	e01d      	b.n	8008d88 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d52:	4619      	mov	r1, r3
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fb65 	bl	8009424 <USBD_StdDevReq>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008d5e:	e020      	b.n	8008da2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d66:	4619      	mov	r1, r3
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f000 fbcd 	bl	8009508 <USBD_StdItfReq>
 8008d6e:	4603      	mov	r3, r0
 8008d70:	73fb      	strb	r3, [r7, #15]
      break;
 8008d72:	e016      	b.n	8008da2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fc2f 	bl	80095e0 <USBD_StdEPReq>
 8008d82:	4603      	mov	r3, r0
 8008d84:	73fb      	strb	r3, [r7, #15]
      break;
 8008d86:	e00c      	b.n	8008da2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d8e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f001 fe44 	bl	800aa24 <USBD_LL_StallEP>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008da0:	bf00      	nop
  }

  return ret;
 8008da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3710      	adds	r7, #16
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	460b      	mov	r3, r1
 8008db6:	607a      	str	r2, [r7, #4]
 8008db8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008dbe:	7afb      	ldrb	r3, [r7, #11]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d16e      	bne.n	8008ea2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008dca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	f040 8098 	bne.w	8008f08 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008dd8:	693b      	ldr	r3, [r7, #16]
 8008dda:	689a      	ldr	r2, [r3, #8]
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d913      	bls.n	8008e0c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	689a      	ldr	r2, [r3, #8]
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	68db      	ldr	r3, [r3, #12]
 8008dec:	1ad2      	subs	r2, r2, r3
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	68da      	ldr	r2, [r3, #12]
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	689b      	ldr	r3, [r3, #8]
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	bf28      	it	cs
 8008dfe:	4613      	movcs	r3, r2
 8008e00:	461a      	mov	r2, r3
 8008e02:	6879      	ldr	r1, [r7, #4]
 8008e04:	68f8      	ldr	r0, [r7, #12]
 8008e06:	f001 f9b4 	bl	800a172 <USBD_CtlContinueRx>
 8008e0a:	e07d      	b.n	8008f08 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008e12:	f003 031f 	and.w	r3, r3, #31
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	d014      	beq.n	8008e44 <USBD_LL_DataOutStage+0x98>
 8008e1a:	2b02      	cmp	r3, #2
 8008e1c:	d81d      	bhi.n	8008e5a <USBD_LL_DataOutStage+0xae>
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d002      	beq.n	8008e28 <USBD_LL_DataOutStage+0x7c>
 8008e22:	2b01      	cmp	r3, #1
 8008e24:	d003      	beq.n	8008e2e <USBD_LL_DataOutStage+0x82>
 8008e26:	e018      	b.n	8008e5a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	75bb      	strb	r3, [r7, #22]
            break;
 8008e2c:	e018      	b.n	8008e60 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e34:	b2db      	uxtb	r3, r3
 8008e36:	4619      	mov	r1, r3
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f000 fa64 	bl	8009306 <USBD_CoreFindIF>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	75bb      	strb	r3, [r7, #22]
            break;
 8008e42:	e00d      	b.n	8008e60 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f000 fa66 	bl	8009320 <USBD_CoreFindEP>
 8008e54:	4603      	mov	r3, r0
 8008e56:	75bb      	strb	r3, [r7, #22]
            break;
 8008e58:	e002      	b.n	8008e60 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	75bb      	strb	r3, [r7, #22]
            break;
 8008e5e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008e60:	7dbb      	ldrb	r3, [r7, #22]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d119      	bne.n	8008e9a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e6c:	b2db      	uxtb	r3, r3
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d113      	bne.n	8008e9a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008e72:	7dba      	ldrb	r2, [r7, #22]
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	32ae      	adds	r2, #174	; 0xae
 8008e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d00b      	beq.n	8008e9a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008e82:	7dba      	ldrb	r2, [r7, #22]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008e8a:	7dba      	ldrb	r2, [r7, #22]
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	32ae      	adds	r2, #174	; 0xae
 8008e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e94:	691b      	ldr	r3, [r3, #16]
 8008e96:	68f8      	ldr	r0, [r7, #12]
 8008e98:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008e9a:	68f8      	ldr	r0, [r7, #12]
 8008e9c:	f001 f97a 	bl	800a194 <USBD_CtlSendStatus>
 8008ea0:	e032      	b.n	8008f08 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008ea2:	7afb      	ldrb	r3, [r7, #11]
 8008ea4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	4619      	mov	r1, r3
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f000 fa37 	bl	8009320 <USBD_CoreFindEP>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008eb6:	7dbb      	ldrb	r3, [r7, #22]
 8008eb8:	2bff      	cmp	r3, #255	; 0xff
 8008eba:	d025      	beq.n	8008f08 <USBD_LL_DataOutStage+0x15c>
 8008ebc:	7dbb      	ldrb	r3, [r7, #22]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d122      	bne.n	8008f08 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	2b03      	cmp	r3, #3
 8008ecc:	d117      	bne.n	8008efe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008ece:	7dba      	ldrb	r2, [r7, #22]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	32ae      	adds	r2, #174	; 0xae
 8008ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00f      	beq.n	8008efe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008ede:	7dba      	ldrb	r2, [r7, #22]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008ee6:	7dba      	ldrb	r2, [r7, #22]
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	32ae      	adds	r2, #174	; 0xae
 8008eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef0:	699b      	ldr	r3, [r3, #24]
 8008ef2:	7afa      	ldrb	r2, [r7, #11]
 8008ef4:	4611      	mov	r1, r2
 8008ef6:	68f8      	ldr	r0, [r7, #12]
 8008ef8:	4798      	blx	r3
 8008efa:	4603      	mov	r3, r0
 8008efc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008efe:	7dfb      	ldrb	r3, [r7, #23]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d001      	beq.n	8008f08 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008f04:	7dfb      	ldrb	r3, [r7, #23]
 8008f06:	e000      	b.n	8008f0a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008f08:	2300      	movs	r3, #0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3718      	adds	r7, #24
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b086      	sub	sp, #24
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	607a      	str	r2, [r7, #4]
 8008f1e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008f20:	7afb      	ldrb	r3, [r7, #11]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d16f      	bne.n	8009006 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3314      	adds	r3, #20
 8008f2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d15a      	bne.n	8008fec <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	689a      	ldr	r2, [r3, #8]
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d914      	bls.n	8008f6c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	689a      	ldr	r2, [r3, #8]
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	1ad2      	subs	r2, r2, r3
 8008f4c:	693b      	ldr	r3, [r7, #16]
 8008f4e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008f50:	693b      	ldr	r3, [r7, #16]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	461a      	mov	r2, r3
 8008f56:	6879      	ldr	r1, [r7, #4]
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f001 f8dc 	bl	800a116 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f5e:	2300      	movs	r3, #0
 8008f60:	2200      	movs	r2, #0
 8008f62:	2100      	movs	r1, #0
 8008f64:	68f8      	ldr	r0, [r7, #12]
 8008f66:	f001 fe63 	bl	800ac30 <USBD_LL_PrepareReceive>
 8008f6a:	e03f      	b.n	8008fec <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	68da      	ldr	r2, [r3, #12]
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d11c      	bne.n	8008fb2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	685a      	ldr	r2, [r3, #4]
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d316      	bcc.n	8008fb2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	685a      	ldr	r2, [r3, #4]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f8e:	429a      	cmp	r2, r3
 8008f90:	d20f      	bcs.n	8008fb2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f92:	2200      	movs	r2, #0
 8008f94:	2100      	movs	r1, #0
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f001 f8bd 	bl	800a116 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	2100      	movs	r1, #0
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f001 fe40 	bl	800ac30 <USBD_LL_PrepareReceive>
 8008fb0:	e01c      	b.n	8008fec <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	d10f      	bne.n	8008fde <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fc4:	68db      	ldr	r3, [r3, #12]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d009      	beq.n	8008fde <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	68f8      	ldr	r0, [r7, #12]
 8008fdc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008fde:	2180      	movs	r1, #128	; 0x80
 8008fe0:	68f8      	ldr	r0, [r7, #12]
 8008fe2:	f001 fd1f 	bl	800aa24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f001 f8e7 	bl	800a1ba <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d03a      	beq.n	800906c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008ff6:	68f8      	ldr	r0, [r7, #12]
 8008ff8:	f7ff fe42 	bl	8008c80 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009004:	e032      	b.n	800906c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009006:	7afb      	ldrb	r3, [r7, #11]
 8009008:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800900c:	b2db      	uxtb	r3, r3
 800900e:	4619      	mov	r1, r3
 8009010:	68f8      	ldr	r0, [r7, #12]
 8009012:	f000 f985 	bl	8009320 <USBD_CoreFindEP>
 8009016:	4603      	mov	r3, r0
 8009018:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800901a:	7dfb      	ldrb	r3, [r7, #23]
 800901c:	2bff      	cmp	r3, #255	; 0xff
 800901e:	d025      	beq.n	800906c <USBD_LL_DataInStage+0x15a>
 8009020:	7dfb      	ldrb	r3, [r7, #23]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d122      	bne.n	800906c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800902c:	b2db      	uxtb	r3, r3
 800902e:	2b03      	cmp	r3, #3
 8009030:	d11c      	bne.n	800906c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009032:	7dfa      	ldrb	r2, [r7, #23]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	32ae      	adds	r2, #174	; 0xae
 8009038:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800903c:	695b      	ldr	r3, [r3, #20]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d014      	beq.n	800906c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009042:	7dfa      	ldrb	r2, [r7, #23]
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800904a:	7dfa      	ldrb	r2, [r7, #23]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	32ae      	adds	r2, #174	; 0xae
 8009050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009054:	695b      	ldr	r3, [r3, #20]
 8009056:	7afa      	ldrb	r2, [r7, #11]
 8009058:	4611      	mov	r1, r2
 800905a:	68f8      	ldr	r0, [r7, #12]
 800905c:	4798      	blx	r3
 800905e:	4603      	mov	r3, r0
 8009060:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009062:	7dbb      	ldrb	r3, [r7, #22]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009068:	7dbb      	ldrb	r3, [r7, #22]
 800906a:	e000      	b.n	800906e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009076:	b580      	push	{r7, lr}
 8009078:	b084      	sub	sp, #16
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2200      	movs	r2, #0
 800909c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d014      	beq.n	80090dc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d00e      	beq.n	80090dc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c4:	685b      	ldr	r3, [r3, #4]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	6852      	ldr	r2, [r2, #4]
 80090ca:	b2d2      	uxtb	r2, r2
 80090cc:	4611      	mov	r1, r2
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	4798      	blx	r3
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80090d8:	2303      	movs	r3, #3
 80090da:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090dc:	2340      	movs	r3, #64	; 0x40
 80090de:	2200      	movs	r2, #0
 80090e0:	2100      	movs	r1, #0
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f001 fc2a 	bl	800a93c <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2201      	movs	r2, #1
 80090ec:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2240      	movs	r2, #64	; 0x40
 80090f4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80090f8:	2340      	movs	r3, #64	; 0x40
 80090fa:	2200      	movs	r2, #0
 80090fc:	2180      	movs	r1, #128	; 0x80
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f001 fc1c 	bl	800a93c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2240      	movs	r2, #64	; 0x40
 800910e:	621a      	str	r2, [r3, #32]

  return ret;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800911a:	b480      	push	{r7}
 800911c:	b083      	sub	sp, #12
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	460b      	mov	r3, r1
 8009124:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	78fa      	ldrb	r2, [r7, #3]
 800912a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	370c      	adds	r7, #12
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr

0800913a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800913a:	b480      	push	{r7}
 800913c:	b083      	sub	sp, #12
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b04      	cmp	r3, #4
 800914c:	d006      	beq.n	800915c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009154:	b2da      	uxtb	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2204      	movs	r2, #4
 8009160:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009172:	b480      	push	{r7}
 8009174:	b083      	sub	sp, #12
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009180:	b2db      	uxtb	r3, r3
 8009182:	2b04      	cmp	r3, #4
 8009184:	d106      	bne.n	8009194 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800918c:	b2da      	uxtb	r2, r3
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	370c      	adds	r7, #12
 800919a:	46bd      	mov	sp, r7
 800919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a0:	4770      	bx	lr

080091a2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b082      	sub	sp, #8
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	2b03      	cmp	r3, #3
 80091b4:	d110      	bne.n	80091d8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00b      	beq.n	80091d8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d005      	beq.n	80091d8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d2:	69db      	ldr	r3, [r3, #28]
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80091d8:	2300      	movs	r3, #0
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b082      	sub	sp, #8
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	460b      	mov	r3, r1
 80091ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	32ae      	adds	r2, #174	; 0xae
 80091f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d101      	bne.n	8009204 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009200:	2303      	movs	r3, #3
 8009202:	e01c      	b.n	800923e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b03      	cmp	r3, #3
 800920e:	d115      	bne.n	800923c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	32ae      	adds	r2, #174	; 0xae
 800921a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800921e:	6a1b      	ldr	r3, [r3, #32]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00b      	beq.n	800923c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	32ae      	adds	r2, #174	; 0xae
 800922e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009232:	6a1b      	ldr	r3, [r3, #32]
 8009234:	78fa      	ldrb	r2, [r7, #3]
 8009236:	4611      	mov	r1, r2
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3708      	adds	r7, #8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b082      	sub	sp, #8
 800924a:	af00      	add	r7, sp, #0
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	460b      	mov	r3, r1
 8009250:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	32ae      	adds	r2, #174	; 0xae
 800925c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d101      	bne.n	8009268 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009264:	2303      	movs	r3, #3
 8009266:	e01c      	b.n	80092a2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800926e:	b2db      	uxtb	r3, r3
 8009270:	2b03      	cmp	r3, #3
 8009272:	d115      	bne.n	80092a0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	32ae      	adds	r2, #174	; 0xae
 800927e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009284:	2b00      	cmp	r3, #0
 8009286:	d00b      	beq.n	80092a0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	32ae      	adds	r2, #174	; 0xae
 8009292:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009298:	78fa      	ldrb	r2, [r7, #3]
 800929a:	4611      	mov	r1, r2
 800929c:	6878      	ldr	r0, [r7, #4]
 800929e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80092a0:	2300      	movs	r3, #0
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80092aa:	b480      	push	{r7}
 80092ac:	b083      	sub	sp, #12
 80092ae:	af00      	add	r7, sp, #0
 80092b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80092b2:	2300      	movs	r3, #0
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	370c      	adds	r7, #12
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80092c8:	2300      	movs	r3, #0
 80092ca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00e      	beq.n	80092fc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	6852      	ldr	r2, [r2, #4]
 80092ea:	b2d2      	uxtb	r2, r2
 80092ec:	4611      	mov	r1, r2
 80092ee:	6878      	ldr	r0, [r7, #4]
 80092f0:	4798      	blx	r3
 80092f2:	4603      	mov	r3, r0
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80092f8:	2303      	movs	r3, #3
 80092fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80092fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009306:	b480      	push	{r7}
 8009308:	b083      	sub	sp, #12
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	460b      	mov	r3, r1
 8009310:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009312:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009314:	4618      	mov	r0, r3
 8009316:	370c      	adds	r7, #12
 8009318:	46bd      	mov	sp, r7
 800931a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931e:	4770      	bx	lr

08009320 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009320:	b480      	push	{r7}
 8009322:	b083      	sub	sp, #12
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
 8009328:	460b      	mov	r3, r1
 800932a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800932c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800932e:	4618      	mov	r0, r3
 8009330:	370c      	adds	r7, #12
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr

0800933a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b086      	sub	sp, #24
 800933e:	af00      	add	r7, sp, #0
 8009340:	6078      	str	r0, [r7, #4]
 8009342:	460b      	mov	r3, r1
 8009344:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800934e:	2300      	movs	r3, #0
 8009350:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	885b      	ldrh	r3, [r3, #2]
 8009356:	b29a      	uxth	r2, r3
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	b29b      	uxth	r3, r3
 800935e:	429a      	cmp	r2, r3
 8009360:	d920      	bls.n	80093a4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	b29b      	uxth	r3, r3
 8009368:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800936a:	e013      	b.n	8009394 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800936c:	f107 030a 	add.w	r3, r7, #10
 8009370:	4619      	mov	r1, r3
 8009372:	6978      	ldr	r0, [r7, #20]
 8009374:	f000 f81b 	bl	80093ae <USBD_GetNextDesc>
 8009378:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800937a:	697b      	ldr	r3, [r7, #20]
 800937c:	785b      	ldrb	r3, [r3, #1]
 800937e:	2b05      	cmp	r3, #5
 8009380:	d108      	bne.n	8009394 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009386:	693b      	ldr	r3, [r7, #16]
 8009388:	789b      	ldrb	r3, [r3, #2]
 800938a:	78fa      	ldrb	r2, [r7, #3]
 800938c:	429a      	cmp	r2, r3
 800938e:	d008      	beq.n	80093a2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009390:	2300      	movs	r3, #0
 8009392:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	885b      	ldrh	r3, [r3, #2]
 8009398:	b29a      	uxth	r2, r3
 800939a:	897b      	ldrh	r3, [r7, #10]
 800939c:	429a      	cmp	r2, r3
 800939e:	d8e5      	bhi.n	800936c <USBD_GetEpDesc+0x32>
 80093a0:	e000      	b.n	80093a4 <USBD_GetEpDesc+0x6a>
          break;
 80093a2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80093a4:	693b      	ldr	r3, [r7, #16]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3718      	adds	r7, #24
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80093ae:	b480      	push	{r7}
 80093b0:	b085      	sub	sp, #20
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
 80093b6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	881a      	ldrh	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	781b      	ldrb	r3, [r3, #0]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	4413      	add	r3, r2
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	461a      	mov	r2, r3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	4413      	add	r3, r2
 80093d8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80093da:	68fb      	ldr	r3, [r7, #12]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b087      	sub	sp, #28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	3301      	adds	r3, #1
 80093fe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009400:	697b      	ldr	r3, [r7, #20]
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009406:	8a3b      	ldrh	r3, [r7, #16]
 8009408:	021b      	lsls	r3, r3, #8
 800940a:	b21a      	sxth	r2, r3
 800940c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009410:	4313      	orrs	r3, r2
 8009412:	b21b      	sxth	r3, r3
 8009414:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009416:	89fb      	ldrh	r3, [r7, #14]
}
 8009418:	4618      	mov	r0, r3
 800941a:	371c      	adds	r7, #28
 800941c:	46bd      	mov	sp, r7
 800941e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009422:	4770      	bx	lr

08009424 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800943a:	2b40      	cmp	r3, #64	; 0x40
 800943c:	d005      	beq.n	800944a <USBD_StdDevReq+0x26>
 800943e:	2b40      	cmp	r3, #64	; 0x40
 8009440:	d857      	bhi.n	80094f2 <USBD_StdDevReq+0xce>
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00f      	beq.n	8009466 <USBD_StdDevReq+0x42>
 8009446:	2b20      	cmp	r3, #32
 8009448:	d153      	bne.n	80094f2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	32ae      	adds	r2, #174	; 0xae
 8009454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	4798      	blx	r3
 8009460:	4603      	mov	r3, r0
 8009462:	73fb      	strb	r3, [r7, #15]
      break;
 8009464:	e04a      	b.n	80094fc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	785b      	ldrb	r3, [r3, #1]
 800946a:	2b09      	cmp	r3, #9
 800946c:	d83b      	bhi.n	80094e6 <USBD_StdDevReq+0xc2>
 800946e:	a201      	add	r2, pc, #4	; (adr r2, 8009474 <USBD_StdDevReq+0x50>)
 8009470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009474:	080094c9 	.word	0x080094c9
 8009478:	080094dd 	.word	0x080094dd
 800947c:	080094e7 	.word	0x080094e7
 8009480:	080094d3 	.word	0x080094d3
 8009484:	080094e7 	.word	0x080094e7
 8009488:	080094a7 	.word	0x080094a7
 800948c:	0800949d 	.word	0x0800949d
 8009490:	080094e7 	.word	0x080094e7
 8009494:	080094bf 	.word	0x080094bf
 8009498:	080094b1 	.word	0x080094b1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800949c:	6839      	ldr	r1, [r7, #0]
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 fa3c 	bl	800991c <USBD_GetDescriptor>
          break;
 80094a4:	e024      	b.n	80094f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fbcb 	bl	8009c44 <USBD_SetAddress>
          break;
 80094ae:	e01f      	b.n	80094f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 fc0a 	bl	8009ccc <USBD_SetConfig>
 80094b8:	4603      	mov	r3, r0
 80094ba:	73fb      	strb	r3, [r7, #15]
          break;
 80094bc:	e018      	b.n	80094f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80094be:	6839      	ldr	r1, [r7, #0]
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fcad 	bl	8009e20 <USBD_GetConfig>
          break;
 80094c6:	e013      	b.n	80094f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80094c8:	6839      	ldr	r1, [r7, #0]
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	f000 fcde 	bl	8009e8c <USBD_GetStatus>
          break;
 80094d0:	e00e      	b.n	80094f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fd0d 	bl	8009ef4 <USBD_SetFeature>
          break;
 80094da:	e009      	b.n	80094f0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fd31 	bl	8009f46 <USBD_ClrFeature>
          break;
 80094e4:	e004      	b.n	80094f0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fd88 	bl	8009ffe <USBD_CtlError>
          break;
 80094ee:	bf00      	nop
      }
      break;
 80094f0:	e004      	b.n	80094fc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fd82 	bl	8009ffe <USBD_CtlError>
      break;
 80094fa:	bf00      	nop
  }

  return ret;
 80094fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fe:	4618      	mov	r0, r3
 8009500:	3710      	adds	r7, #16
 8009502:	46bd      	mov	sp, r7
 8009504:	bd80      	pop	{r7, pc}
 8009506:	bf00      	nop

08009508 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009512:	2300      	movs	r3, #0
 8009514:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	781b      	ldrb	r3, [r3, #0]
 800951a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800951e:	2b40      	cmp	r3, #64	; 0x40
 8009520:	d005      	beq.n	800952e <USBD_StdItfReq+0x26>
 8009522:	2b40      	cmp	r3, #64	; 0x40
 8009524:	d852      	bhi.n	80095cc <USBD_StdItfReq+0xc4>
 8009526:	2b00      	cmp	r3, #0
 8009528:	d001      	beq.n	800952e <USBD_StdItfReq+0x26>
 800952a:	2b20      	cmp	r3, #32
 800952c:	d14e      	bne.n	80095cc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009534:	b2db      	uxtb	r3, r3
 8009536:	3b01      	subs	r3, #1
 8009538:	2b02      	cmp	r3, #2
 800953a:	d840      	bhi.n	80095be <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	889b      	ldrh	r3, [r3, #4]
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b01      	cmp	r3, #1
 8009544:	d836      	bhi.n	80095b4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	889b      	ldrh	r3, [r3, #4]
 800954a:	b2db      	uxtb	r3, r3
 800954c:	4619      	mov	r1, r3
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f7ff fed9 	bl	8009306 <USBD_CoreFindIF>
 8009554:	4603      	mov	r3, r0
 8009556:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009558:	7bbb      	ldrb	r3, [r7, #14]
 800955a:	2bff      	cmp	r3, #255	; 0xff
 800955c:	d01d      	beq.n	800959a <USBD_StdItfReq+0x92>
 800955e:	7bbb      	ldrb	r3, [r7, #14]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d11a      	bne.n	800959a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009564:	7bba      	ldrb	r2, [r7, #14]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	32ae      	adds	r2, #174	; 0xae
 800956a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d00f      	beq.n	8009594 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009574:	7bba      	ldrb	r2, [r7, #14]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800957c:	7bba      	ldrb	r2, [r7, #14]
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	32ae      	adds	r2, #174	; 0xae
 8009582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	6839      	ldr	r1, [r7, #0]
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	4798      	blx	r3
 800958e:	4603      	mov	r3, r0
 8009590:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009592:	e004      	b.n	800959e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009594:	2303      	movs	r3, #3
 8009596:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009598:	e001      	b.n	800959e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800959a:	2303      	movs	r3, #3
 800959c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	88db      	ldrh	r3, [r3, #6]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d110      	bne.n	80095c8 <USBD_StdItfReq+0xc0>
 80095a6:	7bfb      	ldrb	r3, [r7, #15]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10d      	bne.n	80095c8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fdf1 	bl	800a194 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80095b2:	e009      	b.n	80095c8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f000 fd21 	bl	8009ffe <USBD_CtlError>
          break;
 80095bc:	e004      	b.n	80095c8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80095be:	6839      	ldr	r1, [r7, #0]
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fd1c 	bl	8009ffe <USBD_CtlError>
          break;
 80095c6:	e000      	b.n	80095ca <USBD_StdItfReq+0xc2>
          break;
 80095c8:	bf00      	nop
      }
      break;
 80095ca:	e004      	b.n	80095d6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80095cc:	6839      	ldr	r1, [r7, #0]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fd15 	bl	8009ffe <USBD_CtlError>
      break;
 80095d4:	bf00      	nop
  }

  return ret;
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80095ea:	2300      	movs	r3, #0
 80095ec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	889b      	ldrh	r3, [r3, #4]
 80095f2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80095fc:	2b40      	cmp	r3, #64	; 0x40
 80095fe:	d007      	beq.n	8009610 <USBD_StdEPReq+0x30>
 8009600:	2b40      	cmp	r3, #64	; 0x40
 8009602:	f200 817f 	bhi.w	8009904 <USBD_StdEPReq+0x324>
 8009606:	2b00      	cmp	r3, #0
 8009608:	d02a      	beq.n	8009660 <USBD_StdEPReq+0x80>
 800960a:	2b20      	cmp	r3, #32
 800960c:	f040 817a 	bne.w	8009904 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009610:	7bbb      	ldrb	r3, [r7, #14]
 8009612:	4619      	mov	r1, r3
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f7ff fe83 	bl	8009320 <USBD_CoreFindEP>
 800961a:	4603      	mov	r3, r0
 800961c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800961e:	7b7b      	ldrb	r3, [r7, #13]
 8009620:	2bff      	cmp	r3, #255	; 0xff
 8009622:	f000 8174 	beq.w	800990e <USBD_StdEPReq+0x32e>
 8009626:	7b7b      	ldrb	r3, [r7, #13]
 8009628:	2b00      	cmp	r3, #0
 800962a:	f040 8170 	bne.w	800990e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800962e:	7b7a      	ldrb	r2, [r7, #13]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009636:	7b7a      	ldrb	r2, [r7, #13]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	32ae      	adds	r2, #174	; 0xae
 800963c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009640:	689b      	ldr	r3, [r3, #8]
 8009642:	2b00      	cmp	r3, #0
 8009644:	f000 8163 	beq.w	800990e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009648:	7b7a      	ldrb	r2, [r7, #13]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	32ae      	adds	r2, #174	; 0xae
 800964e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	6839      	ldr	r1, [r7, #0]
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	4798      	blx	r3
 800965a:	4603      	mov	r3, r0
 800965c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800965e:	e156      	b.n	800990e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	785b      	ldrb	r3, [r3, #1]
 8009664:	2b03      	cmp	r3, #3
 8009666:	d008      	beq.n	800967a <USBD_StdEPReq+0x9a>
 8009668:	2b03      	cmp	r3, #3
 800966a:	f300 8145 	bgt.w	80098f8 <USBD_StdEPReq+0x318>
 800966e:	2b00      	cmp	r3, #0
 8009670:	f000 809b 	beq.w	80097aa <USBD_StdEPReq+0x1ca>
 8009674:	2b01      	cmp	r3, #1
 8009676:	d03c      	beq.n	80096f2 <USBD_StdEPReq+0x112>
 8009678:	e13e      	b.n	80098f8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009680:	b2db      	uxtb	r3, r3
 8009682:	2b02      	cmp	r3, #2
 8009684:	d002      	beq.n	800968c <USBD_StdEPReq+0xac>
 8009686:	2b03      	cmp	r3, #3
 8009688:	d016      	beq.n	80096b8 <USBD_StdEPReq+0xd8>
 800968a:	e02c      	b.n	80096e6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800968c:	7bbb      	ldrb	r3, [r7, #14]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00d      	beq.n	80096ae <USBD_StdEPReq+0xce>
 8009692:	7bbb      	ldrb	r3, [r7, #14]
 8009694:	2b80      	cmp	r3, #128	; 0x80
 8009696:	d00a      	beq.n	80096ae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009698:	7bbb      	ldrb	r3, [r7, #14]
 800969a:	4619      	mov	r1, r3
 800969c:	6878      	ldr	r0, [r7, #4]
 800969e:	f001 f9c1 	bl	800aa24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80096a2:	2180      	movs	r1, #128	; 0x80
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f001 f9bd 	bl	800aa24 <USBD_LL_StallEP>
 80096aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80096ac:	e020      	b.n	80096f0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80096ae:	6839      	ldr	r1, [r7, #0]
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fca4 	bl	8009ffe <USBD_CtlError>
              break;
 80096b6:	e01b      	b.n	80096f0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	885b      	ldrh	r3, [r3, #2]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10e      	bne.n	80096de <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80096c0:	7bbb      	ldrb	r3, [r7, #14]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00b      	beq.n	80096de <USBD_StdEPReq+0xfe>
 80096c6:	7bbb      	ldrb	r3, [r7, #14]
 80096c8:	2b80      	cmp	r3, #128	; 0x80
 80096ca:	d008      	beq.n	80096de <USBD_StdEPReq+0xfe>
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	88db      	ldrh	r3, [r3, #6]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d104      	bne.n	80096de <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80096d4:	7bbb      	ldrb	r3, [r7, #14]
 80096d6:	4619      	mov	r1, r3
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f001 f9a3 	bl	800aa24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 fd58 	bl	800a194 <USBD_CtlSendStatus>

              break;
 80096e4:	e004      	b.n	80096f0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80096e6:	6839      	ldr	r1, [r7, #0]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f000 fc88 	bl	8009ffe <USBD_CtlError>
              break;
 80096ee:	bf00      	nop
          }
          break;
 80096f0:	e107      	b.n	8009902 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d002      	beq.n	8009704 <USBD_StdEPReq+0x124>
 80096fe:	2b03      	cmp	r3, #3
 8009700:	d016      	beq.n	8009730 <USBD_StdEPReq+0x150>
 8009702:	e04b      	b.n	800979c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009704:	7bbb      	ldrb	r3, [r7, #14]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00d      	beq.n	8009726 <USBD_StdEPReq+0x146>
 800970a:	7bbb      	ldrb	r3, [r7, #14]
 800970c:	2b80      	cmp	r3, #128	; 0x80
 800970e:	d00a      	beq.n	8009726 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009710:	7bbb      	ldrb	r3, [r7, #14]
 8009712:	4619      	mov	r1, r3
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f001 f985 	bl	800aa24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800971a:	2180      	movs	r1, #128	; 0x80
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f001 f981 	bl	800aa24 <USBD_LL_StallEP>
 8009722:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009724:	e040      	b.n	80097a8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009726:	6839      	ldr	r1, [r7, #0]
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fc68 	bl	8009ffe <USBD_CtlError>
              break;
 800972e:	e03b      	b.n	80097a8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	885b      	ldrh	r3, [r3, #2]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d136      	bne.n	80097a6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009738:	7bbb      	ldrb	r3, [r7, #14]
 800973a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800973e:	2b00      	cmp	r3, #0
 8009740:	d004      	beq.n	800974c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009742:	7bbb      	ldrb	r3, [r7, #14]
 8009744:	4619      	mov	r1, r3
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f001 f9a2 	bl	800aa90 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fd21 	bl	800a194 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009752:	7bbb      	ldrb	r3, [r7, #14]
 8009754:	4619      	mov	r1, r3
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f7ff fde2 	bl	8009320 <USBD_CoreFindEP>
 800975c:	4603      	mov	r3, r0
 800975e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009760:	7b7b      	ldrb	r3, [r7, #13]
 8009762:	2bff      	cmp	r3, #255	; 0xff
 8009764:	d01f      	beq.n	80097a6 <USBD_StdEPReq+0x1c6>
 8009766:	7b7b      	ldrb	r3, [r7, #13]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d11c      	bne.n	80097a6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800976c:	7b7a      	ldrb	r2, [r7, #13]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009774:	7b7a      	ldrb	r2, [r7, #13]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	32ae      	adds	r2, #174	; 0xae
 800977a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d010      	beq.n	80097a6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009784:	7b7a      	ldrb	r2, [r7, #13]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	32ae      	adds	r2, #174	; 0xae
 800978a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	6839      	ldr	r1, [r7, #0]
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	4798      	blx	r3
 8009796:	4603      	mov	r3, r0
 8009798:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800979a:	e004      	b.n	80097a6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800979c:	6839      	ldr	r1, [r7, #0]
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 fc2d 	bl	8009ffe <USBD_CtlError>
              break;
 80097a4:	e000      	b.n	80097a8 <USBD_StdEPReq+0x1c8>
              break;
 80097a6:	bf00      	nop
          }
          break;
 80097a8:	e0ab      	b.n	8009902 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d002      	beq.n	80097bc <USBD_StdEPReq+0x1dc>
 80097b6:	2b03      	cmp	r3, #3
 80097b8:	d032      	beq.n	8009820 <USBD_StdEPReq+0x240>
 80097ba:	e097      	b.n	80098ec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80097bc:	7bbb      	ldrb	r3, [r7, #14]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d007      	beq.n	80097d2 <USBD_StdEPReq+0x1f2>
 80097c2:	7bbb      	ldrb	r3, [r7, #14]
 80097c4:	2b80      	cmp	r3, #128	; 0x80
 80097c6:	d004      	beq.n	80097d2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fc17 	bl	8009ffe <USBD_CtlError>
                break;
 80097d0:	e091      	b.n	80098f6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	da0b      	bge.n	80097f2 <USBD_StdEPReq+0x212>
 80097da:	7bbb      	ldrb	r3, [r7, #14]
 80097dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097e0:	4613      	mov	r3, r2
 80097e2:	009b      	lsls	r3, r3, #2
 80097e4:	4413      	add	r3, r2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	3310      	adds	r3, #16
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	4413      	add	r3, r2
 80097ee:	3304      	adds	r3, #4
 80097f0:	e00b      	b.n	800980a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80097f2:	7bbb      	ldrb	r3, [r7, #14]
 80097f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80097f8:	4613      	mov	r3, r2
 80097fa:	009b      	lsls	r3, r3, #2
 80097fc:	4413      	add	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	4413      	add	r3, r2
 8009808:	3304      	adds	r3, #4
 800980a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	2200      	movs	r2, #0
 8009810:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	2202      	movs	r2, #2
 8009816:	4619      	mov	r1, r3
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fc61 	bl	800a0e0 <USBD_CtlSendData>
              break;
 800981e:	e06a      	b.n	80098f6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009824:	2b00      	cmp	r3, #0
 8009826:	da11      	bge.n	800984c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009828:	7bbb      	ldrb	r3, [r7, #14]
 800982a:	f003 020f 	and.w	r2, r3, #15
 800982e:	6879      	ldr	r1, [r7, #4]
 8009830:	4613      	mov	r3, r2
 8009832:	009b      	lsls	r3, r3, #2
 8009834:	4413      	add	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	440b      	add	r3, r1
 800983a:	3324      	adds	r3, #36	; 0x24
 800983c:	881b      	ldrh	r3, [r3, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d117      	bne.n	8009872 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009842:	6839      	ldr	r1, [r7, #0]
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 fbda 	bl	8009ffe <USBD_CtlError>
                  break;
 800984a:	e054      	b.n	80098f6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800984c:	7bbb      	ldrb	r3, [r7, #14]
 800984e:	f003 020f 	and.w	r2, r3, #15
 8009852:	6879      	ldr	r1, [r7, #4]
 8009854:	4613      	mov	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	4413      	add	r3, r2
 800985a:	009b      	lsls	r3, r3, #2
 800985c:	440b      	add	r3, r1
 800985e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d104      	bne.n	8009872 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009868:	6839      	ldr	r1, [r7, #0]
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fbc7 	bl	8009ffe <USBD_CtlError>
                  break;
 8009870:	e041      	b.n	80098f6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009872:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009876:	2b00      	cmp	r3, #0
 8009878:	da0b      	bge.n	8009892 <USBD_StdEPReq+0x2b2>
 800987a:	7bbb      	ldrb	r3, [r7, #14]
 800987c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009880:	4613      	mov	r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4413      	add	r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	3310      	adds	r3, #16
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	4413      	add	r3, r2
 800988e:	3304      	adds	r3, #4
 8009890:	e00b      	b.n	80098aa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009892:	7bbb      	ldrb	r3, [r7, #14]
 8009894:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009898:	4613      	mov	r3, r2
 800989a:	009b      	lsls	r3, r3, #2
 800989c:	4413      	add	r3, r2
 800989e:	009b      	lsls	r3, r3, #2
 80098a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80098a4:	687a      	ldr	r2, [r7, #4]
 80098a6:	4413      	add	r3, r2
 80098a8:	3304      	adds	r3, #4
 80098aa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80098ac:	7bbb      	ldrb	r3, [r7, #14]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <USBD_StdEPReq+0x2d8>
 80098b2:	7bbb      	ldrb	r3, [r7, #14]
 80098b4:	2b80      	cmp	r3, #128	; 0x80
 80098b6:	d103      	bne.n	80098c0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	2200      	movs	r2, #0
 80098bc:	601a      	str	r2, [r3, #0]
 80098be:	e00e      	b.n	80098de <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80098c0:	7bbb      	ldrb	r3, [r7, #14]
 80098c2:	4619      	mov	r1, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f001 f919 	bl	800aafc <USBD_LL_IsStallEP>
 80098ca:	4603      	mov	r3, r0
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d003      	beq.n	80098d8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	2201      	movs	r2, #1
 80098d4:	601a      	str	r2, [r3, #0]
 80098d6:	e002      	b.n	80098de <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	2200      	movs	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80098de:	68bb      	ldr	r3, [r7, #8]
 80098e0:	2202      	movs	r2, #2
 80098e2:	4619      	mov	r1, r3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 fbfb 	bl	800a0e0 <USBD_CtlSendData>
              break;
 80098ea:	e004      	b.n	80098f6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fb85 	bl	8009ffe <USBD_CtlError>
              break;
 80098f4:	bf00      	nop
          }
          break;
 80098f6:	e004      	b.n	8009902 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80098f8:	6839      	ldr	r1, [r7, #0]
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fb7f 	bl	8009ffe <USBD_CtlError>
          break;
 8009900:	bf00      	nop
      }
      break;
 8009902:	e005      	b.n	8009910 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009904:	6839      	ldr	r1, [r7, #0]
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 fb79 	bl	8009ffe <USBD_CtlError>
      break;
 800990c:	e000      	b.n	8009910 <USBD_StdEPReq+0x330>
      break;
 800990e:	bf00      	nop
  }

  return ret;
 8009910:	7bfb      	ldrb	r3, [r7, #15]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3710      	adds	r7, #16
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
	...

0800991c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b084      	sub	sp, #16
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009926:	2300      	movs	r3, #0
 8009928:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800992a:	2300      	movs	r3, #0
 800992c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800992e:	2300      	movs	r3, #0
 8009930:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	885b      	ldrh	r3, [r3, #2]
 8009936:	0a1b      	lsrs	r3, r3, #8
 8009938:	b29b      	uxth	r3, r3
 800993a:	3b01      	subs	r3, #1
 800993c:	2b0e      	cmp	r3, #14
 800993e:	f200 8152 	bhi.w	8009be6 <USBD_GetDescriptor+0x2ca>
 8009942:	a201      	add	r2, pc, #4	; (adr r2, 8009948 <USBD_GetDescriptor+0x2c>)
 8009944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009948:	080099b9 	.word	0x080099b9
 800994c:	080099d1 	.word	0x080099d1
 8009950:	08009a11 	.word	0x08009a11
 8009954:	08009be7 	.word	0x08009be7
 8009958:	08009be7 	.word	0x08009be7
 800995c:	08009b87 	.word	0x08009b87
 8009960:	08009bb3 	.word	0x08009bb3
 8009964:	08009be7 	.word	0x08009be7
 8009968:	08009be7 	.word	0x08009be7
 800996c:	08009be7 	.word	0x08009be7
 8009970:	08009be7 	.word	0x08009be7
 8009974:	08009be7 	.word	0x08009be7
 8009978:	08009be7 	.word	0x08009be7
 800997c:	08009be7 	.word	0x08009be7
 8009980:	08009985 	.word	0x08009985
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800998a:	69db      	ldr	r3, [r3, #28]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d00b      	beq.n	80099a8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	7c12      	ldrb	r2, [r2, #16]
 800999c:	f107 0108 	add.w	r1, r7, #8
 80099a0:	4610      	mov	r0, r2
 80099a2:	4798      	blx	r3
 80099a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099a6:	e126      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 fb27 	bl	8009ffe <USBD_CtlError>
        err++;
 80099b0:	7afb      	ldrb	r3, [r7, #11]
 80099b2:	3301      	adds	r3, #1
 80099b4:	72fb      	strb	r3, [r7, #11]
      break;
 80099b6:	e11e      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	7c12      	ldrb	r2, [r2, #16]
 80099c4:	f107 0108 	add.w	r1, r7, #8
 80099c8:	4610      	mov	r0, r2
 80099ca:	4798      	blx	r3
 80099cc:	60f8      	str	r0, [r7, #12]
      break;
 80099ce:	e112      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	7c1b      	ldrb	r3, [r3, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d10d      	bne.n	80099f4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e0:	f107 0208 	add.w	r2, r7, #8
 80099e4:	4610      	mov	r0, r2
 80099e6:	4798      	blx	r3
 80099e8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	3301      	adds	r3, #1
 80099ee:	2202      	movs	r2, #2
 80099f0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80099f2:	e100      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099fc:	f107 0208 	add.w	r2, r7, #8
 8009a00:	4610      	mov	r0, r2
 8009a02:	4798      	blx	r3
 8009a04:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	2202      	movs	r2, #2
 8009a0c:	701a      	strb	r2, [r3, #0]
      break;
 8009a0e:	e0f2      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	885b      	ldrh	r3, [r3, #2]
 8009a14:	b2db      	uxtb	r3, r3
 8009a16:	2b05      	cmp	r3, #5
 8009a18:	f200 80ac 	bhi.w	8009b74 <USBD_GetDescriptor+0x258>
 8009a1c:	a201      	add	r2, pc, #4	; (adr r2, 8009a24 <USBD_GetDescriptor+0x108>)
 8009a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a22:	bf00      	nop
 8009a24:	08009a3d 	.word	0x08009a3d
 8009a28:	08009a71 	.word	0x08009a71
 8009a2c:	08009aa5 	.word	0x08009aa5
 8009a30:	08009ad9 	.word	0x08009ad9
 8009a34:	08009b0d 	.word	0x08009b0d
 8009a38:	08009b41 	.word	0x08009b41
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d00b      	beq.n	8009a60 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	7c12      	ldrb	r2, [r2, #16]
 8009a54:	f107 0108 	add.w	r1, r7, #8
 8009a58:	4610      	mov	r0, r2
 8009a5a:	4798      	blx	r3
 8009a5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a5e:	e091      	b.n	8009b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a60:	6839      	ldr	r1, [r7, #0]
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f000 facb 	bl	8009ffe <USBD_CtlError>
            err++;
 8009a68:	7afb      	ldrb	r3, [r7, #11]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a6e:	e089      	b.n	8009b84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00b      	beq.n	8009a94 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009a82:	689b      	ldr	r3, [r3, #8]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	7c12      	ldrb	r2, [r2, #16]
 8009a88:	f107 0108 	add.w	r1, r7, #8
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	4798      	blx	r3
 8009a90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009a92:	e077      	b.n	8009b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f000 fab1 	bl	8009ffe <USBD_CtlError>
            err++;
 8009a9c:	7afb      	ldrb	r3, [r7, #11]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	72fb      	strb	r3, [r7, #11]
          break;
 8009aa2:	e06f      	b.n	8009b84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00b      	beq.n	8009ac8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	7c12      	ldrb	r2, [r2, #16]
 8009abc:	f107 0108 	add.w	r1, r7, #8
 8009ac0:	4610      	mov	r0, r2
 8009ac2:	4798      	blx	r3
 8009ac4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009ac6:	e05d      	b.n	8009b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009ac8:	6839      	ldr	r1, [r7, #0]
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f000 fa97 	bl	8009ffe <USBD_CtlError>
            err++;
 8009ad0:	7afb      	ldrb	r3, [r7, #11]
 8009ad2:	3301      	adds	r3, #1
 8009ad4:	72fb      	strb	r3, [r7, #11]
          break;
 8009ad6:	e055      	b.n	8009b84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009ade:	691b      	ldr	r3, [r3, #16]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d00b      	beq.n	8009afc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	7c12      	ldrb	r2, [r2, #16]
 8009af0:	f107 0108 	add.w	r1, r7, #8
 8009af4:	4610      	mov	r0, r2
 8009af6:	4798      	blx	r3
 8009af8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009afa:	e043      	b.n	8009b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fa7d 	bl	8009ffe <USBD_CtlError>
            err++;
 8009b04:	7afb      	ldrb	r3, [r7, #11]
 8009b06:	3301      	adds	r3, #1
 8009b08:	72fb      	strb	r3, [r7, #11]
          break;
 8009b0a:	e03b      	b.n	8009b84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b12:	695b      	ldr	r3, [r3, #20]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d00b      	beq.n	8009b30 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b1e:	695b      	ldr	r3, [r3, #20]
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	7c12      	ldrb	r2, [r2, #16]
 8009b24:	f107 0108 	add.w	r1, r7, #8
 8009b28:	4610      	mov	r0, r2
 8009b2a:	4798      	blx	r3
 8009b2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b2e:	e029      	b.n	8009b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b30:	6839      	ldr	r1, [r7, #0]
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 fa63 	bl	8009ffe <USBD_CtlError>
            err++;
 8009b38:	7afb      	ldrb	r3, [r7, #11]
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	72fb      	strb	r3, [r7, #11]
          break;
 8009b3e:	e021      	b.n	8009b84 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d00b      	beq.n	8009b64 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	7c12      	ldrb	r2, [r2, #16]
 8009b58:	f107 0108 	add.w	r1, r7, #8
 8009b5c:	4610      	mov	r0, r2
 8009b5e:	4798      	blx	r3
 8009b60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009b62:	e00f      	b.n	8009b84 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fa49 	bl	8009ffe <USBD_CtlError>
            err++;
 8009b6c:	7afb      	ldrb	r3, [r7, #11]
 8009b6e:	3301      	adds	r3, #1
 8009b70:	72fb      	strb	r3, [r7, #11]
          break;
 8009b72:	e007      	b.n	8009b84 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fa41 	bl	8009ffe <USBD_CtlError>
          err++;
 8009b7c:	7afb      	ldrb	r3, [r7, #11]
 8009b7e:	3301      	adds	r3, #1
 8009b80:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009b82:	bf00      	nop
      }
      break;
 8009b84:	e037      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	7c1b      	ldrb	r3, [r3, #16]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d109      	bne.n	8009ba2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b96:	f107 0208 	add.w	r2, r7, #8
 8009b9a:	4610      	mov	r0, r2
 8009b9c:	4798      	blx	r3
 8009b9e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009ba0:	e029      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f000 fa2a 	bl	8009ffe <USBD_CtlError>
        err++;
 8009baa:	7afb      	ldrb	r3, [r7, #11]
 8009bac:	3301      	adds	r3, #1
 8009bae:	72fb      	strb	r3, [r7, #11]
      break;
 8009bb0:	e021      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	7c1b      	ldrb	r3, [r3, #16]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d10d      	bne.n	8009bd6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc2:	f107 0208 	add.w	r2, r7, #8
 8009bc6:	4610      	mov	r0, r2
 8009bc8:	4798      	blx	r3
 8009bca:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	2207      	movs	r2, #7
 8009bd2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009bd4:	e00f      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8009bd6:	6839      	ldr	r1, [r7, #0]
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fa10 	bl	8009ffe <USBD_CtlError>
        err++;
 8009bde:	7afb      	ldrb	r3, [r7, #11]
 8009be0:	3301      	adds	r3, #1
 8009be2:	72fb      	strb	r3, [r7, #11]
      break;
 8009be4:	e007      	b.n	8009bf6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8009be6:	6839      	ldr	r1, [r7, #0]
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fa08 	bl	8009ffe <USBD_CtlError>
      err++;
 8009bee:	7afb      	ldrb	r3, [r7, #11]
 8009bf0:	3301      	adds	r3, #1
 8009bf2:	72fb      	strb	r3, [r7, #11]
      break;
 8009bf4:	bf00      	nop
  }

  if (err != 0U)
 8009bf6:	7afb      	ldrb	r3, [r7, #11]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d11e      	bne.n	8009c3a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	88db      	ldrh	r3, [r3, #6]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d016      	beq.n	8009c32 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009c04:	893b      	ldrh	r3, [r7, #8]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d00e      	beq.n	8009c28 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	88da      	ldrh	r2, [r3, #6]
 8009c0e:	893b      	ldrh	r3, [r7, #8]
 8009c10:	4293      	cmp	r3, r2
 8009c12:	bf28      	it	cs
 8009c14:	4613      	movcs	r3, r2
 8009c16:	b29b      	uxth	r3, r3
 8009c18:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009c1a:	893b      	ldrh	r3, [r7, #8]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	68f9      	ldr	r1, [r7, #12]
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fa5d 	bl	800a0e0 <USBD_CtlSendData>
 8009c26:	e009      	b.n	8009c3c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009c28:	6839      	ldr	r1, [r7, #0]
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 f9e7 	bl	8009ffe <USBD_CtlError>
 8009c30:	e004      	b.n	8009c3c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 faae 	bl	800a194 <USBD_CtlSendStatus>
 8009c38:	e000      	b.n	8009c3c <USBD_GetDescriptor+0x320>
    return;
 8009c3a:	bf00      	nop
  }
}
 8009c3c:	3710      	adds	r7, #16
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop

08009c44 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	889b      	ldrh	r3, [r3, #4]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d131      	bne.n	8009cba <USBD_SetAddress+0x76>
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	88db      	ldrh	r3, [r3, #6]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d12d      	bne.n	8009cba <USBD_SetAddress+0x76>
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	885b      	ldrh	r3, [r3, #2]
 8009c62:	2b7f      	cmp	r3, #127	; 0x7f
 8009c64:	d829      	bhi.n	8009cba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	885b      	ldrh	r3, [r3, #2]
 8009c6a:	b2db      	uxtb	r3, r3
 8009c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c70:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c78:	b2db      	uxtb	r3, r3
 8009c7a:	2b03      	cmp	r3, #3
 8009c7c:	d104      	bne.n	8009c88 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009c7e:	6839      	ldr	r1, [r7, #0]
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 f9bc 	bl	8009ffe <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c86:	e01d      	b.n	8009cc4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	7bfa      	ldrb	r2, [r7, #15]
 8009c8c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009c90:	7bfb      	ldrb	r3, [r7, #15]
 8009c92:	4619      	mov	r1, r3
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 ff5d 	bl	800ab54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fa7a 	bl	800a194 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ca0:	7bfb      	ldrb	r3, [r7, #15]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d004      	beq.n	8009cb0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2202      	movs	r2, #2
 8009caa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cae:	e009      	b.n	8009cc4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009cb8:	e004      	b.n	8009cc4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009cba:	6839      	ldr	r1, [r7, #0]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f99e 	bl	8009ffe <USBD_CtlError>
  }
}
 8009cc2:	bf00      	nop
 8009cc4:	bf00      	nop
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
 8009cd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	885b      	ldrh	r3, [r3, #2]
 8009cde:	b2da      	uxtb	r2, r3
 8009ce0:	4b4e      	ldr	r3, [pc, #312]	; (8009e1c <USBD_SetConfig+0x150>)
 8009ce2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ce4:	4b4d      	ldr	r3, [pc, #308]	; (8009e1c <USBD_SetConfig+0x150>)
 8009ce6:	781b      	ldrb	r3, [r3, #0]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d905      	bls.n	8009cf8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009cec:	6839      	ldr	r1, [r7, #0]
 8009cee:	6878      	ldr	r0, [r7, #4]
 8009cf0:	f000 f985 	bl	8009ffe <USBD_CtlError>
    return USBD_FAIL;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	e08c      	b.n	8009e12 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	2b02      	cmp	r3, #2
 8009d02:	d002      	beq.n	8009d0a <USBD_SetConfig+0x3e>
 8009d04:	2b03      	cmp	r3, #3
 8009d06:	d029      	beq.n	8009d5c <USBD_SetConfig+0x90>
 8009d08:	e075      	b.n	8009df6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009d0a:	4b44      	ldr	r3, [pc, #272]	; (8009e1c <USBD_SetConfig+0x150>)
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d020      	beq.n	8009d54 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009d12:	4b42      	ldr	r3, [pc, #264]	; (8009e1c <USBD_SetConfig+0x150>)
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	461a      	mov	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009d1c:	4b3f      	ldr	r3, [pc, #252]	; (8009e1c <USBD_SetConfig+0x150>)
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7fe ffb7 	bl	8008c96 <USBD_SetClassConfig>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009d2c:	7bfb      	ldrb	r3, [r7, #15]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d008      	beq.n	8009d44 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009d32:	6839      	ldr	r1, [r7, #0]
 8009d34:	6878      	ldr	r0, [r7, #4]
 8009d36:	f000 f962 	bl	8009ffe <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2202      	movs	r2, #2
 8009d3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d42:	e065      	b.n	8009e10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fa25 	bl	800a194 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2203      	movs	r2, #3
 8009d4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009d52:	e05d      	b.n	8009e10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fa1d 	bl	800a194 <USBD_CtlSendStatus>
      break;
 8009d5a:	e059      	b.n	8009e10 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009d5c:	4b2f      	ldr	r3, [pc, #188]	; (8009e1c <USBD_SetConfig+0x150>)
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d112      	bne.n	8009d8a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2202      	movs	r2, #2
 8009d68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009d6c:	4b2b      	ldr	r3, [pc, #172]	; (8009e1c <USBD_SetConfig+0x150>)
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	461a      	mov	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009d76:	4b29      	ldr	r3, [pc, #164]	; (8009e1c <USBD_SetConfig+0x150>)
 8009d78:	781b      	ldrb	r3, [r3, #0]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7fe ffa6 	bl	8008cce <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f000 fa06 	bl	800a194 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009d88:	e042      	b.n	8009e10 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009d8a:	4b24      	ldr	r3, [pc, #144]	; (8009e1c <USBD_SetConfig+0x150>)
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	461a      	mov	r2, r3
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d02a      	beq.n	8009dee <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	4619      	mov	r1, r3
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f7fe ff94 	bl	8008cce <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009da6:	4b1d      	ldr	r3, [pc, #116]	; (8009e1c <USBD_SetConfig+0x150>)
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	461a      	mov	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009db0:	4b1a      	ldr	r3, [pc, #104]	; (8009e1c <USBD_SetConfig+0x150>)
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f7fe ff6d 	bl	8008c96 <USBD_SetClassConfig>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00f      	beq.n	8009de6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009dc6:	6839      	ldr	r1, [r7, #0]
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f918 	bl	8009ffe <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f7fe ff79 	bl	8008cce <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2202      	movs	r2, #2
 8009de0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009de4:	e014      	b.n	8009e10 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f9d4 	bl	800a194 <USBD_CtlSendStatus>
      break;
 8009dec:	e010      	b.n	8009e10 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 f9d0 	bl	800a194 <USBD_CtlSendStatus>
      break;
 8009df4:	e00c      	b.n	8009e10 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009df6:	6839      	ldr	r1, [r7, #0]
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f900 	bl	8009ffe <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009dfe:	4b07      	ldr	r3, [pc, #28]	; (8009e1c <USBD_SetConfig+0x150>)
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	4619      	mov	r1, r3
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f7fe ff62 	bl	8008cce <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e0e:	bf00      	nop
  }

  return ret;
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3710      	adds	r7, #16
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	200005c8 	.word	0x200005c8

08009e20 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	88db      	ldrh	r3, [r3, #6]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d004      	beq.n	8009e3c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009e32:	6839      	ldr	r1, [r7, #0]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f8e2 	bl	8009ffe <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009e3a:	e023      	b.n	8009e84 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e42:	b2db      	uxtb	r3, r3
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	dc02      	bgt.n	8009e4e <USBD_GetConfig+0x2e>
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	dc03      	bgt.n	8009e54 <USBD_GetConfig+0x34>
 8009e4c:	e015      	b.n	8009e7a <USBD_GetConfig+0x5a>
 8009e4e:	2b03      	cmp	r3, #3
 8009e50:	d00b      	beq.n	8009e6a <USBD_GetConfig+0x4a>
 8009e52:	e012      	b.n	8009e7a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2200      	movs	r2, #0
 8009e58:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	3308      	adds	r3, #8
 8009e5e:	2201      	movs	r2, #1
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f000 f93c 	bl	800a0e0 <USBD_CtlSendData>
        break;
 8009e68:	e00c      	b.n	8009e84 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	2201      	movs	r2, #1
 8009e70:	4619      	mov	r1, r3
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f934 	bl	800a0e0 <USBD_CtlSendData>
        break;
 8009e78:	e004      	b.n	8009e84 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009e7a:	6839      	ldr	r1, [r7, #0]
 8009e7c:	6878      	ldr	r0, [r7, #4]
 8009e7e:	f000 f8be 	bl	8009ffe <USBD_CtlError>
        break;
 8009e82:	bf00      	nop
}
 8009e84:	bf00      	nop
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	3b01      	subs	r3, #1
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d81e      	bhi.n	8009ee2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	88db      	ldrh	r3, [r3, #6]
 8009ea8:	2b02      	cmp	r3, #2
 8009eaa:	d004      	beq.n	8009eb6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 f8a5 	bl	8009ffe <USBD_CtlError>
        break;
 8009eb4:	e01a      	b.n	8009eec <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	2201      	movs	r2, #1
 8009eba:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d005      	beq.n	8009ed2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	68db      	ldr	r3, [r3, #12]
 8009eca:	f043 0202 	orr.w	r2, r3, #2
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	330c      	adds	r3, #12
 8009ed6:	2202      	movs	r2, #2
 8009ed8:	4619      	mov	r1, r3
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f900 	bl	800a0e0 <USBD_CtlSendData>
      break;
 8009ee0:	e004      	b.n	8009eec <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f88a 	bl	8009ffe <USBD_CtlError>
      break;
 8009eea:	bf00      	nop
  }
}
 8009eec:	bf00      	nop
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b082      	sub	sp, #8
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	885b      	ldrh	r3, [r3, #2]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d107      	bne.n	8009f16 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f940 	bl	800a194 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009f14:	e013      	b.n	8009f3e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	885b      	ldrh	r3, [r3, #2]
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d10b      	bne.n	8009f36 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	889b      	ldrh	r3, [r3, #4]
 8009f22:	0a1b      	lsrs	r3, r3, #8
 8009f24:	b29b      	uxth	r3, r3
 8009f26:	b2da      	uxtb	r2, r3
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f930 	bl	800a194 <USBD_CtlSendStatus>
}
 8009f34:	e003      	b.n	8009f3e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009f36:	6839      	ldr	r1, [r7, #0]
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 f860 	bl	8009ffe <USBD_CtlError>
}
 8009f3e:	bf00      	nop
 8009f40:	3708      	adds	r7, #8
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b082      	sub	sp, #8
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f56:	b2db      	uxtb	r3, r3
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d80b      	bhi.n	8009f76 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	885b      	ldrh	r3, [r3, #2]
 8009f62:	2b01      	cmp	r3, #1
 8009f64:	d10c      	bne.n	8009f80 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	2200      	movs	r2, #0
 8009f6a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f910 	bl	800a194 <USBD_CtlSendStatus>
      }
      break;
 8009f74:	e004      	b.n	8009f80 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009f76:	6839      	ldr	r1, [r7, #0]
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f000 f840 	bl	8009ffe <USBD_CtlError>
      break;
 8009f7e:	e000      	b.n	8009f82 <USBD_ClrFeature+0x3c>
      break;
 8009f80:	bf00      	nop
  }
}
 8009f82:	bf00      	nop
 8009f84:	3708      	adds	r7, #8
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	781a      	ldrb	r2, [r3, #0]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	781a      	ldrb	r2, [r3, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f7ff fa17 	bl	80093e8 <SWAPBYTE>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f7ff fa0a 	bl	80093e8 <SWAPBYTE>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	3301      	adds	r3, #1
 8009fe6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f7ff f9fd 	bl	80093e8 <SWAPBYTE>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	80da      	strh	r2, [r3, #6]
}
 8009ff6:	bf00      	nop
 8009ff8:	3710      	adds	r7, #16
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ffe:	b580      	push	{r7, lr}
 800a000:	b082      	sub	sp, #8
 800a002:	af00      	add	r7, sp, #0
 800a004:	6078      	str	r0, [r7, #4]
 800a006:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a008:	2180      	movs	r1, #128	; 0x80
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f000 fd0a 	bl	800aa24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a010:	2100      	movs	r1, #0
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f000 fd06 	bl	800aa24 <USBD_LL_StallEP>
}
 800a018:	bf00      	nop
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a02c:	2300      	movs	r3, #0
 800a02e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d036      	beq.n	800a0a4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a03a:	6938      	ldr	r0, [r7, #16]
 800a03c:	f000 f836 	bl	800a0ac <USBD_GetLen>
 800a040:	4603      	mov	r3, r0
 800a042:	3301      	adds	r3, #1
 800a044:	b29b      	uxth	r3, r3
 800a046:	005b      	lsls	r3, r3, #1
 800a048:	b29a      	uxth	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a04e:	7dfb      	ldrb	r3, [r7, #23]
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	4413      	add	r3, r2
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	7812      	ldrb	r2, [r2, #0]
 800a058:	701a      	strb	r2, [r3, #0]
  idx++;
 800a05a:	7dfb      	ldrb	r3, [r7, #23]
 800a05c:	3301      	adds	r3, #1
 800a05e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a060:	7dfb      	ldrb	r3, [r7, #23]
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	4413      	add	r3, r2
 800a066:	2203      	movs	r2, #3
 800a068:	701a      	strb	r2, [r3, #0]
  idx++;
 800a06a:	7dfb      	ldrb	r3, [r7, #23]
 800a06c:	3301      	adds	r3, #1
 800a06e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a070:	e013      	b.n	800a09a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a072:	7dfb      	ldrb	r3, [r7, #23]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	4413      	add	r3, r2
 800a078:	693a      	ldr	r2, [r7, #16]
 800a07a:	7812      	ldrb	r2, [r2, #0]
 800a07c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a07e:	693b      	ldr	r3, [r7, #16]
 800a080:	3301      	adds	r3, #1
 800a082:	613b      	str	r3, [r7, #16]
    idx++;
 800a084:	7dfb      	ldrb	r3, [r7, #23]
 800a086:	3301      	adds	r3, #1
 800a088:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a08a:	7dfb      	ldrb	r3, [r7, #23]
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	4413      	add	r3, r2
 800a090:	2200      	movs	r2, #0
 800a092:	701a      	strb	r2, [r3, #0]
    idx++;
 800a094:	7dfb      	ldrb	r3, [r7, #23]
 800a096:	3301      	adds	r3, #1
 800a098:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	781b      	ldrb	r3, [r3, #0]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d1e7      	bne.n	800a072 <USBD_GetString+0x52>
 800a0a2:	e000      	b.n	800a0a6 <USBD_GetString+0x86>
    return;
 800a0a4:	bf00      	nop
  }
}
 800a0a6:	3718      	adds	r7, #24
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	bd80      	pop	{r7, pc}

0800a0ac <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b085      	sub	sp, #20
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a0bc:	e005      	b.n	800a0ca <USBD_GetLen+0x1e>
  {
    len++;
 800a0be:	7bfb      	ldrb	r3, [r7, #15]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	781b      	ldrb	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1f5      	bne.n	800a0be <USBD_GetLen+0x12>
  }

  return len;
 800a0d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	3714      	adds	r7, #20
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b084      	sub	sp, #16
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	60f8      	str	r0, [r7, #12]
 800a0e8:	60b9      	str	r1, [r7, #8]
 800a0ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	687a      	ldr	r2, [r7, #4]
 800a0fe:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	2100      	movs	r1, #0
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f000 fd5a 	bl	800abc0 <USBD_LL_Transmit>

  return USBD_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	60f8      	str	r0, [r7, #12]
 800a11e:	60b9      	str	r1, [r7, #8]
 800a120:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	68ba      	ldr	r2, [r7, #8]
 800a126:	2100      	movs	r1, #0
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f000 fd49 	bl	800abc0 <USBD_LL_Transmit>

  return USBD_OK;
 800a12e:	2300      	movs	r3, #0
}
 800a130:	4618      	mov	r0, r3
 800a132:	3710      	adds	r7, #16
 800a134:	46bd      	mov	sp, r7
 800a136:	bd80      	pop	{r7, pc}

0800a138 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	60f8      	str	r0, [r7, #12]
 800a140:	60b9      	str	r1, [r7, #8]
 800a142:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	2203      	movs	r2, #3
 800a148:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	687a      	ldr	r2, [r7, #4]
 800a150:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	2100      	movs	r1, #0
 800a162:	68f8      	ldr	r0, [r7, #12]
 800a164:	f000 fd64 	bl	800ac30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a168:	2300      	movs	r3, #0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3710      	adds	r7, #16
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b084      	sub	sp, #16
 800a176:	af00      	add	r7, sp, #0
 800a178:	60f8      	str	r0, [r7, #12]
 800a17a:	60b9      	str	r1, [r7, #8]
 800a17c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	2100      	movs	r1, #0
 800a184:	68f8      	ldr	r0, [r7, #12]
 800a186:	f000 fd53 	bl	800ac30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a18a:	2300      	movs	r3, #0
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a194:	b580      	push	{r7, lr}
 800a196:	b082      	sub	sp, #8
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	2204      	movs	r2, #4
 800a1a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	2200      	movs	r2, #0
 800a1a8:	2100      	movs	r1, #0
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fd08 	bl	800abc0 <USBD_LL_Transmit>

  return USBD_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}

0800a1ba <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a1ba:	b580      	push	{r7, lr}
 800a1bc:	b082      	sub	sp, #8
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2205      	movs	r2, #5
 800a1c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1ca:	2300      	movs	r3, #0
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	2100      	movs	r1, #0
 800a1d0:	6878      	ldr	r0, [r7, #4]
 800a1d2:	f000 fd2d 	bl	800ac30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a1d6:	2300      	movs	r3, #0
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3708      	adds	r7, #8
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	4912      	ldr	r1, [pc, #72]	; (800a230 <MX_USB_DEVICE_Init+0x50>)
 800a1e8:	4812      	ldr	r0, [pc, #72]	; (800a234 <MX_USB_DEVICE_Init+0x54>)
 800a1ea:	f7fe fcd7 	bl	8008b9c <USBD_Init>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d001      	beq.n	800a1f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a1f4:	f7f7 fc7c 	bl	8001af0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800a1f8:	490f      	ldr	r1, [pc, #60]	; (800a238 <MX_USB_DEVICE_Init+0x58>)
 800a1fa:	480e      	ldr	r0, [pc, #56]	; (800a234 <MX_USB_DEVICE_Init+0x54>)
 800a1fc:	f7fe fcfe 	bl	8008bfc <USBD_RegisterClass>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a206:	f7f7 fc73 	bl	8001af0 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800a20a:	490c      	ldr	r1, [pc, #48]	; (800a23c <MX_USB_DEVICE_Init+0x5c>)
 800a20c:	4809      	ldr	r0, [pc, #36]	; (800a234 <MX_USB_DEVICE_Init+0x54>)
 800a20e:	f7fe fcab 	bl	8008b68 <USBD_CUSTOM_HID_RegisterInterface>
 800a212:	4603      	mov	r3, r0
 800a214:	2b00      	cmp	r3, #0
 800a216:	d001      	beq.n	800a21c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a218:	f7f7 fc6a 	bl	8001af0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a21c:	4805      	ldr	r0, [pc, #20]	; (800a234 <MX_USB_DEVICE_Init+0x54>)
 800a21e:	f7fe fd23 	bl	8008c68 <USBD_Start>
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d001      	beq.n	800a22c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a228:	f7f7 fc62 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a22c:	bf00      	nop
 800a22e:	bd80      	pop	{r7, pc}
 800a230:	200000b8 	.word	0x200000b8
 800a234:	200005cc 	.word	0x200005cc
 800a238:	2000000c 	.word	0x2000000c
 800a23c:	200000a8 	.word	0x200000a8

0800a240 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800a240:	b480      	push	{r7}
 800a242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a244:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a246:	4618      	mov	r0, r3
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr

0800a250 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800a250:	b480      	push	{r7}
 800a252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800a254:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a256:	4618      	mov	r0, r3
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	4603      	mov	r3, r0
 800a268:	460a      	mov	r2, r1
 800a26a:	71fb      	strb	r3, [r7, #7]
 800a26c:	4613      	mov	r3, r2
 800a26e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);
miflag=1;
 800a270:	4b04      	ldr	r3, [pc, #16]	; (800a284 <CUSTOM_HID_OutEvent_FS+0x24>)
 800a272:	2201      	movs	r2, #1
 800a274:	701a      	strb	r2, [r3, #0]
  /* Start next USB packet transfer once data processing is completed */
//  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);

  return (USBD_OK);
 800a276:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a278:	4618      	mov	r0, r3
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	200008a8 	.word	0x200008a8

0800a288 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

 int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	460b      	mov	r3, r1
 800a292:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 800a294:	887b      	ldrh	r3, [r7, #2]
 800a296:	461a      	mov	r2, r3
 800a298:	6879      	ldr	r1, [r7, #4]
 800a29a:	4804      	ldr	r0, [pc, #16]	; (800a2ac <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 800a29c:	f7fe fb1c 	bl	80088d8 <USBD_CUSTOM_HID_SendReport>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	b25b      	sxtb	r3, r3
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	200005cc 	.word	0x200005cc

0800a2b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	6039      	str	r1, [r7, #0]
 800a2ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	2212      	movs	r2, #18
 800a2c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a2c2:	4b03      	ldr	r3, [pc, #12]	; (800a2d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	370c      	adds	r7, #12
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr
 800a2d0:	200000d8 	.word	0x200000d8

0800a2d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	4603      	mov	r3, r0
 800a2dc:	6039      	str	r1, [r7, #0]
 800a2de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	2204      	movs	r2, #4
 800a2e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a2e6:	4b03      	ldr	r3, [pc, #12]	; (800a2f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr
 800a2f4:	200000f8 	.word	0x200000f8

0800a2f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	4603      	mov	r3, r0
 800a300:	6039      	str	r1, [r7, #0]
 800a302:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a304:	79fb      	ldrb	r3, [r7, #7]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d105      	bne.n	800a316 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	4907      	ldr	r1, [pc, #28]	; (800a32c <USBD_FS_ProductStrDescriptor+0x34>)
 800a30e:	4808      	ldr	r0, [pc, #32]	; (800a330 <USBD_FS_ProductStrDescriptor+0x38>)
 800a310:	f7ff fe86 	bl	800a020 <USBD_GetString>
 800a314:	e004      	b.n	800a320 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	4904      	ldr	r1, [pc, #16]	; (800a32c <USBD_FS_ProductStrDescriptor+0x34>)
 800a31a:	4805      	ldr	r0, [pc, #20]	; (800a330 <USBD_FS_ProductStrDescriptor+0x38>)
 800a31c:	f7ff fe80 	bl	800a020 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a320:	4b02      	ldr	r3, [pc, #8]	; (800a32c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a322:	4618      	mov	r0, r3
 800a324:	3708      	adds	r7, #8
 800a326:	46bd      	mov	sp, r7
 800a328:	bd80      	pop	{r7, pc}
 800a32a:	bf00      	nop
 800a32c:	200008ac 	.word	0x200008ac
 800a330:	0800da8c 	.word	0x0800da8c

0800a334 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b082      	sub	sp, #8
 800a338:	af00      	add	r7, sp, #0
 800a33a:	4603      	mov	r3, r0
 800a33c:	6039      	str	r1, [r7, #0]
 800a33e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a340:	683a      	ldr	r2, [r7, #0]
 800a342:	4904      	ldr	r1, [pc, #16]	; (800a354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a344:	4804      	ldr	r0, [pc, #16]	; (800a358 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a346:	f7ff fe6b 	bl	800a020 <USBD_GetString>
  return USBD_StrDesc;
 800a34a:	4b02      	ldr	r3, [pc, #8]	; (800a354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3708      	adds	r7, #8
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	200008ac 	.word	0x200008ac
 800a358:	0800daac 	.word	0x0800daac

0800a35c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
 800a362:	4603      	mov	r3, r0
 800a364:	6039      	str	r1, [r7, #0]
 800a366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	221a      	movs	r2, #26
 800a36c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a36e:	f000 f855 	bl	800a41c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a372:	4b02      	ldr	r3, [pc, #8]	; (800a37c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a374:	4618      	mov	r0, r3
 800a376:	3708      	adds	r7, #8
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	200000fc 	.word	0x200000fc

0800a380 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	4603      	mov	r3, r0
 800a388:	6039      	str	r1, [r7, #0]
 800a38a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a38c:	79fb      	ldrb	r3, [r7, #7]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d105      	bne.n	800a39e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a392:	683a      	ldr	r2, [r7, #0]
 800a394:	4907      	ldr	r1, [pc, #28]	; (800a3b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a396:	4808      	ldr	r0, [pc, #32]	; (800a3b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a398:	f7ff fe42 	bl	800a020 <USBD_GetString>
 800a39c:	e004      	b.n	800a3a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a39e:	683a      	ldr	r2, [r7, #0]
 800a3a0:	4904      	ldr	r1, [pc, #16]	; (800a3b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a3a2:	4805      	ldr	r0, [pc, #20]	; (800a3b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a3a4:	f7ff fe3c 	bl	800a020 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3a8:	4b02      	ldr	r3, [pc, #8]	; (800a3b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	200008ac 	.word	0x200008ac
 800a3b8:	0800dac0 	.word	0x0800dac0

0800a3bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	6039      	str	r1, [r7, #0]
 800a3c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d105      	bne.n	800a3da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3ce:	683a      	ldr	r2, [r7, #0]
 800a3d0:	4907      	ldr	r1, [pc, #28]	; (800a3f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3d2:	4808      	ldr	r0, [pc, #32]	; (800a3f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3d4:	f7ff fe24 	bl	800a020 <USBD_GetString>
 800a3d8:	e004      	b.n	800a3e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a3da:	683a      	ldr	r2, [r7, #0]
 800a3dc:	4904      	ldr	r1, [pc, #16]	; (800a3f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a3de:	4805      	ldr	r0, [pc, #20]	; (800a3f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a3e0:	f7ff fe1e 	bl	800a020 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a3e4:	4b02      	ldr	r3, [pc, #8]	; (800a3f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3708      	adds	r7, #8
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	200008ac 	.word	0x200008ac
 800a3f4:	0800dad4 	.word	0x0800dad4

0800a3f8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	4603      	mov	r3, r0
 800a400:	6039      	str	r1, [r7, #0]
 800a402:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	220c      	movs	r2, #12
 800a408:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800a40a:	4b03      	ldr	r3, [pc, #12]	; (800a418 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	370c      	adds	r7, #12
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	200000ec 	.word	0x200000ec

0800a41c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a422:	4b0f      	ldr	r3, [pc, #60]	; (800a460 <Get_SerialNum+0x44>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a428:	4b0e      	ldr	r3, [pc, #56]	; (800a464 <Get_SerialNum+0x48>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a42e:	4b0e      	ldr	r3, [pc, #56]	; (800a468 <Get_SerialNum+0x4c>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	4413      	add	r3, r2
 800a43a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d009      	beq.n	800a456 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a442:	2208      	movs	r2, #8
 800a444:	4909      	ldr	r1, [pc, #36]	; (800a46c <Get_SerialNum+0x50>)
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f000 f814 	bl	800a474 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a44c:	2204      	movs	r2, #4
 800a44e:	4908      	ldr	r1, [pc, #32]	; (800a470 <Get_SerialNum+0x54>)
 800a450:	68b8      	ldr	r0, [r7, #8]
 800a452:	f000 f80f 	bl	800a474 <IntToUnicode>
  }
}
 800a456:	bf00      	nop
 800a458:	3710      	adds	r7, #16
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	1fff7590 	.word	0x1fff7590
 800a464:	1fff7594 	.word	0x1fff7594
 800a468:	1fff7598 	.word	0x1fff7598
 800a46c:	200000fe 	.word	0x200000fe
 800a470:	2000010e 	.word	0x2000010e

0800a474 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a474:	b480      	push	{r7}
 800a476:	b087      	sub	sp, #28
 800a478:	af00      	add	r7, sp, #0
 800a47a:	60f8      	str	r0, [r7, #12]
 800a47c:	60b9      	str	r1, [r7, #8]
 800a47e:	4613      	mov	r3, r2
 800a480:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a482:	2300      	movs	r3, #0
 800a484:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a486:	2300      	movs	r3, #0
 800a488:	75fb      	strb	r3, [r7, #23]
 800a48a:	e027      	b.n	800a4dc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	0f1b      	lsrs	r3, r3, #28
 800a490:	2b09      	cmp	r3, #9
 800a492:	d80b      	bhi.n	800a4ac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	0f1b      	lsrs	r3, r3, #28
 800a498:	b2da      	uxtb	r2, r3
 800a49a:	7dfb      	ldrb	r3, [r7, #23]
 800a49c:	005b      	lsls	r3, r3, #1
 800a49e:	4619      	mov	r1, r3
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	440b      	add	r3, r1
 800a4a4:	3230      	adds	r2, #48	; 0x30
 800a4a6:	b2d2      	uxtb	r2, r2
 800a4a8:	701a      	strb	r2, [r3, #0]
 800a4aa:	e00a      	b.n	800a4c2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	0f1b      	lsrs	r3, r3, #28
 800a4b0:	b2da      	uxtb	r2, r3
 800a4b2:	7dfb      	ldrb	r3, [r7, #23]
 800a4b4:	005b      	lsls	r3, r3, #1
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	68bb      	ldr	r3, [r7, #8]
 800a4ba:	440b      	add	r3, r1
 800a4bc:	3237      	adds	r2, #55	; 0x37
 800a4be:	b2d2      	uxtb	r2, r2
 800a4c0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	011b      	lsls	r3, r3, #4
 800a4c6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a4c8:	7dfb      	ldrb	r3, [r7, #23]
 800a4ca:	005b      	lsls	r3, r3, #1
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a4d6:	7dfb      	ldrb	r3, [r7, #23]
 800a4d8:	3301      	adds	r3, #1
 800a4da:	75fb      	strb	r3, [r7, #23]
 800a4dc:	7dfa      	ldrb	r2, [r7, #23]
 800a4de:	79fb      	ldrb	r3, [r7, #7]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d3d3      	bcc.n	800a48c <IntToUnicode+0x18>
  }
}
 800a4e4:	bf00      	nop
 800a4e6:	bf00      	nop
 800a4e8:	371c      	adds	r7, #28
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
	...

0800a4f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b0ac      	sub	sp, #176	; 0xb0
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a500:	2200      	movs	r2, #0
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	605a      	str	r2, [r3, #4]
 800a506:	609a      	str	r2, [r3, #8]
 800a508:	60da      	str	r2, [r3, #12]
 800a50a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a50c:	f107 0314 	add.w	r3, r7, #20
 800a510:	2288      	movs	r2, #136	; 0x88
 800a512:	2100      	movs	r1, #0
 800a514:	4618      	mov	r0, r3
 800a516:	f001 f9a8 	bl	800b86a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a522:	f040 8085 	bne.w	800a630 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800a526:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a52a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800a52c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800a530:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800a534:	2301      	movs	r3, #1
 800a536:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800a538:	2301      	movs	r3, #1
 800a53a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800a53c:	2318      	movs	r3, #24
 800a53e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800a540:	2307      	movs	r3, #7
 800a542:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800a544:	2302      	movs	r3, #2
 800a546:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800a548:	2302      	movs	r3, #2
 800a54a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800a54c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a550:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a552:	f107 0314 	add.w	r3, r7, #20
 800a556:	4618      	mov	r0, r3
 800a558:	f7fa fd30 	bl	8004fbc <HAL_RCCEx_PeriphCLKConfig>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 800a562:	f7f7 fac5 	bl	8001af0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a566:	4b34      	ldr	r3, [pc, #208]	; (800a638 <HAL_PCD_MspInit+0x144>)
 800a568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a56a:	4a33      	ldr	r2, [pc, #204]	; (800a638 <HAL_PCD_MspInit+0x144>)
 800a56c:	f043 0301 	orr.w	r3, r3, #1
 800a570:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a572:	4b31      	ldr	r3, [pc, #196]	; (800a638 <HAL_PCD_MspInit+0x144>)
 800a574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a576:	f003 0301 	and.w	r3, r3, #1
 800a57a:	613b      	str	r3, [r7, #16]
 800a57c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800a57e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a582:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a586:	2300      	movs	r3, #0
 800a588:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a58c:	2300      	movs	r3, #0
 800a58e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800a592:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a596:	4619      	mov	r1, r3
 800a598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a59c:	f7f8 f928 	bl	80027f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800a5a0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a5a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5a8:	2302      	movs	r3, #2
 800a5aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a5ba:	230a      	movs	r3, #10
 800a5bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a5c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a5ca:	f7f8 f911 	bl	80027f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a5ce:	4b1a      	ldr	r3, [pc, #104]	; (800a638 <HAL_PCD_MspInit+0x144>)
 800a5d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5d2:	4a19      	ldr	r2, [pc, #100]	; (800a638 <HAL_PCD_MspInit+0x144>)
 800a5d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a5d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5da:	4b17      	ldr	r3, [pc, #92]	; (800a638 <HAL_PCD_MspInit+0x144>)
 800a5dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a5e2:	60fb      	str	r3, [r7, #12]
 800a5e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a5e6:	4b14      	ldr	r3, [pc, #80]	; (800a638 <HAL_PCD_MspInit+0x144>)
 800a5e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d114      	bne.n	800a61c <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a5f2:	4b11      	ldr	r3, [pc, #68]	; (800a638 <HAL_PCD_MspInit+0x144>)
 800a5f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5f6:	4a10      	ldr	r2, [pc, #64]	; (800a638 <HAL_PCD_MspInit+0x144>)
 800a5f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5fc:	6593      	str	r3, [r2, #88]	; 0x58
 800a5fe:	4b0e      	ldr	r3, [pc, #56]	; (800a638 <HAL_PCD_MspInit+0x144>)
 800a600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a606:	60bb      	str	r3, [r7, #8]
 800a608:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800a60a:	f7f9 fe0b 	bl	8004224 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800a60e:	4b0a      	ldr	r3, [pc, #40]	; (800a638 <HAL_PCD_MspInit+0x144>)
 800a610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a612:	4a09      	ldr	r2, [pc, #36]	; (800a638 <HAL_PCD_MspInit+0x144>)
 800a614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a618:	6593      	str	r3, [r2, #88]	; 0x58
 800a61a:	e001      	b.n	800a620 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800a61c:	f7f9 fe02 	bl	8004224 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a620:	2200      	movs	r2, #0
 800a622:	2100      	movs	r1, #0
 800a624:	2043      	movs	r0, #67	; 0x43
 800a626:	f7f7 ffa0 	bl	800256a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a62a:	2043      	movs	r0, #67	; 0x43
 800a62c:	f7f7 ffb9 	bl	80025a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a630:	bf00      	nop
 800a632:	37b0      	adds	r7, #176	; 0xb0
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}
 800a638:	40021000 	.word	0x40021000

0800a63c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b082      	sub	sp, #8
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a650:	4619      	mov	r1, r3
 800a652:	4610      	mov	r0, r2
 800a654:	f7fe fb55 	bl	8008d02 <USBD_LL_SetupStage>
}
 800a658:	bf00      	nop
 800a65a:	3708      	adds	r7, #8
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}

0800a660 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b082      	sub	sp, #8
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	460b      	mov	r3, r1
 800a66a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a672:	78fa      	ldrb	r2, [r7, #3]
 800a674:	6879      	ldr	r1, [r7, #4]
 800a676:	4613      	mov	r3, r2
 800a678:	00db      	lsls	r3, r3, #3
 800a67a:	4413      	add	r3, r2
 800a67c:	009b      	lsls	r3, r3, #2
 800a67e:	440b      	add	r3, r1
 800a680:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	78fb      	ldrb	r3, [r7, #3]
 800a688:	4619      	mov	r1, r3
 800a68a:	f7fe fb8f 	bl	8008dac <USBD_LL_DataOutStage>
}
 800a68e:	bf00      	nop
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a696:	b580      	push	{r7, lr}
 800a698:	b082      	sub	sp, #8
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	460b      	mov	r3, r1
 800a6a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a6a8:	78fa      	ldrb	r2, [r7, #3]
 800a6aa:	6879      	ldr	r1, [r7, #4]
 800a6ac:	4613      	mov	r3, r2
 800a6ae:	00db      	lsls	r3, r3, #3
 800a6b0:	4413      	add	r3, r2
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	440b      	add	r3, r1
 800a6b6:	3348      	adds	r3, #72	; 0x48
 800a6b8:	681a      	ldr	r2, [r3, #0]
 800a6ba:	78fb      	ldrb	r3, [r7, #3]
 800a6bc:	4619      	mov	r1, r3
 800a6be:	f7fe fc28 	bl	8008f12 <USBD_LL_DataInStage>
}
 800a6c2:	bf00      	nop
 800a6c4:	3708      	adds	r7, #8
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}

0800a6ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6ca:	b580      	push	{r7, lr}
 800a6cc:	b082      	sub	sp, #8
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7fe fd62 	bl	80091a2 <USBD_LL_SOF>
}
 800a6de:	bf00      	nop
 800a6e0:	3708      	adds	r7, #8
 800a6e2:	46bd      	mov	sp, r7
 800a6e4:	bd80      	pop	{r7, pc}

0800a6e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a6e6:	b580      	push	{r7, lr}
 800a6e8:	b084      	sub	sp, #16
 800a6ea:	af00      	add	r7, sp, #0
 800a6ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	691b      	ldr	r3, [r3, #16]
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d001      	beq.n	800a6fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a6fa:	f7f7 f9f9 	bl	8001af0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a704:	7bfa      	ldrb	r2, [r7, #15]
 800a706:	4611      	mov	r1, r2
 800a708:	4618      	mov	r0, r3
 800a70a:	f7fe fd06 	bl	800911a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a714:	4618      	mov	r0, r3
 800a716:	f7fe fcae 	bl	8009076 <USBD_LL_Reset>
}
 800a71a:	bf00      	nop
 800a71c:	3710      	adds	r7, #16
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
	...

0800a724 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b082      	sub	sp, #8
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	6812      	ldr	r2, [r2, #0]
 800a73a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a73e:	f043 0301 	orr.w	r3, r3, #1
 800a742:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fe fcf5 	bl	800913a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a1b      	ldr	r3, [r3, #32]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d005      	beq.n	800a764 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a758:	4b04      	ldr	r3, [pc, #16]	; (800a76c <HAL_PCD_SuspendCallback+0x48>)
 800a75a:	691b      	ldr	r3, [r3, #16]
 800a75c:	4a03      	ldr	r2, [pc, #12]	; (800a76c <HAL_PCD_SuspendCallback+0x48>)
 800a75e:	f043 0306 	orr.w	r3, r3, #6
 800a762:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a764:	bf00      	nop
 800a766:	3708      	adds	r7, #8
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	e000ed00 	.word	0xe000ed00

0800a770 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	6812      	ldr	r2, [r2, #0]
 800a786:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a78a:	f023 0301 	bic.w	r3, r3, #1
 800a78e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a1b      	ldr	r3, [r3, #32]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d007      	beq.n	800a7a8 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a798:	4b08      	ldr	r3, [pc, #32]	; (800a7bc <HAL_PCD_ResumeCallback+0x4c>)
 800a79a:	691b      	ldr	r3, [r3, #16]
 800a79c:	4a07      	ldr	r2, [pc, #28]	; (800a7bc <HAL_PCD_ResumeCallback+0x4c>)
 800a79e:	f023 0306 	bic.w	r3, r3, #6
 800a7a2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800a7a4:	f000 fae2 	bl	800ad6c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7ae:	4618      	mov	r0, r3
 800a7b0:	f7fe fcdf 	bl	8009172 <USBD_LL_Resume>
}
 800a7b4:	bf00      	nop
 800a7b6:	3708      	adds	r7, #8
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	e000ed00 	.word	0xe000ed00

0800a7c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b082      	sub	sp, #8
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7d2:	78fa      	ldrb	r2, [r7, #3]
 800a7d4:	4611      	mov	r1, r2
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fe fd35 	bl	8009246 <USBD_LL_IsoOUTIncomplete>
}
 800a7dc:	bf00      	nop
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	460b      	mov	r3, r1
 800a7ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a7f6:	78fa      	ldrb	r2, [r7, #3]
 800a7f8:	4611      	mov	r1, r2
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7fe fcf1 	bl	80091e2 <USBD_LL_IsoINIncomplete>
}
 800a800:	bf00      	nop
 800a802:	3708      	adds	r7, #8
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a816:	4618      	mov	r0, r3
 800a818:	f7fe fd47 	bl	80092aa <USBD_LL_DevConnected>
}
 800a81c:	bf00      	nop
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a832:	4618      	mov	r0, r3
 800a834:	f7fe fd44 	bl	80092c0 <USBD_LL_DevDisconnected>
}
 800a838:	bf00      	nop
 800a83a:	3708      	adds	r7, #8
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}

0800a840 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b082      	sub	sp, #8
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d13c      	bne.n	800a8ca <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a850:	4a20      	ldr	r2, [pc, #128]	; (800a8d4 <USBD_LL_Init+0x94>)
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a1e      	ldr	r2, [pc, #120]	; (800a8d4 <USBD_LL_Init+0x94>)
 800a85c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a860:	4b1c      	ldr	r3, [pc, #112]	; (800a8d4 <USBD_LL_Init+0x94>)
 800a862:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a866:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800a868:	4b1a      	ldr	r3, [pc, #104]	; (800a8d4 <USBD_LL_Init+0x94>)
 800a86a:	2206      	movs	r2, #6
 800a86c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a86e:	4b19      	ldr	r3, [pc, #100]	; (800a8d4 <USBD_LL_Init+0x94>)
 800a870:	2202      	movs	r2, #2
 800a872:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a874:	4b17      	ldr	r3, [pc, #92]	; (800a8d4 <USBD_LL_Init+0x94>)
 800a876:	2202      	movs	r2, #2
 800a878:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a87a:	4b16      	ldr	r3, [pc, #88]	; (800a8d4 <USBD_LL_Init+0x94>)
 800a87c:	2200      	movs	r2, #0
 800a87e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a880:	4b14      	ldr	r3, [pc, #80]	; (800a8d4 <USBD_LL_Init+0x94>)
 800a882:	2200      	movs	r2, #0
 800a884:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a886:	4b13      	ldr	r3, [pc, #76]	; (800a8d4 <USBD_LL_Init+0x94>)
 800a888:	2200      	movs	r2, #0
 800a88a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800a88c:	4b11      	ldr	r3, [pc, #68]	; (800a8d4 <USBD_LL_Init+0x94>)
 800a88e:	2200      	movs	r2, #0
 800a890:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a892:	4b10      	ldr	r3, [pc, #64]	; (800a8d4 <USBD_LL_Init+0x94>)
 800a894:	2200      	movs	r2, #0
 800a896:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a898:	4b0e      	ldr	r3, [pc, #56]	; (800a8d4 <USBD_LL_Init+0x94>)
 800a89a:	2200      	movs	r2, #0
 800a89c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a89e:	480d      	ldr	r0, [pc, #52]	; (800a8d4 <USBD_LL_Init+0x94>)
 800a8a0:	f7f8 fabd 	bl	8002e1e <HAL_PCD_Init>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d001      	beq.n	800a8ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a8aa:	f7f7 f921 	bl	8001af0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a8ae:	2180      	movs	r1, #128	; 0x80
 800a8b0:	4808      	ldr	r0, [pc, #32]	; (800a8d4 <USBD_LL_Init+0x94>)
 800a8b2:	f7f9 fc0e 	bl	80040d2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a8b6:	2240      	movs	r2, #64	; 0x40
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	4806      	ldr	r0, [pc, #24]	; (800a8d4 <USBD_LL_Init+0x94>)
 800a8bc:	f7f9 fbc2 	bl	8004044 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a8c0:	2280      	movs	r2, #128	; 0x80
 800a8c2:	2101      	movs	r1, #1
 800a8c4:	4803      	ldr	r0, [pc, #12]	; (800a8d4 <USBD_LL_Init+0x94>)
 800a8c6:	f7f9 fbbd 	bl	8004044 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3708      	adds	r7, #8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}
 800a8d4:	20000aac 	.word	0x20000aac

0800a8d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b084      	sub	sp, #16
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7f8 fbb9 	bl	8003066 <HAL_PCD_Start>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a8f8:	7bbb      	ldrb	r3, [r7, #14]
 800a8fa:	2b03      	cmp	r3, #3
 800a8fc:	d816      	bhi.n	800a92c <USBD_LL_Start+0x54>
 800a8fe:	a201      	add	r2, pc, #4	; (adr r2, 800a904 <USBD_LL_Start+0x2c>)
 800a900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a904:	0800a915 	.word	0x0800a915
 800a908:	0800a91b 	.word	0x0800a91b
 800a90c:	0800a921 	.word	0x0800a921
 800a910:	0800a927 	.word	0x0800a927
    case HAL_OK :
      usb_status = USBD_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	73fb      	strb	r3, [r7, #15]
    break;
 800a918:	e00b      	b.n	800a932 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a91a:	2303      	movs	r3, #3
 800a91c:	73fb      	strb	r3, [r7, #15]
    break;
 800a91e:	e008      	b.n	800a932 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a920:	2301      	movs	r3, #1
 800a922:	73fb      	strb	r3, [r7, #15]
    break;
 800a924:	e005      	b.n	800a932 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a926:	2303      	movs	r3, #3
 800a928:	73fb      	strb	r3, [r7, #15]
    break;
 800a92a:	e002      	b.n	800a932 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800a92c:	2303      	movs	r3, #3
 800a92e:	73fb      	strb	r3, [r7, #15]
    break;
 800a930:	bf00      	nop
  }
  return usb_status;
 800a932:	7bfb      	ldrb	r3, [r7, #15]
}
 800a934:	4618      	mov	r0, r3
 800a936:	3710      	adds	r7, #16
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	6078      	str	r0, [r7, #4]
 800a944:	4608      	mov	r0, r1
 800a946:	4611      	mov	r1, r2
 800a948:	461a      	mov	r2, r3
 800a94a:	4603      	mov	r3, r0
 800a94c:	70fb      	strb	r3, [r7, #3]
 800a94e:	460b      	mov	r3, r1
 800a950:	70bb      	strb	r3, [r7, #2]
 800a952:	4613      	mov	r3, r2
 800a954:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a956:	2300      	movs	r3, #0
 800a958:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a964:	78bb      	ldrb	r3, [r7, #2]
 800a966:	883a      	ldrh	r2, [r7, #0]
 800a968:	78f9      	ldrb	r1, [r7, #3]
 800a96a:	f7f9 f863 	bl	8003a34 <HAL_PCD_EP_Open>
 800a96e:	4603      	mov	r3, r0
 800a970:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a972:	7bbb      	ldrb	r3, [r7, #14]
 800a974:	2b03      	cmp	r3, #3
 800a976:	d817      	bhi.n	800a9a8 <USBD_LL_OpenEP+0x6c>
 800a978:	a201      	add	r2, pc, #4	; (adr r2, 800a980 <USBD_LL_OpenEP+0x44>)
 800a97a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a97e:	bf00      	nop
 800a980:	0800a991 	.word	0x0800a991
 800a984:	0800a997 	.word	0x0800a997
 800a988:	0800a99d 	.word	0x0800a99d
 800a98c:	0800a9a3 	.word	0x0800a9a3
    case HAL_OK :
      usb_status = USBD_OK;
 800a990:	2300      	movs	r3, #0
 800a992:	73fb      	strb	r3, [r7, #15]
    break;
 800a994:	e00b      	b.n	800a9ae <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a996:	2303      	movs	r3, #3
 800a998:	73fb      	strb	r3, [r7, #15]
    break;
 800a99a:	e008      	b.n	800a9ae <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a99c:	2301      	movs	r3, #1
 800a99e:	73fb      	strb	r3, [r7, #15]
    break;
 800a9a0:	e005      	b.n	800a9ae <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a9a6:	e002      	b.n	800a9ae <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ac:	bf00      	nop
  }
  return usb_status;
 800a9ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}

0800a9b8 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	460b      	mov	r3, r1
 800a9c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a9d2:	78fa      	ldrb	r2, [r7, #3]
 800a9d4:	4611      	mov	r1, r2
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7f9 f894 	bl	8003b04 <HAL_PCD_EP_Close>
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800a9e0:	7bbb      	ldrb	r3, [r7, #14]
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d816      	bhi.n	800aa14 <USBD_LL_CloseEP+0x5c>
 800a9e6:	a201      	add	r2, pc, #4	; (adr r2, 800a9ec <USBD_LL_CloseEP+0x34>)
 800a9e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ec:	0800a9fd 	.word	0x0800a9fd
 800a9f0:	0800aa03 	.word	0x0800aa03
 800a9f4:	0800aa09 	.word	0x0800aa09
 800a9f8:	0800aa0f 	.word	0x0800aa0f
    case HAL_OK :
      usb_status = USBD_OK;
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	73fb      	strb	r3, [r7, #15]
    break;
 800aa00:	e00b      	b.n	800aa1a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa02:	2303      	movs	r3, #3
 800aa04:	73fb      	strb	r3, [r7, #15]
    break;
 800aa06:	e008      	b.n	800aa1a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa0c:	e005      	b.n	800aa1a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa0e:	2303      	movs	r3, #3
 800aa10:	73fb      	strb	r3, [r7, #15]
    break;
 800aa12:	e002      	b.n	800aa1a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800aa14:	2303      	movs	r3, #3
 800aa16:	73fb      	strb	r3, [r7, #15]
    break;
 800aa18:	bf00      	nop
  }
  return usb_status;
 800aa1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	3710      	adds	r7, #16
 800aa20:	46bd      	mov	sp, r7
 800aa22:	bd80      	pop	{r7, pc}

0800aa24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa24:	b580      	push	{r7, lr}
 800aa26:	b084      	sub	sp, #16
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aa34:	2300      	movs	r3, #0
 800aa36:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aa3e:	78fa      	ldrb	r2, [r7, #3]
 800aa40:	4611      	mov	r1, r2
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7f9 f90b 	bl	8003c5e <HAL_PCD_EP_SetStall>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800aa4c:	7bbb      	ldrb	r3, [r7, #14]
 800aa4e:	2b03      	cmp	r3, #3
 800aa50:	d816      	bhi.n	800aa80 <USBD_LL_StallEP+0x5c>
 800aa52:	a201      	add	r2, pc, #4	; (adr r2, 800aa58 <USBD_LL_StallEP+0x34>)
 800aa54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa58:	0800aa69 	.word	0x0800aa69
 800aa5c:	0800aa6f 	.word	0x0800aa6f
 800aa60:	0800aa75 	.word	0x0800aa75
 800aa64:	0800aa7b 	.word	0x0800aa7b
    case HAL_OK :
      usb_status = USBD_OK;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	73fb      	strb	r3, [r7, #15]
    break;
 800aa6c:	e00b      	b.n	800aa86 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aa6e:	2303      	movs	r3, #3
 800aa70:	73fb      	strb	r3, [r7, #15]
    break;
 800aa72:	e008      	b.n	800aa86 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aa74:	2301      	movs	r3, #1
 800aa76:	73fb      	strb	r3, [r7, #15]
    break;
 800aa78:	e005      	b.n	800aa86 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aa7a:	2303      	movs	r3, #3
 800aa7c:	73fb      	strb	r3, [r7, #15]
    break;
 800aa7e:	e002      	b.n	800aa86 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800aa80:	2303      	movs	r3, #3
 800aa82:	73fb      	strb	r3, [r7, #15]
    break;
 800aa84:	bf00      	nop
  }
  return usb_status;
 800aa86:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	460b      	mov	r3, r1
 800aa9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aa9c:	2300      	movs	r3, #0
 800aa9e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800aaaa:	78fa      	ldrb	r2, [r7, #3]
 800aaac:	4611      	mov	r1, r2
 800aaae:	4618      	mov	r0, r3
 800aab0:	f7f9 f937 	bl	8003d22 <HAL_PCD_EP_ClrStall>
 800aab4:	4603      	mov	r3, r0
 800aab6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800aab8:	7bbb      	ldrb	r3, [r7, #14]
 800aaba:	2b03      	cmp	r3, #3
 800aabc:	d816      	bhi.n	800aaec <USBD_LL_ClearStallEP+0x5c>
 800aabe:	a201      	add	r2, pc, #4	; (adr r2, 800aac4 <USBD_LL_ClearStallEP+0x34>)
 800aac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aac4:	0800aad5 	.word	0x0800aad5
 800aac8:	0800aadb 	.word	0x0800aadb
 800aacc:	0800aae1 	.word	0x0800aae1
 800aad0:	0800aae7 	.word	0x0800aae7
    case HAL_OK :
      usb_status = USBD_OK;
 800aad4:	2300      	movs	r3, #0
 800aad6:	73fb      	strb	r3, [r7, #15]
    break;
 800aad8:	e00b      	b.n	800aaf2 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800aada:	2303      	movs	r3, #3
 800aadc:	73fb      	strb	r3, [r7, #15]
    break;
 800aade:	e008      	b.n	800aaf2 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aae0:	2301      	movs	r3, #1
 800aae2:	73fb      	strb	r3, [r7, #15]
    break;
 800aae4:	e005      	b.n	800aaf2 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800aae6:	2303      	movs	r3, #3
 800aae8:	73fb      	strb	r3, [r7, #15]
    break;
 800aaea:	e002      	b.n	800aaf2 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800aaec:	2303      	movs	r3, #3
 800aaee:	73fb      	strb	r3, [r7, #15]
    break;
 800aaf0:	bf00      	nop
  }
  return usb_status;
 800aaf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	460b      	mov	r3, r1
 800ab06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ab10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	da0b      	bge.n	800ab30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ab18:	78fb      	ldrb	r3, [r7, #3]
 800ab1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab1e:	68f9      	ldr	r1, [r7, #12]
 800ab20:	4613      	mov	r3, r2
 800ab22:	00db      	lsls	r3, r3, #3
 800ab24:	4413      	add	r3, r2
 800ab26:	009b      	lsls	r3, r3, #2
 800ab28:	440b      	add	r3, r1
 800ab2a:	333e      	adds	r3, #62	; 0x3e
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	e00b      	b.n	800ab48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ab30:	78fb      	ldrb	r3, [r7, #3]
 800ab32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab36:	68f9      	ldr	r1, [r7, #12]
 800ab38:	4613      	mov	r3, r2
 800ab3a:	00db      	lsls	r3, r3, #3
 800ab3c:	4413      	add	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	440b      	add	r3, r1
 800ab42:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800ab46:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ab54:	b580      	push	{r7, lr}
 800ab56:	b084      	sub	sp, #16
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab60:	2300      	movs	r3, #0
 800ab62:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab64:	2300      	movs	r3, #0
 800ab66:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab6e:	78fa      	ldrb	r2, [r7, #3]
 800ab70:	4611      	mov	r1, r2
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7f8 ff39 	bl	80039ea <HAL_PCD_SetAddress>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ab7c:	7bbb      	ldrb	r3, [r7, #14]
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d816      	bhi.n	800abb0 <USBD_LL_SetUSBAddress+0x5c>
 800ab82:	a201      	add	r2, pc, #4	; (adr r2, 800ab88 <USBD_LL_SetUSBAddress+0x34>)
 800ab84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab88:	0800ab99 	.word	0x0800ab99
 800ab8c:	0800ab9f 	.word	0x0800ab9f
 800ab90:	0800aba5 	.word	0x0800aba5
 800ab94:	0800abab 	.word	0x0800abab
    case HAL_OK :
      usb_status = USBD_OK;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ab9c:	e00b      	b.n	800abb6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ab9e:	2303      	movs	r3, #3
 800aba0:	73fb      	strb	r3, [r7, #15]
    break;
 800aba2:	e008      	b.n	800abb6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800aba4:	2301      	movs	r3, #1
 800aba6:	73fb      	strb	r3, [r7, #15]
    break;
 800aba8:	e005      	b.n	800abb6 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800abaa:	2303      	movs	r3, #3
 800abac:	73fb      	strb	r3, [r7, #15]
    break;
 800abae:	e002      	b.n	800abb6 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800abb0:	2303      	movs	r3, #3
 800abb2:	73fb      	strb	r3, [r7, #15]
    break;
 800abb4:	bf00      	nop
  }
  return usb_status;
 800abb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3710      	adds	r7, #16
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b086      	sub	sp, #24
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	60f8      	str	r0, [r7, #12]
 800abc8:	607a      	str	r2, [r7, #4]
 800abca:	603b      	str	r3, [r7, #0]
 800abcc:	460b      	mov	r3, r1
 800abce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abd0:	2300      	movs	r3, #0
 800abd2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800abde:	7af9      	ldrb	r1, [r7, #11]
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	f7f9 f80a 	bl	8003bfc <HAL_PCD_EP_Transmit>
 800abe8:	4603      	mov	r3, r0
 800abea:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800abec:	7dbb      	ldrb	r3, [r7, #22]
 800abee:	2b03      	cmp	r3, #3
 800abf0:	d816      	bhi.n	800ac20 <USBD_LL_Transmit+0x60>
 800abf2:	a201      	add	r2, pc, #4	; (adr r2, 800abf8 <USBD_LL_Transmit+0x38>)
 800abf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf8:	0800ac09 	.word	0x0800ac09
 800abfc:	0800ac0f 	.word	0x0800ac0f
 800ac00:	0800ac15 	.word	0x0800ac15
 800ac04:	0800ac1b 	.word	0x0800ac1b
    case HAL_OK :
      usb_status = USBD_OK;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	75fb      	strb	r3, [r7, #23]
    break;
 800ac0c:	e00b      	b.n	800ac26 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac0e:	2303      	movs	r3, #3
 800ac10:	75fb      	strb	r3, [r7, #23]
    break;
 800ac12:	e008      	b.n	800ac26 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac14:	2301      	movs	r3, #1
 800ac16:	75fb      	strb	r3, [r7, #23]
    break;
 800ac18:	e005      	b.n	800ac26 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac1a:	2303      	movs	r3, #3
 800ac1c:	75fb      	strb	r3, [r7, #23]
    break;
 800ac1e:	e002      	b.n	800ac26 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800ac20:	2303      	movs	r3, #3
 800ac22:	75fb      	strb	r3, [r7, #23]
    break;
 800ac24:	bf00      	nop
  }
  return usb_status;
 800ac26:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	3718      	adds	r7, #24
 800ac2c:	46bd      	mov	sp, r7
 800ac2e:	bd80      	pop	{r7, pc}

0800ac30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b086      	sub	sp, #24
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	607a      	str	r2, [r7, #4]
 800ac3a:	603b      	str	r3, [r7, #0]
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac40:	2300      	movs	r3, #0
 800ac42:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac44:	2300      	movs	r3, #0
 800ac46:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ac4e:	7af9      	ldrb	r1, [r7, #11]
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	687a      	ldr	r2, [r7, #4]
 800ac54:	f7f8 ffa0 	bl	8003b98 <HAL_PCD_EP_Receive>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800ac5c:	7dbb      	ldrb	r3, [r7, #22]
 800ac5e:	2b03      	cmp	r3, #3
 800ac60:	d816      	bhi.n	800ac90 <USBD_LL_PrepareReceive+0x60>
 800ac62:	a201      	add	r2, pc, #4	; (adr r2, 800ac68 <USBD_LL_PrepareReceive+0x38>)
 800ac64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac68:	0800ac79 	.word	0x0800ac79
 800ac6c:	0800ac7f 	.word	0x0800ac7f
 800ac70:	0800ac85 	.word	0x0800ac85
 800ac74:	0800ac8b 	.word	0x0800ac8b
    case HAL_OK :
      usb_status = USBD_OK;
 800ac78:	2300      	movs	r3, #0
 800ac7a:	75fb      	strb	r3, [r7, #23]
    break;
 800ac7c:	e00b      	b.n	800ac96 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ac7e:	2303      	movs	r3, #3
 800ac80:	75fb      	strb	r3, [r7, #23]
    break;
 800ac82:	e008      	b.n	800ac96 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ac84:	2301      	movs	r3, #1
 800ac86:	75fb      	strb	r3, [r7, #23]
    break;
 800ac88:	e005      	b.n	800ac96 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ac8a:	2303      	movs	r3, #3
 800ac8c:	75fb      	strb	r3, [r7, #23]
    break;
 800ac8e:	e002      	b.n	800ac96 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ac90:	2303      	movs	r3, #3
 800ac92:	75fb      	strb	r3, [r7, #23]
    break;
 800ac94:	bf00      	nop
  }
  return usb_status;
 800ac96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3718      	adds	r7, #24
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b082      	sub	sp, #8
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	460b      	mov	r3, r1
 800acaa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800acac:	78fb      	ldrb	r3, [r7, #3]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d002      	beq.n	800acb8 <HAL_PCDEx_LPM_Callback+0x18>
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d01f      	beq.n	800acf6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800acb6:	e03b      	b.n	800ad30 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d007      	beq.n	800acd0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800acc0:	f000 f854 	bl	800ad6c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800acc4:	4b1c      	ldr	r3, [pc, #112]	; (800ad38 <HAL_PCDEx_LPM_Callback+0x98>)
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	4a1b      	ldr	r2, [pc, #108]	; (800ad38 <HAL_PCDEx_LPM_Callback+0x98>)
 800acca:	f023 0306 	bic.w	r3, r3, #6
 800acce:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	6812      	ldr	r2, [r2, #0]
 800acde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ace2:	f023 0301 	bic.w	r3, r3, #1
 800ace6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800acee:	4618      	mov	r0, r3
 800acf0:	f7fe fa3f 	bl	8009172 <USBD_LL_Resume>
    break;
 800acf4:	e01c      	b.n	800ad30 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	687a      	ldr	r2, [r7, #4]
 800ad02:	6812      	ldr	r2, [r2, #0]
 800ad04:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad08:	f043 0301 	orr.w	r3, r3, #1
 800ad0c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ad14:	4618      	mov	r0, r3
 800ad16:	f7fe fa10 	bl	800913a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6a1b      	ldr	r3, [r3, #32]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d005      	beq.n	800ad2e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ad22:	4b05      	ldr	r3, [pc, #20]	; (800ad38 <HAL_PCDEx_LPM_Callback+0x98>)
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	4a04      	ldr	r2, [pc, #16]	; (800ad38 <HAL_PCDEx_LPM_Callback+0x98>)
 800ad28:	f043 0306 	orr.w	r3, r3, #6
 800ad2c:	6113      	str	r3, [r2, #16]
    break;
 800ad2e:	bf00      	nop
}
 800ad30:	bf00      	nop
 800ad32:	3708      	adds	r7, #8
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bd80      	pop	{r7, pc}
 800ad38:	e000ed00 	.word	0xe000ed00

0800ad3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800ad44:	4b03      	ldr	r3, [pc, #12]	; (800ad54 <USBD_static_malloc+0x18>)
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	370c      	adds	r7, #12
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	20000fb8 	.word	0x20000fb8

0800ad58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]

}
 800ad60:	bf00      	nop
 800ad62:	370c      	adds	r7, #12
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr

0800ad6c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800ad70:	f7f6 fb42 	bl	80013f8 <SystemClock_Config>
}
 800ad74:	bf00      	nop
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <__cvt>:
 800ad78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad7c:	ec55 4b10 	vmov	r4, r5, d0
 800ad80:	2d00      	cmp	r5, #0
 800ad82:	460e      	mov	r6, r1
 800ad84:	4619      	mov	r1, r3
 800ad86:	462b      	mov	r3, r5
 800ad88:	bfbb      	ittet	lt
 800ad8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ad8e:	461d      	movlt	r5, r3
 800ad90:	2300      	movge	r3, #0
 800ad92:	232d      	movlt	r3, #45	; 0x2d
 800ad94:	700b      	strb	r3, [r1, #0]
 800ad96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ad9c:	4691      	mov	r9, r2
 800ad9e:	f023 0820 	bic.w	r8, r3, #32
 800ada2:	bfbc      	itt	lt
 800ada4:	4622      	movlt	r2, r4
 800ada6:	4614      	movlt	r4, r2
 800ada8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800adac:	d005      	beq.n	800adba <__cvt+0x42>
 800adae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800adb2:	d100      	bne.n	800adb6 <__cvt+0x3e>
 800adb4:	3601      	adds	r6, #1
 800adb6:	2102      	movs	r1, #2
 800adb8:	e000      	b.n	800adbc <__cvt+0x44>
 800adba:	2103      	movs	r1, #3
 800adbc:	ab03      	add	r3, sp, #12
 800adbe:	9301      	str	r3, [sp, #4]
 800adc0:	ab02      	add	r3, sp, #8
 800adc2:	9300      	str	r3, [sp, #0]
 800adc4:	ec45 4b10 	vmov	d0, r4, r5
 800adc8:	4653      	mov	r3, sl
 800adca:	4632      	mov	r2, r6
 800adcc:	f000 fe54 	bl	800ba78 <_dtoa_r>
 800add0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800add4:	4607      	mov	r7, r0
 800add6:	d102      	bne.n	800adde <__cvt+0x66>
 800add8:	f019 0f01 	tst.w	r9, #1
 800addc:	d022      	beq.n	800ae24 <__cvt+0xac>
 800adde:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ade2:	eb07 0906 	add.w	r9, r7, r6
 800ade6:	d110      	bne.n	800ae0a <__cvt+0x92>
 800ade8:	783b      	ldrb	r3, [r7, #0]
 800adea:	2b30      	cmp	r3, #48	; 0x30
 800adec:	d10a      	bne.n	800ae04 <__cvt+0x8c>
 800adee:	2200      	movs	r2, #0
 800adf0:	2300      	movs	r3, #0
 800adf2:	4620      	mov	r0, r4
 800adf4:	4629      	mov	r1, r5
 800adf6:	f7f5 fe67 	bl	8000ac8 <__aeabi_dcmpeq>
 800adfa:	b918      	cbnz	r0, 800ae04 <__cvt+0x8c>
 800adfc:	f1c6 0601 	rsb	r6, r6, #1
 800ae00:	f8ca 6000 	str.w	r6, [sl]
 800ae04:	f8da 3000 	ldr.w	r3, [sl]
 800ae08:	4499      	add	r9, r3
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	4620      	mov	r0, r4
 800ae10:	4629      	mov	r1, r5
 800ae12:	f7f5 fe59 	bl	8000ac8 <__aeabi_dcmpeq>
 800ae16:	b108      	cbz	r0, 800ae1c <__cvt+0xa4>
 800ae18:	f8cd 900c 	str.w	r9, [sp, #12]
 800ae1c:	2230      	movs	r2, #48	; 0x30
 800ae1e:	9b03      	ldr	r3, [sp, #12]
 800ae20:	454b      	cmp	r3, r9
 800ae22:	d307      	bcc.n	800ae34 <__cvt+0xbc>
 800ae24:	9b03      	ldr	r3, [sp, #12]
 800ae26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ae28:	1bdb      	subs	r3, r3, r7
 800ae2a:	4638      	mov	r0, r7
 800ae2c:	6013      	str	r3, [r2, #0]
 800ae2e:	b004      	add	sp, #16
 800ae30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae34:	1c59      	adds	r1, r3, #1
 800ae36:	9103      	str	r1, [sp, #12]
 800ae38:	701a      	strb	r2, [r3, #0]
 800ae3a:	e7f0      	b.n	800ae1e <__cvt+0xa6>

0800ae3c <__exponent>:
 800ae3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2900      	cmp	r1, #0
 800ae42:	bfb8      	it	lt
 800ae44:	4249      	neglt	r1, r1
 800ae46:	f803 2b02 	strb.w	r2, [r3], #2
 800ae4a:	bfb4      	ite	lt
 800ae4c:	222d      	movlt	r2, #45	; 0x2d
 800ae4e:	222b      	movge	r2, #43	; 0x2b
 800ae50:	2909      	cmp	r1, #9
 800ae52:	7042      	strb	r2, [r0, #1]
 800ae54:	dd2a      	ble.n	800aeac <__exponent+0x70>
 800ae56:	f10d 0207 	add.w	r2, sp, #7
 800ae5a:	4617      	mov	r7, r2
 800ae5c:	260a      	movs	r6, #10
 800ae5e:	4694      	mov	ip, r2
 800ae60:	fb91 f5f6 	sdiv	r5, r1, r6
 800ae64:	fb06 1415 	mls	r4, r6, r5, r1
 800ae68:	3430      	adds	r4, #48	; 0x30
 800ae6a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ae6e:	460c      	mov	r4, r1
 800ae70:	2c63      	cmp	r4, #99	; 0x63
 800ae72:	f102 32ff 	add.w	r2, r2, #4294967295
 800ae76:	4629      	mov	r1, r5
 800ae78:	dcf1      	bgt.n	800ae5e <__exponent+0x22>
 800ae7a:	3130      	adds	r1, #48	; 0x30
 800ae7c:	f1ac 0402 	sub.w	r4, ip, #2
 800ae80:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ae84:	1c41      	adds	r1, r0, #1
 800ae86:	4622      	mov	r2, r4
 800ae88:	42ba      	cmp	r2, r7
 800ae8a:	d30a      	bcc.n	800aea2 <__exponent+0x66>
 800ae8c:	f10d 0209 	add.w	r2, sp, #9
 800ae90:	eba2 020c 	sub.w	r2, r2, ip
 800ae94:	42bc      	cmp	r4, r7
 800ae96:	bf88      	it	hi
 800ae98:	2200      	movhi	r2, #0
 800ae9a:	4413      	add	r3, r2
 800ae9c:	1a18      	subs	r0, r3, r0
 800ae9e:	b003      	add	sp, #12
 800aea0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aea2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800aea6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800aeaa:	e7ed      	b.n	800ae88 <__exponent+0x4c>
 800aeac:	2330      	movs	r3, #48	; 0x30
 800aeae:	3130      	adds	r1, #48	; 0x30
 800aeb0:	7083      	strb	r3, [r0, #2]
 800aeb2:	70c1      	strb	r1, [r0, #3]
 800aeb4:	1d03      	adds	r3, r0, #4
 800aeb6:	e7f1      	b.n	800ae9c <__exponent+0x60>

0800aeb8 <_printf_float>:
 800aeb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aebc:	ed2d 8b02 	vpush	{d8}
 800aec0:	b08d      	sub	sp, #52	; 0x34
 800aec2:	460c      	mov	r4, r1
 800aec4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aec8:	4616      	mov	r6, r2
 800aeca:	461f      	mov	r7, r3
 800aecc:	4605      	mov	r5, r0
 800aece:	f000 fcd5 	bl	800b87c <_localeconv_r>
 800aed2:	f8d0 a000 	ldr.w	sl, [r0]
 800aed6:	4650      	mov	r0, sl
 800aed8:	f7f5 f9ca 	bl	8000270 <strlen>
 800aedc:	2300      	movs	r3, #0
 800aede:	930a      	str	r3, [sp, #40]	; 0x28
 800aee0:	6823      	ldr	r3, [r4, #0]
 800aee2:	9305      	str	r3, [sp, #20]
 800aee4:	f8d8 3000 	ldr.w	r3, [r8]
 800aee8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aeec:	3307      	adds	r3, #7
 800aeee:	f023 0307 	bic.w	r3, r3, #7
 800aef2:	f103 0208 	add.w	r2, r3, #8
 800aef6:	f8c8 2000 	str.w	r2, [r8]
 800aefa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aefe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af02:	9307      	str	r3, [sp, #28]
 800af04:	f8cd 8018 	str.w	r8, [sp, #24]
 800af08:	ee08 0a10 	vmov	s16, r0
 800af0c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800af10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af14:	4b9e      	ldr	r3, [pc, #632]	; (800b190 <_printf_float+0x2d8>)
 800af16:	f04f 32ff 	mov.w	r2, #4294967295
 800af1a:	f7f5 fe07 	bl	8000b2c <__aeabi_dcmpun>
 800af1e:	bb88      	cbnz	r0, 800af84 <_printf_float+0xcc>
 800af20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800af24:	4b9a      	ldr	r3, [pc, #616]	; (800b190 <_printf_float+0x2d8>)
 800af26:	f04f 32ff 	mov.w	r2, #4294967295
 800af2a:	f7f5 fde1 	bl	8000af0 <__aeabi_dcmple>
 800af2e:	bb48      	cbnz	r0, 800af84 <_printf_float+0xcc>
 800af30:	2200      	movs	r2, #0
 800af32:	2300      	movs	r3, #0
 800af34:	4640      	mov	r0, r8
 800af36:	4649      	mov	r1, r9
 800af38:	f7f5 fdd0 	bl	8000adc <__aeabi_dcmplt>
 800af3c:	b110      	cbz	r0, 800af44 <_printf_float+0x8c>
 800af3e:	232d      	movs	r3, #45	; 0x2d
 800af40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af44:	4a93      	ldr	r2, [pc, #588]	; (800b194 <_printf_float+0x2dc>)
 800af46:	4b94      	ldr	r3, [pc, #592]	; (800b198 <_printf_float+0x2e0>)
 800af48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800af4c:	bf94      	ite	ls
 800af4e:	4690      	movls	r8, r2
 800af50:	4698      	movhi	r8, r3
 800af52:	2303      	movs	r3, #3
 800af54:	6123      	str	r3, [r4, #16]
 800af56:	9b05      	ldr	r3, [sp, #20]
 800af58:	f023 0304 	bic.w	r3, r3, #4
 800af5c:	6023      	str	r3, [r4, #0]
 800af5e:	f04f 0900 	mov.w	r9, #0
 800af62:	9700      	str	r7, [sp, #0]
 800af64:	4633      	mov	r3, r6
 800af66:	aa0b      	add	r2, sp, #44	; 0x2c
 800af68:	4621      	mov	r1, r4
 800af6a:	4628      	mov	r0, r5
 800af6c:	f000 f9da 	bl	800b324 <_printf_common>
 800af70:	3001      	adds	r0, #1
 800af72:	f040 8090 	bne.w	800b096 <_printf_float+0x1de>
 800af76:	f04f 30ff 	mov.w	r0, #4294967295
 800af7a:	b00d      	add	sp, #52	; 0x34
 800af7c:	ecbd 8b02 	vpop	{d8}
 800af80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af84:	4642      	mov	r2, r8
 800af86:	464b      	mov	r3, r9
 800af88:	4640      	mov	r0, r8
 800af8a:	4649      	mov	r1, r9
 800af8c:	f7f5 fdce 	bl	8000b2c <__aeabi_dcmpun>
 800af90:	b140      	cbz	r0, 800afa4 <_printf_float+0xec>
 800af92:	464b      	mov	r3, r9
 800af94:	2b00      	cmp	r3, #0
 800af96:	bfbc      	itt	lt
 800af98:	232d      	movlt	r3, #45	; 0x2d
 800af9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800af9e:	4a7f      	ldr	r2, [pc, #508]	; (800b19c <_printf_float+0x2e4>)
 800afa0:	4b7f      	ldr	r3, [pc, #508]	; (800b1a0 <_printf_float+0x2e8>)
 800afa2:	e7d1      	b.n	800af48 <_printf_float+0x90>
 800afa4:	6863      	ldr	r3, [r4, #4]
 800afa6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800afaa:	9206      	str	r2, [sp, #24]
 800afac:	1c5a      	adds	r2, r3, #1
 800afae:	d13f      	bne.n	800b030 <_printf_float+0x178>
 800afb0:	2306      	movs	r3, #6
 800afb2:	6063      	str	r3, [r4, #4]
 800afb4:	9b05      	ldr	r3, [sp, #20]
 800afb6:	6861      	ldr	r1, [r4, #4]
 800afb8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800afbc:	2300      	movs	r3, #0
 800afbe:	9303      	str	r3, [sp, #12]
 800afc0:	ab0a      	add	r3, sp, #40	; 0x28
 800afc2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800afc6:	ab09      	add	r3, sp, #36	; 0x24
 800afc8:	ec49 8b10 	vmov	d0, r8, r9
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	6022      	str	r2, [r4, #0]
 800afd0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800afd4:	4628      	mov	r0, r5
 800afd6:	f7ff fecf 	bl	800ad78 <__cvt>
 800afda:	9b06      	ldr	r3, [sp, #24]
 800afdc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800afde:	2b47      	cmp	r3, #71	; 0x47
 800afe0:	4680      	mov	r8, r0
 800afe2:	d108      	bne.n	800aff6 <_printf_float+0x13e>
 800afe4:	1cc8      	adds	r0, r1, #3
 800afe6:	db02      	blt.n	800afee <_printf_float+0x136>
 800afe8:	6863      	ldr	r3, [r4, #4]
 800afea:	4299      	cmp	r1, r3
 800afec:	dd41      	ble.n	800b072 <_printf_float+0x1ba>
 800afee:	f1ab 0302 	sub.w	r3, fp, #2
 800aff2:	fa5f fb83 	uxtb.w	fp, r3
 800aff6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800affa:	d820      	bhi.n	800b03e <_printf_float+0x186>
 800affc:	3901      	subs	r1, #1
 800affe:	465a      	mov	r2, fp
 800b000:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b004:	9109      	str	r1, [sp, #36]	; 0x24
 800b006:	f7ff ff19 	bl	800ae3c <__exponent>
 800b00a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b00c:	1813      	adds	r3, r2, r0
 800b00e:	2a01      	cmp	r2, #1
 800b010:	4681      	mov	r9, r0
 800b012:	6123      	str	r3, [r4, #16]
 800b014:	dc02      	bgt.n	800b01c <_printf_float+0x164>
 800b016:	6822      	ldr	r2, [r4, #0]
 800b018:	07d2      	lsls	r2, r2, #31
 800b01a:	d501      	bpl.n	800b020 <_printf_float+0x168>
 800b01c:	3301      	adds	r3, #1
 800b01e:	6123      	str	r3, [r4, #16]
 800b020:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b024:	2b00      	cmp	r3, #0
 800b026:	d09c      	beq.n	800af62 <_printf_float+0xaa>
 800b028:	232d      	movs	r3, #45	; 0x2d
 800b02a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b02e:	e798      	b.n	800af62 <_printf_float+0xaa>
 800b030:	9a06      	ldr	r2, [sp, #24]
 800b032:	2a47      	cmp	r2, #71	; 0x47
 800b034:	d1be      	bne.n	800afb4 <_printf_float+0xfc>
 800b036:	2b00      	cmp	r3, #0
 800b038:	d1bc      	bne.n	800afb4 <_printf_float+0xfc>
 800b03a:	2301      	movs	r3, #1
 800b03c:	e7b9      	b.n	800afb2 <_printf_float+0xfa>
 800b03e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b042:	d118      	bne.n	800b076 <_printf_float+0x1be>
 800b044:	2900      	cmp	r1, #0
 800b046:	6863      	ldr	r3, [r4, #4]
 800b048:	dd0b      	ble.n	800b062 <_printf_float+0x1aa>
 800b04a:	6121      	str	r1, [r4, #16]
 800b04c:	b913      	cbnz	r3, 800b054 <_printf_float+0x19c>
 800b04e:	6822      	ldr	r2, [r4, #0]
 800b050:	07d0      	lsls	r0, r2, #31
 800b052:	d502      	bpl.n	800b05a <_printf_float+0x1a2>
 800b054:	3301      	adds	r3, #1
 800b056:	440b      	add	r3, r1
 800b058:	6123      	str	r3, [r4, #16]
 800b05a:	65a1      	str	r1, [r4, #88]	; 0x58
 800b05c:	f04f 0900 	mov.w	r9, #0
 800b060:	e7de      	b.n	800b020 <_printf_float+0x168>
 800b062:	b913      	cbnz	r3, 800b06a <_printf_float+0x1b2>
 800b064:	6822      	ldr	r2, [r4, #0]
 800b066:	07d2      	lsls	r2, r2, #31
 800b068:	d501      	bpl.n	800b06e <_printf_float+0x1b6>
 800b06a:	3302      	adds	r3, #2
 800b06c:	e7f4      	b.n	800b058 <_printf_float+0x1a0>
 800b06e:	2301      	movs	r3, #1
 800b070:	e7f2      	b.n	800b058 <_printf_float+0x1a0>
 800b072:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b076:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b078:	4299      	cmp	r1, r3
 800b07a:	db05      	blt.n	800b088 <_printf_float+0x1d0>
 800b07c:	6823      	ldr	r3, [r4, #0]
 800b07e:	6121      	str	r1, [r4, #16]
 800b080:	07d8      	lsls	r0, r3, #31
 800b082:	d5ea      	bpl.n	800b05a <_printf_float+0x1a2>
 800b084:	1c4b      	adds	r3, r1, #1
 800b086:	e7e7      	b.n	800b058 <_printf_float+0x1a0>
 800b088:	2900      	cmp	r1, #0
 800b08a:	bfd4      	ite	le
 800b08c:	f1c1 0202 	rsble	r2, r1, #2
 800b090:	2201      	movgt	r2, #1
 800b092:	4413      	add	r3, r2
 800b094:	e7e0      	b.n	800b058 <_printf_float+0x1a0>
 800b096:	6823      	ldr	r3, [r4, #0]
 800b098:	055a      	lsls	r2, r3, #21
 800b09a:	d407      	bmi.n	800b0ac <_printf_float+0x1f4>
 800b09c:	6923      	ldr	r3, [r4, #16]
 800b09e:	4642      	mov	r2, r8
 800b0a0:	4631      	mov	r1, r6
 800b0a2:	4628      	mov	r0, r5
 800b0a4:	47b8      	blx	r7
 800b0a6:	3001      	adds	r0, #1
 800b0a8:	d12c      	bne.n	800b104 <_printf_float+0x24c>
 800b0aa:	e764      	b.n	800af76 <_printf_float+0xbe>
 800b0ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b0b0:	f240 80e0 	bls.w	800b274 <_printf_float+0x3bc>
 800b0b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	f7f5 fd04 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0c0:	2800      	cmp	r0, #0
 800b0c2:	d034      	beq.n	800b12e <_printf_float+0x276>
 800b0c4:	4a37      	ldr	r2, [pc, #220]	; (800b1a4 <_printf_float+0x2ec>)
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	4631      	mov	r1, r6
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	47b8      	blx	r7
 800b0ce:	3001      	adds	r0, #1
 800b0d0:	f43f af51 	beq.w	800af76 <_printf_float+0xbe>
 800b0d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	db02      	blt.n	800b0e2 <_printf_float+0x22a>
 800b0dc:	6823      	ldr	r3, [r4, #0]
 800b0de:	07d8      	lsls	r0, r3, #31
 800b0e0:	d510      	bpl.n	800b104 <_printf_float+0x24c>
 800b0e2:	ee18 3a10 	vmov	r3, s16
 800b0e6:	4652      	mov	r2, sl
 800b0e8:	4631      	mov	r1, r6
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	47b8      	blx	r7
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	f43f af41 	beq.w	800af76 <_printf_float+0xbe>
 800b0f4:	f04f 0800 	mov.w	r8, #0
 800b0f8:	f104 091a 	add.w	r9, r4, #26
 800b0fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0fe:	3b01      	subs	r3, #1
 800b100:	4543      	cmp	r3, r8
 800b102:	dc09      	bgt.n	800b118 <_printf_float+0x260>
 800b104:	6823      	ldr	r3, [r4, #0]
 800b106:	079b      	lsls	r3, r3, #30
 800b108:	f100 8107 	bmi.w	800b31a <_printf_float+0x462>
 800b10c:	68e0      	ldr	r0, [r4, #12]
 800b10e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b110:	4298      	cmp	r0, r3
 800b112:	bfb8      	it	lt
 800b114:	4618      	movlt	r0, r3
 800b116:	e730      	b.n	800af7a <_printf_float+0xc2>
 800b118:	2301      	movs	r3, #1
 800b11a:	464a      	mov	r2, r9
 800b11c:	4631      	mov	r1, r6
 800b11e:	4628      	mov	r0, r5
 800b120:	47b8      	blx	r7
 800b122:	3001      	adds	r0, #1
 800b124:	f43f af27 	beq.w	800af76 <_printf_float+0xbe>
 800b128:	f108 0801 	add.w	r8, r8, #1
 800b12c:	e7e6      	b.n	800b0fc <_printf_float+0x244>
 800b12e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b130:	2b00      	cmp	r3, #0
 800b132:	dc39      	bgt.n	800b1a8 <_printf_float+0x2f0>
 800b134:	4a1b      	ldr	r2, [pc, #108]	; (800b1a4 <_printf_float+0x2ec>)
 800b136:	2301      	movs	r3, #1
 800b138:	4631      	mov	r1, r6
 800b13a:	4628      	mov	r0, r5
 800b13c:	47b8      	blx	r7
 800b13e:	3001      	adds	r0, #1
 800b140:	f43f af19 	beq.w	800af76 <_printf_float+0xbe>
 800b144:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b148:	4313      	orrs	r3, r2
 800b14a:	d102      	bne.n	800b152 <_printf_float+0x29a>
 800b14c:	6823      	ldr	r3, [r4, #0]
 800b14e:	07d9      	lsls	r1, r3, #31
 800b150:	d5d8      	bpl.n	800b104 <_printf_float+0x24c>
 800b152:	ee18 3a10 	vmov	r3, s16
 800b156:	4652      	mov	r2, sl
 800b158:	4631      	mov	r1, r6
 800b15a:	4628      	mov	r0, r5
 800b15c:	47b8      	blx	r7
 800b15e:	3001      	adds	r0, #1
 800b160:	f43f af09 	beq.w	800af76 <_printf_float+0xbe>
 800b164:	f04f 0900 	mov.w	r9, #0
 800b168:	f104 0a1a 	add.w	sl, r4, #26
 800b16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b16e:	425b      	negs	r3, r3
 800b170:	454b      	cmp	r3, r9
 800b172:	dc01      	bgt.n	800b178 <_printf_float+0x2c0>
 800b174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b176:	e792      	b.n	800b09e <_printf_float+0x1e6>
 800b178:	2301      	movs	r3, #1
 800b17a:	4652      	mov	r2, sl
 800b17c:	4631      	mov	r1, r6
 800b17e:	4628      	mov	r0, r5
 800b180:	47b8      	blx	r7
 800b182:	3001      	adds	r0, #1
 800b184:	f43f aef7 	beq.w	800af76 <_printf_float+0xbe>
 800b188:	f109 0901 	add.w	r9, r9, #1
 800b18c:	e7ee      	b.n	800b16c <_printf_float+0x2b4>
 800b18e:	bf00      	nop
 800b190:	7fefffff 	.word	0x7fefffff
 800b194:	0800db34 	.word	0x0800db34
 800b198:	0800db38 	.word	0x0800db38
 800b19c:	0800db3c 	.word	0x0800db3c
 800b1a0:	0800db40 	.word	0x0800db40
 800b1a4:	0800db44 	.word	0x0800db44
 800b1a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	bfa8      	it	ge
 800b1b0:	461a      	movge	r2, r3
 800b1b2:	2a00      	cmp	r2, #0
 800b1b4:	4691      	mov	r9, r2
 800b1b6:	dc37      	bgt.n	800b228 <_printf_float+0x370>
 800b1b8:	f04f 0b00 	mov.w	fp, #0
 800b1bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1c0:	f104 021a 	add.w	r2, r4, #26
 800b1c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b1c6:	9305      	str	r3, [sp, #20]
 800b1c8:	eba3 0309 	sub.w	r3, r3, r9
 800b1cc:	455b      	cmp	r3, fp
 800b1ce:	dc33      	bgt.n	800b238 <_printf_float+0x380>
 800b1d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1d4:	429a      	cmp	r2, r3
 800b1d6:	db3b      	blt.n	800b250 <_printf_float+0x398>
 800b1d8:	6823      	ldr	r3, [r4, #0]
 800b1da:	07da      	lsls	r2, r3, #31
 800b1dc:	d438      	bmi.n	800b250 <_printf_float+0x398>
 800b1de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b1e2:	eba2 0903 	sub.w	r9, r2, r3
 800b1e6:	9b05      	ldr	r3, [sp, #20]
 800b1e8:	1ad2      	subs	r2, r2, r3
 800b1ea:	4591      	cmp	r9, r2
 800b1ec:	bfa8      	it	ge
 800b1ee:	4691      	movge	r9, r2
 800b1f0:	f1b9 0f00 	cmp.w	r9, #0
 800b1f4:	dc35      	bgt.n	800b262 <_printf_float+0x3aa>
 800b1f6:	f04f 0800 	mov.w	r8, #0
 800b1fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b1fe:	f104 0a1a 	add.w	sl, r4, #26
 800b202:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b206:	1a9b      	subs	r3, r3, r2
 800b208:	eba3 0309 	sub.w	r3, r3, r9
 800b20c:	4543      	cmp	r3, r8
 800b20e:	f77f af79 	ble.w	800b104 <_printf_float+0x24c>
 800b212:	2301      	movs	r3, #1
 800b214:	4652      	mov	r2, sl
 800b216:	4631      	mov	r1, r6
 800b218:	4628      	mov	r0, r5
 800b21a:	47b8      	blx	r7
 800b21c:	3001      	adds	r0, #1
 800b21e:	f43f aeaa 	beq.w	800af76 <_printf_float+0xbe>
 800b222:	f108 0801 	add.w	r8, r8, #1
 800b226:	e7ec      	b.n	800b202 <_printf_float+0x34a>
 800b228:	4613      	mov	r3, r2
 800b22a:	4631      	mov	r1, r6
 800b22c:	4642      	mov	r2, r8
 800b22e:	4628      	mov	r0, r5
 800b230:	47b8      	blx	r7
 800b232:	3001      	adds	r0, #1
 800b234:	d1c0      	bne.n	800b1b8 <_printf_float+0x300>
 800b236:	e69e      	b.n	800af76 <_printf_float+0xbe>
 800b238:	2301      	movs	r3, #1
 800b23a:	4631      	mov	r1, r6
 800b23c:	4628      	mov	r0, r5
 800b23e:	9205      	str	r2, [sp, #20]
 800b240:	47b8      	blx	r7
 800b242:	3001      	adds	r0, #1
 800b244:	f43f ae97 	beq.w	800af76 <_printf_float+0xbe>
 800b248:	9a05      	ldr	r2, [sp, #20]
 800b24a:	f10b 0b01 	add.w	fp, fp, #1
 800b24e:	e7b9      	b.n	800b1c4 <_printf_float+0x30c>
 800b250:	ee18 3a10 	vmov	r3, s16
 800b254:	4652      	mov	r2, sl
 800b256:	4631      	mov	r1, r6
 800b258:	4628      	mov	r0, r5
 800b25a:	47b8      	blx	r7
 800b25c:	3001      	adds	r0, #1
 800b25e:	d1be      	bne.n	800b1de <_printf_float+0x326>
 800b260:	e689      	b.n	800af76 <_printf_float+0xbe>
 800b262:	9a05      	ldr	r2, [sp, #20]
 800b264:	464b      	mov	r3, r9
 800b266:	4442      	add	r2, r8
 800b268:	4631      	mov	r1, r6
 800b26a:	4628      	mov	r0, r5
 800b26c:	47b8      	blx	r7
 800b26e:	3001      	adds	r0, #1
 800b270:	d1c1      	bne.n	800b1f6 <_printf_float+0x33e>
 800b272:	e680      	b.n	800af76 <_printf_float+0xbe>
 800b274:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b276:	2a01      	cmp	r2, #1
 800b278:	dc01      	bgt.n	800b27e <_printf_float+0x3c6>
 800b27a:	07db      	lsls	r3, r3, #31
 800b27c:	d53a      	bpl.n	800b2f4 <_printf_float+0x43c>
 800b27e:	2301      	movs	r3, #1
 800b280:	4642      	mov	r2, r8
 800b282:	4631      	mov	r1, r6
 800b284:	4628      	mov	r0, r5
 800b286:	47b8      	blx	r7
 800b288:	3001      	adds	r0, #1
 800b28a:	f43f ae74 	beq.w	800af76 <_printf_float+0xbe>
 800b28e:	ee18 3a10 	vmov	r3, s16
 800b292:	4652      	mov	r2, sl
 800b294:	4631      	mov	r1, r6
 800b296:	4628      	mov	r0, r5
 800b298:	47b8      	blx	r7
 800b29a:	3001      	adds	r0, #1
 800b29c:	f43f ae6b 	beq.w	800af76 <_printf_float+0xbe>
 800b2a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b2ac:	f7f5 fc0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b2b0:	b9d8      	cbnz	r0, 800b2ea <_printf_float+0x432>
 800b2b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b2b6:	f108 0201 	add.w	r2, r8, #1
 800b2ba:	4631      	mov	r1, r6
 800b2bc:	4628      	mov	r0, r5
 800b2be:	47b8      	blx	r7
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	d10e      	bne.n	800b2e2 <_printf_float+0x42a>
 800b2c4:	e657      	b.n	800af76 <_printf_float+0xbe>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	4652      	mov	r2, sl
 800b2ca:	4631      	mov	r1, r6
 800b2cc:	4628      	mov	r0, r5
 800b2ce:	47b8      	blx	r7
 800b2d0:	3001      	adds	r0, #1
 800b2d2:	f43f ae50 	beq.w	800af76 <_printf_float+0xbe>
 800b2d6:	f108 0801 	add.w	r8, r8, #1
 800b2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	4543      	cmp	r3, r8
 800b2e0:	dcf1      	bgt.n	800b2c6 <_printf_float+0x40e>
 800b2e2:	464b      	mov	r3, r9
 800b2e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b2e8:	e6da      	b.n	800b0a0 <_printf_float+0x1e8>
 800b2ea:	f04f 0800 	mov.w	r8, #0
 800b2ee:	f104 0a1a 	add.w	sl, r4, #26
 800b2f2:	e7f2      	b.n	800b2da <_printf_float+0x422>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	4642      	mov	r2, r8
 800b2f8:	e7df      	b.n	800b2ba <_printf_float+0x402>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	464a      	mov	r2, r9
 800b2fe:	4631      	mov	r1, r6
 800b300:	4628      	mov	r0, r5
 800b302:	47b8      	blx	r7
 800b304:	3001      	adds	r0, #1
 800b306:	f43f ae36 	beq.w	800af76 <_printf_float+0xbe>
 800b30a:	f108 0801 	add.w	r8, r8, #1
 800b30e:	68e3      	ldr	r3, [r4, #12]
 800b310:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b312:	1a5b      	subs	r3, r3, r1
 800b314:	4543      	cmp	r3, r8
 800b316:	dcf0      	bgt.n	800b2fa <_printf_float+0x442>
 800b318:	e6f8      	b.n	800b10c <_printf_float+0x254>
 800b31a:	f04f 0800 	mov.w	r8, #0
 800b31e:	f104 0919 	add.w	r9, r4, #25
 800b322:	e7f4      	b.n	800b30e <_printf_float+0x456>

0800b324 <_printf_common>:
 800b324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b328:	4616      	mov	r6, r2
 800b32a:	4699      	mov	r9, r3
 800b32c:	688a      	ldr	r2, [r1, #8]
 800b32e:	690b      	ldr	r3, [r1, #16]
 800b330:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b334:	4293      	cmp	r3, r2
 800b336:	bfb8      	it	lt
 800b338:	4613      	movlt	r3, r2
 800b33a:	6033      	str	r3, [r6, #0]
 800b33c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b340:	4607      	mov	r7, r0
 800b342:	460c      	mov	r4, r1
 800b344:	b10a      	cbz	r2, 800b34a <_printf_common+0x26>
 800b346:	3301      	adds	r3, #1
 800b348:	6033      	str	r3, [r6, #0]
 800b34a:	6823      	ldr	r3, [r4, #0]
 800b34c:	0699      	lsls	r1, r3, #26
 800b34e:	bf42      	ittt	mi
 800b350:	6833      	ldrmi	r3, [r6, #0]
 800b352:	3302      	addmi	r3, #2
 800b354:	6033      	strmi	r3, [r6, #0]
 800b356:	6825      	ldr	r5, [r4, #0]
 800b358:	f015 0506 	ands.w	r5, r5, #6
 800b35c:	d106      	bne.n	800b36c <_printf_common+0x48>
 800b35e:	f104 0a19 	add.w	sl, r4, #25
 800b362:	68e3      	ldr	r3, [r4, #12]
 800b364:	6832      	ldr	r2, [r6, #0]
 800b366:	1a9b      	subs	r3, r3, r2
 800b368:	42ab      	cmp	r3, r5
 800b36a:	dc26      	bgt.n	800b3ba <_printf_common+0x96>
 800b36c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b370:	1e13      	subs	r3, r2, #0
 800b372:	6822      	ldr	r2, [r4, #0]
 800b374:	bf18      	it	ne
 800b376:	2301      	movne	r3, #1
 800b378:	0692      	lsls	r2, r2, #26
 800b37a:	d42b      	bmi.n	800b3d4 <_printf_common+0xb0>
 800b37c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b380:	4649      	mov	r1, r9
 800b382:	4638      	mov	r0, r7
 800b384:	47c0      	blx	r8
 800b386:	3001      	adds	r0, #1
 800b388:	d01e      	beq.n	800b3c8 <_printf_common+0xa4>
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	6922      	ldr	r2, [r4, #16]
 800b38e:	f003 0306 	and.w	r3, r3, #6
 800b392:	2b04      	cmp	r3, #4
 800b394:	bf02      	ittt	eq
 800b396:	68e5      	ldreq	r5, [r4, #12]
 800b398:	6833      	ldreq	r3, [r6, #0]
 800b39a:	1aed      	subeq	r5, r5, r3
 800b39c:	68a3      	ldr	r3, [r4, #8]
 800b39e:	bf0c      	ite	eq
 800b3a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3a4:	2500      	movne	r5, #0
 800b3a6:	4293      	cmp	r3, r2
 800b3a8:	bfc4      	itt	gt
 800b3aa:	1a9b      	subgt	r3, r3, r2
 800b3ac:	18ed      	addgt	r5, r5, r3
 800b3ae:	2600      	movs	r6, #0
 800b3b0:	341a      	adds	r4, #26
 800b3b2:	42b5      	cmp	r5, r6
 800b3b4:	d11a      	bne.n	800b3ec <_printf_common+0xc8>
 800b3b6:	2000      	movs	r0, #0
 800b3b8:	e008      	b.n	800b3cc <_printf_common+0xa8>
 800b3ba:	2301      	movs	r3, #1
 800b3bc:	4652      	mov	r2, sl
 800b3be:	4649      	mov	r1, r9
 800b3c0:	4638      	mov	r0, r7
 800b3c2:	47c0      	blx	r8
 800b3c4:	3001      	adds	r0, #1
 800b3c6:	d103      	bne.n	800b3d0 <_printf_common+0xac>
 800b3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d0:	3501      	adds	r5, #1
 800b3d2:	e7c6      	b.n	800b362 <_printf_common+0x3e>
 800b3d4:	18e1      	adds	r1, r4, r3
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	2030      	movs	r0, #48	; 0x30
 800b3da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3de:	4422      	add	r2, r4
 800b3e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3e8:	3302      	adds	r3, #2
 800b3ea:	e7c7      	b.n	800b37c <_printf_common+0x58>
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	4622      	mov	r2, r4
 800b3f0:	4649      	mov	r1, r9
 800b3f2:	4638      	mov	r0, r7
 800b3f4:	47c0      	blx	r8
 800b3f6:	3001      	adds	r0, #1
 800b3f8:	d0e6      	beq.n	800b3c8 <_printf_common+0xa4>
 800b3fa:	3601      	adds	r6, #1
 800b3fc:	e7d9      	b.n	800b3b2 <_printf_common+0x8e>
	...

0800b400 <_printf_i>:
 800b400:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b404:	7e0f      	ldrb	r7, [r1, #24]
 800b406:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b408:	2f78      	cmp	r7, #120	; 0x78
 800b40a:	4691      	mov	r9, r2
 800b40c:	4680      	mov	r8, r0
 800b40e:	460c      	mov	r4, r1
 800b410:	469a      	mov	sl, r3
 800b412:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b416:	d807      	bhi.n	800b428 <_printf_i+0x28>
 800b418:	2f62      	cmp	r7, #98	; 0x62
 800b41a:	d80a      	bhi.n	800b432 <_printf_i+0x32>
 800b41c:	2f00      	cmp	r7, #0
 800b41e:	f000 80d4 	beq.w	800b5ca <_printf_i+0x1ca>
 800b422:	2f58      	cmp	r7, #88	; 0x58
 800b424:	f000 80c0 	beq.w	800b5a8 <_printf_i+0x1a8>
 800b428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b42c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b430:	e03a      	b.n	800b4a8 <_printf_i+0xa8>
 800b432:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b436:	2b15      	cmp	r3, #21
 800b438:	d8f6      	bhi.n	800b428 <_printf_i+0x28>
 800b43a:	a101      	add	r1, pc, #4	; (adr r1, 800b440 <_printf_i+0x40>)
 800b43c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b440:	0800b499 	.word	0x0800b499
 800b444:	0800b4ad 	.word	0x0800b4ad
 800b448:	0800b429 	.word	0x0800b429
 800b44c:	0800b429 	.word	0x0800b429
 800b450:	0800b429 	.word	0x0800b429
 800b454:	0800b429 	.word	0x0800b429
 800b458:	0800b4ad 	.word	0x0800b4ad
 800b45c:	0800b429 	.word	0x0800b429
 800b460:	0800b429 	.word	0x0800b429
 800b464:	0800b429 	.word	0x0800b429
 800b468:	0800b429 	.word	0x0800b429
 800b46c:	0800b5b1 	.word	0x0800b5b1
 800b470:	0800b4d9 	.word	0x0800b4d9
 800b474:	0800b56b 	.word	0x0800b56b
 800b478:	0800b429 	.word	0x0800b429
 800b47c:	0800b429 	.word	0x0800b429
 800b480:	0800b5d3 	.word	0x0800b5d3
 800b484:	0800b429 	.word	0x0800b429
 800b488:	0800b4d9 	.word	0x0800b4d9
 800b48c:	0800b429 	.word	0x0800b429
 800b490:	0800b429 	.word	0x0800b429
 800b494:	0800b573 	.word	0x0800b573
 800b498:	682b      	ldr	r3, [r5, #0]
 800b49a:	1d1a      	adds	r2, r3, #4
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	602a      	str	r2, [r5, #0]
 800b4a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b4a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	e09f      	b.n	800b5ec <_printf_i+0x1ec>
 800b4ac:	6820      	ldr	r0, [r4, #0]
 800b4ae:	682b      	ldr	r3, [r5, #0]
 800b4b0:	0607      	lsls	r7, r0, #24
 800b4b2:	f103 0104 	add.w	r1, r3, #4
 800b4b6:	6029      	str	r1, [r5, #0]
 800b4b8:	d501      	bpl.n	800b4be <_printf_i+0xbe>
 800b4ba:	681e      	ldr	r6, [r3, #0]
 800b4bc:	e003      	b.n	800b4c6 <_printf_i+0xc6>
 800b4be:	0646      	lsls	r6, r0, #25
 800b4c0:	d5fb      	bpl.n	800b4ba <_printf_i+0xba>
 800b4c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b4c6:	2e00      	cmp	r6, #0
 800b4c8:	da03      	bge.n	800b4d2 <_printf_i+0xd2>
 800b4ca:	232d      	movs	r3, #45	; 0x2d
 800b4cc:	4276      	negs	r6, r6
 800b4ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4d2:	485a      	ldr	r0, [pc, #360]	; (800b63c <_printf_i+0x23c>)
 800b4d4:	230a      	movs	r3, #10
 800b4d6:	e012      	b.n	800b4fe <_printf_i+0xfe>
 800b4d8:	682b      	ldr	r3, [r5, #0]
 800b4da:	6820      	ldr	r0, [r4, #0]
 800b4dc:	1d19      	adds	r1, r3, #4
 800b4de:	6029      	str	r1, [r5, #0]
 800b4e0:	0605      	lsls	r5, r0, #24
 800b4e2:	d501      	bpl.n	800b4e8 <_printf_i+0xe8>
 800b4e4:	681e      	ldr	r6, [r3, #0]
 800b4e6:	e002      	b.n	800b4ee <_printf_i+0xee>
 800b4e8:	0641      	lsls	r1, r0, #25
 800b4ea:	d5fb      	bpl.n	800b4e4 <_printf_i+0xe4>
 800b4ec:	881e      	ldrh	r6, [r3, #0]
 800b4ee:	4853      	ldr	r0, [pc, #332]	; (800b63c <_printf_i+0x23c>)
 800b4f0:	2f6f      	cmp	r7, #111	; 0x6f
 800b4f2:	bf0c      	ite	eq
 800b4f4:	2308      	moveq	r3, #8
 800b4f6:	230a      	movne	r3, #10
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b4fe:	6865      	ldr	r5, [r4, #4]
 800b500:	60a5      	str	r5, [r4, #8]
 800b502:	2d00      	cmp	r5, #0
 800b504:	bfa2      	ittt	ge
 800b506:	6821      	ldrge	r1, [r4, #0]
 800b508:	f021 0104 	bicge.w	r1, r1, #4
 800b50c:	6021      	strge	r1, [r4, #0]
 800b50e:	b90e      	cbnz	r6, 800b514 <_printf_i+0x114>
 800b510:	2d00      	cmp	r5, #0
 800b512:	d04b      	beq.n	800b5ac <_printf_i+0x1ac>
 800b514:	4615      	mov	r5, r2
 800b516:	fbb6 f1f3 	udiv	r1, r6, r3
 800b51a:	fb03 6711 	mls	r7, r3, r1, r6
 800b51e:	5dc7      	ldrb	r7, [r0, r7]
 800b520:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b524:	4637      	mov	r7, r6
 800b526:	42bb      	cmp	r3, r7
 800b528:	460e      	mov	r6, r1
 800b52a:	d9f4      	bls.n	800b516 <_printf_i+0x116>
 800b52c:	2b08      	cmp	r3, #8
 800b52e:	d10b      	bne.n	800b548 <_printf_i+0x148>
 800b530:	6823      	ldr	r3, [r4, #0]
 800b532:	07de      	lsls	r6, r3, #31
 800b534:	d508      	bpl.n	800b548 <_printf_i+0x148>
 800b536:	6923      	ldr	r3, [r4, #16]
 800b538:	6861      	ldr	r1, [r4, #4]
 800b53a:	4299      	cmp	r1, r3
 800b53c:	bfde      	ittt	le
 800b53e:	2330      	movle	r3, #48	; 0x30
 800b540:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b544:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b548:	1b52      	subs	r2, r2, r5
 800b54a:	6122      	str	r2, [r4, #16]
 800b54c:	f8cd a000 	str.w	sl, [sp]
 800b550:	464b      	mov	r3, r9
 800b552:	aa03      	add	r2, sp, #12
 800b554:	4621      	mov	r1, r4
 800b556:	4640      	mov	r0, r8
 800b558:	f7ff fee4 	bl	800b324 <_printf_common>
 800b55c:	3001      	adds	r0, #1
 800b55e:	d14a      	bne.n	800b5f6 <_printf_i+0x1f6>
 800b560:	f04f 30ff 	mov.w	r0, #4294967295
 800b564:	b004      	add	sp, #16
 800b566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b56a:	6823      	ldr	r3, [r4, #0]
 800b56c:	f043 0320 	orr.w	r3, r3, #32
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	4833      	ldr	r0, [pc, #204]	; (800b640 <_printf_i+0x240>)
 800b574:	2778      	movs	r7, #120	; 0x78
 800b576:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b57a:	6823      	ldr	r3, [r4, #0]
 800b57c:	6829      	ldr	r1, [r5, #0]
 800b57e:	061f      	lsls	r7, r3, #24
 800b580:	f851 6b04 	ldr.w	r6, [r1], #4
 800b584:	d402      	bmi.n	800b58c <_printf_i+0x18c>
 800b586:	065f      	lsls	r7, r3, #25
 800b588:	bf48      	it	mi
 800b58a:	b2b6      	uxthmi	r6, r6
 800b58c:	07df      	lsls	r7, r3, #31
 800b58e:	bf48      	it	mi
 800b590:	f043 0320 	orrmi.w	r3, r3, #32
 800b594:	6029      	str	r1, [r5, #0]
 800b596:	bf48      	it	mi
 800b598:	6023      	strmi	r3, [r4, #0]
 800b59a:	b91e      	cbnz	r6, 800b5a4 <_printf_i+0x1a4>
 800b59c:	6823      	ldr	r3, [r4, #0]
 800b59e:	f023 0320 	bic.w	r3, r3, #32
 800b5a2:	6023      	str	r3, [r4, #0]
 800b5a4:	2310      	movs	r3, #16
 800b5a6:	e7a7      	b.n	800b4f8 <_printf_i+0xf8>
 800b5a8:	4824      	ldr	r0, [pc, #144]	; (800b63c <_printf_i+0x23c>)
 800b5aa:	e7e4      	b.n	800b576 <_printf_i+0x176>
 800b5ac:	4615      	mov	r5, r2
 800b5ae:	e7bd      	b.n	800b52c <_printf_i+0x12c>
 800b5b0:	682b      	ldr	r3, [r5, #0]
 800b5b2:	6826      	ldr	r6, [r4, #0]
 800b5b4:	6961      	ldr	r1, [r4, #20]
 800b5b6:	1d18      	adds	r0, r3, #4
 800b5b8:	6028      	str	r0, [r5, #0]
 800b5ba:	0635      	lsls	r5, r6, #24
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	d501      	bpl.n	800b5c4 <_printf_i+0x1c4>
 800b5c0:	6019      	str	r1, [r3, #0]
 800b5c2:	e002      	b.n	800b5ca <_printf_i+0x1ca>
 800b5c4:	0670      	lsls	r0, r6, #25
 800b5c6:	d5fb      	bpl.n	800b5c0 <_printf_i+0x1c0>
 800b5c8:	8019      	strh	r1, [r3, #0]
 800b5ca:	2300      	movs	r3, #0
 800b5cc:	6123      	str	r3, [r4, #16]
 800b5ce:	4615      	mov	r5, r2
 800b5d0:	e7bc      	b.n	800b54c <_printf_i+0x14c>
 800b5d2:	682b      	ldr	r3, [r5, #0]
 800b5d4:	1d1a      	adds	r2, r3, #4
 800b5d6:	602a      	str	r2, [r5, #0]
 800b5d8:	681d      	ldr	r5, [r3, #0]
 800b5da:	6862      	ldr	r2, [r4, #4]
 800b5dc:	2100      	movs	r1, #0
 800b5de:	4628      	mov	r0, r5
 800b5e0:	f7f4 fdf6 	bl	80001d0 <memchr>
 800b5e4:	b108      	cbz	r0, 800b5ea <_printf_i+0x1ea>
 800b5e6:	1b40      	subs	r0, r0, r5
 800b5e8:	6060      	str	r0, [r4, #4]
 800b5ea:	6863      	ldr	r3, [r4, #4]
 800b5ec:	6123      	str	r3, [r4, #16]
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5f4:	e7aa      	b.n	800b54c <_printf_i+0x14c>
 800b5f6:	6923      	ldr	r3, [r4, #16]
 800b5f8:	462a      	mov	r2, r5
 800b5fa:	4649      	mov	r1, r9
 800b5fc:	4640      	mov	r0, r8
 800b5fe:	47d0      	blx	sl
 800b600:	3001      	adds	r0, #1
 800b602:	d0ad      	beq.n	800b560 <_printf_i+0x160>
 800b604:	6823      	ldr	r3, [r4, #0]
 800b606:	079b      	lsls	r3, r3, #30
 800b608:	d413      	bmi.n	800b632 <_printf_i+0x232>
 800b60a:	68e0      	ldr	r0, [r4, #12]
 800b60c:	9b03      	ldr	r3, [sp, #12]
 800b60e:	4298      	cmp	r0, r3
 800b610:	bfb8      	it	lt
 800b612:	4618      	movlt	r0, r3
 800b614:	e7a6      	b.n	800b564 <_printf_i+0x164>
 800b616:	2301      	movs	r3, #1
 800b618:	4632      	mov	r2, r6
 800b61a:	4649      	mov	r1, r9
 800b61c:	4640      	mov	r0, r8
 800b61e:	47d0      	blx	sl
 800b620:	3001      	adds	r0, #1
 800b622:	d09d      	beq.n	800b560 <_printf_i+0x160>
 800b624:	3501      	adds	r5, #1
 800b626:	68e3      	ldr	r3, [r4, #12]
 800b628:	9903      	ldr	r1, [sp, #12]
 800b62a:	1a5b      	subs	r3, r3, r1
 800b62c:	42ab      	cmp	r3, r5
 800b62e:	dcf2      	bgt.n	800b616 <_printf_i+0x216>
 800b630:	e7eb      	b.n	800b60a <_printf_i+0x20a>
 800b632:	2500      	movs	r5, #0
 800b634:	f104 0619 	add.w	r6, r4, #25
 800b638:	e7f5      	b.n	800b626 <_printf_i+0x226>
 800b63a:	bf00      	nop
 800b63c:	0800db46 	.word	0x0800db46
 800b640:	0800db57 	.word	0x0800db57

0800b644 <std>:
 800b644:	2300      	movs	r3, #0
 800b646:	b510      	push	{r4, lr}
 800b648:	4604      	mov	r4, r0
 800b64a:	e9c0 3300 	strd	r3, r3, [r0]
 800b64e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b652:	6083      	str	r3, [r0, #8]
 800b654:	8181      	strh	r1, [r0, #12]
 800b656:	6643      	str	r3, [r0, #100]	; 0x64
 800b658:	81c2      	strh	r2, [r0, #14]
 800b65a:	6183      	str	r3, [r0, #24]
 800b65c:	4619      	mov	r1, r3
 800b65e:	2208      	movs	r2, #8
 800b660:	305c      	adds	r0, #92	; 0x5c
 800b662:	f000 f902 	bl	800b86a <memset>
 800b666:	4b05      	ldr	r3, [pc, #20]	; (800b67c <std+0x38>)
 800b668:	6263      	str	r3, [r4, #36]	; 0x24
 800b66a:	4b05      	ldr	r3, [pc, #20]	; (800b680 <std+0x3c>)
 800b66c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b66e:	4b05      	ldr	r3, [pc, #20]	; (800b684 <std+0x40>)
 800b670:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b672:	4b05      	ldr	r3, [pc, #20]	; (800b688 <std+0x44>)
 800b674:	6224      	str	r4, [r4, #32]
 800b676:	6323      	str	r3, [r4, #48]	; 0x30
 800b678:	bd10      	pop	{r4, pc}
 800b67a:	bf00      	nop
 800b67c:	0800b7e5 	.word	0x0800b7e5
 800b680:	0800b807 	.word	0x0800b807
 800b684:	0800b83f 	.word	0x0800b83f
 800b688:	0800b863 	.word	0x0800b863

0800b68c <stdio_exit_handler>:
 800b68c:	4a02      	ldr	r2, [pc, #8]	; (800b698 <stdio_exit_handler+0xc>)
 800b68e:	4903      	ldr	r1, [pc, #12]	; (800b69c <stdio_exit_handler+0x10>)
 800b690:	4803      	ldr	r0, [pc, #12]	; (800b6a0 <stdio_exit_handler+0x14>)
 800b692:	f000 b869 	b.w	800b768 <_fwalk_sglue>
 800b696:	bf00      	nop
 800b698:	20000118 	.word	0x20000118
 800b69c:	0800d311 	.word	0x0800d311
 800b6a0:	20000124 	.word	0x20000124

0800b6a4 <cleanup_stdio>:
 800b6a4:	6841      	ldr	r1, [r0, #4]
 800b6a6:	4b0c      	ldr	r3, [pc, #48]	; (800b6d8 <cleanup_stdio+0x34>)
 800b6a8:	4299      	cmp	r1, r3
 800b6aa:	b510      	push	{r4, lr}
 800b6ac:	4604      	mov	r4, r0
 800b6ae:	d001      	beq.n	800b6b4 <cleanup_stdio+0x10>
 800b6b0:	f001 fe2e 	bl	800d310 <_fflush_r>
 800b6b4:	68a1      	ldr	r1, [r4, #8]
 800b6b6:	4b09      	ldr	r3, [pc, #36]	; (800b6dc <cleanup_stdio+0x38>)
 800b6b8:	4299      	cmp	r1, r3
 800b6ba:	d002      	beq.n	800b6c2 <cleanup_stdio+0x1e>
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f001 fe27 	bl	800d310 <_fflush_r>
 800b6c2:	68e1      	ldr	r1, [r4, #12]
 800b6c4:	4b06      	ldr	r3, [pc, #24]	; (800b6e0 <cleanup_stdio+0x3c>)
 800b6c6:	4299      	cmp	r1, r3
 800b6c8:	d004      	beq.n	800b6d4 <cleanup_stdio+0x30>
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6d0:	f001 be1e 	b.w	800d310 <_fflush_r>
 800b6d4:	bd10      	pop	{r4, pc}
 800b6d6:	bf00      	nop
 800b6d8:	20000fd8 	.word	0x20000fd8
 800b6dc:	20001040 	.word	0x20001040
 800b6e0:	200010a8 	.word	0x200010a8

0800b6e4 <global_stdio_init.part.0>:
 800b6e4:	b510      	push	{r4, lr}
 800b6e6:	4b0b      	ldr	r3, [pc, #44]	; (800b714 <global_stdio_init.part.0+0x30>)
 800b6e8:	4c0b      	ldr	r4, [pc, #44]	; (800b718 <global_stdio_init.part.0+0x34>)
 800b6ea:	4a0c      	ldr	r2, [pc, #48]	; (800b71c <global_stdio_init.part.0+0x38>)
 800b6ec:	601a      	str	r2, [r3, #0]
 800b6ee:	4620      	mov	r0, r4
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	2104      	movs	r1, #4
 800b6f4:	f7ff ffa6 	bl	800b644 <std>
 800b6f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	2109      	movs	r1, #9
 800b700:	f7ff ffa0 	bl	800b644 <std>
 800b704:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b708:	2202      	movs	r2, #2
 800b70a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b70e:	2112      	movs	r1, #18
 800b710:	f7ff bf98 	b.w	800b644 <std>
 800b714:	20001110 	.word	0x20001110
 800b718:	20000fd8 	.word	0x20000fd8
 800b71c:	0800b68d 	.word	0x0800b68d

0800b720 <__sfp_lock_acquire>:
 800b720:	4801      	ldr	r0, [pc, #4]	; (800b728 <__sfp_lock_acquire+0x8>)
 800b722:	f000 b91f 	b.w	800b964 <__retarget_lock_acquire_recursive>
 800b726:	bf00      	nop
 800b728:	20001119 	.word	0x20001119

0800b72c <__sfp_lock_release>:
 800b72c:	4801      	ldr	r0, [pc, #4]	; (800b734 <__sfp_lock_release+0x8>)
 800b72e:	f000 b91a 	b.w	800b966 <__retarget_lock_release_recursive>
 800b732:	bf00      	nop
 800b734:	20001119 	.word	0x20001119

0800b738 <__sinit>:
 800b738:	b510      	push	{r4, lr}
 800b73a:	4604      	mov	r4, r0
 800b73c:	f7ff fff0 	bl	800b720 <__sfp_lock_acquire>
 800b740:	6a23      	ldr	r3, [r4, #32]
 800b742:	b11b      	cbz	r3, 800b74c <__sinit+0x14>
 800b744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b748:	f7ff bff0 	b.w	800b72c <__sfp_lock_release>
 800b74c:	4b04      	ldr	r3, [pc, #16]	; (800b760 <__sinit+0x28>)
 800b74e:	6223      	str	r3, [r4, #32]
 800b750:	4b04      	ldr	r3, [pc, #16]	; (800b764 <__sinit+0x2c>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	2b00      	cmp	r3, #0
 800b756:	d1f5      	bne.n	800b744 <__sinit+0xc>
 800b758:	f7ff ffc4 	bl	800b6e4 <global_stdio_init.part.0>
 800b75c:	e7f2      	b.n	800b744 <__sinit+0xc>
 800b75e:	bf00      	nop
 800b760:	0800b6a5 	.word	0x0800b6a5
 800b764:	20001110 	.word	0x20001110

0800b768 <_fwalk_sglue>:
 800b768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b76c:	4607      	mov	r7, r0
 800b76e:	4688      	mov	r8, r1
 800b770:	4614      	mov	r4, r2
 800b772:	2600      	movs	r6, #0
 800b774:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b778:	f1b9 0901 	subs.w	r9, r9, #1
 800b77c:	d505      	bpl.n	800b78a <_fwalk_sglue+0x22>
 800b77e:	6824      	ldr	r4, [r4, #0]
 800b780:	2c00      	cmp	r4, #0
 800b782:	d1f7      	bne.n	800b774 <_fwalk_sglue+0xc>
 800b784:	4630      	mov	r0, r6
 800b786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b78a:	89ab      	ldrh	r3, [r5, #12]
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d907      	bls.n	800b7a0 <_fwalk_sglue+0x38>
 800b790:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b794:	3301      	adds	r3, #1
 800b796:	d003      	beq.n	800b7a0 <_fwalk_sglue+0x38>
 800b798:	4629      	mov	r1, r5
 800b79a:	4638      	mov	r0, r7
 800b79c:	47c0      	blx	r8
 800b79e:	4306      	orrs	r6, r0
 800b7a0:	3568      	adds	r5, #104	; 0x68
 800b7a2:	e7e9      	b.n	800b778 <_fwalk_sglue+0x10>

0800b7a4 <siprintf>:
 800b7a4:	b40e      	push	{r1, r2, r3}
 800b7a6:	b500      	push	{lr}
 800b7a8:	b09c      	sub	sp, #112	; 0x70
 800b7aa:	ab1d      	add	r3, sp, #116	; 0x74
 800b7ac:	9002      	str	r0, [sp, #8]
 800b7ae:	9006      	str	r0, [sp, #24]
 800b7b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7b4:	4809      	ldr	r0, [pc, #36]	; (800b7dc <siprintf+0x38>)
 800b7b6:	9107      	str	r1, [sp, #28]
 800b7b8:	9104      	str	r1, [sp, #16]
 800b7ba:	4909      	ldr	r1, [pc, #36]	; (800b7e0 <siprintf+0x3c>)
 800b7bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7c0:	9105      	str	r1, [sp, #20]
 800b7c2:	6800      	ldr	r0, [r0, #0]
 800b7c4:	9301      	str	r3, [sp, #4]
 800b7c6:	a902      	add	r1, sp, #8
 800b7c8:	f001 fc1e 	bl	800d008 <_svfiprintf_r>
 800b7cc:	9b02      	ldr	r3, [sp, #8]
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	701a      	strb	r2, [r3, #0]
 800b7d2:	b01c      	add	sp, #112	; 0x70
 800b7d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7d8:	b003      	add	sp, #12
 800b7da:	4770      	bx	lr
 800b7dc:	20000170 	.word	0x20000170
 800b7e0:	ffff0208 	.word	0xffff0208

0800b7e4 <__sread>:
 800b7e4:	b510      	push	{r4, lr}
 800b7e6:	460c      	mov	r4, r1
 800b7e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7ec:	f000 f86c 	bl	800b8c8 <_read_r>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	bfab      	itete	ge
 800b7f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b7f6:	89a3      	ldrhlt	r3, [r4, #12]
 800b7f8:	181b      	addge	r3, r3, r0
 800b7fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b7fe:	bfac      	ite	ge
 800b800:	6563      	strge	r3, [r4, #84]	; 0x54
 800b802:	81a3      	strhlt	r3, [r4, #12]
 800b804:	bd10      	pop	{r4, pc}

0800b806 <__swrite>:
 800b806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b80a:	461f      	mov	r7, r3
 800b80c:	898b      	ldrh	r3, [r1, #12]
 800b80e:	05db      	lsls	r3, r3, #23
 800b810:	4605      	mov	r5, r0
 800b812:	460c      	mov	r4, r1
 800b814:	4616      	mov	r6, r2
 800b816:	d505      	bpl.n	800b824 <__swrite+0x1e>
 800b818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b81c:	2302      	movs	r3, #2
 800b81e:	2200      	movs	r2, #0
 800b820:	f000 f840 	bl	800b8a4 <_lseek_r>
 800b824:	89a3      	ldrh	r3, [r4, #12]
 800b826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b82a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b82e:	81a3      	strh	r3, [r4, #12]
 800b830:	4632      	mov	r2, r6
 800b832:	463b      	mov	r3, r7
 800b834:	4628      	mov	r0, r5
 800b836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b83a:	f000 b857 	b.w	800b8ec <_write_r>

0800b83e <__sseek>:
 800b83e:	b510      	push	{r4, lr}
 800b840:	460c      	mov	r4, r1
 800b842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b846:	f000 f82d 	bl	800b8a4 <_lseek_r>
 800b84a:	1c43      	adds	r3, r0, #1
 800b84c:	89a3      	ldrh	r3, [r4, #12]
 800b84e:	bf15      	itete	ne
 800b850:	6560      	strne	r0, [r4, #84]	; 0x54
 800b852:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b856:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b85a:	81a3      	strheq	r3, [r4, #12]
 800b85c:	bf18      	it	ne
 800b85e:	81a3      	strhne	r3, [r4, #12]
 800b860:	bd10      	pop	{r4, pc}

0800b862 <__sclose>:
 800b862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b866:	f000 b80d 	b.w	800b884 <_close_r>

0800b86a <memset>:
 800b86a:	4402      	add	r2, r0
 800b86c:	4603      	mov	r3, r0
 800b86e:	4293      	cmp	r3, r2
 800b870:	d100      	bne.n	800b874 <memset+0xa>
 800b872:	4770      	bx	lr
 800b874:	f803 1b01 	strb.w	r1, [r3], #1
 800b878:	e7f9      	b.n	800b86e <memset+0x4>
	...

0800b87c <_localeconv_r>:
 800b87c:	4800      	ldr	r0, [pc, #0]	; (800b880 <_localeconv_r+0x4>)
 800b87e:	4770      	bx	lr
 800b880:	20000264 	.word	0x20000264

0800b884 <_close_r>:
 800b884:	b538      	push	{r3, r4, r5, lr}
 800b886:	4d06      	ldr	r5, [pc, #24]	; (800b8a0 <_close_r+0x1c>)
 800b888:	2300      	movs	r3, #0
 800b88a:	4604      	mov	r4, r0
 800b88c:	4608      	mov	r0, r1
 800b88e:	602b      	str	r3, [r5, #0]
 800b890:	f7f6 fc51 	bl	8002136 <_close>
 800b894:	1c43      	adds	r3, r0, #1
 800b896:	d102      	bne.n	800b89e <_close_r+0x1a>
 800b898:	682b      	ldr	r3, [r5, #0]
 800b89a:	b103      	cbz	r3, 800b89e <_close_r+0x1a>
 800b89c:	6023      	str	r3, [r4, #0]
 800b89e:	bd38      	pop	{r3, r4, r5, pc}
 800b8a0:	20001114 	.word	0x20001114

0800b8a4 <_lseek_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4d07      	ldr	r5, [pc, #28]	; (800b8c4 <_lseek_r+0x20>)
 800b8a8:	4604      	mov	r4, r0
 800b8aa:	4608      	mov	r0, r1
 800b8ac:	4611      	mov	r1, r2
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	602a      	str	r2, [r5, #0]
 800b8b2:	461a      	mov	r2, r3
 800b8b4:	f7f6 fc66 	bl	8002184 <_lseek>
 800b8b8:	1c43      	adds	r3, r0, #1
 800b8ba:	d102      	bne.n	800b8c2 <_lseek_r+0x1e>
 800b8bc:	682b      	ldr	r3, [r5, #0]
 800b8be:	b103      	cbz	r3, 800b8c2 <_lseek_r+0x1e>
 800b8c0:	6023      	str	r3, [r4, #0]
 800b8c2:	bd38      	pop	{r3, r4, r5, pc}
 800b8c4:	20001114 	.word	0x20001114

0800b8c8 <_read_r>:
 800b8c8:	b538      	push	{r3, r4, r5, lr}
 800b8ca:	4d07      	ldr	r5, [pc, #28]	; (800b8e8 <_read_r+0x20>)
 800b8cc:	4604      	mov	r4, r0
 800b8ce:	4608      	mov	r0, r1
 800b8d0:	4611      	mov	r1, r2
 800b8d2:	2200      	movs	r2, #0
 800b8d4:	602a      	str	r2, [r5, #0]
 800b8d6:	461a      	mov	r2, r3
 800b8d8:	f7f6 fbf4 	bl	80020c4 <_read>
 800b8dc:	1c43      	adds	r3, r0, #1
 800b8de:	d102      	bne.n	800b8e6 <_read_r+0x1e>
 800b8e0:	682b      	ldr	r3, [r5, #0]
 800b8e2:	b103      	cbz	r3, 800b8e6 <_read_r+0x1e>
 800b8e4:	6023      	str	r3, [r4, #0]
 800b8e6:	bd38      	pop	{r3, r4, r5, pc}
 800b8e8:	20001114 	.word	0x20001114

0800b8ec <_write_r>:
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	4d07      	ldr	r5, [pc, #28]	; (800b90c <_write_r+0x20>)
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	4608      	mov	r0, r1
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	602a      	str	r2, [r5, #0]
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	f7f6 fbff 	bl	80020fe <_write>
 800b900:	1c43      	adds	r3, r0, #1
 800b902:	d102      	bne.n	800b90a <_write_r+0x1e>
 800b904:	682b      	ldr	r3, [r5, #0]
 800b906:	b103      	cbz	r3, 800b90a <_write_r+0x1e>
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
 800b90c:	20001114 	.word	0x20001114

0800b910 <__errno>:
 800b910:	4b01      	ldr	r3, [pc, #4]	; (800b918 <__errno+0x8>)
 800b912:	6818      	ldr	r0, [r3, #0]
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	20000170 	.word	0x20000170

0800b91c <__libc_init_array>:
 800b91c:	b570      	push	{r4, r5, r6, lr}
 800b91e:	4d0d      	ldr	r5, [pc, #52]	; (800b954 <__libc_init_array+0x38>)
 800b920:	4c0d      	ldr	r4, [pc, #52]	; (800b958 <__libc_init_array+0x3c>)
 800b922:	1b64      	subs	r4, r4, r5
 800b924:	10a4      	asrs	r4, r4, #2
 800b926:	2600      	movs	r6, #0
 800b928:	42a6      	cmp	r6, r4
 800b92a:	d109      	bne.n	800b940 <__libc_init_array+0x24>
 800b92c:	4d0b      	ldr	r5, [pc, #44]	; (800b95c <__libc_init_array+0x40>)
 800b92e:	4c0c      	ldr	r4, [pc, #48]	; (800b960 <__libc_init_array+0x44>)
 800b930:	f002 f892 	bl	800da58 <_init>
 800b934:	1b64      	subs	r4, r4, r5
 800b936:	10a4      	asrs	r4, r4, #2
 800b938:	2600      	movs	r6, #0
 800b93a:	42a6      	cmp	r6, r4
 800b93c:	d105      	bne.n	800b94a <__libc_init_array+0x2e>
 800b93e:	bd70      	pop	{r4, r5, r6, pc}
 800b940:	f855 3b04 	ldr.w	r3, [r5], #4
 800b944:	4798      	blx	r3
 800b946:	3601      	adds	r6, #1
 800b948:	e7ee      	b.n	800b928 <__libc_init_array+0xc>
 800b94a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b94e:	4798      	blx	r3
 800b950:	3601      	adds	r6, #1
 800b952:	e7f2      	b.n	800b93a <__libc_init_array+0x1e>
 800b954:	0800deac 	.word	0x0800deac
 800b958:	0800deac 	.word	0x0800deac
 800b95c:	0800deac 	.word	0x0800deac
 800b960:	0800deb0 	.word	0x0800deb0

0800b964 <__retarget_lock_acquire_recursive>:
 800b964:	4770      	bx	lr

0800b966 <__retarget_lock_release_recursive>:
 800b966:	4770      	bx	lr

0800b968 <quorem>:
 800b968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96c:	6903      	ldr	r3, [r0, #16]
 800b96e:	690c      	ldr	r4, [r1, #16]
 800b970:	42a3      	cmp	r3, r4
 800b972:	4607      	mov	r7, r0
 800b974:	db7e      	blt.n	800ba74 <quorem+0x10c>
 800b976:	3c01      	subs	r4, #1
 800b978:	f101 0814 	add.w	r8, r1, #20
 800b97c:	f100 0514 	add.w	r5, r0, #20
 800b980:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b984:	9301      	str	r3, [sp, #4]
 800b986:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b98a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b98e:	3301      	adds	r3, #1
 800b990:	429a      	cmp	r2, r3
 800b992:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b996:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b99a:	fbb2 f6f3 	udiv	r6, r2, r3
 800b99e:	d331      	bcc.n	800ba04 <quorem+0x9c>
 800b9a0:	f04f 0e00 	mov.w	lr, #0
 800b9a4:	4640      	mov	r0, r8
 800b9a6:	46ac      	mov	ip, r5
 800b9a8:	46f2      	mov	sl, lr
 800b9aa:	f850 2b04 	ldr.w	r2, [r0], #4
 800b9ae:	b293      	uxth	r3, r2
 800b9b0:	fb06 e303 	mla	r3, r6, r3, lr
 800b9b4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b9b8:	0c1a      	lsrs	r2, r3, #16
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	ebaa 0303 	sub.w	r3, sl, r3
 800b9c0:	f8dc a000 	ldr.w	sl, [ip]
 800b9c4:	fa13 f38a 	uxtah	r3, r3, sl
 800b9c8:	fb06 220e 	mla	r2, r6, lr, r2
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	9b00      	ldr	r3, [sp, #0]
 800b9d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b9d4:	b292      	uxth	r2, r2
 800b9d6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b9da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b9de:	f8bd 3000 	ldrh.w	r3, [sp]
 800b9e2:	4581      	cmp	r9, r0
 800b9e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9e8:	f84c 3b04 	str.w	r3, [ip], #4
 800b9ec:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b9f0:	d2db      	bcs.n	800b9aa <quorem+0x42>
 800b9f2:	f855 300b 	ldr.w	r3, [r5, fp]
 800b9f6:	b92b      	cbnz	r3, 800ba04 <quorem+0x9c>
 800b9f8:	9b01      	ldr	r3, [sp, #4]
 800b9fa:	3b04      	subs	r3, #4
 800b9fc:	429d      	cmp	r5, r3
 800b9fe:	461a      	mov	r2, r3
 800ba00:	d32c      	bcc.n	800ba5c <quorem+0xf4>
 800ba02:	613c      	str	r4, [r7, #16]
 800ba04:	4638      	mov	r0, r7
 800ba06:	f001 f9a5 	bl	800cd54 <__mcmp>
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	db22      	blt.n	800ba54 <quorem+0xec>
 800ba0e:	3601      	adds	r6, #1
 800ba10:	4629      	mov	r1, r5
 800ba12:	2000      	movs	r0, #0
 800ba14:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba18:	f8d1 c000 	ldr.w	ip, [r1]
 800ba1c:	b293      	uxth	r3, r2
 800ba1e:	1ac3      	subs	r3, r0, r3
 800ba20:	0c12      	lsrs	r2, r2, #16
 800ba22:	fa13 f38c 	uxtah	r3, r3, ip
 800ba26:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ba2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba34:	45c1      	cmp	r9, r8
 800ba36:	f841 3b04 	str.w	r3, [r1], #4
 800ba3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ba3e:	d2e9      	bcs.n	800ba14 <quorem+0xac>
 800ba40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba48:	b922      	cbnz	r2, 800ba54 <quorem+0xec>
 800ba4a:	3b04      	subs	r3, #4
 800ba4c:	429d      	cmp	r5, r3
 800ba4e:	461a      	mov	r2, r3
 800ba50:	d30a      	bcc.n	800ba68 <quorem+0x100>
 800ba52:	613c      	str	r4, [r7, #16]
 800ba54:	4630      	mov	r0, r6
 800ba56:	b003      	add	sp, #12
 800ba58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba5c:	6812      	ldr	r2, [r2, #0]
 800ba5e:	3b04      	subs	r3, #4
 800ba60:	2a00      	cmp	r2, #0
 800ba62:	d1ce      	bne.n	800ba02 <quorem+0x9a>
 800ba64:	3c01      	subs	r4, #1
 800ba66:	e7c9      	b.n	800b9fc <quorem+0x94>
 800ba68:	6812      	ldr	r2, [r2, #0]
 800ba6a:	3b04      	subs	r3, #4
 800ba6c:	2a00      	cmp	r2, #0
 800ba6e:	d1f0      	bne.n	800ba52 <quorem+0xea>
 800ba70:	3c01      	subs	r4, #1
 800ba72:	e7eb      	b.n	800ba4c <quorem+0xe4>
 800ba74:	2000      	movs	r0, #0
 800ba76:	e7ee      	b.n	800ba56 <quorem+0xee>

0800ba78 <_dtoa_r>:
 800ba78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba7c:	ed2d 8b04 	vpush	{d8-d9}
 800ba80:	69c5      	ldr	r5, [r0, #28]
 800ba82:	b093      	sub	sp, #76	; 0x4c
 800ba84:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ba88:	ec57 6b10 	vmov	r6, r7, d0
 800ba8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ba90:	9107      	str	r1, [sp, #28]
 800ba92:	4604      	mov	r4, r0
 800ba94:	920a      	str	r2, [sp, #40]	; 0x28
 800ba96:	930d      	str	r3, [sp, #52]	; 0x34
 800ba98:	b975      	cbnz	r5, 800bab8 <_dtoa_r+0x40>
 800ba9a:	2010      	movs	r0, #16
 800ba9c:	f000 fe2a 	bl	800c6f4 <malloc>
 800baa0:	4602      	mov	r2, r0
 800baa2:	61e0      	str	r0, [r4, #28]
 800baa4:	b920      	cbnz	r0, 800bab0 <_dtoa_r+0x38>
 800baa6:	4bae      	ldr	r3, [pc, #696]	; (800bd60 <_dtoa_r+0x2e8>)
 800baa8:	21ef      	movs	r1, #239	; 0xef
 800baaa:	48ae      	ldr	r0, [pc, #696]	; (800bd64 <_dtoa_r+0x2ec>)
 800baac:	f001 fc90 	bl	800d3d0 <__assert_func>
 800bab0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bab4:	6005      	str	r5, [r0, #0]
 800bab6:	60c5      	str	r5, [r0, #12]
 800bab8:	69e3      	ldr	r3, [r4, #28]
 800baba:	6819      	ldr	r1, [r3, #0]
 800babc:	b151      	cbz	r1, 800bad4 <_dtoa_r+0x5c>
 800babe:	685a      	ldr	r2, [r3, #4]
 800bac0:	604a      	str	r2, [r1, #4]
 800bac2:	2301      	movs	r3, #1
 800bac4:	4093      	lsls	r3, r2
 800bac6:	608b      	str	r3, [r1, #8]
 800bac8:	4620      	mov	r0, r4
 800baca:	f000 ff07 	bl	800c8dc <_Bfree>
 800bace:	69e3      	ldr	r3, [r4, #28]
 800bad0:	2200      	movs	r2, #0
 800bad2:	601a      	str	r2, [r3, #0]
 800bad4:	1e3b      	subs	r3, r7, #0
 800bad6:	bfbb      	ittet	lt
 800bad8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800badc:	9303      	strlt	r3, [sp, #12]
 800bade:	2300      	movge	r3, #0
 800bae0:	2201      	movlt	r2, #1
 800bae2:	bfac      	ite	ge
 800bae4:	f8c8 3000 	strge.w	r3, [r8]
 800bae8:	f8c8 2000 	strlt.w	r2, [r8]
 800baec:	4b9e      	ldr	r3, [pc, #632]	; (800bd68 <_dtoa_r+0x2f0>)
 800baee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800baf2:	ea33 0308 	bics.w	r3, r3, r8
 800baf6:	d11b      	bne.n	800bb30 <_dtoa_r+0xb8>
 800baf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bafa:	f242 730f 	movw	r3, #9999	; 0x270f
 800bafe:	6013      	str	r3, [r2, #0]
 800bb00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800bb04:	4333      	orrs	r3, r6
 800bb06:	f000 8593 	beq.w	800c630 <_dtoa_r+0xbb8>
 800bb0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb0c:	b963      	cbnz	r3, 800bb28 <_dtoa_r+0xb0>
 800bb0e:	4b97      	ldr	r3, [pc, #604]	; (800bd6c <_dtoa_r+0x2f4>)
 800bb10:	e027      	b.n	800bb62 <_dtoa_r+0xea>
 800bb12:	4b97      	ldr	r3, [pc, #604]	; (800bd70 <_dtoa_r+0x2f8>)
 800bb14:	9300      	str	r3, [sp, #0]
 800bb16:	3308      	adds	r3, #8
 800bb18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb1a:	6013      	str	r3, [r2, #0]
 800bb1c:	9800      	ldr	r0, [sp, #0]
 800bb1e:	b013      	add	sp, #76	; 0x4c
 800bb20:	ecbd 8b04 	vpop	{d8-d9}
 800bb24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb28:	4b90      	ldr	r3, [pc, #576]	; (800bd6c <_dtoa_r+0x2f4>)
 800bb2a:	9300      	str	r3, [sp, #0]
 800bb2c:	3303      	adds	r3, #3
 800bb2e:	e7f3      	b.n	800bb18 <_dtoa_r+0xa0>
 800bb30:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb34:	2200      	movs	r2, #0
 800bb36:	ec51 0b17 	vmov	r0, r1, d7
 800bb3a:	eeb0 8a47 	vmov.f32	s16, s14
 800bb3e:	eef0 8a67 	vmov.f32	s17, s15
 800bb42:	2300      	movs	r3, #0
 800bb44:	f7f4 ffc0 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb48:	4681      	mov	r9, r0
 800bb4a:	b160      	cbz	r0, 800bb66 <_dtoa_r+0xee>
 800bb4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb4e:	2301      	movs	r3, #1
 800bb50:	6013      	str	r3, [r2, #0]
 800bb52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f000 8568 	beq.w	800c62a <_dtoa_r+0xbb2>
 800bb5a:	4b86      	ldr	r3, [pc, #536]	; (800bd74 <_dtoa_r+0x2fc>)
 800bb5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bb5e:	6013      	str	r3, [r2, #0]
 800bb60:	3b01      	subs	r3, #1
 800bb62:	9300      	str	r3, [sp, #0]
 800bb64:	e7da      	b.n	800bb1c <_dtoa_r+0xa4>
 800bb66:	aa10      	add	r2, sp, #64	; 0x40
 800bb68:	a911      	add	r1, sp, #68	; 0x44
 800bb6a:	4620      	mov	r0, r4
 800bb6c:	eeb0 0a48 	vmov.f32	s0, s16
 800bb70:	eef0 0a68 	vmov.f32	s1, s17
 800bb74:	f001 f994 	bl	800cea0 <__d2b>
 800bb78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bb7c:	4682      	mov	sl, r0
 800bb7e:	2d00      	cmp	r5, #0
 800bb80:	d07f      	beq.n	800bc82 <_dtoa_r+0x20a>
 800bb82:	ee18 3a90 	vmov	r3, s17
 800bb86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bb8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800bb8e:	ec51 0b18 	vmov	r0, r1, d8
 800bb92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bb96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bb9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800bb9e:	4619      	mov	r1, r3
 800bba0:	2200      	movs	r2, #0
 800bba2:	4b75      	ldr	r3, [pc, #468]	; (800bd78 <_dtoa_r+0x300>)
 800bba4:	f7f4 fb70 	bl	8000288 <__aeabi_dsub>
 800bba8:	a367      	add	r3, pc, #412	; (adr r3, 800bd48 <_dtoa_r+0x2d0>)
 800bbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbae:	f7f4 fd23 	bl	80005f8 <__aeabi_dmul>
 800bbb2:	a367      	add	r3, pc, #412	; (adr r3, 800bd50 <_dtoa_r+0x2d8>)
 800bbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb8:	f7f4 fb68 	bl	800028c <__adddf3>
 800bbbc:	4606      	mov	r6, r0
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	460f      	mov	r7, r1
 800bbc2:	f7f4 fcaf 	bl	8000524 <__aeabi_i2d>
 800bbc6:	a364      	add	r3, pc, #400	; (adr r3, 800bd58 <_dtoa_r+0x2e0>)
 800bbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbcc:	f7f4 fd14 	bl	80005f8 <__aeabi_dmul>
 800bbd0:	4602      	mov	r2, r0
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	4639      	mov	r1, r7
 800bbd8:	f7f4 fb58 	bl	800028c <__adddf3>
 800bbdc:	4606      	mov	r6, r0
 800bbde:	460f      	mov	r7, r1
 800bbe0:	f7f4 ffba 	bl	8000b58 <__aeabi_d2iz>
 800bbe4:	2200      	movs	r2, #0
 800bbe6:	4683      	mov	fp, r0
 800bbe8:	2300      	movs	r3, #0
 800bbea:	4630      	mov	r0, r6
 800bbec:	4639      	mov	r1, r7
 800bbee:	f7f4 ff75 	bl	8000adc <__aeabi_dcmplt>
 800bbf2:	b148      	cbz	r0, 800bc08 <_dtoa_r+0x190>
 800bbf4:	4658      	mov	r0, fp
 800bbf6:	f7f4 fc95 	bl	8000524 <__aeabi_i2d>
 800bbfa:	4632      	mov	r2, r6
 800bbfc:	463b      	mov	r3, r7
 800bbfe:	f7f4 ff63 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc02:	b908      	cbnz	r0, 800bc08 <_dtoa_r+0x190>
 800bc04:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc08:	f1bb 0f16 	cmp.w	fp, #22
 800bc0c:	d857      	bhi.n	800bcbe <_dtoa_r+0x246>
 800bc0e:	4b5b      	ldr	r3, [pc, #364]	; (800bd7c <_dtoa_r+0x304>)
 800bc10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc18:	ec51 0b18 	vmov	r0, r1, d8
 800bc1c:	f7f4 ff5e 	bl	8000adc <__aeabi_dcmplt>
 800bc20:	2800      	cmp	r0, #0
 800bc22:	d04e      	beq.n	800bcc2 <_dtoa_r+0x24a>
 800bc24:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc28:	2300      	movs	r3, #0
 800bc2a:	930c      	str	r3, [sp, #48]	; 0x30
 800bc2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc2e:	1b5b      	subs	r3, r3, r5
 800bc30:	1e5a      	subs	r2, r3, #1
 800bc32:	bf45      	ittet	mi
 800bc34:	f1c3 0301 	rsbmi	r3, r3, #1
 800bc38:	9305      	strmi	r3, [sp, #20]
 800bc3a:	2300      	movpl	r3, #0
 800bc3c:	2300      	movmi	r3, #0
 800bc3e:	9206      	str	r2, [sp, #24]
 800bc40:	bf54      	ite	pl
 800bc42:	9305      	strpl	r3, [sp, #20]
 800bc44:	9306      	strmi	r3, [sp, #24]
 800bc46:	f1bb 0f00 	cmp.w	fp, #0
 800bc4a:	db3c      	blt.n	800bcc6 <_dtoa_r+0x24e>
 800bc4c:	9b06      	ldr	r3, [sp, #24]
 800bc4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800bc52:	445b      	add	r3, fp
 800bc54:	9306      	str	r3, [sp, #24]
 800bc56:	2300      	movs	r3, #0
 800bc58:	9308      	str	r3, [sp, #32]
 800bc5a:	9b07      	ldr	r3, [sp, #28]
 800bc5c:	2b09      	cmp	r3, #9
 800bc5e:	d868      	bhi.n	800bd32 <_dtoa_r+0x2ba>
 800bc60:	2b05      	cmp	r3, #5
 800bc62:	bfc4      	itt	gt
 800bc64:	3b04      	subgt	r3, #4
 800bc66:	9307      	strgt	r3, [sp, #28]
 800bc68:	9b07      	ldr	r3, [sp, #28]
 800bc6a:	f1a3 0302 	sub.w	r3, r3, #2
 800bc6e:	bfcc      	ite	gt
 800bc70:	2500      	movgt	r5, #0
 800bc72:	2501      	movle	r5, #1
 800bc74:	2b03      	cmp	r3, #3
 800bc76:	f200 8085 	bhi.w	800bd84 <_dtoa_r+0x30c>
 800bc7a:	e8df f003 	tbb	[pc, r3]
 800bc7e:	3b2e      	.short	0x3b2e
 800bc80:	5839      	.short	0x5839
 800bc82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bc86:	441d      	add	r5, r3
 800bc88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bc8c:	2b20      	cmp	r3, #32
 800bc8e:	bfc1      	itttt	gt
 800bc90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bc94:	fa08 f803 	lslgt.w	r8, r8, r3
 800bc98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800bc9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800bca0:	bfd6      	itet	le
 800bca2:	f1c3 0320 	rsble	r3, r3, #32
 800bca6:	ea48 0003 	orrgt.w	r0, r8, r3
 800bcaa:	fa06 f003 	lslle.w	r0, r6, r3
 800bcae:	f7f4 fc29 	bl	8000504 <__aeabi_ui2d>
 800bcb2:	2201      	movs	r2, #1
 800bcb4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800bcb8:	3d01      	subs	r5, #1
 800bcba:	920e      	str	r2, [sp, #56]	; 0x38
 800bcbc:	e76f      	b.n	800bb9e <_dtoa_r+0x126>
 800bcbe:	2301      	movs	r3, #1
 800bcc0:	e7b3      	b.n	800bc2a <_dtoa_r+0x1b2>
 800bcc2:	900c      	str	r0, [sp, #48]	; 0x30
 800bcc4:	e7b2      	b.n	800bc2c <_dtoa_r+0x1b4>
 800bcc6:	9b05      	ldr	r3, [sp, #20]
 800bcc8:	eba3 030b 	sub.w	r3, r3, fp
 800bccc:	9305      	str	r3, [sp, #20]
 800bcce:	f1cb 0300 	rsb	r3, fp, #0
 800bcd2:	9308      	str	r3, [sp, #32]
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bcd8:	e7bf      	b.n	800bc5a <_dtoa_r+0x1e2>
 800bcda:	2300      	movs	r3, #0
 800bcdc:	9309      	str	r3, [sp, #36]	; 0x24
 800bcde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	dc52      	bgt.n	800bd8a <_dtoa_r+0x312>
 800bce4:	2301      	movs	r3, #1
 800bce6:	9301      	str	r3, [sp, #4]
 800bce8:	9304      	str	r3, [sp, #16]
 800bcea:	461a      	mov	r2, r3
 800bcec:	920a      	str	r2, [sp, #40]	; 0x28
 800bcee:	e00b      	b.n	800bd08 <_dtoa_r+0x290>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	e7f3      	b.n	800bcdc <_dtoa_r+0x264>
 800bcf4:	2300      	movs	r3, #0
 800bcf6:	9309      	str	r3, [sp, #36]	; 0x24
 800bcf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcfa:	445b      	add	r3, fp
 800bcfc:	9301      	str	r3, [sp, #4]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	9304      	str	r3, [sp, #16]
 800bd04:	bfb8      	it	lt
 800bd06:	2301      	movlt	r3, #1
 800bd08:	69e0      	ldr	r0, [r4, #28]
 800bd0a:	2100      	movs	r1, #0
 800bd0c:	2204      	movs	r2, #4
 800bd0e:	f102 0614 	add.w	r6, r2, #20
 800bd12:	429e      	cmp	r6, r3
 800bd14:	d93d      	bls.n	800bd92 <_dtoa_r+0x31a>
 800bd16:	6041      	str	r1, [r0, #4]
 800bd18:	4620      	mov	r0, r4
 800bd1a:	f000 fd9f 	bl	800c85c <_Balloc>
 800bd1e:	9000      	str	r0, [sp, #0]
 800bd20:	2800      	cmp	r0, #0
 800bd22:	d139      	bne.n	800bd98 <_dtoa_r+0x320>
 800bd24:	4b16      	ldr	r3, [pc, #88]	; (800bd80 <_dtoa_r+0x308>)
 800bd26:	4602      	mov	r2, r0
 800bd28:	f240 11af 	movw	r1, #431	; 0x1af
 800bd2c:	e6bd      	b.n	800baaa <_dtoa_r+0x32>
 800bd2e:	2301      	movs	r3, #1
 800bd30:	e7e1      	b.n	800bcf6 <_dtoa_r+0x27e>
 800bd32:	2501      	movs	r5, #1
 800bd34:	2300      	movs	r3, #0
 800bd36:	9307      	str	r3, [sp, #28]
 800bd38:	9509      	str	r5, [sp, #36]	; 0x24
 800bd3a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd3e:	9301      	str	r3, [sp, #4]
 800bd40:	9304      	str	r3, [sp, #16]
 800bd42:	2200      	movs	r2, #0
 800bd44:	2312      	movs	r3, #18
 800bd46:	e7d1      	b.n	800bcec <_dtoa_r+0x274>
 800bd48:	636f4361 	.word	0x636f4361
 800bd4c:	3fd287a7 	.word	0x3fd287a7
 800bd50:	8b60c8b3 	.word	0x8b60c8b3
 800bd54:	3fc68a28 	.word	0x3fc68a28
 800bd58:	509f79fb 	.word	0x509f79fb
 800bd5c:	3fd34413 	.word	0x3fd34413
 800bd60:	0800db75 	.word	0x0800db75
 800bd64:	0800db8c 	.word	0x0800db8c
 800bd68:	7ff00000 	.word	0x7ff00000
 800bd6c:	0800db71 	.word	0x0800db71
 800bd70:	0800db68 	.word	0x0800db68
 800bd74:	0800db45 	.word	0x0800db45
 800bd78:	3ff80000 	.word	0x3ff80000
 800bd7c:	0800dc78 	.word	0x0800dc78
 800bd80:	0800dbe4 	.word	0x0800dbe4
 800bd84:	2301      	movs	r3, #1
 800bd86:	9309      	str	r3, [sp, #36]	; 0x24
 800bd88:	e7d7      	b.n	800bd3a <_dtoa_r+0x2c2>
 800bd8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd8c:	9301      	str	r3, [sp, #4]
 800bd8e:	9304      	str	r3, [sp, #16]
 800bd90:	e7ba      	b.n	800bd08 <_dtoa_r+0x290>
 800bd92:	3101      	adds	r1, #1
 800bd94:	0052      	lsls	r2, r2, #1
 800bd96:	e7ba      	b.n	800bd0e <_dtoa_r+0x296>
 800bd98:	69e3      	ldr	r3, [r4, #28]
 800bd9a:	9a00      	ldr	r2, [sp, #0]
 800bd9c:	601a      	str	r2, [r3, #0]
 800bd9e:	9b04      	ldr	r3, [sp, #16]
 800bda0:	2b0e      	cmp	r3, #14
 800bda2:	f200 80a8 	bhi.w	800bef6 <_dtoa_r+0x47e>
 800bda6:	2d00      	cmp	r5, #0
 800bda8:	f000 80a5 	beq.w	800bef6 <_dtoa_r+0x47e>
 800bdac:	f1bb 0f00 	cmp.w	fp, #0
 800bdb0:	dd38      	ble.n	800be24 <_dtoa_r+0x3ac>
 800bdb2:	4bc0      	ldr	r3, [pc, #768]	; (800c0b4 <_dtoa_r+0x63c>)
 800bdb4:	f00b 020f 	and.w	r2, fp, #15
 800bdb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdbc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bdc0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bdc4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bdc8:	d019      	beq.n	800bdfe <_dtoa_r+0x386>
 800bdca:	4bbb      	ldr	r3, [pc, #748]	; (800c0b8 <_dtoa_r+0x640>)
 800bdcc:	ec51 0b18 	vmov	r0, r1, d8
 800bdd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bdd4:	f7f4 fd3a 	bl	800084c <__aeabi_ddiv>
 800bdd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bddc:	f008 080f 	and.w	r8, r8, #15
 800bde0:	2503      	movs	r5, #3
 800bde2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c0b8 <_dtoa_r+0x640>
 800bde6:	f1b8 0f00 	cmp.w	r8, #0
 800bdea:	d10a      	bne.n	800be02 <_dtoa_r+0x38a>
 800bdec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdf0:	4632      	mov	r2, r6
 800bdf2:	463b      	mov	r3, r7
 800bdf4:	f7f4 fd2a 	bl	800084c <__aeabi_ddiv>
 800bdf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdfc:	e02b      	b.n	800be56 <_dtoa_r+0x3de>
 800bdfe:	2502      	movs	r5, #2
 800be00:	e7ef      	b.n	800bde2 <_dtoa_r+0x36a>
 800be02:	f018 0f01 	tst.w	r8, #1
 800be06:	d008      	beq.n	800be1a <_dtoa_r+0x3a2>
 800be08:	4630      	mov	r0, r6
 800be0a:	4639      	mov	r1, r7
 800be0c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800be10:	f7f4 fbf2 	bl	80005f8 <__aeabi_dmul>
 800be14:	3501      	adds	r5, #1
 800be16:	4606      	mov	r6, r0
 800be18:	460f      	mov	r7, r1
 800be1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800be1e:	f109 0908 	add.w	r9, r9, #8
 800be22:	e7e0      	b.n	800bde6 <_dtoa_r+0x36e>
 800be24:	f000 809f 	beq.w	800bf66 <_dtoa_r+0x4ee>
 800be28:	f1cb 0600 	rsb	r6, fp, #0
 800be2c:	4ba1      	ldr	r3, [pc, #644]	; (800c0b4 <_dtoa_r+0x63c>)
 800be2e:	4fa2      	ldr	r7, [pc, #648]	; (800c0b8 <_dtoa_r+0x640>)
 800be30:	f006 020f 	and.w	r2, r6, #15
 800be34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3c:	ec51 0b18 	vmov	r0, r1, d8
 800be40:	f7f4 fbda 	bl	80005f8 <__aeabi_dmul>
 800be44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be48:	1136      	asrs	r6, r6, #4
 800be4a:	2300      	movs	r3, #0
 800be4c:	2502      	movs	r5, #2
 800be4e:	2e00      	cmp	r6, #0
 800be50:	d17e      	bne.n	800bf50 <_dtoa_r+0x4d8>
 800be52:	2b00      	cmp	r3, #0
 800be54:	d1d0      	bne.n	800bdf8 <_dtoa_r+0x380>
 800be56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800be58:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f000 8084 	beq.w	800bf6a <_dtoa_r+0x4f2>
 800be62:	4b96      	ldr	r3, [pc, #600]	; (800c0bc <_dtoa_r+0x644>)
 800be64:	2200      	movs	r2, #0
 800be66:	4640      	mov	r0, r8
 800be68:	4649      	mov	r1, r9
 800be6a:	f7f4 fe37 	bl	8000adc <__aeabi_dcmplt>
 800be6e:	2800      	cmp	r0, #0
 800be70:	d07b      	beq.n	800bf6a <_dtoa_r+0x4f2>
 800be72:	9b04      	ldr	r3, [sp, #16]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d078      	beq.n	800bf6a <_dtoa_r+0x4f2>
 800be78:	9b01      	ldr	r3, [sp, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	dd39      	ble.n	800bef2 <_dtoa_r+0x47a>
 800be7e:	4b90      	ldr	r3, [pc, #576]	; (800c0c0 <_dtoa_r+0x648>)
 800be80:	2200      	movs	r2, #0
 800be82:	4640      	mov	r0, r8
 800be84:	4649      	mov	r1, r9
 800be86:	f7f4 fbb7 	bl	80005f8 <__aeabi_dmul>
 800be8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be8e:	9e01      	ldr	r6, [sp, #4]
 800be90:	f10b 37ff 	add.w	r7, fp, #4294967295
 800be94:	3501      	adds	r5, #1
 800be96:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800be9a:	4628      	mov	r0, r5
 800be9c:	f7f4 fb42 	bl	8000524 <__aeabi_i2d>
 800bea0:	4642      	mov	r2, r8
 800bea2:	464b      	mov	r3, r9
 800bea4:	f7f4 fba8 	bl	80005f8 <__aeabi_dmul>
 800bea8:	4b86      	ldr	r3, [pc, #536]	; (800c0c4 <_dtoa_r+0x64c>)
 800beaa:	2200      	movs	r2, #0
 800beac:	f7f4 f9ee 	bl	800028c <__adddf3>
 800beb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800beb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800beb8:	9303      	str	r3, [sp, #12]
 800beba:	2e00      	cmp	r6, #0
 800bebc:	d158      	bne.n	800bf70 <_dtoa_r+0x4f8>
 800bebe:	4b82      	ldr	r3, [pc, #520]	; (800c0c8 <_dtoa_r+0x650>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	4640      	mov	r0, r8
 800bec4:	4649      	mov	r1, r9
 800bec6:	f7f4 f9df 	bl	8000288 <__aeabi_dsub>
 800beca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bece:	4680      	mov	r8, r0
 800bed0:	4689      	mov	r9, r1
 800bed2:	f7f4 fe21 	bl	8000b18 <__aeabi_dcmpgt>
 800bed6:	2800      	cmp	r0, #0
 800bed8:	f040 8296 	bne.w	800c408 <_dtoa_r+0x990>
 800bedc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bee0:	4640      	mov	r0, r8
 800bee2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bee6:	4649      	mov	r1, r9
 800bee8:	f7f4 fdf8 	bl	8000adc <__aeabi_dcmplt>
 800beec:	2800      	cmp	r0, #0
 800beee:	f040 8289 	bne.w	800c404 <_dtoa_r+0x98c>
 800bef2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bef6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bef8:	2b00      	cmp	r3, #0
 800befa:	f2c0 814e 	blt.w	800c19a <_dtoa_r+0x722>
 800befe:	f1bb 0f0e 	cmp.w	fp, #14
 800bf02:	f300 814a 	bgt.w	800c19a <_dtoa_r+0x722>
 800bf06:	4b6b      	ldr	r3, [pc, #428]	; (800c0b4 <_dtoa_r+0x63c>)
 800bf08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bf0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	f280 80dc 	bge.w	800c0d0 <_dtoa_r+0x658>
 800bf18:	9b04      	ldr	r3, [sp, #16]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f300 80d8 	bgt.w	800c0d0 <_dtoa_r+0x658>
 800bf20:	f040 826f 	bne.w	800c402 <_dtoa_r+0x98a>
 800bf24:	4b68      	ldr	r3, [pc, #416]	; (800c0c8 <_dtoa_r+0x650>)
 800bf26:	2200      	movs	r2, #0
 800bf28:	4640      	mov	r0, r8
 800bf2a:	4649      	mov	r1, r9
 800bf2c:	f7f4 fb64 	bl	80005f8 <__aeabi_dmul>
 800bf30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bf34:	f7f4 fde6 	bl	8000b04 <__aeabi_dcmpge>
 800bf38:	9e04      	ldr	r6, [sp, #16]
 800bf3a:	4637      	mov	r7, r6
 800bf3c:	2800      	cmp	r0, #0
 800bf3e:	f040 8245 	bne.w	800c3cc <_dtoa_r+0x954>
 800bf42:	9d00      	ldr	r5, [sp, #0]
 800bf44:	2331      	movs	r3, #49	; 0x31
 800bf46:	f805 3b01 	strb.w	r3, [r5], #1
 800bf4a:	f10b 0b01 	add.w	fp, fp, #1
 800bf4e:	e241      	b.n	800c3d4 <_dtoa_r+0x95c>
 800bf50:	07f2      	lsls	r2, r6, #31
 800bf52:	d505      	bpl.n	800bf60 <_dtoa_r+0x4e8>
 800bf54:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf58:	f7f4 fb4e 	bl	80005f8 <__aeabi_dmul>
 800bf5c:	3501      	adds	r5, #1
 800bf5e:	2301      	movs	r3, #1
 800bf60:	1076      	asrs	r6, r6, #1
 800bf62:	3708      	adds	r7, #8
 800bf64:	e773      	b.n	800be4e <_dtoa_r+0x3d6>
 800bf66:	2502      	movs	r5, #2
 800bf68:	e775      	b.n	800be56 <_dtoa_r+0x3de>
 800bf6a:	9e04      	ldr	r6, [sp, #16]
 800bf6c:	465f      	mov	r7, fp
 800bf6e:	e792      	b.n	800be96 <_dtoa_r+0x41e>
 800bf70:	9900      	ldr	r1, [sp, #0]
 800bf72:	4b50      	ldr	r3, [pc, #320]	; (800c0b4 <_dtoa_r+0x63c>)
 800bf74:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf78:	4431      	add	r1, r6
 800bf7a:	9102      	str	r1, [sp, #8]
 800bf7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf7e:	eeb0 9a47 	vmov.f32	s18, s14
 800bf82:	eef0 9a67 	vmov.f32	s19, s15
 800bf86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bf8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bf8e:	2900      	cmp	r1, #0
 800bf90:	d044      	beq.n	800c01c <_dtoa_r+0x5a4>
 800bf92:	494e      	ldr	r1, [pc, #312]	; (800c0cc <_dtoa_r+0x654>)
 800bf94:	2000      	movs	r0, #0
 800bf96:	f7f4 fc59 	bl	800084c <__aeabi_ddiv>
 800bf9a:	ec53 2b19 	vmov	r2, r3, d9
 800bf9e:	f7f4 f973 	bl	8000288 <__aeabi_dsub>
 800bfa2:	9d00      	ldr	r5, [sp, #0]
 800bfa4:	ec41 0b19 	vmov	d9, r0, r1
 800bfa8:	4649      	mov	r1, r9
 800bfaa:	4640      	mov	r0, r8
 800bfac:	f7f4 fdd4 	bl	8000b58 <__aeabi_d2iz>
 800bfb0:	4606      	mov	r6, r0
 800bfb2:	f7f4 fab7 	bl	8000524 <__aeabi_i2d>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	460b      	mov	r3, r1
 800bfba:	4640      	mov	r0, r8
 800bfbc:	4649      	mov	r1, r9
 800bfbe:	f7f4 f963 	bl	8000288 <__aeabi_dsub>
 800bfc2:	3630      	adds	r6, #48	; 0x30
 800bfc4:	f805 6b01 	strb.w	r6, [r5], #1
 800bfc8:	ec53 2b19 	vmov	r2, r3, d9
 800bfcc:	4680      	mov	r8, r0
 800bfce:	4689      	mov	r9, r1
 800bfd0:	f7f4 fd84 	bl	8000adc <__aeabi_dcmplt>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	d164      	bne.n	800c0a2 <_dtoa_r+0x62a>
 800bfd8:	4642      	mov	r2, r8
 800bfda:	464b      	mov	r3, r9
 800bfdc:	4937      	ldr	r1, [pc, #220]	; (800c0bc <_dtoa_r+0x644>)
 800bfde:	2000      	movs	r0, #0
 800bfe0:	f7f4 f952 	bl	8000288 <__aeabi_dsub>
 800bfe4:	ec53 2b19 	vmov	r2, r3, d9
 800bfe8:	f7f4 fd78 	bl	8000adc <__aeabi_dcmplt>
 800bfec:	2800      	cmp	r0, #0
 800bfee:	f040 80b6 	bne.w	800c15e <_dtoa_r+0x6e6>
 800bff2:	9b02      	ldr	r3, [sp, #8]
 800bff4:	429d      	cmp	r5, r3
 800bff6:	f43f af7c 	beq.w	800bef2 <_dtoa_r+0x47a>
 800bffa:	4b31      	ldr	r3, [pc, #196]	; (800c0c0 <_dtoa_r+0x648>)
 800bffc:	ec51 0b19 	vmov	r0, r1, d9
 800c000:	2200      	movs	r2, #0
 800c002:	f7f4 faf9 	bl	80005f8 <__aeabi_dmul>
 800c006:	4b2e      	ldr	r3, [pc, #184]	; (800c0c0 <_dtoa_r+0x648>)
 800c008:	ec41 0b19 	vmov	d9, r0, r1
 800c00c:	2200      	movs	r2, #0
 800c00e:	4640      	mov	r0, r8
 800c010:	4649      	mov	r1, r9
 800c012:	f7f4 faf1 	bl	80005f8 <__aeabi_dmul>
 800c016:	4680      	mov	r8, r0
 800c018:	4689      	mov	r9, r1
 800c01a:	e7c5      	b.n	800bfa8 <_dtoa_r+0x530>
 800c01c:	ec51 0b17 	vmov	r0, r1, d7
 800c020:	f7f4 faea 	bl	80005f8 <__aeabi_dmul>
 800c024:	9b02      	ldr	r3, [sp, #8]
 800c026:	9d00      	ldr	r5, [sp, #0]
 800c028:	930f      	str	r3, [sp, #60]	; 0x3c
 800c02a:	ec41 0b19 	vmov	d9, r0, r1
 800c02e:	4649      	mov	r1, r9
 800c030:	4640      	mov	r0, r8
 800c032:	f7f4 fd91 	bl	8000b58 <__aeabi_d2iz>
 800c036:	4606      	mov	r6, r0
 800c038:	f7f4 fa74 	bl	8000524 <__aeabi_i2d>
 800c03c:	3630      	adds	r6, #48	; 0x30
 800c03e:	4602      	mov	r2, r0
 800c040:	460b      	mov	r3, r1
 800c042:	4640      	mov	r0, r8
 800c044:	4649      	mov	r1, r9
 800c046:	f7f4 f91f 	bl	8000288 <__aeabi_dsub>
 800c04a:	f805 6b01 	strb.w	r6, [r5], #1
 800c04e:	9b02      	ldr	r3, [sp, #8]
 800c050:	429d      	cmp	r5, r3
 800c052:	4680      	mov	r8, r0
 800c054:	4689      	mov	r9, r1
 800c056:	f04f 0200 	mov.w	r2, #0
 800c05a:	d124      	bne.n	800c0a6 <_dtoa_r+0x62e>
 800c05c:	4b1b      	ldr	r3, [pc, #108]	; (800c0cc <_dtoa_r+0x654>)
 800c05e:	ec51 0b19 	vmov	r0, r1, d9
 800c062:	f7f4 f913 	bl	800028c <__adddf3>
 800c066:	4602      	mov	r2, r0
 800c068:	460b      	mov	r3, r1
 800c06a:	4640      	mov	r0, r8
 800c06c:	4649      	mov	r1, r9
 800c06e:	f7f4 fd53 	bl	8000b18 <__aeabi_dcmpgt>
 800c072:	2800      	cmp	r0, #0
 800c074:	d173      	bne.n	800c15e <_dtoa_r+0x6e6>
 800c076:	ec53 2b19 	vmov	r2, r3, d9
 800c07a:	4914      	ldr	r1, [pc, #80]	; (800c0cc <_dtoa_r+0x654>)
 800c07c:	2000      	movs	r0, #0
 800c07e:	f7f4 f903 	bl	8000288 <__aeabi_dsub>
 800c082:	4602      	mov	r2, r0
 800c084:	460b      	mov	r3, r1
 800c086:	4640      	mov	r0, r8
 800c088:	4649      	mov	r1, r9
 800c08a:	f7f4 fd27 	bl	8000adc <__aeabi_dcmplt>
 800c08e:	2800      	cmp	r0, #0
 800c090:	f43f af2f 	beq.w	800bef2 <_dtoa_r+0x47a>
 800c094:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c096:	1e6b      	subs	r3, r5, #1
 800c098:	930f      	str	r3, [sp, #60]	; 0x3c
 800c09a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c09e:	2b30      	cmp	r3, #48	; 0x30
 800c0a0:	d0f8      	beq.n	800c094 <_dtoa_r+0x61c>
 800c0a2:	46bb      	mov	fp, r7
 800c0a4:	e04a      	b.n	800c13c <_dtoa_r+0x6c4>
 800c0a6:	4b06      	ldr	r3, [pc, #24]	; (800c0c0 <_dtoa_r+0x648>)
 800c0a8:	f7f4 faa6 	bl	80005f8 <__aeabi_dmul>
 800c0ac:	4680      	mov	r8, r0
 800c0ae:	4689      	mov	r9, r1
 800c0b0:	e7bd      	b.n	800c02e <_dtoa_r+0x5b6>
 800c0b2:	bf00      	nop
 800c0b4:	0800dc78 	.word	0x0800dc78
 800c0b8:	0800dc50 	.word	0x0800dc50
 800c0bc:	3ff00000 	.word	0x3ff00000
 800c0c0:	40240000 	.word	0x40240000
 800c0c4:	401c0000 	.word	0x401c0000
 800c0c8:	40140000 	.word	0x40140000
 800c0cc:	3fe00000 	.word	0x3fe00000
 800c0d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c0d4:	9d00      	ldr	r5, [sp, #0]
 800c0d6:	4642      	mov	r2, r8
 800c0d8:	464b      	mov	r3, r9
 800c0da:	4630      	mov	r0, r6
 800c0dc:	4639      	mov	r1, r7
 800c0de:	f7f4 fbb5 	bl	800084c <__aeabi_ddiv>
 800c0e2:	f7f4 fd39 	bl	8000b58 <__aeabi_d2iz>
 800c0e6:	9001      	str	r0, [sp, #4]
 800c0e8:	f7f4 fa1c 	bl	8000524 <__aeabi_i2d>
 800c0ec:	4642      	mov	r2, r8
 800c0ee:	464b      	mov	r3, r9
 800c0f0:	f7f4 fa82 	bl	80005f8 <__aeabi_dmul>
 800c0f4:	4602      	mov	r2, r0
 800c0f6:	460b      	mov	r3, r1
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	4639      	mov	r1, r7
 800c0fc:	f7f4 f8c4 	bl	8000288 <__aeabi_dsub>
 800c100:	9e01      	ldr	r6, [sp, #4]
 800c102:	9f04      	ldr	r7, [sp, #16]
 800c104:	3630      	adds	r6, #48	; 0x30
 800c106:	f805 6b01 	strb.w	r6, [r5], #1
 800c10a:	9e00      	ldr	r6, [sp, #0]
 800c10c:	1bae      	subs	r6, r5, r6
 800c10e:	42b7      	cmp	r7, r6
 800c110:	4602      	mov	r2, r0
 800c112:	460b      	mov	r3, r1
 800c114:	d134      	bne.n	800c180 <_dtoa_r+0x708>
 800c116:	f7f4 f8b9 	bl	800028c <__adddf3>
 800c11a:	4642      	mov	r2, r8
 800c11c:	464b      	mov	r3, r9
 800c11e:	4606      	mov	r6, r0
 800c120:	460f      	mov	r7, r1
 800c122:	f7f4 fcf9 	bl	8000b18 <__aeabi_dcmpgt>
 800c126:	b9c8      	cbnz	r0, 800c15c <_dtoa_r+0x6e4>
 800c128:	4642      	mov	r2, r8
 800c12a:	464b      	mov	r3, r9
 800c12c:	4630      	mov	r0, r6
 800c12e:	4639      	mov	r1, r7
 800c130:	f7f4 fcca 	bl	8000ac8 <__aeabi_dcmpeq>
 800c134:	b110      	cbz	r0, 800c13c <_dtoa_r+0x6c4>
 800c136:	9b01      	ldr	r3, [sp, #4]
 800c138:	07db      	lsls	r3, r3, #31
 800c13a:	d40f      	bmi.n	800c15c <_dtoa_r+0x6e4>
 800c13c:	4651      	mov	r1, sl
 800c13e:	4620      	mov	r0, r4
 800c140:	f000 fbcc 	bl	800c8dc <_Bfree>
 800c144:	2300      	movs	r3, #0
 800c146:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c148:	702b      	strb	r3, [r5, #0]
 800c14a:	f10b 0301 	add.w	r3, fp, #1
 800c14e:	6013      	str	r3, [r2, #0]
 800c150:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c152:	2b00      	cmp	r3, #0
 800c154:	f43f ace2 	beq.w	800bb1c <_dtoa_r+0xa4>
 800c158:	601d      	str	r5, [r3, #0]
 800c15a:	e4df      	b.n	800bb1c <_dtoa_r+0xa4>
 800c15c:	465f      	mov	r7, fp
 800c15e:	462b      	mov	r3, r5
 800c160:	461d      	mov	r5, r3
 800c162:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c166:	2a39      	cmp	r2, #57	; 0x39
 800c168:	d106      	bne.n	800c178 <_dtoa_r+0x700>
 800c16a:	9a00      	ldr	r2, [sp, #0]
 800c16c:	429a      	cmp	r2, r3
 800c16e:	d1f7      	bne.n	800c160 <_dtoa_r+0x6e8>
 800c170:	9900      	ldr	r1, [sp, #0]
 800c172:	2230      	movs	r2, #48	; 0x30
 800c174:	3701      	adds	r7, #1
 800c176:	700a      	strb	r2, [r1, #0]
 800c178:	781a      	ldrb	r2, [r3, #0]
 800c17a:	3201      	adds	r2, #1
 800c17c:	701a      	strb	r2, [r3, #0]
 800c17e:	e790      	b.n	800c0a2 <_dtoa_r+0x62a>
 800c180:	4ba3      	ldr	r3, [pc, #652]	; (800c410 <_dtoa_r+0x998>)
 800c182:	2200      	movs	r2, #0
 800c184:	f7f4 fa38 	bl	80005f8 <__aeabi_dmul>
 800c188:	2200      	movs	r2, #0
 800c18a:	2300      	movs	r3, #0
 800c18c:	4606      	mov	r6, r0
 800c18e:	460f      	mov	r7, r1
 800c190:	f7f4 fc9a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c194:	2800      	cmp	r0, #0
 800c196:	d09e      	beq.n	800c0d6 <_dtoa_r+0x65e>
 800c198:	e7d0      	b.n	800c13c <_dtoa_r+0x6c4>
 800c19a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c19c:	2a00      	cmp	r2, #0
 800c19e:	f000 80ca 	beq.w	800c336 <_dtoa_r+0x8be>
 800c1a2:	9a07      	ldr	r2, [sp, #28]
 800c1a4:	2a01      	cmp	r2, #1
 800c1a6:	f300 80ad 	bgt.w	800c304 <_dtoa_r+0x88c>
 800c1aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c1ac:	2a00      	cmp	r2, #0
 800c1ae:	f000 80a5 	beq.w	800c2fc <_dtoa_r+0x884>
 800c1b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c1b6:	9e08      	ldr	r6, [sp, #32]
 800c1b8:	9d05      	ldr	r5, [sp, #20]
 800c1ba:	9a05      	ldr	r2, [sp, #20]
 800c1bc:	441a      	add	r2, r3
 800c1be:	9205      	str	r2, [sp, #20]
 800c1c0:	9a06      	ldr	r2, [sp, #24]
 800c1c2:	2101      	movs	r1, #1
 800c1c4:	441a      	add	r2, r3
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	9206      	str	r2, [sp, #24]
 800c1ca:	f000 fc3d 	bl	800ca48 <__i2b>
 800c1ce:	4607      	mov	r7, r0
 800c1d0:	b165      	cbz	r5, 800c1ec <_dtoa_r+0x774>
 800c1d2:	9b06      	ldr	r3, [sp, #24]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	dd09      	ble.n	800c1ec <_dtoa_r+0x774>
 800c1d8:	42ab      	cmp	r3, r5
 800c1da:	9a05      	ldr	r2, [sp, #20]
 800c1dc:	bfa8      	it	ge
 800c1de:	462b      	movge	r3, r5
 800c1e0:	1ad2      	subs	r2, r2, r3
 800c1e2:	9205      	str	r2, [sp, #20]
 800c1e4:	9a06      	ldr	r2, [sp, #24]
 800c1e6:	1aed      	subs	r5, r5, r3
 800c1e8:	1ad3      	subs	r3, r2, r3
 800c1ea:	9306      	str	r3, [sp, #24]
 800c1ec:	9b08      	ldr	r3, [sp, #32]
 800c1ee:	b1f3      	cbz	r3, 800c22e <_dtoa_r+0x7b6>
 800c1f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	f000 80a3 	beq.w	800c33e <_dtoa_r+0x8c6>
 800c1f8:	2e00      	cmp	r6, #0
 800c1fa:	dd10      	ble.n	800c21e <_dtoa_r+0x7a6>
 800c1fc:	4639      	mov	r1, r7
 800c1fe:	4632      	mov	r2, r6
 800c200:	4620      	mov	r0, r4
 800c202:	f000 fce1 	bl	800cbc8 <__pow5mult>
 800c206:	4652      	mov	r2, sl
 800c208:	4601      	mov	r1, r0
 800c20a:	4607      	mov	r7, r0
 800c20c:	4620      	mov	r0, r4
 800c20e:	f000 fc31 	bl	800ca74 <__multiply>
 800c212:	4651      	mov	r1, sl
 800c214:	4680      	mov	r8, r0
 800c216:	4620      	mov	r0, r4
 800c218:	f000 fb60 	bl	800c8dc <_Bfree>
 800c21c:	46c2      	mov	sl, r8
 800c21e:	9b08      	ldr	r3, [sp, #32]
 800c220:	1b9a      	subs	r2, r3, r6
 800c222:	d004      	beq.n	800c22e <_dtoa_r+0x7b6>
 800c224:	4651      	mov	r1, sl
 800c226:	4620      	mov	r0, r4
 800c228:	f000 fcce 	bl	800cbc8 <__pow5mult>
 800c22c:	4682      	mov	sl, r0
 800c22e:	2101      	movs	r1, #1
 800c230:	4620      	mov	r0, r4
 800c232:	f000 fc09 	bl	800ca48 <__i2b>
 800c236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c238:	2b00      	cmp	r3, #0
 800c23a:	4606      	mov	r6, r0
 800c23c:	f340 8081 	ble.w	800c342 <_dtoa_r+0x8ca>
 800c240:	461a      	mov	r2, r3
 800c242:	4601      	mov	r1, r0
 800c244:	4620      	mov	r0, r4
 800c246:	f000 fcbf 	bl	800cbc8 <__pow5mult>
 800c24a:	9b07      	ldr	r3, [sp, #28]
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	4606      	mov	r6, r0
 800c250:	dd7a      	ble.n	800c348 <_dtoa_r+0x8d0>
 800c252:	f04f 0800 	mov.w	r8, #0
 800c256:	6933      	ldr	r3, [r6, #16]
 800c258:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c25c:	6918      	ldr	r0, [r3, #16]
 800c25e:	f000 fba5 	bl	800c9ac <__hi0bits>
 800c262:	f1c0 0020 	rsb	r0, r0, #32
 800c266:	9b06      	ldr	r3, [sp, #24]
 800c268:	4418      	add	r0, r3
 800c26a:	f010 001f 	ands.w	r0, r0, #31
 800c26e:	f000 8094 	beq.w	800c39a <_dtoa_r+0x922>
 800c272:	f1c0 0320 	rsb	r3, r0, #32
 800c276:	2b04      	cmp	r3, #4
 800c278:	f340 8085 	ble.w	800c386 <_dtoa_r+0x90e>
 800c27c:	9b05      	ldr	r3, [sp, #20]
 800c27e:	f1c0 001c 	rsb	r0, r0, #28
 800c282:	4403      	add	r3, r0
 800c284:	9305      	str	r3, [sp, #20]
 800c286:	9b06      	ldr	r3, [sp, #24]
 800c288:	4403      	add	r3, r0
 800c28a:	4405      	add	r5, r0
 800c28c:	9306      	str	r3, [sp, #24]
 800c28e:	9b05      	ldr	r3, [sp, #20]
 800c290:	2b00      	cmp	r3, #0
 800c292:	dd05      	ble.n	800c2a0 <_dtoa_r+0x828>
 800c294:	4651      	mov	r1, sl
 800c296:	461a      	mov	r2, r3
 800c298:	4620      	mov	r0, r4
 800c29a:	f000 fcef 	bl	800cc7c <__lshift>
 800c29e:	4682      	mov	sl, r0
 800c2a0:	9b06      	ldr	r3, [sp, #24]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	dd05      	ble.n	800c2b2 <_dtoa_r+0x83a>
 800c2a6:	4631      	mov	r1, r6
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f000 fce6 	bl	800cc7c <__lshift>
 800c2b0:	4606      	mov	r6, r0
 800c2b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d072      	beq.n	800c39e <_dtoa_r+0x926>
 800c2b8:	4631      	mov	r1, r6
 800c2ba:	4650      	mov	r0, sl
 800c2bc:	f000 fd4a 	bl	800cd54 <__mcmp>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	da6c      	bge.n	800c39e <_dtoa_r+0x926>
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	4651      	mov	r1, sl
 800c2c8:	220a      	movs	r2, #10
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	f000 fb28 	bl	800c920 <__multadd>
 800c2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c2d6:	4682      	mov	sl, r0
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	f000 81b0 	beq.w	800c63e <_dtoa_r+0xbc6>
 800c2de:	2300      	movs	r3, #0
 800c2e0:	4639      	mov	r1, r7
 800c2e2:	220a      	movs	r2, #10
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	f000 fb1b 	bl	800c920 <__multadd>
 800c2ea:	9b01      	ldr	r3, [sp, #4]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	4607      	mov	r7, r0
 800c2f0:	f300 8096 	bgt.w	800c420 <_dtoa_r+0x9a8>
 800c2f4:	9b07      	ldr	r3, [sp, #28]
 800c2f6:	2b02      	cmp	r3, #2
 800c2f8:	dc59      	bgt.n	800c3ae <_dtoa_r+0x936>
 800c2fa:	e091      	b.n	800c420 <_dtoa_r+0x9a8>
 800c2fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c2fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c302:	e758      	b.n	800c1b6 <_dtoa_r+0x73e>
 800c304:	9b04      	ldr	r3, [sp, #16]
 800c306:	1e5e      	subs	r6, r3, #1
 800c308:	9b08      	ldr	r3, [sp, #32]
 800c30a:	42b3      	cmp	r3, r6
 800c30c:	bfbf      	itttt	lt
 800c30e:	9b08      	ldrlt	r3, [sp, #32]
 800c310:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c312:	9608      	strlt	r6, [sp, #32]
 800c314:	1af3      	sublt	r3, r6, r3
 800c316:	bfb4      	ite	lt
 800c318:	18d2      	addlt	r2, r2, r3
 800c31a:	1b9e      	subge	r6, r3, r6
 800c31c:	9b04      	ldr	r3, [sp, #16]
 800c31e:	bfbc      	itt	lt
 800c320:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c322:	2600      	movlt	r6, #0
 800c324:	2b00      	cmp	r3, #0
 800c326:	bfb7      	itett	lt
 800c328:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c32c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c330:	1a9d      	sublt	r5, r3, r2
 800c332:	2300      	movlt	r3, #0
 800c334:	e741      	b.n	800c1ba <_dtoa_r+0x742>
 800c336:	9e08      	ldr	r6, [sp, #32]
 800c338:	9d05      	ldr	r5, [sp, #20]
 800c33a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c33c:	e748      	b.n	800c1d0 <_dtoa_r+0x758>
 800c33e:	9a08      	ldr	r2, [sp, #32]
 800c340:	e770      	b.n	800c224 <_dtoa_r+0x7ac>
 800c342:	9b07      	ldr	r3, [sp, #28]
 800c344:	2b01      	cmp	r3, #1
 800c346:	dc19      	bgt.n	800c37c <_dtoa_r+0x904>
 800c348:	9b02      	ldr	r3, [sp, #8]
 800c34a:	b9bb      	cbnz	r3, 800c37c <_dtoa_r+0x904>
 800c34c:	9b03      	ldr	r3, [sp, #12]
 800c34e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c352:	b99b      	cbnz	r3, 800c37c <_dtoa_r+0x904>
 800c354:	9b03      	ldr	r3, [sp, #12]
 800c356:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c35a:	0d1b      	lsrs	r3, r3, #20
 800c35c:	051b      	lsls	r3, r3, #20
 800c35e:	b183      	cbz	r3, 800c382 <_dtoa_r+0x90a>
 800c360:	9b05      	ldr	r3, [sp, #20]
 800c362:	3301      	adds	r3, #1
 800c364:	9305      	str	r3, [sp, #20]
 800c366:	9b06      	ldr	r3, [sp, #24]
 800c368:	3301      	adds	r3, #1
 800c36a:	9306      	str	r3, [sp, #24]
 800c36c:	f04f 0801 	mov.w	r8, #1
 800c370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c372:	2b00      	cmp	r3, #0
 800c374:	f47f af6f 	bne.w	800c256 <_dtoa_r+0x7de>
 800c378:	2001      	movs	r0, #1
 800c37a:	e774      	b.n	800c266 <_dtoa_r+0x7ee>
 800c37c:	f04f 0800 	mov.w	r8, #0
 800c380:	e7f6      	b.n	800c370 <_dtoa_r+0x8f8>
 800c382:	4698      	mov	r8, r3
 800c384:	e7f4      	b.n	800c370 <_dtoa_r+0x8f8>
 800c386:	d082      	beq.n	800c28e <_dtoa_r+0x816>
 800c388:	9a05      	ldr	r2, [sp, #20]
 800c38a:	331c      	adds	r3, #28
 800c38c:	441a      	add	r2, r3
 800c38e:	9205      	str	r2, [sp, #20]
 800c390:	9a06      	ldr	r2, [sp, #24]
 800c392:	441a      	add	r2, r3
 800c394:	441d      	add	r5, r3
 800c396:	9206      	str	r2, [sp, #24]
 800c398:	e779      	b.n	800c28e <_dtoa_r+0x816>
 800c39a:	4603      	mov	r3, r0
 800c39c:	e7f4      	b.n	800c388 <_dtoa_r+0x910>
 800c39e:	9b04      	ldr	r3, [sp, #16]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	dc37      	bgt.n	800c414 <_dtoa_r+0x99c>
 800c3a4:	9b07      	ldr	r3, [sp, #28]
 800c3a6:	2b02      	cmp	r3, #2
 800c3a8:	dd34      	ble.n	800c414 <_dtoa_r+0x99c>
 800c3aa:	9b04      	ldr	r3, [sp, #16]
 800c3ac:	9301      	str	r3, [sp, #4]
 800c3ae:	9b01      	ldr	r3, [sp, #4]
 800c3b0:	b963      	cbnz	r3, 800c3cc <_dtoa_r+0x954>
 800c3b2:	4631      	mov	r1, r6
 800c3b4:	2205      	movs	r2, #5
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f000 fab2 	bl	800c920 <__multadd>
 800c3bc:	4601      	mov	r1, r0
 800c3be:	4606      	mov	r6, r0
 800c3c0:	4650      	mov	r0, sl
 800c3c2:	f000 fcc7 	bl	800cd54 <__mcmp>
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	f73f adbb 	bgt.w	800bf42 <_dtoa_r+0x4ca>
 800c3cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ce:	9d00      	ldr	r5, [sp, #0]
 800c3d0:	ea6f 0b03 	mvn.w	fp, r3
 800c3d4:	f04f 0800 	mov.w	r8, #0
 800c3d8:	4631      	mov	r1, r6
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f000 fa7e 	bl	800c8dc <_Bfree>
 800c3e0:	2f00      	cmp	r7, #0
 800c3e2:	f43f aeab 	beq.w	800c13c <_dtoa_r+0x6c4>
 800c3e6:	f1b8 0f00 	cmp.w	r8, #0
 800c3ea:	d005      	beq.n	800c3f8 <_dtoa_r+0x980>
 800c3ec:	45b8      	cmp	r8, r7
 800c3ee:	d003      	beq.n	800c3f8 <_dtoa_r+0x980>
 800c3f0:	4641      	mov	r1, r8
 800c3f2:	4620      	mov	r0, r4
 800c3f4:	f000 fa72 	bl	800c8dc <_Bfree>
 800c3f8:	4639      	mov	r1, r7
 800c3fa:	4620      	mov	r0, r4
 800c3fc:	f000 fa6e 	bl	800c8dc <_Bfree>
 800c400:	e69c      	b.n	800c13c <_dtoa_r+0x6c4>
 800c402:	2600      	movs	r6, #0
 800c404:	4637      	mov	r7, r6
 800c406:	e7e1      	b.n	800c3cc <_dtoa_r+0x954>
 800c408:	46bb      	mov	fp, r7
 800c40a:	4637      	mov	r7, r6
 800c40c:	e599      	b.n	800bf42 <_dtoa_r+0x4ca>
 800c40e:	bf00      	nop
 800c410:	40240000 	.word	0x40240000
 800c414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c416:	2b00      	cmp	r3, #0
 800c418:	f000 80c8 	beq.w	800c5ac <_dtoa_r+0xb34>
 800c41c:	9b04      	ldr	r3, [sp, #16]
 800c41e:	9301      	str	r3, [sp, #4]
 800c420:	2d00      	cmp	r5, #0
 800c422:	dd05      	ble.n	800c430 <_dtoa_r+0x9b8>
 800c424:	4639      	mov	r1, r7
 800c426:	462a      	mov	r2, r5
 800c428:	4620      	mov	r0, r4
 800c42a:	f000 fc27 	bl	800cc7c <__lshift>
 800c42e:	4607      	mov	r7, r0
 800c430:	f1b8 0f00 	cmp.w	r8, #0
 800c434:	d05b      	beq.n	800c4ee <_dtoa_r+0xa76>
 800c436:	6879      	ldr	r1, [r7, #4]
 800c438:	4620      	mov	r0, r4
 800c43a:	f000 fa0f 	bl	800c85c <_Balloc>
 800c43e:	4605      	mov	r5, r0
 800c440:	b928      	cbnz	r0, 800c44e <_dtoa_r+0x9d6>
 800c442:	4b83      	ldr	r3, [pc, #524]	; (800c650 <_dtoa_r+0xbd8>)
 800c444:	4602      	mov	r2, r0
 800c446:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c44a:	f7ff bb2e 	b.w	800baaa <_dtoa_r+0x32>
 800c44e:	693a      	ldr	r2, [r7, #16]
 800c450:	3202      	adds	r2, #2
 800c452:	0092      	lsls	r2, r2, #2
 800c454:	f107 010c 	add.w	r1, r7, #12
 800c458:	300c      	adds	r0, #12
 800c45a:	f000 ffab 	bl	800d3b4 <memcpy>
 800c45e:	2201      	movs	r2, #1
 800c460:	4629      	mov	r1, r5
 800c462:	4620      	mov	r0, r4
 800c464:	f000 fc0a 	bl	800cc7c <__lshift>
 800c468:	9b00      	ldr	r3, [sp, #0]
 800c46a:	3301      	adds	r3, #1
 800c46c:	9304      	str	r3, [sp, #16]
 800c46e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c472:	4413      	add	r3, r2
 800c474:	9308      	str	r3, [sp, #32]
 800c476:	9b02      	ldr	r3, [sp, #8]
 800c478:	f003 0301 	and.w	r3, r3, #1
 800c47c:	46b8      	mov	r8, r7
 800c47e:	9306      	str	r3, [sp, #24]
 800c480:	4607      	mov	r7, r0
 800c482:	9b04      	ldr	r3, [sp, #16]
 800c484:	4631      	mov	r1, r6
 800c486:	3b01      	subs	r3, #1
 800c488:	4650      	mov	r0, sl
 800c48a:	9301      	str	r3, [sp, #4]
 800c48c:	f7ff fa6c 	bl	800b968 <quorem>
 800c490:	4641      	mov	r1, r8
 800c492:	9002      	str	r0, [sp, #8]
 800c494:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c498:	4650      	mov	r0, sl
 800c49a:	f000 fc5b 	bl	800cd54 <__mcmp>
 800c49e:	463a      	mov	r2, r7
 800c4a0:	9005      	str	r0, [sp, #20]
 800c4a2:	4631      	mov	r1, r6
 800c4a4:	4620      	mov	r0, r4
 800c4a6:	f000 fc71 	bl	800cd8c <__mdiff>
 800c4aa:	68c2      	ldr	r2, [r0, #12]
 800c4ac:	4605      	mov	r5, r0
 800c4ae:	bb02      	cbnz	r2, 800c4f2 <_dtoa_r+0xa7a>
 800c4b0:	4601      	mov	r1, r0
 800c4b2:	4650      	mov	r0, sl
 800c4b4:	f000 fc4e 	bl	800cd54 <__mcmp>
 800c4b8:	4602      	mov	r2, r0
 800c4ba:	4629      	mov	r1, r5
 800c4bc:	4620      	mov	r0, r4
 800c4be:	9209      	str	r2, [sp, #36]	; 0x24
 800c4c0:	f000 fa0c 	bl	800c8dc <_Bfree>
 800c4c4:	9b07      	ldr	r3, [sp, #28]
 800c4c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4c8:	9d04      	ldr	r5, [sp, #16]
 800c4ca:	ea43 0102 	orr.w	r1, r3, r2
 800c4ce:	9b06      	ldr	r3, [sp, #24]
 800c4d0:	4319      	orrs	r1, r3
 800c4d2:	d110      	bne.n	800c4f6 <_dtoa_r+0xa7e>
 800c4d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c4d8:	d029      	beq.n	800c52e <_dtoa_r+0xab6>
 800c4da:	9b05      	ldr	r3, [sp, #20]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	dd02      	ble.n	800c4e6 <_dtoa_r+0xa6e>
 800c4e0:	9b02      	ldr	r3, [sp, #8]
 800c4e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c4e6:	9b01      	ldr	r3, [sp, #4]
 800c4e8:	f883 9000 	strb.w	r9, [r3]
 800c4ec:	e774      	b.n	800c3d8 <_dtoa_r+0x960>
 800c4ee:	4638      	mov	r0, r7
 800c4f0:	e7ba      	b.n	800c468 <_dtoa_r+0x9f0>
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	e7e1      	b.n	800c4ba <_dtoa_r+0xa42>
 800c4f6:	9b05      	ldr	r3, [sp, #20]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	db04      	blt.n	800c506 <_dtoa_r+0xa8e>
 800c4fc:	9907      	ldr	r1, [sp, #28]
 800c4fe:	430b      	orrs	r3, r1
 800c500:	9906      	ldr	r1, [sp, #24]
 800c502:	430b      	orrs	r3, r1
 800c504:	d120      	bne.n	800c548 <_dtoa_r+0xad0>
 800c506:	2a00      	cmp	r2, #0
 800c508:	dded      	ble.n	800c4e6 <_dtoa_r+0xa6e>
 800c50a:	4651      	mov	r1, sl
 800c50c:	2201      	movs	r2, #1
 800c50e:	4620      	mov	r0, r4
 800c510:	f000 fbb4 	bl	800cc7c <__lshift>
 800c514:	4631      	mov	r1, r6
 800c516:	4682      	mov	sl, r0
 800c518:	f000 fc1c 	bl	800cd54 <__mcmp>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	dc03      	bgt.n	800c528 <_dtoa_r+0xab0>
 800c520:	d1e1      	bne.n	800c4e6 <_dtoa_r+0xa6e>
 800c522:	f019 0f01 	tst.w	r9, #1
 800c526:	d0de      	beq.n	800c4e6 <_dtoa_r+0xa6e>
 800c528:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c52c:	d1d8      	bne.n	800c4e0 <_dtoa_r+0xa68>
 800c52e:	9a01      	ldr	r2, [sp, #4]
 800c530:	2339      	movs	r3, #57	; 0x39
 800c532:	7013      	strb	r3, [r2, #0]
 800c534:	462b      	mov	r3, r5
 800c536:	461d      	mov	r5, r3
 800c538:	3b01      	subs	r3, #1
 800c53a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c53e:	2a39      	cmp	r2, #57	; 0x39
 800c540:	d06c      	beq.n	800c61c <_dtoa_r+0xba4>
 800c542:	3201      	adds	r2, #1
 800c544:	701a      	strb	r2, [r3, #0]
 800c546:	e747      	b.n	800c3d8 <_dtoa_r+0x960>
 800c548:	2a00      	cmp	r2, #0
 800c54a:	dd07      	ble.n	800c55c <_dtoa_r+0xae4>
 800c54c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c550:	d0ed      	beq.n	800c52e <_dtoa_r+0xab6>
 800c552:	9a01      	ldr	r2, [sp, #4]
 800c554:	f109 0301 	add.w	r3, r9, #1
 800c558:	7013      	strb	r3, [r2, #0]
 800c55a:	e73d      	b.n	800c3d8 <_dtoa_r+0x960>
 800c55c:	9b04      	ldr	r3, [sp, #16]
 800c55e:	9a08      	ldr	r2, [sp, #32]
 800c560:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c564:	4293      	cmp	r3, r2
 800c566:	d043      	beq.n	800c5f0 <_dtoa_r+0xb78>
 800c568:	4651      	mov	r1, sl
 800c56a:	2300      	movs	r3, #0
 800c56c:	220a      	movs	r2, #10
 800c56e:	4620      	mov	r0, r4
 800c570:	f000 f9d6 	bl	800c920 <__multadd>
 800c574:	45b8      	cmp	r8, r7
 800c576:	4682      	mov	sl, r0
 800c578:	f04f 0300 	mov.w	r3, #0
 800c57c:	f04f 020a 	mov.w	r2, #10
 800c580:	4641      	mov	r1, r8
 800c582:	4620      	mov	r0, r4
 800c584:	d107      	bne.n	800c596 <_dtoa_r+0xb1e>
 800c586:	f000 f9cb 	bl	800c920 <__multadd>
 800c58a:	4680      	mov	r8, r0
 800c58c:	4607      	mov	r7, r0
 800c58e:	9b04      	ldr	r3, [sp, #16]
 800c590:	3301      	adds	r3, #1
 800c592:	9304      	str	r3, [sp, #16]
 800c594:	e775      	b.n	800c482 <_dtoa_r+0xa0a>
 800c596:	f000 f9c3 	bl	800c920 <__multadd>
 800c59a:	4639      	mov	r1, r7
 800c59c:	4680      	mov	r8, r0
 800c59e:	2300      	movs	r3, #0
 800c5a0:	220a      	movs	r2, #10
 800c5a2:	4620      	mov	r0, r4
 800c5a4:	f000 f9bc 	bl	800c920 <__multadd>
 800c5a8:	4607      	mov	r7, r0
 800c5aa:	e7f0      	b.n	800c58e <_dtoa_r+0xb16>
 800c5ac:	9b04      	ldr	r3, [sp, #16]
 800c5ae:	9301      	str	r3, [sp, #4]
 800c5b0:	9d00      	ldr	r5, [sp, #0]
 800c5b2:	4631      	mov	r1, r6
 800c5b4:	4650      	mov	r0, sl
 800c5b6:	f7ff f9d7 	bl	800b968 <quorem>
 800c5ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c5be:	9b00      	ldr	r3, [sp, #0]
 800c5c0:	f805 9b01 	strb.w	r9, [r5], #1
 800c5c4:	1aea      	subs	r2, r5, r3
 800c5c6:	9b01      	ldr	r3, [sp, #4]
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	dd07      	ble.n	800c5dc <_dtoa_r+0xb64>
 800c5cc:	4651      	mov	r1, sl
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	220a      	movs	r2, #10
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f000 f9a4 	bl	800c920 <__multadd>
 800c5d8:	4682      	mov	sl, r0
 800c5da:	e7ea      	b.n	800c5b2 <_dtoa_r+0xb3a>
 800c5dc:	9b01      	ldr	r3, [sp, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	bfc8      	it	gt
 800c5e2:	461d      	movgt	r5, r3
 800c5e4:	9b00      	ldr	r3, [sp, #0]
 800c5e6:	bfd8      	it	le
 800c5e8:	2501      	movle	r5, #1
 800c5ea:	441d      	add	r5, r3
 800c5ec:	f04f 0800 	mov.w	r8, #0
 800c5f0:	4651      	mov	r1, sl
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	f000 fb41 	bl	800cc7c <__lshift>
 800c5fa:	4631      	mov	r1, r6
 800c5fc:	4682      	mov	sl, r0
 800c5fe:	f000 fba9 	bl	800cd54 <__mcmp>
 800c602:	2800      	cmp	r0, #0
 800c604:	dc96      	bgt.n	800c534 <_dtoa_r+0xabc>
 800c606:	d102      	bne.n	800c60e <_dtoa_r+0xb96>
 800c608:	f019 0f01 	tst.w	r9, #1
 800c60c:	d192      	bne.n	800c534 <_dtoa_r+0xabc>
 800c60e:	462b      	mov	r3, r5
 800c610:	461d      	mov	r5, r3
 800c612:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c616:	2a30      	cmp	r2, #48	; 0x30
 800c618:	d0fa      	beq.n	800c610 <_dtoa_r+0xb98>
 800c61a:	e6dd      	b.n	800c3d8 <_dtoa_r+0x960>
 800c61c:	9a00      	ldr	r2, [sp, #0]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d189      	bne.n	800c536 <_dtoa_r+0xabe>
 800c622:	f10b 0b01 	add.w	fp, fp, #1
 800c626:	2331      	movs	r3, #49	; 0x31
 800c628:	e796      	b.n	800c558 <_dtoa_r+0xae0>
 800c62a:	4b0a      	ldr	r3, [pc, #40]	; (800c654 <_dtoa_r+0xbdc>)
 800c62c:	f7ff ba99 	b.w	800bb62 <_dtoa_r+0xea>
 800c630:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c632:	2b00      	cmp	r3, #0
 800c634:	f47f aa6d 	bne.w	800bb12 <_dtoa_r+0x9a>
 800c638:	4b07      	ldr	r3, [pc, #28]	; (800c658 <_dtoa_r+0xbe0>)
 800c63a:	f7ff ba92 	b.w	800bb62 <_dtoa_r+0xea>
 800c63e:	9b01      	ldr	r3, [sp, #4]
 800c640:	2b00      	cmp	r3, #0
 800c642:	dcb5      	bgt.n	800c5b0 <_dtoa_r+0xb38>
 800c644:	9b07      	ldr	r3, [sp, #28]
 800c646:	2b02      	cmp	r3, #2
 800c648:	f73f aeb1 	bgt.w	800c3ae <_dtoa_r+0x936>
 800c64c:	e7b0      	b.n	800c5b0 <_dtoa_r+0xb38>
 800c64e:	bf00      	nop
 800c650:	0800dbe4 	.word	0x0800dbe4
 800c654:	0800db44 	.word	0x0800db44
 800c658:	0800db68 	.word	0x0800db68

0800c65c <_free_r>:
 800c65c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c65e:	2900      	cmp	r1, #0
 800c660:	d044      	beq.n	800c6ec <_free_r+0x90>
 800c662:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c666:	9001      	str	r0, [sp, #4]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f1a1 0404 	sub.w	r4, r1, #4
 800c66e:	bfb8      	it	lt
 800c670:	18e4      	addlt	r4, r4, r3
 800c672:	f000 f8e7 	bl	800c844 <__malloc_lock>
 800c676:	4a1e      	ldr	r2, [pc, #120]	; (800c6f0 <_free_r+0x94>)
 800c678:	9801      	ldr	r0, [sp, #4]
 800c67a:	6813      	ldr	r3, [r2, #0]
 800c67c:	b933      	cbnz	r3, 800c68c <_free_r+0x30>
 800c67e:	6063      	str	r3, [r4, #4]
 800c680:	6014      	str	r4, [r2, #0]
 800c682:	b003      	add	sp, #12
 800c684:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c688:	f000 b8e2 	b.w	800c850 <__malloc_unlock>
 800c68c:	42a3      	cmp	r3, r4
 800c68e:	d908      	bls.n	800c6a2 <_free_r+0x46>
 800c690:	6825      	ldr	r5, [r4, #0]
 800c692:	1961      	adds	r1, r4, r5
 800c694:	428b      	cmp	r3, r1
 800c696:	bf01      	itttt	eq
 800c698:	6819      	ldreq	r1, [r3, #0]
 800c69a:	685b      	ldreq	r3, [r3, #4]
 800c69c:	1949      	addeq	r1, r1, r5
 800c69e:	6021      	streq	r1, [r4, #0]
 800c6a0:	e7ed      	b.n	800c67e <_free_r+0x22>
 800c6a2:	461a      	mov	r2, r3
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	b10b      	cbz	r3, 800c6ac <_free_r+0x50>
 800c6a8:	42a3      	cmp	r3, r4
 800c6aa:	d9fa      	bls.n	800c6a2 <_free_r+0x46>
 800c6ac:	6811      	ldr	r1, [r2, #0]
 800c6ae:	1855      	adds	r5, r2, r1
 800c6b0:	42a5      	cmp	r5, r4
 800c6b2:	d10b      	bne.n	800c6cc <_free_r+0x70>
 800c6b4:	6824      	ldr	r4, [r4, #0]
 800c6b6:	4421      	add	r1, r4
 800c6b8:	1854      	adds	r4, r2, r1
 800c6ba:	42a3      	cmp	r3, r4
 800c6bc:	6011      	str	r1, [r2, #0]
 800c6be:	d1e0      	bne.n	800c682 <_free_r+0x26>
 800c6c0:	681c      	ldr	r4, [r3, #0]
 800c6c2:	685b      	ldr	r3, [r3, #4]
 800c6c4:	6053      	str	r3, [r2, #4]
 800c6c6:	440c      	add	r4, r1
 800c6c8:	6014      	str	r4, [r2, #0]
 800c6ca:	e7da      	b.n	800c682 <_free_r+0x26>
 800c6cc:	d902      	bls.n	800c6d4 <_free_r+0x78>
 800c6ce:	230c      	movs	r3, #12
 800c6d0:	6003      	str	r3, [r0, #0]
 800c6d2:	e7d6      	b.n	800c682 <_free_r+0x26>
 800c6d4:	6825      	ldr	r5, [r4, #0]
 800c6d6:	1961      	adds	r1, r4, r5
 800c6d8:	428b      	cmp	r3, r1
 800c6da:	bf04      	itt	eq
 800c6dc:	6819      	ldreq	r1, [r3, #0]
 800c6de:	685b      	ldreq	r3, [r3, #4]
 800c6e0:	6063      	str	r3, [r4, #4]
 800c6e2:	bf04      	itt	eq
 800c6e4:	1949      	addeq	r1, r1, r5
 800c6e6:	6021      	streq	r1, [r4, #0]
 800c6e8:	6054      	str	r4, [r2, #4]
 800c6ea:	e7ca      	b.n	800c682 <_free_r+0x26>
 800c6ec:	b003      	add	sp, #12
 800c6ee:	bd30      	pop	{r4, r5, pc}
 800c6f0:	2000111c 	.word	0x2000111c

0800c6f4 <malloc>:
 800c6f4:	4b02      	ldr	r3, [pc, #8]	; (800c700 <malloc+0xc>)
 800c6f6:	4601      	mov	r1, r0
 800c6f8:	6818      	ldr	r0, [r3, #0]
 800c6fa:	f000 b823 	b.w	800c744 <_malloc_r>
 800c6fe:	bf00      	nop
 800c700:	20000170 	.word	0x20000170

0800c704 <sbrk_aligned>:
 800c704:	b570      	push	{r4, r5, r6, lr}
 800c706:	4e0e      	ldr	r6, [pc, #56]	; (800c740 <sbrk_aligned+0x3c>)
 800c708:	460c      	mov	r4, r1
 800c70a:	6831      	ldr	r1, [r6, #0]
 800c70c:	4605      	mov	r5, r0
 800c70e:	b911      	cbnz	r1, 800c716 <sbrk_aligned+0x12>
 800c710:	f000 fe40 	bl	800d394 <_sbrk_r>
 800c714:	6030      	str	r0, [r6, #0]
 800c716:	4621      	mov	r1, r4
 800c718:	4628      	mov	r0, r5
 800c71a:	f000 fe3b 	bl	800d394 <_sbrk_r>
 800c71e:	1c43      	adds	r3, r0, #1
 800c720:	d00a      	beq.n	800c738 <sbrk_aligned+0x34>
 800c722:	1cc4      	adds	r4, r0, #3
 800c724:	f024 0403 	bic.w	r4, r4, #3
 800c728:	42a0      	cmp	r0, r4
 800c72a:	d007      	beq.n	800c73c <sbrk_aligned+0x38>
 800c72c:	1a21      	subs	r1, r4, r0
 800c72e:	4628      	mov	r0, r5
 800c730:	f000 fe30 	bl	800d394 <_sbrk_r>
 800c734:	3001      	adds	r0, #1
 800c736:	d101      	bne.n	800c73c <sbrk_aligned+0x38>
 800c738:	f04f 34ff 	mov.w	r4, #4294967295
 800c73c:	4620      	mov	r0, r4
 800c73e:	bd70      	pop	{r4, r5, r6, pc}
 800c740:	20001120 	.word	0x20001120

0800c744 <_malloc_r>:
 800c744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c748:	1ccd      	adds	r5, r1, #3
 800c74a:	f025 0503 	bic.w	r5, r5, #3
 800c74e:	3508      	adds	r5, #8
 800c750:	2d0c      	cmp	r5, #12
 800c752:	bf38      	it	cc
 800c754:	250c      	movcc	r5, #12
 800c756:	2d00      	cmp	r5, #0
 800c758:	4607      	mov	r7, r0
 800c75a:	db01      	blt.n	800c760 <_malloc_r+0x1c>
 800c75c:	42a9      	cmp	r1, r5
 800c75e:	d905      	bls.n	800c76c <_malloc_r+0x28>
 800c760:	230c      	movs	r3, #12
 800c762:	603b      	str	r3, [r7, #0]
 800c764:	2600      	movs	r6, #0
 800c766:	4630      	mov	r0, r6
 800c768:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c76c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c840 <_malloc_r+0xfc>
 800c770:	f000 f868 	bl	800c844 <__malloc_lock>
 800c774:	f8d8 3000 	ldr.w	r3, [r8]
 800c778:	461c      	mov	r4, r3
 800c77a:	bb5c      	cbnz	r4, 800c7d4 <_malloc_r+0x90>
 800c77c:	4629      	mov	r1, r5
 800c77e:	4638      	mov	r0, r7
 800c780:	f7ff ffc0 	bl	800c704 <sbrk_aligned>
 800c784:	1c43      	adds	r3, r0, #1
 800c786:	4604      	mov	r4, r0
 800c788:	d155      	bne.n	800c836 <_malloc_r+0xf2>
 800c78a:	f8d8 4000 	ldr.w	r4, [r8]
 800c78e:	4626      	mov	r6, r4
 800c790:	2e00      	cmp	r6, #0
 800c792:	d145      	bne.n	800c820 <_malloc_r+0xdc>
 800c794:	2c00      	cmp	r4, #0
 800c796:	d048      	beq.n	800c82a <_malloc_r+0xe6>
 800c798:	6823      	ldr	r3, [r4, #0]
 800c79a:	4631      	mov	r1, r6
 800c79c:	4638      	mov	r0, r7
 800c79e:	eb04 0903 	add.w	r9, r4, r3
 800c7a2:	f000 fdf7 	bl	800d394 <_sbrk_r>
 800c7a6:	4581      	cmp	r9, r0
 800c7a8:	d13f      	bne.n	800c82a <_malloc_r+0xe6>
 800c7aa:	6821      	ldr	r1, [r4, #0]
 800c7ac:	1a6d      	subs	r5, r5, r1
 800c7ae:	4629      	mov	r1, r5
 800c7b0:	4638      	mov	r0, r7
 800c7b2:	f7ff ffa7 	bl	800c704 <sbrk_aligned>
 800c7b6:	3001      	adds	r0, #1
 800c7b8:	d037      	beq.n	800c82a <_malloc_r+0xe6>
 800c7ba:	6823      	ldr	r3, [r4, #0]
 800c7bc:	442b      	add	r3, r5
 800c7be:	6023      	str	r3, [r4, #0]
 800c7c0:	f8d8 3000 	ldr.w	r3, [r8]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d038      	beq.n	800c83a <_malloc_r+0xf6>
 800c7c8:	685a      	ldr	r2, [r3, #4]
 800c7ca:	42a2      	cmp	r2, r4
 800c7cc:	d12b      	bne.n	800c826 <_malloc_r+0xe2>
 800c7ce:	2200      	movs	r2, #0
 800c7d0:	605a      	str	r2, [r3, #4]
 800c7d2:	e00f      	b.n	800c7f4 <_malloc_r+0xb0>
 800c7d4:	6822      	ldr	r2, [r4, #0]
 800c7d6:	1b52      	subs	r2, r2, r5
 800c7d8:	d41f      	bmi.n	800c81a <_malloc_r+0xd6>
 800c7da:	2a0b      	cmp	r2, #11
 800c7dc:	d917      	bls.n	800c80e <_malloc_r+0xca>
 800c7de:	1961      	adds	r1, r4, r5
 800c7e0:	42a3      	cmp	r3, r4
 800c7e2:	6025      	str	r5, [r4, #0]
 800c7e4:	bf18      	it	ne
 800c7e6:	6059      	strne	r1, [r3, #4]
 800c7e8:	6863      	ldr	r3, [r4, #4]
 800c7ea:	bf08      	it	eq
 800c7ec:	f8c8 1000 	streq.w	r1, [r8]
 800c7f0:	5162      	str	r2, [r4, r5]
 800c7f2:	604b      	str	r3, [r1, #4]
 800c7f4:	4638      	mov	r0, r7
 800c7f6:	f104 060b 	add.w	r6, r4, #11
 800c7fa:	f000 f829 	bl	800c850 <__malloc_unlock>
 800c7fe:	f026 0607 	bic.w	r6, r6, #7
 800c802:	1d23      	adds	r3, r4, #4
 800c804:	1af2      	subs	r2, r6, r3
 800c806:	d0ae      	beq.n	800c766 <_malloc_r+0x22>
 800c808:	1b9b      	subs	r3, r3, r6
 800c80a:	50a3      	str	r3, [r4, r2]
 800c80c:	e7ab      	b.n	800c766 <_malloc_r+0x22>
 800c80e:	42a3      	cmp	r3, r4
 800c810:	6862      	ldr	r2, [r4, #4]
 800c812:	d1dd      	bne.n	800c7d0 <_malloc_r+0x8c>
 800c814:	f8c8 2000 	str.w	r2, [r8]
 800c818:	e7ec      	b.n	800c7f4 <_malloc_r+0xb0>
 800c81a:	4623      	mov	r3, r4
 800c81c:	6864      	ldr	r4, [r4, #4]
 800c81e:	e7ac      	b.n	800c77a <_malloc_r+0x36>
 800c820:	4634      	mov	r4, r6
 800c822:	6876      	ldr	r6, [r6, #4]
 800c824:	e7b4      	b.n	800c790 <_malloc_r+0x4c>
 800c826:	4613      	mov	r3, r2
 800c828:	e7cc      	b.n	800c7c4 <_malloc_r+0x80>
 800c82a:	230c      	movs	r3, #12
 800c82c:	603b      	str	r3, [r7, #0]
 800c82e:	4638      	mov	r0, r7
 800c830:	f000 f80e 	bl	800c850 <__malloc_unlock>
 800c834:	e797      	b.n	800c766 <_malloc_r+0x22>
 800c836:	6025      	str	r5, [r4, #0]
 800c838:	e7dc      	b.n	800c7f4 <_malloc_r+0xb0>
 800c83a:	605b      	str	r3, [r3, #4]
 800c83c:	deff      	udf	#255	; 0xff
 800c83e:	bf00      	nop
 800c840:	2000111c 	.word	0x2000111c

0800c844 <__malloc_lock>:
 800c844:	4801      	ldr	r0, [pc, #4]	; (800c84c <__malloc_lock+0x8>)
 800c846:	f7ff b88d 	b.w	800b964 <__retarget_lock_acquire_recursive>
 800c84a:	bf00      	nop
 800c84c:	20001118 	.word	0x20001118

0800c850 <__malloc_unlock>:
 800c850:	4801      	ldr	r0, [pc, #4]	; (800c858 <__malloc_unlock+0x8>)
 800c852:	f7ff b888 	b.w	800b966 <__retarget_lock_release_recursive>
 800c856:	bf00      	nop
 800c858:	20001118 	.word	0x20001118

0800c85c <_Balloc>:
 800c85c:	b570      	push	{r4, r5, r6, lr}
 800c85e:	69c6      	ldr	r6, [r0, #28]
 800c860:	4604      	mov	r4, r0
 800c862:	460d      	mov	r5, r1
 800c864:	b976      	cbnz	r6, 800c884 <_Balloc+0x28>
 800c866:	2010      	movs	r0, #16
 800c868:	f7ff ff44 	bl	800c6f4 <malloc>
 800c86c:	4602      	mov	r2, r0
 800c86e:	61e0      	str	r0, [r4, #28]
 800c870:	b920      	cbnz	r0, 800c87c <_Balloc+0x20>
 800c872:	4b18      	ldr	r3, [pc, #96]	; (800c8d4 <_Balloc+0x78>)
 800c874:	4818      	ldr	r0, [pc, #96]	; (800c8d8 <_Balloc+0x7c>)
 800c876:	216b      	movs	r1, #107	; 0x6b
 800c878:	f000 fdaa 	bl	800d3d0 <__assert_func>
 800c87c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c880:	6006      	str	r6, [r0, #0]
 800c882:	60c6      	str	r6, [r0, #12]
 800c884:	69e6      	ldr	r6, [r4, #28]
 800c886:	68f3      	ldr	r3, [r6, #12]
 800c888:	b183      	cbz	r3, 800c8ac <_Balloc+0x50>
 800c88a:	69e3      	ldr	r3, [r4, #28]
 800c88c:	68db      	ldr	r3, [r3, #12]
 800c88e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c892:	b9b8      	cbnz	r0, 800c8c4 <_Balloc+0x68>
 800c894:	2101      	movs	r1, #1
 800c896:	fa01 f605 	lsl.w	r6, r1, r5
 800c89a:	1d72      	adds	r2, r6, #5
 800c89c:	0092      	lsls	r2, r2, #2
 800c89e:	4620      	mov	r0, r4
 800c8a0:	f000 fdb4 	bl	800d40c <_calloc_r>
 800c8a4:	b160      	cbz	r0, 800c8c0 <_Balloc+0x64>
 800c8a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c8aa:	e00e      	b.n	800c8ca <_Balloc+0x6e>
 800c8ac:	2221      	movs	r2, #33	; 0x21
 800c8ae:	2104      	movs	r1, #4
 800c8b0:	4620      	mov	r0, r4
 800c8b2:	f000 fdab 	bl	800d40c <_calloc_r>
 800c8b6:	69e3      	ldr	r3, [r4, #28]
 800c8b8:	60f0      	str	r0, [r6, #12]
 800c8ba:	68db      	ldr	r3, [r3, #12]
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d1e4      	bne.n	800c88a <_Balloc+0x2e>
 800c8c0:	2000      	movs	r0, #0
 800c8c2:	bd70      	pop	{r4, r5, r6, pc}
 800c8c4:	6802      	ldr	r2, [r0, #0]
 800c8c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c8d0:	e7f7      	b.n	800c8c2 <_Balloc+0x66>
 800c8d2:	bf00      	nop
 800c8d4:	0800db75 	.word	0x0800db75
 800c8d8:	0800dbf5 	.word	0x0800dbf5

0800c8dc <_Bfree>:
 800c8dc:	b570      	push	{r4, r5, r6, lr}
 800c8de:	69c6      	ldr	r6, [r0, #28]
 800c8e0:	4605      	mov	r5, r0
 800c8e2:	460c      	mov	r4, r1
 800c8e4:	b976      	cbnz	r6, 800c904 <_Bfree+0x28>
 800c8e6:	2010      	movs	r0, #16
 800c8e8:	f7ff ff04 	bl	800c6f4 <malloc>
 800c8ec:	4602      	mov	r2, r0
 800c8ee:	61e8      	str	r0, [r5, #28]
 800c8f0:	b920      	cbnz	r0, 800c8fc <_Bfree+0x20>
 800c8f2:	4b09      	ldr	r3, [pc, #36]	; (800c918 <_Bfree+0x3c>)
 800c8f4:	4809      	ldr	r0, [pc, #36]	; (800c91c <_Bfree+0x40>)
 800c8f6:	218f      	movs	r1, #143	; 0x8f
 800c8f8:	f000 fd6a 	bl	800d3d0 <__assert_func>
 800c8fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c900:	6006      	str	r6, [r0, #0]
 800c902:	60c6      	str	r6, [r0, #12]
 800c904:	b13c      	cbz	r4, 800c916 <_Bfree+0x3a>
 800c906:	69eb      	ldr	r3, [r5, #28]
 800c908:	6862      	ldr	r2, [r4, #4]
 800c90a:	68db      	ldr	r3, [r3, #12]
 800c90c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c910:	6021      	str	r1, [r4, #0]
 800c912:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c916:	bd70      	pop	{r4, r5, r6, pc}
 800c918:	0800db75 	.word	0x0800db75
 800c91c:	0800dbf5 	.word	0x0800dbf5

0800c920 <__multadd>:
 800c920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c924:	690d      	ldr	r5, [r1, #16]
 800c926:	4607      	mov	r7, r0
 800c928:	460c      	mov	r4, r1
 800c92a:	461e      	mov	r6, r3
 800c92c:	f101 0c14 	add.w	ip, r1, #20
 800c930:	2000      	movs	r0, #0
 800c932:	f8dc 3000 	ldr.w	r3, [ip]
 800c936:	b299      	uxth	r1, r3
 800c938:	fb02 6101 	mla	r1, r2, r1, r6
 800c93c:	0c1e      	lsrs	r6, r3, #16
 800c93e:	0c0b      	lsrs	r3, r1, #16
 800c940:	fb02 3306 	mla	r3, r2, r6, r3
 800c944:	b289      	uxth	r1, r1
 800c946:	3001      	adds	r0, #1
 800c948:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c94c:	4285      	cmp	r5, r0
 800c94e:	f84c 1b04 	str.w	r1, [ip], #4
 800c952:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c956:	dcec      	bgt.n	800c932 <__multadd+0x12>
 800c958:	b30e      	cbz	r6, 800c99e <__multadd+0x7e>
 800c95a:	68a3      	ldr	r3, [r4, #8]
 800c95c:	42ab      	cmp	r3, r5
 800c95e:	dc19      	bgt.n	800c994 <__multadd+0x74>
 800c960:	6861      	ldr	r1, [r4, #4]
 800c962:	4638      	mov	r0, r7
 800c964:	3101      	adds	r1, #1
 800c966:	f7ff ff79 	bl	800c85c <_Balloc>
 800c96a:	4680      	mov	r8, r0
 800c96c:	b928      	cbnz	r0, 800c97a <__multadd+0x5a>
 800c96e:	4602      	mov	r2, r0
 800c970:	4b0c      	ldr	r3, [pc, #48]	; (800c9a4 <__multadd+0x84>)
 800c972:	480d      	ldr	r0, [pc, #52]	; (800c9a8 <__multadd+0x88>)
 800c974:	21ba      	movs	r1, #186	; 0xba
 800c976:	f000 fd2b 	bl	800d3d0 <__assert_func>
 800c97a:	6922      	ldr	r2, [r4, #16]
 800c97c:	3202      	adds	r2, #2
 800c97e:	f104 010c 	add.w	r1, r4, #12
 800c982:	0092      	lsls	r2, r2, #2
 800c984:	300c      	adds	r0, #12
 800c986:	f000 fd15 	bl	800d3b4 <memcpy>
 800c98a:	4621      	mov	r1, r4
 800c98c:	4638      	mov	r0, r7
 800c98e:	f7ff ffa5 	bl	800c8dc <_Bfree>
 800c992:	4644      	mov	r4, r8
 800c994:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c998:	3501      	adds	r5, #1
 800c99a:	615e      	str	r6, [r3, #20]
 800c99c:	6125      	str	r5, [r4, #16]
 800c99e:	4620      	mov	r0, r4
 800c9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9a4:	0800dbe4 	.word	0x0800dbe4
 800c9a8:	0800dbf5 	.word	0x0800dbf5

0800c9ac <__hi0bits>:
 800c9ac:	0c03      	lsrs	r3, r0, #16
 800c9ae:	041b      	lsls	r3, r3, #16
 800c9b0:	b9d3      	cbnz	r3, 800c9e8 <__hi0bits+0x3c>
 800c9b2:	0400      	lsls	r0, r0, #16
 800c9b4:	2310      	movs	r3, #16
 800c9b6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c9ba:	bf04      	itt	eq
 800c9bc:	0200      	lsleq	r0, r0, #8
 800c9be:	3308      	addeq	r3, #8
 800c9c0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c9c4:	bf04      	itt	eq
 800c9c6:	0100      	lsleq	r0, r0, #4
 800c9c8:	3304      	addeq	r3, #4
 800c9ca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c9ce:	bf04      	itt	eq
 800c9d0:	0080      	lsleq	r0, r0, #2
 800c9d2:	3302      	addeq	r3, #2
 800c9d4:	2800      	cmp	r0, #0
 800c9d6:	db05      	blt.n	800c9e4 <__hi0bits+0x38>
 800c9d8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c9dc:	f103 0301 	add.w	r3, r3, #1
 800c9e0:	bf08      	it	eq
 800c9e2:	2320      	moveq	r3, #32
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	4770      	bx	lr
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	e7e4      	b.n	800c9b6 <__hi0bits+0xa>

0800c9ec <__lo0bits>:
 800c9ec:	6803      	ldr	r3, [r0, #0]
 800c9ee:	f013 0207 	ands.w	r2, r3, #7
 800c9f2:	d00c      	beq.n	800ca0e <__lo0bits+0x22>
 800c9f4:	07d9      	lsls	r1, r3, #31
 800c9f6:	d422      	bmi.n	800ca3e <__lo0bits+0x52>
 800c9f8:	079a      	lsls	r2, r3, #30
 800c9fa:	bf49      	itett	mi
 800c9fc:	085b      	lsrmi	r3, r3, #1
 800c9fe:	089b      	lsrpl	r3, r3, #2
 800ca00:	6003      	strmi	r3, [r0, #0]
 800ca02:	2201      	movmi	r2, #1
 800ca04:	bf5c      	itt	pl
 800ca06:	6003      	strpl	r3, [r0, #0]
 800ca08:	2202      	movpl	r2, #2
 800ca0a:	4610      	mov	r0, r2
 800ca0c:	4770      	bx	lr
 800ca0e:	b299      	uxth	r1, r3
 800ca10:	b909      	cbnz	r1, 800ca16 <__lo0bits+0x2a>
 800ca12:	0c1b      	lsrs	r3, r3, #16
 800ca14:	2210      	movs	r2, #16
 800ca16:	b2d9      	uxtb	r1, r3
 800ca18:	b909      	cbnz	r1, 800ca1e <__lo0bits+0x32>
 800ca1a:	3208      	adds	r2, #8
 800ca1c:	0a1b      	lsrs	r3, r3, #8
 800ca1e:	0719      	lsls	r1, r3, #28
 800ca20:	bf04      	itt	eq
 800ca22:	091b      	lsreq	r3, r3, #4
 800ca24:	3204      	addeq	r2, #4
 800ca26:	0799      	lsls	r1, r3, #30
 800ca28:	bf04      	itt	eq
 800ca2a:	089b      	lsreq	r3, r3, #2
 800ca2c:	3202      	addeq	r2, #2
 800ca2e:	07d9      	lsls	r1, r3, #31
 800ca30:	d403      	bmi.n	800ca3a <__lo0bits+0x4e>
 800ca32:	085b      	lsrs	r3, r3, #1
 800ca34:	f102 0201 	add.w	r2, r2, #1
 800ca38:	d003      	beq.n	800ca42 <__lo0bits+0x56>
 800ca3a:	6003      	str	r3, [r0, #0]
 800ca3c:	e7e5      	b.n	800ca0a <__lo0bits+0x1e>
 800ca3e:	2200      	movs	r2, #0
 800ca40:	e7e3      	b.n	800ca0a <__lo0bits+0x1e>
 800ca42:	2220      	movs	r2, #32
 800ca44:	e7e1      	b.n	800ca0a <__lo0bits+0x1e>
	...

0800ca48 <__i2b>:
 800ca48:	b510      	push	{r4, lr}
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	2101      	movs	r1, #1
 800ca4e:	f7ff ff05 	bl	800c85c <_Balloc>
 800ca52:	4602      	mov	r2, r0
 800ca54:	b928      	cbnz	r0, 800ca62 <__i2b+0x1a>
 800ca56:	4b05      	ldr	r3, [pc, #20]	; (800ca6c <__i2b+0x24>)
 800ca58:	4805      	ldr	r0, [pc, #20]	; (800ca70 <__i2b+0x28>)
 800ca5a:	f240 1145 	movw	r1, #325	; 0x145
 800ca5e:	f000 fcb7 	bl	800d3d0 <__assert_func>
 800ca62:	2301      	movs	r3, #1
 800ca64:	6144      	str	r4, [r0, #20]
 800ca66:	6103      	str	r3, [r0, #16]
 800ca68:	bd10      	pop	{r4, pc}
 800ca6a:	bf00      	nop
 800ca6c:	0800dbe4 	.word	0x0800dbe4
 800ca70:	0800dbf5 	.word	0x0800dbf5

0800ca74 <__multiply>:
 800ca74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca78:	4691      	mov	r9, r2
 800ca7a:	690a      	ldr	r2, [r1, #16]
 800ca7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	bfb8      	it	lt
 800ca84:	460b      	movlt	r3, r1
 800ca86:	460c      	mov	r4, r1
 800ca88:	bfbc      	itt	lt
 800ca8a:	464c      	movlt	r4, r9
 800ca8c:	4699      	movlt	r9, r3
 800ca8e:	6927      	ldr	r7, [r4, #16]
 800ca90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca94:	68a3      	ldr	r3, [r4, #8]
 800ca96:	6861      	ldr	r1, [r4, #4]
 800ca98:	eb07 060a 	add.w	r6, r7, sl
 800ca9c:	42b3      	cmp	r3, r6
 800ca9e:	b085      	sub	sp, #20
 800caa0:	bfb8      	it	lt
 800caa2:	3101      	addlt	r1, #1
 800caa4:	f7ff feda 	bl	800c85c <_Balloc>
 800caa8:	b930      	cbnz	r0, 800cab8 <__multiply+0x44>
 800caaa:	4602      	mov	r2, r0
 800caac:	4b44      	ldr	r3, [pc, #272]	; (800cbc0 <__multiply+0x14c>)
 800caae:	4845      	ldr	r0, [pc, #276]	; (800cbc4 <__multiply+0x150>)
 800cab0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cab4:	f000 fc8c 	bl	800d3d0 <__assert_func>
 800cab8:	f100 0514 	add.w	r5, r0, #20
 800cabc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cac0:	462b      	mov	r3, r5
 800cac2:	2200      	movs	r2, #0
 800cac4:	4543      	cmp	r3, r8
 800cac6:	d321      	bcc.n	800cb0c <__multiply+0x98>
 800cac8:	f104 0314 	add.w	r3, r4, #20
 800cacc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cad0:	f109 0314 	add.w	r3, r9, #20
 800cad4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cad8:	9202      	str	r2, [sp, #8]
 800cada:	1b3a      	subs	r2, r7, r4
 800cadc:	3a15      	subs	r2, #21
 800cade:	f022 0203 	bic.w	r2, r2, #3
 800cae2:	3204      	adds	r2, #4
 800cae4:	f104 0115 	add.w	r1, r4, #21
 800cae8:	428f      	cmp	r7, r1
 800caea:	bf38      	it	cc
 800caec:	2204      	movcc	r2, #4
 800caee:	9201      	str	r2, [sp, #4]
 800caf0:	9a02      	ldr	r2, [sp, #8]
 800caf2:	9303      	str	r3, [sp, #12]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d80c      	bhi.n	800cb12 <__multiply+0x9e>
 800caf8:	2e00      	cmp	r6, #0
 800cafa:	dd03      	ble.n	800cb04 <__multiply+0x90>
 800cafc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d05b      	beq.n	800cbbc <__multiply+0x148>
 800cb04:	6106      	str	r6, [r0, #16]
 800cb06:	b005      	add	sp, #20
 800cb08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb0c:	f843 2b04 	str.w	r2, [r3], #4
 800cb10:	e7d8      	b.n	800cac4 <__multiply+0x50>
 800cb12:	f8b3 a000 	ldrh.w	sl, [r3]
 800cb16:	f1ba 0f00 	cmp.w	sl, #0
 800cb1a:	d024      	beq.n	800cb66 <__multiply+0xf2>
 800cb1c:	f104 0e14 	add.w	lr, r4, #20
 800cb20:	46a9      	mov	r9, r5
 800cb22:	f04f 0c00 	mov.w	ip, #0
 800cb26:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cb2a:	f8d9 1000 	ldr.w	r1, [r9]
 800cb2e:	fa1f fb82 	uxth.w	fp, r2
 800cb32:	b289      	uxth	r1, r1
 800cb34:	fb0a 110b 	mla	r1, sl, fp, r1
 800cb38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cb3c:	f8d9 2000 	ldr.w	r2, [r9]
 800cb40:	4461      	add	r1, ip
 800cb42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cb46:	fb0a c20b 	mla	r2, sl, fp, ip
 800cb4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cb4e:	b289      	uxth	r1, r1
 800cb50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cb54:	4577      	cmp	r7, lr
 800cb56:	f849 1b04 	str.w	r1, [r9], #4
 800cb5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cb5e:	d8e2      	bhi.n	800cb26 <__multiply+0xb2>
 800cb60:	9a01      	ldr	r2, [sp, #4]
 800cb62:	f845 c002 	str.w	ip, [r5, r2]
 800cb66:	9a03      	ldr	r2, [sp, #12]
 800cb68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cb6c:	3304      	adds	r3, #4
 800cb6e:	f1b9 0f00 	cmp.w	r9, #0
 800cb72:	d021      	beq.n	800cbb8 <__multiply+0x144>
 800cb74:	6829      	ldr	r1, [r5, #0]
 800cb76:	f104 0c14 	add.w	ip, r4, #20
 800cb7a:	46ae      	mov	lr, r5
 800cb7c:	f04f 0a00 	mov.w	sl, #0
 800cb80:	f8bc b000 	ldrh.w	fp, [ip]
 800cb84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cb88:	fb09 220b 	mla	r2, r9, fp, r2
 800cb8c:	4452      	add	r2, sl
 800cb8e:	b289      	uxth	r1, r1
 800cb90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cb94:	f84e 1b04 	str.w	r1, [lr], #4
 800cb98:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cb9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cba0:	f8be 1000 	ldrh.w	r1, [lr]
 800cba4:	fb09 110a 	mla	r1, r9, sl, r1
 800cba8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cbac:	4567      	cmp	r7, ip
 800cbae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cbb2:	d8e5      	bhi.n	800cb80 <__multiply+0x10c>
 800cbb4:	9a01      	ldr	r2, [sp, #4]
 800cbb6:	50a9      	str	r1, [r5, r2]
 800cbb8:	3504      	adds	r5, #4
 800cbba:	e799      	b.n	800caf0 <__multiply+0x7c>
 800cbbc:	3e01      	subs	r6, #1
 800cbbe:	e79b      	b.n	800caf8 <__multiply+0x84>
 800cbc0:	0800dbe4 	.word	0x0800dbe4
 800cbc4:	0800dbf5 	.word	0x0800dbf5

0800cbc8 <__pow5mult>:
 800cbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbcc:	4615      	mov	r5, r2
 800cbce:	f012 0203 	ands.w	r2, r2, #3
 800cbd2:	4606      	mov	r6, r0
 800cbd4:	460f      	mov	r7, r1
 800cbd6:	d007      	beq.n	800cbe8 <__pow5mult+0x20>
 800cbd8:	4c25      	ldr	r4, [pc, #148]	; (800cc70 <__pow5mult+0xa8>)
 800cbda:	3a01      	subs	r2, #1
 800cbdc:	2300      	movs	r3, #0
 800cbde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cbe2:	f7ff fe9d 	bl	800c920 <__multadd>
 800cbe6:	4607      	mov	r7, r0
 800cbe8:	10ad      	asrs	r5, r5, #2
 800cbea:	d03d      	beq.n	800cc68 <__pow5mult+0xa0>
 800cbec:	69f4      	ldr	r4, [r6, #28]
 800cbee:	b97c      	cbnz	r4, 800cc10 <__pow5mult+0x48>
 800cbf0:	2010      	movs	r0, #16
 800cbf2:	f7ff fd7f 	bl	800c6f4 <malloc>
 800cbf6:	4602      	mov	r2, r0
 800cbf8:	61f0      	str	r0, [r6, #28]
 800cbfa:	b928      	cbnz	r0, 800cc08 <__pow5mult+0x40>
 800cbfc:	4b1d      	ldr	r3, [pc, #116]	; (800cc74 <__pow5mult+0xac>)
 800cbfe:	481e      	ldr	r0, [pc, #120]	; (800cc78 <__pow5mult+0xb0>)
 800cc00:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cc04:	f000 fbe4 	bl	800d3d0 <__assert_func>
 800cc08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cc0c:	6004      	str	r4, [r0, #0]
 800cc0e:	60c4      	str	r4, [r0, #12]
 800cc10:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cc14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cc18:	b94c      	cbnz	r4, 800cc2e <__pow5mult+0x66>
 800cc1a:	f240 2171 	movw	r1, #625	; 0x271
 800cc1e:	4630      	mov	r0, r6
 800cc20:	f7ff ff12 	bl	800ca48 <__i2b>
 800cc24:	2300      	movs	r3, #0
 800cc26:	f8c8 0008 	str.w	r0, [r8, #8]
 800cc2a:	4604      	mov	r4, r0
 800cc2c:	6003      	str	r3, [r0, #0]
 800cc2e:	f04f 0900 	mov.w	r9, #0
 800cc32:	07eb      	lsls	r3, r5, #31
 800cc34:	d50a      	bpl.n	800cc4c <__pow5mult+0x84>
 800cc36:	4639      	mov	r1, r7
 800cc38:	4622      	mov	r2, r4
 800cc3a:	4630      	mov	r0, r6
 800cc3c:	f7ff ff1a 	bl	800ca74 <__multiply>
 800cc40:	4639      	mov	r1, r7
 800cc42:	4680      	mov	r8, r0
 800cc44:	4630      	mov	r0, r6
 800cc46:	f7ff fe49 	bl	800c8dc <_Bfree>
 800cc4a:	4647      	mov	r7, r8
 800cc4c:	106d      	asrs	r5, r5, #1
 800cc4e:	d00b      	beq.n	800cc68 <__pow5mult+0xa0>
 800cc50:	6820      	ldr	r0, [r4, #0]
 800cc52:	b938      	cbnz	r0, 800cc64 <__pow5mult+0x9c>
 800cc54:	4622      	mov	r2, r4
 800cc56:	4621      	mov	r1, r4
 800cc58:	4630      	mov	r0, r6
 800cc5a:	f7ff ff0b 	bl	800ca74 <__multiply>
 800cc5e:	6020      	str	r0, [r4, #0]
 800cc60:	f8c0 9000 	str.w	r9, [r0]
 800cc64:	4604      	mov	r4, r0
 800cc66:	e7e4      	b.n	800cc32 <__pow5mult+0x6a>
 800cc68:	4638      	mov	r0, r7
 800cc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc6e:	bf00      	nop
 800cc70:	0800dd40 	.word	0x0800dd40
 800cc74:	0800db75 	.word	0x0800db75
 800cc78:	0800dbf5 	.word	0x0800dbf5

0800cc7c <__lshift>:
 800cc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc80:	460c      	mov	r4, r1
 800cc82:	6849      	ldr	r1, [r1, #4]
 800cc84:	6923      	ldr	r3, [r4, #16]
 800cc86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc8a:	68a3      	ldr	r3, [r4, #8]
 800cc8c:	4607      	mov	r7, r0
 800cc8e:	4691      	mov	r9, r2
 800cc90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc94:	f108 0601 	add.w	r6, r8, #1
 800cc98:	42b3      	cmp	r3, r6
 800cc9a:	db0b      	blt.n	800ccb4 <__lshift+0x38>
 800cc9c:	4638      	mov	r0, r7
 800cc9e:	f7ff fddd 	bl	800c85c <_Balloc>
 800cca2:	4605      	mov	r5, r0
 800cca4:	b948      	cbnz	r0, 800ccba <__lshift+0x3e>
 800cca6:	4602      	mov	r2, r0
 800cca8:	4b28      	ldr	r3, [pc, #160]	; (800cd4c <__lshift+0xd0>)
 800ccaa:	4829      	ldr	r0, [pc, #164]	; (800cd50 <__lshift+0xd4>)
 800ccac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800ccb0:	f000 fb8e 	bl	800d3d0 <__assert_func>
 800ccb4:	3101      	adds	r1, #1
 800ccb6:	005b      	lsls	r3, r3, #1
 800ccb8:	e7ee      	b.n	800cc98 <__lshift+0x1c>
 800ccba:	2300      	movs	r3, #0
 800ccbc:	f100 0114 	add.w	r1, r0, #20
 800ccc0:	f100 0210 	add.w	r2, r0, #16
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	4553      	cmp	r3, sl
 800ccc8:	db33      	blt.n	800cd32 <__lshift+0xb6>
 800ccca:	6920      	ldr	r0, [r4, #16]
 800cccc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ccd0:	f104 0314 	add.w	r3, r4, #20
 800ccd4:	f019 091f 	ands.w	r9, r9, #31
 800ccd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ccdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cce0:	d02b      	beq.n	800cd3a <__lshift+0xbe>
 800cce2:	f1c9 0e20 	rsb	lr, r9, #32
 800cce6:	468a      	mov	sl, r1
 800cce8:	2200      	movs	r2, #0
 800ccea:	6818      	ldr	r0, [r3, #0]
 800ccec:	fa00 f009 	lsl.w	r0, r0, r9
 800ccf0:	4310      	orrs	r0, r2
 800ccf2:	f84a 0b04 	str.w	r0, [sl], #4
 800ccf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccfa:	459c      	cmp	ip, r3
 800ccfc:	fa22 f20e 	lsr.w	r2, r2, lr
 800cd00:	d8f3      	bhi.n	800ccea <__lshift+0x6e>
 800cd02:	ebac 0304 	sub.w	r3, ip, r4
 800cd06:	3b15      	subs	r3, #21
 800cd08:	f023 0303 	bic.w	r3, r3, #3
 800cd0c:	3304      	adds	r3, #4
 800cd0e:	f104 0015 	add.w	r0, r4, #21
 800cd12:	4584      	cmp	ip, r0
 800cd14:	bf38      	it	cc
 800cd16:	2304      	movcc	r3, #4
 800cd18:	50ca      	str	r2, [r1, r3]
 800cd1a:	b10a      	cbz	r2, 800cd20 <__lshift+0xa4>
 800cd1c:	f108 0602 	add.w	r6, r8, #2
 800cd20:	3e01      	subs	r6, #1
 800cd22:	4638      	mov	r0, r7
 800cd24:	612e      	str	r6, [r5, #16]
 800cd26:	4621      	mov	r1, r4
 800cd28:	f7ff fdd8 	bl	800c8dc <_Bfree>
 800cd2c:	4628      	mov	r0, r5
 800cd2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd32:	f842 0f04 	str.w	r0, [r2, #4]!
 800cd36:	3301      	adds	r3, #1
 800cd38:	e7c5      	b.n	800ccc6 <__lshift+0x4a>
 800cd3a:	3904      	subs	r1, #4
 800cd3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd40:	f841 2f04 	str.w	r2, [r1, #4]!
 800cd44:	459c      	cmp	ip, r3
 800cd46:	d8f9      	bhi.n	800cd3c <__lshift+0xc0>
 800cd48:	e7ea      	b.n	800cd20 <__lshift+0xa4>
 800cd4a:	bf00      	nop
 800cd4c:	0800dbe4 	.word	0x0800dbe4
 800cd50:	0800dbf5 	.word	0x0800dbf5

0800cd54 <__mcmp>:
 800cd54:	b530      	push	{r4, r5, lr}
 800cd56:	6902      	ldr	r2, [r0, #16]
 800cd58:	690c      	ldr	r4, [r1, #16]
 800cd5a:	1b12      	subs	r2, r2, r4
 800cd5c:	d10e      	bne.n	800cd7c <__mcmp+0x28>
 800cd5e:	f100 0314 	add.w	r3, r0, #20
 800cd62:	3114      	adds	r1, #20
 800cd64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cd68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cd6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cd70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cd74:	42a5      	cmp	r5, r4
 800cd76:	d003      	beq.n	800cd80 <__mcmp+0x2c>
 800cd78:	d305      	bcc.n	800cd86 <__mcmp+0x32>
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	4610      	mov	r0, r2
 800cd7e:	bd30      	pop	{r4, r5, pc}
 800cd80:	4283      	cmp	r3, r0
 800cd82:	d3f3      	bcc.n	800cd6c <__mcmp+0x18>
 800cd84:	e7fa      	b.n	800cd7c <__mcmp+0x28>
 800cd86:	f04f 32ff 	mov.w	r2, #4294967295
 800cd8a:	e7f7      	b.n	800cd7c <__mcmp+0x28>

0800cd8c <__mdiff>:
 800cd8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd90:	460c      	mov	r4, r1
 800cd92:	4606      	mov	r6, r0
 800cd94:	4611      	mov	r1, r2
 800cd96:	4620      	mov	r0, r4
 800cd98:	4690      	mov	r8, r2
 800cd9a:	f7ff ffdb 	bl	800cd54 <__mcmp>
 800cd9e:	1e05      	subs	r5, r0, #0
 800cda0:	d110      	bne.n	800cdc4 <__mdiff+0x38>
 800cda2:	4629      	mov	r1, r5
 800cda4:	4630      	mov	r0, r6
 800cda6:	f7ff fd59 	bl	800c85c <_Balloc>
 800cdaa:	b930      	cbnz	r0, 800cdba <__mdiff+0x2e>
 800cdac:	4b3a      	ldr	r3, [pc, #232]	; (800ce98 <__mdiff+0x10c>)
 800cdae:	4602      	mov	r2, r0
 800cdb0:	f240 2137 	movw	r1, #567	; 0x237
 800cdb4:	4839      	ldr	r0, [pc, #228]	; (800ce9c <__mdiff+0x110>)
 800cdb6:	f000 fb0b 	bl	800d3d0 <__assert_func>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cdc0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdc4:	bfa4      	itt	ge
 800cdc6:	4643      	movge	r3, r8
 800cdc8:	46a0      	movge	r8, r4
 800cdca:	4630      	mov	r0, r6
 800cdcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cdd0:	bfa6      	itte	ge
 800cdd2:	461c      	movge	r4, r3
 800cdd4:	2500      	movge	r5, #0
 800cdd6:	2501      	movlt	r5, #1
 800cdd8:	f7ff fd40 	bl	800c85c <_Balloc>
 800cddc:	b920      	cbnz	r0, 800cde8 <__mdiff+0x5c>
 800cdde:	4b2e      	ldr	r3, [pc, #184]	; (800ce98 <__mdiff+0x10c>)
 800cde0:	4602      	mov	r2, r0
 800cde2:	f240 2145 	movw	r1, #581	; 0x245
 800cde6:	e7e5      	b.n	800cdb4 <__mdiff+0x28>
 800cde8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cdec:	6926      	ldr	r6, [r4, #16]
 800cdee:	60c5      	str	r5, [r0, #12]
 800cdf0:	f104 0914 	add.w	r9, r4, #20
 800cdf4:	f108 0514 	add.w	r5, r8, #20
 800cdf8:	f100 0e14 	add.w	lr, r0, #20
 800cdfc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ce00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ce04:	f108 0210 	add.w	r2, r8, #16
 800ce08:	46f2      	mov	sl, lr
 800ce0a:	2100      	movs	r1, #0
 800ce0c:	f859 3b04 	ldr.w	r3, [r9], #4
 800ce10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ce14:	fa11 f88b 	uxtah	r8, r1, fp
 800ce18:	b299      	uxth	r1, r3
 800ce1a:	0c1b      	lsrs	r3, r3, #16
 800ce1c:	eba8 0801 	sub.w	r8, r8, r1
 800ce20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ce24:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ce28:	fa1f f888 	uxth.w	r8, r8
 800ce2c:	1419      	asrs	r1, r3, #16
 800ce2e:	454e      	cmp	r6, r9
 800ce30:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ce34:	f84a 3b04 	str.w	r3, [sl], #4
 800ce38:	d8e8      	bhi.n	800ce0c <__mdiff+0x80>
 800ce3a:	1b33      	subs	r3, r6, r4
 800ce3c:	3b15      	subs	r3, #21
 800ce3e:	f023 0303 	bic.w	r3, r3, #3
 800ce42:	3304      	adds	r3, #4
 800ce44:	3415      	adds	r4, #21
 800ce46:	42a6      	cmp	r6, r4
 800ce48:	bf38      	it	cc
 800ce4a:	2304      	movcc	r3, #4
 800ce4c:	441d      	add	r5, r3
 800ce4e:	4473      	add	r3, lr
 800ce50:	469e      	mov	lr, r3
 800ce52:	462e      	mov	r6, r5
 800ce54:	4566      	cmp	r6, ip
 800ce56:	d30e      	bcc.n	800ce76 <__mdiff+0xea>
 800ce58:	f10c 0203 	add.w	r2, ip, #3
 800ce5c:	1b52      	subs	r2, r2, r5
 800ce5e:	f022 0203 	bic.w	r2, r2, #3
 800ce62:	3d03      	subs	r5, #3
 800ce64:	45ac      	cmp	ip, r5
 800ce66:	bf38      	it	cc
 800ce68:	2200      	movcc	r2, #0
 800ce6a:	4413      	add	r3, r2
 800ce6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ce70:	b17a      	cbz	r2, 800ce92 <__mdiff+0x106>
 800ce72:	6107      	str	r7, [r0, #16]
 800ce74:	e7a4      	b.n	800cdc0 <__mdiff+0x34>
 800ce76:	f856 8b04 	ldr.w	r8, [r6], #4
 800ce7a:	fa11 f288 	uxtah	r2, r1, r8
 800ce7e:	1414      	asrs	r4, r2, #16
 800ce80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ce84:	b292      	uxth	r2, r2
 800ce86:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ce8a:	f84e 2b04 	str.w	r2, [lr], #4
 800ce8e:	1421      	asrs	r1, r4, #16
 800ce90:	e7e0      	b.n	800ce54 <__mdiff+0xc8>
 800ce92:	3f01      	subs	r7, #1
 800ce94:	e7ea      	b.n	800ce6c <__mdiff+0xe0>
 800ce96:	bf00      	nop
 800ce98:	0800dbe4 	.word	0x0800dbe4
 800ce9c:	0800dbf5 	.word	0x0800dbf5

0800cea0 <__d2b>:
 800cea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cea4:	460f      	mov	r7, r1
 800cea6:	2101      	movs	r1, #1
 800cea8:	ec59 8b10 	vmov	r8, r9, d0
 800ceac:	4616      	mov	r6, r2
 800ceae:	f7ff fcd5 	bl	800c85c <_Balloc>
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	b930      	cbnz	r0, 800cec4 <__d2b+0x24>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	4b24      	ldr	r3, [pc, #144]	; (800cf4c <__d2b+0xac>)
 800ceba:	4825      	ldr	r0, [pc, #148]	; (800cf50 <__d2b+0xb0>)
 800cebc:	f240 310f 	movw	r1, #783	; 0x30f
 800cec0:	f000 fa86 	bl	800d3d0 <__assert_func>
 800cec4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cec8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cecc:	bb2d      	cbnz	r5, 800cf1a <__d2b+0x7a>
 800cece:	9301      	str	r3, [sp, #4]
 800ced0:	f1b8 0300 	subs.w	r3, r8, #0
 800ced4:	d026      	beq.n	800cf24 <__d2b+0x84>
 800ced6:	4668      	mov	r0, sp
 800ced8:	9300      	str	r3, [sp, #0]
 800ceda:	f7ff fd87 	bl	800c9ec <__lo0bits>
 800cede:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cee2:	b1e8      	cbz	r0, 800cf20 <__d2b+0x80>
 800cee4:	f1c0 0320 	rsb	r3, r0, #32
 800cee8:	fa02 f303 	lsl.w	r3, r2, r3
 800ceec:	430b      	orrs	r3, r1
 800ceee:	40c2      	lsrs	r2, r0
 800cef0:	6163      	str	r3, [r4, #20]
 800cef2:	9201      	str	r2, [sp, #4]
 800cef4:	9b01      	ldr	r3, [sp, #4]
 800cef6:	61a3      	str	r3, [r4, #24]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	bf14      	ite	ne
 800cefc:	2202      	movne	r2, #2
 800cefe:	2201      	moveq	r2, #1
 800cf00:	6122      	str	r2, [r4, #16]
 800cf02:	b1bd      	cbz	r5, 800cf34 <__d2b+0x94>
 800cf04:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cf08:	4405      	add	r5, r0
 800cf0a:	603d      	str	r5, [r7, #0]
 800cf0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cf10:	6030      	str	r0, [r6, #0]
 800cf12:	4620      	mov	r0, r4
 800cf14:	b003      	add	sp, #12
 800cf16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf1e:	e7d6      	b.n	800cece <__d2b+0x2e>
 800cf20:	6161      	str	r1, [r4, #20]
 800cf22:	e7e7      	b.n	800cef4 <__d2b+0x54>
 800cf24:	a801      	add	r0, sp, #4
 800cf26:	f7ff fd61 	bl	800c9ec <__lo0bits>
 800cf2a:	9b01      	ldr	r3, [sp, #4]
 800cf2c:	6163      	str	r3, [r4, #20]
 800cf2e:	3020      	adds	r0, #32
 800cf30:	2201      	movs	r2, #1
 800cf32:	e7e5      	b.n	800cf00 <__d2b+0x60>
 800cf34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cf38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cf3c:	6038      	str	r0, [r7, #0]
 800cf3e:	6918      	ldr	r0, [r3, #16]
 800cf40:	f7ff fd34 	bl	800c9ac <__hi0bits>
 800cf44:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cf48:	e7e2      	b.n	800cf10 <__d2b+0x70>
 800cf4a:	bf00      	nop
 800cf4c:	0800dbe4 	.word	0x0800dbe4
 800cf50:	0800dbf5 	.word	0x0800dbf5

0800cf54 <__ssputs_r>:
 800cf54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf58:	688e      	ldr	r6, [r1, #8]
 800cf5a:	461f      	mov	r7, r3
 800cf5c:	42be      	cmp	r6, r7
 800cf5e:	680b      	ldr	r3, [r1, #0]
 800cf60:	4682      	mov	sl, r0
 800cf62:	460c      	mov	r4, r1
 800cf64:	4690      	mov	r8, r2
 800cf66:	d82c      	bhi.n	800cfc2 <__ssputs_r+0x6e>
 800cf68:	898a      	ldrh	r2, [r1, #12]
 800cf6a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf6e:	d026      	beq.n	800cfbe <__ssputs_r+0x6a>
 800cf70:	6965      	ldr	r5, [r4, #20]
 800cf72:	6909      	ldr	r1, [r1, #16]
 800cf74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf78:	eba3 0901 	sub.w	r9, r3, r1
 800cf7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf80:	1c7b      	adds	r3, r7, #1
 800cf82:	444b      	add	r3, r9
 800cf84:	106d      	asrs	r5, r5, #1
 800cf86:	429d      	cmp	r5, r3
 800cf88:	bf38      	it	cc
 800cf8a:	461d      	movcc	r5, r3
 800cf8c:	0553      	lsls	r3, r2, #21
 800cf8e:	d527      	bpl.n	800cfe0 <__ssputs_r+0x8c>
 800cf90:	4629      	mov	r1, r5
 800cf92:	f7ff fbd7 	bl	800c744 <_malloc_r>
 800cf96:	4606      	mov	r6, r0
 800cf98:	b360      	cbz	r0, 800cff4 <__ssputs_r+0xa0>
 800cf9a:	6921      	ldr	r1, [r4, #16]
 800cf9c:	464a      	mov	r2, r9
 800cf9e:	f000 fa09 	bl	800d3b4 <memcpy>
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cfa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfac:	81a3      	strh	r3, [r4, #12]
 800cfae:	6126      	str	r6, [r4, #16]
 800cfb0:	6165      	str	r5, [r4, #20]
 800cfb2:	444e      	add	r6, r9
 800cfb4:	eba5 0509 	sub.w	r5, r5, r9
 800cfb8:	6026      	str	r6, [r4, #0]
 800cfba:	60a5      	str	r5, [r4, #8]
 800cfbc:	463e      	mov	r6, r7
 800cfbe:	42be      	cmp	r6, r7
 800cfc0:	d900      	bls.n	800cfc4 <__ssputs_r+0x70>
 800cfc2:	463e      	mov	r6, r7
 800cfc4:	6820      	ldr	r0, [r4, #0]
 800cfc6:	4632      	mov	r2, r6
 800cfc8:	4641      	mov	r1, r8
 800cfca:	f000 f9c9 	bl	800d360 <memmove>
 800cfce:	68a3      	ldr	r3, [r4, #8]
 800cfd0:	1b9b      	subs	r3, r3, r6
 800cfd2:	60a3      	str	r3, [r4, #8]
 800cfd4:	6823      	ldr	r3, [r4, #0]
 800cfd6:	4433      	add	r3, r6
 800cfd8:	6023      	str	r3, [r4, #0]
 800cfda:	2000      	movs	r0, #0
 800cfdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfe0:	462a      	mov	r2, r5
 800cfe2:	f000 fa3b 	bl	800d45c <_realloc_r>
 800cfe6:	4606      	mov	r6, r0
 800cfe8:	2800      	cmp	r0, #0
 800cfea:	d1e0      	bne.n	800cfae <__ssputs_r+0x5a>
 800cfec:	6921      	ldr	r1, [r4, #16]
 800cfee:	4650      	mov	r0, sl
 800cff0:	f7ff fb34 	bl	800c65c <_free_r>
 800cff4:	230c      	movs	r3, #12
 800cff6:	f8ca 3000 	str.w	r3, [sl]
 800cffa:	89a3      	ldrh	r3, [r4, #12]
 800cffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d000:	81a3      	strh	r3, [r4, #12]
 800d002:	f04f 30ff 	mov.w	r0, #4294967295
 800d006:	e7e9      	b.n	800cfdc <__ssputs_r+0x88>

0800d008 <_svfiprintf_r>:
 800d008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00c:	4698      	mov	r8, r3
 800d00e:	898b      	ldrh	r3, [r1, #12]
 800d010:	061b      	lsls	r3, r3, #24
 800d012:	b09d      	sub	sp, #116	; 0x74
 800d014:	4607      	mov	r7, r0
 800d016:	460d      	mov	r5, r1
 800d018:	4614      	mov	r4, r2
 800d01a:	d50e      	bpl.n	800d03a <_svfiprintf_r+0x32>
 800d01c:	690b      	ldr	r3, [r1, #16]
 800d01e:	b963      	cbnz	r3, 800d03a <_svfiprintf_r+0x32>
 800d020:	2140      	movs	r1, #64	; 0x40
 800d022:	f7ff fb8f 	bl	800c744 <_malloc_r>
 800d026:	6028      	str	r0, [r5, #0]
 800d028:	6128      	str	r0, [r5, #16]
 800d02a:	b920      	cbnz	r0, 800d036 <_svfiprintf_r+0x2e>
 800d02c:	230c      	movs	r3, #12
 800d02e:	603b      	str	r3, [r7, #0]
 800d030:	f04f 30ff 	mov.w	r0, #4294967295
 800d034:	e0d0      	b.n	800d1d8 <_svfiprintf_r+0x1d0>
 800d036:	2340      	movs	r3, #64	; 0x40
 800d038:	616b      	str	r3, [r5, #20]
 800d03a:	2300      	movs	r3, #0
 800d03c:	9309      	str	r3, [sp, #36]	; 0x24
 800d03e:	2320      	movs	r3, #32
 800d040:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d044:	f8cd 800c 	str.w	r8, [sp, #12]
 800d048:	2330      	movs	r3, #48	; 0x30
 800d04a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d1f0 <_svfiprintf_r+0x1e8>
 800d04e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d052:	f04f 0901 	mov.w	r9, #1
 800d056:	4623      	mov	r3, r4
 800d058:	469a      	mov	sl, r3
 800d05a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d05e:	b10a      	cbz	r2, 800d064 <_svfiprintf_r+0x5c>
 800d060:	2a25      	cmp	r2, #37	; 0x25
 800d062:	d1f9      	bne.n	800d058 <_svfiprintf_r+0x50>
 800d064:	ebba 0b04 	subs.w	fp, sl, r4
 800d068:	d00b      	beq.n	800d082 <_svfiprintf_r+0x7a>
 800d06a:	465b      	mov	r3, fp
 800d06c:	4622      	mov	r2, r4
 800d06e:	4629      	mov	r1, r5
 800d070:	4638      	mov	r0, r7
 800d072:	f7ff ff6f 	bl	800cf54 <__ssputs_r>
 800d076:	3001      	adds	r0, #1
 800d078:	f000 80a9 	beq.w	800d1ce <_svfiprintf_r+0x1c6>
 800d07c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d07e:	445a      	add	r2, fp
 800d080:	9209      	str	r2, [sp, #36]	; 0x24
 800d082:	f89a 3000 	ldrb.w	r3, [sl]
 800d086:	2b00      	cmp	r3, #0
 800d088:	f000 80a1 	beq.w	800d1ce <_svfiprintf_r+0x1c6>
 800d08c:	2300      	movs	r3, #0
 800d08e:	f04f 32ff 	mov.w	r2, #4294967295
 800d092:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d096:	f10a 0a01 	add.w	sl, sl, #1
 800d09a:	9304      	str	r3, [sp, #16]
 800d09c:	9307      	str	r3, [sp, #28]
 800d09e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0a2:	931a      	str	r3, [sp, #104]	; 0x68
 800d0a4:	4654      	mov	r4, sl
 800d0a6:	2205      	movs	r2, #5
 800d0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ac:	4850      	ldr	r0, [pc, #320]	; (800d1f0 <_svfiprintf_r+0x1e8>)
 800d0ae:	f7f3 f88f 	bl	80001d0 <memchr>
 800d0b2:	9a04      	ldr	r2, [sp, #16]
 800d0b4:	b9d8      	cbnz	r0, 800d0ee <_svfiprintf_r+0xe6>
 800d0b6:	06d0      	lsls	r0, r2, #27
 800d0b8:	bf44      	itt	mi
 800d0ba:	2320      	movmi	r3, #32
 800d0bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0c0:	0711      	lsls	r1, r2, #28
 800d0c2:	bf44      	itt	mi
 800d0c4:	232b      	movmi	r3, #43	; 0x2b
 800d0c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0ca:	f89a 3000 	ldrb.w	r3, [sl]
 800d0ce:	2b2a      	cmp	r3, #42	; 0x2a
 800d0d0:	d015      	beq.n	800d0fe <_svfiprintf_r+0xf6>
 800d0d2:	9a07      	ldr	r2, [sp, #28]
 800d0d4:	4654      	mov	r4, sl
 800d0d6:	2000      	movs	r0, #0
 800d0d8:	f04f 0c0a 	mov.w	ip, #10
 800d0dc:	4621      	mov	r1, r4
 800d0de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0e2:	3b30      	subs	r3, #48	; 0x30
 800d0e4:	2b09      	cmp	r3, #9
 800d0e6:	d94d      	bls.n	800d184 <_svfiprintf_r+0x17c>
 800d0e8:	b1b0      	cbz	r0, 800d118 <_svfiprintf_r+0x110>
 800d0ea:	9207      	str	r2, [sp, #28]
 800d0ec:	e014      	b.n	800d118 <_svfiprintf_r+0x110>
 800d0ee:	eba0 0308 	sub.w	r3, r0, r8
 800d0f2:	fa09 f303 	lsl.w	r3, r9, r3
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	9304      	str	r3, [sp, #16]
 800d0fa:	46a2      	mov	sl, r4
 800d0fc:	e7d2      	b.n	800d0a4 <_svfiprintf_r+0x9c>
 800d0fe:	9b03      	ldr	r3, [sp, #12]
 800d100:	1d19      	adds	r1, r3, #4
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	9103      	str	r1, [sp, #12]
 800d106:	2b00      	cmp	r3, #0
 800d108:	bfbb      	ittet	lt
 800d10a:	425b      	neglt	r3, r3
 800d10c:	f042 0202 	orrlt.w	r2, r2, #2
 800d110:	9307      	strge	r3, [sp, #28]
 800d112:	9307      	strlt	r3, [sp, #28]
 800d114:	bfb8      	it	lt
 800d116:	9204      	strlt	r2, [sp, #16]
 800d118:	7823      	ldrb	r3, [r4, #0]
 800d11a:	2b2e      	cmp	r3, #46	; 0x2e
 800d11c:	d10c      	bne.n	800d138 <_svfiprintf_r+0x130>
 800d11e:	7863      	ldrb	r3, [r4, #1]
 800d120:	2b2a      	cmp	r3, #42	; 0x2a
 800d122:	d134      	bne.n	800d18e <_svfiprintf_r+0x186>
 800d124:	9b03      	ldr	r3, [sp, #12]
 800d126:	1d1a      	adds	r2, r3, #4
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	9203      	str	r2, [sp, #12]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	bfb8      	it	lt
 800d130:	f04f 33ff 	movlt.w	r3, #4294967295
 800d134:	3402      	adds	r4, #2
 800d136:	9305      	str	r3, [sp, #20]
 800d138:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d200 <_svfiprintf_r+0x1f8>
 800d13c:	7821      	ldrb	r1, [r4, #0]
 800d13e:	2203      	movs	r2, #3
 800d140:	4650      	mov	r0, sl
 800d142:	f7f3 f845 	bl	80001d0 <memchr>
 800d146:	b138      	cbz	r0, 800d158 <_svfiprintf_r+0x150>
 800d148:	9b04      	ldr	r3, [sp, #16]
 800d14a:	eba0 000a 	sub.w	r0, r0, sl
 800d14e:	2240      	movs	r2, #64	; 0x40
 800d150:	4082      	lsls	r2, r0
 800d152:	4313      	orrs	r3, r2
 800d154:	3401      	adds	r4, #1
 800d156:	9304      	str	r3, [sp, #16]
 800d158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d15c:	4825      	ldr	r0, [pc, #148]	; (800d1f4 <_svfiprintf_r+0x1ec>)
 800d15e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d162:	2206      	movs	r2, #6
 800d164:	f7f3 f834 	bl	80001d0 <memchr>
 800d168:	2800      	cmp	r0, #0
 800d16a:	d038      	beq.n	800d1de <_svfiprintf_r+0x1d6>
 800d16c:	4b22      	ldr	r3, [pc, #136]	; (800d1f8 <_svfiprintf_r+0x1f0>)
 800d16e:	bb1b      	cbnz	r3, 800d1b8 <_svfiprintf_r+0x1b0>
 800d170:	9b03      	ldr	r3, [sp, #12]
 800d172:	3307      	adds	r3, #7
 800d174:	f023 0307 	bic.w	r3, r3, #7
 800d178:	3308      	adds	r3, #8
 800d17a:	9303      	str	r3, [sp, #12]
 800d17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d17e:	4433      	add	r3, r6
 800d180:	9309      	str	r3, [sp, #36]	; 0x24
 800d182:	e768      	b.n	800d056 <_svfiprintf_r+0x4e>
 800d184:	fb0c 3202 	mla	r2, ip, r2, r3
 800d188:	460c      	mov	r4, r1
 800d18a:	2001      	movs	r0, #1
 800d18c:	e7a6      	b.n	800d0dc <_svfiprintf_r+0xd4>
 800d18e:	2300      	movs	r3, #0
 800d190:	3401      	adds	r4, #1
 800d192:	9305      	str	r3, [sp, #20]
 800d194:	4619      	mov	r1, r3
 800d196:	f04f 0c0a 	mov.w	ip, #10
 800d19a:	4620      	mov	r0, r4
 800d19c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1a0:	3a30      	subs	r2, #48	; 0x30
 800d1a2:	2a09      	cmp	r2, #9
 800d1a4:	d903      	bls.n	800d1ae <_svfiprintf_r+0x1a6>
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d0c6      	beq.n	800d138 <_svfiprintf_r+0x130>
 800d1aa:	9105      	str	r1, [sp, #20]
 800d1ac:	e7c4      	b.n	800d138 <_svfiprintf_r+0x130>
 800d1ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	e7f0      	b.n	800d19a <_svfiprintf_r+0x192>
 800d1b8:	ab03      	add	r3, sp, #12
 800d1ba:	9300      	str	r3, [sp, #0]
 800d1bc:	462a      	mov	r2, r5
 800d1be:	4b0f      	ldr	r3, [pc, #60]	; (800d1fc <_svfiprintf_r+0x1f4>)
 800d1c0:	a904      	add	r1, sp, #16
 800d1c2:	4638      	mov	r0, r7
 800d1c4:	f7fd fe78 	bl	800aeb8 <_printf_float>
 800d1c8:	1c42      	adds	r2, r0, #1
 800d1ca:	4606      	mov	r6, r0
 800d1cc:	d1d6      	bne.n	800d17c <_svfiprintf_r+0x174>
 800d1ce:	89ab      	ldrh	r3, [r5, #12]
 800d1d0:	065b      	lsls	r3, r3, #25
 800d1d2:	f53f af2d 	bmi.w	800d030 <_svfiprintf_r+0x28>
 800d1d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1d8:	b01d      	add	sp, #116	; 0x74
 800d1da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1de:	ab03      	add	r3, sp, #12
 800d1e0:	9300      	str	r3, [sp, #0]
 800d1e2:	462a      	mov	r2, r5
 800d1e4:	4b05      	ldr	r3, [pc, #20]	; (800d1fc <_svfiprintf_r+0x1f4>)
 800d1e6:	a904      	add	r1, sp, #16
 800d1e8:	4638      	mov	r0, r7
 800d1ea:	f7fe f909 	bl	800b400 <_printf_i>
 800d1ee:	e7eb      	b.n	800d1c8 <_svfiprintf_r+0x1c0>
 800d1f0:	0800dd4c 	.word	0x0800dd4c
 800d1f4:	0800dd56 	.word	0x0800dd56
 800d1f8:	0800aeb9 	.word	0x0800aeb9
 800d1fc:	0800cf55 	.word	0x0800cf55
 800d200:	0800dd52 	.word	0x0800dd52

0800d204 <__sflush_r>:
 800d204:	898a      	ldrh	r2, [r1, #12]
 800d206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d20a:	4605      	mov	r5, r0
 800d20c:	0710      	lsls	r0, r2, #28
 800d20e:	460c      	mov	r4, r1
 800d210:	d458      	bmi.n	800d2c4 <__sflush_r+0xc0>
 800d212:	684b      	ldr	r3, [r1, #4]
 800d214:	2b00      	cmp	r3, #0
 800d216:	dc05      	bgt.n	800d224 <__sflush_r+0x20>
 800d218:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	dc02      	bgt.n	800d224 <__sflush_r+0x20>
 800d21e:	2000      	movs	r0, #0
 800d220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d226:	2e00      	cmp	r6, #0
 800d228:	d0f9      	beq.n	800d21e <__sflush_r+0x1a>
 800d22a:	2300      	movs	r3, #0
 800d22c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d230:	682f      	ldr	r7, [r5, #0]
 800d232:	6a21      	ldr	r1, [r4, #32]
 800d234:	602b      	str	r3, [r5, #0]
 800d236:	d032      	beq.n	800d29e <__sflush_r+0x9a>
 800d238:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d23a:	89a3      	ldrh	r3, [r4, #12]
 800d23c:	075a      	lsls	r2, r3, #29
 800d23e:	d505      	bpl.n	800d24c <__sflush_r+0x48>
 800d240:	6863      	ldr	r3, [r4, #4]
 800d242:	1ac0      	subs	r0, r0, r3
 800d244:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d246:	b10b      	cbz	r3, 800d24c <__sflush_r+0x48>
 800d248:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d24a:	1ac0      	subs	r0, r0, r3
 800d24c:	2300      	movs	r3, #0
 800d24e:	4602      	mov	r2, r0
 800d250:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d252:	6a21      	ldr	r1, [r4, #32]
 800d254:	4628      	mov	r0, r5
 800d256:	47b0      	blx	r6
 800d258:	1c43      	adds	r3, r0, #1
 800d25a:	89a3      	ldrh	r3, [r4, #12]
 800d25c:	d106      	bne.n	800d26c <__sflush_r+0x68>
 800d25e:	6829      	ldr	r1, [r5, #0]
 800d260:	291d      	cmp	r1, #29
 800d262:	d82b      	bhi.n	800d2bc <__sflush_r+0xb8>
 800d264:	4a29      	ldr	r2, [pc, #164]	; (800d30c <__sflush_r+0x108>)
 800d266:	410a      	asrs	r2, r1
 800d268:	07d6      	lsls	r6, r2, #31
 800d26a:	d427      	bmi.n	800d2bc <__sflush_r+0xb8>
 800d26c:	2200      	movs	r2, #0
 800d26e:	6062      	str	r2, [r4, #4]
 800d270:	04d9      	lsls	r1, r3, #19
 800d272:	6922      	ldr	r2, [r4, #16]
 800d274:	6022      	str	r2, [r4, #0]
 800d276:	d504      	bpl.n	800d282 <__sflush_r+0x7e>
 800d278:	1c42      	adds	r2, r0, #1
 800d27a:	d101      	bne.n	800d280 <__sflush_r+0x7c>
 800d27c:	682b      	ldr	r3, [r5, #0]
 800d27e:	b903      	cbnz	r3, 800d282 <__sflush_r+0x7e>
 800d280:	6560      	str	r0, [r4, #84]	; 0x54
 800d282:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d284:	602f      	str	r7, [r5, #0]
 800d286:	2900      	cmp	r1, #0
 800d288:	d0c9      	beq.n	800d21e <__sflush_r+0x1a>
 800d28a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d28e:	4299      	cmp	r1, r3
 800d290:	d002      	beq.n	800d298 <__sflush_r+0x94>
 800d292:	4628      	mov	r0, r5
 800d294:	f7ff f9e2 	bl	800c65c <_free_r>
 800d298:	2000      	movs	r0, #0
 800d29a:	6360      	str	r0, [r4, #52]	; 0x34
 800d29c:	e7c0      	b.n	800d220 <__sflush_r+0x1c>
 800d29e:	2301      	movs	r3, #1
 800d2a0:	4628      	mov	r0, r5
 800d2a2:	47b0      	blx	r6
 800d2a4:	1c41      	adds	r1, r0, #1
 800d2a6:	d1c8      	bne.n	800d23a <__sflush_r+0x36>
 800d2a8:	682b      	ldr	r3, [r5, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d0c5      	beq.n	800d23a <__sflush_r+0x36>
 800d2ae:	2b1d      	cmp	r3, #29
 800d2b0:	d001      	beq.n	800d2b6 <__sflush_r+0xb2>
 800d2b2:	2b16      	cmp	r3, #22
 800d2b4:	d101      	bne.n	800d2ba <__sflush_r+0xb6>
 800d2b6:	602f      	str	r7, [r5, #0]
 800d2b8:	e7b1      	b.n	800d21e <__sflush_r+0x1a>
 800d2ba:	89a3      	ldrh	r3, [r4, #12]
 800d2bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2c0:	81a3      	strh	r3, [r4, #12]
 800d2c2:	e7ad      	b.n	800d220 <__sflush_r+0x1c>
 800d2c4:	690f      	ldr	r7, [r1, #16]
 800d2c6:	2f00      	cmp	r7, #0
 800d2c8:	d0a9      	beq.n	800d21e <__sflush_r+0x1a>
 800d2ca:	0793      	lsls	r3, r2, #30
 800d2cc:	680e      	ldr	r6, [r1, #0]
 800d2ce:	bf08      	it	eq
 800d2d0:	694b      	ldreq	r3, [r1, #20]
 800d2d2:	600f      	str	r7, [r1, #0]
 800d2d4:	bf18      	it	ne
 800d2d6:	2300      	movne	r3, #0
 800d2d8:	eba6 0807 	sub.w	r8, r6, r7
 800d2dc:	608b      	str	r3, [r1, #8]
 800d2de:	f1b8 0f00 	cmp.w	r8, #0
 800d2e2:	dd9c      	ble.n	800d21e <__sflush_r+0x1a>
 800d2e4:	6a21      	ldr	r1, [r4, #32]
 800d2e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d2e8:	4643      	mov	r3, r8
 800d2ea:	463a      	mov	r2, r7
 800d2ec:	4628      	mov	r0, r5
 800d2ee:	47b0      	blx	r6
 800d2f0:	2800      	cmp	r0, #0
 800d2f2:	dc06      	bgt.n	800d302 <__sflush_r+0xfe>
 800d2f4:	89a3      	ldrh	r3, [r4, #12]
 800d2f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2fa:	81a3      	strh	r3, [r4, #12]
 800d2fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d300:	e78e      	b.n	800d220 <__sflush_r+0x1c>
 800d302:	4407      	add	r7, r0
 800d304:	eba8 0800 	sub.w	r8, r8, r0
 800d308:	e7e9      	b.n	800d2de <__sflush_r+0xda>
 800d30a:	bf00      	nop
 800d30c:	dfbffffe 	.word	0xdfbffffe

0800d310 <_fflush_r>:
 800d310:	b538      	push	{r3, r4, r5, lr}
 800d312:	690b      	ldr	r3, [r1, #16]
 800d314:	4605      	mov	r5, r0
 800d316:	460c      	mov	r4, r1
 800d318:	b913      	cbnz	r3, 800d320 <_fflush_r+0x10>
 800d31a:	2500      	movs	r5, #0
 800d31c:	4628      	mov	r0, r5
 800d31e:	bd38      	pop	{r3, r4, r5, pc}
 800d320:	b118      	cbz	r0, 800d32a <_fflush_r+0x1a>
 800d322:	6a03      	ldr	r3, [r0, #32]
 800d324:	b90b      	cbnz	r3, 800d32a <_fflush_r+0x1a>
 800d326:	f7fe fa07 	bl	800b738 <__sinit>
 800d32a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d0f3      	beq.n	800d31a <_fflush_r+0xa>
 800d332:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d334:	07d0      	lsls	r0, r2, #31
 800d336:	d404      	bmi.n	800d342 <_fflush_r+0x32>
 800d338:	0599      	lsls	r1, r3, #22
 800d33a:	d402      	bmi.n	800d342 <_fflush_r+0x32>
 800d33c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d33e:	f7fe fb11 	bl	800b964 <__retarget_lock_acquire_recursive>
 800d342:	4628      	mov	r0, r5
 800d344:	4621      	mov	r1, r4
 800d346:	f7ff ff5d 	bl	800d204 <__sflush_r>
 800d34a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d34c:	07da      	lsls	r2, r3, #31
 800d34e:	4605      	mov	r5, r0
 800d350:	d4e4      	bmi.n	800d31c <_fflush_r+0xc>
 800d352:	89a3      	ldrh	r3, [r4, #12]
 800d354:	059b      	lsls	r3, r3, #22
 800d356:	d4e1      	bmi.n	800d31c <_fflush_r+0xc>
 800d358:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d35a:	f7fe fb04 	bl	800b966 <__retarget_lock_release_recursive>
 800d35e:	e7dd      	b.n	800d31c <_fflush_r+0xc>

0800d360 <memmove>:
 800d360:	4288      	cmp	r0, r1
 800d362:	b510      	push	{r4, lr}
 800d364:	eb01 0402 	add.w	r4, r1, r2
 800d368:	d902      	bls.n	800d370 <memmove+0x10>
 800d36a:	4284      	cmp	r4, r0
 800d36c:	4623      	mov	r3, r4
 800d36e:	d807      	bhi.n	800d380 <memmove+0x20>
 800d370:	1e43      	subs	r3, r0, #1
 800d372:	42a1      	cmp	r1, r4
 800d374:	d008      	beq.n	800d388 <memmove+0x28>
 800d376:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d37a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d37e:	e7f8      	b.n	800d372 <memmove+0x12>
 800d380:	4402      	add	r2, r0
 800d382:	4601      	mov	r1, r0
 800d384:	428a      	cmp	r2, r1
 800d386:	d100      	bne.n	800d38a <memmove+0x2a>
 800d388:	bd10      	pop	{r4, pc}
 800d38a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d38e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d392:	e7f7      	b.n	800d384 <memmove+0x24>

0800d394 <_sbrk_r>:
 800d394:	b538      	push	{r3, r4, r5, lr}
 800d396:	4d06      	ldr	r5, [pc, #24]	; (800d3b0 <_sbrk_r+0x1c>)
 800d398:	2300      	movs	r3, #0
 800d39a:	4604      	mov	r4, r0
 800d39c:	4608      	mov	r0, r1
 800d39e:	602b      	str	r3, [r5, #0]
 800d3a0:	f7f4 fefe 	bl	80021a0 <_sbrk>
 800d3a4:	1c43      	adds	r3, r0, #1
 800d3a6:	d102      	bne.n	800d3ae <_sbrk_r+0x1a>
 800d3a8:	682b      	ldr	r3, [r5, #0]
 800d3aa:	b103      	cbz	r3, 800d3ae <_sbrk_r+0x1a>
 800d3ac:	6023      	str	r3, [r4, #0]
 800d3ae:	bd38      	pop	{r3, r4, r5, pc}
 800d3b0:	20001114 	.word	0x20001114

0800d3b4 <memcpy>:
 800d3b4:	440a      	add	r2, r1
 800d3b6:	4291      	cmp	r1, r2
 800d3b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3bc:	d100      	bne.n	800d3c0 <memcpy+0xc>
 800d3be:	4770      	bx	lr
 800d3c0:	b510      	push	{r4, lr}
 800d3c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3ca:	4291      	cmp	r1, r2
 800d3cc:	d1f9      	bne.n	800d3c2 <memcpy+0xe>
 800d3ce:	bd10      	pop	{r4, pc}

0800d3d0 <__assert_func>:
 800d3d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3d2:	4614      	mov	r4, r2
 800d3d4:	461a      	mov	r2, r3
 800d3d6:	4b09      	ldr	r3, [pc, #36]	; (800d3fc <__assert_func+0x2c>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4605      	mov	r5, r0
 800d3dc:	68d8      	ldr	r0, [r3, #12]
 800d3de:	b14c      	cbz	r4, 800d3f4 <__assert_func+0x24>
 800d3e0:	4b07      	ldr	r3, [pc, #28]	; (800d400 <__assert_func+0x30>)
 800d3e2:	9100      	str	r1, [sp, #0]
 800d3e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3e8:	4906      	ldr	r1, [pc, #24]	; (800d404 <__assert_func+0x34>)
 800d3ea:	462b      	mov	r3, r5
 800d3ec:	f000 f872 	bl	800d4d4 <fiprintf>
 800d3f0:	f000 f882 	bl	800d4f8 <abort>
 800d3f4:	4b04      	ldr	r3, [pc, #16]	; (800d408 <__assert_func+0x38>)
 800d3f6:	461c      	mov	r4, r3
 800d3f8:	e7f3      	b.n	800d3e2 <__assert_func+0x12>
 800d3fa:	bf00      	nop
 800d3fc:	20000170 	.word	0x20000170
 800d400:	0800dd67 	.word	0x0800dd67
 800d404:	0800dd74 	.word	0x0800dd74
 800d408:	0800dda2 	.word	0x0800dda2

0800d40c <_calloc_r>:
 800d40c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d40e:	fba1 2402 	umull	r2, r4, r1, r2
 800d412:	b94c      	cbnz	r4, 800d428 <_calloc_r+0x1c>
 800d414:	4611      	mov	r1, r2
 800d416:	9201      	str	r2, [sp, #4]
 800d418:	f7ff f994 	bl	800c744 <_malloc_r>
 800d41c:	9a01      	ldr	r2, [sp, #4]
 800d41e:	4605      	mov	r5, r0
 800d420:	b930      	cbnz	r0, 800d430 <_calloc_r+0x24>
 800d422:	4628      	mov	r0, r5
 800d424:	b003      	add	sp, #12
 800d426:	bd30      	pop	{r4, r5, pc}
 800d428:	220c      	movs	r2, #12
 800d42a:	6002      	str	r2, [r0, #0]
 800d42c:	2500      	movs	r5, #0
 800d42e:	e7f8      	b.n	800d422 <_calloc_r+0x16>
 800d430:	4621      	mov	r1, r4
 800d432:	f7fe fa1a 	bl	800b86a <memset>
 800d436:	e7f4      	b.n	800d422 <_calloc_r+0x16>

0800d438 <__ascii_mbtowc>:
 800d438:	b082      	sub	sp, #8
 800d43a:	b901      	cbnz	r1, 800d43e <__ascii_mbtowc+0x6>
 800d43c:	a901      	add	r1, sp, #4
 800d43e:	b142      	cbz	r2, 800d452 <__ascii_mbtowc+0x1a>
 800d440:	b14b      	cbz	r3, 800d456 <__ascii_mbtowc+0x1e>
 800d442:	7813      	ldrb	r3, [r2, #0]
 800d444:	600b      	str	r3, [r1, #0]
 800d446:	7812      	ldrb	r2, [r2, #0]
 800d448:	1e10      	subs	r0, r2, #0
 800d44a:	bf18      	it	ne
 800d44c:	2001      	movne	r0, #1
 800d44e:	b002      	add	sp, #8
 800d450:	4770      	bx	lr
 800d452:	4610      	mov	r0, r2
 800d454:	e7fb      	b.n	800d44e <__ascii_mbtowc+0x16>
 800d456:	f06f 0001 	mvn.w	r0, #1
 800d45a:	e7f8      	b.n	800d44e <__ascii_mbtowc+0x16>

0800d45c <_realloc_r>:
 800d45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d460:	4680      	mov	r8, r0
 800d462:	4614      	mov	r4, r2
 800d464:	460e      	mov	r6, r1
 800d466:	b921      	cbnz	r1, 800d472 <_realloc_r+0x16>
 800d468:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d46c:	4611      	mov	r1, r2
 800d46e:	f7ff b969 	b.w	800c744 <_malloc_r>
 800d472:	b92a      	cbnz	r2, 800d480 <_realloc_r+0x24>
 800d474:	f7ff f8f2 	bl	800c65c <_free_r>
 800d478:	4625      	mov	r5, r4
 800d47a:	4628      	mov	r0, r5
 800d47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d480:	f000 f841 	bl	800d506 <_malloc_usable_size_r>
 800d484:	4284      	cmp	r4, r0
 800d486:	4607      	mov	r7, r0
 800d488:	d802      	bhi.n	800d490 <_realloc_r+0x34>
 800d48a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d48e:	d812      	bhi.n	800d4b6 <_realloc_r+0x5a>
 800d490:	4621      	mov	r1, r4
 800d492:	4640      	mov	r0, r8
 800d494:	f7ff f956 	bl	800c744 <_malloc_r>
 800d498:	4605      	mov	r5, r0
 800d49a:	2800      	cmp	r0, #0
 800d49c:	d0ed      	beq.n	800d47a <_realloc_r+0x1e>
 800d49e:	42bc      	cmp	r4, r7
 800d4a0:	4622      	mov	r2, r4
 800d4a2:	4631      	mov	r1, r6
 800d4a4:	bf28      	it	cs
 800d4a6:	463a      	movcs	r2, r7
 800d4a8:	f7ff ff84 	bl	800d3b4 <memcpy>
 800d4ac:	4631      	mov	r1, r6
 800d4ae:	4640      	mov	r0, r8
 800d4b0:	f7ff f8d4 	bl	800c65c <_free_r>
 800d4b4:	e7e1      	b.n	800d47a <_realloc_r+0x1e>
 800d4b6:	4635      	mov	r5, r6
 800d4b8:	e7df      	b.n	800d47a <_realloc_r+0x1e>

0800d4ba <__ascii_wctomb>:
 800d4ba:	b149      	cbz	r1, 800d4d0 <__ascii_wctomb+0x16>
 800d4bc:	2aff      	cmp	r2, #255	; 0xff
 800d4be:	bf85      	ittet	hi
 800d4c0:	238a      	movhi	r3, #138	; 0x8a
 800d4c2:	6003      	strhi	r3, [r0, #0]
 800d4c4:	700a      	strbls	r2, [r1, #0]
 800d4c6:	f04f 30ff 	movhi.w	r0, #4294967295
 800d4ca:	bf98      	it	ls
 800d4cc:	2001      	movls	r0, #1
 800d4ce:	4770      	bx	lr
 800d4d0:	4608      	mov	r0, r1
 800d4d2:	4770      	bx	lr

0800d4d4 <fiprintf>:
 800d4d4:	b40e      	push	{r1, r2, r3}
 800d4d6:	b503      	push	{r0, r1, lr}
 800d4d8:	4601      	mov	r1, r0
 800d4da:	ab03      	add	r3, sp, #12
 800d4dc:	4805      	ldr	r0, [pc, #20]	; (800d4f4 <fiprintf+0x20>)
 800d4de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4e2:	6800      	ldr	r0, [r0, #0]
 800d4e4:	9301      	str	r3, [sp, #4]
 800d4e6:	f000 f83f 	bl	800d568 <_vfiprintf_r>
 800d4ea:	b002      	add	sp, #8
 800d4ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d4f0:	b003      	add	sp, #12
 800d4f2:	4770      	bx	lr
 800d4f4:	20000170 	.word	0x20000170

0800d4f8 <abort>:
 800d4f8:	b508      	push	{r3, lr}
 800d4fa:	2006      	movs	r0, #6
 800d4fc:	f000 fa0c 	bl	800d918 <raise>
 800d500:	2001      	movs	r0, #1
 800d502:	f7f4 fdd5 	bl	80020b0 <_exit>

0800d506 <_malloc_usable_size_r>:
 800d506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d50a:	1f18      	subs	r0, r3, #4
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	bfbc      	itt	lt
 800d510:	580b      	ldrlt	r3, [r1, r0]
 800d512:	18c0      	addlt	r0, r0, r3
 800d514:	4770      	bx	lr

0800d516 <__sfputc_r>:
 800d516:	6893      	ldr	r3, [r2, #8]
 800d518:	3b01      	subs	r3, #1
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	b410      	push	{r4}
 800d51e:	6093      	str	r3, [r2, #8]
 800d520:	da08      	bge.n	800d534 <__sfputc_r+0x1e>
 800d522:	6994      	ldr	r4, [r2, #24]
 800d524:	42a3      	cmp	r3, r4
 800d526:	db01      	blt.n	800d52c <__sfputc_r+0x16>
 800d528:	290a      	cmp	r1, #10
 800d52a:	d103      	bne.n	800d534 <__sfputc_r+0x1e>
 800d52c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d530:	f000 b934 	b.w	800d79c <__swbuf_r>
 800d534:	6813      	ldr	r3, [r2, #0]
 800d536:	1c58      	adds	r0, r3, #1
 800d538:	6010      	str	r0, [r2, #0]
 800d53a:	7019      	strb	r1, [r3, #0]
 800d53c:	4608      	mov	r0, r1
 800d53e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <__sfputs_r>:
 800d544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d546:	4606      	mov	r6, r0
 800d548:	460f      	mov	r7, r1
 800d54a:	4614      	mov	r4, r2
 800d54c:	18d5      	adds	r5, r2, r3
 800d54e:	42ac      	cmp	r4, r5
 800d550:	d101      	bne.n	800d556 <__sfputs_r+0x12>
 800d552:	2000      	movs	r0, #0
 800d554:	e007      	b.n	800d566 <__sfputs_r+0x22>
 800d556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d55a:	463a      	mov	r2, r7
 800d55c:	4630      	mov	r0, r6
 800d55e:	f7ff ffda 	bl	800d516 <__sfputc_r>
 800d562:	1c43      	adds	r3, r0, #1
 800d564:	d1f3      	bne.n	800d54e <__sfputs_r+0xa>
 800d566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d568 <_vfiprintf_r>:
 800d568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d56c:	460d      	mov	r5, r1
 800d56e:	b09d      	sub	sp, #116	; 0x74
 800d570:	4614      	mov	r4, r2
 800d572:	4698      	mov	r8, r3
 800d574:	4606      	mov	r6, r0
 800d576:	b118      	cbz	r0, 800d580 <_vfiprintf_r+0x18>
 800d578:	6a03      	ldr	r3, [r0, #32]
 800d57a:	b90b      	cbnz	r3, 800d580 <_vfiprintf_r+0x18>
 800d57c:	f7fe f8dc 	bl	800b738 <__sinit>
 800d580:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d582:	07d9      	lsls	r1, r3, #31
 800d584:	d405      	bmi.n	800d592 <_vfiprintf_r+0x2a>
 800d586:	89ab      	ldrh	r3, [r5, #12]
 800d588:	059a      	lsls	r2, r3, #22
 800d58a:	d402      	bmi.n	800d592 <_vfiprintf_r+0x2a>
 800d58c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d58e:	f7fe f9e9 	bl	800b964 <__retarget_lock_acquire_recursive>
 800d592:	89ab      	ldrh	r3, [r5, #12]
 800d594:	071b      	lsls	r3, r3, #28
 800d596:	d501      	bpl.n	800d59c <_vfiprintf_r+0x34>
 800d598:	692b      	ldr	r3, [r5, #16]
 800d59a:	b99b      	cbnz	r3, 800d5c4 <_vfiprintf_r+0x5c>
 800d59c:	4629      	mov	r1, r5
 800d59e:	4630      	mov	r0, r6
 800d5a0:	f000 f93a 	bl	800d818 <__swsetup_r>
 800d5a4:	b170      	cbz	r0, 800d5c4 <_vfiprintf_r+0x5c>
 800d5a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5a8:	07dc      	lsls	r4, r3, #31
 800d5aa:	d504      	bpl.n	800d5b6 <_vfiprintf_r+0x4e>
 800d5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d5b0:	b01d      	add	sp, #116	; 0x74
 800d5b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5b6:	89ab      	ldrh	r3, [r5, #12]
 800d5b8:	0598      	lsls	r0, r3, #22
 800d5ba:	d4f7      	bmi.n	800d5ac <_vfiprintf_r+0x44>
 800d5bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5be:	f7fe f9d2 	bl	800b966 <__retarget_lock_release_recursive>
 800d5c2:	e7f3      	b.n	800d5ac <_vfiprintf_r+0x44>
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d5c8:	2320      	movs	r3, #32
 800d5ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5d2:	2330      	movs	r3, #48	; 0x30
 800d5d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d788 <_vfiprintf_r+0x220>
 800d5d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5dc:	f04f 0901 	mov.w	r9, #1
 800d5e0:	4623      	mov	r3, r4
 800d5e2:	469a      	mov	sl, r3
 800d5e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5e8:	b10a      	cbz	r2, 800d5ee <_vfiprintf_r+0x86>
 800d5ea:	2a25      	cmp	r2, #37	; 0x25
 800d5ec:	d1f9      	bne.n	800d5e2 <_vfiprintf_r+0x7a>
 800d5ee:	ebba 0b04 	subs.w	fp, sl, r4
 800d5f2:	d00b      	beq.n	800d60c <_vfiprintf_r+0xa4>
 800d5f4:	465b      	mov	r3, fp
 800d5f6:	4622      	mov	r2, r4
 800d5f8:	4629      	mov	r1, r5
 800d5fa:	4630      	mov	r0, r6
 800d5fc:	f7ff ffa2 	bl	800d544 <__sfputs_r>
 800d600:	3001      	adds	r0, #1
 800d602:	f000 80a9 	beq.w	800d758 <_vfiprintf_r+0x1f0>
 800d606:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d608:	445a      	add	r2, fp
 800d60a:	9209      	str	r2, [sp, #36]	; 0x24
 800d60c:	f89a 3000 	ldrb.w	r3, [sl]
 800d610:	2b00      	cmp	r3, #0
 800d612:	f000 80a1 	beq.w	800d758 <_vfiprintf_r+0x1f0>
 800d616:	2300      	movs	r3, #0
 800d618:	f04f 32ff 	mov.w	r2, #4294967295
 800d61c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d620:	f10a 0a01 	add.w	sl, sl, #1
 800d624:	9304      	str	r3, [sp, #16]
 800d626:	9307      	str	r3, [sp, #28]
 800d628:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d62c:	931a      	str	r3, [sp, #104]	; 0x68
 800d62e:	4654      	mov	r4, sl
 800d630:	2205      	movs	r2, #5
 800d632:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d636:	4854      	ldr	r0, [pc, #336]	; (800d788 <_vfiprintf_r+0x220>)
 800d638:	f7f2 fdca 	bl	80001d0 <memchr>
 800d63c:	9a04      	ldr	r2, [sp, #16]
 800d63e:	b9d8      	cbnz	r0, 800d678 <_vfiprintf_r+0x110>
 800d640:	06d1      	lsls	r1, r2, #27
 800d642:	bf44      	itt	mi
 800d644:	2320      	movmi	r3, #32
 800d646:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d64a:	0713      	lsls	r3, r2, #28
 800d64c:	bf44      	itt	mi
 800d64e:	232b      	movmi	r3, #43	; 0x2b
 800d650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d654:	f89a 3000 	ldrb.w	r3, [sl]
 800d658:	2b2a      	cmp	r3, #42	; 0x2a
 800d65a:	d015      	beq.n	800d688 <_vfiprintf_r+0x120>
 800d65c:	9a07      	ldr	r2, [sp, #28]
 800d65e:	4654      	mov	r4, sl
 800d660:	2000      	movs	r0, #0
 800d662:	f04f 0c0a 	mov.w	ip, #10
 800d666:	4621      	mov	r1, r4
 800d668:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d66c:	3b30      	subs	r3, #48	; 0x30
 800d66e:	2b09      	cmp	r3, #9
 800d670:	d94d      	bls.n	800d70e <_vfiprintf_r+0x1a6>
 800d672:	b1b0      	cbz	r0, 800d6a2 <_vfiprintf_r+0x13a>
 800d674:	9207      	str	r2, [sp, #28]
 800d676:	e014      	b.n	800d6a2 <_vfiprintf_r+0x13a>
 800d678:	eba0 0308 	sub.w	r3, r0, r8
 800d67c:	fa09 f303 	lsl.w	r3, r9, r3
 800d680:	4313      	orrs	r3, r2
 800d682:	9304      	str	r3, [sp, #16]
 800d684:	46a2      	mov	sl, r4
 800d686:	e7d2      	b.n	800d62e <_vfiprintf_r+0xc6>
 800d688:	9b03      	ldr	r3, [sp, #12]
 800d68a:	1d19      	adds	r1, r3, #4
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	9103      	str	r1, [sp, #12]
 800d690:	2b00      	cmp	r3, #0
 800d692:	bfbb      	ittet	lt
 800d694:	425b      	neglt	r3, r3
 800d696:	f042 0202 	orrlt.w	r2, r2, #2
 800d69a:	9307      	strge	r3, [sp, #28]
 800d69c:	9307      	strlt	r3, [sp, #28]
 800d69e:	bfb8      	it	lt
 800d6a0:	9204      	strlt	r2, [sp, #16]
 800d6a2:	7823      	ldrb	r3, [r4, #0]
 800d6a4:	2b2e      	cmp	r3, #46	; 0x2e
 800d6a6:	d10c      	bne.n	800d6c2 <_vfiprintf_r+0x15a>
 800d6a8:	7863      	ldrb	r3, [r4, #1]
 800d6aa:	2b2a      	cmp	r3, #42	; 0x2a
 800d6ac:	d134      	bne.n	800d718 <_vfiprintf_r+0x1b0>
 800d6ae:	9b03      	ldr	r3, [sp, #12]
 800d6b0:	1d1a      	adds	r2, r3, #4
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	9203      	str	r2, [sp, #12]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	bfb8      	it	lt
 800d6ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6be:	3402      	adds	r4, #2
 800d6c0:	9305      	str	r3, [sp, #20]
 800d6c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d798 <_vfiprintf_r+0x230>
 800d6c6:	7821      	ldrb	r1, [r4, #0]
 800d6c8:	2203      	movs	r2, #3
 800d6ca:	4650      	mov	r0, sl
 800d6cc:	f7f2 fd80 	bl	80001d0 <memchr>
 800d6d0:	b138      	cbz	r0, 800d6e2 <_vfiprintf_r+0x17a>
 800d6d2:	9b04      	ldr	r3, [sp, #16]
 800d6d4:	eba0 000a 	sub.w	r0, r0, sl
 800d6d8:	2240      	movs	r2, #64	; 0x40
 800d6da:	4082      	lsls	r2, r0
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	3401      	adds	r4, #1
 800d6e0:	9304      	str	r3, [sp, #16]
 800d6e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6e6:	4829      	ldr	r0, [pc, #164]	; (800d78c <_vfiprintf_r+0x224>)
 800d6e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6ec:	2206      	movs	r2, #6
 800d6ee:	f7f2 fd6f 	bl	80001d0 <memchr>
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	d03f      	beq.n	800d776 <_vfiprintf_r+0x20e>
 800d6f6:	4b26      	ldr	r3, [pc, #152]	; (800d790 <_vfiprintf_r+0x228>)
 800d6f8:	bb1b      	cbnz	r3, 800d742 <_vfiprintf_r+0x1da>
 800d6fa:	9b03      	ldr	r3, [sp, #12]
 800d6fc:	3307      	adds	r3, #7
 800d6fe:	f023 0307 	bic.w	r3, r3, #7
 800d702:	3308      	adds	r3, #8
 800d704:	9303      	str	r3, [sp, #12]
 800d706:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d708:	443b      	add	r3, r7
 800d70a:	9309      	str	r3, [sp, #36]	; 0x24
 800d70c:	e768      	b.n	800d5e0 <_vfiprintf_r+0x78>
 800d70e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d712:	460c      	mov	r4, r1
 800d714:	2001      	movs	r0, #1
 800d716:	e7a6      	b.n	800d666 <_vfiprintf_r+0xfe>
 800d718:	2300      	movs	r3, #0
 800d71a:	3401      	adds	r4, #1
 800d71c:	9305      	str	r3, [sp, #20]
 800d71e:	4619      	mov	r1, r3
 800d720:	f04f 0c0a 	mov.w	ip, #10
 800d724:	4620      	mov	r0, r4
 800d726:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d72a:	3a30      	subs	r2, #48	; 0x30
 800d72c:	2a09      	cmp	r2, #9
 800d72e:	d903      	bls.n	800d738 <_vfiprintf_r+0x1d0>
 800d730:	2b00      	cmp	r3, #0
 800d732:	d0c6      	beq.n	800d6c2 <_vfiprintf_r+0x15a>
 800d734:	9105      	str	r1, [sp, #20]
 800d736:	e7c4      	b.n	800d6c2 <_vfiprintf_r+0x15a>
 800d738:	fb0c 2101 	mla	r1, ip, r1, r2
 800d73c:	4604      	mov	r4, r0
 800d73e:	2301      	movs	r3, #1
 800d740:	e7f0      	b.n	800d724 <_vfiprintf_r+0x1bc>
 800d742:	ab03      	add	r3, sp, #12
 800d744:	9300      	str	r3, [sp, #0]
 800d746:	462a      	mov	r2, r5
 800d748:	4b12      	ldr	r3, [pc, #72]	; (800d794 <_vfiprintf_r+0x22c>)
 800d74a:	a904      	add	r1, sp, #16
 800d74c:	4630      	mov	r0, r6
 800d74e:	f7fd fbb3 	bl	800aeb8 <_printf_float>
 800d752:	4607      	mov	r7, r0
 800d754:	1c78      	adds	r0, r7, #1
 800d756:	d1d6      	bne.n	800d706 <_vfiprintf_r+0x19e>
 800d758:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d75a:	07d9      	lsls	r1, r3, #31
 800d75c:	d405      	bmi.n	800d76a <_vfiprintf_r+0x202>
 800d75e:	89ab      	ldrh	r3, [r5, #12]
 800d760:	059a      	lsls	r2, r3, #22
 800d762:	d402      	bmi.n	800d76a <_vfiprintf_r+0x202>
 800d764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d766:	f7fe f8fe 	bl	800b966 <__retarget_lock_release_recursive>
 800d76a:	89ab      	ldrh	r3, [r5, #12]
 800d76c:	065b      	lsls	r3, r3, #25
 800d76e:	f53f af1d 	bmi.w	800d5ac <_vfiprintf_r+0x44>
 800d772:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d774:	e71c      	b.n	800d5b0 <_vfiprintf_r+0x48>
 800d776:	ab03      	add	r3, sp, #12
 800d778:	9300      	str	r3, [sp, #0]
 800d77a:	462a      	mov	r2, r5
 800d77c:	4b05      	ldr	r3, [pc, #20]	; (800d794 <_vfiprintf_r+0x22c>)
 800d77e:	a904      	add	r1, sp, #16
 800d780:	4630      	mov	r0, r6
 800d782:	f7fd fe3d 	bl	800b400 <_printf_i>
 800d786:	e7e4      	b.n	800d752 <_vfiprintf_r+0x1ea>
 800d788:	0800dd4c 	.word	0x0800dd4c
 800d78c:	0800dd56 	.word	0x0800dd56
 800d790:	0800aeb9 	.word	0x0800aeb9
 800d794:	0800d545 	.word	0x0800d545
 800d798:	0800dd52 	.word	0x0800dd52

0800d79c <__swbuf_r>:
 800d79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d79e:	460e      	mov	r6, r1
 800d7a0:	4614      	mov	r4, r2
 800d7a2:	4605      	mov	r5, r0
 800d7a4:	b118      	cbz	r0, 800d7ae <__swbuf_r+0x12>
 800d7a6:	6a03      	ldr	r3, [r0, #32]
 800d7a8:	b90b      	cbnz	r3, 800d7ae <__swbuf_r+0x12>
 800d7aa:	f7fd ffc5 	bl	800b738 <__sinit>
 800d7ae:	69a3      	ldr	r3, [r4, #24]
 800d7b0:	60a3      	str	r3, [r4, #8]
 800d7b2:	89a3      	ldrh	r3, [r4, #12]
 800d7b4:	071a      	lsls	r2, r3, #28
 800d7b6:	d525      	bpl.n	800d804 <__swbuf_r+0x68>
 800d7b8:	6923      	ldr	r3, [r4, #16]
 800d7ba:	b31b      	cbz	r3, 800d804 <__swbuf_r+0x68>
 800d7bc:	6823      	ldr	r3, [r4, #0]
 800d7be:	6922      	ldr	r2, [r4, #16]
 800d7c0:	1a98      	subs	r0, r3, r2
 800d7c2:	6963      	ldr	r3, [r4, #20]
 800d7c4:	b2f6      	uxtb	r6, r6
 800d7c6:	4283      	cmp	r3, r0
 800d7c8:	4637      	mov	r7, r6
 800d7ca:	dc04      	bgt.n	800d7d6 <__swbuf_r+0x3a>
 800d7cc:	4621      	mov	r1, r4
 800d7ce:	4628      	mov	r0, r5
 800d7d0:	f7ff fd9e 	bl	800d310 <_fflush_r>
 800d7d4:	b9e0      	cbnz	r0, 800d810 <__swbuf_r+0x74>
 800d7d6:	68a3      	ldr	r3, [r4, #8]
 800d7d8:	3b01      	subs	r3, #1
 800d7da:	60a3      	str	r3, [r4, #8]
 800d7dc:	6823      	ldr	r3, [r4, #0]
 800d7de:	1c5a      	adds	r2, r3, #1
 800d7e0:	6022      	str	r2, [r4, #0]
 800d7e2:	701e      	strb	r6, [r3, #0]
 800d7e4:	6962      	ldr	r2, [r4, #20]
 800d7e6:	1c43      	adds	r3, r0, #1
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d004      	beq.n	800d7f6 <__swbuf_r+0x5a>
 800d7ec:	89a3      	ldrh	r3, [r4, #12]
 800d7ee:	07db      	lsls	r3, r3, #31
 800d7f0:	d506      	bpl.n	800d800 <__swbuf_r+0x64>
 800d7f2:	2e0a      	cmp	r6, #10
 800d7f4:	d104      	bne.n	800d800 <__swbuf_r+0x64>
 800d7f6:	4621      	mov	r1, r4
 800d7f8:	4628      	mov	r0, r5
 800d7fa:	f7ff fd89 	bl	800d310 <_fflush_r>
 800d7fe:	b938      	cbnz	r0, 800d810 <__swbuf_r+0x74>
 800d800:	4638      	mov	r0, r7
 800d802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d804:	4621      	mov	r1, r4
 800d806:	4628      	mov	r0, r5
 800d808:	f000 f806 	bl	800d818 <__swsetup_r>
 800d80c:	2800      	cmp	r0, #0
 800d80e:	d0d5      	beq.n	800d7bc <__swbuf_r+0x20>
 800d810:	f04f 37ff 	mov.w	r7, #4294967295
 800d814:	e7f4      	b.n	800d800 <__swbuf_r+0x64>
	...

0800d818 <__swsetup_r>:
 800d818:	b538      	push	{r3, r4, r5, lr}
 800d81a:	4b2a      	ldr	r3, [pc, #168]	; (800d8c4 <__swsetup_r+0xac>)
 800d81c:	4605      	mov	r5, r0
 800d81e:	6818      	ldr	r0, [r3, #0]
 800d820:	460c      	mov	r4, r1
 800d822:	b118      	cbz	r0, 800d82c <__swsetup_r+0x14>
 800d824:	6a03      	ldr	r3, [r0, #32]
 800d826:	b90b      	cbnz	r3, 800d82c <__swsetup_r+0x14>
 800d828:	f7fd ff86 	bl	800b738 <__sinit>
 800d82c:	89a3      	ldrh	r3, [r4, #12]
 800d82e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d832:	0718      	lsls	r0, r3, #28
 800d834:	d422      	bmi.n	800d87c <__swsetup_r+0x64>
 800d836:	06d9      	lsls	r1, r3, #27
 800d838:	d407      	bmi.n	800d84a <__swsetup_r+0x32>
 800d83a:	2309      	movs	r3, #9
 800d83c:	602b      	str	r3, [r5, #0]
 800d83e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d842:	81a3      	strh	r3, [r4, #12]
 800d844:	f04f 30ff 	mov.w	r0, #4294967295
 800d848:	e034      	b.n	800d8b4 <__swsetup_r+0x9c>
 800d84a:	0758      	lsls	r0, r3, #29
 800d84c:	d512      	bpl.n	800d874 <__swsetup_r+0x5c>
 800d84e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d850:	b141      	cbz	r1, 800d864 <__swsetup_r+0x4c>
 800d852:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d856:	4299      	cmp	r1, r3
 800d858:	d002      	beq.n	800d860 <__swsetup_r+0x48>
 800d85a:	4628      	mov	r0, r5
 800d85c:	f7fe fefe 	bl	800c65c <_free_r>
 800d860:	2300      	movs	r3, #0
 800d862:	6363      	str	r3, [r4, #52]	; 0x34
 800d864:	89a3      	ldrh	r3, [r4, #12]
 800d866:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d86a:	81a3      	strh	r3, [r4, #12]
 800d86c:	2300      	movs	r3, #0
 800d86e:	6063      	str	r3, [r4, #4]
 800d870:	6923      	ldr	r3, [r4, #16]
 800d872:	6023      	str	r3, [r4, #0]
 800d874:	89a3      	ldrh	r3, [r4, #12]
 800d876:	f043 0308 	orr.w	r3, r3, #8
 800d87a:	81a3      	strh	r3, [r4, #12]
 800d87c:	6923      	ldr	r3, [r4, #16]
 800d87e:	b94b      	cbnz	r3, 800d894 <__swsetup_r+0x7c>
 800d880:	89a3      	ldrh	r3, [r4, #12]
 800d882:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d88a:	d003      	beq.n	800d894 <__swsetup_r+0x7c>
 800d88c:	4621      	mov	r1, r4
 800d88e:	4628      	mov	r0, r5
 800d890:	f000 f884 	bl	800d99c <__smakebuf_r>
 800d894:	89a0      	ldrh	r0, [r4, #12]
 800d896:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d89a:	f010 0301 	ands.w	r3, r0, #1
 800d89e:	d00a      	beq.n	800d8b6 <__swsetup_r+0x9e>
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	60a3      	str	r3, [r4, #8]
 800d8a4:	6963      	ldr	r3, [r4, #20]
 800d8a6:	425b      	negs	r3, r3
 800d8a8:	61a3      	str	r3, [r4, #24]
 800d8aa:	6923      	ldr	r3, [r4, #16]
 800d8ac:	b943      	cbnz	r3, 800d8c0 <__swsetup_r+0xa8>
 800d8ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d8b2:	d1c4      	bne.n	800d83e <__swsetup_r+0x26>
 800d8b4:	bd38      	pop	{r3, r4, r5, pc}
 800d8b6:	0781      	lsls	r1, r0, #30
 800d8b8:	bf58      	it	pl
 800d8ba:	6963      	ldrpl	r3, [r4, #20]
 800d8bc:	60a3      	str	r3, [r4, #8]
 800d8be:	e7f4      	b.n	800d8aa <__swsetup_r+0x92>
 800d8c0:	2000      	movs	r0, #0
 800d8c2:	e7f7      	b.n	800d8b4 <__swsetup_r+0x9c>
 800d8c4:	20000170 	.word	0x20000170

0800d8c8 <_raise_r>:
 800d8c8:	291f      	cmp	r1, #31
 800d8ca:	b538      	push	{r3, r4, r5, lr}
 800d8cc:	4604      	mov	r4, r0
 800d8ce:	460d      	mov	r5, r1
 800d8d0:	d904      	bls.n	800d8dc <_raise_r+0x14>
 800d8d2:	2316      	movs	r3, #22
 800d8d4:	6003      	str	r3, [r0, #0]
 800d8d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8da:	bd38      	pop	{r3, r4, r5, pc}
 800d8dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d8de:	b112      	cbz	r2, 800d8e6 <_raise_r+0x1e>
 800d8e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d8e4:	b94b      	cbnz	r3, 800d8fa <_raise_r+0x32>
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	f000 f830 	bl	800d94c <_getpid_r>
 800d8ec:	462a      	mov	r2, r5
 800d8ee:	4601      	mov	r1, r0
 800d8f0:	4620      	mov	r0, r4
 800d8f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d8f6:	f000 b817 	b.w	800d928 <_kill_r>
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d00a      	beq.n	800d914 <_raise_r+0x4c>
 800d8fe:	1c59      	adds	r1, r3, #1
 800d900:	d103      	bne.n	800d90a <_raise_r+0x42>
 800d902:	2316      	movs	r3, #22
 800d904:	6003      	str	r3, [r0, #0]
 800d906:	2001      	movs	r0, #1
 800d908:	e7e7      	b.n	800d8da <_raise_r+0x12>
 800d90a:	2400      	movs	r4, #0
 800d90c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d910:	4628      	mov	r0, r5
 800d912:	4798      	blx	r3
 800d914:	2000      	movs	r0, #0
 800d916:	e7e0      	b.n	800d8da <_raise_r+0x12>

0800d918 <raise>:
 800d918:	4b02      	ldr	r3, [pc, #8]	; (800d924 <raise+0xc>)
 800d91a:	4601      	mov	r1, r0
 800d91c:	6818      	ldr	r0, [r3, #0]
 800d91e:	f7ff bfd3 	b.w	800d8c8 <_raise_r>
 800d922:	bf00      	nop
 800d924:	20000170 	.word	0x20000170

0800d928 <_kill_r>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4d07      	ldr	r5, [pc, #28]	; (800d948 <_kill_r+0x20>)
 800d92c:	2300      	movs	r3, #0
 800d92e:	4604      	mov	r4, r0
 800d930:	4608      	mov	r0, r1
 800d932:	4611      	mov	r1, r2
 800d934:	602b      	str	r3, [r5, #0]
 800d936:	f7f4 fbab 	bl	8002090 <_kill>
 800d93a:	1c43      	adds	r3, r0, #1
 800d93c:	d102      	bne.n	800d944 <_kill_r+0x1c>
 800d93e:	682b      	ldr	r3, [r5, #0]
 800d940:	b103      	cbz	r3, 800d944 <_kill_r+0x1c>
 800d942:	6023      	str	r3, [r4, #0]
 800d944:	bd38      	pop	{r3, r4, r5, pc}
 800d946:	bf00      	nop
 800d948:	20001114 	.word	0x20001114

0800d94c <_getpid_r>:
 800d94c:	f7f4 bb98 	b.w	8002080 <_getpid>

0800d950 <__swhatbuf_r>:
 800d950:	b570      	push	{r4, r5, r6, lr}
 800d952:	460c      	mov	r4, r1
 800d954:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d958:	2900      	cmp	r1, #0
 800d95a:	b096      	sub	sp, #88	; 0x58
 800d95c:	4615      	mov	r5, r2
 800d95e:	461e      	mov	r6, r3
 800d960:	da0d      	bge.n	800d97e <__swhatbuf_r+0x2e>
 800d962:	89a3      	ldrh	r3, [r4, #12]
 800d964:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d968:	f04f 0100 	mov.w	r1, #0
 800d96c:	bf0c      	ite	eq
 800d96e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d972:	2340      	movne	r3, #64	; 0x40
 800d974:	2000      	movs	r0, #0
 800d976:	6031      	str	r1, [r6, #0]
 800d978:	602b      	str	r3, [r5, #0]
 800d97a:	b016      	add	sp, #88	; 0x58
 800d97c:	bd70      	pop	{r4, r5, r6, pc}
 800d97e:	466a      	mov	r2, sp
 800d980:	f000 f848 	bl	800da14 <_fstat_r>
 800d984:	2800      	cmp	r0, #0
 800d986:	dbec      	blt.n	800d962 <__swhatbuf_r+0x12>
 800d988:	9901      	ldr	r1, [sp, #4]
 800d98a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d98e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d992:	4259      	negs	r1, r3
 800d994:	4159      	adcs	r1, r3
 800d996:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d99a:	e7eb      	b.n	800d974 <__swhatbuf_r+0x24>

0800d99c <__smakebuf_r>:
 800d99c:	898b      	ldrh	r3, [r1, #12]
 800d99e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9a0:	079d      	lsls	r5, r3, #30
 800d9a2:	4606      	mov	r6, r0
 800d9a4:	460c      	mov	r4, r1
 800d9a6:	d507      	bpl.n	800d9b8 <__smakebuf_r+0x1c>
 800d9a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d9ac:	6023      	str	r3, [r4, #0]
 800d9ae:	6123      	str	r3, [r4, #16]
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	6163      	str	r3, [r4, #20]
 800d9b4:	b002      	add	sp, #8
 800d9b6:	bd70      	pop	{r4, r5, r6, pc}
 800d9b8:	ab01      	add	r3, sp, #4
 800d9ba:	466a      	mov	r2, sp
 800d9bc:	f7ff ffc8 	bl	800d950 <__swhatbuf_r>
 800d9c0:	9900      	ldr	r1, [sp, #0]
 800d9c2:	4605      	mov	r5, r0
 800d9c4:	4630      	mov	r0, r6
 800d9c6:	f7fe febd 	bl	800c744 <_malloc_r>
 800d9ca:	b948      	cbnz	r0, 800d9e0 <__smakebuf_r+0x44>
 800d9cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9d0:	059a      	lsls	r2, r3, #22
 800d9d2:	d4ef      	bmi.n	800d9b4 <__smakebuf_r+0x18>
 800d9d4:	f023 0303 	bic.w	r3, r3, #3
 800d9d8:	f043 0302 	orr.w	r3, r3, #2
 800d9dc:	81a3      	strh	r3, [r4, #12]
 800d9de:	e7e3      	b.n	800d9a8 <__smakebuf_r+0xc>
 800d9e0:	89a3      	ldrh	r3, [r4, #12]
 800d9e2:	6020      	str	r0, [r4, #0]
 800d9e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9e8:	81a3      	strh	r3, [r4, #12]
 800d9ea:	9b00      	ldr	r3, [sp, #0]
 800d9ec:	6163      	str	r3, [r4, #20]
 800d9ee:	9b01      	ldr	r3, [sp, #4]
 800d9f0:	6120      	str	r0, [r4, #16]
 800d9f2:	b15b      	cbz	r3, 800da0c <__smakebuf_r+0x70>
 800d9f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d9f8:	4630      	mov	r0, r6
 800d9fa:	f000 f81d 	bl	800da38 <_isatty_r>
 800d9fe:	b128      	cbz	r0, 800da0c <__smakebuf_r+0x70>
 800da00:	89a3      	ldrh	r3, [r4, #12]
 800da02:	f023 0303 	bic.w	r3, r3, #3
 800da06:	f043 0301 	orr.w	r3, r3, #1
 800da0a:	81a3      	strh	r3, [r4, #12]
 800da0c:	89a3      	ldrh	r3, [r4, #12]
 800da0e:	431d      	orrs	r5, r3
 800da10:	81a5      	strh	r5, [r4, #12]
 800da12:	e7cf      	b.n	800d9b4 <__smakebuf_r+0x18>

0800da14 <_fstat_r>:
 800da14:	b538      	push	{r3, r4, r5, lr}
 800da16:	4d07      	ldr	r5, [pc, #28]	; (800da34 <_fstat_r+0x20>)
 800da18:	2300      	movs	r3, #0
 800da1a:	4604      	mov	r4, r0
 800da1c:	4608      	mov	r0, r1
 800da1e:	4611      	mov	r1, r2
 800da20:	602b      	str	r3, [r5, #0]
 800da22:	f7f4 fb94 	bl	800214e <_fstat>
 800da26:	1c43      	adds	r3, r0, #1
 800da28:	d102      	bne.n	800da30 <_fstat_r+0x1c>
 800da2a:	682b      	ldr	r3, [r5, #0]
 800da2c:	b103      	cbz	r3, 800da30 <_fstat_r+0x1c>
 800da2e:	6023      	str	r3, [r4, #0]
 800da30:	bd38      	pop	{r3, r4, r5, pc}
 800da32:	bf00      	nop
 800da34:	20001114 	.word	0x20001114

0800da38 <_isatty_r>:
 800da38:	b538      	push	{r3, r4, r5, lr}
 800da3a:	4d06      	ldr	r5, [pc, #24]	; (800da54 <_isatty_r+0x1c>)
 800da3c:	2300      	movs	r3, #0
 800da3e:	4604      	mov	r4, r0
 800da40:	4608      	mov	r0, r1
 800da42:	602b      	str	r3, [r5, #0]
 800da44:	f7f4 fb93 	bl	800216e <_isatty>
 800da48:	1c43      	adds	r3, r0, #1
 800da4a:	d102      	bne.n	800da52 <_isatty_r+0x1a>
 800da4c:	682b      	ldr	r3, [r5, #0]
 800da4e:	b103      	cbz	r3, 800da52 <_isatty_r+0x1a>
 800da50:	6023      	str	r3, [r4, #0]
 800da52:	bd38      	pop	{r3, r4, r5, pc}
 800da54:	20001114 	.word	0x20001114

0800da58 <_init>:
 800da58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da5a:	bf00      	nop
 800da5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da5e:	bc08      	pop	{r3}
 800da60:	469e      	mov	lr, r3
 800da62:	4770      	bx	lr

0800da64 <_fini>:
 800da64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da66:	bf00      	nop
 800da68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da6a:	bc08      	pop	{r3}
 800da6c:	469e      	mov	lr, r3
 800da6e:	4770      	bx	lr
