
P6_f6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e2d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800e460  0800e460  0001e460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e88c  0800e88c  000202e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e88c  0800e88c  0001e88c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e894  0800e894  000202e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e894  0800e894  0001e894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e898  0800e898  0001e898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e0  20000000  0800e89c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e44  200002e0  0800eb7c  000202e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001124  0800eb7c  00021124  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020310  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023092  00000000  00000000  00020353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004beb  00000000  00000000  000433e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002038  00000000  00000000  00047fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018f5  00000000  00000000  0004a008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ce46  00000000  00000000  0004b8fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002816b  00000000  00000000  00078743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010204d  00000000  00000000  000a08ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009940  00000000  00000000  001a28fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001ac23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002e0 	.word	0x200002e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e448 	.word	0x0800e448

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002e4 	.word	0x200002e4
 80001cc:	0800e448 	.word	0x0800e448

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HTS221_Init>:

extern I2C_HandleTypeDef hi2c2;

/* ���ù���ģʽ����ʼ��HTS221 */
void HTS221_Init()
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af04      	add	r7, sp, #16
	uint8_t cmd = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	71fb      	strb	r3, [r7, #7]
	
	//���÷ֱ���
	cmd = 0x3F;
 8000eae:	233f      	movs	r3, #63	; 0x3f
 8000eb0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, HTS221_ADDR_WR, 0x10, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 0xFFFF);
 8000eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000eb6:	9302      	str	r3, [sp, #8]
 8000eb8:	2301      	movs	r3, #1
 8000eba:	9301      	str	r3, [sp, #4]
 8000ebc:	1dfb      	adds	r3, r7, #7
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	2210      	movs	r2, #16
 8000ec4:	21be      	movs	r1, #190	; 0xbe
 8000ec6:	481a      	ldr	r0, [pc, #104]	; (8000f30 <HTS221_Init+0x8c>)
 8000ec8:	f002 f8ec 	bl	80030a4 <HAL_I2C_Mem_Write>
	
	//���õ�Դ�����ݿ����ģʽ�������������
	cmd = 0x84;
 8000ecc:	2384      	movs	r3, #132	; 0x84
 8000ece:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, HTS221_ADDR_WR, HTS221_CTRL_REG1, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 0xFFFF);
 8000ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ed4:	9302      	str	r3, [sp, #8]
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	9301      	str	r3, [sp, #4]
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	9300      	str	r3, [sp, #0]
 8000ede:	2301      	movs	r3, #1
 8000ee0:	2220      	movs	r2, #32
 8000ee2:	21be      	movs	r1, #190	; 0xbe
 8000ee4:	4812      	ldr	r0, [pc, #72]	; (8000f30 <HTS221_Init+0x8c>)
 8000ee6:	f002 f8dd 	bl	80030a4 <HAL_I2C_Mem_Write>
	
	//�������ݴ洢�鸴λģʽ���ر��ڲ�����
	cmd = 0x00;
 8000eea:	2300      	movs	r3, #0
 8000eec:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, HTS221_ADDR_WR, HTS221_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 0xFFFF);
 8000eee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ef2:	9302      	str	r3, [sp, #8]
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2301      	movs	r3, #1
 8000efe:	2221      	movs	r2, #33	; 0x21
 8000f00:	21be      	movs	r1, #190	; 0xbe
 8000f02:	480b      	ldr	r0, [pc, #44]	; (8000f30 <HTS221_Init+0x8c>)
 8000f04:	f002 f8ce 	bl	80030a4 <HAL_I2C_Mem_Write>
	
	//�ر������������ź�
	cmd = 0x00;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, HTS221_ADDR_WR, HTS221_CTRL_REG3, I2C_MEMADD_SIZE_8BIT, &cmd, 1, 0xFFFF);
 8000f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f10:	9302      	str	r3, [sp, #8]
 8000f12:	2301      	movs	r3, #1
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	2222      	movs	r2, #34	; 0x22
 8000f1e:	21be      	movs	r1, #190	; 0xbe
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <HTS221_Init+0x8c>)
 8000f22:	f002 f8bf 	bl	80030a4 <HAL_I2C_Mem_Write>

}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000340 	.word	0x20000340

08000f34 <HTS221_Start>:

/* HTS221����һ��ת�� */
static void HTS221_Start()
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af04      	add	r7, sp, #16
	uint8_t dat = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	71fb      	strb	r3, [r7, #7]
	
	//��ȡREG2�Ĵ����е�ֵ����ֹ������Ϣ���ƻ�
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, HTS221_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, &dat, 1, 0xFFFF);
 8000f3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f42:	9302      	str	r3, [sp, #8]
 8000f44:	2301      	movs	r3, #1
 8000f46:	9301      	str	r3, [sp, #4]
 8000f48:	1dfb      	adds	r3, r7, #7
 8000f4a:	9300      	str	r3, [sp, #0]
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	2221      	movs	r2, #33	; 0x21
 8000f50:	21bf      	movs	r1, #191	; 0xbf
 8000f52:	480c      	ldr	r0, [pc, #48]	; (8000f84 <HTS221_Start+0x50>)
 8000f54:	f002 f9ba 	bl	80032cc <HAL_I2C_Mem_Read>
	
	//����һ��ת��
	dat |= 0x01;
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c2, HTS221_ADDR_WR, HTS221_CTRL_REG2, I2C_MEMADD_SIZE_8BIT, &dat, 1, 0xFFFF);
 8000f62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f66:	9302      	str	r3, [sp, #8]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	2301      	movs	r3, #1
 8000f72:	2221      	movs	r2, #33	; 0x21
 8000f74:	21be      	movs	r1, #190	; 0xbe
 8000f76:	4803      	ldr	r0, [pc, #12]	; (8000f84 <HTS221_Start+0x50>)
 8000f78:	f002 f894 	bl	80030a4 <HAL_I2C_Mem_Write>

}
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	20000340 	.word	0x20000340

08000f88 <HTS221_Get_Temperature>:

/* ����һ��ת������ȡУ�����¶�ֵ */
/* note����API��ȡ��ֵ��10������   */
uint8_t	HTS221_Get_Temperature(int16_t* temperature)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08e      	sub	sp, #56	; 0x38
 8000f8c:	af04      	add	r7, sp, #16
 8000f8e:	6078      	str	r0, [r7, #4]
	uint8_t status_dat = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	74fb      	strb	r3, [r7, #19]
	uint8_t T0_degC_x8, T1_degC_x8, tmp;
	uint8_t buffer[4];
	int32_t tmp32;
	
	/*1. ��ȡT0_degC_x8 �� T1_degC_x8 У��ֵ */
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, 0x32, I2C_MEMADD_SIZE_8BIT, &T0_degC_x8, 1, 0xFFFF);
 8000f94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	f107 0312 	add.w	r3, r7, #18
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	2232      	movs	r2, #50	; 0x32
 8000fa8:	21bf      	movs	r1, #191	; 0xbf
 8000faa:	4872      	ldr	r0, [pc, #456]	; (8001174 <HTS221_Get_Temperature+0x1ec>)
 8000fac:	f002 f98e 	bl	80032cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, 0x33, I2C_MEMADD_SIZE_8BIT, &T1_degC_x8, 1, 0xFFFF);
 8000fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb4:	9302      	str	r3, [sp, #8]
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	9301      	str	r3, [sp, #4]
 8000fba:	f107 0311 	add.w	r3, r7, #17
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	2233      	movs	r2, #51	; 0x33
 8000fc4:	21bf      	movs	r1, #191	; 0xbf
 8000fc6:	486b      	ldr	r0, [pc, #428]	; (8001174 <HTS221_Get_Temperature+0x1ec>)
 8000fc8:	f002 f980 	bl	80032cc <HAL_I2C_Mem_Read>
	
	/*2. ��ȡT1_degC �� T0_degC �����λ*/
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, 0x35, I2C_MEMADD_SIZE_8BIT, &tmp, 1, 0xFFFF);
 8000fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	f107 0310 	add.w	r3, r7, #16
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	2235      	movs	r2, #53	; 0x35
 8000fe0:	21bf      	movs	r1, #191	; 0xbf
 8000fe2:	4864      	ldr	r0, [pc, #400]	; (8001174 <HTS221_Get_Temperature+0x1ec>)
 8000fe4:	f002 f972 	bl	80032cc <HAL_I2C_Mem_Read>
	
	// ����T0_degC and T1_degC ֵ */
	T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)T0_degC_x8);
 8000fe8:	7c3b      	ldrb	r3, [r7, #16]
 8000fea:	021b      	lsls	r3, r3, #8
 8000fec:	b21b      	sxth	r3, r3
 8000fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000ff2:	b21a      	sxth	r2, r3
 8000ff4:	7cbb      	ldrb	r3, [r7, #18]
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	84fb      	strh	r3, [r7, #38]	; 0x26
	T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)T1_degC_x8);
 8000ffc:	7c3b      	ldrb	r3, [r7, #16]
 8000ffe:	019b      	lsls	r3, r3, #6
 8001000:	b21b      	sxth	r3, r3
 8001002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001006:	b21a      	sxth	r2, r3
 8001008:	7c7b      	ldrb	r3, [r7, #17]
 800100a:	b21b      	sxth	r3, r3
 800100c:	4313      	orrs	r3, r2
 800100e:	84bb      	strh	r3, [r7, #36]	; 0x24
	T0_degC = T0_degC_x8_u16>>3;
 8001010:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001014:	10db      	asrs	r3, r3, #3
 8001016:	847b      	strh	r3, [r7, #34]	; 0x22
	T1_degC = T1_degC_x8_u16>>3;
 8001018:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800101c:	10db      	asrs	r3, r3, #3
 800101e:	843b      	strh	r3, [r7, #32]
	
	/*3. ��ȡ T0_OUT �� T1_OUT ֵ */
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, 0x3C, I2C_MEMADD_SIZE_8BIT, &buffer[0], 1, 0xFFFF);
 8001020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2301      	movs	r3, #1
 8001028:	9301      	str	r3, [sp, #4]
 800102a:	f107 030c 	add.w	r3, r7, #12
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	223c      	movs	r2, #60	; 0x3c
 8001034:	21bf      	movs	r1, #191	; 0xbf
 8001036:	484f      	ldr	r0, [pc, #316]	; (8001174 <HTS221_Get_Temperature+0x1ec>)
 8001038:	f002 f948 	bl	80032cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, 0x3D, I2C_MEMADD_SIZE_8BIT, &buffer[1], 1, 0xFFFF);
 800103c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001040:	9302      	str	r3, [sp, #8]
 8001042:	2301      	movs	r3, #1
 8001044:	9301      	str	r3, [sp, #4]
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	3301      	adds	r3, #1
 800104c:	9300      	str	r3, [sp, #0]
 800104e:	2301      	movs	r3, #1
 8001050:	223d      	movs	r2, #61	; 0x3d
 8001052:	21bf      	movs	r1, #191	; 0xbf
 8001054:	4847      	ldr	r0, [pc, #284]	; (8001174 <HTS221_Get_Temperature+0x1ec>)
 8001056:	f002 f939 	bl	80032cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, 0x3E, I2C_MEMADD_SIZE_8BIT, &buffer[0], 1, 0xFFFF);
 800105a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	2301      	movs	r3, #1
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	f107 030c 	add.w	r3, r7, #12
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	223e      	movs	r2, #62	; 0x3e
 800106e:	21bf      	movs	r1, #191	; 0xbf
 8001070:	4840      	ldr	r0, [pc, #256]	; (8001174 <HTS221_Get_Temperature+0x1ec>)
 8001072:	f002 f92b 	bl	80032cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, 0x3F, I2C_MEMADD_SIZE_8BIT, &buffer[1], 1, 0xFFFF);
 8001076:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800107a:	9302      	str	r3, [sp, #8]
 800107c:	2301      	movs	r3, #1
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	3301      	adds	r3, #1
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	2301      	movs	r3, #1
 800108a:	223f      	movs	r2, #63	; 0x3f
 800108c:	21bf      	movs	r1, #191	; 0xbf
 800108e:	4839      	ldr	r0, [pc, #228]	; (8001174 <HTS221_Get_Temperature+0x1ec>)
 8001090:	f002 f91c 	bl	80032cc <HAL_I2C_Mem_Read>
	
	T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8001094:	7b7b      	ldrb	r3, [r7, #13]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b21a      	sxth	r2, r3
 800109a:	7b3b      	ldrb	r3, [r7, #12]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	83fb      	strh	r3, [r7, #30]
	T1_out = (((uint16_t)buffer[3])<<8) | (uint16_t)buffer[2];
 80010a2:	7bfb      	ldrb	r3, [r7, #15]
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	7bbb      	ldrb	r3, [r7, #14]
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	83bb      	strh	r3, [r7, #28]
	
	/* 4. ����ת�����ȴ���ɺ��ȡת�����ֵT_OUT */
	HTS221_Start();
 80010b0:	f7ff ff40 	bl	8000f34 <HTS221_Start>
	while(status_dat != 0x03)
 80010b4:	e00d      	b.n	80010d2 <HTS221_Get_Temperature+0x14a>
	{
		HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, HTS221_STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status_dat, 1, 0xFFFF);
 80010b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2301      	movs	r3, #1
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	f107 0313 	add.w	r3, r7, #19
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2301      	movs	r3, #1
 80010c8:	2227      	movs	r2, #39	; 0x27
 80010ca:	21bf      	movs	r1, #191	; 0xbf
 80010cc:	4829      	ldr	r0, [pc, #164]	; (8001174 <HTS221_Get_Temperature+0x1ec>)
 80010ce:	f002 f8fd 	bl	80032cc <HAL_I2C_Mem_Read>
	while(status_dat != 0x03)
 80010d2:	7cfb      	ldrb	r3, [r7, #19]
 80010d4:	2b03      	cmp	r3, #3
 80010d6:	d1ee      	bne.n	80010b6 <HTS221_Get_Temperature+0x12e>
	}
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, HTS221_TEMP_OUT_L, I2C_MEMADD_SIZE_8BIT, &buffer[0], 1, 0xFFFF);
 80010d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010dc:	9302      	str	r3, [sp, #8]
 80010de:	2301      	movs	r3, #1
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	f107 030c 	add.w	r3, r7, #12
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2301      	movs	r3, #1
 80010ea:	222a      	movs	r2, #42	; 0x2a
 80010ec:	21bf      	movs	r1, #191	; 0xbf
 80010ee:	4821      	ldr	r0, [pc, #132]	; (8001174 <HTS221_Get_Temperature+0x1ec>)
 80010f0:	f002 f8ec 	bl	80032cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, HTS221_TEMP_OUT_H, I2C_MEMADD_SIZE_8BIT, &buffer[1], 1, 0xFFFF);
 80010f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f8:	9302      	str	r3, [sp, #8]
 80010fa:	2301      	movs	r3, #1
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	3301      	adds	r3, #1
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2301      	movs	r3, #1
 8001108:	222b      	movs	r2, #43	; 0x2b
 800110a:	21bf      	movs	r1, #191	; 0xbf
 800110c:	4819      	ldr	r0, [pc, #100]	; (8001174 <HTS221_Get_Temperature+0x1ec>)
 800110e:	f002 f8dd 	bl	80032cc <HAL_I2C_Mem_Read>
	
	T_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8001112:	7b7b      	ldrb	r3, [r7, #13]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b21a      	sxth	r2, r3
 8001118:	7b3b      	ldrb	r3, [r7, #12]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	837b      	strh	r3, [r7, #26]
	
	/* 5. ʹ�����Բ�ֵ�����㵱ǰ��Ӧ���¶�ֵ */
	tmp32 = ((int32_t)(T_out - T0_out)) * ((int32_t)(T1_degC - T0_degC)*10);
 8001120:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001124:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800112e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001132:	1a8a      	subs	r2, r1, r2
 8001134:	fb03 f202 	mul.w	r2, r3, r2
 8001138:	4613      	mov	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	4413      	add	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	617b      	str	r3, [r7, #20]
	*temperature = tmp32 /(T1_out - T0_out) + T0_degC*10;
 8001142:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001146:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	697a      	ldr	r2, [r7, #20]
 800114e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001152:	b29a      	uxth	r2, r3
 8001154:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001156:	4619      	mov	r1, r3
 8001158:	0089      	lsls	r1, r1, #2
 800115a:	440b      	add	r3, r1
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	b29b      	uxth	r3, r3
 8001160:	4413      	add	r3, r2
 8001162:	b29b      	uxth	r3, r3
 8001164:	b21a      	sxth	r2, r3
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	801a      	strh	r2, [r3, #0]
	
	return 0;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	3728      	adds	r7, #40	; 0x28
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000340 	.word	0x20000340

08001178 <HTS221_Get_Humidity>:

/* ����һ��ת������ȡУ����ʪ��ֵ */
/* note����API��ȡ��ֵ��10������   */
uint8_t	HTS221_Get_Humidity(int16_t* humidity)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	; 0x30
 800117c:	af04      	add	r7, sp, #16
 800117e:	6078      	str	r0, [r7, #4]
	uint8_t status_dat = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	73fb      	strb	r3, [r7, #15]
	uint8_t buffer[2];
	int32_t tmp;
	
	
	/* 1. ��ȡH0_rH and H1_rH У��ֵ */
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, 0x30, I2C_MEMADD_SIZE_8BIT, &buffer[0], 1, 0xFFFF);
 8001184:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001188:	9302      	str	r3, [sp, #8]
 800118a:	2301      	movs	r3, #1
 800118c:	9301      	str	r3, [sp, #4]
 800118e:	f107 030c 	add.w	r3, r7, #12
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	2301      	movs	r3, #1
 8001196:	2230      	movs	r2, #48	; 0x30
 8001198:	21bf      	movs	r1, #191	; 0xbf
 800119a:	4867      	ldr	r0, [pc, #412]	; (8001338 <HTS221_Get_Humidity+0x1c0>)
 800119c:	f002 f896 	bl	80032cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, 0x31, I2C_MEMADD_SIZE_8BIT, &buffer[1], 1, 0xFFFF);
 80011a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	2301      	movs	r3, #1
 80011a8:	9301      	str	r3, [sp, #4]
 80011aa:	f107 030c 	add.w	r3, r7, #12
 80011ae:	3301      	adds	r3, #1
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	2231      	movs	r2, #49	; 0x31
 80011b6:	21bf      	movs	r1, #191	; 0xbf
 80011b8:	485f      	ldr	r0, [pc, #380]	; (8001338 <HTS221_Get_Humidity+0x1c0>)
 80011ba:	f002 f887 	bl	80032cc <HAL_I2C_Mem_Read>
	H0_rh = buffer[0] >> 1;
 80011be:	7b3b      	ldrb	r3, [r7, #12]
 80011c0:	085b      	lsrs	r3, r3, #1
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	83fb      	strh	r3, [r7, #30]
	H1_rh = buffer[1] >> 1;
 80011c6:	7b7b      	ldrb	r3, [r7, #13]
 80011c8:	085b      	lsrs	r3, r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	83bb      	strh	r3, [r7, #28]
	
	/*2. ��ȡ H0_T0_OUT У��ֵ */
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, 0x36, I2C_MEMADD_SIZE_8BIT, &buffer[0], 1, 0xFFFF);
 80011ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011d2:	9302      	str	r3, [sp, #8]
 80011d4:	2301      	movs	r3, #1
 80011d6:	9301      	str	r3, [sp, #4]
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	2236      	movs	r2, #54	; 0x36
 80011e2:	21bf      	movs	r1, #191	; 0xbf
 80011e4:	4854      	ldr	r0, [pc, #336]	; (8001338 <HTS221_Get_Humidity+0x1c0>)
 80011e6:	f002 f871 	bl	80032cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, 0x37, I2C_MEMADD_SIZE_8BIT, &buffer[1], 1, 0xFFFF);
 80011ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ee:	9302      	str	r3, [sp, #8]
 80011f0:	2301      	movs	r3, #1
 80011f2:	9301      	str	r3, [sp, #4]
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	3301      	adds	r3, #1
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	2237      	movs	r2, #55	; 0x37
 8001200:	21bf      	movs	r1, #191	; 0xbf
 8001202:	484d      	ldr	r0, [pc, #308]	; (8001338 <HTS221_Get_Humidity+0x1c0>)
 8001204:	f002 f862 	bl	80032cc <HAL_I2C_Mem_Read>
	H0_T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8001208:	7b7b      	ldrb	r3, [r7, #13]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	b21a      	sxth	r2, r3
 800120e:	7b3b      	ldrb	r3, [r7, #12]
 8001210:	b21b      	sxth	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	837b      	strh	r3, [r7, #26]
	
	/*3. ��ȡ H1_T0_OUT У��ֵ */
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, 0x3A, I2C_MEMADD_SIZE_8BIT, &buffer[0], 1, 0xFFFF);
 8001216:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800121a:	9302      	str	r3, [sp, #8]
 800121c:	2301      	movs	r3, #1
 800121e:	9301      	str	r3, [sp, #4]
 8001220:	f107 030c 	add.w	r3, r7, #12
 8001224:	9300      	str	r3, [sp, #0]
 8001226:	2301      	movs	r3, #1
 8001228:	223a      	movs	r2, #58	; 0x3a
 800122a:	21bf      	movs	r1, #191	; 0xbf
 800122c:	4842      	ldr	r0, [pc, #264]	; (8001338 <HTS221_Get_Humidity+0x1c0>)
 800122e:	f002 f84d 	bl	80032cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, 0x3B, I2C_MEMADD_SIZE_8BIT, &buffer[1], 1, 0xFFFF);
 8001232:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001236:	9302      	str	r3, [sp, #8]
 8001238:	2301      	movs	r3, #1
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	3301      	adds	r3, #1
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	223b      	movs	r2, #59	; 0x3b
 8001248:	21bf      	movs	r1, #191	; 0xbf
 800124a:	483b      	ldr	r0, [pc, #236]	; (8001338 <HTS221_Get_Humidity+0x1c0>)
 800124c:	f002 f83e 	bl	80032cc <HAL_I2C_Mem_Read>
	H1_T0_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 8001250:	7b7b      	ldrb	r3, [r7, #13]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	7b3b      	ldrb	r3, [r7, #12]
 8001258:	b21b      	sxth	r3, r3
 800125a:	4313      	orrs	r3, r2
 800125c:	833b      	strh	r3, [r7, #24]

	/*4. ����ת�����ȴ���ɺ��ȡת�����ֵ */
	HTS221_Start();
 800125e:	f7ff fe69 	bl	8000f34 <HTS221_Start>
	while(status_dat != 0x03)
 8001262:	e00d      	b.n	8001280 <HTS221_Get_Humidity+0x108>
	{
		HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, HTS221_STATUS_REG, I2C_MEMADD_SIZE_8BIT, &status_dat, 1, 0xFFFF);
 8001264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001268:	9302      	str	r3, [sp, #8]
 800126a:	2301      	movs	r3, #1
 800126c:	9301      	str	r3, [sp, #4]
 800126e:	f107 030f 	add.w	r3, r7, #15
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	2227      	movs	r2, #39	; 0x27
 8001278:	21bf      	movs	r1, #191	; 0xbf
 800127a:	482f      	ldr	r0, [pc, #188]	; (8001338 <HTS221_Get_Humidity+0x1c0>)
 800127c:	f002 f826 	bl	80032cc <HAL_I2C_Mem_Read>
	while(status_dat != 0x03)
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	2b03      	cmp	r3, #3
 8001284:	d1ee      	bne.n	8001264 <HTS221_Get_Humidity+0xec>
	}
	
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, HTS221_HUMIDITY_OUT_L, I2C_MEMADD_SIZE_8BIT, &buffer[0], 1, 0xFFFF);
 8001286:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800128a:	9302      	str	r3, [sp, #8]
 800128c:	2301      	movs	r3, #1
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	9300      	str	r3, [sp, #0]
 8001296:	2301      	movs	r3, #1
 8001298:	2228      	movs	r2, #40	; 0x28
 800129a:	21bf      	movs	r1, #191	; 0xbf
 800129c:	4826      	ldr	r0, [pc, #152]	; (8001338 <HTS221_Get_Humidity+0x1c0>)
 800129e:	f002 f815 	bl	80032cc <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c2, HTS221_ADDR_RD, HTS221_HUMIDITY_OUT_H, I2C_MEMADD_SIZE_8BIT, &buffer[1], 1, 0xFFFF);
 80012a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a6:	9302      	str	r3, [sp, #8]
 80012a8:	2301      	movs	r3, #1
 80012aa:	9301      	str	r3, [sp, #4]
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	3301      	adds	r3, #1
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2301      	movs	r3, #1
 80012b6:	2229      	movs	r2, #41	; 0x29
 80012b8:	21bf      	movs	r1, #191	; 0xbf
 80012ba:	481f      	ldr	r0, [pc, #124]	; (8001338 <HTS221_Get_Humidity+0x1c0>)
 80012bc:	f002 f806 	bl	80032cc <HAL_I2C_Mem_Read>
	H_T_out = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];
 80012c0:	7b7b      	ldrb	r3, [r7, #13]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	7b3b      	ldrb	r3, [r7, #12]
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	4313      	orrs	r3, r2
 80012cc:	82fb      	strh	r3, [r7, #22]

	/*5. ʹ�����Բ�ֵ������ʪ��ֵ RH [%] */
	tmp = ((int32_t)(H_T_out - H0_T0_out)) * ((int32_t)(H1_rh - H0_rh)*10);
 80012ce:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80012d2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80012dc:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80012e0:	1a8a      	subs	r2, r1, r2
 80012e2:	fb03 f202 	mul.w	r2, r3, r2
 80012e6:	4613      	mov	r3, r2
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	4413      	add	r3, r2
 80012ec:	005b      	lsls	r3, r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
	*humidity = (tmp/(H1_T0_out - H0_T0_out) + H0_rh*10);
 80012f0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80012f4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	fb92 f3f3 	sdiv	r3, r2, r3
 8001300:	b29a      	uxth	r2, r3
 8001302:	8bfb      	ldrh	r3, [r7, #30]
 8001304:	4619      	mov	r1, r3
 8001306:	0089      	lsls	r1, r1, #2
 8001308:	440b      	add	r3, r1
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	b29b      	uxth	r3, r3
 800130e:	4413      	add	r3, r2
 8001310:	b29b      	uxth	r3, r3
 8001312:	b21a      	sxth	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	801a      	strh	r2, [r3, #0]
	//ʪ����ֵ�˲�
	if(*humidity>1000)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800131e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001322:	dd03      	ble.n	800132c <HTS221_Get_Humidity+0x1b4>
	{		
		*humidity = 1000;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800132a:	801a      	strh	r2, [r3, #0]
	}
	
	return 0;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3720      	adds	r7, #32
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000340 	.word	0x20000340

0800133c <lcd_clock>:
uint8_t _lcd_line = 0;



void lcd_clock(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
    // Pulse clock
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 1);
 8001340:	2201      	movs	r2, #1
 8001342:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800134a:	f001 fdd5 	bl	8002ef8 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 800134e:	2001      	movs	r0, #1
 8001350:	f001 f9e6 	bl	8002720 <HAL_Delay>
    HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800135a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135e:	f001 fdcb 	bl	8002ef8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f001 f9dc 	bl	8002720 <HAL_Delay>
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <lcd_reset>:

void lcd_reset(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
    // Resets display from any state to 4-bit mode, first nibble.

    // Set everything low first
	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2104      	movs	r1, #4
 8001374:	4820      	ldr	r0, [pc, #128]	; (80013f8 <lcd_reset+0x8c>)
 8001376:	f001 fdbf 	bl	8002ef8 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2110      	movs	r1, #16
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001382:	f001 fdb9 	bl	8002ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8001386:	2200      	movs	r2, #0
 8001388:	2108      	movs	r1, #8
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f001 fdb3 	bl	8002ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2110      	movs	r1, #16
 8001396:	4818      	ldr	r0, [pc, #96]	; (80013f8 <lcd_reset+0x8c>)
 8001398:	f001 fdae 	bl	8002ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 800139c:	2200      	movs	r2, #0
 800139e:	2102      	movs	r1, #2
 80013a0:	4815      	ldr	r0, [pc, #84]	; (80013f8 <lcd_reset+0x8c>)
 80013a2:	f001 fda9 	bl	8002ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CLOCK_PORT, LCD_CLOCK, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013b0:	f001 fda2 	bl	8002ef8 <HAL_GPIO_WritePin>
    // from any setting

    // Write 0b0011 three times
    // (Everyday Practical Electronics says 3 times, Wikipedia says 2 times,
    // 3 seems to work better).
	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 80013b4:	2201      	movs	r2, #1
 80013b6:	2108      	movs	r1, #8
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013bc:	f001 fd9c 	bl	8002ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 80013c0:	2201      	movs	r2, #1
 80013c2:	2110      	movs	r1, #16
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <lcd_reset+0x8c>)
 80013c6:	f001 fd97 	bl	8002ef8 <HAL_GPIO_WritePin>
    lcd_clock();
 80013ca:	f7ff ffb7 	bl	800133c <lcd_clock>
    lcd_clock();
 80013ce:	f7ff ffb5 	bl	800133c <lcd_clock>
    lcd_clock();
 80013d2:	f7ff ffb3 	bl	800133c <lcd_clock>
    // LCD now guaranteed to be in 8-bit state
    // Now write 0b0010 (set to 4-bit mode, ready for first nibble)
    HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2108      	movs	r1, #8
 80013da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013de:	f001 fd8b 	bl	8002ef8 <HAL_GPIO_WritePin>
    lcd_clock();
 80013e2:	f7ff ffab 	bl	800133c <lcd_clock>

    HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 80013e6:	2201      	movs	r2, #1
 80013e8:	2104      	movs	r1, #4
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ee:	f001 fd83 	bl	8002ef8 <HAL_GPIO_WritePin>
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	48000400 	.word	0x48000400

080013fc <lcd_write>:
 * for proper masks to be calculated.
 * Aside from this, setting the RS bit seems to go wrong.
*/

void lcd_write(uint8_t byte, uint8_t rs)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	460a      	mov	r2, r1
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	4613      	mov	r3, r2
 800140a:	71bb      	strb	r3, [r7, #6]
    // Writes a byte to the display (rs must be either 0 or 1)
	//rs=0 comando;; rs=1 dato
    // Write second nibble and set RS

    if((byte >> 4 ) & 1)
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	b2db      	uxtb	r3, r3
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d006      	beq.n	8001428 <lcd_write+0x2c>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 800141a:	2201      	movs	r2, #1
 800141c:	2108      	movs	r1, #8
 800141e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001422:	f001 fd69 	bl	8002ef8 <HAL_GPIO_WritePin>
 8001426:	e005      	b.n	8001434 <lcd_write+0x38>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 8001428:	2200      	movs	r2, #0
 800142a:	2108      	movs	r1, #8
 800142c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001430:	f001 fd62 	bl	8002ef8 <HAL_GPIO_WritePin>

    if((byte >> 5 ) & 1)
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	095b      	lsrs	r3, r3, #5
 8001438:	b2db      	uxtb	r3, r3
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d005      	beq.n	800144e <lcd_write+0x52>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 8001442:	2201      	movs	r2, #1
 8001444:	2110      	movs	r1, #16
 8001446:	4847      	ldr	r0, [pc, #284]	; (8001564 <lcd_write+0x168>)
 8001448:	f001 fd56 	bl	8002ef8 <HAL_GPIO_WritePin>
 800144c:	e004      	b.n	8001458 <lcd_write+0x5c>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 800144e:	2200      	movs	r2, #0
 8001450:	2110      	movs	r1, #16
 8001452:	4844      	ldr	r0, [pc, #272]	; (8001564 <lcd_write+0x168>)
 8001454:	f001 fd50 	bl	8002ef8 <HAL_GPIO_WritePin>

    if((byte >> 6 ) & 1)
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	099b      	lsrs	r3, r3, #6
 800145c:	b2db      	uxtb	r3, r3
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d005      	beq.n	8001472 <lcd_write+0x76>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 8001466:	2201      	movs	r2, #1
 8001468:	2102      	movs	r1, #2
 800146a:	483e      	ldr	r0, [pc, #248]	; (8001564 <lcd_write+0x168>)
 800146c:	f001 fd44 	bl	8002ef8 <HAL_GPIO_WritePin>
 8001470:	e004      	b.n	800147c <lcd_write+0x80>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2102      	movs	r1, #2
 8001476:	483b      	ldr	r0, [pc, #236]	; (8001564 <lcd_write+0x168>)
 8001478:	f001 fd3e 	bl	8002ef8 <HAL_GPIO_WritePin>

    if((byte >> 7 ) & 1)
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	09db      	lsrs	r3, r3, #7
 8001480:	b2db      	uxtb	r3, r3
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <lcd_write+0x9c>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 800148a:	2201      	movs	r2, #1
 800148c:	2110      	movs	r1, #16
 800148e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001492:	f001 fd31 	bl	8002ef8 <HAL_GPIO_WritePin>
 8001496:	e005      	b.n	80014a4 <lcd_write+0xa8>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2110      	movs	r1, #16
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f001 fd2a 	bl	8002ef8 <HAL_GPIO_WritePin>

    if(rs)
 80014a4:	79bb      	ldrb	r3, [r7, #6]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d005      	beq.n	80014b6 <lcd_write+0xba>
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 1);
 80014aa:	2201      	movs	r2, #1
 80014ac:	2104      	movs	r1, #4
 80014ae:	482d      	ldr	r0, [pc, #180]	; (8001564 <lcd_write+0x168>)
 80014b0:	f001 fd22 	bl	8002ef8 <HAL_GPIO_WritePin>
 80014b4:	e004      	b.n	80014c0 <lcd_write+0xc4>
    else
    	HAL_GPIO_WritePin(RS_PORT, LCD_RS, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2104      	movs	r1, #4
 80014ba:	482a      	ldr	r0, [pc, #168]	; (8001564 <lcd_write+0x168>)
 80014bc:	f001 fd1c 	bl	8002ef8 <HAL_GPIO_WritePin>

    lcd_clock();
 80014c0:	f7ff ff3c 	bl	800133c <lcd_clock>

    // Write first nibble

    if(byte & 1)
 80014c4:	79fb      	ldrb	r3, [r7, #7]
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d006      	beq.n	80014dc <lcd_write+0xe0>
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 1);
 80014ce:	2201      	movs	r2, #1
 80014d0:	2108      	movs	r1, #8
 80014d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d6:	f001 fd0f 	bl	8002ef8 <HAL_GPIO_WritePin>
 80014da:	e005      	b.n	80014e8 <lcd_write+0xec>
    else
    	HAL_GPIO_WritePin(LCD_PORT4, LCD_4, 0);
 80014dc:	2200      	movs	r2, #0
 80014de:	2108      	movs	r1, #8
 80014e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e4:	f001 fd08 	bl	8002ef8 <HAL_GPIO_WritePin>

    if((byte >> 1 ) & 1)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	085b      	lsrs	r3, r3, #1
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d005      	beq.n	8001502 <lcd_write+0x106>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 1);
 80014f6:	2201      	movs	r2, #1
 80014f8:	2110      	movs	r1, #16
 80014fa:	481a      	ldr	r0, [pc, #104]	; (8001564 <lcd_write+0x168>)
 80014fc:	f001 fcfc 	bl	8002ef8 <HAL_GPIO_WritePin>
 8001500:	e004      	b.n	800150c <lcd_write+0x110>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_5, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2110      	movs	r1, #16
 8001506:	4817      	ldr	r0, [pc, #92]	; (8001564 <lcd_write+0x168>)
 8001508:	f001 fcf6 	bl	8002ef8 <HAL_GPIO_WritePin>

    if((byte >> 2 ) & 1)
 800150c:	79fb      	ldrb	r3, [r7, #7]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d005      	beq.n	8001526 <lcd_write+0x12a>
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 1);
 800151a:	2201      	movs	r2, #1
 800151c:	2102      	movs	r1, #2
 800151e:	4811      	ldr	r0, [pc, #68]	; (8001564 <lcd_write+0x168>)
 8001520:	f001 fcea 	bl	8002ef8 <HAL_GPIO_WritePin>
 8001524:	e004      	b.n	8001530 <lcd_write+0x134>
    else
    	HAL_GPIO_WritePin(LCD_PORT56, LCD_6, 0);
 8001526:	2200      	movs	r2, #0
 8001528:	2102      	movs	r1, #2
 800152a:	480e      	ldr	r0, [pc, #56]	; (8001564 <lcd_write+0x168>)
 800152c:	f001 fce4 	bl	8002ef8 <HAL_GPIO_WritePin>

    if((byte >> 3 ) & 1)
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	08db      	lsrs	r3, r3, #3
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	2b00      	cmp	r3, #0
 800153c:	d006      	beq.n	800154c <lcd_write+0x150>
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 1);
 800153e:	2201      	movs	r2, #1
 8001540:	2110      	movs	r1, #16
 8001542:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001546:	f001 fcd7 	bl	8002ef8 <HAL_GPIO_WritePin>
 800154a:	e005      	b.n	8001558 <lcd_write+0x15c>
    else
    	HAL_GPIO_WritePin(LCD_PORT7, LCD_7, 0);
 800154c:	2200      	movs	r2, #0
 800154e:	2110      	movs	r1, #16
 8001550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001554:	f001 fcd0 	bl	8002ef8 <HAL_GPIO_WritePin>

    lcd_clock();
 8001558:	f7ff fef0 	bl	800133c <lcd_clock>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	48000400 	.word	0x48000400

08001568 <lcd_clear>:

void lcd_clear(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
    // Clears display, resets cursor
    lcd_write(0b00000001, 0);
 800156c:	2100      	movs	r1, #0
 800156e:	2001      	movs	r0, #1
 8001570:	f7ff ff44 	bl	80013fc <lcd_write>
    _lcd_char = 0;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <lcd_clear+0x1c>)
 8001576:	2200      	movs	r2, #0
 8001578:	701a      	strb	r2, [r3, #0]
    _lcd_line = 0;
 800157a:	4b03      	ldr	r3, [pc, #12]	; (8001588 <lcd_clear+0x20>)
 800157c:	2200      	movs	r2, #0
 800157e:	701a      	strb	r2, [r3, #0]
}
 8001580:	bf00      	nop
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000304 	.word	0x20000304
 8001588:	20000305 	.word	0x20000305

0800158c <lcd_display_settings>:

void lcd_display_settings(uint8_t on, uint8_t underline, uint8_t blink)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	460b      	mov	r3, r1
 8001598:	71bb      	strb	r3, [r7, #6]
 800159a:	4613      	mov	r3, r2
 800159c:	717b      	strb	r3, [r7, #5]
    // "Display On/Off & Cursor" command. All parameters must be either 0 or 1

    lcd_write(0b00001000 | (on << 2) | (underline << 1) | blink, 0);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	b25b      	sxtb	r3, r3
 80015a4:	f043 0308 	orr.w	r3, r3, #8
 80015a8:	b25a      	sxtb	r2, r3
 80015aa:	79bb      	ldrb	r3, [r7, #6]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b25a      	sxtb	r2, r3
 80015b4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	2100      	movs	r1, #0
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff1b 	bl	80013fc <lcd_write>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <lcd_display_address>:

void lcd_display_address(uint8_t address)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	71fb      	strb	r3, [r7, #7]
    lcd_write(0b10000000 | address, 0);
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2100      	movs	r1, #0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff ff0a 	bl	80013fc <lcd_write>
}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <lcd_print>:
{
	lcd_write(0b01000000 | address, 0);
}

void lcd_print(char string[])
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b084      	sub	sp, #16
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
    uint8_t i;
    for(i = 0; string[i] != 0; i++) {
 80015f8:	2300      	movs	r3, #0
 80015fa:	73fb      	strb	r3, [r7, #15]
 80015fc:	e055      	b.n	80016aa <lcd_print+0xba>
        // If we know the display properties and a newline character is
        // present, print the rest of the string on the new line.
        if(lcd_lines && string[i] == '\n') {
 80015fe:	4b30      	ldr	r3, [pc, #192]	; (80016c0 <lcd_print+0xd0>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d01c      	beq.n	8001640 <lcd_print+0x50>
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b0a      	cmp	r3, #10
 8001610:	d116      	bne.n	8001640 <lcd_print+0x50>
            if(_lcd_line < lcd_lines) {
 8001612:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <lcd_print+0xd4>)
 8001614:	781a      	ldrb	r2, [r3, #0]
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <lcd_print+0xd0>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	429a      	cmp	r2, r3
 800161c:	d242      	bcs.n	80016a4 <lcd_print+0xb4>
                lcd_display_address(lcd_line_addresses[_lcd_line++]);
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <lcd_print+0xd8>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <lcd_print+0xd4>)
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	1c59      	adds	r1, r3, #1
 8001628:	b2c8      	uxtb	r0, r1
 800162a:	4926      	ldr	r1, [pc, #152]	; (80016c4 <lcd_print+0xd4>)
 800162c:	7008      	strb	r0, [r1, #0]
 800162e:	4413      	add	r3, r2
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ffcb 	bl	80015ce <lcd_display_address>
                _lcd_char = 0;
 8001638:	4b24      	ldr	r3, [pc, #144]	; (80016cc <lcd_print+0xdc>)
 800163a:	2200      	movs	r2, #0
 800163c:	701a      	strb	r2, [r3, #0]
            if(_lcd_line < lcd_lines) {
 800163e:	e031      	b.n	80016a4 <lcd_print+0xb4>
            }
        }
        else {
            // If we know the display properties and have reached the end of
            // line, print the rest on the next line
            if(lcd_chars)
 8001640:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <lcd_print+0xe0>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d01b      	beq.n	8001680 <lcd_print+0x90>
                if((_lcd_char == lcd_chars) && (_lcd_line < lcd_lines)) {
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <lcd_print+0xdc>)
 800164a:	781a      	ldrb	r2, [r3, #0]
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <lcd_print+0xe0>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	429a      	cmp	r2, r3
 8001652:	d115      	bne.n	8001680 <lcd_print+0x90>
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <lcd_print+0xd4>)
 8001656:	781a      	ldrb	r2, [r3, #0]
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <lcd_print+0xd0>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d20f      	bcs.n	8001680 <lcd_print+0x90>
                    lcd_display_address(lcd_line_addresses[_lcd_line++]);
 8001660:	4b19      	ldr	r3, [pc, #100]	; (80016c8 <lcd_print+0xd8>)
 8001662:	681a      	ldr	r2, [r3, #0]
 8001664:	4b17      	ldr	r3, [pc, #92]	; (80016c4 <lcd_print+0xd4>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	1c59      	adds	r1, r3, #1
 800166a:	b2c8      	uxtb	r0, r1
 800166c:	4915      	ldr	r1, [pc, #84]	; (80016c4 <lcd_print+0xd4>)
 800166e:	7008      	strb	r0, [r1, #0]
 8001670:	4413      	add	r3, r2
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ffaa 	bl	80015ce <lcd_display_address>
                    _lcd_char = 0;
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <lcd_print+0xdc>)
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
                }
            lcd_write(string[i], 1);
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	4413      	add	r3, r2
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	4618      	mov	r0, r3
 800168c:	f7ff feb6 	bl	80013fc <lcd_write>
            if(lcd_chars) _lcd_char++;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <lcd_print+0xe0>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d005      	beq.n	80016a4 <lcd_print+0xb4>
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <lcd_print+0xdc>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	3301      	adds	r3, #1
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b0a      	ldr	r3, [pc, #40]	; (80016cc <lcd_print+0xdc>)
 80016a2:	701a      	strb	r2, [r3, #0]
    for(i = 0; string[i] != 0; i++) {
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	3301      	adds	r3, #1
 80016a8:	73fb      	strb	r3, [r7, #15]
 80016aa:	7bfb      	ldrb	r3, [r7, #15]
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1a3      	bne.n	80015fe <lcd_print+0xe>
        }
    }
}
 80016b6:	bf00      	nop
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200002fd 	.word	0x200002fd
 80016c4:	20000305 	.word	0x20000305
 80016c8:	20000300 	.word	0x20000300
 80016cc:	20000304 	.word	0x20000304
 80016d0:	200002fc 	.word	0x200002fc

080016d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016da:	f000 ffac 	bl	8002636 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016de:	f000 f865 	bl	80017ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e2:	f000 fa5b 	bl	8001b9c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80016e6:	f000 f8c3 	bl	8001870 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80016ea:	f000 f8f9 	bl	80018e0 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80016ee:	f000 f937 	bl	8001960 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80016f2:	f000 f95b 	bl	80019ac <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80016f6:	f000 f9f1 	bl	8001adc <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80016fa:	f000 fa1f 	bl	8001b3c <MX_USART3_UART_Init>
  MX_USB_DEVICE_Init();
 80016fe:	f009 fc2f 	bl	800af60 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001702:	f000 f991 	bl	8001a28 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

lcd_reset();
 8001706:	f7ff fe31 	bl	800136c <lcd_reset>
lcd_display_settings(1,0,0);
 800170a:	2200      	movs	r2, #0
 800170c:	2100      	movs	r1, #0
 800170e:	2001      	movs	r0, #1
 8001710:	f7ff ff3c 	bl	800158c <lcd_display_settings>
lcd_clear();
 8001714:	f7ff ff28 	bl	8001568 <lcd_clear>
HAL_GPIO_WritePin(Led_LCD_GPIO_Port, Led_LCD_Pin, 1);
 8001718:	2201      	movs	r2, #1
 800171a:	2104      	movs	r1, #4
 800171c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001720:	f001 fbea 	bl	8002ef8 <HAL_GPIO_WritePin>
lcd_print("Fase6");
 8001724:	481e      	ldr	r0, [pc, #120]	; (80017a0 <main+0xcc>)
 8001726:	f7ff ff63 	bl	80015f0 <lcd_print>

HAL_Delay(5000);
 800172a:	f241 3088 	movw	r0, #5000	; 0x1388
 800172e:	f000 fff7 	bl	8002720 <HAL_Delay>

uint8_t dato[6];
USBD_LL_PrepareReceive(&hUsbDeviceFS, 1,dato, 6);
 8001732:	f107 0210 	add.w	r2, r7, #16
 8001736:	2306      	movs	r3, #6
 8001738:	2101      	movs	r1, #1
 800173a:	481a      	ldr	r0, [pc, #104]	; (80017a4 <main+0xd0>)
 800173c:	f00a f938 	bl	800b9b0 <USBD_LL_PrepareReceive>
uint8_t datoCiclo[6] = {115,101,116,114,0,0}; //setr ascii
 8001740:	4a19      	ldr	r2, [pc, #100]	; (80017a8 <main+0xd4>)
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	e892 0003 	ldmia.w	r2, {r0, r1}
 800174a:	6018      	str	r0, [r3, #0]
 800174c:	3304      	adds	r3, #4
 800174e:	8019      	strh	r1, [r3, #0]
char str[1];
int i;
int16_t lecturaTemp;
int16_t lecturaHum;
HTS221_Init();
 8001750:	f7ff fba8 	bl	8000ea4 <HTS221_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
HTS221_Get_Humidity(&lecturaHum);
 8001754:	463b      	mov	r3, r7
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff fd0e 	bl	8001178 <HTS221_Get_Humidity>
HTS221_Get_Temperature(&lecturaTemp);
 800175c:	1cbb      	adds	r3, r7, #2
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fc12 	bl	8000f88 <HTS221_Get_Temperature>

dato[0]= lecturaHum;
 8001764:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	743b      	strb	r3, [r7, #16]
dato[1]= lecturaHum>>8;
 800176c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001770:	121b      	asrs	r3, r3, #8
 8001772:	b21b      	sxth	r3, r3
 8001774:	b2db      	uxtb	r3, r3
 8001776:	747b      	strb	r3, [r7, #17]

dato[2]= lecturaTemp;
 8001778:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800177c:	b2db      	uxtb	r3, r3
 800177e:	74bb      	strb	r3, [r7, #18]
dato[3]= lecturaTemp>>8;
 8001780:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001784:	121b      	asrs	r3, r3, #8
 8001786:	b21b      	sxth	r3, r3
 8001788:	b2db      	uxtb	r3, r3
 800178a:	74fb      	strb	r3, [r7, #19]




//enviamos esta cadena  para saber que se ha terminado el ciclo
USBD_CUSTOM_HID_SendReport_FS(dato,6);
 800178c:	f107 0310 	add.w	r3, r7, #16
 8001790:	2106      	movs	r1, #6
 8001792:	4618      	mov	r0, r3
 8001794:	f009 fc38 	bl	800b008 <USBD_CUSTOM_HID_SendReport_FS>
HAL_Delay(100);
 8001798:	2064      	movs	r0, #100	; 0x64
 800179a:	f000 ffc1 	bl	8002720 <HAL_Delay>
  {
 800179e:	e7d9      	b.n	8001754 <main+0x80>
 80017a0:	0800e460 	.word	0x0800e460
 80017a4:	200005cc 	.word	0x200005cc
 80017a8:	0800e468 	.word	0x0800e468

080017ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b096      	sub	sp, #88	; 0x58
 80017b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017b2:	f107 0314 	add.w	r3, r7, #20
 80017b6:	2244      	movs	r2, #68	; 0x44
 80017b8:	2100      	movs	r1, #0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00a fef5 	bl	800c5aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017c0:	463b      	mov	r3, r7
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017ce:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017d2:	f003 fb91 	bl	8004ef8 <HAL_PWREx_ControlVoltageScaling>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80017dc:	f000 fb62 	bl	8001ea4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80017e0:	f003 fb6c 	bl	8004ebc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80017e4:	4b21      	ldr	r3, [pc, #132]	; (800186c <SystemClock_Config+0xc0>)
 80017e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ea:	4a20      	ldr	r2, [pc, #128]	; (800186c <SystemClock_Config+0xc0>)
 80017ec:	f023 0318 	bic.w	r3, r3, #24
 80017f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80017f4:	2314      	movs	r3, #20
 80017f6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017f8:	2301      	movs	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017fc:	2301      	movs	r3, #1
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001800:	2300      	movs	r3, #0
 8001802:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001804:	2360      	movs	r3, #96	; 0x60
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001808:	2302      	movs	r3, #2
 800180a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800180c:	2301      	movs	r3, #1
 800180e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001810:	2301      	movs	r3, #1
 8001812:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001814:	2328      	movs	r3, #40	; 0x28
 8001816:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001818:	2307      	movs	r3, #7
 800181a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800181c:	2302      	movs	r3, #2
 800181e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001820:	2302      	movs	r3, #2
 8001822:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4618      	mov	r0, r3
 800182a:	f003 fc87 	bl	800513c <HAL_RCC_OscConfig>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001834:	f000 fb36 	bl	8001ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001838:	230f      	movs	r3, #15
 800183a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800183c:	2303      	movs	r3, #3
 800183e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001840:	2300      	movs	r3, #0
 8001842:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001844:	2300      	movs	r3, #0
 8001846:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800184c:	463b      	mov	r3, r7
 800184e:	2104      	movs	r1, #4
 8001850:	4618      	mov	r0, r3
 8001852:	f004 f84f 	bl	80058f4 <HAL_RCC_ClockConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800185c:	f000 fb22 	bl	8001ea4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001860:	f004 fd56 	bl	8006310 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001864:	bf00      	nop
 8001866:	3758      	adds	r7, #88	; 0x58
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	40021000 	.word	0x40021000

08001870 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <MX_DFSDM1_Init+0x68>)
 8001876:	4a19      	ldr	r2, [pc, #100]	; (80018dc <MX_DFSDM1_Init+0x6c>)
 8001878:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <MX_DFSDM1_Init+0x68>)
 800187c:	2201      	movs	r2, #1
 800187e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <MX_DFSDM1_Init+0x68>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8001886:	4b14      	ldr	r3, [pc, #80]	; (80018d8 <MX_DFSDM1_Init+0x68>)
 8001888:	2202      	movs	r2, #2
 800188a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800188c:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <MX_DFSDM1_Init+0x68>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001892:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <MX_DFSDM1_Init+0x68>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <MX_DFSDM1_Init+0x68>)
 800189a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800189e:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80018a0:	4b0d      	ldr	r3, [pc, #52]	; (80018d8 <MX_DFSDM1_Init+0x68>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80018a6:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <MX_DFSDM1_Init+0x68>)
 80018a8:	2204      	movs	r2, #4
 80018aa:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <MX_DFSDM1_Init+0x68>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80018b2:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <MX_DFSDM1_Init+0x68>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80018b8:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <MX_DFSDM1_Init+0x68>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80018be:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <MX_DFSDM1_Init+0x68>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80018c4:	4804      	ldr	r0, [pc, #16]	; (80018d8 <MX_DFSDM1_Init+0x68>)
 80018c6:	f001 f861 	bl	800298c <HAL_DFSDM_ChannelInit>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 80018d0:	f000 fae8 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000308 	.word	0x20000308
 80018dc:	40016020 	.word	0x40016020

080018e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <MX_I2C2_Init+0x74>)
 80018e6:	4a1c      	ldr	r2, [pc, #112]	; (8001958 <MX_I2C2_Init+0x78>)
 80018e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <MX_I2C2_Init+0x74>)
 80018ec:	4a1b      	ldr	r2, [pc, #108]	; (800195c <MX_I2C2_Init+0x7c>)
 80018ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <MX_I2C2_Init+0x74>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f6:	4b17      	ldr	r3, [pc, #92]	; (8001954 <MX_I2C2_Init+0x74>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <MX_I2C2_Init+0x74>)
 80018fe:	2200      	movs	r2, #0
 8001900:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <MX_I2C2_Init+0x74>)
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_I2C2_Init+0x74>)
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_I2C2_Init+0x74>)
 8001910:	2200      	movs	r2, #0
 8001912:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_I2C2_Init+0x74>)
 8001916:	2200      	movs	r2, #0
 8001918:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800191a:	480e      	ldr	r0, [pc, #56]	; (8001954 <MX_I2C2_Init+0x74>)
 800191c:	f001 fb27 	bl	8002f6e <HAL_I2C_Init>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001926:	f000 fabd 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800192a:	2100      	movs	r1, #0
 800192c:	4809      	ldr	r0, [pc, #36]	; (8001954 <MX_I2C2_Init+0x74>)
 800192e:	f002 f89f 	bl	8003a70 <HAL_I2CEx_ConfigAnalogFilter>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001938:	f000 fab4 	bl	8001ea4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800193c:	2100      	movs	r1, #0
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_I2C2_Init+0x74>)
 8001940:	f002 f8e1 	bl	8003b06 <HAL_I2CEx_ConfigDigitalFilter>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800194a:	f000 faab 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000340 	.word	0x20000340
 8001958:	40005800 	.word	0x40005800
 800195c:	10909cec 	.word	0x10909cec

08001960 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_QUADSPI_Init+0x44>)
 8001966:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <MX_QUADSPI_Init+0x48>)
 8001968:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_QUADSPI_Init+0x44>)
 800196c:	2202      	movs	r2, #2
 800196e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_QUADSPI_Init+0x44>)
 8001972:	2204      	movs	r2, #4
 8001974:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_QUADSPI_Init+0x44>)
 8001978:	2210      	movs	r2, #16
 800197a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_QUADSPI_Init+0x44>)
 800197e:	2217      	movs	r2, #23
 8001980:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_QUADSPI_Init+0x44>)
 8001984:	2200      	movs	r2, #0
 8001986:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_QUADSPI_Init+0x44>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_QUADSPI_Init+0x44>)
 8001990:	f003 fb18 	bl	8004fc4 <HAL_QSPI_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800199a:	f000 fa83 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000394 	.word	0x20000394
 80019a8:	a0001000 	.word	0xa0001000

080019ac <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <MX_SPI3_Init+0x74>)
 80019b2:	4a1c      	ldr	r2, [pc, #112]	; (8001a24 <MX_SPI3_Init+0x78>)
 80019b4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80019b6:	4b1a      	ldr	r3, [pc, #104]	; (8001a20 <MX_SPI3_Init+0x74>)
 80019b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019bc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <MX_SPI3_Init+0x74>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <MX_SPI3_Init+0x74>)
 80019c6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80019ca:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_SPI3_Init+0x74>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <MX_SPI3_Init+0x74>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_SPI3_Init+0x74>)
 80019da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019de:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_SPI3_Init+0x74>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_SPI3_Init+0x74>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ec:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_SPI3_Init+0x74>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <MX_SPI3_Init+0x74>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80019f8:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_SPI3_Init+0x74>)
 80019fa:	2207      	movs	r2, #7
 80019fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <MX_SPI3_Init+0x74>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a04:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_SPI3_Init+0x74>)
 8001a06:	2208      	movs	r2, #8
 8001a08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001a0a:	4805      	ldr	r0, [pc, #20]	; (8001a20 <MX_SPI3_Init+0x74>)
 8001a0c:	f004 fe62 	bl	80066d4 <HAL_SPI_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001a16:	f000 fa45 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200003d8 	.word	0x200003d8
 8001a24:	40003c00 	.word	0x40003c00

08001a28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	; 0x28
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
 8001a46:	611a      	str	r2, [r3, #16]
 8001a48:	615a      	str	r2, [r3, #20]
 8001a4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a4c:	4b22      	ldr	r3, [pc, #136]	; (8001ad8 <MX_TIM2_Init+0xb0>)
 8001a4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a54:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <MX_TIM2_Init+0xb0>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <MX_TIM2_Init+0xb0>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8001a60:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <MX_TIM2_Init+0xb0>)
 8001a62:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001a66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	; (8001ad8 <MX_TIM2_Init+0xb0>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a6e:	4b1a      	ldr	r3, [pc, #104]	; (8001ad8 <MX_TIM2_Init+0xb0>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a74:	4818      	ldr	r0, [pc, #96]	; (8001ad8 <MX_TIM2_Init+0xb0>)
 8001a76:	f004 fed0 	bl	800681a <HAL_TIM_PWM_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001a80:	f000 fa10 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a8c:	f107 031c 	add.w	r3, r7, #28
 8001a90:	4619      	mov	r1, r3
 8001a92:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <MX_TIM2_Init+0xb0>)
 8001a94:	f005 fb9c 	bl	80071d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001a9e:	f000 fa01 	bl	8001ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aa2:	2360      	movs	r3, #96	; 0x60
 8001aa4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ab2:	463b      	mov	r3, r7
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	4807      	ldr	r0, [pc, #28]	; (8001ad8 <MX_TIM2_Init+0xb0>)
 8001aba:	f004 ff05 	bl	80068c8 <HAL_TIM_PWM_ConfigChannel>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001ac4:	f000 f9ee 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ac8:	4803      	ldr	r0, [pc, #12]	; (8001ad8 <MX_TIM2_Init+0xb0>)
 8001aca:	f000 fb7d 	bl	80021c8 <HAL_TIM_MspPostInit>

}
 8001ace:	bf00      	nop
 8001ad0:	3728      	adds	r7, #40	; 0x28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000043c 	.word	0x2000043c

08001adc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001ae2:	4a15      	ldr	r2, [pc, #84]	; (8001b38 <MX_USART1_UART_Init+0x5c>)
 8001ae4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001b02:	220c      	movs	r2, #12
 8001b04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_USART1_UART_Init+0x58>)
 8001b20:	f005 fbde 	bl	80072e0 <HAL_UART_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001b2a:	f000 f9bb 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000488 	.word	0x20000488
 8001b38:	40013800 	.word	0x40013800

08001b3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b42:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <MX_USART3_UART_Init+0x5c>)
 8001b44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b62:	220c      	movs	r2, #12
 8001b64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b80:	f005 fbae 	bl	80072e0 <HAL_UART_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b8a:	f000 f98b 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000510 	.word	0x20000510
 8001b98:	40004800 	.word	0x40004800

08001b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08a      	sub	sp, #40	; 0x28
 8001ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba2:	f107 0314 	add.w	r3, r7, #20
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bb2:	4bb7      	ldr	r3, [pc, #732]	; (8001e90 <MX_GPIO_Init+0x2f4>)
 8001bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb6:	4ab6      	ldr	r2, [pc, #728]	; (8001e90 <MX_GPIO_Init+0x2f4>)
 8001bb8:	f043 0310 	orr.w	r3, r3, #16
 8001bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bbe:	4bb4      	ldr	r3, [pc, #720]	; (8001e90 <MX_GPIO_Init+0x2f4>)
 8001bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	613b      	str	r3, [r7, #16]
 8001bc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bca:	4bb1      	ldr	r3, [pc, #708]	; (8001e90 <MX_GPIO_Init+0x2f4>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bce:	4ab0      	ldr	r2, [pc, #704]	; (8001e90 <MX_GPIO_Init+0x2f4>)
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd6:	4bae      	ldr	r3, [pc, #696]	; (8001e90 <MX_GPIO_Init+0x2f4>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	4bab      	ldr	r3, [pc, #684]	; (8001e90 <MX_GPIO_Init+0x2f4>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be6:	4aaa      	ldr	r2, [pc, #680]	; (8001e90 <MX_GPIO_Init+0x2f4>)
 8001be8:	f043 0301 	orr.w	r3, r3, #1
 8001bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bee:	4ba8      	ldr	r3, [pc, #672]	; (8001e90 <MX_GPIO_Init+0x2f4>)
 8001bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	4ba5      	ldr	r3, [pc, #660]	; (8001e90 <MX_GPIO_Init+0x2f4>)
 8001bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfe:	4aa4      	ldr	r2, [pc, #656]	; (8001e90 <MX_GPIO_Init+0x2f4>)
 8001c00:	f043 0302 	orr.w	r3, r3, #2
 8001c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c06:	4ba2      	ldr	r3, [pc, #648]	; (8001e90 <MX_GPIO_Init+0x2f4>)
 8001c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c12:	4b9f      	ldr	r3, [pc, #636]	; (8001e90 <MX_GPIO_Init+0x2f4>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	4a9e      	ldr	r2, [pc, #632]	; (8001e90 <MX_GPIO_Init+0x2f4>)
 8001c18:	f043 0308 	orr.w	r3, r3, #8
 8001c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1e:	4b9c      	ldr	r3, [pc, #624]	; (8001e90 <MX_GPIO_Init+0x2f4>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	f003 0308 	and.w	r3, r3, #8
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001c30:	4898      	ldr	r0, [pc, #608]	; (8001e94 <MX_GPIO_Init+0x2f8>)
 8001c32:	f001 f961 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001c36:	2200      	movs	r2, #0
 8001c38:	f248 111c 	movw	r1, #33052	; 0x811c
 8001c3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c40:	f001 f95a 	bl	8002ef8 <HAL_GPIO_WritePin>
                          |E_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001c44:	2200      	movs	r2, #0
 8001c46:	f24f 0116 	movw	r1, #61462	; 0xf016
 8001c4a:	4893      	ldr	r0, [pc, #588]	; (8001e98 <MX_GPIO_Init+0x2fc>)
 8001c4c:	f001 f954 	bl	8002ef8 <HAL_GPIO_WritePin>
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001c50:	2200      	movs	r2, #0
 8001c52:	f241 0181 	movw	r1, #4225	; 0x1081
 8001c56:	4891      	ldr	r0, [pc, #580]	; (8001e9c <MX_GPIO_Init+0x300>)
 8001c58:	f001 f94e 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c62:	488e      	ldr	r0, [pc, #568]	; (8001e9c <MX_GPIO_Init+0x300>)
 8001c64:	f001 f948 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001c6e:	488c      	ldr	r0, [pc, #560]	; (8001ea0 <MX_GPIO_Init+0x304>)
 8001c70:	f001 f942 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001c74:	2201      	movs	r2, #1
 8001c76:	2120      	movs	r1, #32
 8001c78:	4887      	ldr	r0, [pc, #540]	; (8001e98 <MX_GPIO_Init+0x2fc>)
 8001c7a:	f001 f93d 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001c7e:	2201      	movs	r2, #1
 8001c80:	2101      	movs	r1, #1
 8001c82:	4884      	ldr	r0, [pc, #528]	; (8001e94 <MX_GPIO_Init+0x2f8>)
 8001c84:	f001 f938 	bl	8002ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001c88:	f240 1315 	movw	r3, #277	; 0x115
 8001c8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	487c      	ldr	r0, [pc, #496]	; (8001e94 <MX_GPIO_Init+0x2f8>)
 8001ca2:	f000 ff7f 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001ca6:	236a      	movs	r3, #106	; 0x6a
 8001ca8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001caa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4876      	ldr	r0, [pc, #472]	; (8001e94 <MX_GPIO_Init+0x2f8>)
 8001cbc:	f000 ff72 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001cc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001cc6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4872      	ldr	r0, [pc, #456]	; (8001ea0 <MX_GPIO_Init+0x304>)
 8001cd8:	f000 ff64 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001cdc:	233f      	movs	r3, #63	; 0x3f
 8001cde:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001ce0:	230b      	movs	r3, #11
 8001ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	4619      	mov	r1, r3
 8001cee:	486c      	ldr	r0, [pc, #432]	; (8001ea0 <MX_GPIO_Init+0x304>)
 8001cf0:	f000 ff58 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d00:	2303      	movs	r3, #3
 8001d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d04:	2308      	movs	r3, #8
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d08:	f107 0314 	add.w	r3, r7, #20
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d12:	f000 ff47 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Led_LCD_Pin D4_LCD_Pin D7_LCD_Pin SPBTLE_RF_RST_Pin
                           E_LCD_Pin */
  GPIO_InitStruct.Pin = Led_LCD_Pin|D4_LCD_Pin|D7_LCD_Pin|SPBTLE_RF_RST_Pin
 8001d16:	f248 131c 	movw	r3, #33052	; 0x811c
 8001d1a:	617b      	str	r3, [r7, #20]
                          |E_LCD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d20:	2300      	movs	r3, #0
 8001d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d24:	2300      	movs	r3, #0
 8001d26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d32:	f000 ff37 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8001d36:	23c0      	movs	r3, #192	; 0xc0
 8001d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d46:	2305      	movs	r3, #5
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4a:	f107 0314 	add.w	r3, r7, #20
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d54:	f000 ff26 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d5c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001d66:	f107 0314 	add.w	r3, r7, #20
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	484a      	ldr	r0, [pc, #296]	; (8001e98 <MX_GPIO_Init+0x2fc>)
 8001d6e:	f000 ff19 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_LCD_Pin RS_LCD_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin
                           LED2_Pin SPSGRF_915_SDN_Pin D5_LCD_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = D6_LCD_Pin|RS_LCD_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin
 8001d72:	f24f 0336 	movw	r3, #61494	; 0xf036
 8001d76:	617b      	str	r3, [r7, #20]
                          |LED2_Pin|SPSGRF_915_SDN_Pin|D5_LCD_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4843      	ldr	r0, [pc, #268]	; (8001e98 <MX_GPIO_Init+0x2fc>)
 8001d8c:	f000 ff0a 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001d90:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001d94:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	4619      	mov	r1, r3
 8001da6:	483d      	ldr	r0, [pc, #244]	; (8001e9c <MX_GPIO_Init+0x300>)
 8001da8:	f000 fefc 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001dac:	f243 0381 	movw	r3, #12417	; 0x3081
 8001db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db2:	2301      	movs	r3, #1
 8001db4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4835      	ldr	r0, [pc, #212]	; (8001e9c <MX_GPIO_Init+0x300>)
 8001dc6:	f000 feed 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001dca:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	482f      	ldr	r0, [pc, #188]	; (8001ea0 <MX_GPIO_Init+0x304>)
 8001de4:	f000 fede 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001de8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001dee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4828      	ldr	r0, [pc, #160]	; (8001ea0 <MX_GPIO_Init+0x304>)
 8001e00:	f000 fed0 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001e04:	2302      	movs	r3, #2
 8001e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e14:	2305      	movs	r3, #5
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	481f      	ldr	r0, [pc, #124]	; (8001e9c <MX_GPIO_Init+0x300>)
 8001e20:	f000 fec0 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001e24:	2378      	movs	r3, #120	; 0x78
 8001e26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e34:	2307      	movs	r3, #7
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e38:	f107 0314 	add.w	r3, r7, #20
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4817      	ldr	r0, [pc, #92]	; (8001e9c <MX_GPIO_Init+0x300>)
 8001e40:	f000 feb0 	bl	8002ba4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001e44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e4a:	2312      	movs	r3, #18
 8001e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e52:	2303      	movs	r3, #3
 8001e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e56:	2304      	movs	r3, #4
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	480d      	ldr	r0, [pc, #52]	; (8001e98 <MX_GPIO_Init+0x2fc>)
 8001e62:	f000 fe9f 	bl	8002ba4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	2100      	movs	r1, #0
 8001e6a:	2017      	movs	r0, #23
 8001e6c:	f000 fd57 	bl	800291e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e70:	2017      	movs	r0, #23
 8001e72:	f000 fd70 	bl	8002956 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2028      	movs	r0, #40	; 0x28
 8001e7c:	f000 fd4f 	bl	800291e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e80:	2028      	movs	r0, #40	; 0x28
 8001e82:	f000 fd68 	bl	8002956 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40021000 	.word	0x40021000
 8001e94:	48001000 	.word	0x48001000
 8001e98:	48000400 	.word	0x48000400
 8001e9c:	48000c00 	.word	0x48000c00
 8001ea0:	48000800 	.word	0x48000800

08001ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea8:	b672      	cpsid	i
}
 8001eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eac:	e7fe      	b.n	8001eac <Error_Handler+0x8>
	...

08001eb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	4b0f      	ldr	r3, [pc, #60]	; (8001ef4 <HAL_MspInit+0x44>)
 8001eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eba:	4a0e      	ldr	r2, [pc, #56]	; (8001ef4 <HAL_MspInit+0x44>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ec2:	4b0c      	ldr	r3, [pc, #48]	; (8001ef4 <HAL_MspInit+0x44>)
 8001ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <HAL_MspInit+0x44>)
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	4a08      	ldr	r2, [pc, #32]	; (8001ef4 <HAL_MspInit+0x44>)
 8001ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <HAL_MspInit+0x44>)
 8001edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	40021000 	.word	0x40021000

08001ef8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b0ac      	sub	sp, #176	; 0xb0
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2288      	movs	r2, #136	; 0x88
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f00a fb46 	bl	800c5aa <memset>
  if(DFSDM1_Init == 0)
 8001f1e:	4b25      	ldr	r3, [pc, #148]	; (8001fb4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d142      	bne.n	8001fac <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001f26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f32:	f107 0314 	add.w	r3, r7, #20
 8001f36:	4618      	mov	r0, r3
 8001f38:	f003 ff00 	bl	8005d3c <HAL_RCCEx_PeriphCLKConfig>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001f42:	f7ff ffaf 	bl	8001ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001f46:	4b1c      	ldr	r3, [pc, #112]	; (8001fb8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4a:	4a1b      	ldr	r2, [pc, #108]	; (8001fb8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001f4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f50:	6613      	str	r3, [r2, #96]	; 0x60
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f5e:	4b16      	ldr	r3, [pc, #88]	; (8001fb8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	4a15      	ldr	r2, [pc, #84]	; (8001fb8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001f64:	f043 0310 	orr.w	r3, r3, #16
 8001f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f6a:	4b13      	ldr	r3, [pc, #76]	; (8001fb8 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	f003 0310 	and.w	r3, r3, #16
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001f76:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001f7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001f90:	2306      	movs	r3, #6
 8001f92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f96:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	4807      	ldr	r0, [pc, #28]	; (8001fbc <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001f9e:	f000 fe01 	bl	8002ba4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001fa2:	4b04      	ldr	r3, [pc, #16]	; (8001fb4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	4a02      	ldr	r2, [pc, #8]	; (8001fb4 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001faa:	6013      	str	r3, [r2, #0]
  }

}
 8001fac:	bf00      	nop
 8001fae:	37b0      	adds	r7, #176	; 0xb0
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	20000598 	.word	0x20000598
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	48001000 	.word	0x48001000

08001fc0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b0ac      	sub	sp, #176	; 0xb0
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	2288      	movs	r2, #136	; 0x88
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f00a fae2 	bl	800c5aa <memset>
  if(hi2c->Instance==I2C2)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a21      	ldr	r2, [pc, #132]	; (8002070 <HAL_I2C_MspInit+0xb0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d13b      	bne.n	8002068 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001ff0:	2380      	movs	r3, #128	; 0x80
 8001ff2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff8:	f107 0314 	add.w	r3, r7, #20
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f003 fe9d 	bl	8005d3c <HAL_RCCEx_PeriphCLKConfig>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002008:	f7ff ff4c 	bl	8001ea4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_I2C_MspInit+0xb4>)
 800200e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002010:	4a18      	ldr	r2, [pc, #96]	; (8002074 <HAL_I2C_MspInit+0xb4>)
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002018:	4b16      	ldr	r3, [pc, #88]	; (8002074 <HAL_I2C_MspInit+0xb4>)
 800201a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8002024:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002028:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202c:	2312      	movs	r3, #18
 800202e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002032:	2301      	movs	r3, #1
 8002034:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800203e:	2304      	movs	r3, #4
 8002040:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002044:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002048:	4619      	mov	r1, r3
 800204a:	480b      	ldr	r0, [pc, #44]	; (8002078 <HAL_I2C_MspInit+0xb8>)
 800204c:	f000 fdaa 	bl	8002ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <HAL_I2C_MspInit+0xb4>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	4a07      	ldr	r2, [pc, #28]	; (8002074 <HAL_I2C_MspInit+0xb4>)
 8002056:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800205a:	6593      	str	r3, [r2, #88]	; 0x58
 800205c:	4b05      	ldr	r3, [pc, #20]	; (8002074 <HAL_I2C_MspInit+0xb4>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002068:	bf00      	nop
 800206a:	37b0      	adds	r7, #176	; 0xb0
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40005800 	.word	0x40005800
 8002074:	40021000 	.word	0x40021000
 8002078:	48000400 	.word	0x48000400

0800207c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a17      	ldr	r2, [pc, #92]	; (80020f8 <HAL_QSPI_MspInit+0x7c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d128      	bne.n	80020f0 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800209e:	4b17      	ldr	r3, [pc, #92]	; (80020fc <HAL_QSPI_MspInit+0x80>)
 80020a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020a2:	4a16      	ldr	r2, [pc, #88]	; (80020fc <HAL_QSPI_MspInit+0x80>)
 80020a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a8:	6513      	str	r3, [r2, #80]	; 0x50
 80020aa:	4b14      	ldr	r3, [pc, #80]	; (80020fc <HAL_QSPI_MspInit+0x80>)
 80020ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <HAL_QSPI_MspInit+0x80>)
 80020b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ba:	4a10      	ldr	r2, [pc, #64]	; (80020fc <HAL_QSPI_MspInit+0x80>)
 80020bc:	f043 0310 	orr.w	r3, r3, #16
 80020c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <HAL_QSPI_MspInit+0x80>)
 80020c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c6:	f003 0310 	and.w	r3, r3, #16
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80020ce:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80020d2:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80020e0:	230a      	movs	r3, #10
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	4805      	ldr	r0, [pc, #20]	; (8002100 <HAL_QSPI_MspInit+0x84>)
 80020ec:	f000 fd5a 	bl	8002ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80020f0:	bf00      	nop
 80020f2:	3728      	adds	r7, #40	; 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	a0001000 	.word	0xa0001000
 80020fc:	40021000 	.word	0x40021000
 8002100:	48001000 	.word	0x48001000

08002104 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a17      	ldr	r2, [pc, #92]	; (8002180 <HAL_SPI_MspInit+0x7c>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d128      	bne.n	8002178 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002126:	4b17      	ldr	r3, [pc, #92]	; (8002184 <HAL_SPI_MspInit+0x80>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	4a16      	ldr	r2, [pc, #88]	; (8002184 <HAL_SPI_MspInit+0x80>)
 800212c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002130:	6593      	str	r3, [r2, #88]	; 0x58
 8002132:	4b14      	ldr	r3, [pc, #80]	; (8002184 <HAL_SPI_MspInit+0x80>)
 8002134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002136:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800213a:	613b      	str	r3, [r7, #16]
 800213c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <HAL_SPI_MspInit+0x80>)
 8002140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002142:	4a10      	ldr	r2, [pc, #64]	; (8002184 <HAL_SPI_MspInit+0x80>)
 8002144:	f043 0304 	orr.w	r3, r3, #4
 8002148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <HAL_SPI_MspInit+0x80>)
 800214c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214e:	f003 0304 	and.w	r3, r3, #4
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8002156:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800215a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002164:	2303      	movs	r3, #3
 8002166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002168:	2306      	movs	r3, #6
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216c:	f107 0314 	add.w	r3, r7, #20
 8002170:	4619      	mov	r1, r3
 8002172:	4805      	ldr	r0, [pc, #20]	; (8002188 <HAL_SPI_MspInit+0x84>)
 8002174:	f000 fd16 	bl	8002ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002178:	bf00      	nop
 800217a:	3728      	adds	r7, #40	; 0x28
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40003c00 	.word	0x40003c00
 8002184:	40021000 	.word	0x40021000
 8002188:	48000800 	.word	0x48000800

0800218c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800219c:	d10b      	bne.n	80021b6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_TIM_PWM_MspInit+0x38>)
 80021a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a2:	4a08      	ldr	r2, [pc, #32]	; (80021c4 <HAL_TIM_PWM_MspInit+0x38>)
 80021a4:	f043 0301 	orr.w	r3, r3, #1
 80021a8:	6593      	str	r3, [r2, #88]	; 0x58
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_TIM_PWM_MspInit+0x38>)
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021b6:	bf00      	nop
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000

080021c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 030c 	add.w	r3, r7, #12
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e8:	d11c      	bne.n	8002224 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	4b10      	ldr	r3, [pc, #64]	; (800222c <HAL_TIM_MspPostInit+0x64>)
 80021ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ee:	4a0f      	ldr	r2, [pc, #60]	; (800222c <HAL_TIM_MspPostInit+0x64>)
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021f6:	4b0d      	ldr	r3, [pc, #52]	; (800222c <HAL_TIM_MspPostInit+0x64>)
 80021f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
 8002200:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002202:	2320      	movs	r3, #32
 8002204:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002206:	2302      	movs	r3, #2
 8002208:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002212:	2301      	movs	r3, #1
 8002214:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002216:	f107 030c 	add.w	r3, r7, #12
 800221a:	4619      	mov	r1, r3
 800221c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002220:	f000 fcc0 	bl	8002ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002224:	bf00      	nop
 8002226:	3720      	adds	r7, #32
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000

08002230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b0ae      	sub	sp, #184	; 0xb8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002238:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800223c:	2200      	movs	r2, #0
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	605a      	str	r2, [r3, #4]
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	60da      	str	r2, [r3, #12]
 8002246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	2288      	movs	r2, #136	; 0x88
 800224e:	2100      	movs	r1, #0
 8002250:	4618      	mov	r0, r3
 8002252:	f00a f9aa 	bl	800c5aa <memset>
  if(huart->Instance==USART1)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a42      	ldr	r2, [pc, #264]	; (8002364 <HAL_UART_MspInit+0x134>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d13b      	bne.n	80022d8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002260:	2301      	movs	r3, #1
 8002262:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002264:	2300      	movs	r3, #0
 8002266:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	4618      	mov	r0, r3
 800226e:	f003 fd65 	bl	8005d3c <HAL_RCCEx_PeriphCLKConfig>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002278:	f7ff fe14 	bl	8001ea4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800227c:	4b3a      	ldr	r3, [pc, #232]	; (8002368 <HAL_UART_MspInit+0x138>)
 800227e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002280:	4a39      	ldr	r2, [pc, #228]	; (8002368 <HAL_UART_MspInit+0x138>)
 8002282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002286:	6613      	str	r3, [r2, #96]	; 0x60
 8002288:	4b37      	ldr	r3, [pc, #220]	; (8002368 <HAL_UART_MspInit+0x138>)
 800228a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800228c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002290:	61bb      	str	r3, [r7, #24]
 8002292:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002294:	4b34      	ldr	r3, [pc, #208]	; (8002368 <HAL_UART_MspInit+0x138>)
 8002296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002298:	4a33      	ldr	r2, [pc, #204]	; (8002368 <HAL_UART_MspInit+0x138>)
 800229a:	f043 0302 	orr.w	r3, r3, #2
 800229e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022a0:	4b31      	ldr	r3, [pc, #196]	; (8002368 <HAL_UART_MspInit+0x138>)
 80022a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80022ac:	23c0      	movs	r3, #192	; 0xc0
 80022ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022be:	2303      	movs	r3, #3
 80022c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022c4:	2307      	movs	r3, #7
 80022c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80022ce:	4619      	mov	r1, r3
 80022d0:	4826      	ldr	r0, [pc, #152]	; (800236c <HAL_UART_MspInit+0x13c>)
 80022d2:	f000 fc67 	bl	8002ba4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022d6:	e040      	b.n	800235a <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a24      	ldr	r2, [pc, #144]	; (8002370 <HAL_UART_MspInit+0x140>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d13b      	bne.n	800235a <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022e2:	2304      	movs	r3, #4
 80022e4:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022e6:	2300      	movs	r3, #0
 80022e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ea:	f107 031c 	add.w	r3, r7, #28
 80022ee:	4618      	mov	r0, r3
 80022f0:	f003 fd24 	bl	8005d3c <HAL_RCCEx_PeriphCLKConfig>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d001      	beq.n	80022fe <HAL_UART_MspInit+0xce>
      Error_Handler();
 80022fa:	f7ff fdd3 	bl	8001ea4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022fe:	4b1a      	ldr	r3, [pc, #104]	; (8002368 <HAL_UART_MspInit+0x138>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	4a19      	ldr	r2, [pc, #100]	; (8002368 <HAL_UART_MspInit+0x138>)
 8002304:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002308:	6593      	str	r3, [r2, #88]	; 0x58
 800230a:	4b17      	ldr	r3, [pc, #92]	; (8002368 <HAL_UART_MspInit+0x138>)
 800230c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800230e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002316:	4b14      	ldr	r3, [pc, #80]	; (8002368 <HAL_UART_MspInit+0x138>)
 8002318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231a:	4a13      	ldr	r2, [pc, #76]	; (8002368 <HAL_UART_MspInit+0x138>)
 800231c:	f043 0308 	orr.w	r3, r3, #8
 8002320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <HAL_UART_MspInit+0x138>)
 8002324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800232e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002342:	2303      	movs	r3, #3
 8002344:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002348:	2307      	movs	r3, #7
 800234a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800234e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002352:	4619      	mov	r1, r3
 8002354:	4807      	ldr	r0, [pc, #28]	; (8002374 <HAL_UART_MspInit+0x144>)
 8002356:	f000 fc25 	bl	8002ba4 <HAL_GPIO_Init>
}
 800235a:	bf00      	nop
 800235c:	37b8      	adds	r7, #184	; 0xb8
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	40013800 	.word	0x40013800
 8002368:	40021000 	.word	0x40021000
 800236c:	48000400 	.word	0x48000400
 8002370:	40004800 	.word	0x40004800
 8002374:	48000c00 	.word	0x48000c00

08002378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800237c:	e7fe      	b.n	800237c <NMI_Handler+0x4>

0800237e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <HardFault_Handler+0x4>

08002384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <MemManage_Handler+0x4>

0800238a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <BusFault_Handler+0x4>

08002390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <UsageFault_Handler+0x4>

08002396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c4:	f000 f98c 	bl	80026e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}

080023cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80023d0:	2020      	movs	r0, #32
 80023d2:	f000 fda9 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80023d6:	2040      	movs	r0, #64	; 0x40
 80023d8:	f000 fda6 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80023dc:	2080      	movs	r0, #128	; 0x80
 80023de:	f000 fda3 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80023e2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023e6:	f000 fd9f 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}

080023ee <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80023f2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80023f6:	f000 fd97 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80023fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80023fe:	f000 fd93 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002402:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002406:	f000 fd8f 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800240a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800240e:	f000 fd8b 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002412:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002416:	f000 fd87 	bl	8002f28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800241a:	bf00      	nop
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002424:	4802      	ldr	r0, [pc, #8]	; (8002430 <OTG_FS_IRQHandler+0x10>)
 8002426:	f001 fd0d 	bl	8003e44 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800242a:	bf00      	nop
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	20000aac 	.word	0x20000aac

08002434 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  return 1;
 8002438:	2301      	movs	r3, #1
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <_kill>:

int _kill(int pid, int sig)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800244e:	f00a f8ff 	bl	800c650 <__errno>
 8002452:	4603      	mov	r3, r0
 8002454:	2216      	movs	r2, #22
 8002456:	601a      	str	r2, [r3, #0]
  return -1;
 8002458:	f04f 33ff 	mov.w	r3, #4294967295
}
 800245c:	4618      	mov	r0, r3
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <_exit>:

void _exit (int status)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800246c:	f04f 31ff 	mov.w	r1, #4294967295
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff ffe7 	bl	8002444 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002476:	e7fe      	b.n	8002476 <_exit+0x12>

08002478 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
 8002488:	e00a      	b.n	80024a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800248a:	f3af 8000 	nop.w
 800248e:	4601      	mov	r1, r0
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	1c5a      	adds	r2, r3, #1
 8002494:	60ba      	str	r2, [r7, #8]
 8002496:	b2ca      	uxtb	r2, r1
 8002498:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	3301      	adds	r3, #1
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	dbf0      	blt.n	800248a <_read+0x12>
  }

  return len;
 80024a8:	687b      	ldr	r3, [r7, #4]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	60f8      	str	r0, [r7, #12]
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	e009      	b.n	80024d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	60ba      	str	r2, [r7, #8]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	3301      	adds	r3, #1
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	dbf1      	blt.n	80024c4 <_write+0x12>
  }
  return len;
 80024e0:	687b      	ldr	r3, [r7, #4]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <_close>:

int _close(int file)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr

08002502 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
 800250a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002512:	605a      	str	r2, [r3, #4]
  return 0;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	370c      	adds	r7, #12
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr

08002522 <_isatty>:

int _isatty(int file)
{
 8002522:	b480      	push	{r7}
 8002524:	b083      	sub	sp, #12
 8002526:	af00      	add	r7, sp, #0
 8002528:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800252a:	2301      	movs	r3, #1
}
 800252c:	4618      	mov	r0, r3
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3714      	adds	r7, #20
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
	...

08002554 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800255c:	4a14      	ldr	r2, [pc, #80]	; (80025b0 <_sbrk+0x5c>)
 800255e:	4b15      	ldr	r3, [pc, #84]	; (80025b4 <_sbrk+0x60>)
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <_sbrk+0x64>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d102      	bne.n	8002576 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <_sbrk+0x64>)
 8002572:	4a12      	ldr	r2, [pc, #72]	; (80025bc <_sbrk+0x68>)
 8002574:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <_sbrk+0x64>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4413      	add	r3, r2
 800257e:	693a      	ldr	r2, [r7, #16]
 8002580:	429a      	cmp	r2, r3
 8002582:	d207      	bcs.n	8002594 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002584:	f00a f864 	bl	800c650 <__errno>
 8002588:	4603      	mov	r3, r0
 800258a:	220c      	movs	r2, #12
 800258c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800258e:	f04f 33ff 	mov.w	r3, #4294967295
 8002592:	e009      	b.n	80025a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002594:	4b08      	ldr	r3, [pc, #32]	; (80025b8 <_sbrk+0x64>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <_sbrk+0x64>)
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4413      	add	r3, r2
 80025a2:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <_sbrk+0x64>)
 80025a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025a6:	68fb      	ldr	r3, [r7, #12]
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20018000 	.word	0x20018000
 80025b4:	00000400 	.word	0x00000400
 80025b8:	2000059c 	.word	0x2000059c
 80025bc:	20001128 	.word	0x20001128

080025c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025c4:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <SystemInit+0x20>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	4a05      	ldr	r2, [pc, #20]	; (80025e0 <SystemInit+0x20>)
 80025cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80025d4:	bf00      	nop
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800261c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025e8:	f7ff ffea 	bl	80025c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025ec:	480c      	ldr	r0, [pc, #48]	; (8002620 <LoopForever+0x6>)
  ldr r1, =_edata
 80025ee:	490d      	ldr	r1, [pc, #52]	; (8002624 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025f0:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <LoopForever+0xe>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f4:	e002      	b.n	80025fc <LoopCopyDataInit>

080025f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fa:	3304      	adds	r3, #4

080025fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002600:	d3f9      	bcc.n	80025f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002602:	4a0a      	ldr	r2, [pc, #40]	; (800262c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002604:	4c0a      	ldr	r4, [pc, #40]	; (8002630 <LoopForever+0x16>)
  movs r3, #0
 8002606:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002608:	e001      	b.n	800260e <LoopFillZerobss>

0800260a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800260c:	3204      	adds	r2, #4

0800260e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800260e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002610:	d3fb      	bcc.n	800260a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002612:	f00a f823 	bl	800c65c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002616:	f7ff f85d 	bl	80016d4 <main>

0800261a <LoopForever>:

LoopForever:
    b LoopForever
 800261a:	e7fe      	b.n	800261a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800261c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002620:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002624:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 8002628:	0800e89c 	.word	0x0800e89c
  ldr r2, =_sbss
 800262c:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 8002630:	20001124 	.word	0x20001124

08002634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002634:	e7fe      	b.n	8002634 <ADC1_2_IRQHandler>

08002636 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002636:	b580      	push	{r7, lr}
 8002638:	b082      	sub	sp, #8
 800263a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800263c:	2300      	movs	r3, #0
 800263e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002640:	2003      	movs	r0, #3
 8002642:	f000 f961 	bl	8002908 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002646:	2000      	movs	r0, #0
 8002648:	f000 f80e 	bl	8002668 <HAL_InitTick>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	71fb      	strb	r3, [r7, #7]
 8002656:	e001      	b.n	800265c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002658:	f7ff fc2a 	bl	8001eb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800265c:	79fb      	ldrb	r3, [r7, #7]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002670:	2300      	movs	r3, #0
 8002672:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002674:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <HAL_InitTick+0x6c>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d023      	beq.n	80026c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800267c:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <HAL_InitTick+0x70>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <HAL_InitTick+0x6c>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800268a:	fbb3 f3f1 	udiv	r3, r3, r1
 800268e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002692:	4618      	mov	r0, r3
 8002694:	f000 f96d 	bl	8002972 <HAL_SYSTICK_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b0f      	cmp	r3, #15
 80026a2:	d809      	bhi.n	80026b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a4:	2200      	movs	r2, #0
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	f04f 30ff 	mov.w	r0, #4294967295
 80026ac:	f000 f937 	bl	800291e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <HAL_InitTick+0x74>)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e007      	b.n	80026c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	73fb      	strb	r3, [r7, #15]
 80026bc:	e004      	b.n	80026c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	e001      	b.n	80026c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000008 	.word	0x20000008
 80026d8:	20000000 	.word	0x20000000
 80026dc:	20000004 	.word	0x20000004

080026e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_IncTick+0x20>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_IncTick+0x24>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	4a04      	ldr	r2, [pc, #16]	; (8002704 <HAL_IncTick+0x24>)
 80026f2:	6013      	str	r3, [r2, #0]
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000008 	.word	0x20000008
 8002704:	200005a0 	.word	0x200005a0

08002708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return uwTick;
 800270c:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_GetTick+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	200005a0 	.word	0x200005a0

08002720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002728:	f7ff ffee 	bl	8002708 <HAL_GetTick>
 800272c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d005      	beq.n	8002746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800273a:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <HAL_Delay+0x44>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4413      	add	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002746:	bf00      	nop
 8002748:	f7ff ffde 	bl	8002708 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	429a      	cmp	r2, r3
 8002756:	d8f7      	bhi.n	8002748 <HAL_Delay+0x28>
  {
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000008 	.word	0x20000008

08002768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002784:	4013      	ands	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800279a:	4a04      	ldr	r2, [pc, #16]	; (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	60d3      	str	r3, [r2, #12]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <__NVIC_GetPriorityGrouping+0x18>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	f003 0307 	and.w	r3, r3, #7
}
 80027be:	4618      	mov	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	db0b      	blt.n	80027f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	f003 021f 	and.w	r2, r3, #31
 80027e4:	4907      	ldr	r1, [pc, #28]	; (8002804 <__NVIC_EnableIRQ+0x38>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	2001      	movs	r0, #1
 80027ee:	fa00 f202 	lsl.w	r2, r0, r2
 80027f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000e100 	.word	0xe000e100

08002808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	2b00      	cmp	r3, #0
 800281a:	db0a      	blt.n	8002832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	490c      	ldr	r1, [pc, #48]	; (8002854 <__NVIC_SetPriority+0x4c>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	0112      	lsls	r2, r2, #4
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	440b      	add	r3, r1
 800282c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002830:	e00a      	b.n	8002848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4908      	ldr	r1, [pc, #32]	; (8002858 <__NVIC_SetPriority+0x50>)
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	3b04      	subs	r3, #4
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	440b      	add	r3, r1
 8002846:	761a      	strb	r2, [r3, #24]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000e100 	.word	0xe000e100
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	; 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f1c3 0307 	rsb	r3, r3, #7
 8002876:	2b04      	cmp	r3, #4
 8002878:	bf28      	it	cs
 800287a:	2304      	movcs	r3, #4
 800287c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3304      	adds	r3, #4
 8002882:	2b06      	cmp	r3, #6
 8002884:	d902      	bls.n	800288c <NVIC_EncodePriority+0x30>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3b03      	subs	r3, #3
 800288a:	e000      	b.n	800288e <NVIC_EncodePriority+0x32>
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	f04f 32ff 	mov.w	r2, #4294967295
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43da      	mvns	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	401a      	ands	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a4:	f04f 31ff 	mov.w	r1, #4294967295
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	43d9      	mvns	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	4313      	orrs	r3, r2
         );
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	; 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
	...

080028c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3b01      	subs	r3, #1
 80028d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028d4:	d301      	bcc.n	80028da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028d6:	2301      	movs	r3, #1
 80028d8:	e00f      	b.n	80028fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028da:	4a0a      	ldr	r2, [pc, #40]	; (8002904 <SysTick_Config+0x40>)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028e2:	210f      	movs	r1, #15
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	f7ff ff8e 	bl	8002808 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <SysTick_Config+0x40>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028f2:	4b04      	ldr	r3, [pc, #16]	; (8002904 <SysTick_Config+0x40>)
 80028f4:	2207      	movs	r2, #7
 80028f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	e000e010 	.word	0xe000e010

08002908 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f7ff ff29 	bl	8002768 <__NVIC_SetPriorityGrouping>
}
 8002916:	bf00      	nop
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b086      	sub	sp, #24
 8002922:	af00      	add	r7, sp, #0
 8002924:	4603      	mov	r3, r0
 8002926:	60b9      	str	r1, [r7, #8]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002930:	f7ff ff3e 	bl	80027b0 <__NVIC_GetPriorityGrouping>
 8002934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	6978      	ldr	r0, [r7, #20]
 800293c:	f7ff ff8e 	bl	800285c <NVIC_EncodePriority>
 8002940:	4602      	mov	r2, r0
 8002942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002946:	4611      	mov	r1, r2
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff ff5d 	bl	8002808 <__NVIC_SetPriority>
}
 800294e:	bf00      	nop
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002956:	b580      	push	{r7, lr}
 8002958:	b082      	sub	sp, #8
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff31 	bl	80027cc <__NVIC_EnableIRQ>
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b082      	sub	sp, #8
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff ffa2 	bl	80028c4 <SysTick_Config>
 8002980:	4603      	mov	r3, r0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
	...

0800298c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0ac      	b.n	8002af8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 f8b2 	bl	8002b0c <DFSDM_GetChannelFromInstance>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4a55      	ldr	r2, [pc, #340]	; (8002b00 <HAL_DFSDM_ChannelInit+0x174>)
 80029ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d001      	beq.n	80029b8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e09f      	b.n	8002af8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f7ff fa9d 	bl	8001ef8 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80029be:	4b51      	ldr	r3, [pc, #324]	; (8002b04 <HAL_DFSDM_ChannelInit+0x178>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	3301      	adds	r3, #1
 80029c4:	4a4f      	ldr	r2, [pc, #316]	; (8002b04 <HAL_DFSDM_ChannelInit+0x178>)
 80029c6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80029c8:	4b4e      	ldr	r3, [pc, #312]	; (8002b04 <HAL_DFSDM_ChannelInit+0x178>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d125      	bne.n	8002a1c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80029d0:	4b4d      	ldr	r3, [pc, #308]	; (8002b08 <HAL_DFSDM_ChannelInit+0x17c>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a4c      	ldr	r2, [pc, #304]	; (8002b08 <HAL_DFSDM_ChannelInit+0x17c>)
 80029d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029da:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80029dc:	4b4a      	ldr	r3, [pc, #296]	; (8002b08 <HAL_DFSDM_ChannelInit+0x17c>)
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	4948      	ldr	r1, [pc, #288]	; (8002b08 <HAL_DFSDM_ChannelInit+0x17c>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80029ea:	4b47      	ldr	r3, [pc, #284]	; (8002b08 <HAL_DFSDM_ChannelInit+0x17c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a46      	ldr	r2, [pc, #280]	; (8002b08 <HAL_DFSDM_ChannelInit+0x17c>)
 80029f0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80029f4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	791b      	ldrb	r3, [r3, #4]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d108      	bne.n	8002a10 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80029fe:	4b42      	ldr	r3, [pc, #264]	; (8002b08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	3b01      	subs	r3, #1
 8002a08:	041b      	lsls	r3, r3, #16
 8002a0a:	493f      	ldr	r1, [pc, #252]	; (8002b08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002a10:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a3c      	ldr	r2, [pc, #240]	; (8002b08 <HAL_DFSDM_ChannelInit+0x17c>)
 8002a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a1a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002a2a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6819      	ldr	r1, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002a3a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002a40:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 020f 	bic.w	r2, r2, #15
 8002a58:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6819      	ldr	r1, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002a80:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6899      	ldr	r1, [r3, #8]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	3b01      	subs	r3, #1
 8002a92:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002a94:	431a      	orrs	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	430a      	orrs	r2, r1
 8002a9c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f002 0207 	and.w	r2, r2, #7
 8002aac:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002ad8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 f810 	bl	8002b0c <DFSDM_GetChannelFromInstance>
 8002aec:	4602      	mov	r2, r0
 8002aee:	4904      	ldr	r1, [pc, #16]	; (8002b00 <HAL_DFSDM_ChannelInit+0x174>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	200005a8 	.word	0x200005a8
 8002b04:	200005a4 	.word	0x200005a4
 8002b08:	40016000 	.word	0x40016000

08002b0c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a1c      	ldr	r2, [pc, #112]	; (8002b88 <DFSDM_GetChannelFromInstance+0x7c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d102      	bne.n	8002b22 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	e02b      	b.n	8002b7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a19      	ldr	r2, [pc, #100]	; (8002b8c <DFSDM_GetChannelFromInstance+0x80>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d102      	bne.n	8002b30 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	e024      	b.n	8002b7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <DFSDM_GetChannelFromInstance+0x84>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d102      	bne.n	8002b3e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002b38:	2302      	movs	r3, #2
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	e01d      	b.n	8002b7a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a14      	ldr	r2, [pc, #80]	; (8002b94 <DFSDM_GetChannelFromInstance+0x88>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d102      	bne.n	8002b4c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002b46:	2304      	movs	r3, #4
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	e016      	b.n	8002b7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <DFSDM_GetChannelFromInstance+0x8c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d102      	bne.n	8002b5a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002b54:	2305      	movs	r3, #5
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	e00f      	b.n	8002b7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a0f      	ldr	r2, [pc, #60]	; (8002b9c <DFSDM_GetChannelFromInstance+0x90>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d102      	bne.n	8002b68 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002b62:	2306      	movs	r3, #6
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	e008      	b.n	8002b7a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a0d      	ldr	r2, [pc, #52]	; (8002ba0 <DFSDM_GetChannelFromInstance+0x94>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d102      	bne.n	8002b76 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002b70:	2307      	movs	r3, #7
 8002b72:	60fb      	str	r3, [r7, #12]
 8002b74:	e001      	b.n	8002b7a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002b76:	2303      	movs	r3, #3
 8002b78:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	40016000 	.word	0x40016000
 8002b8c:	40016020 	.word	0x40016020
 8002b90:	40016040 	.word	0x40016040
 8002b94:	40016080 	.word	0x40016080
 8002b98:	400160a0 	.word	0x400160a0
 8002b9c:	400160c0 	.word	0x400160c0
 8002ba0:	400160e0 	.word	0x400160e0

08002ba4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bb2:	e17f      	b.n	8002eb4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	2101      	movs	r1, #1
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f000 8171 	beq.w	8002eae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d005      	beq.n	8002be4 <HAL_GPIO_Init+0x40>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 0303 	and.w	r3, r3, #3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d130      	bne.n	8002c46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	f003 0201 	and.w	r2, r3, #1
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d118      	bne.n	8002c84 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c58:	2201      	movs	r2, #1
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	693a      	ldr	r2, [r7, #16]
 8002c64:	4013      	ands	r3, r2
 8002c66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	08db      	lsrs	r3, r3, #3
 8002c6e:	f003 0201 	and.w	r2, r3, #1
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f003 0303 	and.w	r3, r3, #3
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d017      	beq.n	8002cc0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 0303 	and.w	r3, r3, #3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d123      	bne.n	8002d14 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	08da      	lsrs	r2, r3, #3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3208      	adds	r2, #8
 8002cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	220f      	movs	r2, #15
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4013      	ands	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	08da      	lsrs	r2, r3, #3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3208      	adds	r2, #8
 8002d0e:	6939      	ldr	r1, [r7, #16]
 8002d10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	005b      	lsls	r3, r3, #1
 8002d1e:	2203      	movs	r2, #3
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0203 	and.w	r2, r3, #3
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80ac 	beq.w	8002eae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d56:	4b5f      	ldr	r3, [pc, #380]	; (8002ed4 <HAL_GPIO_Init+0x330>)
 8002d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5a:	4a5e      	ldr	r2, [pc, #376]	; (8002ed4 <HAL_GPIO_Init+0x330>)
 8002d5c:	f043 0301 	orr.w	r3, r3, #1
 8002d60:	6613      	str	r3, [r2, #96]	; 0x60
 8002d62:	4b5c      	ldr	r3, [pc, #368]	; (8002ed4 <HAL_GPIO_Init+0x330>)
 8002d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d6e:	4a5a      	ldr	r2, [pc, #360]	; (8002ed8 <HAL_GPIO_Init+0x334>)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	089b      	lsrs	r3, r3, #2
 8002d74:	3302      	adds	r3, #2
 8002d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	220f      	movs	r2, #15
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	43db      	mvns	r3, r3
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d98:	d025      	beq.n	8002de6 <HAL_GPIO_Init+0x242>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a4f      	ldr	r2, [pc, #316]	; (8002edc <HAL_GPIO_Init+0x338>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d01f      	beq.n	8002de2 <HAL_GPIO_Init+0x23e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a4e      	ldr	r2, [pc, #312]	; (8002ee0 <HAL_GPIO_Init+0x33c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d019      	beq.n	8002dde <HAL_GPIO_Init+0x23a>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4d      	ldr	r2, [pc, #308]	; (8002ee4 <HAL_GPIO_Init+0x340>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d013      	beq.n	8002dda <HAL_GPIO_Init+0x236>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a4c      	ldr	r2, [pc, #304]	; (8002ee8 <HAL_GPIO_Init+0x344>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d00d      	beq.n	8002dd6 <HAL_GPIO_Init+0x232>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a4b      	ldr	r2, [pc, #300]	; (8002eec <HAL_GPIO_Init+0x348>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d007      	beq.n	8002dd2 <HAL_GPIO_Init+0x22e>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a4a      	ldr	r2, [pc, #296]	; (8002ef0 <HAL_GPIO_Init+0x34c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d101      	bne.n	8002dce <HAL_GPIO_Init+0x22a>
 8002dca:	2306      	movs	r3, #6
 8002dcc:	e00c      	b.n	8002de8 <HAL_GPIO_Init+0x244>
 8002dce:	2307      	movs	r3, #7
 8002dd0:	e00a      	b.n	8002de8 <HAL_GPIO_Init+0x244>
 8002dd2:	2305      	movs	r3, #5
 8002dd4:	e008      	b.n	8002de8 <HAL_GPIO_Init+0x244>
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	e006      	b.n	8002de8 <HAL_GPIO_Init+0x244>
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e004      	b.n	8002de8 <HAL_GPIO_Init+0x244>
 8002dde:	2302      	movs	r3, #2
 8002de0:	e002      	b.n	8002de8 <HAL_GPIO_Init+0x244>
 8002de2:	2301      	movs	r3, #1
 8002de4:	e000      	b.n	8002de8 <HAL_GPIO_Init+0x244>
 8002de6:	2300      	movs	r3, #0
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	f002 0203 	and.w	r2, r2, #3
 8002dee:	0092      	lsls	r2, r2, #2
 8002df0:	4093      	lsls	r3, r2
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002df8:	4937      	ldr	r1, [pc, #220]	; (8002ed8 <HAL_GPIO_Init+0x334>)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	089b      	lsrs	r3, r3, #2
 8002dfe:	3302      	adds	r3, #2
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e06:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <HAL_GPIO_Init+0x350>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	43db      	mvns	r3, r3
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4013      	ands	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e2a:	4a32      	ldr	r2, [pc, #200]	; (8002ef4 <HAL_GPIO_Init+0x350>)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e30:	4b30      	ldr	r3, [pc, #192]	; (8002ef4 <HAL_GPIO_Init+0x350>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	43db      	mvns	r3, r3
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e54:	4a27      	ldr	r2, [pc, #156]	; (8002ef4 <HAL_GPIO_Init+0x350>)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e5a:	4b26      	ldr	r3, [pc, #152]	; (8002ef4 <HAL_GPIO_Init+0x350>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	43db      	mvns	r3, r3
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e7e:	4a1d      	ldr	r2, [pc, #116]	; (8002ef4 <HAL_GPIO_Init+0x350>)
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_GPIO_Init+0x350>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ea8:	4a12      	ldr	r2, [pc, #72]	; (8002ef4 <HAL_GPIO_Init+0x350>)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f47f ae78 	bne.w	8002bb4 <HAL_GPIO_Init+0x10>
  }
}
 8002ec4:	bf00      	nop
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40010000 	.word	0x40010000
 8002edc:	48000400 	.word	0x48000400
 8002ee0:	48000800 	.word	0x48000800
 8002ee4:	48000c00 	.word	0x48000c00
 8002ee8:	48001000 	.word	0x48001000
 8002eec:	48001400 	.word	0x48001400
 8002ef0:	48001800 	.word	0x48001800
 8002ef4:	40010400 	.word	0x40010400

08002ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	807b      	strh	r3, [r7, #2]
 8002f04:	4613      	mov	r3, r2
 8002f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f08:	787b      	ldrb	r3, [r7, #1]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f14:	e002      	b.n	8002f1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f16:	887a      	ldrh	r2, [r7, #2]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f32:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	88fb      	ldrh	r3, [r7, #6]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d006      	beq.n	8002f4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f3e:	4a05      	ldr	r2, [pc, #20]	; (8002f54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f40:	88fb      	ldrh	r3, [r7, #6]
 8002f42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f000 f806 	bl	8002f58 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f4c:	bf00      	nop
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40010400 	.word	0x40010400

08002f58 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f62:	bf00      	nop
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr

08002f6e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b082      	sub	sp, #8
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e08d      	b.n	800309c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d106      	bne.n	8002f9a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff f813 	bl	8001fc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2224      	movs	r2, #36	; 0x24
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0201 	bic.w	r2, r2, #1
 8002fb0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fbe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fce:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d107      	bne.n	8002fe8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002fe4:	609a      	str	r2, [r3, #8]
 8002fe6:	e006      	b.n	8002ff6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ff4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d108      	bne.n	8003010 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	e007      	b.n	8003020 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800301e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6812      	ldr	r2, [r2, #0]
 800302a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800302e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003032:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003042:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	69d9      	ldr	r1, [r3, #28]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1a      	ldr	r2, [r3, #32]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f042 0201 	orr.w	r2, r2, #1
 800307c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2220      	movs	r2, #32
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3708      	adds	r7, #8
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b088      	sub	sp, #32
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	4608      	mov	r0, r1
 80030ae:	4611      	mov	r1, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	817b      	strh	r3, [r7, #10]
 80030b6:	460b      	mov	r3, r1
 80030b8:	813b      	strh	r3, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	f040 80f9 	bne.w	80032be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80030cc:	6a3b      	ldr	r3, [r7, #32]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_I2C_Mem_Write+0x34>
 80030d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d105      	bne.n	80030e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030de:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0ed      	b.n	80032c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_I2C_Mem_Write+0x4e>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e0e6      	b.n	80032c0 <HAL_I2C_Mem_Write+0x21c>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80030fa:	f7ff fb05 	bl	8002708 <HAL_GetTick>
 80030fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	9300      	str	r3, [sp, #0]
 8003104:	2319      	movs	r3, #25
 8003106:	2201      	movs	r2, #1
 8003108:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 fac3 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e0d1      	b.n	80032c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2221      	movs	r2, #33	; 0x21
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2240      	movs	r2, #64	; 0x40
 8003128:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6a3a      	ldr	r2, [r7, #32]
 8003136:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800313c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003144:	88f8      	ldrh	r0, [r7, #6]
 8003146:	893a      	ldrh	r2, [r7, #8]
 8003148:	8979      	ldrh	r1, [r7, #10]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	9301      	str	r3, [sp, #4]
 800314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	4603      	mov	r3, r0
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f9d3 	bl	8003500 <I2C_RequestMemoryWrite>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e0a9      	b.n	80032c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2bff      	cmp	r3, #255	; 0xff
 8003174:	d90e      	bls.n	8003194 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	22ff      	movs	r2, #255	; 0xff
 800317a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	b2da      	uxtb	r2, r3
 8003182:	8979      	ldrh	r1, [r7, #10]
 8003184:	2300      	movs	r3, #0
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 fc3d 	bl	8003a0c <I2C_TransferConfig>
 8003192:	e00f      	b.n	80031b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	8979      	ldrh	r1, [r7, #10]
 80031a6:	2300      	movs	r3, #0
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f000 fc2c 	bl	8003a0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b4:	697a      	ldr	r2, [r7, #20]
 80031b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f000 fabc 	bl	8003736 <I2C_WaitOnTXISFlagUntilTimeout>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d001      	beq.n	80031c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e07b      	b.n	80032c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	781a      	ldrb	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d034      	beq.n	800326c <HAL_I2C_Mem_Write+0x1c8>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003206:	2b00      	cmp	r3, #0
 8003208:	d130      	bne.n	800326c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	2200      	movs	r2, #0
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	68f8      	ldr	r0, [r7, #12]
 8003216:	f000 fa3f 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d001      	beq.n	8003224 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e04d      	b.n	80032c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003228:	b29b      	uxth	r3, r3
 800322a:	2bff      	cmp	r3, #255	; 0xff
 800322c:	d90e      	bls.n	800324c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	22ff      	movs	r2, #255	; 0xff
 8003232:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	b2da      	uxtb	r2, r3
 800323a:	8979      	ldrh	r1, [r7, #10]
 800323c:	2300      	movs	r3, #0
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 fbe1 	bl	8003a0c <I2C_TransferConfig>
 800324a:	e00f      	b.n	800326c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325a:	b2da      	uxtb	r2, r3
 800325c:	8979      	ldrh	r1, [r7, #10]
 800325e:	2300      	movs	r3, #0
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fbd0 	bl	8003a0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d19e      	bne.n	80031b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800327a:	68f8      	ldr	r0, [r7, #12]
 800327c:	f000 faa2 	bl	80037c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d001      	beq.n	800328a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e01a      	b.n	80032c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2220      	movs	r2, #32
 8003290:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6859      	ldr	r1, [r3, #4]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_I2C_Mem_Write+0x224>)
 800329e:	400b      	ands	r3, r1
 80032a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e000      	b.n	80032c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
  }
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	fe00e800 	.word	0xfe00e800

080032cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	4608      	mov	r0, r1
 80032d6:	4611      	mov	r1, r2
 80032d8:	461a      	mov	r2, r3
 80032da:	4603      	mov	r3, r0
 80032dc:	817b      	strh	r3, [r7, #10]
 80032de:	460b      	mov	r3, r1
 80032e0:	813b      	strh	r3, [r7, #8]
 80032e2:	4613      	mov	r3, r2
 80032e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	2b20      	cmp	r3, #32
 80032f0:	f040 80fd 	bne.w	80034ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80032f4:	6a3b      	ldr	r3, [r7, #32]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d002      	beq.n	8003300 <HAL_I2C_Mem_Read+0x34>
 80032fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003306:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e0f1      	b.n	80034f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003312:	2b01      	cmp	r3, #1
 8003314:	d101      	bne.n	800331a <HAL_I2C_Mem_Read+0x4e>
 8003316:	2302      	movs	r3, #2
 8003318:	e0ea      	b.n	80034f0 <HAL_I2C_Mem_Read+0x224>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2201      	movs	r2, #1
 800331e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003322:	f7ff f9f1 	bl	8002708 <HAL_GetTick>
 8003326:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	2319      	movs	r3, #25
 800332e:	2201      	movs	r2, #1
 8003330:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f9af 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e0d5      	b.n	80034f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2222      	movs	r2, #34	; 0x22
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2240      	movs	r2, #64	; 0x40
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a3a      	ldr	r2, [r7, #32]
 800335e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003364:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800336c:	88f8      	ldrh	r0, [r7, #6]
 800336e:	893a      	ldrh	r2, [r7, #8]
 8003370:	8979      	ldrh	r1, [r7, #10]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	9301      	str	r3, [sp, #4]
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	4603      	mov	r3, r0
 800337c:	68f8      	ldr	r0, [r7, #12]
 800337e:	f000 f913 	bl	80035a8 <I2C_RequestMemoryRead>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d005      	beq.n	8003394 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0ad      	b.n	80034f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003398:	b29b      	uxth	r3, r3
 800339a:	2bff      	cmp	r3, #255	; 0xff
 800339c:	d90e      	bls.n	80033bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	22ff      	movs	r2, #255	; 0xff
 80033a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	8979      	ldrh	r1, [r7, #10]
 80033ac:	4b52      	ldr	r3, [pc, #328]	; (80034f8 <HAL_I2C_Mem_Read+0x22c>)
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f000 fb29 	bl	8003a0c <I2C_TransferConfig>
 80033ba:	e00f      	b.n	80033dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	8979      	ldrh	r1, [r7, #10]
 80033ce:	4b4a      	ldr	r3, [pc, #296]	; (80034f8 <HAL_I2C_Mem_Read+0x22c>)
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fb18 	bl	8003a0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e2:	2200      	movs	r2, #0
 80033e4:	2104      	movs	r1, #4
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 f956 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e07c      	b.n	80034f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	3b01      	subs	r3, #1
 8003414:	b29a      	uxth	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d034      	beq.n	800349c <HAL_I2C_Mem_Read+0x1d0>
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003436:	2b00      	cmp	r3, #0
 8003438:	d130      	bne.n	800349c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003440:	2200      	movs	r2, #0
 8003442:	2180      	movs	r1, #128	; 0x80
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f927 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e04d      	b.n	80034f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	2bff      	cmp	r3, #255	; 0xff
 800345c:	d90e      	bls.n	800347c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	22ff      	movs	r2, #255	; 0xff
 8003462:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	b2da      	uxtb	r2, r3
 800346a:	8979      	ldrh	r1, [r7, #10]
 800346c:	2300      	movs	r3, #0
 800346e:	9300      	str	r3, [sp, #0]
 8003470:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fac9 	bl	8003a0c <I2C_TransferConfig>
 800347a:	e00f      	b.n	800349c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348a:	b2da      	uxtb	r2, r3
 800348c:	8979      	ldrh	r1, [r7, #10]
 800348e:	2300      	movs	r3, #0
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 fab8 	bl	8003a0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d19a      	bne.n	80033dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 f98a 	bl	80037c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e01a      	b.n	80034f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2220      	movs	r2, #32
 80034c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_I2C_Mem_Read+0x230>)
 80034ce:	400b      	ands	r3, r1
 80034d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2220      	movs	r2, #32
 80034d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e000      	b.n	80034f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	80002400 	.word	0x80002400
 80034fc:	fe00e800 	.word	0xfe00e800

08003500 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af02      	add	r7, sp, #8
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	4608      	mov	r0, r1
 800350a:	4611      	mov	r1, r2
 800350c:	461a      	mov	r2, r3
 800350e:	4603      	mov	r3, r0
 8003510:	817b      	strh	r3, [r7, #10]
 8003512:	460b      	mov	r3, r1
 8003514:	813b      	strh	r3, [r7, #8]
 8003516:	4613      	mov	r3, r2
 8003518:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800351a:	88fb      	ldrh	r3, [r7, #6]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	8979      	ldrh	r1, [r7, #10]
 8003520:	4b20      	ldr	r3, [pc, #128]	; (80035a4 <I2C_RequestMemoryWrite+0xa4>)
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 fa6f 	bl	8003a0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	69b9      	ldr	r1, [r7, #24]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	f000 f8ff 	bl	8003736 <I2C_WaitOnTXISFlagUntilTimeout>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e02c      	b.n	800359c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d105      	bne.n	8003554 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003548:	893b      	ldrh	r3, [r7, #8]
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	629a      	str	r2, [r3, #40]	; 0x28
 8003552:	e015      	b.n	8003580 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003554:	893b      	ldrh	r3, [r7, #8]
 8003556:	0a1b      	lsrs	r3, r3, #8
 8003558:	b29b      	uxth	r3, r3
 800355a:	b2da      	uxtb	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003562:	69fa      	ldr	r2, [r7, #28]
 8003564:	69b9      	ldr	r1, [r7, #24]
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f8e5 	bl	8003736 <I2C_WaitOnTXISFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e012      	b.n	800359c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003576:	893b      	ldrh	r3, [r7, #8]
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	2200      	movs	r2, #0
 8003588:	2180      	movs	r1, #128	; 0x80
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 f884 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e000      	b.n	800359c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800359a:	2300      	movs	r3, #0
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	80002000 	.word	0x80002000

080035a8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af02      	add	r7, sp, #8
 80035ae:	60f8      	str	r0, [r7, #12]
 80035b0:	4608      	mov	r0, r1
 80035b2:	4611      	mov	r1, r2
 80035b4:	461a      	mov	r2, r3
 80035b6:	4603      	mov	r3, r0
 80035b8:	817b      	strh	r3, [r7, #10]
 80035ba:	460b      	mov	r3, r1
 80035bc:	813b      	strh	r3, [r7, #8]
 80035be:	4613      	mov	r3, r2
 80035c0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	b2da      	uxtb	r2, r3
 80035c6:	8979      	ldrh	r1, [r7, #10]
 80035c8:	4b20      	ldr	r3, [pc, #128]	; (800364c <I2C_RequestMemoryRead+0xa4>)
 80035ca:	9300      	str	r3, [sp, #0]
 80035cc:	2300      	movs	r3, #0
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fa1c 	bl	8003a0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	69b9      	ldr	r1, [r7, #24]
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f000 f8ac 	bl	8003736 <I2C_WaitOnTXISFlagUntilTimeout>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d001      	beq.n	80035e8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e02c      	b.n	8003642 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035ee:	893b      	ldrh	r3, [r7, #8]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28
 80035f8:	e015      	b.n	8003626 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80035fa:	893b      	ldrh	r3, [r7, #8]
 80035fc:	0a1b      	lsrs	r3, r3, #8
 80035fe:	b29b      	uxth	r3, r3
 8003600:	b2da      	uxtb	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003608:	69fa      	ldr	r2, [r7, #28]
 800360a:	69b9      	ldr	r1, [r7, #24]
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f892 	bl	8003736 <I2C_WaitOnTXISFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e012      	b.n	8003642 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800361c:	893b      	ldrh	r3, [r7, #8]
 800361e:	b2da      	uxtb	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	2200      	movs	r2, #0
 800362e:	2140      	movs	r1, #64	; 0x40
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 f831 	bl	8003698 <I2C_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	80002000 	.word	0x80002000

08003650 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	699b      	ldr	r3, [r3, #24]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b02      	cmp	r3, #2
 8003664:	d103      	bne.n	800366e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	2b01      	cmp	r3, #1
 800367a:	d007      	beq.n	800368c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	699a      	ldr	r2, [r3, #24]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	619a      	str	r2, [r3, #24]
  }
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b084      	sub	sp, #16
 800369c:	af00      	add	r7, sp, #0
 800369e:	60f8      	str	r0, [r7, #12]
 80036a0:	60b9      	str	r1, [r7, #8]
 80036a2:	603b      	str	r3, [r7, #0]
 80036a4:	4613      	mov	r3, r2
 80036a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036a8:	e031      	b.n	800370e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d02d      	beq.n	800370e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7ff f829 	bl	8002708 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d122      	bne.n	800370e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	4013      	ands	r3, r2
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	bf0c      	ite	eq
 80036d8:	2301      	moveq	r3, #1
 80036da:	2300      	movne	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d113      	bne.n	800370e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ea:	f043 0220 	orr.w	r2, r3, #32
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e00f      	b.n	800372e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699a      	ldr	r2, [r3, #24]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4013      	ands	r3, r2
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	429a      	cmp	r2, r3
 800371c:	bf0c      	ite	eq
 800371e:	2301      	moveq	r3, #1
 8003720:	2300      	movne	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	461a      	mov	r2, r3
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	429a      	cmp	r2, r3
 800372a:	d0be      	beq.n	80036aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}

08003736 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003736:	b580      	push	{r7, lr}
 8003738:	b084      	sub	sp, #16
 800373a:	af00      	add	r7, sp, #0
 800373c:	60f8      	str	r0, [r7, #12]
 800373e:	60b9      	str	r1, [r7, #8]
 8003740:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003742:	e033      	b.n	80037ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	68b9      	ldr	r1, [r7, #8]
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f87f 	bl	800384c <I2C_IsErrorOccurred>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e031      	b.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375e:	d025      	beq.n	80037ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003760:	f7fe ffd2 	bl	8002708 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	68ba      	ldr	r2, [r7, #8]
 800376c:	429a      	cmp	r2, r3
 800376e:	d302      	bcc.n	8003776 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d11a      	bne.n	80037ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b02      	cmp	r3, #2
 8003782:	d013      	beq.n	80037ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003788:	f043 0220 	orr.w	r2, r3, #32
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e007      	b.n	80037bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f003 0302 	and.w	r3, r3, #2
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d1c4      	bne.n	8003744 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d0:	e02f      	b.n	8003832 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	68b9      	ldr	r1, [r7, #8]
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	f000 f838 	bl	800384c <I2C_IsErrorOccurred>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e02d      	b.n	8003842 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e6:	f7fe ff8f 	bl	8002708 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d302      	bcc.n	80037fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d11a      	bne.n	8003832 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b20      	cmp	r3, #32
 8003808:	d013      	beq.n	8003832 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f043 0220 	orr.w	r2, r3, #32
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e007      	b.n	8003842 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b20      	cmp	r3, #32
 800383e:	d1c8      	bne.n	80037d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b08a      	sub	sp, #40	; 0x28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	2b00      	cmp	r3, #0
 8003876:	d068      	beq.n	800394a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2210      	movs	r2, #16
 800387e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003880:	e049      	b.n	8003916 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003888:	d045      	beq.n	8003916 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800388a:	f7fe ff3d 	bl	8002708 <HAL_GetTick>
 800388e:	4602      	mov	r2, r0
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	429a      	cmp	r2, r3
 8003898:	d302      	bcc.n	80038a0 <I2C_IsErrorOccurred+0x54>
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d13a      	bne.n	8003916 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038c2:	d121      	bne.n	8003908 <I2C_IsErrorOccurred+0xbc>
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ca:	d01d      	beq.n	8003908 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d01a      	beq.n	8003908 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80038e2:	f7fe ff11 	bl	8002708 <HAL_GetTick>
 80038e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038e8:	e00e      	b.n	8003908 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80038ea:	f7fe ff0d 	bl	8002708 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b19      	cmp	r3, #25
 80038f6:	d907      	bls.n	8003908 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80038f8:	6a3b      	ldr	r3, [r7, #32]
 80038fa:	f043 0320 	orr.w	r3, r3, #32
 80038fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003906:	e006      	b.n	8003916 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	2b20      	cmp	r3, #32
 8003914:	d1e9      	bne.n	80038ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b20      	cmp	r3, #32
 8003922:	d003      	beq.n	800392c <I2C_IsErrorOccurred+0xe0>
 8003924:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003928:	2b00      	cmp	r3, #0
 800392a:	d0aa      	beq.n	8003882 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800392c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003930:	2b00      	cmp	r3, #0
 8003932:	d103      	bne.n	800393c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2220      	movs	r2, #32
 800393a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	f043 0304 	orr.w	r3, r3, #4
 8003942:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00b      	beq.n	8003974 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f44f 7280 	mov.w	r2, #256	; 0x100
 800396c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800397a:	2b00      	cmp	r3, #0
 800397c:	d00b      	beq.n	8003996 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	f043 0308 	orr.w	r3, r3, #8
 8003984:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800398e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00b      	beq.n	80039b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	f043 0302 	orr.w	r3, r3, #2
 80039a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80039b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01c      	beq.n	80039fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff fe45 	bl	8003650 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	6859      	ldr	r1, [r3, #4]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681a      	ldr	r2, [r3, #0]
 80039d0:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <I2C_IsErrorOccurred+0x1bc>)
 80039d2:	400b      	ands	r3, r1
 80039d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	431a      	orrs	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2220      	movs	r2, #32
 80039e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80039fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3728      	adds	r7, #40	; 0x28
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	fe00e800 	.word	0xfe00e800

08003a0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	460b      	mov	r3, r1
 8003a18:	817b      	strh	r3, [r7, #10]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a1e:	897b      	ldrh	r3, [r7, #10]
 8003a20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a24:	7a7b      	ldrb	r3, [r7, #9]
 8003a26:	041b      	lsls	r3, r3, #16
 8003a28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a32:	6a3b      	ldr	r3, [r7, #32]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003a3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	685a      	ldr	r2, [r3, #4]
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	0d5b      	lsrs	r3, r3, #21
 8003a46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003a4a:	4b08      	ldr	r3, [pc, #32]	; (8003a6c <I2C_TransferConfig+0x60>)
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	43db      	mvns	r3, r3
 8003a50:	ea02 0103 	and.w	r1, r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a5e:	bf00      	nop
 8003a60:	371c      	adds	r7, #28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	03ff63ff 	.word	0x03ff63ff

08003a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b20      	cmp	r3, #32
 8003a84:	d138      	bne.n	8003af8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a90:	2302      	movs	r3, #2
 8003a92:	e032      	b.n	8003afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2224      	movs	r2, #36	; 0x24
 8003aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f022 0201 	bic.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	6819      	ldr	r1, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f042 0201 	orr.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b085      	sub	sp, #20
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
 8003b0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	d139      	bne.n	8003b90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d101      	bne.n	8003b2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b26:	2302      	movs	r3, #2
 8003b28:	e033      	b.n	8003b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2224      	movs	r2, #36	; 0x24
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 0201 	bic.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	e000      	b.n	8003b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
  }
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3714      	adds	r7, #20
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ba0:	b08f      	sub	sp, #60	; 0x3c
 8003ba2:	af0a      	add	r7, sp, #40	; 0x28
 8003ba4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	e116      	b.n	8003dde <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d106      	bne.n	8003bd0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f007 fb52 	bl	800b274 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d102      	bne.n	8003bea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f004 f96b 	bl	8007eca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	687e      	ldr	r6, [r7, #4]
 8003bfc:	466d      	mov	r5, sp
 8003bfe:	f106 0410 	add.w	r4, r6, #16
 8003c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c12:	1d33      	adds	r3, r6, #4
 8003c14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c16:	6838      	ldr	r0, [r7, #0]
 8003c18:	f004 f87d 	bl	8007d16 <USB_CoreInit>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d005      	beq.n	8003c2e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2202      	movs	r2, #2
 8003c26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0d7      	b.n	8003dde <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2100      	movs	r1, #0
 8003c34:	4618      	mov	r0, r3
 8003c36:	f004 f959 	bl	8007eec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	73fb      	strb	r3, [r7, #15]
 8003c3e:	e04a      	b.n	8003cd6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c40:	7bfa      	ldrb	r2, [r7, #15]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	333d      	adds	r3, #61	; 0x3d
 8003c50:	2201      	movs	r2, #1
 8003c52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c54:	7bfa      	ldrb	r2, [r7, #15]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	00db      	lsls	r3, r3, #3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	333c      	adds	r3, #60	; 0x3c
 8003c64:	7bfa      	ldrb	r2, [r7, #15]
 8003c66:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c68:	7bfa      	ldrb	r2, [r7, #15]
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	b298      	uxth	r0, r3
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	00db      	lsls	r3, r3, #3
 8003c74:	4413      	add	r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	3356      	adds	r3, #86	; 0x56
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c80:	7bfa      	ldrb	r2, [r7, #15]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	00db      	lsls	r3, r3, #3
 8003c88:	4413      	add	r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	3340      	adds	r3, #64	; 0x40
 8003c90:	2200      	movs	r2, #0
 8003c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c94:	7bfa      	ldrb	r2, [r7, #15]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3344      	adds	r3, #68	; 0x44
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	3348      	adds	r3, #72	; 0x48
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003cbc:	7bfa      	ldrb	r2, [r7, #15]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	00db      	lsls	r3, r3, #3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	334c      	adds	r3, #76	; 0x4c
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	73fb      	strb	r3, [r7, #15]
 8003cd6:	7bfa      	ldrb	r2, [r7, #15]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d3af      	bcc.n	8003c40 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	73fb      	strb	r3, [r7, #15]
 8003ce4:	e044      	b.n	8003d70 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cfc:	7bfa      	ldrb	r2, [r7, #15]
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	4613      	mov	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d12:	7bfa      	ldrb	r2, [r7, #15]
 8003d14:	6879      	ldr	r1, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	00db      	lsls	r3, r3, #3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	440b      	add	r3, r1
 8003d20:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003d24:	2200      	movs	r2, #0
 8003d26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d28:	7bfa      	ldrb	r2, [r7, #15]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	4413      	add	r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d3e:	7bfa      	ldrb	r2, [r7, #15]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	00db      	lsls	r3, r3, #3
 8003d46:	4413      	add	r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d54:	7bfa      	ldrb	r2, [r7, #15]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003d66:	2200      	movs	r2, #0
 8003d68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d6a:	7bfb      	ldrb	r3, [r7, #15]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	73fb      	strb	r3, [r7, #15]
 8003d70:	7bfa      	ldrb	r2, [r7, #15]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d3b5      	bcc.n	8003ce6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	603b      	str	r3, [r7, #0]
 8003d80:	687e      	ldr	r6, [r7, #4]
 8003d82:	466d      	mov	r5, sp
 8003d84:	f106 0410 	add.w	r4, r6, #16
 8003d88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d94:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d98:	1d33      	adds	r3, r6, #4
 8003d9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d9c:	6838      	ldr	r0, [r7, #0]
 8003d9e:	f004 f8f1 	bl	8007f84 <USB_DevInit>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d005      	beq.n	8003db4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e014      	b.n	8003dde <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d102      	bne.n	8003dd2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f001 f851 	bl	8004e74 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f005 f89f 	bl	8008f1a <USB_DevDisconnect>

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3714      	adds	r7, #20
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003de6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b084      	sub	sp, #16
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d101      	bne.n	8003e02 <HAL_PCD_Start+0x1c>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e01c      	b.n	8003e3c <HAL_PCD_Start+0x56>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2201      	movs	r2, #1
 8003e06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d105      	bne.n	8003e1e <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f004 f840 	bl	8007ea8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f005 f853 	bl	8008ed8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	3710      	adds	r7, #16
 8003e40:	46bd      	mov	sp, r7
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e44:	b590      	push	{r4, r7, lr}
 8003e46:	b08d      	sub	sp, #52	; 0x34
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e52:	6a3b      	ldr	r3, [r7, #32]
 8003e54:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f005 f911 	bl	8009082 <USB_GetMode>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f040 847e 	bne.w	8004764 <HAL_PCD_IRQHandler+0x920>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f005 f875 	bl	8008f5c <USB_ReadInterrupts>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	f000 8474 	beq.w	8004762 <HAL_PCD_IRQHandler+0x91e>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	0a1b      	lsrs	r3, r3, #8
 8003e84:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f005 f862 	bl	8008f5c <USB_ReadInterrupts>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d107      	bne.n	8003eb2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695a      	ldr	r2, [r3, #20]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f002 0202 	and.w	r2, r2, #2
 8003eb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f005 f850 	bl	8008f5c <USB_ReadInterrupts>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b10      	cmp	r3, #16
 8003ec4:	d161      	bne.n	8003f8a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	699a      	ldr	r2, [r3, #24]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 0210 	bic.w	r2, r2, #16
 8003ed4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	f003 020f 	and.w	r2, r3, #15
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	3304      	adds	r3, #4
 8003ef4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	0c5b      	lsrs	r3, r3, #17
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	2b02      	cmp	r3, #2
 8003f00:	d124      	bne.n	8003f4c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d035      	beq.n	8003f7a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	091b      	lsrs	r3, r3, #4
 8003f16:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6a38      	ldr	r0, [r7, #32]
 8003f22:	f004 fe87 	bl	8008c34 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	091b      	lsrs	r3, r3, #4
 8003f2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f32:	441a      	add	r2, r3
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	695a      	ldr	r2, [r3, #20]
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	091b      	lsrs	r3, r3, #4
 8003f40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f44:	441a      	add	r2, r3
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	615a      	str	r2, [r3, #20]
 8003f4a:	e016      	b.n	8003f7a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	0c5b      	lsrs	r3, r3, #17
 8003f50:	f003 030f 	and.w	r3, r3, #15
 8003f54:	2b06      	cmp	r3, #6
 8003f56:	d110      	bne.n	8003f7a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f5e:	2208      	movs	r2, #8
 8003f60:	4619      	mov	r1, r3
 8003f62:	6a38      	ldr	r0, [r7, #32]
 8003f64:	f004 fe66 	bl	8008c34 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	695a      	ldr	r2, [r3, #20]
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f74:	441a      	add	r2, r3
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699a      	ldr	r2, [r3, #24]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f042 0210 	orr.w	r2, r2, #16
 8003f88:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f004 ffe4 	bl	8008f5c <USB_ReadInterrupts>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f9e:	f040 80a7 	bne.w	80040f0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f004 ffe9 	bl	8008f82 <USB_ReadDevAllOutEpInterrupt>
 8003fb0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003fb2:	e099      	b.n	80040e8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 808e 	beq.w	80040dc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	4611      	mov	r1, r2
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f005 f80d 	bl	8008fea <USB_ReadDevOutEPInterrupt>
 8003fd0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00c      	beq.n	8003ff6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe8:	461a      	mov	r2, r3
 8003fea:	2301      	movs	r3, #1
 8003fec:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003fee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 fe65 	bl	8004cc0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00c      	beq.n	800401a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400c:	461a      	mov	r2, r3
 800400e:	2308      	movs	r3, #8
 8004010:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004012:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f000 fea1 	bl	8004d5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	461a      	mov	r2, r3
 8004032:	2310      	movs	r3, #16
 8004034:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	f003 0302 	and.w	r3, r3, #2
 800403c:	2b00      	cmp	r3, #0
 800403e:	d030      	beq.n	80040a2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004048:	2b80      	cmp	r3, #128	; 0x80
 800404a:	d109      	bne.n	8004060 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800405a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800405e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	3304      	adds	r3, #4
 8004074:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	78db      	ldrb	r3, [r3, #3]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d108      	bne.n	8004090 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2200      	movs	r2, #0
 8004082:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	b2db      	uxtb	r3, r3
 8004088:	4619      	mov	r1, r3
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f007 fa58 	bl	800b540 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409c:	461a      	mov	r2, r3
 800409e:	2302      	movs	r3, #2
 80040a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f003 0320 	and.w	r3, r3, #32
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	461a      	mov	r2, r3
 80040ba:	2320      	movs	r3, #32
 80040bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d009      	beq.n	80040dc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d4:	461a      	mov	r2, r3
 80040d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040da:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	3301      	adds	r3, #1
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	085b      	lsrs	r3, r3, #1
 80040e6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	f47f af62 	bne.w	8003fb4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f004 ff31 	bl	8008f5c <USB_ReadInterrupts>
 80040fa:	4603      	mov	r3, r0
 80040fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004100:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004104:	f040 80a4 	bne.w	8004250 <HAL_PCD_IRQHandler+0x40c>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f004 ff52 	bl	8008fb6 <USB_ReadDevAllInEpInterrupt>
 8004112:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004118:	e096      	b.n	8004248 <HAL_PCD_IRQHandler+0x404>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800411a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800411c:	f003 0301 	and.w	r3, r3, #1
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 808b 	beq.w	800423c <HAL_PCD_IRQHandler+0x3f8>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f004 ff78 	bl	8009026 <USB_ReadDevInEPInterrupt>
 8004136:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d020      	beq.n	8004184 <HAL_PCD_IRQHandler+0x340>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	2201      	movs	r2, #1
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004156:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	43db      	mvns	r3, r3
 800415c:	69f9      	ldr	r1, [r7, #28]
 800415e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004162:	4013      	ands	r3, r2
 8004164:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004168:	015a      	lsls	r2, r3, #5
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	4413      	add	r3, r2
 800416e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004172:	461a      	mov	r2, r3
 8004174:	2301      	movs	r3, #1
 8004176:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	b2db      	uxtb	r3, r3
 800417c:	4619      	mov	r1, r3
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f007 f949 	bl	800b416 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d008      	beq.n	80041a0 <HAL_PCD_IRQHandler+0x35c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419a:	461a      	mov	r2, r3
 800419c:	2308      	movs	r3, #8
 800419e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f003 0310 	and.w	r3, r3, #16
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d008      	beq.n	80041bc <HAL_PCD_IRQHandler+0x378>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b6:	461a      	mov	r2, r3
 80041b8:	2310      	movs	r3, #16
 80041ba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d008      	beq.n	80041d8 <HAL_PCD_IRQHandler+0x394>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d2:	461a      	mov	r2, r3
 80041d4:	2340      	movs	r3, #64	; 0x40
 80041d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d023      	beq.n	800422a <HAL_PCD_IRQHandler+0x3e6>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80041e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041e4:	6a38      	ldr	r0, [r7, #32]
 80041e6:	f004 f80f 	bl	8008208 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	4613      	mov	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	3338      	adds	r3, #56	; 0x38
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	4413      	add	r3, r2
 80041fa:	3304      	adds	r3, #4
 80041fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	78db      	ldrb	r3, [r3, #3]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d108      	bne.n	8004218 <HAL_PCD_IRQHandler+0x3d4>
            {
              ep->is_iso_incomplete = 0U;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2200      	movs	r2, #0
 800420a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	b2db      	uxtb	r3, r3
 8004210:	4619      	mov	r1, r3
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f007 f9a6 	bl	800b564 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	015a      	lsls	r2, r3, #5
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	4413      	add	r3, r2
 8004220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004224:	461a      	mov	r2, r3
 8004226:	2302      	movs	r3, #2
 8004228:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_PCD_IRQHandler+0x3f8>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 fcba 	bl	8004bb0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	3301      	adds	r3, #1
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004244:	085b      	lsrs	r3, r3, #1
 8004246:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	f47f af65 	bne.w	800411a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f004 fe81 	bl	8008f5c <USB_ReadInterrupts>
 800425a:	4603      	mov	r3, r0
 800425c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004260:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004264:	d122      	bne.n	80042ac <HAL_PCD_IRQHandler+0x468>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	69fa      	ldr	r2, [r7, #28]
 8004270:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004274:	f023 0301 	bic.w	r3, r3, #1
 8004278:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004280:	2b01      	cmp	r3, #1
 8004282:	d108      	bne.n	8004296 <HAL_PCD_IRQHandler+0x452>
      {
        hpcd->LPM_State = LPM_L0;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800428c:	2100      	movs	r1, #0
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f007 fbc6 	bl	800ba20 <HAL_PCDEx_LPM_Callback>
 8004294:	e002      	b.n	800429c <HAL_PCD_IRQHandler+0x458>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f007 f92a 	bl	800b4f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	695a      	ldr	r2, [r3, #20]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80042aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f004 fe53 	bl	8008f5c <USB_ReadInterrupts>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042c0:	d112      	bne.n	80042e8 <HAL_PCD_IRQHandler+0x4a4>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d102      	bne.n	80042d8 <HAL_PCD_IRQHandler+0x494>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f007 f8e6 	bl	800b4a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695a      	ldr	r2, [r3, #20]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80042e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f004 fe35 	bl	8008f5c <USB_ReadInterrupts>
 80042f2:	4603      	mov	r3, r0
 80042f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80042f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042fc:	d121      	bne.n	8004342 <HAL_PCD_IRQHandler+0x4fe>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800430c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d111      	bne.n	800433c <HAL_PCD_IRQHandler+0x4f8>
      {
        hpcd->LPM_State = LPM_L1;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004326:	089b      	lsrs	r3, r3, #2
 8004328:	f003 020f 	and.w	r2, r3, #15
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004332:	2101      	movs	r1, #1
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f007 fb73 	bl	800ba20 <HAL_PCDEx_LPM_Callback>
 800433a:	e002      	b.n	8004342 <HAL_PCD_IRQHandler+0x4fe>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f007 f8b1 	bl	800b4a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f004 fe08 	bl	8008f5c <USB_ReadInterrupts>
 800434c:	4603      	mov	r3, r0
 800434e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004356:	f040 80b5 	bne.w	80044c4 <HAL_PCD_IRQHandler+0x680>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	69fa      	ldr	r2, [r7, #28]
 8004364:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004368:	f023 0301 	bic.w	r3, r3, #1
 800436c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2110      	movs	r1, #16
 8004374:	4618      	mov	r0, r3
 8004376:	f003 ff47 	bl	8008208 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800437a:	2300      	movs	r3, #0
 800437c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800437e:	e046      	b.n	800440e <HAL_PCD_IRQHandler+0x5ca>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438c:	461a      	mov	r2, r3
 800438e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004392:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043a4:	0151      	lsls	r1, r2, #5
 80043a6:	69fa      	ldr	r2, [r7, #28]
 80043a8:	440a      	add	r2, r1
 80043aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80043b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b6:	015a      	lsls	r2, r3, #5
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	4413      	add	r3, r2
 80043bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c0:	461a      	mov	r2, r3
 80043c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80043c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043d8:	0151      	lsls	r1, r2, #5
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	440a      	add	r2, r1
 80043de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f8:	0151      	lsls	r1, r2, #5
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	440a      	add	r2, r1
 80043fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004402:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004406:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440a:	3301      	adds	r3, #1
 800440c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004414:	429a      	cmp	r2, r3
 8004416:	d3b3      	bcc.n	8004380 <HAL_PCD_IRQHandler+0x53c>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004426:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800442a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004430:	2b00      	cmp	r3, #0
 8004432:	d016      	beq.n	8004462 <HAL_PCD_IRQHandler+0x61e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800443a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004444:	f043 030b 	orr.w	r3, r3, #11
 8004448:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004452:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800445a:	f043 030b 	orr.w	r3, r3, #11
 800445e:	6453      	str	r3, [r2, #68]	; 0x44
 8004460:	e015      	b.n	800448e <HAL_PCD_IRQHandler+0x64a>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	69fa      	ldr	r2, [r7, #28]
 800446c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004470:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004474:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004478:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	69fa      	ldr	r2, [r7, #28]
 8004484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004488:	f043 030b 	orr.w	r3, r3, #11
 800448c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800449c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80044a0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044ac:	4619      	mov	r1, r3
 80044ae:	4610      	mov	r0, r2
 80044b0:	f004 fe18 	bl	80090e4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695a      	ldr	r2, [r3, #20]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80044c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f004 fd47 	bl	8008f5c <USB_ReadInterrupts>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044d8:	d124      	bne.n	8004524 <HAL_PCD_IRQHandler+0x6e0>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f004 fddd 	bl	800909e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4618      	mov	r0, r3
 80044ea:	f003 ff0a 	bl	8008302 <USB_GetDevSpeed>
 80044ee:	4603      	mov	r3, r0
 80044f0:	461a      	mov	r2, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681c      	ldr	r4, [r3, #0]
 80044fa:	f001 fb87 	bl	8005c0c <HAL_RCC_GetHCLKFreq>
 80044fe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	4620      	mov	r0, r4
 800450a:	f003 fc31 	bl	8007d70 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f006 ffa9 	bl	800b466 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	695a      	ldr	r2, [r3, #20]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004522:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4618      	mov	r0, r3
 800452a:	f004 fd17 	bl	8008f5c <USB_ReadInterrupts>
 800452e:	4603      	mov	r3, r0
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b08      	cmp	r3, #8
 8004536:	d10a      	bne.n	800454e <HAL_PCD_IRQHandler+0x70a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f006 ff86 	bl	800b44a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	695a      	ldr	r2, [r3, #20]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f002 0208 	and.w	r2, r2, #8
 800454c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4618      	mov	r0, r3
 8004554:	f004 fd02 	bl	8008f5c <USB_ReadInterrupts>
 8004558:	4603      	mov	r3, r0
 800455a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455e:	2b80      	cmp	r3, #128	; 0x80
 8004560:	d122      	bne.n	80045a8 <HAL_PCD_IRQHandler+0x764>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800456a:	6a3b      	ldr	r3, [r7, #32]
 800456c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800456e:	2301      	movs	r3, #1
 8004570:	627b      	str	r3, [r7, #36]	; 0x24
 8004572:	e014      	b.n	800459e <HAL_PCD_IRQHandler+0x75a>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004578:	4613      	mov	r3, r2
 800457a:	00db      	lsls	r3, r3, #3
 800457c:	4413      	add	r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d105      	bne.n	8004598 <HAL_PCD_IRQHandler+0x754>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800458c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458e:	b2db      	uxtb	r3, r3
 8004590:	4619      	mov	r1, r3
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fadb 	bl	8004b4e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	3301      	adds	r3, #1
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d3e5      	bcc.n	8004574 <HAL_PCD_IRQHandler+0x730>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f004 fcd5 	bl	8008f5c <USB_ReadInterrupts>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045bc:	d13b      	bne.n	8004636 <HAL_PCD_IRQHandler+0x7f2>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045be:	2301      	movs	r3, #1
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
 80045c2:	e02b      	b.n	800461c <HAL_PCD_IRQHandler+0x7d8>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045d4:	6879      	ldr	r1, [r7, #4]
 80045d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d8:	4613      	mov	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	440b      	add	r3, r1
 80045e2:	3340      	adds	r3, #64	; 0x40
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d115      	bne.n	8004616 <HAL_PCD_IRQHandler+0x7d2>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80045ea:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	da12      	bge.n	8004616 <HAL_PCD_IRQHandler+0x7d2>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045f4:	4613      	mov	r3, r2
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	4413      	add	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	333f      	adds	r3, #63	; 0x3f
 8004600:	2201      	movs	r2, #1
 8004602:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	b2db      	uxtb	r3, r3
 8004608:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800460c:	b2db      	uxtb	r3, r3
 800460e:	4619      	mov	r1, r3
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fa9c 	bl	8004b4e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	3301      	adds	r3, #1
 800461a:	627b      	str	r3, [r7, #36]	; 0x24
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004622:	429a      	cmp	r2, r3
 8004624:	d3ce      	bcc.n	80045c4 <HAL_PCD_IRQHandler+0x780>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695a      	ldr	r2, [r3, #20]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004634:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f004 fc8e 	bl	8008f5c <USB_ReadInterrupts>
 8004640:	4603      	mov	r3, r0
 8004642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004646:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800464a:	d155      	bne.n	80046f8 <HAL_PCD_IRQHandler+0x8b4>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800464c:	2301      	movs	r3, #1
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
 8004650:	e045      	b.n	80046de <HAL_PCD_IRQHandler+0x89a>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004666:	4613      	mov	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	440b      	add	r3, r1
 8004670:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d12e      	bne.n	80046d8 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800467a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800467c:	2b00      	cmp	r3, #0
 800467e:	da2b      	bge.n	80046d8 <HAL_PCD_IRQHandler+0x894>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800468c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004690:	429a      	cmp	r2, r3
 8004692:	d121      	bne.n	80046d8 <HAL_PCD_IRQHandler+0x894>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004698:	4613      	mov	r3, r2
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	4413      	add	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80046b6:	6a3b      	ldr	r3, [r7, #32]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10a      	bne.n	80046d8 <HAL_PCD_IRQHandler+0x894>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	69fa      	ldr	r2, [r7, #28]
 80046cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046d4:	6053      	str	r3, [r2, #4]
            break;
 80046d6:	e007      	b.n	80046e8 <HAL_PCD_IRQHandler+0x8a4>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	3301      	adds	r3, #1
 80046dc:	627b      	str	r3, [r7, #36]	; 0x24
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d3b4      	bcc.n	8004652 <HAL_PCD_IRQHandler+0x80e>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80046f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f004 fc2d 	bl	8008f5c <USB_ReadInterrupts>
 8004702:	4603      	mov	r3, r0
 8004704:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800470c:	d10a      	bne.n	8004724 <HAL_PCD_IRQHandler+0x8e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f006 ff3a 	bl	800b588 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004722:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f004 fc17 	bl	8008f5c <USB_ReadInterrupts>
 800472e:	4603      	mov	r3, r0
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b04      	cmp	r3, #4
 8004736:	d115      	bne.n	8004764 <HAL_PCD_IRQHandler+0x920>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_PCD_IRQHandler+0x90c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f006 ff2a 	bl	800b5a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	6859      	ldr	r1, [r3, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	430a      	orrs	r2, r1
 800475e:	605a      	str	r2, [r3, #4]
 8004760:	e000      	b.n	8004764 <HAL_PCD_IRQHandler+0x920>
      return;
 8004762:	bf00      	nop
    }
  }
}
 8004764:	3734      	adds	r7, #52	; 0x34
 8004766:	46bd      	mov	sp, r7
 8004768:	bd90      	pop	{r4, r7, pc}

0800476a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b082      	sub	sp, #8
 800476e:	af00      	add	r7, sp, #0
 8004770:	6078      	str	r0, [r7, #4]
 8004772:	460b      	mov	r3, r1
 8004774:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_PCD_SetAddress+0x1a>
 8004780:	2302      	movs	r3, #2
 8004782:	e013      	b.n	80047ac <HAL_PCD_SetAddress+0x42>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	78fa      	ldrb	r2, [r7, #3]
 800479a:	4611      	mov	r1, r2
 800479c:	4618      	mov	r0, r3
 800479e:	f004 fb75 	bl	8008e8c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3708      	adds	r7, #8
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	4608      	mov	r0, r1
 80047be:	4611      	mov	r1, r2
 80047c0:	461a      	mov	r2, r3
 80047c2:	4603      	mov	r3, r0
 80047c4:	70fb      	strb	r3, [r7, #3]
 80047c6:	460b      	mov	r3, r1
 80047c8:	803b      	strh	r3, [r7, #0]
 80047ca:	4613      	mov	r3, r2
 80047cc:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	da0f      	bge.n	80047fa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047da:	78fb      	ldrb	r3, [r7, #3]
 80047dc:	f003 020f 	and.w	r2, r3, #15
 80047e0:	4613      	mov	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	3338      	adds	r3, #56	; 0x38
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	4413      	add	r3, r2
 80047ee:	3304      	adds	r3, #4
 80047f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	705a      	strb	r2, [r3, #1]
 80047f8:	e00f      	b.n	800481a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	f003 020f 	and.w	r2, r3, #15
 8004800:	4613      	mov	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4413      	add	r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	4413      	add	r3, r2
 8004810:	3304      	adds	r3, #4
 8004812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800481a:	78fb      	ldrb	r3, [r7, #3]
 800481c:	f003 030f 	and.w	r3, r3, #15
 8004820:	b2da      	uxtb	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004826:	883a      	ldrh	r2, [r7, #0]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	78ba      	ldrb	r2, [r7, #2]
 8004830:	711a      	strb	r2, [r3, #4]

#if defined (USB_OTG_FS)
  if (ep->is_in != 0U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	785b      	ldrb	r3, [r3, #1]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d004      	beq.n	8004844 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	b29a      	uxth	r2, r3
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	835a      	strh	r2, [r3, #26]
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004844:	78bb      	ldrb	r3, [r7, #2]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d102      	bne.n	8004850 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004856:	2b01      	cmp	r3, #1
 8004858:	d101      	bne.n	800485e <HAL_PCD_EP_Open+0xaa>
 800485a:	2302      	movs	r3, #2
 800485c:	e00e      	b.n	800487c <HAL_PCD_EP_Open+0xc8>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2201      	movs	r2, #1
 8004862:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68f9      	ldr	r1, [r7, #12]
 800486c:	4618      	mov	r0, r3
 800486e:	f003 fd67 	bl	8008340 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800487a:	7afb      	ldrb	r3, [r7, #11]
}
 800487c:	4618      	mov	r0, r3
 800487e:	3710      	adds	r7, #16
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}

08004884 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004894:	2b00      	cmp	r3, #0
 8004896:	da0f      	bge.n	80048b8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	f003 020f 	and.w	r2, r3, #15
 800489e:	4613      	mov	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	3338      	adds	r3, #56	; 0x38
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	4413      	add	r3, r2
 80048ac:	3304      	adds	r3, #4
 80048ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	705a      	strb	r2, [r3, #1]
 80048b6:	e00f      	b.n	80048d8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	f003 020f 	and.w	r2, r3, #15
 80048be:	4613      	mov	r3, r2
 80048c0:	00db      	lsls	r3, r3, #3
 80048c2:	4413      	add	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	4413      	add	r3, r2
 80048ce:	3304      	adds	r3, #4
 80048d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80048d8:	78fb      	ldrb	r3, [r7, #3]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_PCD_EP_Close+0x6e>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e00e      	b.n	8004910 <HAL_PCD_EP_Close+0x8c>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68f9      	ldr	r1, [r7, #12]
 8004900:	4618      	mov	r0, r3
 8004902:	f003 fda5 	bl	8008450 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800490e:	2300      	movs	r3, #0
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b086      	sub	sp, #24
 800491c:	af00      	add	r7, sp, #0
 800491e:	60f8      	str	r0, [r7, #12]
 8004920:	607a      	str	r2, [r7, #4]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	460b      	mov	r3, r1
 8004926:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004928:	7afb      	ldrb	r3, [r7, #11]
 800492a:	f003 020f 	and.w	r2, r3, #15
 800492e:	4613      	mov	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4413      	add	r3, r2
 800493e:	3304      	adds	r3, #4
 8004940:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	2200      	movs	r2, #0
 8004952:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	2200      	movs	r2, #0
 8004958:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800495a:	7afb      	ldrb	r3, [r7, #11]
 800495c:	f003 030f 	and.w	r3, r3, #15
 8004960:	b2da      	uxtb	r2, r3
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6979      	ldr	r1, [r7, #20]
 800496c:	4618      	mov	r0, r3
 800496e:	f003 fe4b 	bl	8008608 <USB_EPStartXfer>

  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	60f8      	str	r0, [r7, #12]
 8004984:	607a      	str	r2, [r7, #4]
 8004986:	603b      	str	r3, [r7, #0]
 8004988:	460b      	mov	r3, r1
 800498a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800498c:	7afb      	ldrb	r3, [r7, #11]
 800498e:	f003 020f 	and.w	r2, r3, #15
 8004992:	4613      	mov	r3, r2
 8004994:	00db      	lsls	r3, r3, #3
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	3338      	adds	r3, #56	; 0x38
 800499c:	68fa      	ldr	r2, [r7, #12]
 800499e:	4413      	add	r3, r2
 80049a0:	3304      	adds	r3, #4
 80049a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	611a      	str	r2, [r3, #16]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2200      	movs	r2, #0
 80049b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2201      	movs	r2, #1
 80049ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049bc:	7afb      	ldrb	r3, [r7, #11]
 80049be:	f003 030f 	and.w	r3, r3, #15
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6979      	ldr	r1, [r7, #20]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f003 fe1a 	bl	8008608 <USB_EPStartXfer>

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3718      	adds	r7, #24
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
 80049e6:	460b      	mov	r3, r1
 80049e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049ea:	78fb      	ldrb	r3, [r7, #3]
 80049ec:	f003 020f 	and.w	r2, r3, #15
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d901      	bls.n	80049fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e04e      	b.n	8004a9a <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	da0f      	bge.n	8004a24 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a04:	78fb      	ldrb	r3, [r7, #3]
 8004a06:	f003 020f 	and.w	r2, r3, #15
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	4413      	add	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	3338      	adds	r3, #56	; 0x38
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	4413      	add	r3, r2
 8004a18:	3304      	adds	r3, #4
 8004a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	705a      	strb	r2, [r3, #1]
 8004a22:	e00d      	b.n	8004a40 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a24:	78fa      	ldrb	r2, [r7, #3]
 8004a26:	4613      	mov	r3, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	4413      	add	r3, r2
 8004a36:	3304      	adds	r3, #4
 8004a38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2201      	movs	r2, #1
 8004a44:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_PCD_EP_SetStall+0x82>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e01c      	b.n	8004a9a <HAL_PCD_EP_SetStall+0xbc>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68f9      	ldr	r1, [r7, #12]
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f004 f938 	bl	8008ce4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a74:	78fb      	ldrb	r3, [r7, #3]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d108      	bne.n	8004a90 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	f004 fb2a 	bl	80090e4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b084      	sub	sp, #16
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	460b      	mov	r3, r1
 8004aac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004aae:	78fb      	ldrb	r3, [r7, #3]
 8004ab0:	f003 020f 	and.w	r2, r3, #15
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d901      	bls.n	8004ac0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e042      	b.n	8004b46 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ac0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	da0f      	bge.n	8004ae8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ac8:	78fb      	ldrb	r3, [r7, #3]
 8004aca:	f003 020f 	and.w	r2, r3, #15
 8004ace:	4613      	mov	r3, r2
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	4413      	add	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	3338      	adds	r3, #56	; 0x38
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	4413      	add	r3, r2
 8004adc:	3304      	adds	r3, #4
 8004ade:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	705a      	strb	r2, [r3, #1]
 8004ae6:	e00f      	b.n	8004b08 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	f003 020f 	and.w	r2, r3, #15
 8004aee:	4613      	mov	r3, r2
 8004af0:	00db      	lsls	r3, r3, #3
 8004af2:	4413      	add	r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	4413      	add	r3, r2
 8004afe:	3304      	adds	r3, #4
 8004b00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b0e:	78fb      	ldrb	r3, [r7, #3]
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_PCD_EP_ClrStall+0x86>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e00e      	b.n	8004b46 <HAL_PCD_EP_ClrStall+0xa4>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68f9      	ldr	r1, [r7, #12]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f004 f942 	bl	8008dc0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b44:	2300      	movs	r3, #0
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3710      	adds	r7, #16
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}

08004b4e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b4e:	b580      	push	{r7, lr}
 8004b50:	b084      	sub	sp, #16
 8004b52:	af00      	add	r7, sp, #0
 8004b54:	6078      	str	r0, [r7, #4]
 8004b56:	460b      	mov	r3, r1
 8004b58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	da0c      	bge.n	8004b7c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b62:	78fb      	ldrb	r3, [r7, #3]
 8004b64:	f003 020f 	and.w	r2, r3, #15
 8004b68:	4613      	mov	r3, r2
 8004b6a:	00db      	lsls	r3, r3, #3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	3338      	adds	r3, #56	; 0x38
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	4413      	add	r3, r2
 8004b76:	3304      	adds	r3, #4
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	e00c      	b.n	8004b96 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	f003 020f 	and.w	r2, r3, #15
 8004b82:	4613      	mov	r3, r2
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	4413      	add	r3, r2
 8004b88:	009b      	lsls	r3, r3, #2
 8004b8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	4413      	add	r3, r2
 8004b92:	3304      	adds	r3, #4
 8004b94:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68f9      	ldr	r1, [r7, #12]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f003 ff65 	bl	8008a6c <USB_EPStopXfer>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004ba6:	7afb      	ldrb	r3, [r7, #11]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3710      	adds	r7, #16
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}

08004bb0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b088      	sub	sp, #32
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
 8004bb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	4613      	mov	r3, r2
 8004bc8:	00db      	lsls	r3, r3, #3
 8004bca:	4413      	add	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	3338      	adds	r3, #56	; 0x38
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	3304      	adds	r3, #4
 8004bd6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	695a      	ldr	r2, [r3, #20]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d901      	bls.n	8004be8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e067      	b.n	8004cb8 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	691a      	ldr	r2, [r3, #16]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d902      	bls.n	8004c04 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	3303      	adds	r3, #3
 8004c08:	089b      	lsrs	r3, r3, #2
 8004c0a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c0c:	e026      	b.n	8004c5c <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	691a      	ldr	r2, [r3, #16]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d902      	bls.n	8004c2a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	3303      	adds	r3, #3
 8004c2e:	089b      	lsrs	r3, r3, #2
 8004c30:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	68d9      	ldr	r1, [r3, #12]
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	69fb      	ldr	r3, [r7, #28]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	6978      	ldr	r0, [r7, #20]
 8004c40:	f003 ffbe 	bl	8008bc0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	68da      	ldr	r2, [r3, #12]
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	441a      	add	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	695a      	ldr	r2, [r3, #20]
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	441a      	add	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d809      	bhi.n	8004c86 <PCD_WriteEmptyTxFifo+0xd6>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d203      	bcs.n	8004c86 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d1c3      	bne.n	8004c0e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d811      	bhi.n	8004cb6 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	2201      	movs	r2, #1
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	43db      	mvns	r3, r3
 8004cac:	6939      	ldr	r1, [r7, #16]
 8004cae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
 8004cc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	333c      	adds	r3, #60	; 0x3c
 8004cd8:	3304      	adds	r3, #4
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	4a19      	ldr	r2, [pc, #100]	; (8004d58 <PCD_EP_OutXfrComplete_int+0x98>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d124      	bne.n	8004d40 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	015a      	lsls	r2, r3, #5
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	4413      	add	r3, r2
 8004d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d12:	6093      	str	r3, [r2, #8]
 8004d14:	e01a      	b.n	8004d4c <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f003 0320 	and.w	r3, r3, #32
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	2320      	movs	r3, #32
 8004d30:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	4619      	mov	r1, r3
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f006 fb51 	bl	800b3e0 <HAL_PCD_DataOutStageCallback>
 8004d3e:	e005      	b.n	8004d4c <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	4619      	mov	r1, r3
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f006 fb4a 	bl	800b3e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	4f54310a 	.word	0x4f54310a

08004d5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	333c      	adds	r3, #60	; 0x3c
 8004d74:	3304      	adds	r3, #4
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4a0c      	ldr	r2, [pc, #48]	; (8004dc0 <PCD_EP_OutSetupPacket_int+0x64>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d90e      	bls.n	8004db0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d009      	beq.n	8004db0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da8:	461a      	mov	r2, r3
 8004daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f006 fb03 	bl	800b3bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	3718      	adds	r7, #24
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bd80      	pop	{r7, pc}
 8004dc0:	4f54300a 	.word	0x4f54300a

08004dc4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	460b      	mov	r3, r1
 8004dce:	70fb      	strb	r3, [r7, #3]
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d107      	bne.n	8004df2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004de2:	883b      	ldrh	r3, [r7, #0]
 8004de4:	0419      	lsls	r1, r3, #16
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68ba      	ldr	r2, [r7, #8]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	629a      	str	r2, [r3, #40]	; 0x28
 8004df0:	e028      	b.n	8004e44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	0c1b      	lsrs	r3, r3, #16
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e00:	2300      	movs	r3, #0
 8004e02:	73fb      	strb	r3, [r7, #15]
 8004e04:	e00d      	b.n	8004e22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	3340      	adds	r3, #64	; 0x40
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	0c1b      	lsrs	r3, r3, #16
 8004e16:	68ba      	ldr	r2, [r7, #8]
 8004e18:	4413      	add	r3, r2
 8004e1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d3ec      	bcc.n	8004e06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e2c:	883b      	ldrh	r3, [r7, #0]
 8004e2e:	0418      	lsls	r0, r3, #16
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6819      	ldr	r1, [r3, #0]
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	4302      	orrs	r2, r0
 8004e3c:	3340      	adds	r3, #64	; 0x40
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	440b      	add	r3, r1
 8004e42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3714      	adds	r7, #20
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	887a      	ldrh	r2, [r7, #2]
 8004e64:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e66:	2300      	movs	r3, #0
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e72:	4770      	bx	lr

08004e74 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea6:	f043 0303 	orr.w	r3, r3, #3
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a04      	ldr	r2, [pc, #16]	; (8004ed8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ec6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004eca:	6013      	str	r3, [r2, #0]
}
 8004ecc:	bf00      	nop
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40007000 	.word	0x40007000

08004edc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004edc:	b480      	push	{r7}
 8004ede:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004ee0:	4b04      	ldr	r3, [pc, #16]	; (8004ef4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
 8004ef2:	bf00      	nop
 8004ef4:	40007000 	.word	0x40007000

08004ef8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f06:	d130      	bne.n	8004f6a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f08:	4b23      	ldr	r3, [pc, #140]	; (8004f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f14:	d038      	beq.n	8004f88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f16:	4b20      	ldr	r3, [pc, #128]	; (8004f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f1e:	4a1e      	ldr	r2, [pc, #120]	; (8004f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f20:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f24:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f26:	4b1d      	ldr	r3, [pc, #116]	; (8004f9c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2232      	movs	r2, #50	; 0x32
 8004f2c:	fb02 f303 	mul.w	r3, r2, r3
 8004f30:	4a1b      	ldr	r2, [pc, #108]	; (8004fa0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	0c9b      	lsrs	r3, r3, #18
 8004f38:	3301      	adds	r3, #1
 8004f3a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f3c:	e002      	b.n	8004f44 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3b01      	subs	r3, #1
 8004f42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f44:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f50:	d102      	bne.n	8004f58 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f2      	bne.n	8004f3e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f58:	4b0f      	ldr	r3, [pc, #60]	; (8004f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f5a:	695b      	ldr	r3, [r3, #20]
 8004f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f64:	d110      	bne.n	8004f88 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e00f      	b.n	8004f8a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f6a:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f76:	d007      	beq.n	8004f88 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004f78:	4b07      	ldr	r3, [pc, #28]	; (8004f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f80:	4a05      	ldr	r2, [pc, #20]	; (8004f98 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f86:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	40007000 	.word	0x40007000
 8004f9c:	20000000 	.word	0x20000000
 8004fa0:	431bde83 	.word	0x431bde83

08004fa4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004fa8:	4b05      	ldr	r3, [pc, #20]	; (8004fc0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fb2:	6053      	str	r3, [r2, #4]
}
 8004fb4:	bf00      	nop
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40007000 	.word	0x40007000

08004fc4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004fcc:	f7fd fb9c 	bl	8002708 <HAL_GetTick>
 8004fd0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e063      	b.n	80050a4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10b      	bne.n	8005000 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fd f843 	bl	800207c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8004ff6:	f241 3188 	movw	r1, #5000	; 0x1388
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f858 	bl	80050b0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	3b01      	subs	r3, #1
 8005010:	021a      	lsls	r2, r3, #8
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	9300      	str	r3, [sp, #0]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	2120      	movs	r1, #32
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f850 	bl	80050cc <QSPI_WaitFlagStateUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8005030:	7afb      	ldrb	r3, [r7, #11]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d131      	bne.n	800509a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005040:	f023 0310 	bic.w	r3, r3, #16
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6852      	ldr	r2, [r2, #4]
 8005048:	0611      	lsls	r1, r2, #24
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	68d2      	ldr	r2, [r2, #12]
 800504e:	4311      	orrs	r1, r2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6812      	ldr	r2, [r2, #0]
 8005054:	430b      	orrs	r3, r1
 8005056:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685a      	ldr	r2, [r3, #4]
 800505e:	4b13      	ldr	r3, [pc, #76]	; (80050ac <HAL_QSPI_Init+0xe8>)
 8005060:	4013      	ands	r3, r2
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6912      	ldr	r2, [r2, #16]
 8005066:	0411      	lsls	r1, r2, #16
 8005068:	687a      	ldr	r2, [r7, #4]
 800506a:	6952      	ldr	r2, [r2, #20]
 800506c:	4311      	orrs	r1, r2
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	6992      	ldr	r2, [r2, #24]
 8005072:	4311      	orrs	r1, r2
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6812      	ldr	r2, [r2, #0]
 8005078:	430b      	orrs	r3, r1
 800507a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2200      	movs	r2, #0
 8005090:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80050a2:	7afb      	ldrb	r3, [r7, #11]
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3710      	adds	r7, #16
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	ffe0f8fe 	.word	0xffe0f8fe

080050b0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	641a      	str	r2, [r3, #64]	; 0x40
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	4613      	mov	r3, r2
 80050da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80050dc:	e01a      	b.n	8005114 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e4:	d016      	beq.n	8005114 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e6:	f7fd fb0f 	bl	8002708 <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d302      	bcc.n	80050fc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10b      	bne.n	8005114 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2204      	movs	r2, #4
 8005100:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005108:	f043 0201 	orr.w	r2, r3, #1
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e00e      	b.n	8005132 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	4013      	ands	r3, r2
 800511e:	2b00      	cmp	r3, #0
 8005120:	bf14      	ite	ne
 8005122:	2301      	movne	r3, #1
 8005124:	2300      	moveq	r3, #0
 8005126:	b2db      	uxtb	r3, r3
 8005128:	461a      	mov	r2, r3
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	429a      	cmp	r2, r3
 800512e:	d1d6      	bne.n	80050de <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b088      	sub	sp, #32
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e3ca      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800514e:	4b97      	ldr	r3, [pc, #604]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005158:	4b94      	ldr	r3, [pc, #592]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0303 	and.w	r3, r3, #3
 8005160:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 80e4 	beq.w	8005338 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d007      	beq.n	8005186 <HAL_RCC_OscConfig+0x4a>
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	2b0c      	cmp	r3, #12
 800517a:	f040 808b 	bne.w	8005294 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2b01      	cmp	r3, #1
 8005182:	f040 8087 	bne.w	8005294 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005186:	4b89      	ldr	r3, [pc, #548]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d005      	beq.n	800519e <HAL_RCC_OscConfig+0x62>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e3a2      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1a      	ldr	r2, [r3, #32]
 80051a2:	4b82      	ldr	r3, [pc, #520]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0308 	and.w	r3, r3, #8
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d004      	beq.n	80051b8 <HAL_RCC_OscConfig+0x7c>
 80051ae:	4b7f      	ldr	r3, [pc, #508]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051b6:	e005      	b.n	80051c4 <HAL_RCC_OscConfig+0x88>
 80051b8:	4b7c      	ldr	r3, [pc, #496]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80051ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051be:	091b      	lsrs	r3, r3, #4
 80051c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d223      	bcs.n	8005210 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fd55 	bl	8005c7c <RCC_SetFlashLatencyFromMSIRange>
 80051d2:	4603      	mov	r3, r0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d001      	beq.n	80051dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e383      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051dc:	4b73      	ldr	r3, [pc, #460]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a72      	ldr	r2, [pc, #456]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80051e2:	f043 0308 	orr.w	r3, r3, #8
 80051e6:	6013      	str	r3, [r2, #0]
 80051e8:	4b70      	ldr	r3, [pc, #448]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	496d      	ldr	r1, [pc, #436]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051fa:	4b6c      	ldr	r3, [pc, #432]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	021b      	lsls	r3, r3, #8
 8005208:	4968      	ldr	r1, [pc, #416]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 800520a:	4313      	orrs	r3, r2
 800520c:	604b      	str	r3, [r1, #4]
 800520e:	e025      	b.n	800525c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005210:	4b66      	ldr	r3, [pc, #408]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a65      	ldr	r2, [pc, #404]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 8005216:	f043 0308 	orr.w	r3, r3, #8
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	4b63      	ldr	r3, [pc, #396]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	4960      	ldr	r1, [pc, #384]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 800522a:	4313      	orrs	r3, r2
 800522c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800522e:	4b5f      	ldr	r3, [pc, #380]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	495b      	ldr	r1, [pc, #364]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 800523e:	4313      	orrs	r3, r2
 8005240:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d109      	bne.n	800525c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	4618      	mov	r0, r3
 800524e:	f000 fd15 	bl	8005c7c <RCC_SetFlashLatencyFromMSIRange>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d001      	beq.n	800525c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e343      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800525c:	f000 fc4a 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 8005260:	4602      	mov	r2, r0
 8005262:	4b52      	ldr	r3, [pc, #328]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	091b      	lsrs	r3, r3, #4
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	4950      	ldr	r1, [pc, #320]	; (80053b0 <HAL_RCC_OscConfig+0x274>)
 800526e:	5ccb      	ldrb	r3, [r1, r3]
 8005270:	f003 031f 	and.w	r3, r3, #31
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
 8005278:	4a4e      	ldr	r2, [pc, #312]	; (80053b4 <HAL_RCC_OscConfig+0x278>)
 800527a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800527c:	4b4e      	ldr	r3, [pc, #312]	; (80053b8 <HAL_RCC_OscConfig+0x27c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4618      	mov	r0, r3
 8005282:	f7fd f9f1 	bl	8002668 <HAL_InitTick>
 8005286:	4603      	mov	r3, r0
 8005288:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d052      	beq.n	8005336 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005290:	7bfb      	ldrb	r3, [r7, #15]
 8005292:	e327      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d032      	beq.n	8005302 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800529c:	4b43      	ldr	r3, [pc, #268]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a42      	ldr	r2, [pc, #264]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80052a2:	f043 0301 	orr.w	r3, r3, #1
 80052a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052a8:	f7fd fa2e 	bl	8002708 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052b0:	f7fd fa2a 	bl	8002708 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e310      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80052c2:	4b3a      	ldr	r3, [pc, #232]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0f0      	beq.n	80052b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052ce:	4b37      	ldr	r3, [pc, #220]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a36      	ldr	r2, [pc, #216]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80052d4:	f043 0308 	orr.w	r3, r3, #8
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	4b34      	ldr	r3, [pc, #208]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	4931      	ldr	r1, [pc, #196]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80052e8:	4313      	orrs	r3, r2
 80052ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80052ec:	4b2f      	ldr	r3, [pc, #188]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	69db      	ldr	r3, [r3, #28]
 80052f8:	021b      	lsls	r3, r3, #8
 80052fa:	492c      	ldr	r1, [pc, #176]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	604b      	str	r3, [r1, #4]
 8005300:	e01a      	b.n	8005338 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005302:	4b2a      	ldr	r3, [pc, #168]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a29      	ldr	r2, [pc, #164]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 8005308:	f023 0301 	bic.w	r3, r3, #1
 800530c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800530e:	f7fd f9fb 	bl	8002708 <HAL_GetTick>
 8005312:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005314:	e008      	b.n	8005328 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005316:	f7fd f9f7 	bl	8002708 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e2dd      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005328:	4b20      	ldr	r3, [pc, #128]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1f0      	bne.n	8005316 <HAL_RCC_OscConfig+0x1da>
 8005334:	e000      	b.n	8005338 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005336:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0301 	and.w	r3, r3, #1
 8005340:	2b00      	cmp	r3, #0
 8005342:	d074      	beq.n	800542e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	2b08      	cmp	r3, #8
 8005348:	d005      	beq.n	8005356 <HAL_RCC_OscConfig+0x21a>
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	2b0c      	cmp	r3, #12
 800534e:	d10e      	bne.n	800536e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	2b03      	cmp	r3, #3
 8005354:	d10b      	bne.n	800536e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005356:	4b15      	ldr	r3, [pc, #84]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d064      	beq.n	800542c <HAL_RCC_OscConfig+0x2f0>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d160      	bne.n	800542c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800536a:	2301      	movs	r3, #1
 800536c:	e2ba      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005376:	d106      	bne.n	8005386 <HAL_RCC_OscConfig+0x24a>
 8005378:	4b0c      	ldr	r3, [pc, #48]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a0b      	ldr	r2, [pc, #44]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 800537e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005382:	6013      	str	r3, [r2, #0]
 8005384:	e026      	b.n	80053d4 <HAL_RCC_OscConfig+0x298>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800538e:	d115      	bne.n	80053bc <HAL_RCC_OscConfig+0x280>
 8005390:	4b06      	ldr	r3, [pc, #24]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a05      	ldr	r2, [pc, #20]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 8005396:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800539a:	6013      	str	r3, [r2, #0]
 800539c:	4b03      	ldr	r3, [pc, #12]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a02      	ldr	r2, [pc, #8]	; (80053ac <HAL_RCC_OscConfig+0x270>)
 80053a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	e014      	b.n	80053d4 <HAL_RCC_OscConfig+0x298>
 80053aa:	bf00      	nop
 80053ac:	40021000 	.word	0x40021000
 80053b0:	0800e4d0 	.word	0x0800e4d0
 80053b4:	20000000 	.word	0x20000000
 80053b8:	20000004 	.word	0x20000004
 80053bc:	4ba0      	ldr	r3, [pc, #640]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a9f      	ldr	r2, [pc, #636]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 80053c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	4b9d      	ldr	r3, [pc, #628]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a9c      	ldr	r2, [pc, #624]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 80053ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d013      	beq.n	8005404 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053dc:	f7fd f994 	bl	8002708 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053e4:	f7fd f990 	bl	8002708 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b64      	cmp	r3, #100	; 0x64
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e276      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053f6:	4b92      	ldr	r3, [pc, #584]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f0      	beq.n	80053e4 <HAL_RCC_OscConfig+0x2a8>
 8005402:	e014      	b.n	800542e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005404:	f7fd f980 	bl	8002708 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800540c:	f7fd f97c 	bl	8002708 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b64      	cmp	r3, #100	; 0x64
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e262      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800541e:	4b88      	ldr	r3, [pc, #544]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f0      	bne.n	800540c <HAL_RCC_OscConfig+0x2d0>
 800542a:	e000      	b.n	800542e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800542c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d060      	beq.n	80054fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	2b04      	cmp	r3, #4
 800543e:	d005      	beq.n	800544c <HAL_RCC_OscConfig+0x310>
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	2b0c      	cmp	r3, #12
 8005444:	d119      	bne.n	800547a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b02      	cmp	r3, #2
 800544a:	d116      	bne.n	800547a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800544c:	4b7c      	ldr	r3, [pc, #496]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005454:	2b00      	cmp	r3, #0
 8005456:	d005      	beq.n	8005464 <HAL_RCC_OscConfig+0x328>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e23f      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005464:	4b76      	ldr	r3, [pc, #472]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	061b      	lsls	r3, r3, #24
 8005472:	4973      	ldr	r1, [pc, #460]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 8005474:	4313      	orrs	r3, r2
 8005476:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005478:	e040      	b.n	80054fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d023      	beq.n	80054ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005482:	4b6f      	ldr	r3, [pc, #444]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a6e      	ldr	r2, [pc, #440]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 8005488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800548c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800548e:	f7fd f93b 	bl	8002708 <HAL_GetTick>
 8005492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005494:	e008      	b.n	80054a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005496:	f7fd f937 	bl	8002708 <HAL_GetTick>
 800549a:	4602      	mov	r2, r0
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	1ad3      	subs	r3, r2, r3
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d901      	bls.n	80054a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e21d      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80054a8:	4b65      	ldr	r3, [pc, #404]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0f0      	beq.n	8005496 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054b4:	4b62      	ldr	r3, [pc, #392]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	061b      	lsls	r3, r3, #24
 80054c2:	495f      	ldr	r1, [pc, #380]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 80054c4:	4313      	orrs	r3, r2
 80054c6:	604b      	str	r3, [r1, #4]
 80054c8:	e018      	b.n	80054fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054ca:	4b5d      	ldr	r3, [pc, #372]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a5c      	ldr	r2, [pc, #368]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 80054d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054d6:	f7fd f917 	bl	8002708 <HAL_GetTick>
 80054da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054dc:	e008      	b.n	80054f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054de:	f7fd f913 	bl	8002708 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	2b02      	cmp	r3, #2
 80054ea:	d901      	bls.n	80054f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e1f9      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054f0:	4b53      	ldr	r3, [pc, #332]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1f0      	bne.n	80054de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d03c      	beq.n	8005582 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d01c      	beq.n	800554a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005510:	4b4b      	ldr	r3, [pc, #300]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 8005512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005516:	4a4a      	ldr	r2, [pc, #296]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 8005518:	f043 0301 	orr.w	r3, r3, #1
 800551c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005520:	f7fd f8f2 	bl	8002708 <HAL_GetTick>
 8005524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005526:	e008      	b.n	800553a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005528:	f7fd f8ee 	bl	8002708 <HAL_GetTick>
 800552c:	4602      	mov	r2, r0
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	2b02      	cmp	r3, #2
 8005534:	d901      	bls.n	800553a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005536:	2303      	movs	r3, #3
 8005538:	e1d4      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800553a:	4b41      	ldr	r3, [pc, #260]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 800553c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d0ef      	beq.n	8005528 <HAL_RCC_OscConfig+0x3ec>
 8005548:	e01b      	b.n	8005582 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800554a:	4b3d      	ldr	r3, [pc, #244]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 800554c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005550:	4a3b      	ldr	r2, [pc, #236]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 8005552:	f023 0301 	bic.w	r3, r3, #1
 8005556:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555a:	f7fd f8d5 	bl	8002708 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005562:	f7fd f8d1 	bl	8002708 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e1b7      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005574:	4b32      	ldr	r3, [pc, #200]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 8005576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1ef      	bne.n	8005562 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 80a6 	beq.w	80056dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005590:	2300      	movs	r3, #0
 8005592:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005594:	4b2a      	ldr	r3, [pc, #168]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 8005596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10d      	bne.n	80055bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055a0:	4b27      	ldr	r3, [pc, #156]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 80055a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055a4:	4a26      	ldr	r2, [pc, #152]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 80055a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055aa:	6593      	str	r3, [r2, #88]	; 0x58
 80055ac:	4b24      	ldr	r3, [pc, #144]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 80055ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b4:	60bb      	str	r3, [r7, #8]
 80055b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055b8:	2301      	movs	r3, #1
 80055ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055bc:	4b21      	ldr	r3, [pc, #132]	; (8005644 <HAL_RCC_OscConfig+0x508>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d118      	bne.n	80055fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055c8:	4b1e      	ldr	r3, [pc, #120]	; (8005644 <HAL_RCC_OscConfig+0x508>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a1d      	ldr	r2, [pc, #116]	; (8005644 <HAL_RCC_OscConfig+0x508>)
 80055ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055d4:	f7fd f898 	bl	8002708 <HAL_GetTick>
 80055d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055da:	e008      	b.n	80055ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055dc:	f7fd f894 	bl	8002708 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b02      	cmp	r3, #2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e17a      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ee:	4b15      	ldr	r3, [pc, #84]	; (8005644 <HAL_RCC_OscConfig+0x508>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0f0      	beq.n	80055dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d108      	bne.n	8005614 <HAL_RCC_OscConfig+0x4d8>
 8005602:	4b0f      	ldr	r3, [pc, #60]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 8005604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005608:	4a0d      	ldr	r2, [pc, #52]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 800560a:	f043 0301 	orr.w	r3, r3, #1
 800560e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005612:	e029      	b.n	8005668 <HAL_RCC_OscConfig+0x52c>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	2b05      	cmp	r3, #5
 800561a:	d115      	bne.n	8005648 <HAL_RCC_OscConfig+0x50c>
 800561c:	4b08      	ldr	r3, [pc, #32]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005622:	4a07      	ldr	r2, [pc, #28]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 8005624:	f043 0304 	orr.w	r3, r3, #4
 8005628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800562c:	4b04      	ldr	r3, [pc, #16]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005632:	4a03      	ldr	r2, [pc, #12]	; (8005640 <HAL_RCC_OscConfig+0x504>)
 8005634:	f043 0301 	orr.w	r3, r3, #1
 8005638:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800563c:	e014      	b.n	8005668 <HAL_RCC_OscConfig+0x52c>
 800563e:	bf00      	nop
 8005640:	40021000 	.word	0x40021000
 8005644:	40007000 	.word	0x40007000
 8005648:	4b9c      	ldr	r3, [pc, #624]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564e:	4a9b      	ldr	r2, [pc, #620]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 8005650:	f023 0301 	bic.w	r3, r3, #1
 8005654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005658:	4b98      	ldr	r3, [pc, #608]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565e:	4a97      	ldr	r2, [pc, #604]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 8005660:	f023 0304 	bic.w	r3, r3, #4
 8005664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d016      	beq.n	800569e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005670:	f7fd f84a 	bl	8002708 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005676:	e00a      	b.n	800568e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005678:	f7fd f846 	bl	8002708 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	f241 3288 	movw	r2, #5000	; 0x1388
 8005686:	4293      	cmp	r3, r2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e12a      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800568e:	4b8b      	ldr	r3, [pc, #556]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 8005690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0ed      	beq.n	8005678 <HAL_RCC_OscConfig+0x53c>
 800569c:	e015      	b.n	80056ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569e:	f7fd f833 	bl	8002708 <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056a4:	e00a      	b.n	80056bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a6:	f7fd f82f 	bl	8002708 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e113      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056bc:	4b7f      	ldr	r3, [pc, #508]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 80056be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1ed      	bne.n	80056a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80056ca:	7ffb      	ldrb	r3, [r7, #31]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d105      	bne.n	80056dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056d0:	4b7a      	ldr	r3, [pc, #488]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 80056d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d4:	4a79      	ldr	r2, [pc, #484]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 80056d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 80fe 	beq.w	80058e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	f040 80d0 	bne.w	8005890 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80056f0:	4b72      	ldr	r3, [pc, #456]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f003 0203 	and.w	r2, r3, #3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005700:	429a      	cmp	r2, r3
 8005702:	d130      	bne.n	8005766 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800570e:	3b01      	subs	r3, #1
 8005710:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005712:	429a      	cmp	r2, r3
 8005714:	d127      	bne.n	8005766 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005720:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005722:	429a      	cmp	r2, r3
 8005724:	d11f      	bne.n	8005766 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005730:	2a07      	cmp	r2, #7
 8005732:	bf14      	ite	ne
 8005734:	2201      	movne	r2, #1
 8005736:	2200      	moveq	r2, #0
 8005738:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800573a:	4293      	cmp	r3, r2
 800573c:	d113      	bne.n	8005766 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800573e:	697b      	ldr	r3, [r7, #20]
 8005740:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005748:	085b      	lsrs	r3, r3, #1
 800574a:	3b01      	subs	r3, #1
 800574c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800574e:	429a      	cmp	r2, r3
 8005750:	d109      	bne.n	8005766 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	085b      	lsrs	r3, r3, #1
 800575e:	3b01      	subs	r3, #1
 8005760:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005762:	429a      	cmp	r2, r3
 8005764:	d06e      	beq.n	8005844 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	2b0c      	cmp	r3, #12
 800576a:	d069      	beq.n	8005840 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800576c:	4b53      	ldr	r3, [pc, #332]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d105      	bne.n	8005784 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005778:	4b50      	ldr	r3, [pc, #320]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	e0ad      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005788:	4b4c      	ldr	r3, [pc, #304]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a4b      	ldr	r2, [pc, #300]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 800578e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005792:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005794:	f7fc ffb8 	bl	8002708 <HAL_GetTick>
 8005798:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800579a:	e008      	b.n	80057ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800579c:	f7fc ffb4 	bl	8002708 <HAL_GetTick>
 80057a0:	4602      	mov	r2, r0
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	1ad3      	subs	r3, r2, r3
 80057a6:	2b02      	cmp	r3, #2
 80057a8:	d901      	bls.n	80057ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e09a      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057ae:	4b43      	ldr	r3, [pc, #268]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d1f0      	bne.n	800579c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057ba:	4b40      	ldr	r3, [pc, #256]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 80057bc:	68da      	ldr	r2, [r3, #12]
 80057be:	4b40      	ldr	r3, [pc, #256]	; (80058c0 <HAL_RCC_OscConfig+0x784>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80057ca:	3a01      	subs	r2, #1
 80057cc:	0112      	lsls	r2, r2, #4
 80057ce:	4311      	orrs	r1, r2
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057d4:	0212      	lsls	r2, r2, #8
 80057d6:	4311      	orrs	r1, r2
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80057dc:	0852      	lsrs	r2, r2, #1
 80057de:	3a01      	subs	r2, #1
 80057e0:	0552      	lsls	r2, r2, #21
 80057e2:	4311      	orrs	r1, r2
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80057e8:	0852      	lsrs	r2, r2, #1
 80057ea:	3a01      	subs	r2, #1
 80057ec:	0652      	lsls	r2, r2, #25
 80057ee:	4311      	orrs	r1, r2
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80057f4:	0912      	lsrs	r2, r2, #4
 80057f6:	0452      	lsls	r2, r2, #17
 80057f8:	430a      	orrs	r2, r1
 80057fa:	4930      	ldr	r1, [pc, #192]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005800:	4b2e      	ldr	r3, [pc, #184]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a2d      	ldr	r2, [pc, #180]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 8005806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800580a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800580c:	4b2b      	ldr	r3, [pc, #172]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	4a2a      	ldr	r2, [pc, #168]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 8005812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005816:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005818:	f7fc ff76 	bl	8002708 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005820:	f7fc ff72 	bl	8002708 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e058      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005832:	4b22      	ldr	r3, [pc, #136]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f0      	beq.n	8005820 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800583e:	e050      	b.n	80058e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e04f      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005844:	4b1d      	ldr	r3, [pc, #116]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d148      	bne.n	80058e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005850:	4b1a      	ldr	r3, [pc, #104]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a19      	ldr	r2, [pc, #100]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 8005856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800585a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800585c:	4b17      	ldr	r3, [pc, #92]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	4a16      	ldr	r2, [pc, #88]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 8005862:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005866:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005868:	f7fc ff4e 	bl	8002708 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005870:	f7fc ff4a 	bl	8002708 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e030      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005882:	4b0e      	ldr	r3, [pc, #56]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0f0      	beq.n	8005870 <HAL_RCC_OscConfig+0x734>
 800588e:	e028      	b.n	80058e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	2b0c      	cmp	r3, #12
 8005894:	d023      	beq.n	80058de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005896:	4b09      	ldr	r3, [pc, #36]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a08      	ldr	r2, [pc, #32]	; (80058bc <HAL_RCC_OscConfig+0x780>)
 800589c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a2:	f7fc ff31 	bl	8002708 <HAL_GetTick>
 80058a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058a8:	e00c      	b.n	80058c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058aa:	f7fc ff2d 	bl	8002708 <HAL_GetTick>
 80058ae:	4602      	mov	r2, r0
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	1ad3      	subs	r3, r2, r3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d905      	bls.n	80058c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80058b8:	2303      	movs	r3, #3
 80058ba:	e013      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
 80058bc:	40021000 	.word	0x40021000
 80058c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058c4:	4b09      	ldr	r3, [pc, #36]	; (80058ec <HAL_RCC_OscConfig+0x7b0>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1ec      	bne.n	80058aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80058d0:	4b06      	ldr	r3, [pc, #24]	; (80058ec <HAL_RCC_OscConfig+0x7b0>)
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	4905      	ldr	r1, [pc, #20]	; (80058ec <HAL_RCC_OscConfig+0x7b0>)
 80058d6:	4b06      	ldr	r3, [pc, #24]	; (80058f0 <HAL_RCC_OscConfig+0x7b4>)
 80058d8:	4013      	ands	r3, r2
 80058da:	60cb      	str	r3, [r1, #12]
 80058dc:	e001      	b.n	80058e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e000      	b.n	80058e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3720      	adds	r7, #32
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	40021000 	.word	0x40021000
 80058f0:	feeefffc 	.word	0xfeeefffc

080058f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d101      	bne.n	8005908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e0e7      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005908:	4b75      	ldr	r3, [pc, #468]	; (8005ae0 <HAL_RCC_ClockConfig+0x1ec>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0307 	and.w	r3, r3, #7
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	429a      	cmp	r2, r3
 8005914:	d910      	bls.n	8005938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005916:	4b72      	ldr	r3, [pc, #456]	; (8005ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f023 0207 	bic.w	r2, r3, #7
 800591e:	4970      	ldr	r1, [pc, #448]	; (8005ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	4313      	orrs	r3, r2
 8005924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005926:	4b6e      	ldr	r3, [pc, #440]	; (8005ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0307 	and.w	r3, r3, #7
 800592e:	683a      	ldr	r2, [r7, #0]
 8005930:	429a      	cmp	r2, r3
 8005932:	d001      	beq.n	8005938 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	e0cf      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d010      	beq.n	8005966 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	4b66      	ldr	r3, [pc, #408]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005950:	429a      	cmp	r2, r3
 8005952:	d908      	bls.n	8005966 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005954:	4b63      	ldr	r3, [pc, #396]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	4960      	ldr	r1, [pc, #384]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8005962:	4313      	orrs	r3, r2
 8005964:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0301 	and.w	r3, r3, #1
 800596e:	2b00      	cmp	r3, #0
 8005970:	d04c      	beq.n	8005a0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	2b03      	cmp	r3, #3
 8005978:	d107      	bne.n	800598a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800597a:	4b5a      	ldr	r3, [pc, #360]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005982:	2b00      	cmp	r3, #0
 8005984:	d121      	bne.n	80059ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e0a6      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b02      	cmp	r3, #2
 8005990:	d107      	bne.n	80059a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005992:	4b54      	ldr	r3, [pc, #336]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d115      	bne.n	80059ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e09a      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d107      	bne.n	80059ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059aa:	4b4e      	ldr	r3, [pc, #312]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d109      	bne.n	80059ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e08e      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059ba:	4b4a      	ldr	r3, [pc, #296]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e086      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059ca:	4b46      	ldr	r3, [pc, #280]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f023 0203 	bic.w	r2, r3, #3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	4943      	ldr	r1, [pc, #268]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059dc:	f7fc fe94 	bl	8002708 <HAL_GetTick>
 80059e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059e2:	e00a      	b.n	80059fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059e4:	f7fc fe90 	bl	8002708 <HAL_GetTick>
 80059e8:	4602      	mov	r2, r0
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d901      	bls.n	80059fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e06e      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fa:	4b3a      	ldr	r3, [pc, #232]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f003 020c 	and.w	r2, r3, #12
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d1eb      	bne.n	80059e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d010      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689a      	ldr	r2, [r3, #8]
 8005a1c:	4b31      	ldr	r3, [pc, #196]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d208      	bcs.n	8005a3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a28:	4b2e      	ldr	r3, [pc, #184]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	492b      	ldr	r1, [pc, #172]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a36:	4313      	orrs	r3, r2
 8005a38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a3a:	4b29      	ldr	r3, [pc, #164]	; (8005ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	683a      	ldr	r2, [r7, #0]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d210      	bcs.n	8005a6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a48:	4b25      	ldr	r3, [pc, #148]	; (8005ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f023 0207 	bic.w	r2, r3, #7
 8005a50:	4923      	ldr	r1, [pc, #140]	; (8005ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a58:	4b21      	ldr	r3, [pc, #132]	; (8005ae0 <HAL_RCC_ClockConfig+0x1ec>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	683a      	ldr	r2, [r7, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d001      	beq.n	8005a6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e036      	b.n	8005ad8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d008      	beq.n	8005a88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a76:	4b1b      	ldr	r3, [pc, #108]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	4918      	ldr	r1, [pc, #96]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0308 	and.w	r3, r3, #8
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d009      	beq.n	8005aa8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a94:	4b13      	ldr	r3, [pc, #76]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	00db      	lsls	r3, r3, #3
 8005aa2:	4910      	ldr	r1, [pc, #64]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005aa8:	f000 f824 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 8005aac:	4602      	mov	r2, r0
 8005aae:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <HAL_RCC_ClockConfig+0x1f0>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	091b      	lsrs	r3, r3, #4
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	490b      	ldr	r1, [pc, #44]	; (8005ae8 <HAL_RCC_ClockConfig+0x1f4>)
 8005aba:	5ccb      	ldrb	r3, [r1, r3]
 8005abc:	f003 031f 	and.w	r3, r3, #31
 8005ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac4:	4a09      	ldr	r2, [pc, #36]	; (8005aec <HAL_RCC_ClockConfig+0x1f8>)
 8005ac6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ac8:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <HAL_RCC_ClockConfig+0x1fc>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fc fdcb 	bl	8002668 <HAL_InitTick>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	72fb      	strb	r3, [r7, #11]

  return status;
 8005ad6:	7afb      	ldrb	r3, [r7, #11]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	40022000 	.word	0x40022000
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	0800e4d0 	.word	0x0800e4d0
 8005aec:	20000000 	.word	0x20000000
 8005af0:	20000004 	.word	0x20000004

08005af4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b089      	sub	sp, #36	; 0x24
 8005af8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	61fb      	str	r3, [r7, #28]
 8005afe:	2300      	movs	r3, #0
 8005b00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b02:	4b3e      	ldr	r3, [pc, #248]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 030c 	and.w	r3, r3, #12
 8005b0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b0c:	4b3b      	ldr	r3, [pc, #236]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f003 0303 	and.w	r3, r3, #3
 8005b14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d005      	beq.n	8005b28 <HAL_RCC_GetSysClockFreq+0x34>
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	2b0c      	cmp	r3, #12
 8005b20:	d121      	bne.n	8005b66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d11e      	bne.n	8005b66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b28:	4b34      	ldr	r3, [pc, #208]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d107      	bne.n	8005b44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b34:	4b31      	ldr	r3, [pc, #196]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b3a:	0a1b      	lsrs	r3, r3, #8
 8005b3c:	f003 030f 	and.w	r3, r3, #15
 8005b40:	61fb      	str	r3, [r7, #28]
 8005b42:	e005      	b.n	8005b50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b44:	4b2d      	ldr	r3, [pc, #180]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b50:	4a2b      	ldr	r2, [pc, #172]	; (8005c00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10d      	bne.n	8005b7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b64:	e00a      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	2b04      	cmp	r3, #4
 8005b6a:	d102      	bne.n	8005b72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b6c:	4b25      	ldr	r3, [pc, #148]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b6e:	61bb      	str	r3, [r7, #24]
 8005b70:	e004      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	2b08      	cmp	r3, #8
 8005b76:	d101      	bne.n	8005b7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b78:	4b23      	ldr	r3, [pc, #140]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	2b0c      	cmp	r3, #12
 8005b80:	d134      	bne.n	8005bec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b82:	4b1e      	ldr	r3, [pc, #120]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d003      	beq.n	8005b9a <HAL_RCC_GetSysClockFreq+0xa6>
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2b03      	cmp	r3, #3
 8005b96:	d003      	beq.n	8005ba0 <HAL_RCC_GetSysClockFreq+0xac>
 8005b98:	e005      	b.n	8005ba6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b9a:	4b1a      	ldr	r3, [pc, #104]	; (8005c04 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b9c:	617b      	str	r3, [r7, #20]
      break;
 8005b9e:	e005      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ba0:	4b19      	ldr	r3, [pc, #100]	; (8005c08 <HAL_RCC_GetSysClockFreq+0x114>)
 8005ba2:	617b      	str	r3, [r7, #20]
      break;
 8005ba4:	e002      	b.n	8005bac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	617b      	str	r3, [r7, #20]
      break;
 8005baa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bac:	4b13      	ldr	r3, [pc, #76]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005bba:	4b10      	ldr	r3, [pc, #64]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	0a1b      	lsrs	r3, r3, #8
 8005bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc4:	697a      	ldr	r2, [r7, #20]
 8005bc6:	fb03 f202 	mul.w	r2, r3, r2
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005bd2:	4b0a      	ldr	r3, [pc, #40]	; (8005bfc <HAL_RCC_GetSysClockFreq+0x108>)
 8005bd4:	68db      	ldr	r3, [r3, #12]
 8005bd6:	0e5b      	lsrs	r3, r3, #25
 8005bd8:	f003 0303 	and.w	r3, r3, #3
 8005bdc:	3301      	adds	r3, #1
 8005bde:	005b      	lsls	r3, r3, #1
 8005be0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005bec:	69bb      	ldr	r3, [r7, #24]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3724      	adds	r7, #36	; 0x24
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40021000 	.word	0x40021000
 8005c00:	0800e4e8 	.word	0x0800e4e8
 8005c04:	00f42400 	.word	0x00f42400
 8005c08:	007a1200 	.word	0x007a1200

08005c0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c10:	4b03      	ldr	r3, [pc, #12]	; (8005c20 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c12:	681b      	ldr	r3, [r3, #0]
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	20000000 	.word	0x20000000

08005c24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c28:	f7ff fff0 	bl	8005c0c <HAL_RCC_GetHCLKFreq>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	0a1b      	lsrs	r3, r3, #8
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	4904      	ldr	r1, [pc, #16]	; (8005c4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c3a:	5ccb      	ldrb	r3, [r1, r3]
 8005c3c:	f003 031f 	and.w	r3, r3, #31
 8005c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	40021000 	.word	0x40021000
 8005c4c:	0800e4e0 	.word	0x0800e4e0

08005c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c54:	f7ff ffda 	bl	8005c0c <HAL_RCC_GetHCLKFreq>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	4b06      	ldr	r3, [pc, #24]	; (8005c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	0adb      	lsrs	r3, r3, #11
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	4904      	ldr	r1, [pc, #16]	; (8005c78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c66:	5ccb      	ldrb	r3, [r1, r3]
 8005c68:	f003 031f 	and.w	r3, r3, #31
 8005c6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	40021000 	.word	0x40021000
 8005c78:	0800e4e0 	.word	0x0800e4e0

08005c7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c84:	2300      	movs	r3, #0
 8005c86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c88:	4b2a      	ldr	r3, [pc, #168]	; (8005d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c94:	f7ff f922 	bl	8004edc <HAL_PWREx_GetVoltageRange>
 8005c98:	6178      	str	r0, [r7, #20]
 8005c9a:	e014      	b.n	8005cc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c9c:	4b25      	ldr	r3, [pc, #148]	; (8005d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca0:	4a24      	ldr	r2, [pc, #144]	; (8005d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8005ca8:	4b22      	ldr	r3, [pc, #136]	; (8005d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cb0:	60fb      	str	r3, [r7, #12]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005cb4:	f7ff f912 	bl	8004edc <HAL_PWREx_GetVoltageRange>
 8005cb8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005cba:	4b1e      	ldr	r3, [pc, #120]	; (8005d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cbe:	4a1d      	ldr	r2, [pc, #116]	; (8005d34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ccc:	d10b      	bne.n	8005ce6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b80      	cmp	r3, #128	; 0x80
 8005cd2:	d919      	bls.n	8005d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2ba0      	cmp	r3, #160	; 0xa0
 8005cd8:	d902      	bls.n	8005ce0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005cda:	2302      	movs	r3, #2
 8005cdc:	613b      	str	r3, [r7, #16]
 8005cde:	e013      	b.n	8005d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	e010      	b.n	8005d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2b80      	cmp	r3, #128	; 0x80
 8005cea:	d902      	bls.n	8005cf2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005cec:	2303      	movs	r3, #3
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	e00a      	b.n	8005d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b80      	cmp	r3, #128	; 0x80
 8005cf6:	d102      	bne.n	8005cfe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	613b      	str	r3, [r7, #16]
 8005cfc:	e004      	b.n	8005d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2b70      	cmp	r3, #112	; 0x70
 8005d02:	d101      	bne.n	8005d08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d04:	2301      	movs	r3, #1
 8005d06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d08:	4b0b      	ldr	r3, [pc, #44]	; (8005d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f023 0207 	bic.w	r2, r3, #7
 8005d10:	4909      	ldr	r1, [pc, #36]	; (8005d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005d18:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d001      	beq.n	8005d2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	40021000 	.word	0x40021000
 8005d38:	40022000 	.word	0x40022000

08005d3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b086      	sub	sp, #24
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d44:	2300      	movs	r3, #0
 8005d46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d48:	2300      	movs	r3, #0
 8005d4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d041      	beq.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d60:	d02a      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005d62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d66:	d824      	bhi.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d6c:	d008      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005d6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d72:	d81e      	bhi.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005d78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d7c:	d010      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005d7e:	e018      	b.n	8005db2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d80:	4b86      	ldr	r3, [pc, #536]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	4a85      	ldr	r2, [pc, #532]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d8c:	e015      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	3304      	adds	r3, #4
 8005d92:	2100      	movs	r1, #0
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 facb 	bl	8006330 <RCCEx_PLLSAI1_Config>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005d9e:	e00c      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3320      	adds	r3, #32
 8005da4:	2100      	movs	r1, #0
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fbb6 	bl	8006518 <RCCEx_PLLSAI2_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005db0:	e003      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	74fb      	strb	r3, [r7, #19]
      break;
 8005db6:	e000      	b.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005db8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dba:	7cfb      	ldrb	r3, [r7, #19]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10b      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005dc0:	4b76      	ldr	r3, [pc, #472]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005dce:	4973      	ldr	r1, [pc, #460]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005dd6:	e001      	b.n	8005ddc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dd8:	7cfb      	ldrb	r3, [r7, #19]
 8005dda:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d041      	beq.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005df0:	d02a      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005df2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005df6:	d824      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005df8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005dfc:	d008      	beq.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005dfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005e02:	d81e      	bhi.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00a      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e0c:	d010      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005e0e:	e018      	b.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e10:	4b62      	ldr	r3, [pc, #392]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	4a61      	ldr	r2, [pc, #388]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e1a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e1c:	e015      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3304      	adds	r3, #4
 8005e22:	2100      	movs	r1, #0
 8005e24:	4618      	mov	r0, r3
 8005e26:	f000 fa83 	bl	8006330 <RCCEx_PLLSAI1_Config>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e2e:	e00c      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3320      	adds	r3, #32
 8005e34:	2100      	movs	r1, #0
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fb6e 	bl	8006518 <RCCEx_PLLSAI2_Config>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005e40:	e003      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	74fb      	strb	r3, [r7, #19]
      break;
 8005e46:	e000      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e4a:	7cfb      	ldrb	r3, [r7, #19]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10b      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e50:	4b52      	ldr	r3, [pc, #328]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e5e:	494f      	ldr	r1, [pc, #316]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005e66:	e001      	b.n	8005e6c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e68:	7cfb      	ldrb	r3, [r7, #19]
 8005e6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 80a0 	beq.w	8005fba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e7e:	4b47      	ldr	r3, [pc, #284]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d101      	bne.n	8005e8e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e000      	b.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00d      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e94:	4b41      	ldr	r3, [pc, #260]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e98:	4a40      	ldr	r2, [pc, #256]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e9e:	6593      	str	r3, [r2, #88]	; 0x58
 8005ea0:	4b3e      	ldr	r3, [pc, #248]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ea4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eac:	2301      	movs	r3, #1
 8005eae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eb0:	4b3b      	ldr	r3, [pc, #236]	; (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a3a      	ldr	r2, [pc, #232]	; (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005eb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ebc:	f7fc fc24 	bl	8002708 <HAL_GetTick>
 8005ec0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ec2:	e009      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec4:	f7fc fc20 	bl	8002708 <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d902      	bls.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	74fb      	strb	r3, [r7, #19]
        break;
 8005ed6:	e005      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ed8:	4b31      	ldr	r3, [pc, #196]	; (8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0ef      	beq.n	8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005ee4:	7cfb      	ldrb	r3, [r7, #19]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d15c      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005eea:	4b2c      	ldr	r3, [pc, #176]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d01f      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f02:	697a      	ldr	r2, [r7, #20]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d019      	beq.n	8005f3c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f08:	4b24      	ldr	r3, [pc, #144]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f14:	4b21      	ldr	r3, [pc, #132]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1a:	4a20      	ldr	r2, [pc, #128]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f24:	4b1d      	ldr	r3, [pc, #116]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2a:	4a1c      	ldr	r2, [pc, #112]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f34:	4a19      	ldr	r2, [pc, #100]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	f003 0301 	and.w	r3, r3, #1
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d016      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f46:	f7fc fbdf 	bl	8002708 <HAL_GetTick>
 8005f4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f4c:	e00b      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f4e:	f7fc fbdb 	bl	8002708 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d902      	bls.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	74fb      	strb	r3, [r7, #19]
            break;
 8005f64:	e006      	b.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f66:	4b0d      	ldr	r3, [pc, #52]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0ec      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005f74:	7cfb      	ldrb	r3, [r7, #19]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10c      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f7a:	4b08      	ldr	r3, [pc, #32]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f8a:	4904      	ldr	r1, [pc, #16]	; (8005f9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005f92:	e009      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f94:	7cfb      	ldrb	r3, [r7, #19]
 8005f96:	74bb      	strb	r3, [r7, #18]
 8005f98:	e006      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005f9a:	bf00      	nop
 8005f9c:	40021000 	.word	0x40021000
 8005fa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa4:	7cfb      	ldrb	r3, [r7, #19]
 8005fa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fa8:	7c7b      	ldrb	r3, [r7, #17]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d105      	bne.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fae:	4b9e      	ldr	r3, [pc, #632]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fb2:	4a9d      	ldr	r2, [pc, #628]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fc6:	4b98      	ldr	r3, [pc, #608]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fcc:	f023 0203 	bic.w	r2, r3, #3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd4:	4994      	ldr	r1, [pc, #592]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fe8:	4b8f      	ldr	r3, [pc, #572]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fee:	f023 020c 	bic.w	r2, r3, #12
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff6:	498c      	ldr	r1, [pc, #560]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800600a:	4b87      	ldr	r3, [pc, #540]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800600c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006010:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	4983      	ldr	r1, [pc, #524]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800601a:	4313      	orrs	r3, r2
 800601c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f003 0308 	and.w	r3, r3, #8
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800602c:	4b7e      	ldr	r3, [pc, #504]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800602e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006032:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800603a:	497b      	ldr	r1, [pc, #492]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800603c:	4313      	orrs	r3, r2
 800603e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0310 	and.w	r3, r3, #16
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800604e:	4b76      	ldr	r3, [pc, #472]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006050:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800605c:	4972      	ldr	r1, [pc, #456]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800605e:	4313      	orrs	r3, r2
 8006060:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0320 	and.w	r3, r3, #32
 800606c:	2b00      	cmp	r3, #0
 800606e:	d00a      	beq.n	8006086 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006070:	4b6d      	ldr	r3, [pc, #436]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006076:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607e:	496a      	ldr	r1, [pc, #424]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006080:	4313      	orrs	r3, r2
 8006082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006092:	4b65      	ldr	r3, [pc, #404]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006098:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060a0:	4961      	ldr	r1, [pc, #388]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060a2:	4313      	orrs	r3, r2
 80060a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00a      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060b4:	4b5c      	ldr	r3, [pc, #368]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c2:	4959      	ldr	r1, [pc, #356]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060c4:	4313      	orrs	r3, r2
 80060c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00a      	beq.n	80060ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060d6:	4b54      	ldr	r3, [pc, #336]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060e4:	4950      	ldr	r1, [pc, #320]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00a      	beq.n	800610e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80060f8:	4b4b      	ldr	r3, [pc, #300]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80060fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006106:	4948      	ldr	r1, [pc, #288]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006108:	4313      	orrs	r3, r2
 800610a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00a      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800611a:	4b43      	ldr	r3, [pc, #268]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800611c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006120:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006128:	493f      	ldr	r1, [pc, #252]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800612a:	4313      	orrs	r3, r2
 800612c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d028      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800613c:	4b3a      	ldr	r3, [pc, #232]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800613e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006142:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800614a:	4937      	ldr	r1, [pc, #220]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800614c:	4313      	orrs	r3, r2
 800614e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006156:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800615a:	d106      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800615c:	4b32      	ldr	r3, [pc, #200]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	4a31      	ldr	r2, [pc, #196]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006166:	60d3      	str	r3, [r2, #12]
 8006168:	e011      	b.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800616e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006172:	d10c      	bne.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	3304      	adds	r3, #4
 8006178:	2101      	movs	r1, #1
 800617a:	4618      	mov	r0, r3
 800617c:	f000 f8d8 	bl	8006330 <RCCEx_PLLSAI1_Config>
 8006180:	4603      	mov	r3, r0
 8006182:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006184:	7cfb      	ldrb	r3, [r7, #19]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800618a:	7cfb      	ldrb	r3, [r7, #19]
 800618c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d028      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800619a:	4b23      	ldr	r3, [pc, #140]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800619c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a8:	491f      	ldr	r1, [pc, #124]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061aa:	4313      	orrs	r3, r2
 80061ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061b8:	d106      	bne.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061ba:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061bc:	68db      	ldr	r3, [r3, #12]
 80061be:	4a1a      	ldr	r2, [pc, #104]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061c4:	60d3      	str	r3, [r2, #12]
 80061c6:	e011      	b.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061d0:	d10c      	bne.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	3304      	adds	r3, #4
 80061d6:	2101      	movs	r1, #1
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 f8a9 	bl	8006330 <RCCEx_PLLSAI1_Config>
 80061de:	4603      	mov	r3, r0
 80061e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80061e2:	7cfb      	ldrb	r3, [r7, #19]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80061e8:	7cfb      	ldrb	r3, [r7, #19]
 80061ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d02b      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061f8:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80061fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006206:	4908      	ldr	r1, [pc, #32]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8006208:	4313      	orrs	r3, r2
 800620a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006212:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006216:	d109      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006218:	4b03      	ldr	r3, [pc, #12]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	4a02      	ldr	r2, [pc, #8]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800621e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006222:	60d3      	str	r3, [r2, #12]
 8006224:	e014      	b.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8006226:	bf00      	nop
 8006228:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006234:	d10c      	bne.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3304      	adds	r3, #4
 800623a:	2101      	movs	r1, #1
 800623c:	4618      	mov	r0, r3
 800623e:	f000 f877 	bl	8006330 <RCCEx_PLLSAI1_Config>
 8006242:	4603      	mov	r3, r0
 8006244:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006246:	7cfb      	ldrb	r3, [r7, #19]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d001      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800624c:	7cfb      	ldrb	r3, [r7, #19]
 800624e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006258:	2b00      	cmp	r3, #0
 800625a:	d02f      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800625c:	4b2b      	ldr	r3, [pc, #172]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006262:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800626a:	4928      	ldr	r1, [pc, #160]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006276:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800627a:	d10d      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	3304      	adds	r3, #4
 8006280:	2102      	movs	r1, #2
 8006282:	4618      	mov	r0, r3
 8006284:	f000 f854 	bl	8006330 <RCCEx_PLLSAI1_Config>
 8006288:	4603      	mov	r3, r0
 800628a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800628c:	7cfb      	ldrb	r3, [r7, #19]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d014      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8006292:	7cfb      	ldrb	r3, [r7, #19]
 8006294:	74bb      	strb	r3, [r7, #18]
 8006296:	e011      	b.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800629c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062a0:	d10c      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3320      	adds	r3, #32
 80062a6:	2102      	movs	r1, #2
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 f935 	bl	8006518 <RCCEx_PLLSAI2_Config>
 80062ae:	4603      	mov	r3, r0
 80062b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062b2:	7cfb      	ldrb	r3, [r7, #19]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d001      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80062b8:	7cfb      	ldrb	r3, [r7, #19]
 80062ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80062c8:	4b10      	ldr	r3, [pc, #64]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062d6:	490d      	ldr	r1, [pc, #52]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062d8:	4313      	orrs	r3, r2
 80062da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00b      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80062ea:	4b08      	ldr	r3, [pc, #32]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062fa:	4904      	ldr	r1, [pc, #16]	; (800630c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80062fc:	4313      	orrs	r3, r2
 80062fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006302:	7cbb      	ldrb	r3, [r7, #18]
}
 8006304:	4618      	mov	r0, r3
 8006306:	3718      	adds	r7, #24
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}
 800630c:	40021000 	.word	0x40021000

08006310 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006310:	b480      	push	{r7}
 8006312:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006314:	4b05      	ldr	r3, [pc, #20]	; (800632c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a04      	ldr	r2, [pc, #16]	; (800632c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800631a:	f043 0304 	orr.w	r3, r3, #4
 800631e:	6013      	str	r3, [r2, #0]
}
 8006320:	bf00      	nop
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	40021000 	.word	0x40021000

08006330 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800633e:	4b75      	ldr	r3, [pc, #468]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	2b00      	cmp	r3, #0
 8006348:	d018      	beq.n	800637c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800634a:	4b72      	ldr	r3, [pc, #456]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	f003 0203 	and.w	r2, r3, #3
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	d10d      	bne.n	8006376 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
       ||
 800635e:	2b00      	cmp	r3, #0
 8006360:	d009      	beq.n	8006376 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006362:	4b6c      	ldr	r3, [pc, #432]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	091b      	lsrs	r3, r3, #4
 8006368:	f003 0307 	and.w	r3, r3, #7
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	685b      	ldr	r3, [r3, #4]
       ||
 8006372:	429a      	cmp	r2, r3
 8006374:	d047      	beq.n	8006406 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	73fb      	strb	r3, [r7, #15]
 800637a:	e044      	b.n	8006406 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b03      	cmp	r3, #3
 8006382:	d018      	beq.n	80063b6 <RCCEx_PLLSAI1_Config+0x86>
 8006384:	2b03      	cmp	r3, #3
 8006386:	d825      	bhi.n	80063d4 <RCCEx_PLLSAI1_Config+0xa4>
 8006388:	2b01      	cmp	r3, #1
 800638a:	d002      	beq.n	8006392 <RCCEx_PLLSAI1_Config+0x62>
 800638c:	2b02      	cmp	r3, #2
 800638e:	d009      	beq.n	80063a4 <RCCEx_PLLSAI1_Config+0x74>
 8006390:	e020      	b.n	80063d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006392:	4b60      	ldr	r3, [pc, #384]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	2b00      	cmp	r3, #0
 800639c:	d11d      	bne.n	80063da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800639e:	2301      	movs	r3, #1
 80063a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063a2:	e01a      	b.n	80063da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063a4:	4b5b      	ldr	r3, [pc, #364]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d116      	bne.n	80063de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063b4:	e013      	b.n	80063de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80063b6:	4b57      	ldr	r3, [pc, #348]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10f      	bne.n	80063e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80063c2:	4b54      	ldr	r3, [pc, #336]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d109      	bne.n	80063e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063d2:	e006      	b.n	80063e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	73fb      	strb	r3, [r7, #15]
      break;
 80063d8:	e004      	b.n	80063e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063da:	bf00      	nop
 80063dc:	e002      	b.n	80063e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063de:	bf00      	nop
 80063e0:	e000      	b.n	80063e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80063e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80063e4:	7bfb      	ldrb	r3, [r7, #15]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10d      	bne.n	8006406 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80063ea:	4b4a      	ldr	r3, [pc, #296]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6819      	ldr	r1, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	3b01      	subs	r3, #1
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	430b      	orrs	r3, r1
 8006400:	4944      	ldr	r1, [pc, #272]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006402:	4313      	orrs	r3, r2
 8006404:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006406:	7bfb      	ldrb	r3, [r7, #15]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d17d      	bne.n	8006508 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800640c:	4b41      	ldr	r3, [pc, #260]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a40      	ldr	r2, [pc, #256]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006412:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006416:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006418:	f7fc f976 	bl	8002708 <HAL_GetTick>
 800641c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800641e:	e009      	b.n	8006434 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006420:	f7fc f972 	bl	8002708 <HAL_GetTick>
 8006424:	4602      	mov	r2, r0
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	1ad3      	subs	r3, r2, r3
 800642a:	2b02      	cmp	r3, #2
 800642c:	d902      	bls.n	8006434 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	73fb      	strb	r3, [r7, #15]
        break;
 8006432:	e005      	b.n	8006440 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006434:	4b37      	ldr	r3, [pc, #220]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d1ef      	bne.n	8006420 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d160      	bne.n	8006508 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d111      	bne.n	8006470 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800644c:	4b31      	ldr	r3, [pc, #196]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	6892      	ldr	r2, [r2, #8]
 800645c:	0211      	lsls	r1, r2, #8
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	68d2      	ldr	r2, [r2, #12]
 8006462:	0912      	lsrs	r2, r2, #4
 8006464:	0452      	lsls	r2, r2, #17
 8006466:	430a      	orrs	r2, r1
 8006468:	492a      	ldr	r1, [pc, #168]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 800646a:	4313      	orrs	r3, r2
 800646c:	610b      	str	r3, [r1, #16]
 800646e:	e027      	b.n	80064c0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b01      	cmp	r3, #1
 8006474:	d112      	bne.n	800649c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006476:	4b27      	ldr	r3, [pc, #156]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800647e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	6892      	ldr	r2, [r2, #8]
 8006486:	0211      	lsls	r1, r2, #8
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6912      	ldr	r2, [r2, #16]
 800648c:	0852      	lsrs	r2, r2, #1
 800648e:	3a01      	subs	r2, #1
 8006490:	0552      	lsls	r2, r2, #21
 8006492:	430a      	orrs	r2, r1
 8006494:	491f      	ldr	r1, [pc, #124]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006496:	4313      	orrs	r3, r2
 8006498:	610b      	str	r3, [r1, #16]
 800649a:	e011      	b.n	80064c0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800649c:	4b1d      	ldr	r3, [pc, #116]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 800649e:	691b      	ldr	r3, [r3, #16]
 80064a0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80064a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	6892      	ldr	r2, [r2, #8]
 80064ac:	0211      	lsls	r1, r2, #8
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	6952      	ldr	r2, [r2, #20]
 80064b2:	0852      	lsrs	r2, r2, #1
 80064b4:	3a01      	subs	r2, #1
 80064b6:	0652      	lsls	r2, r2, #25
 80064b8:	430a      	orrs	r2, r1
 80064ba:	4916      	ldr	r1, [pc, #88]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064bc:	4313      	orrs	r3, r2
 80064be:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80064c0:	4b14      	ldr	r3, [pc, #80]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a13      	ldr	r2, [pc, #76]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064cc:	f7fc f91c 	bl	8002708 <HAL_GetTick>
 80064d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064d2:	e009      	b.n	80064e8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064d4:	f7fc f918 	bl	8002708 <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d902      	bls.n	80064e8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	73fb      	strb	r3, [r7, #15]
          break;
 80064e6:	e005      	b.n	80064f4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80064e8:	4b0a      	ldr	r3, [pc, #40]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0ef      	beq.n	80064d4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80064f4:	7bfb      	ldrb	r3, [r7, #15]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d106      	bne.n	8006508 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80064fa:	4b06      	ldr	r3, [pc, #24]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 80064fc:	691a      	ldr	r2, [r3, #16]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	4904      	ldr	r1, [pc, #16]	; (8006514 <RCCEx_PLLSAI1_Config+0x1e4>)
 8006504:	4313      	orrs	r3, r2
 8006506:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006508:	7bfb      	ldrb	r3, [r7, #15]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3710      	adds	r7, #16
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	40021000 	.word	0x40021000

08006518 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006522:	2300      	movs	r3, #0
 8006524:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006526:	4b6a      	ldr	r3, [pc, #424]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d018      	beq.n	8006564 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8006532:	4b67      	ldr	r3, [pc, #412]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	f003 0203 	and.w	r2, r3, #3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	429a      	cmp	r2, r3
 8006540:	d10d      	bne.n	800655e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
       ||
 8006546:	2b00      	cmp	r3, #0
 8006548:	d009      	beq.n	800655e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800654a:	4b61      	ldr	r3, [pc, #388]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	091b      	lsrs	r3, r3, #4
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	685b      	ldr	r3, [r3, #4]
       ||
 800655a:	429a      	cmp	r2, r3
 800655c:	d047      	beq.n	80065ee <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	73fb      	strb	r3, [r7, #15]
 8006562:	e044      	b.n	80065ee <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2b03      	cmp	r3, #3
 800656a:	d018      	beq.n	800659e <RCCEx_PLLSAI2_Config+0x86>
 800656c:	2b03      	cmp	r3, #3
 800656e:	d825      	bhi.n	80065bc <RCCEx_PLLSAI2_Config+0xa4>
 8006570:	2b01      	cmp	r3, #1
 8006572:	d002      	beq.n	800657a <RCCEx_PLLSAI2_Config+0x62>
 8006574:	2b02      	cmp	r3, #2
 8006576:	d009      	beq.n	800658c <RCCEx_PLLSAI2_Config+0x74>
 8006578:	e020      	b.n	80065bc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800657a:	4b55      	ldr	r3, [pc, #340]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0302 	and.w	r3, r3, #2
 8006582:	2b00      	cmp	r3, #0
 8006584:	d11d      	bne.n	80065c2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800658a:	e01a      	b.n	80065c2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800658c:	4b50      	ldr	r3, [pc, #320]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006594:	2b00      	cmp	r3, #0
 8006596:	d116      	bne.n	80065c6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800659c:	e013      	b.n	80065c6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800659e:	4b4c      	ldr	r3, [pc, #304]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10f      	bne.n	80065ca <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065aa:	4b49      	ldr	r3, [pc, #292]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d109      	bne.n	80065ca <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065ba:	e006      	b.n	80065ca <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	73fb      	strb	r3, [r7, #15]
      break;
 80065c0:	e004      	b.n	80065cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065c2:	bf00      	nop
 80065c4:	e002      	b.n	80065cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065c6:	bf00      	nop
 80065c8:	e000      	b.n	80065cc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80065ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d10d      	bne.n	80065ee <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80065d2:	4b3f      	ldr	r3, [pc, #252]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6819      	ldr	r1, [r3, #0]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	3b01      	subs	r3, #1
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	430b      	orrs	r3, r1
 80065e8:	4939      	ldr	r1, [pc, #228]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065ea:	4313      	orrs	r3, r2
 80065ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80065ee:	7bfb      	ldrb	r3, [r7, #15]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d167      	bne.n	80066c4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80065f4:	4b36      	ldr	r3, [pc, #216]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4a35      	ldr	r2, [pc, #212]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80065fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006600:	f7fc f882 	bl	8002708 <HAL_GetTick>
 8006604:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006606:	e009      	b.n	800661c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006608:	f7fc f87e 	bl	8002708 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d902      	bls.n	800661c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	73fb      	strb	r3, [r7, #15]
        break;
 800661a:	e005      	b.n	8006628 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800661c:	4b2c      	ldr	r3, [pc, #176]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1ef      	bne.n	8006608 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d14a      	bne.n	80066c4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d111      	bne.n	8006658 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006634:	4b26      	ldr	r3, [pc, #152]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006636:	695b      	ldr	r3, [r3, #20]
 8006638:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800663c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	6892      	ldr	r2, [r2, #8]
 8006644:	0211      	lsls	r1, r2, #8
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	68d2      	ldr	r2, [r2, #12]
 800664a:	0912      	lsrs	r2, r2, #4
 800664c:	0452      	lsls	r2, r2, #17
 800664e:	430a      	orrs	r2, r1
 8006650:	491f      	ldr	r1, [pc, #124]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006652:	4313      	orrs	r3, r2
 8006654:	614b      	str	r3, [r1, #20]
 8006656:	e011      	b.n	800667c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006658:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800665a:	695b      	ldr	r3, [r3, #20]
 800665c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006660:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	6892      	ldr	r2, [r2, #8]
 8006668:	0211      	lsls	r1, r2, #8
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6912      	ldr	r2, [r2, #16]
 800666e:	0852      	lsrs	r2, r2, #1
 8006670:	3a01      	subs	r2, #1
 8006672:	0652      	lsls	r2, r2, #25
 8006674:	430a      	orrs	r2, r1
 8006676:	4916      	ldr	r1, [pc, #88]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006678:	4313      	orrs	r3, r2
 800667a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800667c:	4b14      	ldr	r3, [pc, #80]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a13      	ldr	r2, [pc, #76]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006686:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006688:	f7fc f83e 	bl	8002708 <HAL_GetTick>
 800668c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800668e:	e009      	b.n	80066a4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006690:	f7fc f83a 	bl	8002708 <HAL_GetTick>
 8006694:	4602      	mov	r2, r0
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	2b02      	cmp	r3, #2
 800669c:	d902      	bls.n	80066a4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800669e:	2303      	movs	r3, #3
 80066a0:	73fb      	strb	r3, [r7, #15]
          break;
 80066a2:	e005      	b.n	80066b0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80066a4:	4b0a      	ldr	r3, [pc, #40]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d0ef      	beq.n	8006690 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d106      	bne.n	80066c4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80066b6:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066b8:	695a      	ldr	r2, [r3, #20]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	695b      	ldr	r3, [r3, #20]
 80066be:	4904      	ldr	r1, [pc, #16]	; (80066d0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	40021000 	.word	0x40021000

080066d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d101      	bne.n	80066e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e095      	b.n	8006812 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d108      	bne.n	8006700 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066f6:	d009      	beq.n	800670c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	61da      	str	r2, [r3, #28]
 80066fe:	e005      	b.n	800670c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d106      	bne.n	800672c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7fb fcec 	bl	8002104 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2202      	movs	r2, #2
 8006730:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	681a      	ldr	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006742:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800674c:	d902      	bls.n	8006754 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800674e:	2300      	movs	r3, #0
 8006750:	60fb      	str	r3, [r7, #12]
 8006752:	e002      	b.n	800675a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006754:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006758:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006762:	d007      	beq.n	8006774 <HAL_SPI_Init+0xa0>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800676c:	d002      	beq.n	8006774 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006784:	431a      	orrs	r2, r3
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	f003 0302 	and.w	r3, r3, #2
 800678e:	431a      	orrs	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	f003 0301 	and.w	r3, r3, #1
 8006798:	431a      	orrs	r2, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699b      	ldr	r3, [r3, #24]
 800679e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	69db      	ldr	r3, [r3, #28]
 80067a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b6:	ea42 0103 	orr.w	r1, r2, r3
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	0c1b      	lsrs	r3, r3, #16
 80067d0:	f003 0204 	and.w	r2, r3, #4
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	f003 0310 	and.w	r3, r3, #16
 80067dc:	431a      	orrs	r2, r3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067e2:	f003 0308 	and.w	r3, r3, #8
 80067e6:	431a      	orrs	r2, r3
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80067f0:	ea42 0103 	orr.w	r1, r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b082      	sub	sp, #8
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d101      	bne.n	800682c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e049      	b.n	80068c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006832:	b2db      	uxtb	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	d106      	bne.n	8006846 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7fb fca3 	bl	800218c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2202      	movs	r2, #2
 800684a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	3304      	adds	r3, #4
 8006856:	4619      	mov	r1, r3
 8006858:	4610      	mov	r0, r2
 800685a:	f000 f949 	bl	8006af0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2201      	movs	r2, #1
 800689a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2201      	movs	r2, #1
 80068a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2201      	movs	r2, #1
 80068b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3708      	adds	r7, #8
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	60f8      	str	r0, [r7, #12]
 80068d0:	60b9      	str	r1, [r7, #8]
 80068d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068d4:	2300      	movs	r3, #0
 80068d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d101      	bne.n	80068e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80068e2:	2302      	movs	r3, #2
 80068e4:	e0ff      	b.n	8006ae6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b14      	cmp	r3, #20
 80068f2:	f200 80f0 	bhi.w	8006ad6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80068f6:	a201      	add	r2, pc, #4	; (adr r2, 80068fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fc:	08006951 	.word	0x08006951
 8006900:	08006ad7 	.word	0x08006ad7
 8006904:	08006ad7 	.word	0x08006ad7
 8006908:	08006ad7 	.word	0x08006ad7
 800690c:	08006991 	.word	0x08006991
 8006910:	08006ad7 	.word	0x08006ad7
 8006914:	08006ad7 	.word	0x08006ad7
 8006918:	08006ad7 	.word	0x08006ad7
 800691c:	080069d3 	.word	0x080069d3
 8006920:	08006ad7 	.word	0x08006ad7
 8006924:	08006ad7 	.word	0x08006ad7
 8006928:	08006ad7 	.word	0x08006ad7
 800692c:	08006a13 	.word	0x08006a13
 8006930:	08006ad7 	.word	0x08006ad7
 8006934:	08006ad7 	.word	0x08006ad7
 8006938:	08006ad7 	.word	0x08006ad7
 800693c:	08006a55 	.word	0x08006a55
 8006940:	08006ad7 	.word	0x08006ad7
 8006944:	08006ad7 	.word	0x08006ad7
 8006948:	08006ad7 	.word	0x08006ad7
 800694c:	08006a95 	.word	0x08006a95
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68b9      	ldr	r1, [r7, #8]
 8006956:	4618      	mov	r0, r3
 8006958:	f000 f964 	bl	8006c24 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699a      	ldr	r2, [r3, #24]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f042 0208 	orr.w	r2, r2, #8
 800696a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	699a      	ldr	r2, [r3, #24]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f022 0204 	bic.w	r2, r2, #4
 800697a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6999      	ldr	r1, [r3, #24]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	691a      	ldr	r2, [r3, #16]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	619a      	str	r2, [r3, #24]
      break;
 800698e:	e0a5      	b.n	8006adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68b9      	ldr	r1, [r7, #8]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 f9d4 	bl	8006d44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699a      	ldr	r2, [r3, #24]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699a      	ldr	r2, [r3, #24]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6999      	ldr	r1, [r3, #24]
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	691b      	ldr	r3, [r3, #16]
 80069c6:	021a      	lsls	r2, r3, #8
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	619a      	str	r2, [r3, #24]
      break;
 80069d0:	e084      	b.n	8006adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68b9      	ldr	r1, [r7, #8]
 80069d8:	4618      	mov	r0, r3
 80069da:	f000 fa3d 	bl	8006e58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	69da      	ldr	r2, [r3, #28]
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f042 0208 	orr.w	r2, r2, #8
 80069ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	69da      	ldr	r2, [r3, #28]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0204 	bic.w	r2, r2, #4
 80069fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	69d9      	ldr	r1, [r3, #28]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	691a      	ldr	r2, [r3, #16]
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	61da      	str	r2, [r3, #28]
      break;
 8006a10:	e064      	b.n	8006adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68b9      	ldr	r1, [r7, #8]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	f000 faa5 	bl	8006f68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69da      	ldr	r2, [r3, #28]
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69da      	ldr	r2, [r3, #28]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69d9      	ldr	r1, [r3, #28]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	021a      	lsls	r2, r3, #8
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	61da      	str	r2, [r3, #28]
      break;
 8006a52:	e043      	b.n	8006adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 faee 	bl	800703c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0208 	orr.w	r2, r2, #8
 8006a6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0204 	bic.w	r2, r2, #4
 8006a7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	691a      	ldr	r2, [r3, #16]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	430a      	orrs	r2, r1
 8006a90:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a92:	e023      	b.n	8006adc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68b9      	ldr	r1, [r7, #8]
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f000 fb32 	bl	8007104 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006aae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006abe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	021a      	lsls	r2, r3, #8
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	430a      	orrs	r2, r1
 8006ad2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006ad4:	e002      	b.n	8006adc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	75fb      	strb	r3, [r7, #23]
      break;
 8006ada:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop

08006af0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	4a40      	ldr	r2, [pc, #256]	; (8006c04 <TIM_Base_SetConfig+0x114>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d013      	beq.n	8006b30 <TIM_Base_SetConfig+0x40>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0e:	d00f      	beq.n	8006b30 <TIM_Base_SetConfig+0x40>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	4a3d      	ldr	r2, [pc, #244]	; (8006c08 <TIM_Base_SetConfig+0x118>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d00b      	beq.n	8006b30 <TIM_Base_SetConfig+0x40>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a3c      	ldr	r2, [pc, #240]	; (8006c0c <TIM_Base_SetConfig+0x11c>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d007      	beq.n	8006b30 <TIM_Base_SetConfig+0x40>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	4a3b      	ldr	r2, [pc, #236]	; (8006c10 <TIM_Base_SetConfig+0x120>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d003      	beq.n	8006b30 <TIM_Base_SetConfig+0x40>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a3a      	ldr	r2, [pc, #232]	; (8006c14 <TIM_Base_SetConfig+0x124>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d108      	bne.n	8006b42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a2f      	ldr	r2, [pc, #188]	; (8006c04 <TIM_Base_SetConfig+0x114>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d01f      	beq.n	8006b8a <TIM_Base_SetConfig+0x9a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b50:	d01b      	beq.n	8006b8a <TIM_Base_SetConfig+0x9a>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a2c      	ldr	r2, [pc, #176]	; (8006c08 <TIM_Base_SetConfig+0x118>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d017      	beq.n	8006b8a <TIM_Base_SetConfig+0x9a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a2b      	ldr	r2, [pc, #172]	; (8006c0c <TIM_Base_SetConfig+0x11c>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d013      	beq.n	8006b8a <TIM_Base_SetConfig+0x9a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4a2a      	ldr	r2, [pc, #168]	; (8006c10 <TIM_Base_SetConfig+0x120>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d00f      	beq.n	8006b8a <TIM_Base_SetConfig+0x9a>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	4a29      	ldr	r2, [pc, #164]	; (8006c14 <TIM_Base_SetConfig+0x124>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d00b      	beq.n	8006b8a <TIM_Base_SetConfig+0x9a>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	4a28      	ldr	r2, [pc, #160]	; (8006c18 <TIM_Base_SetConfig+0x128>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d007      	beq.n	8006b8a <TIM_Base_SetConfig+0x9a>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4a27      	ldr	r2, [pc, #156]	; (8006c1c <TIM_Base_SetConfig+0x12c>)
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d003      	beq.n	8006b8a <TIM_Base_SetConfig+0x9a>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	4a26      	ldr	r2, [pc, #152]	; (8006c20 <TIM_Base_SetConfig+0x130>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d108      	bne.n	8006b9c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	695b      	ldr	r3, [r3, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	689a      	ldr	r2, [r3, #8]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4a10      	ldr	r2, [pc, #64]	; (8006c04 <TIM_Base_SetConfig+0x114>)
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d00f      	beq.n	8006be8 <TIM_Base_SetConfig+0xf8>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a12      	ldr	r2, [pc, #72]	; (8006c14 <TIM_Base_SetConfig+0x124>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00b      	beq.n	8006be8 <TIM_Base_SetConfig+0xf8>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a11      	ldr	r2, [pc, #68]	; (8006c18 <TIM_Base_SetConfig+0x128>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d007      	beq.n	8006be8 <TIM_Base_SetConfig+0xf8>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a10      	ldr	r2, [pc, #64]	; (8006c1c <TIM_Base_SetConfig+0x12c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d003      	beq.n	8006be8 <TIM_Base_SetConfig+0xf8>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a0f      	ldr	r2, [pc, #60]	; (8006c20 <TIM_Base_SetConfig+0x130>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d103      	bne.n	8006bf0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	691a      	ldr	r2, [r3, #16]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	615a      	str	r2, [r3, #20]
}
 8006bf6:	bf00      	nop
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	40012c00 	.word	0x40012c00
 8006c08:	40000400 	.word	0x40000400
 8006c0c:	40000800 	.word	0x40000800
 8006c10:	40000c00 	.word	0x40000c00
 8006c14:	40013400 	.word	0x40013400
 8006c18:	40014000 	.word	0x40014000
 8006c1c:	40014400 	.word	0x40014400
 8006c20:	40014800 	.word	0x40014800

08006c24 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b087      	sub	sp, #28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a1b      	ldr	r3, [r3, #32]
 8006c32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6a1b      	ldr	r3, [r3, #32]
 8006c38:	f023 0201 	bic.w	r2, r3, #1
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	699b      	ldr	r3, [r3, #24]
 8006c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f023 0303 	bic.w	r3, r3, #3
 8006c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	f023 0302 	bic.w	r3, r3, #2
 8006c70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	697a      	ldr	r2, [r7, #20]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a2c      	ldr	r2, [pc, #176]	; (8006d30 <TIM_OC1_SetConfig+0x10c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d00f      	beq.n	8006ca4 <TIM_OC1_SetConfig+0x80>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a2b      	ldr	r2, [pc, #172]	; (8006d34 <TIM_OC1_SetConfig+0x110>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00b      	beq.n	8006ca4 <TIM_OC1_SetConfig+0x80>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a2a      	ldr	r2, [pc, #168]	; (8006d38 <TIM_OC1_SetConfig+0x114>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d007      	beq.n	8006ca4 <TIM_OC1_SetConfig+0x80>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a29      	ldr	r2, [pc, #164]	; (8006d3c <TIM_OC1_SetConfig+0x118>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_OC1_SetConfig+0x80>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a28      	ldr	r2, [pc, #160]	; (8006d40 <TIM_OC1_SetConfig+0x11c>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d10c      	bne.n	8006cbe <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	f023 0308 	bic.w	r3, r3, #8
 8006caa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f023 0304 	bic.w	r3, r3, #4
 8006cbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a1b      	ldr	r2, [pc, #108]	; (8006d30 <TIM_OC1_SetConfig+0x10c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00f      	beq.n	8006ce6 <TIM_OC1_SetConfig+0xc2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a1a      	ldr	r2, [pc, #104]	; (8006d34 <TIM_OC1_SetConfig+0x110>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d00b      	beq.n	8006ce6 <TIM_OC1_SetConfig+0xc2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a19      	ldr	r2, [pc, #100]	; (8006d38 <TIM_OC1_SetConfig+0x114>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d007      	beq.n	8006ce6 <TIM_OC1_SetConfig+0xc2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a18      	ldr	r2, [pc, #96]	; (8006d3c <TIM_OC1_SetConfig+0x118>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d003      	beq.n	8006ce6 <TIM_OC1_SetConfig+0xc2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a17      	ldr	r2, [pc, #92]	; (8006d40 <TIM_OC1_SetConfig+0x11c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d111      	bne.n	8006d0a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cf4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	699b      	ldr	r3, [r3, #24]
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68fa      	ldr	r2, [r7, #12]
 8006d14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	685a      	ldr	r2, [r3, #4]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	621a      	str	r2, [r3, #32]
}
 8006d24:	bf00      	nop
 8006d26:	371c      	adds	r7, #28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	40012c00 	.word	0x40012c00
 8006d34:	40013400 	.word	0x40013400
 8006d38:	40014000 	.word	0x40014000
 8006d3c:	40014400 	.word	0x40014400
 8006d40:	40014800 	.word	0x40014800

08006d44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b087      	sub	sp, #28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a1b      	ldr	r3, [r3, #32]
 8006d58:	f023 0210 	bic.w	r2, r3, #16
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	699b      	ldr	r3, [r3, #24]
 8006d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	021b      	lsls	r3, r3, #8
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f023 0320 	bic.w	r3, r3, #32
 8006d92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	011b      	lsls	r3, r3, #4
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a28      	ldr	r2, [pc, #160]	; (8006e44 <TIM_OC2_SetConfig+0x100>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d003      	beq.n	8006db0 <TIM_OC2_SetConfig+0x6c>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a27      	ldr	r2, [pc, #156]	; (8006e48 <TIM_OC2_SetConfig+0x104>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d10d      	bne.n	8006dcc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006db6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	011b      	lsls	r3, r3, #4
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	4a1d      	ldr	r2, [pc, #116]	; (8006e44 <TIM_OC2_SetConfig+0x100>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d00f      	beq.n	8006df4 <TIM_OC2_SetConfig+0xb0>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a1c      	ldr	r2, [pc, #112]	; (8006e48 <TIM_OC2_SetConfig+0x104>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d00b      	beq.n	8006df4 <TIM_OC2_SetConfig+0xb0>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a1b      	ldr	r2, [pc, #108]	; (8006e4c <TIM_OC2_SetConfig+0x108>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d007      	beq.n	8006df4 <TIM_OC2_SetConfig+0xb0>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a1a      	ldr	r2, [pc, #104]	; (8006e50 <TIM_OC2_SetConfig+0x10c>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d003      	beq.n	8006df4 <TIM_OC2_SetConfig+0xb0>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a19      	ldr	r2, [pc, #100]	; (8006e54 <TIM_OC2_SetConfig+0x110>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d113      	bne.n	8006e1c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006dfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	009b      	lsls	r3, r3, #2
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	685a      	ldr	r2, [r3, #4]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	621a      	str	r2, [r3, #32]
}
 8006e36:	bf00      	nop
 8006e38:	371c      	adds	r7, #28
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40012c00 	.word	0x40012c00
 8006e48:	40013400 	.word	0x40013400
 8006e4c:	40014000 	.word	0x40014000
 8006e50:	40014400 	.word	0x40014400
 8006e54:	40014800 	.word	0x40014800

08006e58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
 8006e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f023 0303 	bic.w	r3, r3, #3
 8006e92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ea4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	021b      	lsls	r3, r3, #8
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a27      	ldr	r2, [pc, #156]	; (8006f54 <TIM_OC3_SetConfig+0xfc>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d003      	beq.n	8006ec2 <TIM_OC3_SetConfig+0x6a>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a26      	ldr	r2, [pc, #152]	; (8006f58 <TIM_OC3_SetConfig+0x100>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d10d      	bne.n	8006ede <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	021b      	lsls	r3, r3, #8
 8006ed0:	697a      	ldr	r2, [r7, #20]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006edc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4a1c      	ldr	r2, [pc, #112]	; (8006f54 <TIM_OC3_SetConfig+0xfc>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d00f      	beq.n	8006f06 <TIM_OC3_SetConfig+0xae>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	4a1b      	ldr	r2, [pc, #108]	; (8006f58 <TIM_OC3_SetConfig+0x100>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d00b      	beq.n	8006f06 <TIM_OC3_SetConfig+0xae>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	4a1a      	ldr	r2, [pc, #104]	; (8006f5c <TIM_OC3_SetConfig+0x104>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d007      	beq.n	8006f06 <TIM_OC3_SetConfig+0xae>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	4a19      	ldr	r2, [pc, #100]	; (8006f60 <TIM_OC3_SetConfig+0x108>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d003      	beq.n	8006f06 <TIM_OC3_SetConfig+0xae>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a18      	ldr	r2, [pc, #96]	; (8006f64 <TIM_OC3_SetConfig+0x10c>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d113      	bne.n	8006f2e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	011b      	lsls	r3, r3, #4
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	011b      	lsls	r3, r3, #4
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	621a      	str	r2, [r3, #32]
}
 8006f48:	bf00      	nop
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	40012c00 	.word	0x40012c00
 8006f58:	40013400 	.word	0x40013400
 8006f5c:	40014000 	.word	0x40014000
 8006f60:	40014400 	.word	0x40014400
 8006f64:	40014800 	.word	0x40014800

08006f68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a1b      	ldr	r3, [r3, #32]
 8006f76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a1b      	ldr	r3, [r3, #32]
 8006f7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	685b      	ldr	r3, [r3, #4]
 8006f88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	69db      	ldr	r3, [r3, #28]
 8006f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	021b      	lsls	r3, r3, #8
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	031b      	lsls	r3, r3, #12
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a18      	ldr	r2, [pc, #96]	; (8007028 <TIM_OC4_SetConfig+0xc0>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d00f      	beq.n	8006fec <TIM_OC4_SetConfig+0x84>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	4a17      	ldr	r2, [pc, #92]	; (800702c <TIM_OC4_SetConfig+0xc4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d00b      	beq.n	8006fec <TIM_OC4_SetConfig+0x84>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a16      	ldr	r2, [pc, #88]	; (8007030 <TIM_OC4_SetConfig+0xc8>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d007      	beq.n	8006fec <TIM_OC4_SetConfig+0x84>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a15      	ldr	r2, [pc, #84]	; (8007034 <TIM_OC4_SetConfig+0xcc>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d003      	beq.n	8006fec <TIM_OC4_SetConfig+0x84>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a14      	ldr	r2, [pc, #80]	; (8007038 <TIM_OC4_SetConfig+0xd0>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d109      	bne.n	8007000 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ff2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	695b      	ldr	r3, [r3, #20]
 8006ff8:	019b      	lsls	r3, r3, #6
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	697a      	ldr	r2, [r7, #20]
 8007004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	693a      	ldr	r2, [r7, #16]
 8007018:	621a      	str	r2, [r3, #32]
}
 800701a:	bf00      	nop
 800701c:	371c      	adds	r7, #28
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr
 8007026:	bf00      	nop
 8007028:	40012c00 	.word	0x40012c00
 800702c:	40013400 	.word	0x40013400
 8007030:	40014000 	.word	0x40014000
 8007034:	40014400 	.word	0x40014400
 8007038:	40014800 	.word	0x40014800

0800703c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a1b      	ldr	r3, [r3, #32]
 8007050:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800706a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800706e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	4313      	orrs	r3, r2
 8007078:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007080:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	689b      	ldr	r3, [r3, #8]
 8007086:	041b      	lsls	r3, r3, #16
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a17      	ldr	r2, [pc, #92]	; (80070f0 <TIM_OC5_SetConfig+0xb4>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00f      	beq.n	80070b6 <TIM_OC5_SetConfig+0x7a>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a16      	ldr	r2, [pc, #88]	; (80070f4 <TIM_OC5_SetConfig+0xb8>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00b      	beq.n	80070b6 <TIM_OC5_SetConfig+0x7a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a15      	ldr	r2, [pc, #84]	; (80070f8 <TIM_OC5_SetConfig+0xbc>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d007      	beq.n	80070b6 <TIM_OC5_SetConfig+0x7a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a14      	ldr	r2, [pc, #80]	; (80070fc <TIM_OC5_SetConfig+0xc0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d003      	beq.n	80070b6 <TIM_OC5_SetConfig+0x7a>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a13      	ldr	r2, [pc, #76]	; (8007100 <TIM_OC5_SetConfig+0xc4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d109      	bne.n	80070ca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	621a      	str	r2, [r3, #32]
}
 80070e4:	bf00      	nop
 80070e6:	371c      	adds	r7, #28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	40012c00 	.word	0x40012c00
 80070f4:	40013400 	.word	0x40013400
 80070f8:	40014000 	.word	0x40014000
 80070fc:	40014400 	.word	0x40014400
 8007100:	40014800 	.word	0x40014800

08007104 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6a1b      	ldr	r3, [r3, #32]
 8007118:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007132:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	021b      	lsls	r3, r3, #8
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	4313      	orrs	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800714a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	051b      	lsls	r3, r3, #20
 8007152:	693a      	ldr	r2, [r7, #16]
 8007154:	4313      	orrs	r3, r2
 8007156:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a18      	ldr	r2, [pc, #96]	; (80071bc <TIM_OC6_SetConfig+0xb8>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d00f      	beq.n	8007180 <TIM_OC6_SetConfig+0x7c>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a17      	ldr	r2, [pc, #92]	; (80071c0 <TIM_OC6_SetConfig+0xbc>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00b      	beq.n	8007180 <TIM_OC6_SetConfig+0x7c>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a16      	ldr	r2, [pc, #88]	; (80071c4 <TIM_OC6_SetConfig+0xc0>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d007      	beq.n	8007180 <TIM_OC6_SetConfig+0x7c>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a15      	ldr	r2, [pc, #84]	; (80071c8 <TIM_OC6_SetConfig+0xc4>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d003      	beq.n	8007180 <TIM_OC6_SetConfig+0x7c>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a14      	ldr	r2, [pc, #80]	; (80071cc <TIM_OC6_SetConfig+0xc8>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d109      	bne.n	8007194 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007186:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	029b      	lsls	r3, r3, #10
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	4313      	orrs	r3, r2
 8007192:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	697a      	ldr	r2, [r7, #20]
 8007198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	621a      	str	r2, [r3, #32]
}
 80071ae:	bf00      	nop
 80071b0:	371c      	adds	r7, #28
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40012c00 	.word	0x40012c00
 80071c0:	40013400 	.word	0x40013400
 80071c4:	40014000 	.word	0x40014000
 80071c8:	40014400 	.word	0x40014400
 80071cc:	40014800 	.word	0x40014800

080071d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d101      	bne.n	80071e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071e4:	2302      	movs	r3, #2
 80071e6:	e068      	b.n	80072ba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2202      	movs	r2, #2
 80071f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a2e      	ldr	r2, [pc, #184]	; (80072c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d004      	beq.n	800721c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a2d      	ldr	r2, [pc, #180]	; (80072cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d108      	bne.n	800722e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007222:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4313      	orrs	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007234:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	68fa      	ldr	r2, [r7, #12]
 800723c:	4313      	orrs	r3, r2
 800723e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a1e      	ldr	r2, [pc, #120]	; (80072c8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d01d      	beq.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800725a:	d018      	beq.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a1b      	ldr	r2, [pc, #108]	; (80072d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d013      	beq.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a1a      	ldr	r2, [pc, #104]	; (80072d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d00e      	beq.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a18      	ldr	r2, [pc, #96]	; (80072d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d009      	beq.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a13      	ldr	r2, [pc, #76]	; (80072cc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d004      	beq.n	800728e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a14      	ldr	r2, [pc, #80]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d10c      	bne.n	80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007294:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	4313      	orrs	r3, r2
 800729e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2201      	movs	r2, #1
 80072ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3714      	adds	r7, #20
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	40012c00 	.word	0x40012c00
 80072cc:	40013400 	.word	0x40013400
 80072d0:	40000400 	.word	0x40000400
 80072d4:	40000800 	.word	0x40000800
 80072d8:	40000c00 	.word	0x40000c00
 80072dc:	40014000 	.word	0x40014000

080072e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e040      	b.n	8007374 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d106      	bne.n	8007308 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f7fa ff94 	bl	8002230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2224      	movs	r2, #36	; 0x24
 800730c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f022 0201 	bic.w	r2, r2, #1
 800731c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	2b00      	cmp	r3, #0
 8007324:	d002      	beq.n	800732c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fae0 	bl	80078ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f825 	bl	800737c <UART_SetConfig>
 8007332:	4603      	mov	r3, r0
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e01b      	b.n	8007374 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800734a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	689a      	ldr	r2, [r3, #8]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800735a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681a      	ldr	r2, [r3, #0]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f042 0201 	orr.w	r2, r2, #1
 800736a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fb5f 	bl	8007a30 <UART_CheckIdleState>
 8007372:	4603      	mov	r3, r0
}
 8007374:	4618      	mov	r0, r3
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800737c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007380:	b08a      	sub	sp, #40	; 0x28
 8007382:	af00      	add	r7, sp, #0
 8007384:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	689a      	ldr	r2, [r3, #8]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	691b      	ldr	r3, [r3, #16]
 8007394:	431a      	orrs	r2, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	431a      	orrs	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	4ba4      	ldr	r3, [pc, #656]	; (800763c <UART_SetConfig+0x2c0>)
 80073ac:	4013      	ands	r3, r2
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	6812      	ldr	r2, [r2, #0]
 80073b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073b4:	430b      	orrs	r3, r1
 80073b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a99      	ldr	r2, [pc, #612]	; (8007640 <UART_SetConfig+0x2c4>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d004      	beq.n	80073e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	6a1b      	ldr	r3, [r3, #32]
 80073e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e4:	4313      	orrs	r3, r2
 80073e6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f8:	430a      	orrs	r2, r1
 80073fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a90      	ldr	r2, [pc, #576]	; (8007644 <UART_SetConfig+0x2c8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d126      	bne.n	8007454 <UART_SetConfig+0xd8>
 8007406:	4b90      	ldr	r3, [pc, #576]	; (8007648 <UART_SetConfig+0x2cc>)
 8007408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800740c:	f003 0303 	and.w	r3, r3, #3
 8007410:	2b03      	cmp	r3, #3
 8007412:	d81b      	bhi.n	800744c <UART_SetConfig+0xd0>
 8007414:	a201      	add	r2, pc, #4	; (adr r2, 800741c <UART_SetConfig+0xa0>)
 8007416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741a:	bf00      	nop
 800741c:	0800742d 	.word	0x0800742d
 8007420:	0800743d 	.word	0x0800743d
 8007424:	08007435 	.word	0x08007435
 8007428:	08007445 	.word	0x08007445
 800742c:	2301      	movs	r3, #1
 800742e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007432:	e116      	b.n	8007662 <UART_SetConfig+0x2e6>
 8007434:	2302      	movs	r3, #2
 8007436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800743a:	e112      	b.n	8007662 <UART_SetConfig+0x2e6>
 800743c:	2304      	movs	r3, #4
 800743e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007442:	e10e      	b.n	8007662 <UART_SetConfig+0x2e6>
 8007444:	2308      	movs	r3, #8
 8007446:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800744a:	e10a      	b.n	8007662 <UART_SetConfig+0x2e6>
 800744c:	2310      	movs	r3, #16
 800744e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007452:	e106      	b.n	8007662 <UART_SetConfig+0x2e6>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a7c      	ldr	r2, [pc, #496]	; (800764c <UART_SetConfig+0x2d0>)
 800745a:	4293      	cmp	r3, r2
 800745c:	d138      	bne.n	80074d0 <UART_SetConfig+0x154>
 800745e:	4b7a      	ldr	r3, [pc, #488]	; (8007648 <UART_SetConfig+0x2cc>)
 8007460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007464:	f003 030c 	and.w	r3, r3, #12
 8007468:	2b0c      	cmp	r3, #12
 800746a:	d82d      	bhi.n	80074c8 <UART_SetConfig+0x14c>
 800746c:	a201      	add	r2, pc, #4	; (adr r2, 8007474 <UART_SetConfig+0xf8>)
 800746e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007472:	bf00      	nop
 8007474:	080074a9 	.word	0x080074a9
 8007478:	080074c9 	.word	0x080074c9
 800747c:	080074c9 	.word	0x080074c9
 8007480:	080074c9 	.word	0x080074c9
 8007484:	080074b9 	.word	0x080074b9
 8007488:	080074c9 	.word	0x080074c9
 800748c:	080074c9 	.word	0x080074c9
 8007490:	080074c9 	.word	0x080074c9
 8007494:	080074b1 	.word	0x080074b1
 8007498:	080074c9 	.word	0x080074c9
 800749c:	080074c9 	.word	0x080074c9
 80074a0:	080074c9 	.word	0x080074c9
 80074a4:	080074c1 	.word	0x080074c1
 80074a8:	2300      	movs	r3, #0
 80074aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ae:	e0d8      	b.n	8007662 <UART_SetConfig+0x2e6>
 80074b0:	2302      	movs	r3, #2
 80074b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074b6:	e0d4      	b.n	8007662 <UART_SetConfig+0x2e6>
 80074b8:	2304      	movs	r3, #4
 80074ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074be:	e0d0      	b.n	8007662 <UART_SetConfig+0x2e6>
 80074c0:	2308      	movs	r3, #8
 80074c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074c6:	e0cc      	b.n	8007662 <UART_SetConfig+0x2e6>
 80074c8:	2310      	movs	r3, #16
 80074ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80074ce:	e0c8      	b.n	8007662 <UART_SetConfig+0x2e6>
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a5e      	ldr	r2, [pc, #376]	; (8007650 <UART_SetConfig+0x2d4>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d125      	bne.n	8007526 <UART_SetConfig+0x1aa>
 80074da:	4b5b      	ldr	r3, [pc, #364]	; (8007648 <UART_SetConfig+0x2cc>)
 80074dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074e4:	2b30      	cmp	r3, #48	; 0x30
 80074e6:	d016      	beq.n	8007516 <UART_SetConfig+0x19a>
 80074e8:	2b30      	cmp	r3, #48	; 0x30
 80074ea:	d818      	bhi.n	800751e <UART_SetConfig+0x1a2>
 80074ec:	2b20      	cmp	r3, #32
 80074ee:	d00a      	beq.n	8007506 <UART_SetConfig+0x18a>
 80074f0:	2b20      	cmp	r3, #32
 80074f2:	d814      	bhi.n	800751e <UART_SetConfig+0x1a2>
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d002      	beq.n	80074fe <UART_SetConfig+0x182>
 80074f8:	2b10      	cmp	r3, #16
 80074fa:	d008      	beq.n	800750e <UART_SetConfig+0x192>
 80074fc:	e00f      	b.n	800751e <UART_SetConfig+0x1a2>
 80074fe:	2300      	movs	r3, #0
 8007500:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007504:	e0ad      	b.n	8007662 <UART_SetConfig+0x2e6>
 8007506:	2302      	movs	r3, #2
 8007508:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800750c:	e0a9      	b.n	8007662 <UART_SetConfig+0x2e6>
 800750e:	2304      	movs	r3, #4
 8007510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007514:	e0a5      	b.n	8007662 <UART_SetConfig+0x2e6>
 8007516:	2308      	movs	r3, #8
 8007518:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800751c:	e0a1      	b.n	8007662 <UART_SetConfig+0x2e6>
 800751e:	2310      	movs	r3, #16
 8007520:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007524:	e09d      	b.n	8007662 <UART_SetConfig+0x2e6>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a4a      	ldr	r2, [pc, #296]	; (8007654 <UART_SetConfig+0x2d8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d125      	bne.n	800757c <UART_SetConfig+0x200>
 8007530:	4b45      	ldr	r3, [pc, #276]	; (8007648 <UART_SetConfig+0x2cc>)
 8007532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007536:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800753a:	2bc0      	cmp	r3, #192	; 0xc0
 800753c:	d016      	beq.n	800756c <UART_SetConfig+0x1f0>
 800753e:	2bc0      	cmp	r3, #192	; 0xc0
 8007540:	d818      	bhi.n	8007574 <UART_SetConfig+0x1f8>
 8007542:	2b80      	cmp	r3, #128	; 0x80
 8007544:	d00a      	beq.n	800755c <UART_SetConfig+0x1e0>
 8007546:	2b80      	cmp	r3, #128	; 0x80
 8007548:	d814      	bhi.n	8007574 <UART_SetConfig+0x1f8>
 800754a:	2b00      	cmp	r3, #0
 800754c:	d002      	beq.n	8007554 <UART_SetConfig+0x1d8>
 800754e:	2b40      	cmp	r3, #64	; 0x40
 8007550:	d008      	beq.n	8007564 <UART_SetConfig+0x1e8>
 8007552:	e00f      	b.n	8007574 <UART_SetConfig+0x1f8>
 8007554:	2300      	movs	r3, #0
 8007556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800755a:	e082      	b.n	8007662 <UART_SetConfig+0x2e6>
 800755c:	2302      	movs	r3, #2
 800755e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007562:	e07e      	b.n	8007662 <UART_SetConfig+0x2e6>
 8007564:	2304      	movs	r3, #4
 8007566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800756a:	e07a      	b.n	8007662 <UART_SetConfig+0x2e6>
 800756c:	2308      	movs	r3, #8
 800756e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007572:	e076      	b.n	8007662 <UART_SetConfig+0x2e6>
 8007574:	2310      	movs	r3, #16
 8007576:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800757a:	e072      	b.n	8007662 <UART_SetConfig+0x2e6>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a35      	ldr	r2, [pc, #212]	; (8007658 <UART_SetConfig+0x2dc>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d12a      	bne.n	80075dc <UART_SetConfig+0x260>
 8007586:	4b30      	ldr	r3, [pc, #192]	; (8007648 <UART_SetConfig+0x2cc>)
 8007588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800758c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007594:	d01a      	beq.n	80075cc <UART_SetConfig+0x250>
 8007596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800759a:	d81b      	bhi.n	80075d4 <UART_SetConfig+0x258>
 800759c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075a0:	d00c      	beq.n	80075bc <UART_SetConfig+0x240>
 80075a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075a6:	d815      	bhi.n	80075d4 <UART_SetConfig+0x258>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d003      	beq.n	80075b4 <UART_SetConfig+0x238>
 80075ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075b0:	d008      	beq.n	80075c4 <UART_SetConfig+0x248>
 80075b2:	e00f      	b.n	80075d4 <UART_SetConfig+0x258>
 80075b4:	2300      	movs	r3, #0
 80075b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ba:	e052      	b.n	8007662 <UART_SetConfig+0x2e6>
 80075bc:	2302      	movs	r3, #2
 80075be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075c2:	e04e      	b.n	8007662 <UART_SetConfig+0x2e6>
 80075c4:	2304      	movs	r3, #4
 80075c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ca:	e04a      	b.n	8007662 <UART_SetConfig+0x2e6>
 80075cc:	2308      	movs	r3, #8
 80075ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075d2:	e046      	b.n	8007662 <UART_SetConfig+0x2e6>
 80075d4:	2310      	movs	r3, #16
 80075d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075da:	e042      	b.n	8007662 <UART_SetConfig+0x2e6>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a17      	ldr	r2, [pc, #92]	; (8007640 <UART_SetConfig+0x2c4>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d13a      	bne.n	800765c <UART_SetConfig+0x2e0>
 80075e6:	4b18      	ldr	r3, [pc, #96]	; (8007648 <UART_SetConfig+0x2cc>)
 80075e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075f4:	d01a      	beq.n	800762c <UART_SetConfig+0x2b0>
 80075f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075fa:	d81b      	bhi.n	8007634 <UART_SetConfig+0x2b8>
 80075fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007600:	d00c      	beq.n	800761c <UART_SetConfig+0x2a0>
 8007602:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007606:	d815      	bhi.n	8007634 <UART_SetConfig+0x2b8>
 8007608:	2b00      	cmp	r3, #0
 800760a:	d003      	beq.n	8007614 <UART_SetConfig+0x298>
 800760c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007610:	d008      	beq.n	8007624 <UART_SetConfig+0x2a8>
 8007612:	e00f      	b.n	8007634 <UART_SetConfig+0x2b8>
 8007614:	2300      	movs	r3, #0
 8007616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800761a:	e022      	b.n	8007662 <UART_SetConfig+0x2e6>
 800761c:	2302      	movs	r3, #2
 800761e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007622:	e01e      	b.n	8007662 <UART_SetConfig+0x2e6>
 8007624:	2304      	movs	r3, #4
 8007626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800762a:	e01a      	b.n	8007662 <UART_SetConfig+0x2e6>
 800762c:	2308      	movs	r3, #8
 800762e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007632:	e016      	b.n	8007662 <UART_SetConfig+0x2e6>
 8007634:	2310      	movs	r3, #16
 8007636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800763a:	e012      	b.n	8007662 <UART_SetConfig+0x2e6>
 800763c:	efff69f3 	.word	0xefff69f3
 8007640:	40008000 	.word	0x40008000
 8007644:	40013800 	.word	0x40013800
 8007648:	40021000 	.word	0x40021000
 800764c:	40004400 	.word	0x40004400
 8007650:	40004800 	.word	0x40004800
 8007654:	40004c00 	.word	0x40004c00
 8007658:	40005000 	.word	0x40005000
 800765c:	2310      	movs	r3, #16
 800765e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a9f      	ldr	r2, [pc, #636]	; (80078e4 <UART_SetConfig+0x568>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d17a      	bne.n	8007762 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800766c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007670:	2b08      	cmp	r3, #8
 8007672:	d824      	bhi.n	80076be <UART_SetConfig+0x342>
 8007674:	a201      	add	r2, pc, #4	; (adr r2, 800767c <UART_SetConfig+0x300>)
 8007676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767a:	bf00      	nop
 800767c:	080076a1 	.word	0x080076a1
 8007680:	080076bf 	.word	0x080076bf
 8007684:	080076a9 	.word	0x080076a9
 8007688:	080076bf 	.word	0x080076bf
 800768c:	080076af 	.word	0x080076af
 8007690:	080076bf 	.word	0x080076bf
 8007694:	080076bf 	.word	0x080076bf
 8007698:	080076bf 	.word	0x080076bf
 800769c:	080076b7 	.word	0x080076b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076a0:	f7fe fac0 	bl	8005c24 <HAL_RCC_GetPCLK1Freq>
 80076a4:	61f8      	str	r0, [r7, #28]
        break;
 80076a6:	e010      	b.n	80076ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076a8:	4b8f      	ldr	r3, [pc, #572]	; (80078e8 <UART_SetConfig+0x56c>)
 80076aa:	61fb      	str	r3, [r7, #28]
        break;
 80076ac:	e00d      	b.n	80076ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ae:	f7fe fa21 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 80076b2:	61f8      	str	r0, [r7, #28]
        break;
 80076b4:	e009      	b.n	80076ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ba:	61fb      	str	r3, [r7, #28]
        break;
 80076bc:	e005      	b.n	80076ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80076c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	f000 80fb 	beq.w	80078c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	4613      	mov	r3, r2
 80076d8:	005b      	lsls	r3, r3, #1
 80076da:	4413      	add	r3, r2
 80076dc:	69fa      	ldr	r2, [r7, #28]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d305      	bcc.n	80076ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076e8:	69fa      	ldr	r2, [r7, #28]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d903      	bls.n	80076f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076f4:	e0e8      	b.n	80078c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	2200      	movs	r2, #0
 80076fa:	461c      	mov	r4, r3
 80076fc:	4615      	mov	r5, r2
 80076fe:	f04f 0200 	mov.w	r2, #0
 8007702:	f04f 0300 	mov.w	r3, #0
 8007706:	022b      	lsls	r3, r5, #8
 8007708:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800770c:	0222      	lsls	r2, r4, #8
 800770e:	68f9      	ldr	r1, [r7, #12]
 8007710:	6849      	ldr	r1, [r1, #4]
 8007712:	0849      	lsrs	r1, r1, #1
 8007714:	2000      	movs	r0, #0
 8007716:	4688      	mov	r8, r1
 8007718:	4681      	mov	r9, r0
 800771a:	eb12 0a08 	adds.w	sl, r2, r8
 800771e:	eb43 0b09 	adc.w	fp, r3, r9
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	603b      	str	r3, [r7, #0]
 800772a:	607a      	str	r2, [r7, #4]
 800772c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007730:	4650      	mov	r0, sl
 8007732:	4659      	mov	r1, fp
 8007734:	f7f9 fa38 	bl	8000ba8 <__aeabi_uldivmod>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	4613      	mov	r3, r2
 800773e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007746:	d308      	bcc.n	800775a <UART_SetConfig+0x3de>
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800774e:	d204      	bcs.n	800775a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	60da      	str	r2, [r3, #12]
 8007758:	e0b6      	b.n	80078c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007760:	e0b2      	b.n	80078c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	69db      	ldr	r3, [r3, #28]
 8007766:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800776a:	d15e      	bne.n	800782a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800776c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007770:	2b08      	cmp	r3, #8
 8007772:	d828      	bhi.n	80077c6 <UART_SetConfig+0x44a>
 8007774:	a201      	add	r2, pc, #4	; (adr r2, 800777c <UART_SetConfig+0x400>)
 8007776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800777a:	bf00      	nop
 800777c:	080077a1 	.word	0x080077a1
 8007780:	080077a9 	.word	0x080077a9
 8007784:	080077b1 	.word	0x080077b1
 8007788:	080077c7 	.word	0x080077c7
 800778c:	080077b7 	.word	0x080077b7
 8007790:	080077c7 	.word	0x080077c7
 8007794:	080077c7 	.word	0x080077c7
 8007798:	080077c7 	.word	0x080077c7
 800779c:	080077bf 	.word	0x080077bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077a0:	f7fe fa40 	bl	8005c24 <HAL_RCC_GetPCLK1Freq>
 80077a4:	61f8      	str	r0, [r7, #28]
        break;
 80077a6:	e014      	b.n	80077d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077a8:	f7fe fa52 	bl	8005c50 <HAL_RCC_GetPCLK2Freq>
 80077ac:	61f8      	str	r0, [r7, #28]
        break;
 80077ae:	e010      	b.n	80077d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077b0:	4b4d      	ldr	r3, [pc, #308]	; (80078e8 <UART_SetConfig+0x56c>)
 80077b2:	61fb      	str	r3, [r7, #28]
        break;
 80077b4:	e00d      	b.n	80077d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077b6:	f7fe f99d 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 80077ba:	61f8      	str	r0, [r7, #28]
        break;
 80077bc:	e009      	b.n	80077d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077c2:	61fb      	str	r3, [r7, #28]
        break;
 80077c4:	e005      	b.n	80077d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80077c6:	2300      	movs	r3, #0
 80077c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80077d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d077      	beq.n	80078c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	005a      	lsls	r2, r3, #1
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	085b      	lsrs	r3, r3, #1
 80077e2:	441a      	add	r2, r3
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	2b0f      	cmp	r3, #15
 80077f2:	d916      	bls.n	8007822 <UART_SetConfig+0x4a6>
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077fa:	d212      	bcs.n	8007822 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	b29b      	uxth	r3, r3
 8007800:	f023 030f 	bic.w	r3, r3, #15
 8007804:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	085b      	lsrs	r3, r3, #1
 800780a:	b29b      	uxth	r3, r3
 800780c:	f003 0307 	and.w	r3, r3, #7
 8007810:	b29a      	uxth	r2, r3
 8007812:	8afb      	ldrh	r3, [r7, #22]
 8007814:	4313      	orrs	r3, r2
 8007816:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	8afa      	ldrh	r2, [r7, #22]
 800781e:	60da      	str	r2, [r3, #12]
 8007820:	e052      	b.n	80078c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007822:	2301      	movs	r3, #1
 8007824:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007828:	e04e      	b.n	80078c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800782a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800782e:	2b08      	cmp	r3, #8
 8007830:	d827      	bhi.n	8007882 <UART_SetConfig+0x506>
 8007832:	a201      	add	r2, pc, #4	; (adr r2, 8007838 <UART_SetConfig+0x4bc>)
 8007834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007838:	0800785d 	.word	0x0800785d
 800783c:	08007865 	.word	0x08007865
 8007840:	0800786d 	.word	0x0800786d
 8007844:	08007883 	.word	0x08007883
 8007848:	08007873 	.word	0x08007873
 800784c:	08007883 	.word	0x08007883
 8007850:	08007883 	.word	0x08007883
 8007854:	08007883 	.word	0x08007883
 8007858:	0800787b 	.word	0x0800787b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800785c:	f7fe f9e2 	bl	8005c24 <HAL_RCC_GetPCLK1Freq>
 8007860:	61f8      	str	r0, [r7, #28]
        break;
 8007862:	e014      	b.n	800788e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007864:	f7fe f9f4 	bl	8005c50 <HAL_RCC_GetPCLK2Freq>
 8007868:	61f8      	str	r0, [r7, #28]
        break;
 800786a:	e010      	b.n	800788e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800786c:	4b1e      	ldr	r3, [pc, #120]	; (80078e8 <UART_SetConfig+0x56c>)
 800786e:	61fb      	str	r3, [r7, #28]
        break;
 8007870:	e00d      	b.n	800788e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007872:	f7fe f93f 	bl	8005af4 <HAL_RCC_GetSysClockFreq>
 8007876:	61f8      	str	r0, [r7, #28]
        break;
 8007878:	e009      	b.n	800788e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800787a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800787e:	61fb      	str	r3, [r7, #28]
        break;
 8007880:	e005      	b.n	800788e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800788c:	bf00      	nop
    }

    if (pclk != 0U)
 800788e:	69fb      	ldr	r3, [r7, #28]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d019      	beq.n	80078c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	085a      	lsrs	r2, r3, #1
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	441a      	add	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	2b0f      	cmp	r3, #15
 80078ac:	d909      	bls.n	80078c2 <UART_SetConfig+0x546>
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078b4:	d205      	bcs.n	80078c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	60da      	str	r2, [r3, #12]
 80078c0:	e002      	b.n	80078c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	2200      	movs	r2, #0
 80078d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80078d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3728      	adds	r7, #40	; 0x28
 80078dc:	46bd      	mov	sp, r7
 80078de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078e2:	bf00      	nop
 80078e4:	40008000 	.word	0x40008000
 80078e8:	00f42400 	.word	0x00f42400

080078ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f8:	f003 0308 	and.w	r3, r3, #8
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d00a      	beq.n	8007916 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	430a      	orrs	r2, r1
 8007914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791a:	f003 0301 	and.w	r3, r3, #1
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00a      	beq.n	8007938 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793c:	f003 0302 	and.w	r3, r3, #2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d00a      	beq.n	800795a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800795e:	f003 0304 	and.w	r3, r3, #4
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	430a      	orrs	r2, r1
 800797a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	f003 0310 	and.w	r3, r3, #16
 8007984:	2b00      	cmp	r3, #0
 8007986:	d00a      	beq.n	800799e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	430a      	orrs	r2, r1
 800799c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	f003 0320 	and.w	r3, r3, #32
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	430a      	orrs	r2, r1
 80079be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01a      	beq.n	8007a02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ea:	d10a      	bne.n	8007a02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00a      	beq.n	8007a24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	430a      	orrs	r2, r1
 8007a22:	605a      	str	r2, [r3, #4]
  }
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b098      	sub	sp, #96	; 0x60
 8007a34:	af02      	add	r7, sp, #8
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a40:	f7fa fe62 	bl	8002708 <HAL_GetTick>
 8007a44:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f003 0308 	and.w	r3, r3, #8
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d12e      	bne.n	8007ab2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 f88c 	bl	8007b80 <UART_WaitOnFlagUntilTimeout>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d021      	beq.n	8007ab2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a76:	e853 3f00 	ldrex	r3, [r3]
 8007a7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a82:	653b      	str	r3, [r7, #80]	; 0x50
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	461a      	mov	r2, r3
 8007a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a8c:	647b      	str	r3, [r7, #68]	; 0x44
 8007a8e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a94:	e841 2300 	strex	r3, r2, [r1]
 8007a98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d1e6      	bne.n	8007a6e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e062      	b.n	8007b78 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b04      	cmp	r3, #4
 8007abe:	d149      	bne.n	8007b54 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ac0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ac4:	9300      	str	r3, [sp, #0]
 8007ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f856 	bl	8007b80 <UART_WaitOnFlagUntilTimeout>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d03c      	beq.n	8007b54 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae2:	e853 3f00 	ldrex	r3, [r3]
 8007ae6:	623b      	str	r3, [r7, #32]
   return(result);
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007aee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	461a      	mov	r2, r3
 8007af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007af8:	633b      	str	r3, [r7, #48]	; 0x30
 8007afa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007afe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b00:	e841 2300 	strex	r3, r2, [r1]
 8007b04:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e6      	bne.n	8007ada <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3308      	adds	r3, #8
 8007b12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	e853 3f00 	ldrex	r3, [r3]
 8007b1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0301 	bic.w	r3, r3, #1
 8007b22:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3308      	adds	r3, #8
 8007b2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b2c:	61fa      	str	r2, [r7, #28]
 8007b2e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b30:	69b9      	ldr	r1, [r7, #24]
 8007b32:	69fa      	ldr	r2, [r7, #28]
 8007b34:	e841 2300 	strex	r3, r2, [r1]
 8007b38:	617b      	str	r3, [r7, #20]
   return(result);
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e5      	bne.n	8007b0c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2220      	movs	r2, #32
 8007b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e011      	b.n	8007b78 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2220      	movs	r2, #32
 8007b58:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3758      	adds	r7, #88	; 0x58
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	603b      	str	r3, [r7, #0]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b90:	e049      	b.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b98:	d045      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b9a:	f7fa fdb5 	bl	8002708 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d302      	bcc.n	8007bb0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d101      	bne.n	8007bb4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bb0:	2303      	movs	r3, #3
 8007bb2:	e048      	b.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f003 0304 	and.w	r3, r3, #4
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d031      	beq.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69db      	ldr	r3, [r3, #28]
 8007bc8:	f003 0308 	and.w	r3, r3, #8
 8007bcc:	2b08      	cmp	r3, #8
 8007bce:	d110      	bne.n	8007bf2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	2208      	movs	r2, #8
 8007bd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 f838 	bl	8007c4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2208      	movs	r2, #8
 8007be2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2200      	movs	r2, #0
 8007bea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e029      	b.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69db      	ldr	r3, [r3, #28]
 8007bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c00:	d111      	bne.n	8007c26 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c0c:	68f8      	ldr	r0, [r7, #12]
 8007c0e:	f000 f81e 	bl	8007c4e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2220      	movs	r2, #32
 8007c16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e00f      	b.n	8007c46 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	69da      	ldr	r2, [r3, #28]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4013      	ands	r3, r2
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	429a      	cmp	r2, r3
 8007c34:	bf0c      	ite	eq
 8007c36:	2301      	moveq	r3, #1
 8007c38:	2300      	movne	r3, #0
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	79fb      	ldrb	r3, [r7, #7]
 8007c40:	429a      	cmp	r2, r3
 8007c42:	d0a6      	beq.n	8007b92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	b095      	sub	sp, #84	; 0x54
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c5e:	e853 3f00 	ldrex	r3, [r3]
 8007c62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	461a      	mov	r2, r3
 8007c72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c74:	643b      	str	r3, [r7, #64]	; 0x40
 8007c76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c7c:	e841 2300 	strex	r3, r2, [r1]
 8007c80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d1e6      	bne.n	8007c56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	3308      	adds	r3, #8
 8007c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c90:	6a3b      	ldr	r3, [r7, #32]
 8007c92:	e853 3f00 	ldrex	r3, [r3]
 8007c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c98:	69fb      	ldr	r3, [r7, #28]
 8007c9a:	f023 0301 	bic.w	r3, r3, #1
 8007c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ca8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007caa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb0:	e841 2300 	strex	r3, r2, [r1]
 8007cb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e5      	bne.n	8007c88 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d118      	bne.n	8007cf6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	f023 0310 	bic.w	r3, r3, #16
 8007cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce2:	61bb      	str	r3, [r7, #24]
 8007ce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce6:	6979      	ldr	r1, [r7, #20]
 8007ce8:	69ba      	ldr	r2, [r7, #24]
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d1e6      	bne.n	8007cc4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2220      	movs	r2, #32
 8007cfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d0a:	bf00      	nop
 8007d0c:	3754      	adds	r7, #84	; 0x54
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d16:	b084      	sub	sp, #16
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
 8007d20:	f107 001c 	add.w	r0, r7, #28
 8007d24:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f001 fa1d 	bl	8009174 <USB_CoreReset>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8007d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d106      	bne.n	8007d52 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	639a      	str	r2, [r3, #56]	; 0x38
 8007d50:	e005      	b.n	8007d5e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8007d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3710      	adds	r7, #16
 8007d64:	46bd      	mov	sp, r7
 8007d66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007d6a:	b004      	add	sp, #16
 8007d6c:	4770      	bx	lr
	...

08007d70 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b087      	sub	sp, #28
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007d7e:	79fb      	ldrb	r3, [r7, #7]
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d165      	bne.n	8007e50 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	4a3e      	ldr	r2, [pc, #248]	; (8007e80 <USB_SetTurnaroundTime+0x110>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d906      	bls.n	8007d9a <USB_SetTurnaroundTime+0x2a>
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	4a3d      	ldr	r2, [pc, #244]	; (8007e84 <USB_SetTurnaroundTime+0x114>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d202      	bcs.n	8007d9a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007d94:	230f      	movs	r3, #15
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	e05c      	b.n	8007e54 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	4a39      	ldr	r2, [pc, #228]	; (8007e84 <USB_SetTurnaroundTime+0x114>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d306      	bcc.n	8007db0 <USB_SetTurnaroundTime+0x40>
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	4a38      	ldr	r2, [pc, #224]	; (8007e88 <USB_SetTurnaroundTime+0x118>)
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d202      	bcs.n	8007db0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007daa:	230e      	movs	r3, #14
 8007dac:	617b      	str	r3, [r7, #20]
 8007dae:	e051      	b.n	8007e54 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	4a35      	ldr	r2, [pc, #212]	; (8007e88 <USB_SetTurnaroundTime+0x118>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d306      	bcc.n	8007dc6 <USB_SetTurnaroundTime+0x56>
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	4a34      	ldr	r2, [pc, #208]	; (8007e8c <USB_SetTurnaroundTime+0x11c>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d202      	bcs.n	8007dc6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007dc0:	230d      	movs	r3, #13
 8007dc2:	617b      	str	r3, [r7, #20]
 8007dc4:	e046      	b.n	8007e54 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	4a30      	ldr	r2, [pc, #192]	; (8007e8c <USB_SetTurnaroundTime+0x11c>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d306      	bcc.n	8007ddc <USB_SetTurnaroundTime+0x6c>
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	4a2f      	ldr	r2, [pc, #188]	; (8007e90 <USB_SetTurnaroundTime+0x120>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d802      	bhi.n	8007ddc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007dd6:	230c      	movs	r3, #12
 8007dd8:	617b      	str	r3, [r7, #20]
 8007dda:	e03b      	b.n	8007e54 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	4a2c      	ldr	r2, [pc, #176]	; (8007e90 <USB_SetTurnaroundTime+0x120>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d906      	bls.n	8007df2 <USB_SetTurnaroundTime+0x82>
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	4a2b      	ldr	r2, [pc, #172]	; (8007e94 <USB_SetTurnaroundTime+0x124>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d802      	bhi.n	8007df2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007dec:	230b      	movs	r3, #11
 8007dee:	617b      	str	r3, [r7, #20]
 8007df0:	e030      	b.n	8007e54 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	4a27      	ldr	r2, [pc, #156]	; (8007e94 <USB_SetTurnaroundTime+0x124>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d906      	bls.n	8007e08 <USB_SetTurnaroundTime+0x98>
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	4a26      	ldr	r2, [pc, #152]	; (8007e98 <USB_SetTurnaroundTime+0x128>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d802      	bhi.n	8007e08 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007e02:	230a      	movs	r3, #10
 8007e04:	617b      	str	r3, [r7, #20]
 8007e06:	e025      	b.n	8007e54 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	4a23      	ldr	r2, [pc, #140]	; (8007e98 <USB_SetTurnaroundTime+0x128>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d906      	bls.n	8007e1e <USB_SetTurnaroundTime+0xae>
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	4a22      	ldr	r2, [pc, #136]	; (8007e9c <USB_SetTurnaroundTime+0x12c>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d202      	bcs.n	8007e1e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007e18:	2309      	movs	r3, #9
 8007e1a:	617b      	str	r3, [r7, #20]
 8007e1c:	e01a      	b.n	8007e54 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	4a1e      	ldr	r2, [pc, #120]	; (8007e9c <USB_SetTurnaroundTime+0x12c>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d306      	bcc.n	8007e34 <USB_SetTurnaroundTime+0xc4>
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	4a1d      	ldr	r2, [pc, #116]	; (8007ea0 <USB_SetTurnaroundTime+0x130>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d802      	bhi.n	8007e34 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007e2e:	2308      	movs	r3, #8
 8007e30:	617b      	str	r3, [r7, #20]
 8007e32:	e00f      	b.n	8007e54 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	4a1a      	ldr	r2, [pc, #104]	; (8007ea0 <USB_SetTurnaroundTime+0x130>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d906      	bls.n	8007e4a <USB_SetTurnaroundTime+0xda>
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	4a19      	ldr	r2, [pc, #100]	; (8007ea4 <USB_SetTurnaroundTime+0x134>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d202      	bcs.n	8007e4a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007e44:	2307      	movs	r3, #7
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	e004      	b.n	8007e54 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007e4a:	2306      	movs	r3, #6
 8007e4c:	617b      	str	r3, [r7, #20]
 8007e4e:	e001      	b.n	8007e54 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007e50:	2309      	movs	r3, #9
 8007e52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	68da      	ldr	r2, [r3, #12]
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	029b      	lsls	r3, r3, #10
 8007e68:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007e6c:	431a      	orrs	r2, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	371c      	adds	r7, #28
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr
 8007e80:	00d8acbf 	.word	0x00d8acbf
 8007e84:	00e4e1c0 	.word	0x00e4e1c0
 8007e88:	00f42400 	.word	0x00f42400
 8007e8c:	01067380 	.word	0x01067380
 8007e90:	011a499f 	.word	0x011a499f
 8007e94:	01312cff 	.word	0x01312cff
 8007e98:	014ca43f 	.word	0x014ca43f
 8007e9c:	016e3600 	.word	0x016e3600
 8007ea0:	01a6ab1f 	.word	0x01a6ab1f
 8007ea4:	01e84800 	.word	0x01e84800

08007ea8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	f043 0201 	orr.w	r2, r3, #1
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b083      	sub	sp, #12
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f023 0201 	bic.w	r2, r3, #1
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b084      	sub	sp, #16
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
 8007ef4:	460b      	mov	r3, r1
 8007ef6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f08:	78fb      	ldrb	r3, [r7, #3]
 8007f0a:	2b01      	cmp	r3, #1
 8007f0c:	d115      	bne.n	8007f3a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f1a:	2001      	movs	r0, #1
 8007f1c:	f7fa fc00 	bl	8002720 <HAL_Delay>
      ms++;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	3301      	adds	r3, #1
 8007f24:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f001 f8ab 	bl	8009082 <USB_GetMode>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d01e      	beq.n	8007f70 <USB_SetCurrentMode+0x84>
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b31      	cmp	r3, #49	; 0x31
 8007f36:	d9f0      	bls.n	8007f1a <USB_SetCurrentMode+0x2e>
 8007f38:	e01a      	b.n	8007f70 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007f3a:	78fb      	ldrb	r3, [r7, #3]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d115      	bne.n	8007f6c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	68db      	ldr	r3, [r3, #12]
 8007f44:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f4c:	2001      	movs	r0, #1
 8007f4e:	f7fa fbe7 	bl	8002720 <HAL_Delay>
      ms++;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	3301      	adds	r3, #1
 8007f56:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f001 f892 	bl	8009082 <USB_GetMode>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d005      	beq.n	8007f70 <USB_SetCurrentMode+0x84>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2b31      	cmp	r3, #49	; 0x31
 8007f68:	d9f0      	bls.n	8007f4c <USB_SetCurrentMode+0x60>
 8007f6a:	e001      	b.n	8007f70 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e005      	b.n	8007f7c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2b32      	cmp	r3, #50	; 0x32
 8007f74:	d101      	bne.n	8007f7a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e000      	b.n	8007f7c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007f84:	b084      	sub	sp, #16
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b086      	sub	sp, #24
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007f92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007f96:	2300      	movs	r3, #0
 8007f98:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	613b      	str	r3, [r7, #16]
 8007fa2:	e009      	b.n	8007fb8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	3340      	adds	r3, #64	; 0x40
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	4413      	add	r3, r2
 8007fae:	2200      	movs	r2, #0
 8007fb0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	613b      	str	r3, [r7, #16]
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	2b0e      	cmp	r3, #14
 8007fbc:	d9f2      	bls.n	8007fa4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d11c      	bne.n	8007ffe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	68fa      	ldr	r2, [r7, #12]
 8007fce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007fd2:	f043 0302 	orr.w	r3, r3, #2
 8007fd6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fdc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	601a      	str	r2, [r3, #0]
 8007ffc:	e005      	b.n	800800a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008002:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008010:	461a      	mov	r2, r3
 8008012:	2300      	movs	r3, #0
 8008014:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008016:	2103      	movs	r1, #3
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 f959 	bl	80082d0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800801e:	2110      	movs	r1, #16
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	f000 f8f1 	bl	8008208 <USB_FlushTxFifo>
 8008026:	4603      	mov	r3, r0
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f000 f91d 	bl	8008270 <USB_FlushRxFifo>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800803c:	2301      	movs	r3, #1
 800803e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008046:	461a      	mov	r2, r3
 8008048:	2300      	movs	r3, #0
 800804a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008052:	461a      	mov	r2, r3
 8008054:	2300      	movs	r3, #0
 8008056:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800805e:	461a      	mov	r2, r3
 8008060:	2300      	movs	r3, #0
 8008062:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008064:	2300      	movs	r3, #0
 8008066:	613b      	str	r3, [r7, #16]
 8008068:	e043      	b.n	80080f2 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4413      	add	r3, r2
 8008072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800807c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008080:	d118      	bne.n	80080b4 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10a      	bne.n	800809e <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	015a      	lsls	r2, r3, #5
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4413      	add	r3, r2
 8008090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008094:	461a      	mov	r2, r3
 8008096:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800809a:	6013      	str	r3, [r2, #0]
 800809c:	e013      	b.n	80080c6 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080aa:	461a      	mov	r2, r3
 80080ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80080b0:	6013      	str	r3, [r2, #0]
 80080b2:	e008      	b.n	80080c6 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080c0:	461a      	mov	r2, r3
 80080c2:	2300      	movs	r3, #0
 80080c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080d2:	461a      	mov	r2, r3
 80080d4:	2300      	movs	r3, #0
 80080d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80080d8:	693b      	ldr	r3, [r7, #16]
 80080da:	015a      	lsls	r2, r3, #5
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	4413      	add	r3, r2
 80080e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e4:	461a      	mov	r2, r3
 80080e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	3301      	adds	r3, #1
 80080f0:	613b      	str	r3, [r7, #16]
 80080f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f4:	693a      	ldr	r2, [r7, #16]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d3b7      	bcc.n	800806a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80080fa:	2300      	movs	r3, #0
 80080fc:	613b      	str	r3, [r7, #16]
 80080fe:	e043      	b.n	8008188 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008100:	693b      	ldr	r3, [r7, #16]
 8008102:	015a      	lsls	r2, r3, #5
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4413      	add	r3, r2
 8008108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008116:	d118      	bne.n	800814a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10a      	bne.n	8008134 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	4413      	add	r3, r2
 8008126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800812a:	461a      	mov	r2, r3
 800812c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008130:	6013      	str	r3, [r2, #0]
 8008132:	e013      	b.n	800815c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	015a      	lsls	r2, r3, #5
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	4413      	add	r3, r2
 800813c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008140:	461a      	mov	r2, r3
 8008142:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	e008      	b.n	800815c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	015a      	lsls	r2, r3, #5
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	4413      	add	r3, r2
 8008152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008156:	461a      	mov	r2, r3
 8008158:	2300      	movs	r3, #0
 800815a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	015a      	lsls	r2, r3, #5
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	4413      	add	r3, r2
 8008164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008168:	461a      	mov	r2, r3
 800816a:	2300      	movs	r3, #0
 800816c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800816e:	693b      	ldr	r3, [r7, #16]
 8008170:	015a      	lsls	r2, r3, #5
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	4413      	add	r3, r2
 8008176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800817a:	461a      	mov	r2, r3
 800817c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008180:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	3301      	adds	r3, #1
 8008186:	613b      	str	r3, [r7, #16]
 8008188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	429a      	cmp	r2, r3
 800818e:	d3b7      	bcc.n	8008100 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	68fa      	ldr	r2, [r7, #12]
 800819a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800819e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80081b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	f043 0210 	orr.w	r2, r3, #16
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	4b10      	ldr	r3, [pc, #64]	; (8008204 <USB_DevInit+0x280>)
 80081c4:	4313      	orrs	r3, r2
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80081ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d005      	beq.n	80081dc <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	699b      	ldr	r3, [r3, #24]
 80081d4:	f043 0208 	orr.w	r2, r3, #8
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80081dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d107      	bne.n	80081f2 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	699b      	ldr	r3, [r3, #24]
 80081e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80081ea:	f043 0304 	orr.w	r3, r3, #4
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80081f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081fe:	b004      	add	sp, #16
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	803c3800 	.word	0x803c3800

08008208 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	3301      	adds	r3, #1
 800821a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4a13      	ldr	r2, [pc, #76]	; (800826c <USB_FlushTxFifo+0x64>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d901      	bls.n	8008228 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e01b      	b.n	8008260 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	691b      	ldr	r3, [r3, #16]
 800822c:	2b00      	cmp	r3, #0
 800822e:	daf2      	bge.n	8008216 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008230:	2300      	movs	r3, #0
 8008232:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	019b      	lsls	r3, r3, #6
 8008238:	f043 0220 	orr.w	r2, r3, #32
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	3301      	adds	r3, #1
 8008244:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	4a08      	ldr	r2, [pc, #32]	; (800826c <USB_FlushTxFifo+0x64>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d901      	bls.n	8008252 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800824e:	2303      	movs	r3, #3
 8008250:	e006      	b.n	8008260 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	f003 0320 	and.w	r3, r3, #32
 800825a:	2b20      	cmp	r3, #32
 800825c:	d0f0      	beq.n	8008240 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr
 800826c:	00030d40 	.word	0x00030d40

08008270 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008278:	2300      	movs	r3, #0
 800827a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	3301      	adds	r3, #1
 8008280:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	4a11      	ldr	r2, [pc, #68]	; (80082cc <USB_FlushRxFifo+0x5c>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d901      	bls.n	800828e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800828a:	2303      	movs	r3, #3
 800828c:	e018      	b.n	80082c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	691b      	ldr	r3, [r3, #16]
 8008292:	2b00      	cmp	r3, #0
 8008294:	daf2      	bge.n	800827c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008296:	2300      	movs	r3, #0
 8008298:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2210      	movs	r2, #16
 800829e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	3301      	adds	r3, #1
 80082a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	4a08      	ldr	r2, [pc, #32]	; (80082cc <USB_FlushRxFifo+0x5c>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d901      	bls.n	80082b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80082ae:	2303      	movs	r3, #3
 80082b0:	e006      	b.n	80082c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	691b      	ldr	r3, [r3, #16]
 80082b6:	f003 0310 	and.w	r3, r3, #16
 80082ba:	2b10      	cmp	r3, #16
 80082bc:	d0f0      	beq.n	80082a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	00030d40 	.word	0x00030d40

080082d0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b085      	sub	sp, #20
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	460b      	mov	r3, r1
 80082da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	78fb      	ldrb	r3, [r7, #3]
 80082ea:	68f9      	ldr	r1, [r7, #12]
 80082ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082f0:	4313      	orrs	r3, r2
 80082f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr

08008302 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008302:	b480      	push	{r7}
 8008304:	b087      	sub	sp, #28
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	f003 0306 	and.w	r3, r3, #6
 800831a:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	2b02      	cmp	r3, #2
 8008320:	d002      	beq.n	8008328 <USB_GetDevSpeed+0x26>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2b06      	cmp	r3, #6
 8008326:	d102      	bne.n	800832e <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008328:	2302      	movs	r3, #2
 800832a:	75fb      	strb	r3, [r7, #23]
 800832c:	e001      	b.n	8008332 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800832e:	230f      	movs	r3, #15
 8008330:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008332:	7dfb      	ldrb	r3, [r7, #23]
}
 8008334:	4618      	mov	r0, r3
 8008336:	371c      	adds	r7, #28
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008340:	b480      	push	{r7}
 8008342:	b085      	sub	sp, #20
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	785b      	ldrb	r3, [r3, #1]
 8008358:	2b01      	cmp	r3, #1
 800835a:	d13a      	bne.n	80083d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008362:	69da      	ldr	r2, [r3, #28]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	f003 030f 	and.w	r3, r3, #15
 800836c:	2101      	movs	r1, #1
 800836e:	fa01 f303 	lsl.w	r3, r1, r3
 8008372:	b29b      	uxth	r3, r3
 8008374:	68f9      	ldr	r1, [r7, #12]
 8008376:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800837a:	4313      	orrs	r3, r2
 800837c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	015a      	lsls	r2, r3, #5
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	4413      	add	r3, r2
 8008386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008390:	2b00      	cmp	r3, #0
 8008392:	d155      	bne.n	8008440 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	015a      	lsls	r2, r3, #5
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	4413      	add	r3, r2
 800839c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80083aa:	683b      	ldr	r3, [r7, #0]
 80083ac:	791b      	ldrb	r3, [r3, #4]
 80083ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	059b      	lsls	r3, r3, #22
 80083b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80083b8:	4313      	orrs	r3, r2
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	0151      	lsls	r1, r2, #5
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	440a      	add	r2, r1
 80083c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80083c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083ce:	6013      	str	r3, [r2, #0]
 80083d0:	e036      	b.n	8008440 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d8:	69da      	ldr	r2, [r3, #28]
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	f003 030f 	and.w	r3, r3, #15
 80083e2:	2101      	movs	r1, #1
 80083e4:	fa01 f303 	lsl.w	r3, r1, r3
 80083e8:	041b      	lsls	r3, r3, #16
 80083ea:	68f9      	ldr	r1, [r7, #12]
 80083ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083f0:	4313      	orrs	r3, r2
 80083f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008406:	2b00      	cmp	r3, #0
 8008408:	d11a      	bne.n	8008440 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	015a      	lsls	r2, r3, #5
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	4413      	add	r3, r2
 8008412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008416:	681a      	ldr	r2, [r3, #0]
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	689b      	ldr	r3, [r3, #8]
 800841c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	791b      	ldrb	r3, [r3, #4]
 8008424:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008426:	430b      	orrs	r3, r1
 8008428:	4313      	orrs	r3, r2
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	0151      	lsls	r1, r2, #5
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	440a      	add	r2, r1
 8008432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008436:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800843a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800843e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
	...

08008450 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008450:	b480      	push	{r7}
 8008452:	b085      	sub	sp, #20
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	785b      	ldrb	r3, [r3, #1]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d161      	bne.n	8008530 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800847e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008482:	d11f      	bne.n	80084c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	015a      	lsls	r2, r3, #5
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	4413      	add	r3, r2
 800848c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	0151      	lsls	r1, r2, #5
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	440a      	add	r2, r1
 800849a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800849e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80084a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	015a      	lsls	r2, r3, #5
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	68ba      	ldr	r2, [r7, #8]
 80084b4:	0151      	lsls	r1, r2, #5
 80084b6:	68fa      	ldr	r2, [r7, #12]
 80084b8:	440a      	add	r2, r1
 80084ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80084c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	f003 030f 	and.w	r3, r3, #15
 80084d4:	2101      	movs	r1, #1
 80084d6:	fa01 f303 	lsl.w	r3, r1, r3
 80084da:	b29b      	uxth	r3, r3
 80084dc:	43db      	mvns	r3, r3
 80084de:	68f9      	ldr	r1, [r7, #12]
 80084e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084e4:	4013      	ands	r3, r2
 80084e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ee:	69da      	ldr	r2, [r3, #28]
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	f003 030f 	and.w	r3, r3, #15
 80084f8:	2101      	movs	r1, #1
 80084fa:	fa01 f303 	lsl.w	r3, r1, r3
 80084fe:	b29b      	uxth	r3, r3
 8008500:	43db      	mvns	r3, r3
 8008502:	68f9      	ldr	r1, [r7, #12]
 8008504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008508:	4013      	ands	r3, r2
 800850a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	015a      	lsls	r2, r3, #5
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	4413      	add	r3, r2
 8008514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	0159      	lsls	r1, r3, #5
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	440b      	add	r3, r1
 8008522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008526:	4619      	mov	r1, r3
 8008528:	4b35      	ldr	r3, [pc, #212]	; (8008600 <USB_DeactivateEndpoint+0x1b0>)
 800852a:	4013      	ands	r3, r2
 800852c:	600b      	str	r3, [r1, #0]
 800852e:	e060      	b.n	80085f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	015a      	lsls	r2, r3, #5
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	4413      	add	r3, r2
 8008538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008542:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008546:	d11f      	bne.n	8008588 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	015a      	lsls	r2, r3, #5
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4413      	add	r3, r2
 8008550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	0151      	lsls	r1, r2, #5
 800855a:	68fa      	ldr	r2, [r7, #12]
 800855c:	440a      	add	r2, r1
 800855e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008562:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008566:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	015a      	lsls	r2, r3, #5
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	4413      	add	r3, r2
 8008570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	0151      	lsls	r1, r2, #5
 800857a:	68fa      	ldr	r2, [r7, #12]
 800857c:	440a      	add	r2, r1
 800857e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008582:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008586:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800858e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	781b      	ldrb	r3, [r3, #0]
 8008594:	f003 030f 	and.w	r3, r3, #15
 8008598:	2101      	movs	r1, #1
 800859a:	fa01 f303 	lsl.w	r3, r1, r3
 800859e:	041b      	lsls	r3, r3, #16
 80085a0:	43db      	mvns	r3, r3
 80085a2:	68f9      	ldr	r1, [r7, #12]
 80085a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085a8:	4013      	ands	r3, r2
 80085aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b2:	69da      	ldr	r2, [r3, #28]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	f003 030f 	and.w	r3, r3, #15
 80085bc:	2101      	movs	r1, #1
 80085be:	fa01 f303 	lsl.w	r3, r1, r3
 80085c2:	041b      	lsls	r3, r3, #16
 80085c4:	43db      	mvns	r3, r3
 80085c6:	68f9      	ldr	r1, [r7, #12]
 80085c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085cc:	4013      	ands	r3, r2
 80085ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085dc:	681a      	ldr	r2, [r3, #0]
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	0159      	lsls	r1, r3, #5
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	440b      	add	r3, r1
 80085e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ea:	4619      	mov	r1, r3
 80085ec:	4b05      	ldr	r3, [pc, #20]	; (8008604 <USB_DeactivateEndpoint+0x1b4>)
 80085ee:	4013      	ands	r3, r2
 80085f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr
 8008600:	ec337800 	.word	0xec337800
 8008604:	eff37800 	.word	0xeff37800

08008608 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b086      	sub	sp, #24
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	785b      	ldrb	r3, [r3, #1]
 8008620:	2b01      	cmp	r3, #1
 8008622:	f040 8128 	bne.w	8008876 <USB_EPStartXfer+0x26e>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	d132      	bne.n	8008694 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	015a      	lsls	r2, r3, #5
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	4413      	add	r3, r2
 8008636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	0151      	lsls	r1, r2, #5
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	440a      	add	r2, r1
 8008644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008648:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800864c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008650:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	4413      	add	r3, r2
 800865a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	0151      	lsls	r1, r2, #5
 8008664:	697a      	ldr	r2, [r7, #20]
 8008666:	440a      	add	r2, r1
 8008668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800866c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008670:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	015a      	lsls	r2, r3, #5
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	4413      	add	r3, r2
 800867a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	0151      	lsls	r1, r2, #5
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	440a      	add	r2, r1
 8008688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800868c:	0cdb      	lsrs	r3, r3, #19
 800868e:	04db      	lsls	r3, r3, #19
 8008690:	6113      	str	r3, [r2, #16]
 8008692:	e092      	b.n	80087ba <USB_EPStartXfer+0x1b2>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	015a      	lsls	r2, r3, #5
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	4413      	add	r3, r2
 800869c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	0151      	lsls	r1, r2, #5
 80086a6:	697a      	ldr	r2, [r7, #20]
 80086a8:	440a      	add	r2, r1
 80086aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ae:	0cdb      	lsrs	r3, r3, #19
 80086b0:	04db      	lsls	r3, r3, #19
 80086b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	015a      	lsls	r2, r3, #5
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	4413      	add	r3, r2
 80086bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	693a      	ldr	r2, [r7, #16]
 80086c4:	0151      	lsls	r1, r2, #5
 80086c6:	697a      	ldr	r2, [r7, #20]
 80086c8:	440a      	add	r2, r1
 80086ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80086d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80086d6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d11a      	bne.n	8008714 <USB_EPStartXfer+0x10c>
      {
        if (ep->xfer_len > ep->maxpacket)
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	691a      	ldr	r2, [r3, #16]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d903      	bls.n	80086f2 <USB_EPStartXfer+0xea>
        {
          ep->xfer_len = ep->maxpacket;
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	689a      	ldr	r2, [r3, #8]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086fe:	691b      	ldr	r3, [r3, #16]
 8008700:	693a      	ldr	r2, [r7, #16]
 8008702:	0151      	lsls	r1, r2, #5
 8008704:	697a      	ldr	r2, [r7, #20]
 8008706:	440a      	add	r2, r1
 8008708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800870c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008710:	6113      	str	r3, [r2, #16]
 8008712:	e01b      	b.n	800874c <USB_EPStartXfer+0x144>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	015a      	lsls	r2, r3, #5
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	4413      	add	r3, r2
 800871c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008720:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	6919      	ldr	r1, [r3, #16]
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	440b      	add	r3, r1
 800872c:	1e59      	subs	r1, r3, #1
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	fbb1 f3f3 	udiv	r3, r1, r3
 8008736:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008738:	4b8d      	ldr	r3, [pc, #564]	; (8008970 <USB_EPStartXfer+0x368>)
 800873a:	400b      	ands	r3, r1
 800873c:	6939      	ldr	r1, [r7, #16]
 800873e:	0148      	lsls	r0, r1, #5
 8008740:	6979      	ldr	r1, [r7, #20]
 8008742:	4401      	add	r1, r0
 8008744:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008748:	4313      	orrs	r3, r2
 800874a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	015a      	lsls	r2, r3, #5
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	4413      	add	r3, r2
 8008754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008758:	691a      	ldr	r2, [r3, #16]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008762:	6939      	ldr	r1, [r7, #16]
 8008764:	0148      	lsls	r0, r1, #5
 8008766:	6979      	ldr	r1, [r7, #20]
 8008768:	4401      	add	r1, r0
 800876a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800876e:	4313      	orrs	r3, r2
 8008770:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008772:	683b      	ldr	r3, [r7, #0]
 8008774:	791b      	ldrb	r3, [r3, #4]
 8008776:	2b01      	cmp	r3, #1
 8008778:	d11f      	bne.n	80087ba <USB_EPStartXfer+0x1b2>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	693a      	ldr	r2, [r7, #16]
 800878a:	0151      	lsls	r1, r2, #5
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	440a      	add	r2, r1
 8008790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008794:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008798:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	015a      	lsls	r2, r3, #5
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	4413      	add	r3, r2
 80087a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	693a      	ldr	r2, [r7, #16]
 80087aa:	0151      	lsls	r1, r2, #5
 80087ac:	697a      	ldr	r2, [r7, #20]
 80087ae:	440a      	add	r2, r1
 80087b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087b8:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	015a      	lsls	r2, r3, #5
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	4413      	add	r3, r2
 80087c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	0151      	lsls	r1, r2, #5
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	440a      	add	r2, r1
 80087d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80087d8:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	791b      	ldrb	r3, [r3, #4]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d015      	beq.n	800880e <USB_EPStartXfer+0x206>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	f000 8139 	beq.w	8008a5e <USB_EPStartXfer+0x456>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	f003 030f 	and.w	r3, r3, #15
 80087fc:	2101      	movs	r1, #1
 80087fe:	fa01 f303 	lsl.w	r3, r1, r3
 8008802:	6979      	ldr	r1, [r7, #20]
 8008804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008808:	4313      	orrs	r3, r2
 800880a:	634b      	str	r3, [r1, #52]	; 0x34
 800880c:	e127      	b.n	8008a5e <USB_EPStartXfer+0x456>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881a:	2b00      	cmp	r3, #0
 800881c:	d110      	bne.n	8008840 <USB_EPStartXfer+0x238>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	4413      	add	r3, r2
 8008826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	693a      	ldr	r2, [r7, #16]
 800882e:	0151      	lsls	r1, r2, #5
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	440a      	add	r2, r1
 8008834:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008838:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800883c:	6013      	str	r3, [r2, #0]
 800883e:	e00f      	b.n	8008860 <USB_EPStartXfer+0x258>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008840:	693b      	ldr	r3, [r7, #16]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	4413      	add	r3, r2
 8008848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	693a      	ldr	r2, [r7, #16]
 8008850:	0151      	lsls	r1, r2, #5
 8008852:	697a      	ldr	r2, [r7, #20]
 8008854:	440a      	add	r2, r1
 8008856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800885a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800885e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	68d9      	ldr	r1, [r3, #12]
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	781a      	ldrb	r2, [r3, #0]
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	691b      	ldr	r3, [r3, #16]
 800886c:	b29b      	uxth	r3, r3
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f9a6 	bl	8008bc0 <USB_WritePacket>
 8008874:	e0f3      	b.n	8008a5e <USB_EPStartXfer+0x456>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	4413      	add	r3, r2
 800887e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008882:	691b      	ldr	r3, [r3, #16]
 8008884:	693a      	ldr	r2, [r7, #16]
 8008886:	0151      	lsls	r1, r2, #5
 8008888:	697a      	ldr	r2, [r7, #20]
 800888a:	440a      	add	r2, r1
 800888c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008890:	0cdb      	lsrs	r3, r3, #19
 8008892:	04db      	lsls	r3, r3, #19
 8008894:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008896:	693b      	ldr	r3, [r7, #16]
 8008898:	015a      	lsls	r2, r3, #5
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	4413      	add	r3, r2
 800889e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a2:	691b      	ldr	r3, [r3, #16]
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	0151      	lsls	r1, r2, #5
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	440a      	add	r2, r1
 80088ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80088b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80088b8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d12f      	bne.n	8008920 <USB_EPStartXfer+0x318>
    {
      if (ep->xfer_len > 0U)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d003      	beq.n	80088d0 <USB_EPStartXfer+0x2c8>
      {
        ep->xfer_len = ep->maxpacket;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	689a      	ldr	r2, [r3, #8]
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	689a      	ldr	r2, [r3, #8]
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e4:	691a      	ldr	r2, [r3, #16]
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088ee:	6939      	ldr	r1, [r7, #16]
 80088f0:	0148      	lsls	r0, r1, #5
 80088f2:	6979      	ldr	r1, [r7, #20]
 80088f4:	4401      	add	r1, r0
 80088f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088fa:	4313      	orrs	r3, r2
 80088fc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	4413      	add	r3, r2
 8008906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	0151      	lsls	r1, r2, #5
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	440a      	add	r2, r1
 8008914:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008918:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800891c:	6113      	str	r3, [r2, #16]
 800891e:	e061      	b.n	80089e4 <USB_EPStartXfer+0x3dc>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d125      	bne.n	8008974 <USB_EPStartXfer+0x36c>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	015a      	lsls	r2, r3, #5
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	4413      	add	r3, r2
 8008930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008934:	691a      	ldr	r2, [r3, #16]
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800893e:	6939      	ldr	r1, [r7, #16]
 8008940:	0148      	lsls	r0, r1, #5
 8008942:	6979      	ldr	r1, [r7, #20]
 8008944:	4401      	add	r1, r0
 8008946:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800894a:	4313      	orrs	r3, r2
 800894c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	4413      	add	r3, r2
 8008956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	0151      	lsls	r1, r2, #5
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	440a      	add	r2, r1
 8008964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800896c:	6113      	str	r3, [r2, #16]
 800896e:	e039      	b.n	80089e4 <USB_EPStartXfer+0x3dc>
 8008970:	1ff80000 	.word	0x1ff80000
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	691a      	ldr	r2, [r3, #16]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	4413      	add	r3, r2
 800897e:	1e5a      	subs	r2, r3, #1
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	fbb2 f3f3 	udiv	r3, r2, r3
 8008988:	81fb      	strh	r3, [r7, #14]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	89fa      	ldrh	r2, [r7, #14]
 8008990:	fb03 f202 	mul.w	r2, r3, r2
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	015a      	lsls	r2, r3, #5
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	4413      	add	r3, r2
 80089a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a4:	691a      	ldr	r2, [r3, #16]
 80089a6:	89fb      	ldrh	r3, [r7, #14]
 80089a8:	04d9      	lsls	r1, r3, #19
 80089aa:	4b2f      	ldr	r3, [pc, #188]	; (8008a68 <USB_EPStartXfer+0x460>)
 80089ac:	400b      	ands	r3, r1
 80089ae:	6939      	ldr	r1, [r7, #16]
 80089b0:	0148      	lsls	r0, r1, #5
 80089b2:	6979      	ldr	r1, [r7, #20]
 80089b4:	4401      	add	r1, r0
 80089b6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089ba:	4313      	orrs	r3, r2
 80089bc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ca:	691a      	ldr	r2, [r3, #16]
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089d4:	6939      	ldr	r1, [r7, #16]
 80089d6:	0148      	lsls	r0, r1, #5
 80089d8:	6979      	ldr	r1, [r7, #20]
 80089da:	4401      	add	r1, r0
 80089dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80089e0:	4313      	orrs	r3, r2
 80089e2:	610b      	str	r3, [r1, #16]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	791b      	ldrb	r3, [r3, #4]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d128      	bne.n	8008a3e <USB_EPStartXfer+0x436>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d110      	bne.n	8008a1e <USB_EPStartXfer+0x416>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	693a      	ldr	r2, [r7, #16]
 8008a0c:	0151      	lsls	r1, r2, #5
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	440a      	add	r2, r1
 8008a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a16:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	e00f      	b.n	8008a3e <USB_EPStartXfer+0x436>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	015a      	lsls	r2, r3, #5
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	693a      	ldr	r2, [r7, #16]
 8008a2e:	0151      	lsls	r1, r2, #5
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	440a      	add	r2, r1
 8008a34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a3c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	015a      	lsls	r2, r3, #5
 8008a42:	697b      	ldr	r3, [r7, #20]
 8008a44:	4413      	add	r3, r2
 8008a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	693a      	ldr	r2, [r7, #16]
 8008a4e:	0151      	lsls	r1, r2, #5
 8008a50:	697a      	ldr	r2, [r7, #20]
 8008a52:	440a      	add	r2, r1
 8008a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008a5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3718      	adds	r7, #24
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	1ff80000 	.word	0x1ff80000

08008a6c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a6c:	b480      	push	{r7}
 8008a6e:	b087      	sub	sp, #28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008a76:	2300      	movs	r3, #0
 8008a78:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	785b      	ldrb	r3, [r3, #1]
 8008a86:	2b01      	cmp	r3, #1
 8008a88:	d14a      	bne.n	8008b20 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	015a      	lsls	r2, r3, #5
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008aa2:	f040 8086 	bne.w	8008bb2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	683a      	ldr	r2, [r7, #0]
 8008ab8:	7812      	ldrb	r2, [r2, #0]
 8008aba:	0151      	lsls	r1, r2, #5
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	440a      	add	r2, r1
 8008ac0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ac4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ac8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	015a      	lsls	r2, r3, #5
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	7812      	ldrb	r2, [r2, #0]
 8008ade:	0151      	lsls	r1, r2, #5
 8008ae0:	693a      	ldr	r2, [r7, #16]
 8008ae2:	440a      	add	r2, r1
 8008ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ae8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008aec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	3301      	adds	r3, #1
 8008af2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f242 7210 	movw	r2, #10000	; 0x2710
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d902      	bls.n	8008b04 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	75fb      	strb	r3, [r7, #23]
          break;
 8008b02:	e056      	b.n	8008bb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	781b      	ldrb	r3, [r3, #0]
 8008b08:	015a      	lsls	r2, r3, #5
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	4413      	add	r3, r2
 8008b0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b1c:	d0e7      	beq.n	8008aee <USB_EPStopXfer+0x82>
 8008b1e:	e048      	b.n	8008bb2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	781b      	ldrb	r3, [r3, #0]
 8008b24:	015a      	lsls	r2, r3, #5
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	4413      	add	r3, r2
 8008b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b34:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b38:	d13b      	bne.n	8008bb2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	781b      	ldrb	r3, [r3, #0]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	683a      	ldr	r2, [r7, #0]
 8008b4c:	7812      	ldrb	r2, [r2, #0]
 8008b4e:	0151      	lsls	r1, r2, #5
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	440a      	add	r2, r1
 8008b54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b5c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	7812      	ldrb	r2, [r2, #0]
 8008b72:	0151      	lsls	r1, r2, #5
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	440a      	add	r2, r1
 8008b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b80:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	3301      	adds	r3, #1
 8008b86:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f242 7210 	movw	r2, #10000	; 0x2710
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d902      	bls.n	8008b98 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	75fb      	strb	r3, [r7, #23]
          break;
 8008b96:	e00c      	b.n	8008bb2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	015a      	lsls	r2, r3, #5
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008bb0:	d0e7      	beq.n	8008b82 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	371c      	adds	r7, #28
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b089      	sub	sp, #36	; 0x24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	4611      	mov	r1, r2
 8008bcc:	461a      	mov	r2, r3
 8008bce:	460b      	mov	r3, r1
 8008bd0:	71fb      	strb	r3, [r7, #7]
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8008bde:	88bb      	ldrh	r3, [r7, #4]
 8008be0:	3303      	adds	r3, #3
 8008be2:	089b      	lsrs	r3, r3, #2
 8008be4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 8008be6:	2300      	movs	r3, #0
 8008be8:	61bb      	str	r3, [r7, #24]
 8008bea:	e018      	b.n	8008c1e <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008bec:	79fb      	ldrb	r3, [r7, #7]
 8008bee:	031a      	lsls	r2, r3, #12
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	69fb      	ldr	r3, [r7, #28]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	6013      	str	r3, [r2, #0]
    pSrc++;
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	3301      	adds	r3, #1
 8008c04:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	3301      	adds	r3, #1
 8008c16:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	61bb      	str	r3, [r7, #24]
 8008c1e:	69ba      	ldr	r2, [r7, #24]
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d3e2      	bcc.n	8008bec <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8008c26:	2300      	movs	r3, #0
}
 8008c28:	4618      	mov	r0, r3
 8008c2a:	3724      	adds	r7, #36	; 0x24
 8008c2c:	46bd      	mov	sp, r7
 8008c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c32:	4770      	bx	lr

08008c34 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008c34:	b480      	push	{r7}
 8008c36:	b08b      	sub	sp, #44	; 0x2c
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	60f8      	str	r0, [r7, #12]
 8008c3c:	60b9      	str	r1, [r7, #8]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008c4a:	88fb      	ldrh	r3, [r7, #6]
 8008c4c:	089b      	lsrs	r3, r3, #2
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008c52:	88fb      	ldrh	r3, [r7, #6]
 8008c54:	f003 0303 	and.w	r3, r3, #3
 8008c58:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	623b      	str	r3, [r7, #32]
 8008c5e:	e014      	b.n	8008c8a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c6e:	3301      	adds	r3, #1
 8008c70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c74:	3301      	adds	r3, #1
 8008c76:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	3301      	adds	r3, #1
 8008c82:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008c84:	6a3b      	ldr	r3, [r7, #32]
 8008c86:	3301      	adds	r3, #1
 8008c88:	623b      	str	r3, [r7, #32]
 8008c8a:	6a3a      	ldr	r2, [r7, #32]
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d3e6      	bcc.n	8008c60 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008c92:	8bfb      	ldrh	r3, [r7, #30]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d01e      	beq.n	8008cd6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008c9c:	69bb      	ldr	r3, [r7, #24]
 8008c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ca2:	461a      	mov	r2, r3
 8008ca4:	f107 0310 	add.w	r3, r7, #16
 8008ca8:	6812      	ldr	r2, [r2, #0]
 8008caa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	6a3b      	ldr	r3, [r7, #32]
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	00db      	lsls	r3, r3, #3
 8008cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cbc:	701a      	strb	r2, [r3, #0]
      i++;
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	3301      	adds	r3, #1
 8008cc2:	623b      	str	r3, [r7, #32]
      pDest++;
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008cca:	8bfb      	ldrh	r3, [r7, #30]
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008cd0:	8bfb      	ldrh	r3, [r7, #30]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1ea      	bne.n	8008cac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	372c      	adds	r7, #44	; 0x2c
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b085      	sub	sp, #20
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	785b      	ldrb	r3, [r3, #1]
 8008cfc:	2b01      	cmp	r3, #1
 8008cfe:	d12c      	bne.n	8008d5a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	015a      	lsls	r2, r3, #5
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	4413      	add	r3, r2
 8008d08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	db12      	blt.n	8008d38 <USB_EPSetStall+0x54>
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d00f      	beq.n	8008d38 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	0151      	lsls	r1, r2, #5
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	440a      	add	r2, r1
 8008d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d32:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d36:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	015a      	lsls	r2, r3, #5
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	68ba      	ldr	r2, [r7, #8]
 8008d48:	0151      	lsls	r1, r2, #5
 8008d4a:	68fa      	ldr	r2, [r7, #12]
 8008d4c:	440a      	add	r2, r1
 8008d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	e02b      	b.n	8008db2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	db12      	blt.n	8008d92 <USB_EPSetStall+0xae>
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00f      	beq.n	8008d92 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	015a      	lsls	r2, r3, #5
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	4413      	add	r3, r2
 8008d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68ba      	ldr	r2, [r7, #8]
 8008d82:	0151      	lsls	r1, r2, #5
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	440a      	add	r2, r1
 8008d88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d8c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008d90:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	015a      	lsls	r2, r3, #5
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	0151      	lsls	r1, r2, #5
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	440a      	add	r2, r1
 8008da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008db0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3714      	adds	r7, #20
 8008db8:	46bd      	mov	sp, r7
 8008dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b085      	sub	sp, #20
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	785b      	ldrb	r3, [r3, #1]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d128      	bne.n	8008e2e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	0151      	lsls	r1, r2, #5
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	440a      	add	r2, r1
 8008df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008df6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008dfa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	791b      	ldrb	r3, [r3, #4]
 8008e00:	2b03      	cmp	r3, #3
 8008e02:	d003      	beq.n	8008e0c <USB_EPClearStall+0x4c>
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	791b      	ldrb	r3, [r3, #4]
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	d138      	bne.n	8008e7e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	015a      	lsls	r2, r3, #5
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	4413      	add	r3, r2
 8008e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	0151      	lsls	r1, r2, #5
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	440a      	add	r2, r1
 8008e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	e027      	b.n	8008e7e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	68ba      	ldr	r2, [r7, #8]
 8008e3e:	0151      	lsls	r1, r2, #5
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	440a      	add	r2, r1
 8008e44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	791b      	ldrb	r3, [r3, #4]
 8008e52:	2b03      	cmp	r3, #3
 8008e54:	d003      	beq.n	8008e5e <USB_EPClearStall+0x9e>
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	791b      	ldrb	r3, [r3, #4]
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d10f      	bne.n	8008e7e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	015a      	lsls	r2, r3, #5
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	4413      	add	r3, r2
 8008e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	0151      	lsls	r1, r2, #5
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	440a      	add	r2, r1
 8008e74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e7c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3714      	adds	r7, #20
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	460b      	mov	r3, r1
 8008e96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eaa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008eae:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	78fb      	ldrb	r3, [r7, #3]
 8008eba:	011b      	lsls	r3, r3, #4
 8008ebc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008ec0:	68f9      	ldr	r1, [r7, #12]
 8008ec2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3714      	adds	r7, #20
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008ef2:	f023 0303 	bic.w	r3, r3, #3
 8008ef6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	68fa      	ldr	r2, [r7, #12]
 8008f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f06:	f023 0302 	bic.w	r3, r3, #2
 8008f0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3714      	adds	r7, #20
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b085      	sub	sp, #20
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	68fa      	ldr	r2, [r7, #12]
 8008f30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008f34:	f023 0303 	bic.w	r3, r3, #3
 8008f38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f48:	f043 0302 	orr.w	r3, r3, #2
 8008f4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3714      	adds	r7, #20
 8008f54:	46bd      	mov	sp, r7
 8008f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f5a:	4770      	bx	lr

08008f5c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008f5c:	b480      	push	{r7}
 8008f5e:	b085      	sub	sp, #20
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	4013      	ands	r3, r2
 8008f72:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008f74:	68fb      	ldr	r3, [r7, #12]
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3714      	adds	r7, #20
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr

08008f82 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008f82:	b480      	push	{r7}
 8008f84:	b085      	sub	sp, #20
 8008f86:	af00      	add	r7, sp, #0
 8008f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f94:	699b      	ldr	r3, [r3, #24]
 8008f96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f9e:	69db      	ldr	r3, [r3, #28]
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	0c1b      	lsrs	r3, r3, #16
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3714      	adds	r7, #20
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb4:	4770      	bx	lr

08008fb6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b085      	sub	sp, #20
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fc8:	699b      	ldr	r3, [r3, #24]
 8008fca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd2:	69db      	ldr	r3, [r3, #28]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	b29b      	uxth	r3, r3
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr

08008fea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008fea:	b480      	push	{r7}
 8008fec:	b085      	sub	sp, #20
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008ffa:	78fb      	ldrb	r3, [r7, #3]
 8008ffc:	015a      	lsls	r2, r3, #5
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	4413      	add	r3, r2
 8009002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009010:	695b      	ldr	r3, [r3, #20]
 8009012:	68ba      	ldr	r2, [r7, #8]
 8009014:	4013      	ands	r3, r2
 8009016:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009018:	68bb      	ldr	r3, [r7, #8]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3714      	adds	r7, #20
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009026:	b480      	push	{r7}
 8009028:	b087      	sub	sp, #28
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
 800902e:	460b      	mov	r3, r1
 8009030:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009048:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800904a:	78fb      	ldrb	r3, [r7, #3]
 800904c:	f003 030f 	and.w	r3, r3, #15
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	fa22 f303 	lsr.w	r3, r2, r3
 8009056:	01db      	lsls	r3, r3, #7
 8009058:	b2db      	uxtb	r3, r3
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	4313      	orrs	r3, r2
 800905e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009060:	78fb      	ldrb	r3, [r7, #3]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	4413      	add	r3, r2
 8009068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800906c:	689b      	ldr	r3, [r3, #8]
 800906e:	693a      	ldr	r2, [r7, #16]
 8009070:	4013      	ands	r3, r2
 8009072:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009074:	68bb      	ldr	r3, [r7, #8]
}
 8009076:	4618      	mov	r0, r3
 8009078:	371c      	adds	r7, #28
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009082:	b480      	push	{r7}
 8009084:	b083      	sub	sp, #12
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	f003 0301 	and.w	r3, r3, #1
}
 8009092:	4618      	mov	r0, r3
 8009094:	370c      	adds	r7, #12
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800909e:	b480      	push	{r7}
 80090a0:	b085      	sub	sp, #20
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090b8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80090bc:	f023 0307 	bic.w	r3, r3, #7
 80090c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	68fa      	ldr	r2, [r7, #12]
 80090cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	333c      	adds	r3, #60	; 0x3c
 80090f6:	3304      	adds	r3, #4
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	4a1c      	ldr	r2, [pc, #112]	; (8009170 <USB_EP0_OutStart+0x8c>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d90a      	bls.n	800911a <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009110:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009114:	d101      	bne.n	800911a <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8009116:	2300      	movs	r3, #0
 8009118:	e024      	b.n	8009164 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009120:	461a      	mov	r2, r3
 8009122:	2300      	movs	r3, #0
 8009124:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800912c:	691b      	ldr	r3, [r3, #16]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009134:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009138:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009140:	691b      	ldr	r3, [r3, #16]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009148:	f043 0318 	orr.w	r3, r3, #24
 800914c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009154:	691b      	ldr	r3, [r3, #16]
 8009156:	68fa      	ldr	r2, [r7, #12]
 8009158:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800915c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009160:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	4f54300a 	.word	0x4f54300a

08009174 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800917c:	2300      	movs	r3, #0
 800917e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	3301      	adds	r3, #1
 8009184:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	4a13      	ldr	r2, [pc, #76]	; (80091d8 <USB_CoreReset+0x64>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d901      	bls.n	8009192 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800918e:	2303      	movs	r3, #3
 8009190:	e01b      	b.n	80091ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	691b      	ldr	r3, [r3, #16]
 8009196:	2b00      	cmp	r3, #0
 8009198:	daf2      	bge.n	8009180 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800919a:	2300      	movs	r3, #0
 800919c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	f043 0201 	orr.w	r2, r3, #1
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	3301      	adds	r3, #1
 80091ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	4a09      	ldr	r2, [pc, #36]	; (80091d8 <USB_CoreReset+0x64>)
 80091b4:	4293      	cmp	r3, r2
 80091b6:	d901      	bls.n	80091bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80091b8:	2303      	movs	r3, #3
 80091ba:	e006      	b.n	80091ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	691b      	ldr	r3, [r3, #16]
 80091c0:	f003 0301 	and.w	r3, r3, #1
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d0f0      	beq.n	80091aa <USB_CoreReset+0x36>

  return HAL_OK;
 80091c8:	2300      	movs	r3, #0
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3714      	adds	r7, #20
 80091ce:	46bd      	mov	sp, r7
 80091d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d4:	4770      	bx	lr
 80091d6:	bf00      	nop
 80091d8:	00030d40 	.word	0x00030d40

080091dc <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	460b      	mov	r3, r1
 80091e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80091e8:	201c      	movs	r0, #28
 80091ea:	f002 fc67 	bl	800babc <USBD_static_malloc>
 80091ee:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d109      	bne.n	800920a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	32b0      	adds	r2, #176	; 0xb0
 8009200:	2100      	movs	r1, #0
 8009202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009206:	2302      	movs	r3, #2
 8009208:	e08a      	b.n	8009320 <USBD_CUSTOM_HID_Init+0x144>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	32b0      	adds	r2, #176	; 0xb0
 8009214:	68f9      	ldr	r1, [r7, #12]
 8009216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	32b0      	adds	r2, #176	; 0xb0
 8009224:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	7c1b      	ldrb	r3, [r3, #16]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d11b      	bne.n	800926e <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009236:	4b3c      	ldr	r3, [pc, #240]	; (8009328 <USBD_CUSTOM_HID_Init+0x14c>)
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	f003 020f 	and.w	r2, r3, #15
 800923e:	6879      	ldr	r1, [r7, #4]
 8009240:	4613      	mov	r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	4413      	add	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	440b      	add	r3, r1
 800924a:	3326      	adds	r3, #38	; 0x26
 800924c:	2205      	movs	r2, #5
 800924e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009250:	4b36      	ldr	r3, [pc, #216]	; (800932c <USBD_CUSTOM_HID_Init+0x150>)
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	f003 020f 	and.w	r2, r3, #15
 8009258:	6879      	ldr	r1, [r7, #4]
 800925a:	4613      	mov	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	4413      	add	r3, r2
 8009260:	009b      	lsls	r3, r3, #2
 8009262:	440b      	add	r3, r1
 8009264:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8009268:	2205      	movs	r2, #5
 800926a:	801a      	strh	r2, [r3, #0]
 800926c:	e01a      	b.n	80092a4 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800926e:	4b2e      	ldr	r3, [pc, #184]	; (8009328 <USBD_CUSTOM_HID_Init+0x14c>)
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	f003 020f 	and.w	r2, r3, #15
 8009276:	6879      	ldr	r1, [r7, #4]
 8009278:	4613      	mov	r3, r2
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	4413      	add	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	440b      	add	r3, r1
 8009282:	3326      	adds	r3, #38	; 0x26
 8009284:	2205      	movs	r2, #5
 8009286:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009288:	4b28      	ldr	r3, [pc, #160]	; (800932c <USBD_CUSTOM_HID_Init+0x150>)
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	f003 020f 	and.w	r2, r3, #15
 8009290:	6879      	ldr	r1, [r7, #4]
 8009292:	4613      	mov	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	440b      	add	r3, r1
 800929c:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80092a0:	2205      	movs	r2, #5
 80092a2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80092a4:	4b20      	ldr	r3, [pc, #128]	; (8009328 <USBD_CUSTOM_HID_Init+0x14c>)
 80092a6:	7819      	ldrb	r1, [r3, #0]
 80092a8:	2302      	movs	r3, #2
 80092aa:	2203      	movs	r2, #3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f002 fa05 	bl	800b6bc <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80092b2:	4b1d      	ldr	r3, [pc, #116]	; (8009328 <USBD_CUSTOM_HID_Init+0x14c>)
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	f003 020f 	and.w	r2, r3, #15
 80092ba:	6879      	ldr	r1, [r7, #4]
 80092bc:	4613      	mov	r3, r2
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	4413      	add	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	440b      	add	r3, r1
 80092c6:	3324      	adds	r3, #36	; 0x24
 80092c8:	2201      	movs	r2, #1
 80092ca:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80092cc:	4b17      	ldr	r3, [pc, #92]	; (800932c <USBD_CUSTOM_HID_Init+0x150>)
 80092ce:	7819      	ldrb	r1, [r3, #0]
 80092d0:	2302      	movs	r3, #2
 80092d2:	2203      	movs	r2, #3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f002 f9f1 	bl	800b6bc <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80092da:	4b14      	ldr	r3, [pc, #80]	; (800932c <USBD_CUSTOM_HID_Init+0x150>)
 80092dc:	781b      	ldrb	r3, [r3, #0]
 80092de:	f003 020f 	and.w	r2, r3, #15
 80092e2:	6879      	ldr	r1, [r7, #4]
 80092e4:	4613      	mov	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	009b      	lsls	r3, r3, #2
 80092ec:	440b      	add	r3, r1
 80092ee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80092f2:	2201      	movs	r2, #1
 80092f4:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	761a      	strb	r2, [r3, #24]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009302:	687a      	ldr	r2, [r7, #4]
 8009304:	33b0      	adds	r3, #176	; 0xb0
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	685b      	ldr	r3, [r3, #4]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	4798      	blx	r3

#ifndef USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED
  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8009310:	4b06      	ldr	r3, [pc, #24]	; (800932c <USBD_CUSTOM_HID_Init+0x150>)
 8009312:	7819      	ldrb	r1, [r3, #0]
 8009314:	68fa      	ldr	r2, [r7, #12]
 8009316:	2307      	movs	r3, #7
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f002 fb49 	bl	800b9b0 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
#endif /* USBD_CUSTOMHID_OUT_PREPARE_RECEIVE_DISABLED */

  return (uint8_t)USBD_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	20000086 	.word	0x20000086
 800932c:	20000087 	.word	0x20000087

08009330 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
 8009338:	460b      	mov	r3, r1
 800933a:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 800933c:	4b37      	ldr	r3, [pc, #220]	; (800941c <USBD_CUSTOM_HID_DeInit+0xec>)
 800933e:	781b      	ldrb	r3, [r3, #0]
 8009340:	4619      	mov	r1, r3
 8009342:	6878      	ldr	r0, [r7, #4]
 8009344:	f002 f9f8 	bl	800b738 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8009348:	4b34      	ldr	r3, [pc, #208]	; (800941c <USBD_CUSTOM_HID_DeInit+0xec>)
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	f003 020f 	and.w	r2, r3, #15
 8009350:	6879      	ldr	r1, [r7, #4]
 8009352:	4613      	mov	r3, r2
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	440b      	add	r3, r1
 800935c:	3324      	adds	r3, #36	; 0x24
 800935e:	2200      	movs	r2, #0
 8009360:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8009362:	4b2e      	ldr	r3, [pc, #184]	; (800941c <USBD_CUSTOM_HID_DeInit+0xec>)
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	f003 020f 	and.w	r2, r3, #15
 800936a:	6879      	ldr	r1, [r7, #4]
 800936c:	4613      	mov	r3, r2
 800936e:	009b      	lsls	r3, r3, #2
 8009370:	4413      	add	r3, r2
 8009372:	009b      	lsls	r3, r3, #2
 8009374:	440b      	add	r3, r1
 8009376:	3326      	adds	r3, #38	; 0x26
 8009378:	2200      	movs	r2, #0
 800937a:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 800937c:	4b28      	ldr	r3, [pc, #160]	; (8009420 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f002 f9d8 	bl	800b738 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 8009388:	4b25      	ldr	r3, [pc, #148]	; (8009420 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	f003 020f 	and.w	r2, r3, #15
 8009390:	6879      	ldr	r1, [r7, #4]
 8009392:	4613      	mov	r3, r2
 8009394:	009b      	lsls	r3, r3, #2
 8009396:	4413      	add	r3, r2
 8009398:	009b      	lsls	r3, r3, #2
 800939a:	440b      	add	r3, r1
 800939c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80093a0:	2200      	movs	r2, #0
 80093a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80093a4:	4b1e      	ldr	r3, [pc, #120]	; (8009420 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	f003 020f 	and.w	r2, r3, #15
 80093ac:	6879      	ldr	r1, [r7, #4]
 80093ae:	4613      	mov	r3, r2
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	4413      	add	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	440b      	add	r3, r1
 80093b8:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 80093bc:	2200      	movs	r2, #0
 80093be:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	32b0      	adds	r2, #176	; 0xb0
 80093ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d01f      	beq.n	8009412 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	33b0      	adds	r3, #176	; 0xb0
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4413      	add	r3, r2
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	32b0      	adds	r2, #176	; 0xb0
 80093f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f4:	4618      	mov	r0, r3
 80093f6:	f002 fb6f 	bl	800bad8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	32b0      	adds	r2, #176	; 0xb0
 8009404:	2100      	movs	r1, #0
 8009406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2200      	movs	r2, #0
 800940e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009412:	2300      	movs	r3, #0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	20000086 	.word	0x20000086
 8009420:	20000087 	.word	0x20000087

08009424 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b088      	sub	sp, #32
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	32b0      	adds	r2, #176	; 0xb0
 8009438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800943c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800943e:	2300      	movs	r3, #0
 8009440:	83fb      	strh	r3, [r7, #30]
#ifdef USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED
  uint16_t ReportLength = 0U;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */
  uint8_t  *pbuf = NULL;
 8009442:	2300      	movs	r3, #0
 8009444:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8009446:	2300      	movs	r3, #0
 8009448:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800944a:	2300      	movs	r3, #0
 800944c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d101      	bne.n	8009458 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8009454:	2303      	movs	r3, #3
 8009456:	e0f8      	b.n	800964a <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009460:	2b00      	cmp	r3, #0
 8009462:	d056      	beq.n	8009512 <USBD_CUSTOM_HID_Setup+0xee>
 8009464:	2b20      	cmp	r3, #32
 8009466:	f040 80e8 	bne.w	800963a <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	785b      	ldrb	r3, [r3, #1]
 800946e:	3b02      	subs	r3, #2
 8009470:	2b09      	cmp	r3, #9
 8009472:	d846      	bhi.n	8009502 <USBD_CUSTOM_HID_Setup+0xde>
 8009474:	a201      	add	r2, pc, #4	; (adr r2, 800947c <USBD_CUSTOM_HID_Setup+0x58>)
 8009476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947a:	bf00      	nop
 800947c:	080094d5 	.word	0x080094d5
 8009480:	080094b3 	.word	0x080094b3
 8009484:	08009503 	.word	0x08009503
 8009488:	08009503 	.word	0x08009503
 800948c:	08009503 	.word	0x08009503
 8009490:	08009503 	.word	0x08009503
 8009494:	08009503 	.word	0x08009503
 8009498:	080094e5 	.word	0x080094e5
 800949c:	080094c3 	.word	0x080094c3
 80094a0:	080094a5 	.word	0x080094a5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	885b      	ldrh	r3, [r3, #2]
 80094a8:	b2db      	uxtb	r3, r3
 80094aa:	461a      	mov	r2, r3
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	609a      	str	r2, [r3, #8]
          break;
 80094b0:	e02e      	b.n	8009510 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80094b2:	693b      	ldr	r3, [r7, #16]
 80094b4:	3308      	adds	r3, #8
 80094b6:	2201      	movs	r2, #1
 80094b8:	4619      	mov	r1, r3
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f001 fcd0 	bl	800ae60 <USBD_CtlSendData>
          break;
 80094c0:	e026      	b.n	8009510 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	885b      	ldrh	r3, [r3, #2]
 80094c6:	0a1b      	lsrs	r3, r3, #8
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	b2db      	uxtb	r3, r3
 80094cc:	461a      	mov	r2, r3
 80094ce:	693b      	ldr	r3, [r7, #16]
 80094d0:	60da      	str	r2, [r3, #12]
          break;
 80094d2:	e01d      	b.n	8009510 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	330c      	adds	r3, #12
 80094d8:	2201      	movs	r2, #1
 80094da:	4619      	mov	r1, r3
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 fcbf 	bl	800ae60 <USBD_CtlSendData>
          break;
 80094e2:	e015      	b.n	8009510 <USBD_CUSTOM_HID_Setup+0xec>
            ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->CtrlReqComplete(req->bRequest,
                                                                                            req->wLength);
          }
#endif /* USBD_CUSTOMHID_CTRL_REQ_COMPLETE_CALLBACK_ENABLED */
#ifndef USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED
          hhid->IsReportAvailable = 1U;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	2201      	movs	r2, #1
 80094e8:	615a      	str	r2, [r3, #20]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80094ea:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	88db      	ldrh	r3, [r3, #6]
 80094f0:	2b07      	cmp	r3, #7
 80094f2:	bf28      	it	cs
 80094f4:	2307      	movcs	r3, #7
 80094f6:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80094f8:	461a      	mov	r2, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f001 fcdc 	bl	800aeb8 <USBD_CtlPrepareRx>
#endif /* USBD_CUSTOMHID_EP0_OUT_PREPARE_RECEIVE_DISABLED */
          break;
 8009500:	e006      	b.n	8009510 <USBD_CUSTOM_HID_Setup+0xec>
          }
          break;
#endif /* USBD_CUSTOMHID_CTRL_REQ_GET_REPORT_ENABLED */

        default:
          USBD_CtlError(pdev, req);
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f001 fc3a 	bl	800ad7e <USBD_CtlError>
          ret = USBD_FAIL;
 800950a:	2303      	movs	r3, #3
 800950c:	75fb      	strb	r3, [r7, #23]
          break;
 800950e:	bf00      	nop
      }
      break;
 8009510:	e09a      	b.n	8009648 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	785b      	ldrb	r3, [r3, #1]
 8009516:	2b0b      	cmp	r3, #11
 8009518:	f200 8086 	bhi.w	8009628 <USBD_CUSTOM_HID_Setup+0x204>
 800951c:	a201      	add	r2, pc, #4	; (adr r2, 8009524 <USBD_CUSTOM_HID_Setup+0x100>)
 800951e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009522:	bf00      	nop
 8009524:	08009555 	.word	0x08009555
 8009528:	08009637 	.word	0x08009637
 800952c:	08009629 	.word	0x08009629
 8009530:	08009629 	.word	0x08009629
 8009534:	08009629 	.word	0x08009629
 8009538:	08009629 	.word	0x08009629
 800953c:	0800957f 	.word	0x0800957f
 8009540:	08009629 	.word	0x08009629
 8009544:	08009629 	.word	0x08009629
 8009548:	08009629 	.word	0x08009629
 800954c:	080095d7 	.word	0x080095d7
 8009550:	08009601 	.word	0x08009601
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800955a:	b2db      	uxtb	r3, r3
 800955c:	2b03      	cmp	r3, #3
 800955e:	d107      	bne.n	8009570 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009560:	f107 030e 	add.w	r3, r7, #14
 8009564:	2202      	movs	r2, #2
 8009566:	4619      	mov	r1, r3
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f001 fc79 	bl	800ae60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800956e:	e063      	b.n	8009638 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8009570:	6839      	ldr	r1, [r7, #0]
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f001 fc03 	bl	800ad7e <USBD_CtlError>
            ret = USBD_FAIL;
 8009578:	2303      	movs	r3, #3
 800957a:	75fb      	strb	r3, [r7, #23]
          break;
 800957c:	e05c      	b.n	8009638 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	885b      	ldrh	r3, [r3, #2]
 8009582:	0a1b      	lsrs	r3, r3, #8
 8009584:	b29b      	uxth	r3, r3
 8009586:	2b22      	cmp	r3, #34	; 0x22
 8009588:	d110      	bne.n	80095ac <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	88db      	ldrh	r3, [r3, #6]
 800958e:	2b1d      	cmp	r3, #29
 8009590:	bf28      	it	cs
 8009592:	231d      	movcs	r3, #29
 8009594:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	33b0      	adds	r3, #176	; 0xb0
 80095a0:	009b      	lsls	r3, r3, #2
 80095a2:	4413      	add	r3, r2
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	61bb      	str	r3, [r7, #24]
 80095aa:	e00d      	b.n	80095c8 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	885b      	ldrh	r3, [r3, #2]
 80095b0:	0a1b      	lsrs	r3, r3, #8
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	2b21      	cmp	r3, #33	; 0x21
 80095b6:	d107      	bne.n	80095c8 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80095b8:	4b26      	ldr	r3, [pc, #152]	; (8009654 <USBD_CUSTOM_HID_Setup+0x230>)
 80095ba:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	88db      	ldrh	r3, [r3, #6]
 80095c0:	2b09      	cmp	r3, #9
 80095c2:	bf28      	it	cs
 80095c4:	2309      	movcs	r3, #9
 80095c6:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80095c8:	8bfb      	ldrh	r3, [r7, #30]
 80095ca:	461a      	mov	r2, r3
 80095cc:	69b9      	ldr	r1, [r7, #24]
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f001 fc46 	bl	800ae60 <USBD_CtlSendData>
          break;
 80095d4:	e030      	b.n	8009638 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	2b03      	cmp	r3, #3
 80095e0:	d107      	bne.n	80095f2 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	3310      	adds	r3, #16
 80095e6:	2201      	movs	r2, #1
 80095e8:	4619      	mov	r1, r3
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f001 fc38 	bl	800ae60 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80095f0:	e022      	b.n	8009638 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f001 fbc2 	bl	800ad7e <USBD_CtlError>
            ret = USBD_FAIL;
 80095fa:	2303      	movs	r3, #3
 80095fc:	75fb      	strb	r3, [r7, #23]
          break;
 80095fe:	e01b      	b.n	8009638 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009606:	b2db      	uxtb	r3, r3
 8009608:	2b03      	cmp	r3, #3
 800960a:	d106      	bne.n	800961a <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	885b      	ldrh	r3, [r3, #2]
 8009610:	b2db      	uxtb	r3, r3
 8009612:	461a      	mov	r2, r3
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	611a      	str	r2, [r3, #16]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009618:	e00e      	b.n	8009638 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800961a:	6839      	ldr	r1, [r7, #0]
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f001 fbae 	bl	800ad7e <USBD_CtlError>
            ret = USBD_FAIL;
 8009622:	2303      	movs	r3, #3
 8009624:	75fb      	strb	r3, [r7, #23]
          break;
 8009626:	e007      	b.n	8009638 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009628:	6839      	ldr	r1, [r7, #0]
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f001 fba7 	bl	800ad7e <USBD_CtlError>
          ret = USBD_FAIL;
 8009630:	2303      	movs	r3, #3
 8009632:	75fb      	strb	r3, [r7, #23]
          break;
 8009634:	e000      	b.n	8009638 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8009636:	bf00      	nop
      }
      break;
 8009638:	e006      	b.n	8009648 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800963a:	6839      	ldr	r1, [r7, #0]
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 fb9e 	bl	800ad7e <USBD_CtlError>
      ret = USBD_FAIL;
 8009642:	2303      	movs	r3, #3
 8009644:	75fb      	strb	r3, [r7, #23]
      break;
 8009646:	bf00      	nop
  }
  return (uint8_t)ret;
 8009648:	7dfb      	ldrb	r3, [r7, #23]
}
 800964a:	4618      	mov	r0, r3
 800964c:	3720      	adds	r7, #32
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}
 8009652:	bf00      	nop
 8009654:	20000070 	.word	0x20000070

08009658 <USBD_CUSTOM_HID_SendReport>:
{
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b086      	sub	sp, #24
 800965c:	af00      	add	r7, sp, #0
 800965e:	60f8      	str	r0, [r7, #12]
 8009660:	60b9      	str	r1, [r7, #8]
 8009662:	4613      	mov	r3, r2
 8009664:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	32b0      	adds	r2, #176	; 0xb0
 8009670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009674:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d101      	bne.n	8009680 <USBD_CUSTOM_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800967c:	2303      	movs	r3, #3
 800967e:	e017      	b.n	80096b0 <USBD_CUSTOM_HID_SendReport+0x58>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009686:	b2db      	uxtb	r3, r3
 8009688:	2b03      	cmp	r3, #3
 800968a:	d110      	bne.n	80096ae <USBD_CUSTOM_HID_SendReport+0x56>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	7e1b      	ldrb	r3, [r3, #24]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10a      	bne.n	80096aa <USBD_CUSTOM_HID_SendReport+0x52>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	2201      	movs	r2, #1
 8009698:	761a      	strb	r2, [r3, #24]
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 800969a:	4b07      	ldr	r3, [pc, #28]	; (80096b8 <USBD_CUSTOM_HID_SendReport+0x60>)
 800969c:	7819      	ldrb	r1, [r3, #0]
 800969e:	88fb      	ldrh	r3, [r7, #6]
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	68f8      	ldr	r0, [r7, #12]
 80096a4:	f002 f94c 	bl	800b940 <USBD_LL_Transmit>
 80096a8:	e001      	b.n	80096ae <USBD_CUSTOM_HID_SendReport+0x56>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e000      	b.n	80096b0 <USBD_CUSTOM_HID_SendReport+0x58>
    }
  }
  return (uint8_t)USBD_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3718      	adds	r7, #24
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}
 80096b8:	20000086 	.word	0x20000086

080096bc <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80096c4:	2181      	movs	r1, #129	; 0x81
 80096c6:	4815      	ldr	r0, [pc, #84]	; (800971c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80096c8:	f000 fcf7 	bl	800a0ba <USBD_GetEpDesc>
 80096cc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80096ce:	2101      	movs	r1, #1
 80096d0:	4812      	ldr	r0, [pc, #72]	; (800971c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80096d2:	f000 fcf2 	bl	800a0ba <USBD_GetEpDesc>
 80096d6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d009      	beq.n	80096f2 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	f042 0202 	orr.w	r2, r2, #2
 80096e6:	711a      	strb	r2, [r3, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2205      	movs	r2, #5
 80096f0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80096f2:	68bb      	ldr	r3, [r7, #8]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d009      	beq.n	800970c <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	2200      	movs	r2, #0
 80096fc:	f042 0202 	orr.w	r2, r2, #2
 8009700:	711a      	strb	r2, [r3, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	2205      	movs	r2, #5
 800970a:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2229      	movs	r2, #41	; 0x29
 8009710:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8009712:	4b02      	ldr	r3, [pc, #8]	; (800971c <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8009714:	4618      	mov	r0, r3
 8009716:	3710      	adds	r7, #16
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}
 800971c:	20000044 	.word	0x20000044

08009720 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8009728:	2181      	movs	r1, #129	; 0x81
 800972a:	4815      	ldr	r0, [pc, #84]	; (8009780 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800972c:	f000 fcc5 	bl	800a0ba <USBD_GetEpDesc>
 8009730:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8009732:	2101      	movs	r1, #1
 8009734:	4812      	ldr	r0, [pc, #72]	; (8009780 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8009736:	f000 fcc0 	bl	800a0ba <USBD_GetEpDesc>
 800973a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d009      	beq.n	8009756 <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	2200      	movs	r2, #0
 8009746:	f042 0202 	orr.w	r2, r2, #2
 800974a:	711a      	strb	r2, [r3, #4]
 800974c:	2200      	movs	r2, #0
 800974e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2205      	movs	r2, #5
 8009754:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d009      	beq.n	8009770 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	2200      	movs	r2, #0
 8009760:	f042 0202 	orr.w	r2, r2, #2
 8009764:	711a      	strb	r2, [r3, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	2205      	movs	r2, #5
 800976e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2229      	movs	r2, #41	; 0x29
 8009774:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8009776:	4b02      	ldr	r3, [pc, #8]	; (8009780 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8009778:	4618      	mov	r0, r3
 800977a:	3710      	adds	r7, #16
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	20000044 	.word	0x20000044

08009784 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800978c:	2181      	movs	r1, #129	; 0x81
 800978e:	4815      	ldr	r0, [pc, #84]	; (80097e4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8009790:	f000 fc93 	bl	800a0ba <USBD_GetEpDesc>
 8009794:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8009796:	2101      	movs	r1, #1
 8009798:	4812      	ldr	r0, [pc, #72]	; (80097e4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 800979a:	f000 fc8e 	bl	800a0ba <USBD_GetEpDesc>
 800979e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d009      	beq.n	80097ba <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2200      	movs	r2, #0
 80097aa:	f042 0202 	orr.w	r2, r2, #2
 80097ae:	711a      	strb	r2, [r3, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	2205      	movs	r2, #5
 80097b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d009      	beq.n	80097d4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2200      	movs	r2, #0
 80097c4:	f042 0202 	orr.w	r2, r2, #2
 80097c8:	711a      	strb	r2, [r3, #4]
 80097ca:	2200      	movs	r2, #0
 80097cc:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2205      	movs	r2, #5
 80097d2:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2229      	movs	r2, #41	; 0x29
 80097d8:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80097da:	4b02      	ldr	r3, [pc, #8]	; (80097e4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	20000044 	.word	0x20000044

080097e8 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	32b0      	adds	r2, #176	; 0xb0
 80097fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009802:	2200      	movs	r2, #0
 8009804:	761a      	strb	r2, [r3, #24]

  return (uint8_t)USBD_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	460b      	mov	r3, r1
 800981e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	32b0      	adds	r2, #176	; 0xb0
 800982a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800982e:	2b00      	cmp	r3, #0
 8009830:	d101      	bne.n	8009836 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009832:	2303      	movs	r3, #3
 8009834:	e017      	b.n	8009866 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	32b0      	adds	r2, #176	; 0xb0
 8009840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009844:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	33b0      	adds	r3, #176	; 0xb0
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	4413      	add	r3, r2
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	68fa      	ldr	r2, [r7, #12]
 800985a:	7810      	ldrb	r0, [r2, #0]
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	7852      	ldrb	r2, [r2, #1]
 8009860:	4611      	mov	r1, r2
 8009862:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b084      	sub	sp, #16
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	32b0      	adds	r2, #176	; 0xb0
 8009880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009884:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	2b00      	cmp	r3, #0
 800988a:	d101      	bne.n	8009890 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800988c:	2303      	movs	r3, #3
 800988e:	e016      	b.n	80098be <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d111      	bne.n	80098bc <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800989e:	687a      	ldr	r2, [r7, #4]
 80098a0:	33b0      	adds	r3, #176	; 0xb0
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	7810      	ldrb	r0, [r2, #0]
 80098ae:	68fa      	ldr	r2, [r7, #12]
 80098b0:	7852      	ldrb	r2, [r2, #1]
 80098b2:	4611      	mov	r1, r2
 80098b4:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	615a      	str	r2, [r3, #20]
  }

  return (uint8_t)USBD_OK;
 80098bc:	2300      	movs	r3, #0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
	...

080098c8 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b083      	sub	sp, #12
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	220a      	movs	r2, #10
 80098d4:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80098d6:	4b03      	ldr	r3, [pc, #12]	; (80098e4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80098d8:	4618      	mov	r0, r3
 80098da:	370c      	adds	r7, #12
 80098dc:	46bd      	mov	sp, r7
 80098de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e2:	4770      	bx	lr
 80098e4:	2000007c 	.word	0x2000007c

080098e8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d101      	bne.n	80098fc <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e009      	b.n	8009910 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	33b0      	adds	r3, #176	; 0xb0
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	683a      	ldr	r2, [r7, #0]
 800990c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af00      	add	r7, sp, #0
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	4613      	mov	r3, r2
 8009928:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d101      	bne.n	8009934 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009930:	2303      	movs	r3, #3
 8009932:	e01f      	b.n	8009974 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2200      	movs	r2, #0
 8009938:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d003      	beq.n	800995a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	79fa      	ldrb	r2, [r7, #7]
 8009966:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009968:	68f8      	ldr	r0, [r7, #12]
 800996a:	f001 fe29 	bl	800b5c0 <USBD_LL_Init>
 800996e:	4603      	mov	r3, r0
 8009970:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009972:	7dfb      	ldrb	r3, [r7, #23]
}
 8009974:	4618      	mov	r0, r3
 8009976:	3718      	adds	r7, #24
 8009978:	46bd      	mov	sp, r7
 800997a:	bd80      	pop	{r7, pc}

0800997c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009986:	2300      	movs	r3, #0
 8009988:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d101      	bne.n	8009994 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009990:	2303      	movs	r3, #3
 8009992:	e025      	b.n	80099e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	32ae      	adds	r2, #174	; 0xae
 80099a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00f      	beq.n	80099d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	32ae      	adds	r2, #174	; 0xae
 80099ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c0:	f107 020e 	add.w	r2, r7, #14
 80099c4:	4610      	mov	r0, r2
 80099c6:	4798      	blx	r3
 80099c8:	4602      	mov	r2, r0
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80099d6:	1c5a      	adds	r2, r3, #1
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b082      	sub	sp, #8
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f001 fe31 	bl	800b658 <USBD_LL_Start>
 80099f6:	4603      	mov	r3, r0
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a08:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	370c      	adds	r7, #12
 8009a0e:	46bd      	mov	sp, r7
 8009a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a14:	4770      	bx	lr

08009a16 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b084      	sub	sp, #16
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	6078      	str	r0, [r7, #4]
 8009a1e:	460b      	mov	r3, r1
 8009a20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d009      	beq.n	8009a44 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	78fa      	ldrb	r2, [r7, #3]
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	4798      	blx	r3
 8009a40:	4603      	mov	r3, r0
 8009a42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a46:	4618      	mov	r0, r3
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b084      	sub	sp, #16
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
 8009a56:	460b      	mov	r3, r1
 8009a58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	78fa      	ldrb	r2, [r7, #3]
 8009a68:	4611      	mov	r1, r2
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	4798      	blx	r3
 8009a6e:	4603      	mov	r3, r0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d001      	beq.n	8009a78 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009a74:	2303      	movs	r3, #3
 8009a76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3710      	adds	r7, #16
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009a82:	b580      	push	{r7, lr}
 8009a84:	b084      	sub	sp, #16
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
 8009a8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009a92:	6839      	ldr	r1, [r7, #0]
 8009a94:	4618      	mov	r0, r3
 8009a96:	f001 f938 	bl	800ad0a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2201      	movs	r2, #1
 8009a9e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009ab6:	f003 031f 	and.w	r3, r3, #31
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d01a      	beq.n	8009af4 <USBD_LL_SetupStage+0x72>
 8009abe:	2b02      	cmp	r3, #2
 8009ac0:	d822      	bhi.n	8009b08 <USBD_LL_SetupStage+0x86>
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d002      	beq.n	8009acc <USBD_LL_SetupStage+0x4a>
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d00a      	beq.n	8009ae0 <USBD_LL_SetupStage+0x5e>
 8009aca:	e01d      	b.n	8009b08 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fb65 	bl	800a1a4 <USBD_StdDevReq>
 8009ada:	4603      	mov	r3, r0
 8009adc:	73fb      	strb	r3, [r7, #15]
      break;
 8009ade:	e020      	b.n	8009b22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f000 fbcd 	bl	800a288 <USBD_StdItfReq>
 8009aee:	4603      	mov	r3, r0
 8009af0:	73fb      	strb	r3, [r7, #15]
      break;
 8009af2:	e016      	b.n	8009b22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 fc2f 	bl	800a360 <USBD_StdEPReq>
 8009b02:	4603      	mov	r3, r0
 8009b04:	73fb      	strb	r3, [r7, #15]
      break;
 8009b06:	e00c      	b.n	8009b22 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009b12:	b2db      	uxtb	r3, r3
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f001 fe44 	bl	800b7a4 <USBD_LL_StallEP>
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b20:	bf00      	nop
  }

  return ret;
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b086      	sub	sp, #24
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	460b      	mov	r3, r1
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009b3e:	7afb      	ldrb	r3, [r7, #11]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d16e      	bne.n	8009c22 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009b4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009b52:	2b03      	cmp	r3, #3
 8009b54:	f040 8098 	bne.w	8009c88 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	689a      	ldr	r2, [r3, #8]
 8009b5c:	693b      	ldr	r3, [r7, #16]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d913      	bls.n	8009b8c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009b64:	693b      	ldr	r3, [r7, #16]
 8009b66:	689a      	ldr	r2, [r3, #8]
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	68db      	ldr	r3, [r3, #12]
 8009b6c:	1ad2      	subs	r2, r2, r3
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	68da      	ldr	r2, [r3, #12]
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	689b      	ldr	r3, [r3, #8]
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	bf28      	it	cs
 8009b7e:	4613      	movcs	r3, r2
 8009b80:	461a      	mov	r2, r3
 8009b82:	6879      	ldr	r1, [r7, #4]
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f001 f9b4 	bl	800aef2 <USBD_CtlContinueRx>
 8009b8a:	e07d      	b.n	8009c88 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009b92:	f003 031f 	and.w	r3, r3, #31
 8009b96:	2b02      	cmp	r3, #2
 8009b98:	d014      	beq.n	8009bc4 <USBD_LL_DataOutStage+0x98>
 8009b9a:	2b02      	cmp	r3, #2
 8009b9c:	d81d      	bhi.n	8009bda <USBD_LL_DataOutStage+0xae>
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d002      	beq.n	8009ba8 <USBD_LL_DataOutStage+0x7c>
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	d003      	beq.n	8009bae <USBD_LL_DataOutStage+0x82>
 8009ba6:	e018      	b.n	8009bda <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	75bb      	strb	r3, [r7, #22]
            break;
 8009bac:	e018      	b.n	8009be0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009bb4:	b2db      	uxtb	r3, r3
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f000 fa64 	bl	800a086 <USBD_CoreFindIF>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	75bb      	strb	r3, [r7, #22]
            break;
 8009bc2:	e00d      	b.n	8009be0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	4619      	mov	r1, r3
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f000 fa66 	bl	800a0a0 <USBD_CoreFindEP>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	75bb      	strb	r3, [r7, #22]
            break;
 8009bd8:	e002      	b.n	8009be0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009bda:	2300      	movs	r3, #0
 8009bdc:	75bb      	strb	r3, [r7, #22]
            break;
 8009bde:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009be0:	7dbb      	ldrb	r3, [r7, #22]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d119      	bne.n	8009c1a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2b03      	cmp	r3, #3
 8009bf0:	d113      	bne.n	8009c1a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009bf2:	7dba      	ldrb	r2, [r7, #22]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	32ae      	adds	r2, #174	; 0xae
 8009bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bfc:	691b      	ldr	r3, [r3, #16]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d00b      	beq.n	8009c1a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009c02:	7dba      	ldrb	r2, [r7, #22]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009c0a:	7dba      	ldrb	r2, [r7, #22]
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	32ae      	adds	r2, #174	; 0xae
 8009c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c14:	691b      	ldr	r3, [r3, #16]
 8009c16:	68f8      	ldr	r0, [r7, #12]
 8009c18:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f001 f97a 	bl	800af14 <USBD_CtlSendStatus>
 8009c20:	e032      	b.n	8009c88 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009c22:	7afb      	ldrb	r3, [r7, #11]
 8009c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c28:	b2db      	uxtb	r3, r3
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f000 fa37 	bl	800a0a0 <USBD_CoreFindEP>
 8009c32:	4603      	mov	r3, r0
 8009c34:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c36:	7dbb      	ldrb	r3, [r7, #22]
 8009c38:	2bff      	cmp	r3, #255	; 0xff
 8009c3a:	d025      	beq.n	8009c88 <USBD_LL_DataOutStage+0x15c>
 8009c3c:	7dbb      	ldrb	r3, [r7, #22]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d122      	bne.n	8009c88 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c48:	b2db      	uxtb	r3, r3
 8009c4a:	2b03      	cmp	r3, #3
 8009c4c:	d117      	bne.n	8009c7e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009c4e:	7dba      	ldrb	r2, [r7, #22]
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	32ae      	adds	r2, #174	; 0xae
 8009c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d00f      	beq.n	8009c7e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009c5e:	7dba      	ldrb	r2, [r7, #22]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009c66:	7dba      	ldrb	r2, [r7, #22]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	32ae      	adds	r2, #174	; 0xae
 8009c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	7afa      	ldrb	r2, [r7, #11]
 8009c74:	4611      	mov	r1, r2
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	4798      	blx	r3
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009c7e:	7dfb      	ldrb	r3, [r7, #23]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d001      	beq.n	8009c88 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009c84:	7dfb      	ldrb	r3, [r7, #23]
 8009c86:	e000      	b.n	8009c8a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009c88:	2300      	movs	r3, #0
}
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	3718      	adds	r7, #24
 8009c8e:	46bd      	mov	sp, r7
 8009c90:	bd80      	pop	{r7, pc}

08009c92 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009c92:	b580      	push	{r7, lr}
 8009c94:	b086      	sub	sp, #24
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	60f8      	str	r0, [r7, #12]
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	607a      	str	r2, [r7, #4]
 8009c9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009ca0:	7afb      	ldrb	r3, [r7, #11]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d16f      	bne.n	8009d86 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	3314      	adds	r3, #20
 8009caa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d15a      	bne.n	8009d6c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8009cb6:	693b      	ldr	r3, [r7, #16]
 8009cb8:	689a      	ldr	r2, [r3, #8]
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	429a      	cmp	r2, r3
 8009cc0:	d914      	bls.n	8009cec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	689a      	ldr	r2, [r3, #8]
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	1ad2      	subs	r2, r2, r3
 8009ccc:	693b      	ldr	r3, [r7, #16]
 8009cce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009cd0:	693b      	ldr	r3, [r7, #16]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	461a      	mov	r2, r3
 8009cd6:	6879      	ldr	r1, [r7, #4]
 8009cd8:	68f8      	ldr	r0, [r7, #12]
 8009cda:	f001 f8dc 	bl	800ae96 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cde:	2300      	movs	r3, #0
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	68f8      	ldr	r0, [r7, #12]
 8009ce6:	f001 fe63 	bl	800b9b0 <USBD_LL_PrepareReceive>
 8009cea:	e03f      	b.n	8009d6c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009cec:	693b      	ldr	r3, [r7, #16]
 8009cee:	68da      	ldr	r2, [r3, #12]
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	689b      	ldr	r3, [r3, #8]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d11c      	bne.n	8009d32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	685a      	ldr	r2, [r3, #4]
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d316      	bcc.n	8009d32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	685a      	ldr	r2, [r3, #4]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d20f      	bcs.n	8009d32 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009d12:	2200      	movs	r2, #0
 8009d14:	2100      	movs	r1, #0
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f001 f8bd 	bl	800ae96 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d24:	2300      	movs	r3, #0
 8009d26:	2200      	movs	r2, #0
 8009d28:	2100      	movs	r1, #0
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f001 fe40 	bl	800b9b0 <USBD_LL_PrepareReceive>
 8009d30:	e01c      	b.n	8009d6c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	2b03      	cmp	r3, #3
 8009d3c:	d10f      	bne.n	8009d5e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d009      	beq.n	8009d5e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009d58:	68db      	ldr	r3, [r3, #12]
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d5e:	2180      	movs	r1, #128	; 0x80
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f001 fd1f 	bl	800b7a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f001 f8e7 	bl	800af3a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d03a      	beq.n	8009dec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8009d76:	68f8      	ldr	r0, [r7, #12]
 8009d78:	f7ff fe42 	bl	8009a00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8009d84:	e032      	b.n	8009dec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8009d86:	7afb      	ldrb	r3, [r7, #11]
 8009d88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009d8c:	b2db      	uxtb	r3, r3
 8009d8e:	4619      	mov	r1, r3
 8009d90:	68f8      	ldr	r0, [r7, #12]
 8009d92:	f000 f985 	bl	800a0a0 <USBD_CoreFindEP>
 8009d96:	4603      	mov	r3, r0
 8009d98:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009d9a:	7dfb      	ldrb	r3, [r7, #23]
 8009d9c:	2bff      	cmp	r3, #255	; 0xff
 8009d9e:	d025      	beq.n	8009dec <USBD_LL_DataInStage+0x15a>
 8009da0:	7dfb      	ldrb	r3, [r7, #23]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d122      	bne.n	8009dec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	2b03      	cmp	r3, #3
 8009db0:	d11c      	bne.n	8009dec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009db2:	7dfa      	ldrb	r2, [r7, #23]
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	32ae      	adds	r2, #174	; 0xae
 8009db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dbc:	695b      	ldr	r3, [r3, #20]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d014      	beq.n	8009dec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009dc2:	7dfa      	ldrb	r2, [r7, #23]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8009dca:	7dfa      	ldrb	r2, [r7, #23]
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	32ae      	adds	r2, #174	; 0xae
 8009dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dd4:	695b      	ldr	r3, [r3, #20]
 8009dd6:	7afa      	ldrb	r2, [r7, #11]
 8009dd8:	4611      	mov	r1, r2
 8009dda:	68f8      	ldr	r0, [r7, #12]
 8009ddc:	4798      	blx	r3
 8009dde:	4603      	mov	r3, r0
 8009de0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009de2:	7dbb      	ldrb	r3, [r7, #22]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8009de8:	7dbb      	ldrb	r3, [r7, #22]
 8009dea:	e000      	b.n	8009dee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009dec:	2300      	movs	r3, #0
}
 8009dee:	4618      	mov	r0, r3
 8009df0:	3718      	adds	r7, #24
 8009df2:	46bd      	mov	sp, r7
 8009df4:	bd80      	pop	{r7, pc}

08009df6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009df6:	b580      	push	{r7, lr}
 8009df8:	b084      	sub	sp, #16
 8009dfa:	af00      	add	r7, sp, #0
 8009dfc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dfe:	2300      	movs	r3, #0
 8009e00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d014      	beq.n	8009e5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00e      	beq.n	8009e5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	687a      	ldr	r2, [r7, #4]
 8009e48:	6852      	ldr	r2, [r2, #4]
 8009e4a:	b2d2      	uxtb	r2, r2
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	4798      	blx	r3
 8009e52:	4603      	mov	r3, r0
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d001      	beq.n	8009e5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e5c:	2340      	movs	r3, #64	; 0x40
 8009e5e:	2200      	movs	r2, #0
 8009e60:	2100      	movs	r1, #0
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f001 fc2a 	bl	800b6bc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2240      	movs	r2, #64	; 0x40
 8009e74:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009e78:	2340      	movs	r3, #64	; 0x40
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	2180      	movs	r1, #128	; 0x80
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f001 fc1c 	bl	800b6bc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2201      	movs	r2, #1
 8009e88:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2240      	movs	r2, #64	; 0x40
 8009e8e:	621a      	str	r2, [r3, #32]

  return ret;
 8009e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e92:	4618      	mov	r0, r3
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009e9a:	b480      	push	{r7}
 8009e9c:	b083      	sub	sp, #12
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	460b      	mov	r3, r1
 8009ea4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	78fa      	ldrb	r2, [r7, #3]
 8009eaa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr

08009eba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009eba:	b480      	push	{r7}
 8009ebc:	b083      	sub	sp, #12
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b04      	cmp	r3, #4
 8009ecc:	d006      	beq.n	8009edc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ed4:	b2da      	uxtb	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2204      	movs	r2, #4
 8009ee0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	370c      	adds	r7, #12
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b083      	sub	sp, #12
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f00:	b2db      	uxtb	r3, r3
 8009f02:	2b04      	cmp	r3, #4
 8009f04:	d106      	bne.n	8009f14 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009f0c:	b2da      	uxtb	r2, r3
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	370c      	adds	r7, #12
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b082      	sub	sp, #8
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f30:	b2db      	uxtb	r3, r3
 8009f32:	2b03      	cmp	r3, #3
 8009f34:	d110      	bne.n	8009f58 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00b      	beq.n	8009f58 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f46:	69db      	ldr	r3, [r3, #28]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d005      	beq.n	8009f58 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f52:	69db      	ldr	r3, [r3, #28]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3708      	adds	r7, #8
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b082      	sub	sp, #8
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
 8009f6a:	460b      	mov	r3, r1
 8009f6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	32ae      	adds	r2, #174	; 0xae
 8009f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d101      	bne.n	8009f84 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009f80:	2303      	movs	r3, #3
 8009f82:	e01c      	b.n	8009fbe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	2b03      	cmp	r3, #3
 8009f8e:	d115      	bne.n	8009fbc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	32ae      	adds	r2, #174	; 0xae
 8009f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f9e:	6a1b      	ldr	r3, [r3, #32]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00b      	beq.n	8009fbc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	32ae      	adds	r2, #174	; 0xae
 8009fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fb2:	6a1b      	ldr	r3, [r3, #32]
 8009fb4:	78fa      	ldrb	r2, [r7, #3]
 8009fb6:	4611      	mov	r1, r2
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009fbc:	2300      	movs	r3, #0
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3708      	adds	r7, #8
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}

08009fc6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009fc6:	b580      	push	{r7, lr}
 8009fc8:	b082      	sub	sp, #8
 8009fca:	af00      	add	r7, sp, #0
 8009fcc:	6078      	str	r0, [r7, #4]
 8009fce:	460b      	mov	r3, r1
 8009fd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	32ae      	adds	r2, #174	; 0xae
 8009fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d101      	bne.n	8009fe8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009fe4:	2303      	movs	r3, #3
 8009fe6:	e01c      	b.n	800a022 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	2b03      	cmp	r3, #3
 8009ff2:	d115      	bne.n	800a020 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	32ae      	adds	r2, #174	; 0xae
 8009ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00b      	beq.n	800a020 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	32ae      	adds	r2, #174	; 0xae
 800a012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a018:	78fa      	ldrb	r2, [r7, #3]
 800a01a:	4611      	mov	r1, r2
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a020:	2300      	movs	r3, #0
}
 800a022:	4618      	mov	r0, r3
 800a024:	3708      	adds	r7, #8
 800a026:	46bd      	mov	sp, r7
 800a028:	bd80      	pop	{r7, pc}

0800a02a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b083      	sub	sp, #12
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a032:	2300      	movs	r3, #0
}
 800a034:	4618      	mov	r0, r3
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr

0800a040 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a048:	2300      	movs	r3, #0
 800a04a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d00e      	beq.n	800a07c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a064:	685b      	ldr	r3, [r3, #4]
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	6852      	ldr	r2, [r2, #4]
 800a06a:	b2d2      	uxtb	r2, r2
 800a06c:	4611      	mov	r1, r2
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	4798      	blx	r3
 800a072:	4603      	mov	r3, r0
 800a074:	2b00      	cmp	r3, #0
 800a076:	d001      	beq.n	800a07c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a078:	2303      	movs	r3, #3
 800a07a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a07c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a086:	b480      	push	{r7}
 800a088:	b083      	sub	sp, #12
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	460b      	mov	r3, r1
 800a090:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a092:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a094:	4618      	mov	r0, r3
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
 800a0a8:	460b      	mov	r3, r1
 800a0aa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a0ac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b086      	sub	sp, #24
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
 800a0c2:	460b      	mov	r3, r1
 800a0c4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	885b      	ldrh	r3, [r3, #2]
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	b29b      	uxth	r3, r3
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d920      	bls.n	800a124 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a0ea:	e013      	b.n	800a114 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a0ec:	f107 030a 	add.w	r3, r7, #10
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6978      	ldr	r0, [r7, #20]
 800a0f4:	f000 f81b 	bl	800a12e <USBD_GetNextDesc>
 800a0f8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	785b      	ldrb	r3, [r3, #1]
 800a0fe:	2b05      	cmp	r3, #5
 800a100:	d108      	bne.n	800a114 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	789b      	ldrb	r3, [r3, #2]
 800a10a:	78fa      	ldrb	r2, [r7, #3]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d008      	beq.n	800a122 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a110:	2300      	movs	r3, #0
 800a112:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	885b      	ldrh	r3, [r3, #2]
 800a118:	b29a      	uxth	r2, r3
 800a11a:	897b      	ldrh	r3, [r7, #10]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d8e5      	bhi.n	800a0ec <USBD_GetEpDesc+0x32>
 800a120:	e000      	b.n	800a124 <USBD_GetEpDesc+0x6a>
          break;
 800a122:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a124:	693b      	ldr	r3, [r7, #16]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3718      	adds	r7, #24
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}

0800a12e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a12e:	b480      	push	{r7}
 800a130:	b085      	sub	sp, #20
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
 800a136:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	881a      	ldrh	r2, [r3, #0]
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	781b      	ldrb	r3, [r3, #0]
 800a144:	b29b      	uxth	r3, r3
 800a146:	4413      	add	r3, r2
 800a148:	b29a      	uxth	r2, r3
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	461a      	mov	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4413      	add	r3, r2
 800a158:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a15a:	68fb      	ldr	r3, [r7, #12]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr

0800a168 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a168:	b480      	push	{r7}
 800a16a:	b087      	sub	sp, #28
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	781b      	ldrb	r3, [r3, #0]
 800a178:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	3301      	adds	r3, #1
 800a17e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a186:	8a3b      	ldrh	r3, [r7, #16]
 800a188:	021b      	lsls	r3, r3, #8
 800a18a:	b21a      	sxth	r2, r3
 800a18c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a190:	4313      	orrs	r3, r2
 800a192:	b21b      	sxth	r3, r3
 800a194:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a196:	89fb      	ldrh	r3, [r7, #14]
}
 800a198:	4618      	mov	r0, r3
 800a19a:	371c      	adds	r7, #28
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr

0800a1a4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	781b      	ldrb	r3, [r3, #0]
 800a1b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a1ba:	2b40      	cmp	r3, #64	; 0x40
 800a1bc:	d005      	beq.n	800a1ca <USBD_StdDevReq+0x26>
 800a1be:	2b40      	cmp	r3, #64	; 0x40
 800a1c0:	d857      	bhi.n	800a272 <USBD_StdDevReq+0xce>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d00f      	beq.n	800a1e6 <USBD_StdDevReq+0x42>
 800a1c6:	2b20      	cmp	r3, #32
 800a1c8:	d153      	bne.n	800a272 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	32ae      	adds	r2, #174	; 0xae
 800a1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d8:	689b      	ldr	r3, [r3, #8]
 800a1da:	6839      	ldr	r1, [r7, #0]
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	4798      	blx	r3
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1e4:	e04a      	b.n	800a27c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	785b      	ldrb	r3, [r3, #1]
 800a1ea:	2b09      	cmp	r3, #9
 800a1ec:	d83b      	bhi.n	800a266 <USBD_StdDevReq+0xc2>
 800a1ee:	a201      	add	r2, pc, #4	; (adr r2, 800a1f4 <USBD_StdDevReq+0x50>)
 800a1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f4:	0800a249 	.word	0x0800a249
 800a1f8:	0800a25d 	.word	0x0800a25d
 800a1fc:	0800a267 	.word	0x0800a267
 800a200:	0800a253 	.word	0x0800a253
 800a204:	0800a267 	.word	0x0800a267
 800a208:	0800a227 	.word	0x0800a227
 800a20c:	0800a21d 	.word	0x0800a21d
 800a210:	0800a267 	.word	0x0800a267
 800a214:	0800a23f 	.word	0x0800a23f
 800a218:	0800a231 	.word	0x0800a231
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a21c:	6839      	ldr	r1, [r7, #0]
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	f000 fa3c 	bl	800a69c <USBD_GetDescriptor>
          break;
 800a224:	e024      	b.n	800a270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a226:	6839      	ldr	r1, [r7, #0]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fbcb 	bl	800a9c4 <USBD_SetAddress>
          break;
 800a22e:	e01f      	b.n	800a270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a230:	6839      	ldr	r1, [r7, #0]
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fc0a 	bl	800aa4c <USBD_SetConfig>
 800a238:	4603      	mov	r3, r0
 800a23a:	73fb      	strb	r3, [r7, #15]
          break;
 800a23c:	e018      	b.n	800a270 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a23e:	6839      	ldr	r1, [r7, #0]
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f000 fcad 	bl	800aba0 <USBD_GetConfig>
          break;
 800a246:	e013      	b.n	800a270 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a248:	6839      	ldr	r1, [r7, #0]
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 fcde 	bl	800ac0c <USBD_GetStatus>
          break;
 800a250:	e00e      	b.n	800a270 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a252:	6839      	ldr	r1, [r7, #0]
 800a254:	6878      	ldr	r0, [r7, #4]
 800a256:	f000 fd0d 	bl	800ac74 <USBD_SetFeature>
          break;
 800a25a:	e009      	b.n	800a270 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 fd31 	bl	800acc6 <USBD_ClrFeature>
          break;
 800a264:	e004      	b.n	800a270 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	f000 fd88 	bl	800ad7e <USBD_CtlError>
          break;
 800a26e:	bf00      	nop
      }
      break;
 800a270:	e004      	b.n	800a27c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 fd82 	bl	800ad7e <USBD_CtlError>
      break;
 800a27a:	bf00      	nop
  }

  return ret;
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}
 800a286:	bf00      	nop

0800a288 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b084      	sub	sp, #16
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	781b      	ldrb	r3, [r3, #0]
 800a29a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a29e:	2b40      	cmp	r3, #64	; 0x40
 800a2a0:	d005      	beq.n	800a2ae <USBD_StdItfReq+0x26>
 800a2a2:	2b40      	cmp	r3, #64	; 0x40
 800a2a4:	d852      	bhi.n	800a34c <USBD_StdItfReq+0xc4>
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <USBD_StdItfReq+0x26>
 800a2aa:	2b20      	cmp	r3, #32
 800a2ac:	d14e      	bne.n	800a34c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d840      	bhi.n	800a33e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	889b      	ldrh	r3, [r3, #4]
 800a2c0:	b2db      	uxtb	r3, r3
 800a2c2:	2b01      	cmp	r3, #1
 800a2c4:	d836      	bhi.n	800a334 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	889b      	ldrh	r3, [r3, #4]
 800a2ca:	b2db      	uxtb	r3, r3
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7ff fed9 	bl	800a086 <USBD_CoreFindIF>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a2d8:	7bbb      	ldrb	r3, [r7, #14]
 800a2da:	2bff      	cmp	r3, #255	; 0xff
 800a2dc:	d01d      	beq.n	800a31a <USBD_StdItfReq+0x92>
 800a2de:	7bbb      	ldrb	r3, [r7, #14]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d11a      	bne.n	800a31a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a2e4:	7bba      	ldrb	r2, [r7, #14]
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	32ae      	adds	r2, #174	; 0xae
 800a2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d00f      	beq.n	800a314 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a2f4:	7bba      	ldrb	r2, [r7, #14]
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a2fc:	7bba      	ldrb	r2, [r7, #14]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	32ae      	adds	r2, #174	; 0xae
 800a302:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	4798      	blx	r3
 800a30e:	4603      	mov	r3, r0
 800a310:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a312:	e004      	b.n	800a31e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a314:	2303      	movs	r3, #3
 800a316:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a318:	e001      	b.n	800a31e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a31a:	2303      	movs	r3, #3
 800a31c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	88db      	ldrh	r3, [r3, #6]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d110      	bne.n	800a348 <USBD_StdItfReq+0xc0>
 800a326:	7bfb      	ldrb	r3, [r7, #15]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10d      	bne.n	800a348 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a32c:	6878      	ldr	r0, [r7, #4]
 800a32e:	f000 fdf1 	bl	800af14 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a332:	e009      	b.n	800a348 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a334:	6839      	ldr	r1, [r7, #0]
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f000 fd21 	bl	800ad7e <USBD_CtlError>
          break;
 800a33c:	e004      	b.n	800a348 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f000 fd1c 	bl	800ad7e <USBD_CtlError>
          break;
 800a346:	e000      	b.n	800a34a <USBD_StdItfReq+0xc2>
          break;
 800a348:	bf00      	nop
      }
      break;
 800a34a:	e004      	b.n	800a356 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a34c:	6839      	ldr	r1, [r7, #0]
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f000 fd15 	bl	800ad7e <USBD_CtlError>
      break;
 800a354:	bf00      	nop
  }

  return ret;
 800a356:	7bfb      	ldrb	r3, [r7, #15]
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	889b      	ldrh	r3, [r3, #4]
 800a372:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a37c:	2b40      	cmp	r3, #64	; 0x40
 800a37e:	d007      	beq.n	800a390 <USBD_StdEPReq+0x30>
 800a380:	2b40      	cmp	r3, #64	; 0x40
 800a382:	f200 817f 	bhi.w	800a684 <USBD_StdEPReq+0x324>
 800a386:	2b00      	cmp	r3, #0
 800a388:	d02a      	beq.n	800a3e0 <USBD_StdEPReq+0x80>
 800a38a:	2b20      	cmp	r3, #32
 800a38c:	f040 817a 	bne.w	800a684 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a390:	7bbb      	ldrb	r3, [r7, #14]
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7ff fe83 	bl	800a0a0 <USBD_CoreFindEP>
 800a39a:	4603      	mov	r3, r0
 800a39c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a39e:	7b7b      	ldrb	r3, [r7, #13]
 800a3a0:	2bff      	cmp	r3, #255	; 0xff
 800a3a2:	f000 8174 	beq.w	800a68e <USBD_StdEPReq+0x32e>
 800a3a6:	7b7b      	ldrb	r3, [r7, #13]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f040 8170 	bne.w	800a68e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a3ae:	7b7a      	ldrb	r2, [r7, #13]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a3b6:	7b7a      	ldrb	r2, [r7, #13]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	32ae      	adds	r2, #174	; 0xae
 800a3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c0:	689b      	ldr	r3, [r3, #8]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f000 8163 	beq.w	800a68e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a3c8:	7b7a      	ldrb	r2, [r7, #13]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	32ae      	adds	r2, #174	; 0xae
 800a3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	4798      	blx	r3
 800a3da:	4603      	mov	r3, r0
 800a3dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a3de:	e156      	b.n	800a68e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	785b      	ldrb	r3, [r3, #1]
 800a3e4:	2b03      	cmp	r3, #3
 800a3e6:	d008      	beq.n	800a3fa <USBD_StdEPReq+0x9a>
 800a3e8:	2b03      	cmp	r3, #3
 800a3ea:	f300 8145 	bgt.w	800a678 <USBD_StdEPReq+0x318>
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	f000 809b 	beq.w	800a52a <USBD_StdEPReq+0x1ca>
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d03c      	beq.n	800a472 <USBD_StdEPReq+0x112>
 800a3f8:	e13e      	b.n	800a678 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a400:	b2db      	uxtb	r3, r3
 800a402:	2b02      	cmp	r3, #2
 800a404:	d002      	beq.n	800a40c <USBD_StdEPReq+0xac>
 800a406:	2b03      	cmp	r3, #3
 800a408:	d016      	beq.n	800a438 <USBD_StdEPReq+0xd8>
 800a40a:	e02c      	b.n	800a466 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a40c:	7bbb      	ldrb	r3, [r7, #14]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d00d      	beq.n	800a42e <USBD_StdEPReq+0xce>
 800a412:	7bbb      	ldrb	r3, [r7, #14]
 800a414:	2b80      	cmp	r3, #128	; 0x80
 800a416:	d00a      	beq.n	800a42e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a418:	7bbb      	ldrb	r3, [r7, #14]
 800a41a:	4619      	mov	r1, r3
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f001 f9c1 	bl	800b7a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a422:	2180      	movs	r1, #128	; 0x80
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f001 f9bd 	bl	800b7a4 <USBD_LL_StallEP>
 800a42a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a42c:	e020      	b.n	800a470 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a42e:	6839      	ldr	r1, [r7, #0]
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 fca4 	bl	800ad7e <USBD_CtlError>
              break;
 800a436:	e01b      	b.n	800a470 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	885b      	ldrh	r3, [r3, #2]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d10e      	bne.n	800a45e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a440:	7bbb      	ldrb	r3, [r7, #14]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d00b      	beq.n	800a45e <USBD_StdEPReq+0xfe>
 800a446:	7bbb      	ldrb	r3, [r7, #14]
 800a448:	2b80      	cmp	r3, #128	; 0x80
 800a44a:	d008      	beq.n	800a45e <USBD_StdEPReq+0xfe>
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	88db      	ldrh	r3, [r3, #6]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d104      	bne.n	800a45e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a454:	7bbb      	ldrb	r3, [r7, #14]
 800a456:	4619      	mov	r1, r3
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f001 f9a3 	bl	800b7a4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 fd58 	bl	800af14 <USBD_CtlSendStatus>

              break;
 800a464:	e004      	b.n	800a470 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a466:	6839      	ldr	r1, [r7, #0]
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 fc88 	bl	800ad7e <USBD_CtlError>
              break;
 800a46e:	bf00      	nop
          }
          break;
 800a470:	e107      	b.n	800a682 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b02      	cmp	r3, #2
 800a47c:	d002      	beq.n	800a484 <USBD_StdEPReq+0x124>
 800a47e:	2b03      	cmp	r3, #3
 800a480:	d016      	beq.n	800a4b0 <USBD_StdEPReq+0x150>
 800a482:	e04b      	b.n	800a51c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a484:	7bbb      	ldrb	r3, [r7, #14]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d00d      	beq.n	800a4a6 <USBD_StdEPReq+0x146>
 800a48a:	7bbb      	ldrb	r3, [r7, #14]
 800a48c:	2b80      	cmp	r3, #128	; 0x80
 800a48e:	d00a      	beq.n	800a4a6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a490:	7bbb      	ldrb	r3, [r7, #14]
 800a492:	4619      	mov	r1, r3
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f001 f985 	bl	800b7a4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a49a:	2180      	movs	r1, #128	; 0x80
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f001 f981 	bl	800b7a4 <USBD_LL_StallEP>
 800a4a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4a4:	e040      	b.n	800a528 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a4a6:	6839      	ldr	r1, [r7, #0]
 800a4a8:	6878      	ldr	r0, [r7, #4]
 800a4aa:	f000 fc68 	bl	800ad7e <USBD_CtlError>
              break;
 800a4ae:	e03b      	b.n	800a528 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	885b      	ldrh	r3, [r3, #2]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d136      	bne.n	800a526 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a4b8:	7bbb      	ldrb	r3, [r7, #14]
 800a4ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d004      	beq.n	800a4cc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a4c2:	7bbb      	ldrb	r3, [r7, #14]
 800a4c4:	4619      	mov	r1, r3
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f001 f9a2 	bl	800b810 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fd21 	bl	800af14 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a4d2:	7bbb      	ldrb	r3, [r7, #14]
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f7ff fde2 	bl	800a0a0 <USBD_CoreFindEP>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a4e0:	7b7b      	ldrb	r3, [r7, #13]
 800a4e2:	2bff      	cmp	r3, #255	; 0xff
 800a4e4:	d01f      	beq.n	800a526 <USBD_StdEPReq+0x1c6>
 800a4e6:	7b7b      	ldrb	r3, [r7, #13]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d11c      	bne.n	800a526 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a4ec:	7b7a      	ldrb	r2, [r7, #13]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a4f4:	7b7a      	ldrb	r2, [r7, #13]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	32ae      	adds	r2, #174	; 0xae
 800a4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d010      	beq.n	800a526 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a504:	7b7a      	ldrb	r2, [r7, #13]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	32ae      	adds	r2, #174	; 0xae
 800a50a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	6839      	ldr	r1, [r7, #0]
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	4798      	blx	r3
 800a516:	4603      	mov	r3, r0
 800a518:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a51a:	e004      	b.n	800a526 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a51c:	6839      	ldr	r1, [r7, #0]
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f000 fc2d 	bl	800ad7e <USBD_CtlError>
              break;
 800a524:	e000      	b.n	800a528 <USBD_StdEPReq+0x1c8>
              break;
 800a526:	bf00      	nop
          }
          break;
 800a528:	e0ab      	b.n	800a682 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a530:	b2db      	uxtb	r3, r3
 800a532:	2b02      	cmp	r3, #2
 800a534:	d002      	beq.n	800a53c <USBD_StdEPReq+0x1dc>
 800a536:	2b03      	cmp	r3, #3
 800a538:	d032      	beq.n	800a5a0 <USBD_StdEPReq+0x240>
 800a53a:	e097      	b.n	800a66c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a53c:	7bbb      	ldrb	r3, [r7, #14]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d007      	beq.n	800a552 <USBD_StdEPReq+0x1f2>
 800a542:	7bbb      	ldrb	r3, [r7, #14]
 800a544:	2b80      	cmp	r3, #128	; 0x80
 800a546:	d004      	beq.n	800a552 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a548:	6839      	ldr	r1, [r7, #0]
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 fc17 	bl	800ad7e <USBD_CtlError>
                break;
 800a550:	e091      	b.n	800a676 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a552:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a556:	2b00      	cmp	r3, #0
 800a558:	da0b      	bge.n	800a572 <USBD_StdEPReq+0x212>
 800a55a:	7bbb      	ldrb	r3, [r7, #14]
 800a55c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a560:	4613      	mov	r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	4413      	add	r3, r2
 800a566:	009b      	lsls	r3, r3, #2
 800a568:	3310      	adds	r3, #16
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	4413      	add	r3, r2
 800a56e:	3304      	adds	r3, #4
 800a570:	e00b      	b.n	800a58a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a572:	7bbb      	ldrb	r3, [r7, #14]
 800a574:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a578:	4613      	mov	r3, r2
 800a57a:	009b      	lsls	r3, r3, #2
 800a57c:	4413      	add	r3, r2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a584:	687a      	ldr	r2, [r7, #4]
 800a586:	4413      	add	r3, r2
 800a588:	3304      	adds	r3, #4
 800a58a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	2200      	movs	r2, #0
 800a590:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	2202      	movs	r2, #2
 800a596:	4619      	mov	r1, r3
 800a598:	6878      	ldr	r0, [r7, #4]
 800a59a:	f000 fc61 	bl	800ae60 <USBD_CtlSendData>
              break;
 800a59e:	e06a      	b.n	800a676 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a5a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	da11      	bge.n	800a5cc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a5a8:	7bbb      	ldrb	r3, [r7, #14]
 800a5aa:	f003 020f 	and.w	r2, r3, #15
 800a5ae:	6879      	ldr	r1, [r7, #4]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	009b      	lsls	r3, r3, #2
 800a5b4:	4413      	add	r3, r2
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	440b      	add	r3, r1
 800a5ba:	3324      	adds	r3, #36	; 0x24
 800a5bc:	881b      	ldrh	r3, [r3, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d117      	bne.n	800a5f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a5c2:	6839      	ldr	r1, [r7, #0]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fbda 	bl	800ad7e <USBD_CtlError>
                  break;
 800a5ca:	e054      	b.n	800a676 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a5cc:	7bbb      	ldrb	r3, [r7, #14]
 800a5ce:	f003 020f 	and.w	r2, r3, #15
 800a5d2:	6879      	ldr	r1, [r7, #4]
 800a5d4:	4613      	mov	r3, r2
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	4413      	add	r3, r2
 800a5da:	009b      	lsls	r3, r3, #2
 800a5dc:	440b      	add	r3, r1
 800a5de:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a5e2:	881b      	ldrh	r3, [r3, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d104      	bne.n	800a5f2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a5e8:	6839      	ldr	r1, [r7, #0]
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fbc7 	bl	800ad7e <USBD_CtlError>
                  break;
 800a5f0:	e041      	b.n	800a676 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	da0b      	bge.n	800a612 <USBD_StdEPReq+0x2b2>
 800a5fa:	7bbb      	ldrb	r3, [r7, #14]
 800a5fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a600:	4613      	mov	r3, r2
 800a602:	009b      	lsls	r3, r3, #2
 800a604:	4413      	add	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	3310      	adds	r3, #16
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	4413      	add	r3, r2
 800a60e:	3304      	adds	r3, #4
 800a610:	e00b      	b.n	800a62a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a612:	7bbb      	ldrb	r3, [r7, #14]
 800a614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a618:	4613      	mov	r3, r2
 800a61a:	009b      	lsls	r3, r3, #2
 800a61c:	4413      	add	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	4413      	add	r3, r2
 800a628:	3304      	adds	r3, #4
 800a62a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a62c:	7bbb      	ldrb	r3, [r7, #14]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d002      	beq.n	800a638 <USBD_StdEPReq+0x2d8>
 800a632:	7bbb      	ldrb	r3, [r7, #14]
 800a634:	2b80      	cmp	r3, #128	; 0x80
 800a636:	d103      	bne.n	800a640 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	2200      	movs	r2, #0
 800a63c:	601a      	str	r2, [r3, #0]
 800a63e:	e00e      	b.n	800a65e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a640:	7bbb      	ldrb	r3, [r7, #14]
 800a642:	4619      	mov	r1, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f001 f919 	bl	800b87c <USBD_LL_IsStallEP>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d003      	beq.n	800a658 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	2201      	movs	r2, #1
 800a654:	601a      	str	r2, [r3, #0]
 800a656:	e002      	b.n	800a65e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2200      	movs	r2, #0
 800a65c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a65e:	68bb      	ldr	r3, [r7, #8]
 800a660:	2202      	movs	r2, #2
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 fbfb 	bl	800ae60 <USBD_CtlSendData>
              break;
 800a66a:	e004      	b.n	800a676 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a66c:	6839      	ldr	r1, [r7, #0]
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 fb85 	bl	800ad7e <USBD_CtlError>
              break;
 800a674:	bf00      	nop
          }
          break;
 800a676:	e004      	b.n	800a682 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a678:	6839      	ldr	r1, [r7, #0]
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fb7f 	bl	800ad7e <USBD_CtlError>
          break;
 800a680:	bf00      	nop
      }
      break;
 800a682:	e005      	b.n	800a690 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800a684:	6839      	ldr	r1, [r7, #0]
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 fb79 	bl	800ad7e <USBD_CtlError>
      break;
 800a68c:	e000      	b.n	800a690 <USBD_StdEPReq+0x330>
      break;
 800a68e:	bf00      	nop
  }

  return ret;
 800a690:	7bfb      	ldrb	r3, [r7, #15]
}
 800a692:	4618      	mov	r0, r3
 800a694:	3710      	adds	r7, #16
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
	...

0800a69c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	885b      	ldrh	r3, [r3, #2]
 800a6b6:	0a1b      	lsrs	r3, r3, #8
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	2b0e      	cmp	r3, #14
 800a6be:	f200 8152 	bhi.w	800a966 <USBD_GetDescriptor+0x2ca>
 800a6c2:	a201      	add	r2, pc, #4	; (adr r2, 800a6c8 <USBD_GetDescriptor+0x2c>)
 800a6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c8:	0800a739 	.word	0x0800a739
 800a6cc:	0800a751 	.word	0x0800a751
 800a6d0:	0800a791 	.word	0x0800a791
 800a6d4:	0800a967 	.word	0x0800a967
 800a6d8:	0800a967 	.word	0x0800a967
 800a6dc:	0800a907 	.word	0x0800a907
 800a6e0:	0800a933 	.word	0x0800a933
 800a6e4:	0800a967 	.word	0x0800a967
 800a6e8:	0800a967 	.word	0x0800a967
 800a6ec:	0800a967 	.word	0x0800a967
 800a6f0:	0800a967 	.word	0x0800a967
 800a6f4:	0800a967 	.word	0x0800a967
 800a6f8:	0800a967 	.word	0x0800a967
 800a6fc:	0800a967 	.word	0x0800a967
 800a700:	0800a705 	.word	0x0800a705
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a70a:	69db      	ldr	r3, [r3, #28]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d00b      	beq.n	800a728 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a716:	69db      	ldr	r3, [r3, #28]
 800a718:	687a      	ldr	r2, [r7, #4]
 800a71a:	7c12      	ldrb	r2, [r2, #16]
 800a71c:	f107 0108 	add.w	r1, r7, #8
 800a720:	4610      	mov	r0, r2
 800a722:	4798      	blx	r3
 800a724:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a726:	e126      	b.n	800a976 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f000 fb27 	bl	800ad7e <USBD_CtlError>
        err++;
 800a730:	7afb      	ldrb	r3, [r7, #11]
 800a732:	3301      	adds	r3, #1
 800a734:	72fb      	strb	r3, [r7, #11]
      break;
 800a736:	e11e      	b.n	800a976 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	7c12      	ldrb	r2, [r2, #16]
 800a744:	f107 0108 	add.w	r1, r7, #8
 800a748:	4610      	mov	r0, r2
 800a74a:	4798      	blx	r3
 800a74c:	60f8      	str	r0, [r7, #12]
      break;
 800a74e:	e112      	b.n	800a976 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	7c1b      	ldrb	r3, [r3, #16]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10d      	bne.n	800a774 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a75e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a760:	f107 0208 	add.w	r2, r7, #8
 800a764:	4610      	mov	r0, r2
 800a766:	4798      	blx	r3
 800a768:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	3301      	adds	r3, #1
 800a76e:	2202      	movs	r2, #2
 800a770:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a772:	e100      	b.n	800a976 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77c:	f107 0208 	add.w	r2, r7, #8
 800a780:	4610      	mov	r0, r2
 800a782:	4798      	blx	r3
 800a784:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	3301      	adds	r3, #1
 800a78a:	2202      	movs	r2, #2
 800a78c:	701a      	strb	r2, [r3, #0]
      break;
 800a78e:	e0f2      	b.n	800a976 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	885b      	ldrh	r3, [r3, #2]
 800a794:	b2db      	uxtb	r3, r3
 800a796:	2b05      	cmp	r3, #5
 800a798:	f200 80ac 	bhi.w	800a8f4 <USBD_GetDescriptor+0x258>
 800a79c:	a201      	add	r2, pc, #4	; (adr r2, 800a7a4 <USBD_GetDescriptor+0x108>)
 800a79e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a2:	bf00      	nop
 800a7a4:	0800a7bd 	.word	0x0800a7bd
 800a7a8:	0800a7f1 	.word	0x0800a7f1
 800a7ac:	0800a825 	.word	0x0800a825
 800a7b0:	0800a859 	.word	0x0800a859
 800a7b4:	0800a88d 	.word	0x0800a88d
 800a7b8:	0800a8c1 	.word	0x0800a8c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d00b      	beq.n	800a7e0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	7c12      	ldrb	r2, [r2, #16]
 800a7d4:	f107 0108 	add.w	r1, r7, #8
 800a7d8:	4610      	mov	r0, r2
 800a7da:	4798      	blx	r3
 800a7dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7de:	e091      	b.n	800a904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a7e0:	6839      	ldr	r1, [r7, #0]
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 facb 	bl	800ad7e <USBD_CtlError>
            err++;
 800a7e8:	7afb      	ldrb	r3, [r7, #11]
 800a7ea:	3301      	adds	r3, #1
 800a7ec:	72fb      	strb	r3, [r7, #11]
          break;
 800a7ee:	e089      	b.n	800a904 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00b      	beq.n	800a814 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a802:	689b      	ldr	r3, [r3, #8]
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	7c12      	ldrb	r2, [r2, #16]
 800a808:	f107 0108 	add.w	r1, r7, #8
 800a80c:	4610      	mov	r0, r2
 800a80e:	4798      	blx	r3
 800a810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a812:	e077      	b.n	800a904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a814:	6839      	ldr	r1, [r7, #0]
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f000 fab1 	bl	800ad7e <USBD_CtlError>
            err++;
 800a81c:	7afb      	ldrb	r3, [r7, #11]
 800a81e:	3301      	adds	r3, #1
 800a820:	72fb      	strb	r3, [r7, #11]
          break;
 800a822:	e06f      	b.n	800a904 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a82a:	68db      	ldr	r3, [r3, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00b      	beq.n	800a848 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a836:	68db      	ldr	r3, [r3, #12]
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	7c12      	ldrb	r2, [r2, #16]
 800a83c:	f107 0108 	add.w	r1, r7, #8
 800a840:	4610      	mov	r0, r2
 800a842:	4798      	blx	r3
 800a844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a846:	e05d      	b.n	800a904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a848:	6839      	ldr	r1, [r7, #0]
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fa97 	bl	800ad7e <USBD_CtlError>
            err++;
 800a850:	7afb      	ldrb	r3, [r7, #11]
 800a852:	3301      	adds	r3, #1
 800a854:	72fb      	strb	r3, [r7, #11]
          break;
 800a856:	e055      	b.n	800a904 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d00b      	beq.n	800a87c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a86a:	691b      	ldr	r3, [r3, #16]
 800a86c:	687a      	ldr	r2, [r7, #4]
 800a86e:	7c12      	ldrb	r2, [r2, #16]
 800a870:	f107 0108 	add.w	r1, r7, #8
 800a874:	4610      	mov	r0, r2
 800a876:	4798      	blx	r3
 800a878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a87a:	e043      	b.n	800a904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a87c:	6839      	ldr	r1, [r7, #0]
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 fa7d 	bl	800ad7e <USBD_CtlError>
            err++;
 800a884:	7afb      	ldrb	r3, [r7, #11]
 800a886:	3301      	adds	r3, #1
 800a888:	72fb      	strb	r3, [r7, #11]
          break;
 800a88a:	e03b      	b.n	800a904 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a892:	695b      	ldr	r3, [r3, #20]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d00b      	beq.n	800a8b0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a89e:	695b      	ldr	r3, [r3, #20]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	7c12      	ldrb	r2, [r2, #16]
 800a8a4:	f107 0108 	add.w	r1, r7, #8
 800a8a8:	4610      	mov	r0, r2
 800a8aa:	4798      	blx	r3
 800a8ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8ae:	e029      	b.n	800a904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a8b0:	6839      	ldr	r1, [r7, #0]
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 fa63 	bl	800ad7e <USBD_CtlError>
            err++;
 800a8b8:	7afb      	ldrb	r3, [r7, #11]
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a8be:	e021      	b.n	800a904 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d00b      	beq.n	800a8e4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8d2:	699b      	ldr	r3, [r3, #24]
 800a8d4:	687a      	ldr	r2, [r7, #4]
 800a8d6:	7c12      	ldrb	r2, [r2, #16]
 800a8d8:	f107 0108 	add.w	r1, r7, #8
 800a8dc:	4610      	mov	r0, r2
 800a8de:	4798      	blx	r3
 800a8e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a8e2:	e00f      	b.n	800a904 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a8e4:	6839      	ldr	r1, [r7, #0]
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 fa49 	bl	800ad7e <USBD_CtlError>
            err++;
 800a8ec:	7afb      	ldrb	r3, [r7, #11]
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a8f2:	e007      	b.n	800a904 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a8f4:	6839      	ldr	r1, [r7, #0]
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 fa41 	bl	800ad7e <USBD_CtlError>
          err++;
 800a8fc:	7afb      	ldrb	r3, [r7, #11]
 800a8fe:	3301      	adds	r3, #1
 800a900:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a902:	bf00      	nop
      }
      break;
 800a904:	e037      	b.n	800a976 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	7c1b      	ldrb	r3, [r3, #16]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d109      	bne.n	800a922 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a916:	f107 0208 	add.w	r2, r7, #8
 800a91a:	4610      	mov	r0, r2
 800a91c:	4798      	blx	r3
 800a91e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a920:	e029      	b.n	800a976 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a922:	6839      	ldr	r1, [r7, #0]
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 fa2a 	bl	800ad7e <USBD_CtlError>
        err++;
 800a92a:	7afb      	ldrb	r3, [r7, #11]
 800a92c:	3301      	adds	r3, #1
 800a92e:	72fb      	strb	r3, [r7, #11]
      break;
 800a930:	e021      	b.n	800a976 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	7c1b      	ldrb	r3, [r3, #16]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d10d      	bne.n	800a956 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a942:	f107 0208 	add.w	r2, r7, #8
 800a946:	4610      	mov	r0, r2
 800a948:	4798      	blx	r3
 800a94a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	3301      	adds	r3, #1
 800a950:	2207      	movs	r2, #7
 800a952:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a954:	e00f      	b.n	800a976 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a956:	6839      	ldr	r1, [r7, #0]
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fa10 	bl	800ad7e <USBD_CtlError>
        err++;
 800a95e:	7afb      	ldrb	r3, [r7, #11]
 800a960:	3301      	adds	r3, #1
 800a962:	72fb      	strb	r3, [r7, #11]
      break;
 800a964:	e007      	b.n	800a976 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800a966:	6839      	ldr	r1, [r7, #0]
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fa08 	bl	800ad7e <USBD_CtlError>
      err++;
 800a96e:	7afb      	ldrb	r3, [r7, #11]
 800a970:	3301      	adds	r3, #1
 800a972:	72fb      	strb	r3, [r7, #11]
      break;
 800a974:	bf00      	nop
  }

  if (err != 0U)
 800a976:	7afb      	ldrb	r3, [r7, #11]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d11e      	bne.n	800a9ba <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	88db      	ldrh	r3, [r3, #6]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d016      	beq.n	800a9b2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800a984:	893b      	ldrh	r3, [r7, #8]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00e      	beq.n	800a9a8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	88da      	ldrh	r2, [r3, #6]
 800a98e:	893b      	ldrh	r3, [r7, #8]
 800a990:	4293      	cmp	r3, r2
 800a992:	bf28      	it	cs
 800a994:	4613      	movcs	r3, r2
 800a996:	b29b      	uxth	r3, r3
 800a998:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a99a:	893b      	ldrh	r3, [r7, #8]
 800a99c:	461a      	mov	r2, r3
 800a99e:	68f9      	ldr	r1, [r7, #12]
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 fa5d 	bl	800ae60 <USBD_CtlSendData>
 800a9a6:	e009      	b.n	800a9bc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a9a8:	6839      	ldr	r1, [r7, #0]
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f9e7 	bl	800ad7e <USBD_CtlError>
 800a9b0:	e004      	b.n	800a9bc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 faae 	bl	800af14 <USBD_CtlSendStatus>
 800a9b8:	e000      	b.n	800a9bc <USBD_GetDescriptor+0x320>
    return;
 800a9ba:	bf00      	nop
  }
}
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop

0800a9c4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
 800a9cc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	889b      	ldrh	r3, [r3, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d131      	bne.n	800aa3a <USBD_SetAddress+0x76>
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	88db      	ldrh	r3, [r3, #6]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d12d      	bne.n	800aa3a <USBD_SetAddress+0x76>
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	885b      	ldrh	r3, [r3, #2]
 800a9e2:	2b7f      	cmp	r3, #127	; 0x7f
 800a9e4:	d829      	bhi.n	800aa3a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	885b      	ldrh	r3, [r3, #2]
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9f0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9f8:	b2db      	uxtb	r3, r3
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d104      	bne.n	800aa08 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a9fe:	6839      	ldr	r1, [r7, #0]
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f000 f9bc 	bl	800ad7e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa06:	e01d      	b.n	800aa44 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	7bfa      	ldrb	r2, [r7, #15]
 800aa0c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aa10:	7bfb      	ldrb	r3, [r7, #15]
 800aa12:	4619      	mov	r1, r3
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f000 ff5d 	bl	800b8d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 fa7a 	bl	800af14 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800aa20:	7bfb      	ldrb	r3, [r7, #15]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d004      	beq.n	800aa30 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	2202      	movs	r2, #2
 800aa2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa2e:	e009      	b.n	800aa44 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa38:	e004      	b.n	800aa44 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800aa3a:	6839      	ldr	r1, [r7, #0]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 f99e 	bl	800ad7e <USBD_CtlError>
  }
}
 800aa42:	bf00      	nop
 800aa44:	bf00      	nop
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa56:	2300      	movs	r3, #0
 800aa58:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	885b      	ldrh	r3, [r3, #2]
 800aa5e:	b2da      	uxtb	r2, r3
 800aa60:	4b4e      	ldr	r3, [pc, #312]	; (800ab9c <USBD_SetConfig+0x150>)
 800aa62:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aa64:	4b4d      	ldr	r3, [pc, #308]	; (800ab9c <USBD_SetConfig+0x150>)
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d905      	bls.n	800aa78 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aa6c:	6839      	ldr	r1, [r7, #0]
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 f985 	bl	800ad7e <USBD_CtlError>
    return USBD_FAIL;
 800aa74:	2303      	movs	r3, #3
 800aa76:	e08c      	b.n	800ab92 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	2b02      	cmp	r3, #2
 800aa82:	d002      	beq.n	800aa8a <USBD_SetConfig+0x3e>
 800aa84:	2b03      	cmp	r3, #3
 800aa86:	d029      	beq.n	800aadc <USBD_SetConfig+0x90>
 800aa88:	e075      	b.n	800ab76 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aa8a:	4b44      	ldr	r3, [pc, #272]	; (800ab9c <USBD_SetConfig+0x150>)
 800aa8c:	781b      	ldrb	r3, [r3, #0]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d020      	beq.n	800aad4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aa92:	4b42      	ldr	r3, [pc, #264]	; (800ab9c <USBD_SetConfig+0x150>)
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	461a      	mov	r2, r3
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aa9c:	4b3f      	ldr	r3, [pc, #252]	; (800ab9c <USBD_SetConfig+0x150>)
 800aa9e:	781b      	ldrb	r3, [r3, #0]
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7fe ffb7 	bl	8009a16 <USBD_SetClassConfig>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aaac:	7bfb      	ldrb	r3, [r7, #15]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d008      	beq.n	800aac4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aab2:	6839      	ldr	r1, [r7, #0]
 800aab4:	6878      	ldr	r0, [r7, #4]
 800aab6:	f000 f962 	bl	800ad7e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	2202      	movs	r2, #2
 800aabe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800aac2:	e065      	b.n	800ab90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fa25 	bl	800af14 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2203      	movs	r2, #3
 800aace:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800aad2:	e05d      	b.n	800ab90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f000 fa1d 	bl	800af14 <USBD_CtlSendStatus>
      break;
 800aada:	e059      	b.n	800ab90 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aadc:	4b2f      	ldr	r3, [pc, #188]	; (800ab9c <USBD_SetConfig+0x150>)
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d112      	bne.n	800ab0a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2202      	movs	r2, #2
 800aae8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800aaec:	4b2b      	ldr	r3, [pc, #172]	; (800ab9c <USBD_SetConfig+0x150>)
 800aaee:	781b      	ldrb	r3, [r3, #0]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aaf6:	4b29      	ldr	r3, [pc, #164]	; (800ab9c <USBD_SetConfig+0x150>)
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	4619      	mov	r1, r3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f7fe ffa6 	bl	8009a4e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fa06 	bl	800af14 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ab08:	e042      	b.n	800ab90 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ab0a:	4b24      	ldr	r3, [pc, #144]	; (800ab9c <USBD_SetConfig+0x150>)
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d02a      	beq.n	800ab6e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	685b      	ldr	r3, [r3, #4]
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	4619      	mov	r1, r3
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f7fe ff94 	bl	8009a4e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ab26:	4b1d      	ldr	r3, [pc, #116]	; (800ab9c <USBD_SetConfig+0x150>)
 800ab28:	781b      	ldrb	r3, [r3, #0]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ab30:	4b1a      	ldr	r3, [pc, #104]	; (800ab9c <USBD_SetConfig+0x150>)
 800ab32:	781b      	ldrb	r3, [r3, #0]
 800ab34:	4619      	mov	r1, r3
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f7fe ff6d 	bl	8009a16 <USBD_SetClassConfig>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ab40:	7bfb      	ldrb	r3, [r7, #15]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00f      	beq.n	800ab66 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ab46:	6839      	ldr	r1, [r7, #0]
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f000 f918 	bl	800ad7e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	b2db      	uxtb	r3, r3
 800ab54:	4619      	mov	r1, r3
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7fe ff79 	bl	8009a4e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2202      	movs	r2, #2
 800ab60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ab64:	e014      	b.n	800ab90 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ab66:	6878      	ldr	r0, [r7, #4]
 800ab68:	f000 f9d4 	bl	800af14 <USBD_CtlSendStatus>
      break;
 800ab6c:	e010      	b.n	800ab90 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f9d0 	bl	800af14 <USBD_CtlSendStatus>
      break;
 800ab74:	e00c      	b.n	800ab90 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ab76:	6839      	ldr	r1, [r7, #0]
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f000 f900 	bl	800ad7e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ab7e:	4b07      	ldr	r3, [pc, #28]	; (800ab9c <USBD_SetConfig+0x150>)
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	4619      	mov	r1, r3
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f7fe ff62 	bl	8009a4e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ab8a:	2303      	movs	r3, #3
 800ab8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab8e:	bf00      	nop
  }

  return ret;
 800ab90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	200005c8 	.word	0x200005c8

0800aba0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	88db      	ldrh	r3, [r3, #6]
 800abae:	2b01      	cmp	r3, #1
 800abb0:	d004      	beq.n	800abbc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800abb2:	6839      	ldr	r1, [r7, #0]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f8e2 	bl	800ad7e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800abba:	e023      	b.n	800ac04 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	2b02      	cmp	r3, #2
 800abc6:	dc02      	bgt.n	800abce <USBD_GetConfig+0x2e>
 800abc8:	2b00      	cmp	r3, #0
 800abca:	dc03      	bgt.n	800abd4 <USBD_GetConfig+0x34>
 800abcc:	e015      	b.n	800abfa <USBD_GetConfig+0x5a>
 800abce:	2b03      	cmp	r3, #3
 800abd0:	d00b      	beq.n	800abea <USBD_GetConfig+0x4a>
 800abd2:	e012      	b.n	800abfa <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	2200      	movs	r2, #0
 800abd8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	3308      	adds	r3, #8
 800abde:	2201      	movs	r2, #1
 800abe0:	4619      	mov	r1, r3
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 f93c 	bl	800ae60 <USBD_CtlSendData>
        break;
 800abe8:	e00c      	b.n	800ac04 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	3304      	adds	r3, #4
 800abee:	2201      	movs	r2, #1
 800abf0:	4619      	mov	r1, r3
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 f934 	bl	800ae60 <USBD_CtlSendData>
        break;
 800abf8:	e004      	b.n	800ac04 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800abfa:	6839      	ldr	r1, [r7, #0]
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 f8be 	bl	800ad7e <USBD_CtlError>
        break;
 800ac02:	bf00      	nop
}
 800ac04:	bf00      	nop
 800ac06:	3708      	adds	r7, #8
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b082      	sub	sp, #8
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac1c:	b2db      	uxtb	r3, r3
 800ac1e:	3b01      	subs	r3, #1
 800ac20:	2b02      	cmp	r3, #2
 800ac22:	d81e      	bhi.n	800ac62 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	88db      	ldrh	r3, [r3, #6]
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d004      	beq.n	800ac36 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ac2c:	6839      	ldr	r1, [r7, #0]
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f8a5 	bl	800ad7e <USBD_CtlError>
        break;
 800ac34:	e01a      	b.n	800ac6c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d005      	beq.n	800ac52 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	68db      	ldr	r3, [r3, #12]
 800ac4a:	f043 0202 	orr.w	r2, r3, #2
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	330c      	adds	r3, #12
 800ac56:	2202      	movs	r2, #2
 800ac58:	4619      	mov	r1, r3
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 f900 	bl	800ae60 <USBD_CtlSendData>
      break;
 800ac60:	e004      	b.n	800ac6c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ac62:	6839      	ldr	r1, [r7, #0]
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 f88a 	bl	800ad7e <USBD_CtlError>
      break;
 800ac6a:	bf00      	nop
  }
}
 800ac6c:	bf00      	nop
 800ac6e:	3708      	adds	r7, #8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ac7e:	683b      	ldr	r3, [r7, #0]
 800ac80:	885b      	ldrh	r3, [r3, #2]
 800ac82:	2b01      	cmp	r3, #1
 800ac84:	d107      	bne.n	800ac96 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f940 	bl	800af14 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ac94:	e013      	b.n	800acbe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	885b      	ldrh	r3, [r3, #2]
 800ac9a:	2b02      	cmp	r3, #2
 800ac9c:	d10b      	bne.n	800acb6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	889b      	ldrh	r3, [r3, #4]
 800aca2:	0a1b      	lsrs	r3, r3, #8
 800aca4:	b29b      	uxth	r3, r3
 800aca6:	b2da      	uxtb	r2, r3
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 f930 	bl	800af14 <USBD_CtlSendStatus>
}
 800acb4:	e003      	b.n	800acbe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800acb6:	6839      	ldr	r1, [r7, #0]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f000 f860 	bl	800ad7e <USBD_CtlError>
}
 800acbe:	bf00      	nop
 800acc0:	3708      	adds	r7, #8
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b082      	sub	sp, #8
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
 800acce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	3b01      	subs	r3, #1
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d80b      	bhi.n	800acf6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	885b      	ldrh	r3, [r3, #2]
 800ace2:	2b01      	cmp	r3, #1
 800ace4:	d10c      	bne.n	800ad00 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2200      	movs	r2, #0
 800acea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f910 	bl	800af14 <USBD_CtlSendStatus>
      }
      break;
 800acf4:	e004      	b.n	800ad00 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800acf6:	6839      	ldr	r1, [r7, #0]
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 f840 	bl	800ad7e <USBD_CtlError>
      break;
 800acfe:	e000      	b.n	800ad02 <USBD_ClrFeature+0x3c>
      break;
 800ad00:	bf00      	nop
  }
}
 800ad02:	bf00      	nop
 800ad04:	3708      	adds	r7, #8
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}

0800ad0a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ad0a:	b580      	push	{r7, lr}
 800ad0c:	b084      	sub	sp, #16
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	6078      	str	r0, [r7, #4]
 800ad12:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	781a      	ldrb	r2, [r3, #0]
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	3301      	adds	r3, #1
 800ad24:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	781a      	ldrb	r2, [r3, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	3301      	adds	r3, #1
 800ad32:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	f7ff fa17 	bl	800a168 <SWAPBYTE>
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	461a      	mov	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	3301      	adds	r3, #1
 800ad46:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ad4e:	68f8      	ldr	r0, [r7, #12]
 800ad50:	f7ff fa0a 	bl	800a168 <SWAPBYTE>
 800ad54:	4603      	mov	r3, r0
 800ad56:	461a      	mov	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	3301      	adds	r3, #1
 800ad66:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ad68:	68f8      	ldr	r0, [r7, #12]
 800ad6a:	f7ff f9fd 	bl	800a168 <SWAPBYTE>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	461a      	mov	r2, r3
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	80da      	strh	r2, [r3, #6]
}
 800ad76:	bf00      	nop
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b082      	sub	sp, #8
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ad88:	2180      	movs	r1, #128	; 0x80
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fd0a 	bl	800b7a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ad90:	2100      	movs	r1, #0
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 fd06 	bl	800b7a4 <USBD_LL_StallEP>
}
 800ad98:	bf00      	nop
 800ad9a:	3708      	adds	r7, #8
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}

0800ada0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	60f8      	str	r0, [r7, #12]
 800ada8:	60b9      	str	r1, [r7, #8]
 800adaa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800adac:	2300      	movs	r3, #0
 800adae:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d036      	beq.n	800ae24 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800adba:	6938      	ldr	r0, [r7, #16]
 800adbc:	f000 f836 	bl	800ae2c <USBD_GetLen>
 800adc0:	4603      	mov	r3, r0
 800adc2:	3301      	adds	r3, #1
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	005b      	lsls	r3, r3, #1
 800adc8:	b29a      	uxth	r2, r3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800adce:	7dfb      	ldrb	r3, [r7, #23]
 800add0:	68ba      	ldr	r2, [r7, #8]
 800add2:	4413      	add	r3, r2
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	7812      	ldrb	r2, [r2, #0]
 800add8:	701a      	strb	r2, [r3, #0]
  idx++;
 800adda:	7dfb      	ldrb	r3, [r7, #23]
 800addc:	3301      	adds	r3, #1
 800adde:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ade0:	7dfb      	ldrb	r3, [r7, #23]
 800ade2:	68ba      	ldr	r2, [r7, #8]
 800ade4:	4413      	add	r3, r2
 800ade6:	2203      	movs	r2, #3
 800ade8:	701a      	strb	r2, [r3, #0]
  idx++;
 800adea:	7dfb      	ldrb	r3, [r7, #23]
 800adec:	3301      	adds	r3, #1
 800adee:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800adf0:	e013      	b.n	800ae1a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800adf2:	7dfb      	ldrb	r3, [r7, #23]
 800adf4:	68ba      	ldr	r2, [r7, #8]
 800adf6:	4413      	add	r3, r2
 800adf8:	693a      	ldr	r2, [r7, #16]
 800adfa:	7812      	ldrb	r2, [r2, #0]
 800adfc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800adfe:	693b      	ldr	r3, [r7, #16]
 800ae00:	3301      	adds	r3, #1
 800ae02:	613b      	str	r3, [r7, #16]
    idx++;
 800ae04:	7dfb      	ldrb	r3, [r7, #23]
 800ae06:	3301      	adds	r3, #1
 800ae08:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ae0a:	7dfb      	ldrb	r3, [r7, #23]
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	4413      	add	r3, r2
 800ae10:	2200      	movs	r2, #0
 800ae12:	701a      	strb	r2, [r3, #0]
    idx++;
 800ae14:	7dfb      	ldrb	r3, [r7, #23]
 800ae16:	3301      	adds	r3, #1
 800ae18:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1e7      	bne.n	800adf2 <USBD_GetString+0x52>
 800ae22:	e000      	b.n	800ae26 <USBD_GetString+0x86>
    return;
 800ae24:	bf00      	nop
  }
}
 800ae26:	3718      	adds	r7, #24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ae34:	2300      	movs	r3, #0
 800ae36:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ae3c:	e005      	b.n	800ae4a <USBD_GetLen+0x1e>
  {
    len++;
 800ae3e:	7bfb      	ldrb	r3, [r7, #15]
 800ae40:	3301      	adds	r3, #1
 800ae42:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	3301      	adds	r3, #1
 800ae48:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d1f5      	bne.n	800ae3e <USBD_GetLen+0x12>
  }

  return len;
 800ae52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	3714      	adds	r7, #20
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2202      	movs	r2, #2
 800ae70:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	687a      	ldr	r2, [r7, #4]
 800ae78:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	68ba      	ldr	r2, [r7, #8]
 800ae84:	2100      	movs	r1, #0
 800ae86:	68f8      	ldr	r0, [r7, #12]
 800ae88:	f000 fd5a 	bl	800b940 <USBD_LL_Transmit>

  return USBD_OK;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3710      	adds	r7, #16
 800ae92:	46bd      	mov	sp, r7
 800ae94:	bd80      	pop	{r7, pc}

0800ae96 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b084      	sub	sp, #16
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	60f8      	str	r0, [r7, #12]
 800ae9e:	60b9      	str	r1, [r7, #8]
 800aea0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	2100      	movs	r1, #0
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f000 fd49 	bl	800b940 <USBD_LL_Transmit>

  return USBD_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3710      	adds	r7, #16
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}

0800aeb8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	60b9      	str	r1, [r7, #8]
 800aec2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2203      	movs	r2, #3
 800aec8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	687a      	ldr	r2, [r7, #4]
 800aed8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	68ba      	ldr	r2, [r7, #8]
 800aee0:	2100      	movs	r1, #0
 800aee2:	68f8      	ldr	r0, [r7, #12]
 800aee4:	f000 fd64 	bl	800b9b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3710      	adds	r7, #16
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b084      	sub	sp, #16
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	60f8      	str	r0, [r7, #12]
 800aefa:	60b9      	str	r1, [r7, #8]
 800aefc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	68ba      	ldr	r2, [r7, #8]
 800af02:	2100      	movs	r1, #0
 800af04:	68f8      	ldr	r0, [r7, #12]
 800af06:	f000 fd53 	bl	800b9b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af0a:	2300      	movs	r3, #0
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3710      	adds	r7, #16
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b082      	sub	sp, #8
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2204      	movs	r2, #4
 800af20:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800af24:	2300      	movs	r3, #0
 800af26:	2200      	movs	r2, #0
 800af28:	2100      	movs	r1, #0
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 fd08 	bl	800b940 <USBD_LL_Transmit>

  return USBD_OK;
 800af30:	2300      	movs	r3, #0
}
 800af32:	4618      	mov	r0, r3
 800af34:	3708      	adds	r7, #8
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b082      	sub	sp, #8
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2205      	movs	r2, #5
 800af46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800af4a:	2300      	movs	r3, #0
 800af4c:	2200      	movs	r2, #0
 800af4e:	2100      	movs	r1, #0
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fd2d 	bl	800b9b0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800af56:	2300      	movs	r3, #0
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3708      	adds	r7, #8
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}

0800af60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800af64:	2200      	movs	r2, #0
 800af66:	4912      	ldr	r1, [pc, #72]	; (800afb0 <MX_USB_DEVICE_Init+0x50>)
 800af68:	4812      	ldr	r0, [pc, #72]	; (800afb4 <MX_USB_DEVICE_Init+0x54>)
 800af6a:	f7fe fcd7 	bl	800991c <USBD_Init>
 800af6e:	4603      	mov	r3, r0
 800af70:	2b00      	cmp	r3, #0
 800af72:	d001      	beq.n	800af78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800af74:	f7f6 ff96 	bl	8001ea4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800af78:	490f      	ldr	r1, [pc, #60]	; (800afb8 <MX_USB_DEVICE_Init+0x58>)
 800af7a:	480e      	ldr	r0, [pc, #56]	; (800afb4 <MX_USB_DEVICE_Init+0x54>)
 800af7c:	f7fe fcfe 	bl	800997c <USBD_RegisterClass>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800af86:	f7f6 ff8d 	bl	8001ea4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800af8a:	490c      	ldr	r1, [pc, #48]	; (800afbc <MX_USB_DEVICE_Init+0x5c>)
 800af8c:	4809      	ldr	r0, [pc, #36]	; (800afb4 <MX_USB_DEVICE_Init+0x54>)
 800af8e:	f7fe fcab 	bl	80098e8 <USBD_CUSTOM_HID_RegisterInterface>
 800af92:	4603      	mov	r3, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	d001      	beq.n	800af9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800af98:	f7f6 ff84 	bl	8001ea4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800af9c:	4805      	ldr	r0, [pc, #20]	; (800afb4 <MX_USB_DEVICE_Init+0x54>)
 800af9e:	f7fe fd23 	bl	80099e8 <USBD_Start>
 800afa2:	4603      	mov	r3, r0
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d001      	beq.n	800afac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800afa8:	f7f6 ff7c 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800afac:	bf00      	nop
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	200000b8 	.word	0x200000b8
 800afb4:	200005cc 	.word	0x200005cc
 800afb8:	2000000c 	.word	0x2000000c
 800afbc:	200000a8 	.word	0x200000a8

0800afc0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800afc0:	b480      	push	{r7}
 800afc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800afc4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800afd0:	b480      	push	{r7}
 800afd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800afd4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr

0800afe0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800afe0:	b480      	push	{r7}
 800afe2:	b083      	sub	sp, #12
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	4603      	mov	r3, r0
 800afe8:	460a      	mov	r2, r1
 800afea:	71fb      	strb	r3, [r7, #7]
 800afec:	4613      	mov	r3, r2
 800afee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);
miflag=1;
 800aff0:	4b04      	ldr	r3, [pc, #16]	; (800b004 <CUSTOM_HID_OutEvent_FS+0x24>)
 800aff2:	2201      	movs	r2, #1
 800aff4:	701a      	strb	r2, [r3, #0]
  /* Start next USB packet transfer once data processing is completed */
//  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);

  return (USBD_OK);
 800aff6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800aff8:	4618      	mov	r0, r3
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr
 800b004:	200008a8 	.word	0x200008a8

0800b008 <USBD_CUSTOM_HID_SendReport_FS>:
  * @param  len: The report length
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */

 int8_t USBD_CUSTOM_HID_SendReport_FS(uint8_t *report, uint16_t len)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b082      	sub	sp, #8
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	6078      	str	r0, [r7, #4]
 800b010:	460b      	mov	r3, r1
 800b012:	807b      	strh	r3, [r7, #2]
  return USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, report, len);
 800b014:	887b      	ldrh	r3, [r7, #2]
 800b016:	461a      	mov	r2, r3
 800b018:	6879      	ldr	r1, [r7, #4]
 800b01a:	4804      	ldr	r0, [pc, #16]	; (800b02c <USBD_CUSTOM_HID_SendReport_FS+0x24>)
 800b01c:	f7fe fb1c 	bl	8009658 <USBD_CUSTOM_HID_SendReport>
 800b020:	4603      	mov	r3, r0
 800b022:	b25b      	sxtb	r3, r3
}
 800b024:	4618      	mov	r0, r3
 800b026:	3708      	adds	r7, #8
 800b028:	46bd      	mov	sp, r7
 800b02a:	bd80      	pop	{r7, pc}
 800b02c:	200005cc 	.word	0x200005cc

0800b030 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b030:	b480      	push	{r7}
 800b032:	b083      	sub	sp, #12
 800b034:	af00      	add	r7, sp, #0
 800b036:	4603      	mov	r3, r0
 800b038:	6039      	str	r1, [r7, #0]
 800b03a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	2212      	movs	r2, #18
 800b040:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b042:	4b03      	ldr	r3, [pc, #12]	; (800b050 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b044:	4618      	mov	r0, r3
 800b046:	370c      	adds	r7, #12
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr
 800b050:	200000d8 	.word	0x200000d8

0800b054 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b054:	b480      	push	{r7}
 800b056:	b083      	sub	sp, #12
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	6039      	str	r1, [r7, #0]
 800b05e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b060:	683b      	ldr	r3, [r7, #0]
 800b062:	2204      	movs	r2, #4
 800b064:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b066:	4b03      	ldr	r3, [pc, #12]	; (800b074 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b068:	4618      	mov	r0, r3
 800b06a:	370c      	adds	r7, #12
 800b06c:	46bd      	mov	sp, r7
 800b06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b072:	4770      	bx	lr
 800b074:	200000f8 	.word	0x200000f8

0800b078 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	4603      	mov	r3, r0
 800b080:	6039      	str	r1, [r7, #0]
 800b082:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b084:	79fb      	ldrb	r3, [r7, #7]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d105      	bne.n	800b096 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b08a:	683a      	ldr	r2, [r7, #0]
 800b08c:	4907      	ldr	r1, [pc, #28]	; (800b0ac <USBD_FS_ProductStrDescriptor+0x34>)
 800b08e:	4808      	ldr	r0, [pc, #32]	; (800b0b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b090:	f7ff fe86 	bl	800ada0 <USBD_GetString>
 800b094:	e004      	b.n	800b0a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	4904      	ldr	r1, [pc, #16]	; (800b0ac <USBD_FS_ProductStrDescriptor+0x34>)
 800b09a:	4805      	ldr	r0, [pc, #20]	; (800b0b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800b09c:	f7ff fe80 	bl	800ada0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0a0:	4b02      	ldr	r3, [pc, #8]	; (800b0ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	200008ac 	.word	0x200008ac
 800b0b0:	0800e470 	.word	0x0800e470

0800b0b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b082      	sub	sp, #8
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	6039      	str	r1, [r7, #0]
 800b0be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b0c0:	683a      	ldr	r2, [r7, #0]
 800b0c2:	4904      	ldr	r1, [pc, #16]	; (800b0d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b0c4:	4804      	ldr	r0, [pc, #16]	; (800b0d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b0c6:	f7ff fe6b 	bl	800ada0 <USBD_GetString>
  return USBD_StrDesc;
 800b0ca:	4b02      	ldr	r3, [pc, #8]	; (800b0d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3708      	adds	r7, #8
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	200008ac 	.word	0x200008ac
 800b0d8:	0800e490 	.word	0x0800e490

0800b0dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	6039      	str	r1, [r7, #0]
 800b0e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	221a      	movs	r2, #26
 800b0ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b0ee:	f000 f855 	bl	800b19c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b0f2:	4b02      	ldr	r3, [pc, #8]	; (800b0fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	200000fc 	.word	0x200000fc

0800b100 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b100:	b580      	push	{r7, lr}
 800b102:	b082      	sub	sp, #8
 800b104:	af00      	add	r7, sp, #0
 800b106:	4603      	mov	r3, r0
 800b108:	6039      	str	r1, [r7, #0]
 800b10a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b10c:	79fb      	ldrb	r3, [r7, #7]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d105      	bne.n	800b11e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b112:	683a      	ldr	r2, [r7, #0]
 800b114:	4907      	ldr	r1, [pc, #28]	; (800b134 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b116:	4808      	ldr	r0, [pc, #32]	; (800b138 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b118:	f7ff fe42 	bl	800ada0 <USBD_GetString>
 800b11c:	e004      	b.n	800b128 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b11e:	683a      	ldr	r2, [r7, #0]
 800b120:	4904      	ldr	r1, [pc, #16]	; (800b134 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b122:	4805      	ldr	r0, [pc, #20]	; (800b138 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b124:	f7ff fe3c 	bl	800ada0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b128:	4b02      	ldr	r3, [pc, #8]	; (800b134 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3708      	adds	r7, #8
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop
 800b134:	200008ac 	.word	0x200008ac
 800b138:	0800e4a4 	.word	0x0800e4a4

0800b13c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	4603      	mov	r3, r0
 800b144:	6039      	str	r1, [r7, #0]
 800b146:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b148:	79fb      	ldrb	r3, [r7, #7]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d105      	bne.n	800b15a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b14e:	683a      	ldr	r2, [r7, #0]
 800b150:	4907      	ldr	r1, [pc, #28]	; (800b170 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b152:	4808      	ldr	r0, [pc, #32]	; (800b174 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b154:	f7ff fe24 	bl	800ada0 <USBD_GetString>
 800b158:	e004      	b.n	800b164 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	4904      	ldr	r1, [pc, #16]	; (800b170 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b15e:	4805      	ldr	r0, [pc, #20]	; (800b174 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b160:	f7ff fe1e 	bl	800ada0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b164:	4b02      	ldr	r3, [pc, #8]	; (800b170 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b166:	4618      	mov	r0, r3
 800b168:	3708      	adds	r7, #8
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}
 800b16e:	bf00      	nop
 800b170:	200008ac 	.word	0x200008ac
 800b174:	0800e4b8 	.word	0x0800e4b8

0800b178 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b178:	b480      	push	{r7}
 800b17a:	b083      	sub	sp, #12
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	4603      	mov	r3, r0
 800b180:	6039      	str	r1, [r7, #0]
 800b182:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	220c      	movs	r2, #12
 800b188:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b18a:	4b03      	ldr	r3, [pc, #12]	; (800b198 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	370c      	adds	r7, #12
 800b190:	46bd      	mov	sp, r7
 800b192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b196:	4770      	bx	lr
 800b198:	200000ec 	.word	0x200000ec

0800b19c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b084      	sub	sp, #16
 800b1a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b1a2:	4b0f      	ldr	r3, [pc, #60]	; (800b1e0 <Get_SerialNum+0x44>)
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b1a8:	4b0e      	ldr	r3, [pc, #56]	; (800b1e4 <Get_SerialNum+0x48>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b1ae:	4b0e      	ldr	r3, [pc, #56]	; (800b1e8 <Get_SerialNum+0x4c>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d009      	beq.n	800b1d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b1c2:	2208      	movs	r2, #8
 800b1c4:	4909      	ldr	r1, [pc, #36]	; (800b1ec <Get_SerialNum+0x50>)
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f000 f814 	bl	800b1f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b1cc:	2204      	movs	r2, #4
 800b1ce:	4908      	ldr	r1, [pc, #32]	; (800b1f0 <Get_SerialNum+0x54>)
 800b1d0:	68b8      	ldr	r0, [r7, #8]
 800b1d2:	f000 f80f 	bl	800b1f4 <IntToUnicode>
  }
}
 800b1d6:	bf00      	nop
 800b1d8:	3710      	adds	r7, #16
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
 800b1de:	bf00      	nop
 800b1e0:	1fff7590 	.word	0x1fff7590
 800b1e4:	1fff7594 	.word	0x1fff7594
 800b1e8:	1fff7598 	.word	0x1fff7598
 800b1ec:	200000fe 	.word	0x200000fe
 800b1f0:	2000010e 	.word	0x2000010e

0800b1f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b087      	sub	sp, #28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	4613      	mov	r3, r2
 800b200:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b206:	2300      	movs	r3, #0
 800b208:	75fb      	strb	r3, [r7, #23]
 800b20a:	e027      	b.n	800b25c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	0f1b      	lsrs	r3, r3, #28
 800b210:	2b09      	cmp	r3, #9
 800b212:	d80b      	bhi.n	800b22c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	0f1b      	lsrs	r3, r3, #28
 800b218:	b2da      	uxtb	r2, r3
 800b21a:	7dfb      	ldrb	r3, [r7, #23]
 800b21c:	005b      	lsls	r3, r3, #1
 800b21e:	4619      	mov	r1, r3
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	440b      	add	r3, r1
 800b224:	3230      	adds	r2, #48	; 0x30
 800b226:	b2d2      	uxtb	r2, r2
 800b228:	701a      	strb	r2, [r3, #0]
 800b22a:	e00a      	b.n	800b242 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	0f1b      	lsrs	r3, r3, #28
 800b230:	b2da      	uxtb	r2, r3
 800b232:	7dfb      	ldrb	r3, [r7, #23]
 800b234:	005b      	lsls	r3, r3, #1
 800b236:	4619      	mov	r1, r3
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	440b      	add	r3, r1
 800b23c:	3237      	adds	r2, #55	; 0x37
 800b23e:	b2d2      	uxtb	r2, r2
 800b240:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	011b      	lsls	r3, r3, #4
 800b246:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b248:	7dfb      	ldrb	r3, [r7, #23]
 800b24a:	005b      	lsls	r3, r3, #1
 800b24c:	3301      	adds	r3, #1
 800b24e:	68ba      	ldr	r2, [r7, #8]
 800b250:	4413      	add	r3, r2
 800b252:	2200      	movs	r2, #0
 800b254:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b256:	7dfb      	ldrb	r3, [r7, #23]
 800b258:	3301      	adds	r3, #1
 800b25a:	75fb      	strb	r3, [r7, #23]
 800b25c:	7dfa      	ldrb	r2, [r7, #23]
 800b25e:	79fb      	ldrb	r3, [r7, #7]
 800b260:	429a      	cmp	r2, r3
 800b262:	d3d3      	bcc.n	800b20c <IntToUnicode+0x18>
  }
}
 800b264:	bf00      	nop
 800b266:	bf00      	nop
 800b268:	371c      	adds	r7, #28
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
	...

0800b274 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b0ac      	sub	sp, #176	; 0xb0
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b27c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b280:	2200      	movs	r2, #0
 800b282:	601a      	str	r2, [r3, #0]
 800b284:	605a      	str	r2, [r3, #4]
 800b286:	609a      	str	r2, [r3, #8]
 800b288:	60da      	str	r2, [r3, #12]
 800b28a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b28c:	f107 0314 	add.w	r3, r7, #20
 800b290:	2288      	movs	r2, #136	; 0x88
 800b292:	2100      	movs	r1, #0
 800b294:	4618      	mov	r0, r3
 800b296:	f001 f988 	bl	800c5aa <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2a2:	f040 8085 	bne.w	800b3b0 <HAL_PCD_MspInit+0x13c>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b2a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800b2ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b2b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800b2b4:	2301      	movs	r3, #1
 800b2b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800b2bc:	2318      	movs	r3, #24
 800b2be:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800b2c0:	2307      	movs	r3, #7
 800b2c2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800b2c4:	2302      	movs	r3, #2
 800b2c6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800b2c8:	2302      	movs	r3, #2
 800b2ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800b2cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b2d0:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b2d2:	f107 0314 	add.w	r3, r7, #20
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fa fd30 	bl	8005d3c <HAL_RCCEx_PeriphCLKConfig>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d001      	beq.n	800b2e6 <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 800b2e2:	f7f6 fddf 	bl	8001ea4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b2e6:	4b34      	ldr	r3, [pc, #208]	; (800b3b8 <HAL_PCD_MspInit+0x144>)
 800b2e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2ea:	4a33      	ldr	r2, [pc, #204]	; (800b3b8 <HAL_PCD_MspInit+0x144>)
 800b2ec:	f043 0301 	orr.w	r3, r3, #1
 800b2f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b2f2:	4b31      	ldr	r3, [pc, #196]	; (800b3b8 <HAL_PCD_MspInit+0x144>)
 800b2f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2f6:	f003 0301 	and.w	r3, r3, #1
 800b2fa:	613b      	str	r3, [r7, #16]
 800b2fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800b2fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b302:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b306:	2300      	movs	r3, #0
 800b308:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b30c:	2300      	movs	r3, #0
 800b30e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b312:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b316:	4619      	mov	r1, r3
 800b318:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b31c:	f7f7 fc42 	bl	8002ba4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800b320:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b324:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b328:	2302      	movs	r3, #2
 800b32a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b32e:	2300      	movs	r3, #0
 800b330:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b334:	2303      	movs	r3, #3
 800b336:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b33a:	230a      	movs	r3, #10
 800b33c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b340:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b344:	4619      	mov	r1, r3
 800b346:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b34a:	f7f7 fc2b 	bl	8002ba4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b34e:	4b1a      	ldr	r3, [pc, #104]	; (800b3b8 <HAL_PCD_MspInit+0x144>)
 800b350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b352:	4a19      	ldr	r2, [pc, #100]	; (800b3b8 <HAL_PCD_MspInit+0x144>)
 800b354:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b35a:	4b17      	ldr	r3, [pc, #92]	; (800b3b8 <HAL_PCD_MspInit+0x144>)
 800b35c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b35e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b362:	60fb      	str	r3, [r7, #12]
 800b364:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b366:	4b14      	ldr	r3, [pc, #80]	; (800b3b8 <HAL_PCD_MspInit+0x144>)
 800b368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b36a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d114      	bne.n	800b39c <HAL_PCD_MspInit+0x128>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b372:	4b11      	ldr	r3, [pc, #68]	; (800b3b8 <HAL_PCD_MspInit+0x144>)
 800b374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b376:	4a10      	ldr	r2, [pc, #64]	; (800b3b8 <HAL_PCD_MspInit+0x144>)
 800b378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b37c:	6593      	str	r3, [r2, #88]	; 0x58
 800b37e:	4b0e      	ldr	r3, [pc, #56]	; (800b3b8 <HAL_PCD_MspInit+0x144>)
 800b380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b386:	60bb      	str	r3, [r7, #8]
 800b388:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 800b38a:	f7f9 fe0b 	bl	8004fa4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b38e:	4b0a      	ldr	r3, [pc, #40]	; (800b3b8 <HAL_PCD_MspInit+0x144>)
 800b390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b392:	4a09      	ldr	r2, [pc, #36]	; (800b3b8 <HAL_PCD_MspInit+0x144>)
 800b394:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b398:	6593      	str	r3, [r2, #88]	; 0x58
 800b39a:	e001      	b.n	800b3a0 <HAL_PCD_MspInit+0x12c>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800b39c:	f7f9 fe02 	bl	8004fa4 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	2043      	movs	r0, #67	; 0x43
 800b3a6:	f7f7 faba 	bl	800291e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b3aa:	2043      	movs	r0, #67	; 0x43
 800b3ac:	f7f7 fad3 	bl	8002956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b3b0:	bf00      	nop
 800b3b2:	37b0      	adds	r7, #176	; 0xb0
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	40021000 	.word	0x40021000

0800b3bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b3d0:	4619      	mov	r1, r3
 800b3d2:	4610      	mov	r0, r2
 800b3d4:	f7fe fb55 	bl	8009a82 <USBD_LL_SetupStage>
}
 800b3d8:	bf00      	nop
 800b3da:	3708      	adds	r7, #8
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}

0800b3e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b3f2:	78fa      	ldrb	r2, [r7, #3]
 800b3f4:	6879      	ldr	r1, [r7, #4]
 800b3f6:	4613      	mov	r3, r2
 800b3f8:	00db      	lsls	r3, r3, #3
 800b3fa:	4413      	add	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	440b      	add	r3, r1
 800b400:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b404:	681a      	ldr	r2, [r3, #0]
 800b406:	78fb      	ldrb	r3, [r7, #3]
 800b408:	4619      	mov	r1, r3
 800b40a:	f7fe fb8f 	bl	8009b2c <USBD_LL_DataOutStage>
}
 800b40e:	bf00      	nop
 800b410:	3708      	adds	r7, #8
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b416:	b580      	push	{r7, lr}
 800b418:	b082      	sub	sp, #8
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
 800b41e:	460b      	mov	r3, r1
 800b420:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b428:	78fa      	ldrb	r2, [r7, #3]
 800b42a:	6879      	ldr	r1, [r7, #4]
 800b42c:	4613      	mov	r3, r2
 800b42e:	00db      	lsls	r3, r3, #3
 800b430:	4413      	add	r3, r2
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	440b      	add	r3, r1
 800b436:	3348      	adds	r3, #72	; 0x48
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	78fb      	ldrb	r3, [r7, #3]
 800b43c:	4619      	mov	r1, r3
 800b43e:	f7fe fc28 	bl	8009c92 <USBD_LL_DataInStage>
}
 800b442:	bf00      	nop
 800b444:	3708      	adds	r7, #8
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b082      	sub	sp, #8
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b458:	4618      	mov	r0, r3
 800b45a:	f7fe fd62 	bl	8009f22 <USBD_LL_SOF>
}
 800b45e:	bf00      	nop
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}

0800b466 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b466:	b580      	push	{r7, lr}
 800b468:	b084      	sub	sp, #16
 800b46a:	af00      	add	r7, sp, #0
 800b46c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b46e:	2301      	movs	r3, #1
 800b470:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	2b02      	cmp	r3, #2
 800b478:	d001      	beq.n	800b47e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b47a:	f7f6 fd13 	bl	8001ea4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b484:	7bfa      	ldrb	r2, [r7, #15]
 800b486:	4611      	mov	r1, r2
 800b488:	4618      	mov	r0, r3
 800b48a:	f7fe fd06 	bl	8009e9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b494:	4618      	mov	r0, r3
 800b496:	f7fe fcae 	bl	8009df6 <USBD_LL_Reset>
}
 800b49a:	bf00      	nop
 800b49c:	3710      	adds	r7, #16
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
	...

0800b4a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b082      	sub	sp, #8
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	6812      	ldr	r2, [r2, #0]
 800b4ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b4be:	f043 0301 	orr.w	r3, r3, #1
 800b4c2:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7fe fcf5 	bl	8009eba <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6a1b      	ldr	r3, [r3, #32]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d005      	beq.n	800b4e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b4d8:	4b04      	ldr	r3, [pc, #16]	; (800b4ec <HAL_PCD_SuspendCallback+0x48>)
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	4a03      	ldr	r2, [pc, #12]	; (800b4ec <HAL_PCD_SuspendCallback+0x48>)
 800b4de:	f043 0306 	orr.w	r3, r3, #6
 800b4e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b4e4:	bf00      	nop
 800b4e6:	3708      	adds	r7, #8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}
 800b4ec:	e000ed00 	.word	0xe000ed00

0800b4f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	6812      	ldr	r2, [r2, #0]
 800b506:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b50a:	f023 0301 	bic.w	r3, r3, #1
 800b50e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6a1b      	ldr	r3, [r3, #32]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d007      	beq.n	800b528 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b518:	4b08      	ldr	r3, [pc, #32]	; (800b53c <HAL_PCD_ResumeCallback+0x4c>)
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	4a07      	ldr	r2, [pc, #28]	; (800b53c <HAL_PCD_ResumeCallback+0x4c>)
 800b51e:	f023 0306 	bic.w	r3, r3, #6
 800b522:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b524:	f000 fae2 	bl	800baec <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b52e:	4618      	mov	r0, r3
 800b530:	f7fe fcdf 	bl	8009ef2 <USBD_LL_Resume>
}
 800b534:	bf00      	nop
 800b536:	3708      	adds	r7, #8
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	e000ed00 	.word	0xe000ed00

0800b540 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	460b      	mov	r3, r1
 800b54a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b552:	78fa      	ldrb	r2, [r7, #3]
 800b554:	4611      	mov	r1, r2
 800b556:	4618      	mov	r0, r3
 800b558:	f7fe fd35 	bl	8009fc6 <USBD_LL_IsoOUTIncomplete>
}
 800b55c:	bf00      	nop
 800b55e:	3708      	adds	r7, #8
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b082      	sub	sp, #8
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	460b      	mov	r3, r1
 800b56e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b576:	78fa      	ldrb	r2, [r7, #3]
 800b578:	4611      	mov	r1, r2
 800b57a:	4618      	mov	r0, r3
 800b57c:	f7fe fcf1 	bl	8009f62 <USBD_LL_IsoINIncomplete>
}
 800b580:	bf00      	nop
 800b582:	3708      	adds	r7, #8
 800b584:	46bd      	mov	sp, r7
 800b586:	bd80      	pop	{r7, pc}

0800b588 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b596:	4618      	mov	r0, r3
 800b598:	f7fe fd47 	bl	800a02a <USBD_LL_DevConnected>
}
 800b59c:	bf00      	nop
 800b59e:	3708      	adds	r7, #8
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7fe fd44 	bl	800a040 <USBD_LL_DevDisconnected>
}
 800b5b8:	bf00      	nop
 800b5ba:	3708      	adds	r7, #8
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	781b      	ldrb	r3, [r3, #0]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d13c      	bne.n	800b64a <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b5d0:	4a20      	ldr	r2, [pc, #128]	; (800b654 <USBD_LL_Init+0x94>)
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	4a1e      	ldr	r2, [pc, #120]	; (800b654 <USBD_LL_Init+0x94>)
 800b5dc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b5e0:	4b1c      	ldr	r3, [pc, #112]	; (800b654 <USBD_LL_Init+0x94>)
 800b5e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b5e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b5e8:	4b1a      	ldr	r3, [pc, #104]	; (800b654 <USBD_LL_Init+0x94>)
 800b5ea:	2206      	movs	r2, #6
 800b5ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b5ee:	4b19      	ldr	r3, [pc, #100]	; (800b654 <USBD_LL_Init+0x94>)
 800b5f0:	2202      	movs	r2, #2
 800b5f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b5f4:	4b17      	ldr	r3, [pc, #92]	; (800b654 <USBD_LL_Init+0x94>)
 800b5f6:	2202      	movs	r2, #2
 800b5f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b5fa:	4b16      	ldr	r3, [pc, #88]	; (800b654 <USBD_LL_Init+0x94>)
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b600:	4b14      	ldr	r3, [pc, #80]	; (800b654 <USBD_LL_Init+0x94>)
 800b602:	2200      	movs	r2, #0
 800b604:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b606:	4b13      	ldr	r3, [pc, #76]	; (800b654 <USBD_LL_Init+0x94>)
 800b608:	2200      	movs	r2, #0
 800b60a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b60c:	4b11      	ldr	r3, [pc, #68]	; (800b654 <USBD_LL_Init+0x94>)
 800b60e:	2200      	movs	r2, #0
 800b610:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b612:	4b10      	ldr	r3, [pc, #64]	; (800b654 <USBD_LL_Init+0x94>)
 800b614:	2200      	movs	r2, #0
 800b616:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b618:	4b0e      	ldr	r3, [pc, #56]	; (800b654 <USBD_LL_Init+0x94>)
 800b61a:	2200      	movs	r2, #0
 800b61c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b61e:	480d      	ldr	r0, [pc, #52]	; (800b654 <USBD_LL_Init+0x94>)
 800b620:	f7f8 fabd 	bl	8003b9e <HAL_PCD_Init>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d001      	beq.n	800b62e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b62a:	f7f6 fc3b 	bl	8001ea4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b62e:	2180      	movs	r1, #128	; 0x80
 800b630:	4808      	ldr	r0, [pc, #32]	; (800b654 <USBD_LL_Init+0x94>)
 800b632:	f7f9 fc0e 	bl	8004e52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b636:	2240      	movs	r2, #64	; 0x40
 800b638:	2100      	movs	r1, #0
 800b63a:	4806      	ldr	r0, [pc, #24]	; (800b654 <USBD_LL_Init+0x94>)
 800b63c:	f7f9 fbc2 	bl	8004dc4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b640:	2280      	movs	r2, #128	; 0x80
 800b642:	2101      	movs	r1, #1
 800b644:	4803      	ldr	r0, [pc, #12]	; (800b654 <USBD_LL_Init+0x94>)
 800b646:	f7f9 fbbd 	bl	8004dc4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	20000aac 	.word	0x20000aac

0800b658 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b660:	2300      	movs	r3, #0
 800b662:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b664:	2300      	movs	r3, #0
 800b666:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b66e:	4618      	mov	r0, r3
 800b670:	f7f8 fbb9 	bl	8003de6 <HAL_PCD_Start>
 800b674:	4603      	mov	r3, r0
 800b676:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b678:	7bbb      	ldrb	r3, [r7, #14]
 800b67a:	2b03      	cmp	r3, #3
 800b67c:	d816      	bhi.n	800b6ac <USBD_LL_Start+0x54>
 800b67e:	a201      	add	r2, pc, #4	; (adr r2, 800b684 <USBD_LL_Start+0x2c>)
 800b680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b684:	0800b695 	.word	0x0800b695
 800b688:	0800b69b 	.word	0x0800b69b
 800b68c:	0800b6a1 	.word	0x0800b6a1
 800b690:	0800b6a7 	.word	0x0800b6a7
    case HAL_OK :
      usb_status = USBD_OK;
 800b694:	2300      	movs	r3, #0
 800b696:	73fb      	strb	r3, [r7, #15]
    break;
 800b698:	e00b      	b.n	800b6b2 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b69a:	2303      	movs	r3, #3
 800b69c:	73fb      	strb	r3, [r7, #15]
    break;
 800b69e:	e008      	b.n	800b6b2 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b6a0:	2301      	movs	r3, #1
 800b6a2:	73fb      	strb	r3, [r7, #15]
    break;
 800b6a4:	e005      	b.n	800b6b2 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b6a6:	2303      	movs	r3, #3
 800b6a8:	73fb      	strb	r3, [r7, #15]
    break;
 800b6aa:	e002      	b.n	800b6b2 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	73fb      	strb	r3, [r7, #15]
    break;
 800b6b0:	bf00      	nop
  }
  return usb_status;
 800b6b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3710      	adds	r7, #16
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	4608      	mov	r0, r1
 800b6c6:	4611      	mov	r1, r2
 800b6c8:	461a      	mov	r2, r3
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	70fb      	strb	r3, [r7, #3]
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	70bb      	strb	r3, [r7, #2]
 800b6d2:	4613      	mov	r3, r2
 800b6d4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b6e4:	78bb      	ldrb	r3, [r7, #2]
 800b6e6:	883a      	ldrh	r2, [r7, #0]
 800b6e8:	78f9      	ldrb	r1, [r7, #3]
 800b6ea:	f7f9 f863 	bl	80047b4 <HAL_PCD_EP_Open>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b6f2:	7bbb      	ldrb	r3, [r7, #14]
 800b6f4:	2b03      	cmp	r3, #3
 800b6f6:	d817      	bhi.n	800b728 <USBD_LL_OpenEP+0x6c>
 800b6f8:	a201      	add	r2, pc, #4	; (adr r2, 800b700 <USBD_LL_OpenEP+0x44>)
 800b6fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6fe:	bf00      	nop
 800b700:	0800b711 	.word	0x0800b711
 800b704:	0800b717 	.word	0x0800b717
 800b708:	0800b71d 	.word	0x0800b71d
 800b70c:	0800b723 	.word	0x0800b723
    case HAL_OK :
      usb_status = USBD_OK;
 800b710:	2300      	movs	r3, #0
 800b712:	73fb      	strb	r3, [r7, #15]
    break;
 800b714:	e00b      	b.n	800b72e <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b716:	2303      	movs	r3, #3
 800b718:	73fb      	strb	r3, [r7, #15]
    break;
 800b71a:	e008      	b.n	800b72e <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b71c:	2301      	movs	r3, #1
 800b71e:	73fb      	strb	r3, [r7, #15]
    break;
 800b720:	e005      	b.n	800b72e <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b722:	2303      	movs	r3, #3
 800b724:	73fb      	strb	r3, [r7, #15]
    break;
 800b726:	e002      	b.n	800b72e <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b728:	2303      	movs	r3, #3
 800b72a:	73fb      	strb	r3, [r7, #15]
    break;
 800b72c:	bf00      	nop
  }
  return usb_status;
 800b72e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b730:	4618      	mov	r0, r3
 800b732:	3710      	adds	r7, #16
 800b734:	46bd      	mov	sp, r7
 800b736:	bd80      	pop	{r7, pc}

0800b738 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	460b      	mov	r3, r1
 800b742:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b744:	2300      	movs	r3, #0
 800b746:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b748:	2300      	movs	r3, #0
 800b74a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b752:	78fa      	ldrb	r2, [r7, #3]
 800b754:	4611      	mov	r1, r2
 800b756:	4618      	mov	r0, r3
 800b758:	f7f9 f894 	bl	8004884 <HAL_PCD_EP_Close>
 800b75c:	4603      	mov	r3, r0
 800b75e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b760:	7bbb      	ldrb	r3, [r7, #14]
 800b762:	2b03      	cmp	r3, #3
 800b764:	d816      	bhi.n	800b794 <USBD_LL_CloseEP+0x5c>
 800b766:	a201      	add	r2, pc, #4	; (adr r2, 800b76c <USBD_LL_CloseEP+0x34>)
 800b768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b76c:	0800b77d 	.word	0x0800b77d
 800b770:	0800b783 	.word	0x0800b783
 800b774:	0800b789 	.word	0x0800b789
 800b778:	0800b78f 	.word	0x0800b78f
    case HAL_OK :
      usb_status = USBD_OK;
 800b77c:	2300      	movs	r3, #0
 800b77e:	73fb      	strb	r3, [r7, #15]
    break;
 800b780:	e00b      	b.n	800b79a <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b782:	2303      	movs	r3, #3
 800b784:	73fb      	strb	r3, [r7, #15]
    break;
 800b786:	e008      	b.n	800b79a <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b788:	2301      	movs	r3, #1
 800b78a:	73fb      	strb	r3, [r7, #15]
    break;
 800b78c:	e005      	b.n	800b79a <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b78e:	2303      	movs	r3, #3
 800b790:	73fb      	strb	r3, [r7, #15]
    break;
 800b792:	e002      	b.n	800b79a <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b794:	2303      	movs	r3, #3
 800b796:	73fb      	strb	r3, [r7, #15]
    break;
 800b798:	bf00      	nop
  }
  return usb_status;
 800b79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3710      	adds	r7, #16
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bd80      	pop	{r7, pc}

0800b7a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b7be:	78fa      	ldrb	r2, [r7, #3]
 800b7c0:	4611      	mov	r1, r2
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f7f9 f90b 	bl	80049de <HAL_PCD_EP_SetStall>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b7cc:	7bbb      	ldrb	r3, [r7, #14]
 800b7ce:	2b03      	cmp	r3, #3
 800b7d0:	d816      	bhi.n	800b800 <USBD_LL_StallEP+0x5c>
 800b7d2:	a201      	add	r2, pc, #4	; (adr r2, 800b7d8 <USBD_LL_StallEP+0x34>)
 800b7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d8:	0800b7e9 	.word	0x0800b7e9
 800b7dc:	0800b7ef 	.word	0x0800b7ef
 800b7e0:	0800b7f5 	.word	0x0800b7f5
 800b7e4:	0800b7fb 	.word	0x0800b7fb
    case HAL_OK :
      usb_status = USBD_OK;
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	73fb      	strb	r3, [r7, #15]
    break;
 800b7ec:	e00b      	b.n	800b806 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b7ee:	2303      	movs	r3, #3
 800b7f0:	73fb      	strb	r3, [r7, #15]
    break;
 800b7f2:	e008      	b.n	800b806 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	73fb      	strb	r3, [r7, #15]
    break;
 800b7f8:	e005      	b.n	800b806 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b7fa:	2303      	movs	r3, #3
 800b7fc:	73fb      	strb	r3, [r7, #15]
    break;
 800b7fe:	e002      	b.n	800b806 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b800:	2303      	movs	r3, #3
 800b802:	73fb      	strb	r3, [r7, #15]
    break;
 800b804:	bf00      	nop
  }
  return usb_status;
 800b806:	7bfb      	ldrb	r3, [r7, #15]
}
 800b808:	4618      	mov	r0, r3
 800b80a:	3710      	adds	r7, #16
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b084      	sub	sp, #16
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
 800b818:	460b      	mov	r3, r1
 800b81a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b81c:	2300      	movs	r3, #0
 800b81e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b820:	2300      	movs	r3, #0
 800b822:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b82a:	78fa      	ldrb	r2, [r7, #3]
 800b82c:	4611      	mov	r1, r2
 800b82e:	4618      	mov	r0, r3
 800b830:	f7f9 f937 	bl	8004aa2 <HAL_PCD_EP_ClrStall>
 800b834:	4603      	mov	r3, r0
 800b836:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b838:	7bbb      	ldrb	r3, [r7, #14]
 800b83a:	2b03      	cmp	r3, #3
 800b83c:	d816      	bhi.n	800b86c <USBD_LL_ClearStallEP+0x5c>
 800b83e:	a201      	add	r2, pc, #4	; (adr r2, 800b844 <USBD_LL_ClearStallEP+0x34>)
 800b840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b844:	0800b855 	.word	0x0800b855
 800b848:	0800b85b 	.word	0x0800b85b
 800b84c:	0800b861 	.word	0x0800b861
 800b850:	0800b867 	.word	0x0800b867
    case HAL_OK :
      usb_status = USBD_OK;
 800b854:	2300      	movs	r3, #0
 800b856:	73fb      	strb	r3, [r7, #15]
    break;
 800b858:	e00b      	b.n	800b872 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b85a:	2303      	movs	r3, #3
 800b85c:	73fb      	strb	r3, [r7, #15]
    break;
 800b85e:	e008      	b.n	800b872 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b860:	2301      	movs	r3, #1
 800b862:	73fb      	strb	r3, [r7, #15]
    break;
 800b864:	e005      	b.n	800b872 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b866:	2303      	movs	r3, #3
 800b868:	73fb      	strb	r3, [r7, #15]
    break;
 800b86a:	e002      	b.n	800b872 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b86c:	2303      	movs	r3, #3
 800b86e:	73fb      	strb	r3, [r7, #15]
    break;
 800b870:	bf00      	nop
  }
  return usb_status;
 800b872:	7bfb      	ldrb	r3, [r7, #15]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b87c:	b480      	push	{r7}
 800b87e:	b085      	sub	sp, #20
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	460b      	mov	r3, r1
 800b886:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b88e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b894:	2b00      	cmp	r3, #0
 800b896:	da0b      	bge.n	800b8b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b898:	78fb      	ldrb	r3, [r7, #3]
 800b89a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b89e:	68f9      	ldr	r1, [r7, #12]
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	00db      	lsls	r3, r3, #3
 800b8a4:	4413      	add	r3, r2
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	440b      	add	r3, r1
 800b8aa:	333e      	adds	r3, #62	; 0x3e
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	e00b      	b.n	800b8c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b8b0:	78fb      	ldrb	r3, [r7, #3]
 800b8b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b8b6:	68f9      	ldr	r1, [r7, #12]
 800b8b8:	4613      	mov	r3, r2
 800b8ba:	00db      	lsls	r3, r3, #3
 800b8bc:	4413      	add	r3, r2
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	440b      	add	r3, r1
 800b8c2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b8c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	3714      	adds	r7, #20
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b8d4:	b580      	push	{r7, lr}
 800b8d6:	b084      	sub	sp, #16
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
 800b8dc:	460b      	mov	r3, r1
 800b8de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b8ee:	78fa      	ldrb	r2, [r7, #3]
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7f8 ff39 	bl	800476a <HAL_PCD_SetAddress>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b8fc:	7bbb      	ldrb	r3, [r7, #14]
 800b8fe:	2b03      	cmp	r3, #3
 800b900:	d816      	bhi.n	800b930 <USBD_LL_SetUSBAddress+0x5c>
 800b902:	a201      	add	r2, pc, #4	; (adr r2, 800b908 <USBD_LL_SetUSBAddress+0x34>)
 800b904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b908:	0800b919 	.word	0x0800b919
 800b90c:	0800b91f 	.word	0x0800b91f
 800b910:	0800b925 	.word	0x0800b925
 800b914:	0800b92b 	.word	0x0800b92b
    case HAL_OK :
      usb_status = USBD_OK;
 800b918:	2300      	movs	r3, #0
 800b91a:	73fb      	strb	r3, [r7, #15]
    break;
 800b91c:	e00b      	b.n	800b936 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b91e:	2303      	movs	r3, #3
 800b920:	73fb      	strb	r3, [r7, #15]
    break;
 800b922:	e008      	b.n	800b936 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b924:	2301      	movs	r3, #1
 800b926:	73fb      	strb	r3, [r7, #15]
    break;
 800b928:	e005      	b.n	800b936 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b92a:	2303      	movs	r3, #3
 800b92c:	73fb      	strb	r3, [r7, #15]
    break;
 800b92e:	e002      	b.n	800b936 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800b930:	2303      	movs	r3, #3
 800b932:	73fb      	strb	r3, [r7, #15]
    break;
 800b934:	bf00      	nop
  }
  return usb_status;
 800b936:	7bfb      	ldrb	r3, [r7, #15]
}
 800b938:	4618      	mov	r0, r3
 800b93a:	3710      	adds	r7, #16
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	607a      	str	r2, [r7, #4]
 800b94a:	603b      	str	r3, [r7, #0]
 800b94c:	460b      	mov	r3, r1
 800b94e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b950:	2300      	movs	r3, #0
 800b952:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b954:	2300      	movs	r3, #0
 800b956:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b95e:	7af9      	ldrb	r1, [r7, #11]
 800b960:	683b      	ldr	r3, [r7, #0]
 800b962:	687a      	ldr	r2, [r7, #4]
 800b964:	f7f9 f80a 	bl	800497c <HAL_PCD_EP_Transmit>
 800b968:	4603      	mov	r3, r0
 800b96a:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b96c:	7dbb      	ldrb	r3, [r7, #22]
 800b96e:	2b03      	cmp	r3, #3
 800b970:	d816      	bhi.n	800b9a0 <USBD_LL_Transmit+0x60>
 800b972:	a201      	add	r2, pc, #4	; (adr r2, 800b978 <USBD_LL_Transmit+0x38>)
 800b974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b978:	0800b989 	.word	0x0800b989
 800b97c:	0800b98f 	.word	0x0800b98f
 800b980:	0800b995 	.word	0x0800b995
 800b984:	0800b99b 	.word	0x0800b99b
    case HAL_OK :
      usb_status = USBD_OK;
 800b988:	2300      	movs	r3, #0
 800b98a:	75fb      	strb	r3, [r7, #23]
    break;
 800b98c:	e00b      	b.n	800b9a6 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b98e:	2303      	movs	r3, #3
 800b990:	75fb      	strb	r3, [r7, #23]
    break;
 800b992:	e008      	b.n	800b9a6 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b994:	2301      	movs	r3, #1
 800b996:	75fb      	strb	r3, [r7, #23]
    break;
 800b998:	e005      	b.n	800b9a6 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b99a:	2303      	movs	r3, #3
 800b99c:	75fb      	strb	r3, [r7, #23]
    break;
 800b99e:	e002      	b.n	800b9a6 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800b9a0:	2303      	movs	r3, #3
 800b9a2:	75fb      	strb	r3, [r7, #23]
    break;
 800b9a4:	bf00      	nop
  }
  return usb_status;
 800b9a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	3718      	adds	r7, #24
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b086      	sub	sp, #24
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	607a      	str	r2, [r7, #4]
 800b9ba:	603b      	str	r3, [r7, #0]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b9ce:	7af9      	ldrb	r1, [r7, #11]
 800b9d0:	683b      	ldr	r3, [r7, #0]
 800b9d2:	687a      	ldr	r2, [r7, #4]
 800b9d4:	f7f8 ffa0 	bl	8004918 <HAL_PCD_EP_Receive>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800b9dc:	7dbb      	ldrb	r3, [r7, #22]
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	d816      	bhi.n	800ba10 <USBD_LL_PrepareReceive+0x60>
 800b9e2:	a201      	add	r2, pc, #4	; (adr r2, 800b9e8 <USBD_LL_PrepareReceive+0x38>)
 800b9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9e8:	0800b9f9 	.word	0x0800b9f9
 800b9ec:	0800b9ff 	.word	0x0800b9ff
 800b9f0:	0800ba05 	.word	0x0800ba05
 800b9f4:	0800ba0b 	.word	0x0800ba0b
    case HAL_OK :
      usb_status = USBD_OK;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	75fb      	strb	r3, [r7, #23]
    break;
 800b9fc:	e00b      	b.n	800ba16 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9fe:	2303      	movs	r3, #3
 800ba00:	75fb      	strb	r3, [r7, #23]
    break;
 800ba02:	e008      	b.n	800ba16 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba04:	2301      	movs	r3, #1
 800ba06:	75fb      	strb	r3, [r7, #23]
    break;
 800ba08:	e005      	b.n	800ba16 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba0a:	2303      	movs	r3, #3
 800ba0c:	75fb      	strb	r3, [r7, #23]
    break;
 800ba0e:	e002      	b.n	800ba16 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800ba10:	2303      	movs	r3, #3
 800ba12:	75fb      	strb	r3, [r7, #23]
    break;
 800ba14:	bf00      	nop
  }
  return usb_status;
 800ba16:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3718      	adds	r7, #24
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	460b      	mov	r3, r1
 800ba2a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800ba2c:	78fb      	ldrb	r3, [r7, #3]
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d002      	beq.n	800ba38 <HAL_PCDEx_LPM_Callback+0x18>
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d01f      	beq.n	800ba76 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800ba36:	e03b      	b.n	800bab0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	6a1b      	ldr	r3, [r3, #32]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d007      	beq.n	800ba50 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ba40:	f000 f854 	bl	800baec <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba44:	4b1c      	ldr	r3, [pc, #112]	; (800bab8 <HAL_PCDEx_LPM_Callback+0x98>)
 800ba46:	691b      	ldr	r3, [r3, #16]
 800ba48:	4a1b      	ldr	r2, [pc, #108]	; (800bab8 <HAL_PCDEx_LPM_Callback+0x98>)
 800ba4a:	f023 0306 	bic.w	r3, r3, #6
 800ba4e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	687a      	ldr	r2, [r7, #4]
 800ba5c:	6812      	ldr	r2, [r2, #0]
 800ba5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba62:	f023 0301 	bic.w	r3, r3, #1
 800ba66:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7fe fa3f 	bl	8009ef2 <USBD_LL_Resume>
    break;
 800ba74:	e01c      	b.n	800bab0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	687a      	ldr	r2, [r7, #4]
 800ba82:	6812      	ldr	r2, [r2, #0]
 800ba84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba88:	f043 0301 	orr.w	r3, r3, #1
 800ba8c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800ba94:	4618      	mov	r0, r3
 800ba96:	f7fe fa10 	bl	8009eba <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6a1b      	ldr	r3, [r3, #32]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d005      	beq.n	800baae <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800baa2:	4b05      	ldr	r3, [pc, #20]	; (800bab8 <HAL_PCDEx_LPM_Callback+0x98>)
 800baa4:	691b      	ldr	r3, [r3, #16]
 800baa6:	4a04      	ldr	r2, [pc, #16]	; (800bab8 <HAL_PCDEx_LPM_Callback+0x98>)
 800baa8:	f043 0306 	orr.w	r3, r3, #6
 800baac:	6113      	str	r3, [r2, #16]
    break;
 800baae:	bf00      	nop
}
 800bab0:	bf00      	nop
 800bab2:	3708      	adds	r7, #8
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	e000ed00 	.word	0xe000ed00

0800babc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 800bac4:	4b03      	ldr	r3, [pc, #12]	; (800bad4 <USBD_static_malloc+0x18>)
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	370c      	adds	r7, #12
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	20000fb8 	.word	0x20000fb8

0800bad8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bad8:	b480      	push	{r7}
 800bada:	b083      	sub	sp, #12
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]

}
 800bae0:	bf00      	nop
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800baf0:	f7f5 fe5c 	bl	80017ac <SystemClock_Config>
}
 800baf4:	bf00      	nop
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <__cvt>:
 800baf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bafc:	ec55 4b10 	vmov	r4, r5, d0
 800bb00:	2d00      	cmp	r5, #0
 800bb02:	460e      	mov	r6, r1
 800bb04:	4619      	mov	r1, r3
 800bb06:	462b      	mov	r3, r5
 800bb08:	bfbb      	ittet	lt
 800bb0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bb0e:	461d      	movlt	r5, r3
 800bb10:	2300      	movge	r3, #0
 800bb12:	232d      	movlt	r3, #45	; 0x2d
 800bb14:	700b      	strb	r3, [r1, #0]
 800bb16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bb1c:	4691      	mov	r9, r2
 800bb1e:	f023 0820 	bic.w	r8, r3, #32
 800bb22:	bfbc      	itt	lt
 800bb24:	4622      	movlt	r2, r4
 800bb26:	4614      	movlt	r4, r2
 800bb28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb2c:	d005      	beq.n	800bb3a <__cvt+0x42>
 800bb2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bb32:	d100      	bne.n	800bb36 <__cvt+0x3e>
 800bb34:	3601      	adds	r6, #1
 800bb36:	2102      	movs	r1, #2
 800bb38:	e000      	b.n	800bb3c <__cvt+0x44>
 800bb3a:	2103      	movs	r1, #3
 800bb3c:	ab03      	add	r3, sp, #12
 800bb3e:	9301      	str	r3, [sp, #4]
 800bb40:	ab02      	add	r3, sp, #8
 800bb42:	9300      	str	r3, [sp, #0]
 800bb44:	ec45 4b10 	vmov	d0, r4, r5
 800bb48:	4653      	mov	r3, sl
 800bb4a:	4632      	mov	r2, r6
 800bb4c:	f000 fe34 	bl	800c7b8 <_dtoa_r>
 800bb50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bb54:	4607      	mov	r7, r0
 800bb56:	d102      	bne.n	800bb5e <__cvt+0x66>
 800bb58:	f019 0f01 	tst.w	r9, #1
 800bb5c:	d022      	beq.n	800bba4 <__cvt+0xac>
 800bb5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb62:	eb07 0906 	add.w	r9, r7, r6
 800bb66:	d110      	bne.n	800bb8a <__cvt+0x92>
 800bb68:	783b      	ldrb	r3, [r7, #0]
 800bb6a:	2b30      	cmp	r3, #48	; 0x30
 800bb6c:	d10a      	bne.n	800bb84 <__cvt+0x8c>
 800bb6e:	2200      	movs	r2, #0
 800bb70:	2300      	movs	r3, #0
 800bb72:	4620      	mov	r0, r4
 800bb74:	4629      	mov	r1, r5
 800bb76:	f7f4 ffa7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb7a:	b918      	cbnz	r0, 800bb84 <__cvt+0x8c>
 800bb7c:	f1c6 0601 	rsb	r6, r6, #1
 800bb80:	f8ca 6000 	str.w	r6, [sl]
 800bb84:	f8da 3000 	ldr.w	r3, [sl]
 800bb88:	4499      	add	r9, r3
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	4620      	mov	r0, r4
 800bb90:	4629      	mov	r1, r5
 800bb92:	f7f4 ff99 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb96:	b108      	cbz	r0, 800bb9c <__cvt+0xa4>
 800bb98:	f8cd 900c 	str.w	r9, [sp, #12]
 800bb9c:	2230      	movs	r2, #48	; 0x30
 800bb9e:	9b03      	ldr	r3, [sp, #12]
 800bba0:	454b      	cmp	r3, r9
 800bba2:	d307      	bcc.n	800bbb4 <__cvt+0xbc>
 800bba4:	9b03      	ldr	r3, [sp, #12]
 800bba6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bba8:	1bdb      	subs	r3, r3, r7
 800bbaa:	4638      	mov	r0, r7
 800bbac:	6013      	str	r3, [r2, #0]
 800bbae:	b004      	add	sp, #16
 800bbb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbb4:	1c59      	adds	r1, r3, #1
 800bbb6:	9103      	str	r1, [sp, #12]
 800bbb8:	701a      	strb	r2, [r3, #0]
 800bbba:	e7f0      	b.n	800bb9e <__cvt+0xa6>

0800bbbc <__exponent>:
 800bbbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2900      	cmp	r1, #0
 800bbc2:	bfb8      	it	lt
 800bbc4:	4249      	neglt	r1, r1
 800bbc6:	f803 2b02 	strb.w	r2, [r3], #2
 800bbca:	bfb4      	ite	lt
 800bbcc:	222d      	movlt	r2, #45	; 0x2d
 800bbce:	222b      	movge	r2, #43	; 0x2b
 800bbd0:	2909      	cmp	r1, #9
 800bbd2:	7042      	strb	r2, [r0, #1]
 800bbd4:	dd2a      	ble.n	800bc2c <__exponent+0x70>
 800bbd6:	f10d 0207 	add.w	r2, sp, #7
 800bbda:	4617      	mov	r7, r2
 800bbdc:	260a      	movs	r6, #10
 800bbde:	4694      	mov	ip, r2
 800bbe0:	fb91 f5f6 	sdiv	r5, r1, r6
 800bbe4:	fb06 1415 	mls	r4, r6, r5, r1
 800bbe8:	3430      	adds	r4, #48	; 0x30
 800bbea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bbee:	460c      	mov	r4, r1
 800bbf0:	2c63      	cmp	r4, #99	; 0x63
 800bbf2:	f102 32ff 	add.w	r2, r2, #4294967295
 800bbf6:	4629      	mov	r1, r5
 800bbf8:	dcf1      	bgt.n	800bbde <__exponent+0x22>
 800bbfa:	3130      	adds	r1, #48	; 0x30
 800bbfc:	f1ac 0402 	sub.w	r4, ip, #2
 800bc00:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bc04:	1c41      	adds	r1, r0, #1
 800bc06:	4622      	mov	r2, r4
 800bc08:	42ba      	cmp	r2, r7
 800bc0a:	d30a      	bcc.n	800bc22 <__exponent+0x66>
 800bc0c:	f10d 0209 	add.w	r2, sp, #9
 800bc10:	eba2 020c 	sub.w	r2, r2, ip
 800bc14:	42bc      	cmp	r4, r7
 800bc16:	bf88      	it	hi
 800bc18:	2200      	movhi	r2, #0
 800bc1a:	4413      	add	r3, r2
 800bc1c:	1a18      	subs	r0, r3, r0
 800bc1e:	b003      	add	sp, #12
 800bc20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc22:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bc26:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bc2a:	e7ed      	b.n	800bc08 <__exponent+0x4c>
 800bc2c:	2330      	movs	r3, #48	; 0x30
 800bc2e:	3130      	adds	r1, #48	; 0x30
 800bc30:	7083      	strb	r3, [r0, #2]
 800bc32:	70c1      	strb	r1, [r0, #3]
 800bc34:	1d03      	adds	r3, r0, #4
 800bc36:	e7f1      	b.n	800bc1c <__exponent+0x60>

0800bc38 <_printf_float>:
 800bc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3c:	ed2d 8b02 	vpush	{d8}
 800bc40:	b08d      	sub	sp, #52	; 0x34
 800bc42:	460c      	mov	r4, r1
 800bc44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bc48:	4616      	mov	r6, r2
 800bc4a:	461f      	mov	r7, r3
 800bc4c:	4605      	mov	r5, r0
 800bc4e:	f000 fcb5 	bl	800c5bc <_localeconv_r>
 800bc52:	f8d0 a000 	ldr.w	sl, [r0]
 800bc56:	4650      	mov	r0, sl
 800bc58:	f7f4 fb0a 	bl	8000270 <strlen>
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	930a      	str	r3, [sp, #40]	; 0x28
 800bc60:	6823      	ldr	r3, [r4, #0]
 800bc62:	9305      	str	r3, [sp, #20]
 800bc64:	f8d8 3000 	ldr.w	r3, [r8]
 800bc68:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bc6c:	3307      	adds	r3, #7
 800bc6e:	f023 0307 	bic.w	r3, r3, #7
 800bc72:	f103 0208 	add.w	r2, r3, #8
 800bc76:	f8c8 2000 	str.w	r2, [r8]
 800bc7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bc82:	9307      	str	r3, [sp, #28]
 800bc84:	f8cd 8018 	str.w	r8, [sp, #24]
 800bc88:	ee08 0a10 	vmov	s16, r0
 800bc8c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800bc90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc94:	4b9e      	ldr	r3, [pc, #632]	; (800bf10 <_printf_float+0x2d8>)
 800bc96:	f04f 32ff 	mov.w	r2, #4294967295
 800bc9a:	f7f4 ff47 	bl	8000b2c <__aeabi_dcmpun>
 800bc9e:	bb88      	cbnz	r0, 800bd04 <_printf_float+0xcc>
 800bca0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bca4:	4b9a      	ldr	r3, [pc, #616]	; (800bf10 <_printf_float+0x2d8>)
 800bca6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcaa:	f7f4 ff21 	bl	8000af0 <__aeabi_dcmple>
 800bcae:	bb48      	cbnz	r0, 800bd04 <_printf_float+0xcc>
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	4640      	mov	r0, r8
 800bcb6:	4649      	mov	r1, r9
 800bcb8:	f7f4 ff10 	bl	8000adc <__aeabi_dcmplt>
 800bcbc:	b110      	cbz	r0, 800bcc4 <_printf_float+0x8c>
 800bcbe:	232d      	movs	r3, #45	; 0x2d
 800bcc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcc4:	4a93      	ldr	r2, [pc, #588]	; (800bf14 <_printf_float+0x2dc>)
 800bcc6:	4b94      	ldr	r3, [pc, #592]	; (800bf18 <_printf_float+0x2e0>)
 800bcc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bccc:	bf94      	ite	ls
 800bcce:	4690      	movls	r8, r2
 800bcd0:	4698      	movhi	r8, r3
 800bcd2:	2303      	movs	r3, #3
 800bcd4:	6123      	str	r3, [r4, #16]
 800bcd6:	9b05      	ldr	r3, [sp, #20]
 800bcd8:	f023 0304 	bic.w	r3, r3, #4
 800bcdc:	6023      	str	r3, [r4, #0]
 800bcde:	f04f 0900 	mov.w	r9, #0
 800bce2:	9700      	str	r7, [sp, #0]
 800bce4:	4633      	mov	r3, r6
 800bce6:	aa0b      	add	r2, sp, #44	; 0x2c
 800bce8:	4621      	mov	r1, r4
 800bcea:	4628      	mov	r0, r5
 800bcec:	f000 f9da 	bl	800c0a4 <_printf_common>
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	f040 8090 	bne.w	800be16 <_printf_float+0x1de>
 800bcf6:	f04f 30ff 	mov.w	r0, #4294967295
 800bcfa:	b00d      	add	sp, #52	; 0x34
 800bcfc:	ecbd 8b02 	vpop	{d8}
 800bd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd04:	4642      	mov	r2, r8
 800bd06:	464b      	mov	r3, r9
 800bd08:	4640      	mov	r0, r8
 800bd0a:	4649      	mov	r1, r9
 800bd0c:	f7f4 ff0e 	bl	8000b2c <__aeabi_dcmpun>
 800bd10:	b140      	cbz	r0, 800bd24 <_printf_float+0xec>
 800bd12:	464b      	mov	r3, r9
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	bfbc      	itt	lt
 800bd18:	232d      	movlt	r3, #45	; 0x2d
 800bd1a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bd1e:	4a7f      	ldr	r2, [pc, #508]	; (800bf1c <_printf_float+0x2e4>)
 800bd20:	4b7f      	ldr	r3, [pc, #508]	; (800bf20 <_printf_float+0x2e8>)
 800bd22:	e7d1      	b.n	800bcc8 <_printf_float+0x90>
 800bd24:	6863      	ldr	r3, [r4, #4]
 800bd26:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bd2a:	9206      	str	r2, [sp, #24]
 800bd2c:	1c5a      	adds	r2, r3, #1
 800bd2e:	d13f      	bne.n	800bdb0 <_printf_float+0x178>
 800bd30:	2306      	movs	r3, #6
 800bd32:	6063      	str	r3, [r4, #4]
 800bd34:	9b05      	ldr	r3, [sp, #20]
 800bd36:	6861      	ldr	r1, [r4, #4]
 800bd38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bd3c:	2300      	movs	r3, #0
 800bd3e:	9303      	str	r3, [sp, #12]
 800bd40:	ab0a      	add	r3, sp, #40	; 0x28
 800bd42:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bd46:	ab09      	add	r3, sp, #36	; 0x24
 800bd48:	ec49 8b10 	vmov	d0, r8, r9
 800bd4c:	9300      	str	r3, [sp, #0]
 800bd4e:	6022      	str	r2, [r4, #0]
 800bd50:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd54:	4628      	mov	r0, r5
 800bd56:	f7ff fecf 	bl	800baf8 <__cvt>
 800bd5a:	9b06      	ldr	r3, [sp, #24]
 800bd5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd5e:	2b47      	cmp	r3, #71	; 0x47
 800bd60:	4680      	mov	r8, r0
 800bd62:	d108      	bne.n	800bd76 <_printf_float+0x13e>
 800bd64:	1cc8      	adds	r0, r1, #3
 800bd66:	db02      	blt.n	800bd6e <_printf_float+0x136>
 800bd68:	6863      	ldr	r3, [r4, #4]
 800bd6a:	4299      	cmp	r1, r3
 800bd6c:	dd41      	ble.n	800bdf2 <_printf_float+0x1ba>
 800bd6e:	f1ab 0302 	sub.w	r3, fp, #2
 800bd72:	fa5f fb83 	uxtb.w	fp, r3
 800bd76:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bd7a:	d820      	bhi.n	800bdbe <_printf_float+0x186>
 800bd7c:	3901      	subs	r1, #1
 800bd7e:	465a      	mov	r2, fp
 800bd80:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bd84:	9109      	str	r1, [sp, #36]	; 0x24
 800bd86:	f7ff ff19 	bl	800bbbc <__exponent>
 800bd8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd8c:	1813      	adds	r3, r2, r0
 800bd8e:	2a01      	cmp	r2, #1
 800bd90:	4681      	mov	r9, r0
 800bd92:	6123      	str	r3, [r4, #16]
 800bd94:	dc02      	bgt.n	800bd9c <_printf_float+0x164>
 800bd96:	6822      	ldr	r2, [r4, #0]
 800bd98:	07d2      	lsls	r2, r2, #31
 800bd9a:	d501      	bpl.n	800bda0 <_printf_float+0x168>
 800bd9c:	3301      	adds	r3, #1
 800bd9e:	6123      	str	r3, [r4, #16]
 800bda0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d09c      	beq.n	800bce2 <_printf_float+0xaa>
 800bda8:	232d      	movs	r3, #45	; 0x2d
 800bdaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdae:	e798      	b.n	800bce2 <_printf_float+0xaa>
 800bdb0:	9a06      	ldr	r2, [sp, #24]
 800bdb2:	2a47      	cmp	r2, #71	; 0x47
 800bdb4:	d1be      	bne.n	800bd34 <_printf_float+0xfc>
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d1bc      	bne.n	800bd34 <_printf_float+0xfc>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e7b9      	b.n	800bd32 <_printf_float+0xfa>
 800bdbe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bdc2:	d118      	bne.n	800bdf6 <_printf_float+0x1be>
 800bdc4:	2900      	cmp	r1, #0
 800bdc6:	6863      	ldr	r3, [r4, #4]
 800bdc8:	dd0b      	ble.n	800bde2 <_printf_float+0x1aa>
 800bdca:	6121      	str	r1, [r4, #16]
 800bdcc:	b913      	cbnz	r3, 800bdd4 <_printf_float+0x19c>
 800bdce:	6822      	ldr	r2, [r4, #0]
 800bdd0:	07d0      	lsls	r0, r2, #31
 800bdd2:	d502      	bpl.n	800bdda <_printf_float+0x1a2>
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	440b      	add	r3, r1
 800bdd8:	6123      	str	r3, [r4, #16]
 800bdda:	65a1      	str	r1, [r4, #88]	; 0x58
 800bddc:	f04f 0900 	mov.w	r9, #0
 800bde0:	e7de      	b.n	800bda0 <_printf_float+0x168>
 800bde2:	b913      	cbnz	r3, 800bdea <_printf_float+0x1b2>
 800bde4:	6822      	ldr	r2, [r4, #0]
 800bde6:	07d2      	lsls	r2, r2, #31
 800bde8:	d501      	bpl.n	800bdee <_printf_float+0x1b6>
 800bdea:	3302      	adds	r3, #2
 800bdec:	e7f4      	b.n	800bdd8 <_printf_float+0x1a0>
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e7f2      	b.n	800bdd8 <_printf_float+0x1a0>
 800bdf2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bdf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdf8:	4299      	cmp	r1, r3
 800bdfa:	db05      	blt.n	800be08 <_printf_float+0x1d0>
 800bdfc:	6823      	ldr	r3, [r4, #0]
 800bdfe:	6121      	str	r1, [r4, #16]
 800be00:	07d8      	lsls	r0, r3, #31
 800be02:	d5ea      	bpl.n	800bdda <_printf_float+0x1a2>
 800be04:	1c4b      	adds	r3, r1, #1
 800be06:	e7e7      	b.n	800bdd8 <_printf_float+0x1a0>
 800be08:	2900      	cmp	r1, #0
 800be0a:	bfd4      	ite	le
 800be0c:	f1c1 0202 	rsble	r2, r1, #2
 800be10:	2201      	movgt	r2, #1
 800be12:	4413      	add	r3, r2
 800be14:	e7e0      	b.n	800bdd8 <_printf_float+0x1a0>
 800be16:	6823      	ldr	r3, [r4, #0]
 800be18:	055a      	lsls	r2, r3, #21
 800be1a:	d407      	bmi.n	800be2c <_printf_float+0x1f4>
 800be1c:	6923      	ldr	r3, [r4, #16]
 800be1e:	4642      	mov	r2, r8
 800be20:	4631      	mov	r1, r6
 800be22:	4628      	mov	r0, r5
 800be24:	47b8      	blx	r7
 800be26:	3001      	adds	r0, #1
 800be28:	d12c      	bne.n	800be84 <_printf_float+0x24c>
 800be2a:	e764      	b.n	800bcf6 <_printf_float+0xbe>
 800be2c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be30:	f240 80e0 	bls.w	800bff4 <_printf_float+0x3bc>
 800be34:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be38:	2200      	movs	r2, #0
 800be3a:	2300      	movs	r3, #0
 800be3c:	f7f4 fe44 	bl	8000ac8 <__aeabi_dcmpeq>
 800be40:	2800      	cmp	r0, #0
 800be42:	d034      	beq.n	800beae <_printf_float+0x276>
 800be44:	4a37      	ldr	r2, [pc, #220]	; (800bf24 <_printf_float+0x2ec>)
 800be46:	2301      	movs	r3, #1
 800be48:	4631      	mov	r1, r6
 800be4a:	4628      	mov	r0, r5
 800be4c:	47b8      	blx	r7
 800be4e:	3001      	adds	r0, #1
 800be50:	f43f af51 	beq.w	800bcf6 <_printf_float+0xbe>
 800be54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be58:	429a      	cmp	r2, r3
 800be5a:	db02      	blt.n	800be62 <_printf_float+0x22a>
 800be5c:	6823      	ldr	r3, [r4, #0]
 800be5e:	07d8      	lsls	r0, r3, #31
 800be60:	d510      	bpl.n	800be84 <_printf_float+0x24c>
 800be62:	ee18 3a10 	vmov	r3, s16
 800be66:	4652      	mov	r2, sl
 800be68:	4631      	mov	r1, r6
 800be6a:	4628      	mov	r0, r5
 800be6c:	47b8      	blx	r7
 800be6e:	3001      	adds	r0, #1
 800be70:	f43f af41 	beq.w	800bcf6 <_printf_float+0xbe>
 800be74:	f04f 0800 	mov.w	r8, #0
 800be78:	f104 091a 	add.w	r9, r4, #26
 800be7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be7e:	3b01      	subs	r3, #1
 800be80:	4543      	cmp	r3, r8
 800be82:	dc09      	bgt.n	800be98 <_printf_float+0x260>
 800be84:	6823      	ldr	r3, [r4, #0]
 800be86:	079b      	lsls	r3, r3, #30
 800be88:	f100 8107 	bmi.w	800c09a <_printf_float+0x462>
 800be8c:	68e0      	ldr	r0, [r4, #12]
 800be8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be90:	4298      	cmp	r0, r3
 800be92:	bfb8      	it	lt
 800be94:	4618      	movlt	r0, r3
 800be96:	e730      	b.n	800bcfa <_printf_float+0xc2>
 800be98:	2301      	movs	r3, #1
 800be9a:	464a      	mov	r2, r9
 800be9c:	4631      	mov	r1, r6
 800be9e:	4628      	mov	r0, r5
 800bea0:	47b8      	blx	r7
 800bea2:	3001      	adds	r0, #1
 800bea4:	f43f af27 	beq.w	800bcf6 <_printf_float+0xbe>
 800bea8:	f108 0801 	add.w	r8, r8, #1
 800beac:	e7e6      	b.n	800be7c <_printf_float+0x244>
 800beae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	dc39      	bgt.n	800bf28 <_printf_float+0x2f0>
 800beb4:	4a1b      	ldr	r2, [pc, #108]	; (800bf24 <_printf_float+0x2ec>)
 800beb6:	2301      	movs	r3, #1
 800beb8:	4631      	mov	r1, r6
 800beba:	4628      	mov	r0, r5
 800bebc:	47b8      	blx	r7
 800bebe:	3001      	adds	r0, #1
 800bec0:	f43f af19 	beq.w	800bcf6 <_printf_float+0xbe>
 800bec4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bec8:	4313      	orrs	r3, r2
 800beca:	d102      	bne.n	800bed2 <_printf_float+0x29a>
 800becc:	6823      	ldr	r3, [r4, #0]
 800bece:	07d9      	lsls	r1, r3, #31
 800bed0:	d5d8      	bpl.n	800be84 <_printf_float+0x24c>
 800bed2:	ee18 3a10 	vmov	r3, s16
 800bed6:	4652      	mov	r2, sl
 800bed8:	4631      	mov	r1, r6
 800beda:	4628      	mov	r0, r5
 800bedc:	47b8      	blx	r7
 800bede:	3001      	adds	r0, #1
 800bee0:	f43f af09 	beq.w	800bcf6 <_printf_float+0xbe>
 800bee4:	f04f 0900 	mov.w	r9, #0
 800bee8:	f104 0a1a 	add.w	sl, r4, #26
 800beec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beee:	425b      	negs	r3, r3
 800bef0:	454b      	cmp	r3, r9
 800bef2:	dc01      	bgt.n	800bef8 <_printf_float+0x2c0>
 800bef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bef6:	e792      	b.n	800be1e <_printf_float+0x1e6>
 800bef8:	2301      	movs	r3, #1
 800befa:	4652      	mov	r2, sl
 800befc:	4631      	mov	r1, r6
 800befe:	4628      	mov	r0, r5
 800bf00:	47b8      	blx	r7
 800bf02:	3001      	adds	r0, #1
 800bf04:	f43f aef7 	beq.w	800bcf6 <_printf_float+0xbe>
 800bf08:	f109 0901 	add.w	r9, r9, #1
 800bf0c:	e7ee      	b.n	800beec <_printf_float+0x2b4>
 800bf0e:	bf00      	nop
 800bf10:	7fefffff 	.word	0x7fefffff
 800bf14:	0800e518 	.word	0x0800e518
 800bf18:	0800e51c 	.word	0x0800e51c
 800bf1c:	0800e520 	.word	0x0800e520
 800bf20:	0800e524 	.word	0x0800e524
 800bf24:	0800e528 	.word	0x0800e528
 800bf28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf2c:	429a      	cmp	r2, r3
 800bf2e:	bfa8      	it	ge
 800bf30:	461a      	movge	r2, r3
 800bf32:	2a00      	cmp	r2, #0
 800bf34:	4691      	mov	r9, r2
 800bf36:	dc37      	bgt.n	800bfa8 <_printf_float+0x370>
 800bf38:	f04f 0b00 	mov.w	fp, #0
 800bf3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf40:	f104 021a 	add.w	r2, r4, #26
 800bf44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf46:	9305      	str	r3, [sp, #20]
 800bf48:	eba3 0309 	sub.w	r3, r3, r9
 800bf4c:	455b      	cmp	r3, fp
 800bf4e:	dc33      	bgt.n	800bfb8 <_printf_float+0x380>
 800bf50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf54:	429a      	cmp	r2, r3
 800bf56:	db3b      	blt.n	800bfd0 <_printf_float+0x398>
 800bf58:	6823      	ldr	r3, [r4, #0]
 800bf5a:	07da      	lsls	r2, r3, #31
 800bf5c:	d438      	bmi.n	800bfd0 <_printf_float+0x398>
 800bf5e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bf62:	eba2 0903 	sub.w	r9, r2, r3
 800bf66:	9b05      	ldr	r3, [sp, #20]
 800bf68:	1ad2      	subs	r2, r2, r3
 800bf6a:	4591      	cmp	r9, r2
 800bf6c:	bfa8      	it	ge
 800bf6e:	4691      	movge	r9, r2
 800bf70:	f1b9 0f00 	cmp.w	r9, #0
 800bf74:	dc35      	bgt.n	800bfe2 <_printf_float+0x3aa>
 800bf76:	f04f 0800 	mov.w	r8, #0
 800bf7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf7e:	f104 0a1a 	add.w	sl, r4, #26
 800bf82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf86:	1a9b      	subs	r3, r3, r2
 800bf88:	eba3 0309 	sub.w	r3, r3, r9
 800bf8c:	4543      	cmp	r3, r8
 800bf8e:	f77f af79 	ble.w	800be84 <_printf_float+0x24c>
 800bf92:	2301      	movs	r3, #1
 800bf94:	4652      	mov	r2, sl
 800bf96:	4631      	mov	r1, r6
 800bf98:	4628      	mov	r0, r5
 800bf9a:	47b8      	blx	r7
 800bf9c:	3001      	adds	r0, #1
 800bf9e:	f43f aeaa 	beq.w	800bcf6 <_printf_float+0xbe>
 800bfa2:	f108 0801 	add.w	r8, r8, #1
 800bfa6:	e7ec      	b.n	800bf82 <_printf_float+0x34a>
 800bfa8:	4613      	mov	r3, r2
 800bfaa:	4631      	mov	r1, r6
 800bfac:	4642      	mov	r2, r8
 800bfae:	4628      	mov	r0, r5
 800bfb0:	47b8      	blx	r7
 800bfb2:	3001      	adds	r0, #1
 800bfb4:	d1c0      	bne.n	800bf38 <_printf_float+0x300>
 800bfb6:	e69e      	b.n	800bcf6 <_printf_float+0xbe>
 800bfb8:	2301      	movs	r3, #1
 800bfba:	4631      	mov	r1, r6
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	9205      	str	r2, [sp, #20]
 800bfc0:	47b8      	blx	r7
 800bfc2:	3001      	adds	r0, #1
 800bfc4:	f43f ae97 	beq.w	800bcf6 <_printf_float+0xbe>
 800bfc8:	9a05      	ldr	r2, [sp, #20]
 800bfca:	f10b 0b01 	add.w	fp, fp, #1
 800bfce:	e7b9      	b.n	800bf44 <_printf_float+0x30c>
 800bfd0:	ee18 3a10 	vmov	r3, s16
 800bfd4:	4652      	mov	r2, sl
 800bfd6:	4631      	mov	r1, r6
 800bfd8:	4628      	mov	r0, r5
 800bfda:	47b8      	blx	r7
 800bfdc:	3001      	adds	r0, #1
 800bfde:	d1be      	bne.n	800bf5e <_printf_float+0x326>
 800bfe0:	e689      	b.n	800bcf6 <_printf_float+0xbe>
 800bfe2:	9a05      	ldr	r2, [sp, #20]
 800bfe4:	464b      	mov	r3, r9
 800bfe6:	4442      	add	r2, r8
 800bfe8:	4631      	mov	r1, r6
 800bfea:	4628      	mov	r0, r5
 800bfec:	47b8      	blx	r7
 800bfee:	3001      	adds	r0, #1
 800bff0:	d1c1      	bne.n	800bf76 <_printf_float+0x33e>
 800bff2:	e680      	b.n	800bcf6 <_printf_float+0xbe>
 800bff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bff6:	2a01      	cmp	r2, #1
 800bff8:	dc01      	bgt.n	800bffe <_printf_float+0x3c6>
 800bffa:	07db      	lsls	r3, r3, #31
 800bffc:	d53a      	bpl.n	800c074 <_printf_float+0x43c>
 800bffe:	2301      	movs	r3, #1
 800c000:	4642      	mov	r2, r8
 800c002:	4631      	mov	r1, r6
 800c004:	4628      	mov	r0, r5
 800c006:	47b8      	blx	r7
 800c008:	3001      	adds	r0, #1
 800c00a:	f43f ae74 	beq.w	800bcf6 <_printf_float+0xbe>
 800c00e:	ee18 3a10 	vmov	r3, s16
 800c012:	4652      	mov	r2, sl
 800c014:	4631      	mov	r1, r6
 800c016:	4628      	mov	r0, r5
 800c018:	47b8      	blx	r7
 800c01a:	3001      	adds	r0, #1
 800c01c:	f43f ae6b 	beq.w	800bcf6 <_printf_float+0xbe>
 800c020:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c024:	2200      	movs	r2, #0
 800c026:	2300      	movs	r3, #0
 800c028:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c02c:	f7f4 fd4c 	bl	8000ac8 <__aeabi_dcmpeq>
 800c030:	b9d8      	cbnz	r0, 800c06a <_printf_float+0x432>
 800c032:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c036:	f108 0201 	add.w	r2, r8, #1
 800c03a:	4631      	mov	r1, r6
 800c03c:	4628      	mov	r0, r5
 800c03e:	47b8      	blx	r7
 800c040:	3001      	adds	r0, #1
 800c042:	d10e      	bne.n	800c062 <_printf_float+0x42a>
 800c044:	e657      	b.n	800bcf6 <_printf_float+0xbe>
 800c046:	2301      	movs	r3, #1
 800c048:	4652      	mov	r2, sl
 800c04a:	4631      	mov	r1, r6
 800c04c:	4628      	mov	r0, r5
 800c04e:	47b8      	blx	r7
 800c050:	3001      	adds	r0, #1
 800c052:	f43f ae50 	beq.w	800bcf6 <_printf_float+0xbe>
 800c056:	f108 0801 	add.w	r8, r8, #1
 800c05a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c05c:	3b01      	subs	r3, #1
 800c05e:	4543      	cmp	r3, r8
 800c060:	dcf1      	bgt.n	800c046 <_printf_float+0x40e>
 800c062:	464b      	mov	r3, r9
 800c064:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c068:	e6da      	b.n	800be20 <_printf_float+0x1e8>
 800c06a:	f04f 0800 	mov.w	r8, #0
 800c06e:	f104 0a1a 	add.w	sl, r4, #26
 800c072:	e7f2      	b.n	800c05a <_printf_float+0x422>
 800c074:	2301      	movs	r3, #1
 800c076:	4642      	mov	r2, r8
 800c078:	e7df      	b.n	800c03a <_printf_float+0x402>
 800c07a:	2301      	movs	r3, #1
 800c07c:	464a      	mov	r2, r9
 800c07e:	4631      	mov	r1, r6
 800c080:	4628      	mov	r0, r5
 800c082:	47b8      	blx	r7
 800c084:	3001      	adds	r0, #1
 800c086:	f43f ae36 	beq.w	800bcf6 <_printf_float+0xbe>
 800c08a:	f108 0801 	add.w	r8, r8, #1
 800c08e:	68e3      	ldr	r3, [r4, #12]
 800c090:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c092:	1a5b      	subs	r3, r3, r1
 800c094:	4543      	cmp	r3, r8
 800c096:	dcf0      	bgt.n	800c07a <_printf_float+0x442>
 800c098:	e6f8      	b.n	800be8c <_printf_float+0x254>
 800c09a:	f04f 0800 	mov.w	r8, #0
 800c09e:	f104 0919 	add.w	r9, r4, #25
 800c0a2:	e7f4      	b.n	800c08e <_printf_float+0x456>

0800c0a4 <_printf_common>:
 800c0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0a8:	4616      	mov	r6, r2
 800c0aa:	4699      	mov	r9, r3
 800c0ac:	688a      	ldr	r2, [r1, #8]
 800c0ae:	690b      	ldr	r3, [r1, #16]
 800c0b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	bfb8      	it	lt
 800c0b8:	4613      	movlt	r3, r2
 800c0ba:	6033      	str	r3, [r6, #0]
 800c0bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0c0:	4607      	mov	r7, r0
 800c0c2:	460c      	mov	r4, r1
 800c0c4:	b10a      	cbz	r2, 800c0ca <_printf_common+0x26>
 800c0c6:	3301      	adds	r3, #1
 800c0c8:	6033      	str	r3, [r6, #0]
 800c0ca:	6823      	ldr	r3, [r4, #0]
 800c0cc:	0699      	lsls	r1, r3, #26
 800c0ce:	bf42      	ittt	mi
 800c0d0:	6833      	ldrmi	r3, [r6, #0]
 800c0d2:	3302      	addmi	r3, #2
 800c0d4:	6033      	strmi	r3, [r6, #0]
 800c0d6:	6825      	ldr	r5, [r4, #0]
 800c0d8:	f015 0506 	ands.w	r5, r5, #6
 800c0dc:	d106      	bne.n	800c0ec <_printf_common+0x48>
 800c0de:	f104 0a19 	add.w	sl, r4, #25
 800c0e2:	68e3      	ldr	r3, [r4, #12]
 800c0e4:	6832      	ldr	r2, [r6, #0]
 800c0e6:	1a9b      	subs	r3, r3, r2
 800c0e8:	42ab      	cmp	r3, r5
 800c0ea:	dc26      	bgt.n	800c13a <_printf_common+0x96>
 800c0ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c0f0:	1e13      	subs	r3, r2, #0
 800c0f2:	6822      	ldr	r2, [r4, #0]
 800c0f4:	bf18      	it	ne
 800c0f6:	2301      	movne	r3, #1
 800c0f8:	0692      	lsls	r2, r2, #26
 800c0fa:	d42b      	bmi.n	800c154 <_printf_common+0xb0>
 800c0fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c100:	4649      	mov	r1, r9
 800c102:	4638      	mov	r0, r7
 800c104:	47c0      	blx	r8
 800c106:	3001      	adds	r0, #1
 800c108:	d01e      	beq.n	800c148 <_printf_common+0xa4>
 800c10a:	6823      	ldr	r3, [r4, #0]
 800c10c:	6922      	ldr	r2, [r4, #16]
 800c10e:	f003 0306 	and.w	r3, r3, #6
 800c112:	2b04      	cmp	r3, #4
 800c114:	bf02      	ittt	eq
 800c116:	68e5      	ldreq	r5, [r4, #12]
 800c118:	6833      	ldreq	r3, [r6, #0]
 800c11a:	1aed      	subeq	r5, r5, r3
 800c11c:	68a3      	ldr	r3, [r4, #8]
 800c11e:	bf0c      	ite	eq
 800c120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c124:	2500      	movne	r5, #0
 800c126:	4293      	cmp	r3, r2
 800c128:	bfc4      	itt	gt
 800c12a:	1a9b      	subgt	r3, r3, r2
 800c12c:	18ed      	addgt	r5, r5, r3
 800c12e:	2600      	movs	r6, #0
 800c130:	341a      	adds	r4, #26
 800c132:	42b5      	cmp	r5, r6
 800c134:	d11a      	bne.n	800c16c <_printf_common+0xc8>
 800c136:	2000      	movs	r0, #0
 800c138:	e008      	b.n	800c14c <_printf_common+0xa8>
 800c13a:	2301      	movs	r3, #1
 800c13c:	4652      	mov	r2, sl
 800c13e:	4649      	mov	r1, r9
 800c140:	4638      	mov	r0, r7
 800c142:	47c0      	blx	r8
 800c144:	3001      	adds	r0, #1
 800c146:	d103      	bne.n	800c150 <_printf_common+0xac>
 800c148:	f04f 30ff 	mov.w	r0, #4294967295
 800c14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c150:	3501      	adds	r5, #1
 800c152:	e7c6      	b.n	800c0e2 <_printf_common+0x3e>
 800c154:	18e1      	adds	r1, r4, r3
 800c156:	1c5a      	adds	r2, r3, #1
 800c158:	2030      	movs	r0, #48	; 0x30
 800c15a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c15e:	4422      	add	r2, r4
 800c160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c168:	3302      	adds	r3, #2
 800c16a:	e7c7      	b.n	800c0fc <_printf_common+0x58>
 800c16c:	2301      	movs	r3, #1
 800c16e:	4622      	mov	r2, r4
 800c170:	4649      	mov	r1, r9
 800c172:	4638      	mov	r0, r7
 800c174:	47c0      	blx	r8
 800c176:	3001      	adds	r0, #1
 800c178:	d0e6      	beq.n	800c148 <_printf_common+0xa4>
 800c17a:	3601      	adds	r6, #1
 800c17c:	e7d9      	b.n	800c132 <_printf_common+0x8e>
	...

0800c180 <_printf_i>:
 800c180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c184:	7e0f      	ldrb	r7, [r1, #24]
 800c186:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c188:	2f78      	cmp	r7, #120	; 0x78
 800c18a:	4691      	mov	r9, r2
 800c18c:	4680      	mov	r8, r0
 800c18e:	460c      	mov	r4, r1
 800c190:	469a      	mov	sl, r3
 800c192:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c196:	d807      	bhi.n	800c1a8 <_printf_i+0x28>
 800c198:	2f62      	cmp	r7, #98	; 0x62
 800c19a:	d80a      	bhi.n	800c1b2 <_printf_i+0x32>
 800c19c:	2f00      	cmp	r7, #0
 800c19e:	f000 80d4 	beq.w	800c34a <_printf_i+0x1ca>
 800c1a2:	2f58      	cmp	r7, #88	; 0x58
 800c1a4:	f000 80c0 	beq.w	800c328 <_printf_i+0x1a8>
 800c1a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c1b0:	e03a      	b.n	800c228 <_printf_i+0xa8>
 800c1b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1b6:	2b15      	cmp	r3, #21
 800c1b8:	d8f6      	bhi.n	800c1a8 <_printf_i+0x28>
 800c1ba:	a101      	add	r1, pc, #4	; (adr r1, 800c1c0 <_printf_i+0x40>)
 800c1bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1c0:	0800c219 	.word	0x0800c219
 800c1c4:	0800c22d 	.word	0x0800c22d
 800c1c8:	0800c1a9 	.word	0x0800c1a9
 800c1cc:	0800c1a9 	.word	0x0800c1a9
 800c1d0:	0800c1a9 	.word	0x0800c1a9
 800c1d4:	0800c1a9 	.word	0x0800c1a9
 800c1d8:	0800c22d 	.word	0x0800c22d
 800c1dc:	0800c1a9 	.word	0x0800c1a9
 800c1e0:	0800c1a9 	.word	0x0800c1a9
 800c1e4:	0800c1a9 	.word	0x0800c1a9
 800c1e8:	0800c1a9 	.word	0x0800c1a9
 800c1ec:	0800c331 	.word	0x0800c331
 800c1f0:	0800c259 	.word	0x0800c259
 800c1f4:	0800c2eb 	.word	0x0800c2eb
 800c1f8:	0800c1a9 	.word	0x0800c1a9
 800c1fc:	0800c1a9 	.word	0x0800c1a9
 800c200:	0800c353 	.word	0x0800c353
 800c204:	0800c1a9 	.word	0x0800c1a9
 800c208:	0800c259 	.word	0x0800c259
 800c20c:	0800c1a9 	.word	0x0800c1a9
 800c210:	0800c1a9 	.word	0x0800c1a9
 800c214:	0800c2f3 	.word	0x0800c2f3
 800c218:	682b      	ldr	r3, [r5, #0]
 800c21a:	1d1a      	adds	r2, r3, #4
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	602a      	str	r2, [r5, #0]
 800c220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c228:	2301      	movs	r3, #1
 800c22a:	e09f      	b.n	800c36c <_printf_i+0x1ec>
 800c22c:	6820      	ldr	r0, [r4, #0]
 800c22e:	682b      	ldr	r3, [r5, #0]
 800c230:	0607      	lsls	r7, r0, #24
 800c232:	f103 0104 	add.w	r1, r3, #4
 800c236:	6029      	str	r1, [r5, #0]
 800c238:	d501      	bpl.n	800c23e <_printf_i+0xbe>
 800c23a:	681e      	ldr	r6, [r3, #0]
 800c23c:	e003      	b.n	800c246 <_printf_i+0xc6>
 800c23e:	0646      	lsls	r6, r0, #25
 800c240:	d5fb      	bpl.n	800c23a <_printf_i+0xba>
 800c242:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c246:	2e00      	cmp	r6, #0
 800c248:	da03      	bge.n	800c252 <_printf_i+0xd2>
 800c24a:	232d      	movs	r3, #45	; 0x2d
 800c24c:	4276      	negs	r6, r6
 800c24e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c252:	485a      	ldr	r0, [pc, #360]	; (800c3bc <_printf_i+0x23c>)
 800c254:	230a      	movs	r3, #10
 800c256:	e012      	b.n	800c27e <_printf_i+0xfe>
 800c258:	682b      	ldr	r3, [r5, #0]
 800c25a:	6820      	ldr	r0, [r4, #0]
 800c25c:	1d19      	adds	r1, r3, #4
 800c25e:	6029      	str	r1, [r5, #0]
 800c260:	0605      	lsls	r5, r0, #24
 800c262:	d501      	bpl.n	800c268 <_printf_i+0xe8>
 800c264:	681e      	ldr	r6, [r3, #0]
 800c266:	e002      	b.n	800c26e <_printf_i+0xee>
 800c268:	0641      	lsls	r1, r0, #25
 800c26a:	d5fb      	bpl.n	800c264 <_printf_i+0xe4>
 800c26c:	881e      	ldrh	r6, [r3, #0]
 800c26e:	4853      	ldr	r0, [pc, #332]	; (800c3bc <_printf_i+0x23c>)
 800c270:	2f6f      	cmp	r7, #111	; 0x6f
 800c272:	bf0c      	ite	eq
 800c274:	2308      	moveq	r3, #8
 800c276:	230a      	movne	r3, #10
 800c278:	2100      	movs	r1, #0
 800c27a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c27e:	6865      	ldr	r5, [r4, #4]
 800c280:	60a5      	str	r5, [r4, #8]
 800c282:	2d00      	cmp	r5, #0
 800c284:	bfa2      	ittt	ge
 800c286:	6821      	ldrge	r1, [r4, #0]
 800c288:	f021 0104 	bicge.w	r1, r1, #4
 800c28c:	6021      	strge	r1, [r4, #0]
 800c28e:	b90e      	cbnz	r6, 800c294 <_printf_i+0x114>
 800c290:	2d00      	cmp	r5, #0
 800c292:	d04b      	beq.n	800c32c <_printf_i+0x1ac>
 800c294:	4615      	mov	r5, r2
 800c296:	fbb6 f1f3 	udiv	r1, r6, r3
 800c29a:	fb03 6711 	mls	r7, r3, r1, r6
 800c29e:	5dc7      	ldrb	r7, [r0, r7]
 800c2a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c2a4:	4637      	mov	r7, r6
 800c2a6:	42bb      	cmp	r3, r7
 800c2a8:	460e      	mov	r6, r1
 800c2aa:	d9f4      	bls.n	800c296 <_printf_i+0x116>
 800c2ac:	2b08      	cmp	r3, #8
 800c2ae:	d10b      	bne.n	800c2c8 <_printf_i+0x148>
 800c2b0:	6823      	ldr	r3, [r4, #0]
 800c2b2:	07de      	lsls	r6, r3, #31
 800c2b4:	d508      	bpl.n	800c2c8 <_printf_i+0x148>
 800c2b6:	6923      	ldr	r3, [r4, #16]
 800c2b8:	6861      	ldr	r1, [r4, #4]
 800c2ba:	4299      	cmp	r1, r3
 800c2bc:	bfde      	ittt	le
 800c2be:	2330      	movle	r3, #48	; 0x30
 800c2c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c2c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c2c8:	1b52      	subs	r2, r2, r5
 800c2ca:	6122      	str	r2, [r4, #16]
 800c2cc:	f8cd a000 	str.w	sl, [sp]
 800c2d0:	464b      	mov	r3, r9
 800c2d2:	aa03      	add	r2, sp, #12
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	4640      	mov	r0, r8
 800c2d8:	f7ff fee4 	bl	800c0a4 <_printf_common>
 800c2dc:	3001      	adds	r0, #1
 800c2de:	d14a      	bne.n	800c376 <_printf_i+0x1f6>
 800c2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e4:	b004      	add	sp, #16
 800c2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ea:	6823      	ldr	r3, [r4, #0]
 800c2ec:	f043 0320 	orr.w	r3, r3, #32
 800c2f0:	6023      	str	r3, [r4, #0]
 800c2f2:	4833      	ldr	r0, [pc, #204]	; (800c3c0 <_printf_i+0x240>)
 800c2f4:	2778      	movs	r7, #120	; 0x78
 800c2f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c2fa:	6823      	ldr	r3, [r4, #0]
 800c2fc:	6829      	ldr	r1, [r5, #0]
 800c2fe:	061f      	lsls	r7, r3, #24
 800c300:	f851 6b04 	ldr.w	r6, [r1], #4
 800c304:	d402      	bmi.n	800c30c <_printf_i+0x18c>
 800c306:	065f      	lsls	r7, r3, #25
 800c308:	bf48      	it	mi
 800c30a:	b2b6      	uxthmi	r6, r6
 800c30c:	07df      	lsls	r7, r3, #31
 800c30e:	bf48      	it	mi
 800c310:	f043 0320 	orrmi.w	r3, r3, #32
 800c314:	6029      	str	r1, [r5, #0]
 800c316:	bf48      	it	mi
 800c318:	6023      	strmi	r3, [r4, #0]
 800c31a:	b91e      	cbnz	r6, 800c324 <_printf_i+0x1a4>
 800c31c:	6823      	ldr	r3, [r4, #0]
 800c31e:	f023 0320 	bic.w	r3, r3, #32
 800c322:	6023      	str	r3, [r4, #0]
 800c324:	2310      	movs	r3, #16
 800c326:	e7a7      	b.n	800c278 <_printf_i+0xf8>
 800c328:	4824      	ldr	r0, [pc, #144]	; (800c3bc <_printf_i+0x23c>)
 800c32a:	e7e4      	b.n	800c2f6 <_printf_i+0x176>
 800c32c:	4615      	mov	r5, r2
 800c32e:	e7bd      	b.n	800c2ac <_printf_i+0x12c>
 800c330:	682b      	ldr	r3, [r5, #0]
 800c332:	6826      	ldr	r6, [r4, #0]
 800c334:	6961      	ldr	r1, [r4, #20]
 800c336:	1d18      	adds	r0, r3, #4
 800c338:	6028      	str	r0, [r5, #0]
 800c33a:	0635      	lsls	r5, r6, #24
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	d501      	bpl.n	800c344 <_printf_i+0x1c4>
 800c340:	6019      	str	r1, [r3, #0]
 800c342:	e002      	b.n	800c34a <_printf_i+0x1ca>
 800c344:	0670      	lsls	r0, r6, #25
 800c346:	d5fb      	bpl.n	800c340 <_printf_i+0x1c0>
 800c348:	8019      	strh	r1, [r3, #0]
 800c34a:	2300      	movs	r3, #0
 800c34c:	6123      	str	r3, [r4, #16]
 800c34e:	4615      	mov	r5, r2
 800c350:	e7bc      	b.n	800c2cc <_printf_i+0x14c>
 800c352:	682b      	ldr	r3, [r5, #0]
 800c354:	1d1a      	adds	r2, r3, #4
 800c356:	602a      	str	r2, [r5, #0]
 800c358:	681d      	ldr	r5, [r3, #0]
 800c35a:	6862      	ldr	r2, [r4, #4]
 800c35c:	2100      	movs	r1, #0
 800c35e:	4628      	mov	r0, r5
 800c360:	f7f3 ff36 	bl	80001d0 <memchr>
 800c364:	b108      	cbz	r0, 800c36a <_printf_i+0x1ea>
 800c366:	1b40      	subs	r0, r0, r5
 800c368:	6060      	str	r0, [r4, #4]
 800c36a:	6863      	ldr	r3, [r4, #4]
 800c36c:	6123      	str	r3, [r4, #16]
 800c36e:	2300      	movs	r3, #0
 800c370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c374:	e7aa      	b.n	800c2cc <_printf_i+0x14c>
 800c376:	6923      	ldr	r3, [r4, #16]
 800c378:	462a      	mov	r2, r5
 800c37a:	4649      	mov	r1, r9
 800c37c:	4640      	mov	r0, r8
 800c37e:	47d0      	blx	sl
 800c380:	3001      	adds	r0, #1
 800c382:	d0ad      	beq.n	800c2e0 <_printf_i+0x160>
 800c384:	6823      	ldr	r3, [r4, #0]
 800c386:	079b      	lsls	r3, r3, #30
 800c388:	d413      	bmi.n	800c3b2 <_printf_i+0x232>
 800c38a:	68e0      	ldr	r0, [r4, #12]
 800c38c:	9b03      	ldr	r3, [sp, #12]
 800c38e:	4298      	cmp	r0, r3
 800c390:	bfb8      	it	lt
 800c392:	4618      	movlt	r0, r3
 800c394:	e7a6      	b.n	800c2e4 <_printf_i+0x164>
 800c396:	2301      	movs	r3, #1
 800c398:	4632      	mov	r2, r6
 800c39a:	4649      	mov	r1, r9
 800c39c:	4640      	mov	r0, r8
 800c39e:	47d0      	blx	sl
 800c3a0:	3001      	adds	r0, #1
 800c3a2:	d09d      	beq.n	800c2e0 <_printf_i+0x160>
 800c3a4:	3501      	adds	r5, #1
 800c3a6:	68e3      	ldr	r3, [r4, #12]
 800c3a8:	9903      	ldr	r1, [sp, #12]
 800c3aa:	1a5b      	subs	r3, r3, r1
 800c3ac:	42ab      	cmp	r3, r5
 800c3ae:	dcf2      	bgt.n	800c396 <_printf_i+0x216>
 800c3b0:	e7eb      	b.n	800c38a <_printf_i+0x20a>
 800c3b2:	2500      	movs	r5, #0
 800c3b4:	f104 0619 	add.w	r6, r4, #25
 800c3b8:	e7f5      	b.n	800c3a6 <_printf_i+0x226>
 800c3ba:	bf00      	nop
 800c3bc:	0800e52a 	.word	0x0800e52a
 800c3c0:	0800e53b 	.word	0x0800e53b

0800c3c4 <std>:
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	b510      	push	{r4, lr}
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	e9c0 3300 	strd	r3, r3, [r0]
 800c3ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c3d2:	6083      	str	r3, [r0, #8]
 800c3d4:	8181      	strh	r1, [r0, #12]
 800c3d6:	6643      	str	r3, [r0, #100]	; 0x64
 800c3d8:	81c2      	strh	r2, [r0, #14]
 800c3da:	6183      	str	r3, [r0, #24]
 800c3dc:	4619      	mov	r1, r3
 800c3de:	2208      	movs	r2, #8
 800c3e0:	305c      	adds	r0, #92	; 0x5c
 800c3e2:	f000 f8e2 	bl	800c5aa <memset>
 800c3e6:	4b05      	ldr	r3, [pc, #20]	; (800c3fc <std+0x38>)
 800c3e8:	6263      	str	r3, [r4, #36]	; 0x24
 800c3ea:	4b05      	ldr	r3, [pc, #20]	; (800c400 <std+0x3c>)
 800c3ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800c3ee:	4b05      	ldr	r3, [pc, #20]	; (800c404 <std+0x40>)
 800c3f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c3f2:	4b05      	ldr	r3, [pc, #20]	; (800c408 <std+0x44>)
 800c3f4:	6224      	str	r4, [r4, #32]
 800c3f6:	6323      	str	r3, [r4, #48]	; 0x30
 800c3f8:	bd10      	pop	{r4, pc}
 800c3fa:	bf00      	nop
 800c3fc:	0800c525 	.word	0x0800c525
 800c400:	0800c547 	.word	0x0800c547
 800c404:	0800c57f 	.word	0x0800c57f
 800c408:	0800c5a3 	.word	0x0800c5a3

0800c40c <stdio_exit_handler>:
 800c40c:	4a02      	ldr	r2, [pc, #8]	; (800c418 <stdio_exit_handler+0xc>)
 800c40e:	4903      	ldr	r1, [pc, #12]	; (800c41c <stdio_exit_handler+0x10>)
 800c410:	4803      	ldr	r0, [pc, #12]	; (800c420 <stdio_exit_handler+0x14>)
 800c412:	f000 b869 	b.w	800c4e8 <_fwalk_sglue>
 800c416:	bf00      	nop
 800c418:	20000118 	.word	0x20000118
 800c41c:	0800dda1 	.word	0x0800dda1
 800c420:	20000124 	.word	0x20000124

0800c424 <cleanup_stdio>:
 800c424:	6841      	ldr	r1, [r0, #4]
 800c426:	4b0c      	ldr	r3, [pc, #48]	; (800c458 <cleanup_stdio+0x34>)
 800c428:	4299      	cmp	r1, r3
 800c42a:	b510      	push	{r4, lr}
 800c42c:	4604      	mov	r4, r0
 800c42e:	d001      	beq.n	800c434 <cleanup_stdio+0x10>
 800c430:	f001 fcb6 	bl	800dda0 <_fflush_r>
 800c434:	68a1      	ldr	r1, [r4, #8]
 800c436:	4b09      	ldr	r3, [pc, #36]	; (800c45c <cleanup_stdio+0x38>)
 800c438:	4299      	cmp	r1, r3
 800c43a:	d002      	beq.n	800c442 <cleanup_stdio+0x1e>
 800c43c:	4620      	mov	r0, r4
 800c43e:	f001 fcaf 	bl	800dda0 <_fflush_r>
 800c442:	68e1      	ldr	r1, [r4, #12]
 800c444:	4b06      	ldr	r3, [pc, #24]	; (800c460 <cleanup_stdio+0x3c>)
 800c446:	4299      	cmp	r1, r3
 800c448:	d004      	beq.n	800c454 <cleanup_stdio+0x30>
 800c44a:	4620      	mov	r0, r4
 800c44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c450:	f001 bca6 	b.w	800dda0 <_fflush_r>
 800c454:	bd10      	pop	{r4, pc}
 800c456:	bf00      	nop
 800c458:	20000fd8 	.word	0x20000fd8
 800c45c:	20001040 	.word	0x20001040
 800c460:	200010a8 	.word	0x200010a8

0800c464 <global_stdio_init.part.0>:
 800c464:	b510      	push	{r4, lr}
 800c466:	4b0b      	ldr	r3, [pc, #44]	; (800c494 <global_stdio_init.part.0+0x30>)
 800c468:	4c0b      	ldr	r4, [pc, #44]	; (800c498 <global_stdio_init.part.0+0x34>)
 800c46a:	4a0c      	ldr	r2, [pc, #48]	; (800c49c <global_stdio_init.part.0+0x38>)
 800c46c:	601a      	str	r2, [r3, #0]
 800c46e:	4620      	mov	r0, r4
 800c470:	2200      	movs	r2, #0
 800c472:	2104      	movs	r1, #4
 800c474:	f7ff ffa6 	bl	800c3c4 <std>
 800c478:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c47c:	2201      	movs	r2, #1
 800c47e:	2109      	movs	r1, #9
 800c480:	f7ff ffa0 	bl	800c3c4 <std>
 800c484:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c488:	2202      	movs	r2, #2
 800c48a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c48e:	2112      	movs	r1, #18
 800c490:	f7ff bf98 	b.w	800c3c4 <std>
 800c494:	20001110 	.word	0x20001110
 800c498:	20000fd8 	.word	0x20000fd8
 800c49c:	0800c40d 	.word	0x0800c40d

0800c4a0 <__sfp_lock_acquire>:
 800c4a0:	4801      	ldr	r0, [pc, #4]	; (800c4a8 <__sfp_lock_acquire+0x8>)
 800c4a2:	f000 b8ff 	b.w	800c6a4 <__retarget_lock_acquire_recursive>
 800c4a6:	bf00      	nop
 800c4a8:	20001119 	.word	0x20001119

0800c4ac <__sfp_lock_release>:
 800c4ac:	4801      	ldr	r0, [pc, #4]	; (800c4b4 <__sfp_lock_release+0x8>)
 800c4ae:	f000 b8fa 	b.w	800c6a6 <__retarget_lock_release_recursive>
 800c4b2:	bf00      	nop
 800c4b4:	20001119 	.word	0x20001119

0800c4b8 <__sinit>:
 800c4b8:	b510      	push	{r4, lr}
 800c4ba:	4604      	mov	r4, r0
 800c4bc:	f7ff fff0 	bl	800c4a0 <__sfp_lock_acquire>
 800c4c0:	6a23      	ldr	r3, [r4, #32]
 800c4c2:	b11b      	cbz	r3, 800c4cc <__sinit+0x14>
 800c4c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c4c8:	f7ff bff0 	b.w	800c4ac <__sfp_lock_release>
 800c4cc:	4b04      	ldr	r3, [pc, #16]	; (800c4e0 <__sinit+0x28>)
 800c4ce:	6223      	str	r3, [r4, #32]
 800c4d0:	4b04      	ldr	r3, [pc, #16]	; (800c4e4 <__sinit+0x2c>)
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d1f5      	bne.n	800c4c4 <__sinit+0xc>
 800c4d8:	f7ff ffc4 	bl	800c464 <global_stdio_init.part.0>
 800c4dc:	e7f2      	b.n	800c4c4 <__sinit+0xc>
 800c4de:	bf00      	nop
 800c4e0:	0800c425 	.word	0x0800c425
 800c4e4:	20001110 	.word	0x20001110

0800c4e8 <_fwalk_sglue>:
 800c4e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c4ec:	4607      	mov	r7, r0
 800c4ee:	4688      	mov	r8, r1
 800c4f0:	4614      	mov	r4, r2
 800c4f2:	2600      	movs	r6, #0
 800c4f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c4f8:	f1b9 0901 	subs.w	r9, r9, #1
 800c4fc:	d505      	bpl.n	800c50a <_fwalk_sglue+0x22>
 800c4fe:	6824      	ldr	r4, [r4, #0]
 800c500:	2c00      	cmp	r4, #0
 800c502:	d1f7      	bne.n	800c4f4 <_fwalk_sglue+0xc>
 800c504:	4630      	mov	r0, r6
 800c506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c50a:	89ab      	ldrh	r3, [r5, #12]
 800c50c:	2b01      	cmp	r3, #1
 800c50e:	d907      	bls.n	800c520 <_fwalk_sglue+0x38>
 800c510:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c514:	3301      	adds	r3, #1
 800c516:	d003      	beq.n	800c520 <_fwalk_sglue+0x38>
 800c518:	4629      	mov	r1, r5
 800c51a:	4638      	mov	r0, r7
 800c51c:	47c0      	blx	r8
 800c51e:	4306      	orrs	r6, r0
 800c520:	3568      	adds	r5, #104	; 0x68
 800c522:	e7e9      	b.n	800c4f8 <_fwalk_sglue+0x10>

0800c524 <__sread>:
 800c524:	b510      	push	{r4, lr}
 800c526:	460c      	mov	r4, r1
 800c528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c52c:	f000 f86c 	bl	800c608 <_read_r>
 800c530:	2800      	cmp	r0, #0
 800c532:	bfab      	itete	ge
 800c534:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c536:	89a3      	ldrhlt	r3, [r4, #12]
 800c538:	181b      	addge	r3, r3, r0
 800c53a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c53e:	bfac      	ite	ge
 800c540:	6563      	strge	r3, [r4, #84]	; 0x54
 800c542:	81a3      	strhlt	r3, [r4, #12]
 800c544:	bd10      	pop	{r4, pc}

0800c546 <__swrite>:
 800c546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c54a:	461f      	mov	r7, r3
 800c54c:	898b      	ldrh	r3, [r1, #12]
 800c54e:	05db      	lsls	r3, r3, #23
 800c550:	4605      	mov	r5, r0
 800c552:	460c      	mov	r4, r1
 800c554:	4616      	mov	r6, r2
 800c556:	d505      	bpl.n	800c564 <__swrite+0x1e>
 800c558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c55c:	2302      	movs	r3, #2
 800c55e:	2200      	movs	r2, #0
 800c560:	f000 f840 	bl	800c5e4 <_lseek_r>
 800c564:	89a3      	ldrh	r3, [r4, #12]
 800c566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c56a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c56e:	81a3      	strh	r3, [r4, #12]
 800c570:	4632      	mov	r2, r6
 800c572:	463b      	mov	r3, r7
 800c574:	4628      	mov	r0, r5
 800c576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c57a:	f000 b857 	b.w	800c62c <_write_r>

0800c57e <__sseek>:
 800c57e:	b510      	push	{r4, lr}
 800c580:	460c      	mov	r4, r1
 800c582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c586:	f000 f82d 	bl	800c5e4 <_lseek_r>
 800c58a:	1c43      	adds	r3, r0, #1
 800c58c:	89a3      	ldrh	r3, [r4, #12]
 800c58e:	bf15      	itete	ne
 800c590:	6560      	strne	r0, [r4, #84]	; 0x54
 800c592:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c596:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c59a:	81a3      	strheq	r3, [r4, #12]
 800c59c:	bf18      	it	ne
 800c59e:	81a3      	strhne	r3, [r4, #12]
 800c5a0:	bd10      	pop	{r4, pc}

0800c5a2 <__sclose>:
 800c5a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5a6:	f000 b80d 	b.w	800c5c4 <_close_r>

0800c5aa <memset>:
 800c5aa:	4402      	add	r2, r0
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d100      	bne.n	800c5b4 <memset+0xa>
 800c5b2:	4770      	bx	lr
 800c5b4:	f803 1b01 	strb.w	r1, [r3], #1
 800c5b8:	e7f9      	b.n	800c5ae <memset+0x4>
	...

0800c5bc <_localeconv_r>:
 800c5bc:	4800      	ldr	r0, [pc, #0]	; (800c5c0 <_localeconv_r+0x4>)
 800c5be:	4770      	bx	lr
 800c5c0:	20000264 	.word	0x20000264

0800c5c4 <_close_r>:
 800c5c4:	b538      	push	{r3, r4, r5, lr}
 800c5c6:	4d06      	ldr	r5, [pc, #24]	; (800c5e0 <_close_r+0x1c>)
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	4604      	mov	r4, r0
 800c5cc:	4608      	mov	r0, r1
 800c5ce:	602b      	str	r3, [r5, #0]
 800c5d0:	f7f5 ff8b 	bl	80024ea <_close>
 800c5d4:	1c43      	adds	r3, r0, #1
 800c5d6:	d102      	bne.n	800c5de <_close_r+0x1a>
 800c5d8:	682b      	ldr	r3, [r5, #0]
 800c5da:	b103      	cbz	r3, 800c5de <_close_r+0x1a>
 800c5dc:	6023      	str	r3, [r4, #0]
 800c5de:	bd38      	pop	{r3, r4, r5, pc}
 800c5e0:	20001114 	.word	0x20001114

0800c5e4 <_lseek_r>:
 800c5e4:	b538      	push	{r3, r4, r5, lr}
 800c5e6:	4d07      	ldr	r5, [pc, #28]	; (800c604 <_lseek_r+0x20>)
 800c5e8:	4604      	mov	r4, r0
 800c5ea:	4608      	mov	r0, r1
 800c5ec:	4611      	mov	r1, r2
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	602a      	str	r2, [r5, #0]
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	f7f5 ffa0 	bl	8002538 <_lseek>
 800c5f8:	1c43      	adds	r3, r0, #1
 800c5fa:	d102      	bne.n	800c602 <_lseek_r+0x1e>
 800c5fc:	682b      	ldr	r3, [r5, #0]
 800c5fe:	b103      	cbz	r3, 800c602 <_lseek_r+0x1e>
 800c600:	6023      	str	r3, [r4, #0]
 800c602:	bd38      	pop	{r3, r4, r5, pc}
 800c604:	20001114 	.word	0x20001114

0800c608 <_read_r>:
 800c608:	b538      	push	{r3, r4, r5, lr}
 800c60a:	4d07      	ldr	r5, [pc, #28]	; (800c628 <_read_r+0x20>)
 800c60c:	4604      	mov	r4, r0
 800c60e:	4608      	mov	r0, r1
 800c610:	4611      	mov	r1, r2
 800c612:	2200      	movs	r2, #0
 800c614:	602a      	str	r2, [r5, #0]
 800c616:	461a      	mov	r2, r3
 800c618:	f7f5 ff2e 	bl	8002478 <_read>
 800c61c:	1c43      	adds	r3, r0, #1
 800c61e:	d102      	bne.n	800c626 <_read_r+0x1e>
 800c620:	682b      	ldr	r3, [r5, #0]
 800c622:	b103      	cbz	r3, 800c626 <_read_r+0x1e>
 800c624:	6023      	str	r3, [r4, #0]
 800c626:	bd38      	pop	{r3, r4, r5, pc}
 800c628:	20001114 	.word	0x20001114

0800c62c <_write_r>:
 800c62c:	b538      	push	{r3, r4, r5, lr}
 800c62e:	4d07      	ldr	r5, [pc, #28]	; (800c64c <_write_r+0x20>)
 800c630:	4604      	mov	r4, r0
 800c632:	4608      	mov	r0, r1
 800c634:	4611      	mov	r1, r2
 800c636:	2200      	movs	r2, #0
 800c638:	602a      	str	r2, [r5, #0]
 800c63a:	461a      	mov	r2, r3
 800c63c:	f7f5 ff39 	bl	80024b2 <_write>
 800c640:	1c43      	adds	r3, r0, #1
 800c642:	d102      	bne.n	800c64a <_write_r+0x1e>
 800c644:	682b      	ldr	r3, [r5, #0]
 800c646:	b103      	cbz	r3, 800c64a <_write_r+0x1e>
 800c648:	6023      	str	r3, [r4, #0]
 800c64a:	bd38      	pop	{r3, r4, r5, pc}
 800c64c:	20001114 	.word	0x20001114

0800c650 <__errno>:
 800c650:	4b01      	ldr	r3, [pc, #4]	; (800c658 <__errno+0x8>)
 800c652:	6818      	ldr	r0, [r3, #0]
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	20000170 	.word	0x20000170

0800c65c <__libc_init_array>:
 800c65c:	b570      	push	{r4, r5, r6, lr}
 800c65e:	4d0d      	ldr	r5, [pc, #52]	; (800c694 <__libc_init_array+0x38>)
 800c660:	4c0d      	ldr	r4, [pc, #52]	; (800c698 <__libc_init_array+0x3c>)
 800c662:	1b64      	subs	r4, r4, r5
 800c664:	10a4      	asrs	r4, r4, #2
 800c666:	2600      	movs	r6, #0
 800c668:	42a6      	cmp	r6, r4
 800c66a:	d109      	bne.n	800c680 <__libc_init_array+0x24>
 800c66c:	4d0b      	ldr	r5, [pc, #44]	; (800c69c <__libc_init_array+0x40>)
 800c66e:	4c0c      	ldr	r4, [pc, #48]	; (800c6a0 <__libc_init_array+0x44>)
 800c670:	f001 feea 	bl	800e448 <_init>
 800c674:	1b64      	subs	r4, r4, r5
 800c676:	10a4      	asrs	r4, r4, #2
 800c678:	2600      	movs	r6, #0
 800c67a:	42a6      	cmp	r6, r4
 800c67c:	d105      	bne.n	800c68a <__libc_init_array+0x2e>
 800c67e:	bd70      	pop	{r4, r5, r6, pc}
 800c680:	f855 3b04 	ldr.w	r3, [r5], #4
 800c684:	4798      	blx	r3
 800c686:	3601      	adds	r6, #1
 800c688:	e7ee      	b.n	800c668 <__libc_init_array+0xc>
 800c68a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c68e:	4798      	blx	r3
 800c690:	3601      	adds	r6, #1
 800c692:	e7f2      	b.n	800c67a <__libc_init_array+0x1e>
 800c694:	0800e894 	.word	0x0800e894
 800c698:	0800e894 	.word	0x0800e894
 800c69c:	0800e894 	.word	0x0800e894
 800c6a0:	0800e898 	.word	0x0800e898

0800c6a4 <__retarget_lock_acquire_recursive>:
 800c6a4:	4770      	bx	lr

0800c6a6 <__retarget_lock_release_recursive>:
 800c6a6:	4770      	bx	lr

0800c6a8 <quorem>:
 800c6a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ac:	6903      	ldr	r3, [r0, #16]
 800c6ae:	690c      	ldr	r4, [r1, #16]
 800c6b0:	42a3      	cmp	r3, r4
 800c6b2:	4607      	mov	r7, r0
 800c6b4:	db7e      	blt.n	800c7b4 <quorem+0x10c>
 800c6b6:	3c01      	subs	r4, #1
 800c6b8:	f101 0814 	add.w	r8, r1, #20
 800c6bc:	f100 0514 	add.w	r5, r0, #20
 800c6c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6c4:	9301      	str	r3, [sp, #4]
 800c6c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c6ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6ce:	3301      	adds	r3, #1
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c6d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c6da:	fbb2 f6f3 	udiv	r6, r2, r3
 800c6de:	d331      	bcc.n	800c744 <quorem+0x9c>
 800c6e0:	f04f 0e00 	mov.w	lr, #0
 800c6e4:	4640      	mov	r0, r8
 800c6e6:	46ac      	mov	ip, r5
 800c6e8:	46f2      	mov	sl, lr
 800c6ea:	f850 2b04 	ldr.w	r2, [r0], #4
 800c6ee:	b293      	uxth	r3, r2
 800c6f0:	fb06 e303 	mla	r3, r6, r3, lr
 800c6f4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c6f8:	0c1a      	lsrs	r2, r3, #16
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	ebaa 0303 	sub.w	r3, sl, r3
 800c700:	f8dc a000 	ldr.w	sl, [ip]
 800c704:	fa13 f38a 	uxtah	r3, r3, sl
 800c708:	fb06 220e 	mla	r2, r6, lr, r2
 800c70c:	9300      	str	r3, [sp, #0]
 800c70e:	9b00      	ldr	r3, [sp, #0]
 800c710:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c714:	b292      	uxth	r2, r2
 800c716:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c71a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c71e:	f8bd 3000 	ldrh.w	r3, [sp]
 800c722:	4581      	cmp	r9, r0
 800c724:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c728:	f84c 3b04 	str.w	r3, [ip], #4
 800c72c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c730:	d2db      	bcs.n	800c6ea <quorem+0x42>
 800c732:	f855 300b 	ldr.w	r3, [r5, fp]
 800c736:	b92b      	cbnz	r3, 800c744 <quorem+0x9c>
 800c738:	9b01      	ldr	r3, [sp, #4]
 800c73a:	3b04      	subs	r3, #4
 800c73c:	429d      	cmp	r5, r3
 800c73e:	461a      	mov	r2, r3
 800c740:	d32c      	bcc.n	800c79c <quorem+0xf4>
 800c742:	613c      	str	r4, [r7, #16]
 800c744:	4638      	mov	r0, r7
 800c746:	f001 f9a5 	bl	800da94 <__mcmp>
 800c74a:	2800      	cmp	r0, #0
 800c74c:	db22      	blt.n	800c794 <quorem+0xec>
 800c74e:	3601      	adds	r6, #1
 800c750:	4629      	mov	r1, r5
 800c752:	2000      	movs	r0, #0
 800c754:	f858 2b04 	ldr.w	r2, [r8], #4
 800c758:	f8d1 c000 	ldr.w	ip, [r1]
 800c75c:	b293      	uxth	r3, r2
 800c75e:	1ac3      	subs	r3, r0, r3
 800c760:	0c12      	lsrs	r2, r2, #16
 800c762:	fa13 f38c 	uxtah	r3, r3, ip
 800c766:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c76a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c76e:	b29b      	uxth	r3, r3
 800c770:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c774:	45c1      	cmp	r9, r8
 800c776:	f841 3b04 	str.w	r3, [r1], #4
 800c77a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c77e:	d2e9      	bcs.n	800c754 <quorem+0xac>
 800c780:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c784:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c788:	b922      	cbnz	r2, 800c794 <quorem+0xec>
 800c78a:	3b04      	subs	r3, #4
 800c78c:	429d      	cmp	r5, r3
 800c78e:	461a      	mov	r2, r3
 800c790:	d30a      	bcc.n	800c7a8 <quorem+0x100>
 800c792:	613c      	str	r4, [r7, #16]
 800c794:	4630      	mov	r0, r6
 800c796:	b003      	add	sp, #12
 800c798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c79c:	6812      	ldr	r2, [r2, #0]
 800c79e:	3b04      	subs	r3, #4
 800c7a0:	2a00      	cmp	r2, #0
 800c7a2:	d1ce      	bne.n	800c742 <quorem+0x9a>
 800c7a4:	3c01      	subs	r4, #1
 800c7a6:	e7c9      	b.n	800c73c <quorem+0x94>
 800c7a8:	6812      	ldr	r2, [r2, #0]
 800c7aa:	3b04      	subs	r3, #4
 800c7ac:	2a00      	cmp	r2, #0
 800c7ae:	d1f0      	bne.n	800c792 <quorem+0xea>
 800c7b0:	3c01      	subs	r4, #1
 800c7b2:	e7eb      	b.n	800c78c <quorem+0xe4>
 800c7b4:	2000      	movs	r0, #0
 800c7b6:	e7ee      	b.n	800c796 <quorem+0xee>

0800c7b8 <_dtoa_r>:
 800c7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7bc:	ed2d 8b04 	vpush	{d8-d9}
 800c7c0:	69c5      	ldr	r5, [r0, #28]
 800c7c2:	b093      	sub	sp, #76	; 0x4c
 800c7c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c7c8:	ec57 6b10 	vmov	r6, r7, d0
 800c7cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c7d0:	9107      	str	r1, [sp, #28]
 800c7d2:	4604      	mov	r4, r0
 800c7d4:	920a      	str	r2, [sp, #40]	; 0x28
 800c7d6:	930d      	str	r3, [sp, #52]	; 0x34
 800c7d8:	b975      	cbnz	r5, 800c7f8 <_dtoa_r+0x40>
 800c7da:	2010      	movs	r0, #16
 800c7dc:	f000 fe2a 	bl	800d434 <malloc>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	61e0      	str	r0, [r4, #28]
 800c7e4:	b920      	cbnz	r0, 800c7f0 <_dtoa_r+0x38>
 800c7e6:	4bae      	ldr	r3, [pc, #696]	; (800caa0 <_dtoa_r+0x2e8>)
 800c7e8:	21ef      	movs	r1, #239	; 0xef
 800c7ea:	48ae      	ldr	r0, [pc, #696]	; (800caa4 <_dtoa_r+0x2ec>)
 800c7ec:	f001 fb1e 	bl	800de2c <__assert_func>
 800c7f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c7f4:	6005      	str	r5, [r0, #0]
 800c7f6:	60c5      	str	r5, [r0, #12]
 800c7f8:	69e3      	ldr	r3, [r4, #28]
 800c7fa:	6819      	ldr	r1, [r3, #0]
 800c7fc:	b151      	cbz	r1, 800c814 <_dtoa_r+0x5c>
 800c7fe:	685a      	ldr	r2, [r3, #4]
 800c800:	604a      	str	r2, [r1, #4]
 800c802:	2301      	movs	r3, #1
 800c804:	4093      	lsls	r3, r2
 800c806:	608b      	str	r3, [r1, #8]
 800c808:	4620      	mov	r0, r4
 800c80a:	f000 ff07 	bl	800d61c <_Bfree>
 800c80e:	69e3      	ldr	r3, [r4, #28]
 800c810:	2200      	movs	r2, #0
 800c812:	601a      	str	r2, [r3, #0]
 800c814:	1e3b      	subs	r3, r7, #0
 800c816:	bfbb      	ittet	lt
 800c818:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c81c:	9303      	strlt	r3, [sp, #12]
 800c81e:	2300      	movge	r3, #0
 800c820:	2201      	movlt	r2, #1
 800c822:	bfac      	ite	ge
 800c824:	f8c8 3000 	strge.w	r3, [r8]
 800c828:	f8c8 2000 	strlt.w	r2, [r8]
 800c82c:	4b9e      	ldr	r3, [pc, #632]	; (800caa8 <_dtoa_r+0x2f0>)
 800c82e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c832:	ea33 0308 	bics.w	r3, r3, r8
 800c836:	d11b      	bne.n	800c870 <_dtoa_r+0xb8>
 800c838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c83a:	f242 730f 	movw	r3, #9999	; 0x270f
 800c83e:	6013      	str	r3, [r2, #0]
 800c840:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c844:	4333      	orrs	r3, r6
 800c846:	f000 8593 	beq.w	800d370 <_dtoa_r+0xbb8>
 800c84a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c84c:	b963      	cbnz	r3, 800c868 <_dtoa_r+0xb0>
 800c84e:	4b97      	ldr	r3, [pc, #604]	; (800caac <_dtoa_r+0x2f4>)
 800c850:	e027      	b.n	800c8a2 <_dtoa_r+0xea>
 800c852:	4b97      	ldr	r3, [pc, #604]	; (800cab0 <_dtoa_r+0x2f8>)
 800c854:	9300      	str	r3, [sp, #0]
 800c856:	3308      	adds	r3, #8
 800c858:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c85a:	6013      	str	r3, [r2, #0]
 800c85c:	9800      	ldr	r0, [sp, #0]
 800c85e:	b013      	add	sp, #76	; 0x4c
 800c860:	ecbd 8b04 	vpop	{d8-d9}
 800c864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c868:	4b90      	ldr	r3, [pc, #576]	; (800caac <_dtoa_r+0x2f4>)
 800c86a:	9300      	str	r3, [sp, #0]
 800c86c:	3303      	adds	r3, #3
 800c86e:	e7f3      	b.n	800c858 <_dtoa_r+0xa0>
 800c870:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c874:	2200      	movs	r2, #0
 800c876:	ec51 0b17 	vmov	r0, r1, d7
 800c87a:	eeb0 8a47 	vmov.f32	s16, s14
 800c87e:	eef0 8a67 	vmov.f32	s17, s15
 800c882:	2300      	movs	r3, #0
 800c884:	f7f4 f920 	bl	8000ac8 <__aeabi_dcmpeq>
 800c888:	4681      	mov	r9, r0
 800c88a:	b160      	cbz	r0, 800c8a6 <_dtoa_r+0xee>
 800c88c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c88e:	2301      	movs	r3, #1
 800c890:	6013      	str	r3, [r2, #0]
 800c892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c894:	2b00      	cmp	r3, #0
 800c896:	f000 8568 	beq.w	800d36a <_dtoa_r+0xbb2>
 800c89a:	4b86      	ldr	r3, [pc, #536]	; (800cab4 <_dtoa_r+0x2fc>)
 800c89c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c89e:	6013      	str	r3, [r2, #0]
 800c8a0:	3b01      	subs	r3, #1
 800c8a2:	9300      	str	r3, [sp, #0]
 800c8a4:	e7da      	b.n	800c85c <_dtoa_r+0xa4>
 800c8a6:	aa10      	add	r2, sp, #64	; 0x40
 800c8a8:	a911      	add	r1, sp, #68	; 0x44
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	eeb0 0a48 	vmov.f32	s0, s16
 800c8b0:	eef0 0a68 	vmov.f32	s1, s17
 800c8b4:	f001 f994 	bl	800dbe0 <__d2b>
 800c8b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c8bc:	4682      	mov	sl, r0
 800c8be:	2d00      	cmp	r5, #0
 800c8c0:	d07f      	beq.n	800c9c2 <_dtoa_r+0x20a>
 800c8c2:	ee18 3a90 	vmov	r3, s17
 800c8c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c8ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c8ce:	ec51 0b18 	vmov	r0, r1, d8
 800c8d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c8d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c8da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c8de:	4619      	mov	r1, r3
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	4b75      	ldr	r3, [pc, #468]	; (800cab8 <_dtoa_r+0x300>)
 800c8e4:	f7f3 fcd0 	bl	8000288 <__aeabi_dsub>
 800c8e8:	a367      	add	r3, pc, #412	; (adr r3, 800ca88 <_dtoa_r+0x2d0>)
 800c8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ee:	f7f3 fe83 	bl	80005f8 <__aeabi_dmul>
 800c8f2:	a367      	add	r3, pc, #412	; (adr r3, 800ca90 <_dtoa_r+0x2d8>)
 800c8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8f8:	f7f3 fcc8 	bl	800028c <__adddf3>
 800c8fc:	4606      	mov	r6, r0
 800c8fe:	4628      	mov	r0, r5
 800c900:	460f      	mov	r7, r1
 800c902:	f7f3 fe0f 	bl	8000524 <__aeabi_i2d>
 800c906:	a364      	add	r3, pc, #400	; (adr r3, 800ca98 <_dtoa_r+0x2e0>)
 800c908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c90c:	f7f3 fe74 	bl	80005f8 <__aeabi_dmul>
 800c910:	4602      	mov	r2, r0
 800c912:	460b      	mov	r3, r1
 800c914:	4630      	mov	r0, r6
 800c916:	4639      	mov	r1, r7
 800c918:	f7f3 fcb8 	bl	800028c <__adddf3>
 800c91c:	4606      	mov	r6, r0
 800c91e:	460f      	mov	r7, r1
 800c920:	f7f4 f91a 	bl	8000b58 <__aeabi_d2iz>
 800c924:	2200      	movs	r2, #0
 800c926:	4683      	mov	fp, r0
 800c928:	2300      	movs	r3, #0
 800c92a:	4630      	mov	r0, r6
 800c92c:	4639      	mov	r1, r7
 800c92e:	f7f4 f8d5 	bl	8000adc <__aeabi_dcmplt>
 800c932:	b148      	cbz	r0, 800c948 <_dtoa_r+0x190>
 800c934:	4658      	mov	r0, fp
 800c936:	f7f3 fdf5 	bl	8000524 <__aeabi_i2d>
 800c93a:	4632      	mov	r2, r6
 800c93c:	463b      	mov	r3, r7
 800c93e:	f7f4 f8c3 	bl	8000ac8 <__aeabi_dcmpeq>
 800c942:	b908      	cbnz	r0, 800c948 <_dtoa_r+0x190>
 800c944:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c948:	f1bb 0f16 	cmp.w	fp, #22
 800c94c:	d857      	bhi.n	800c9fe <_dtoa_r+0x246>
 800c94e:	4b5b      	ldr	r3, [pc, #364]	; (800cabc <_dtoa_r+0x304>)
 800c950:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c958:	ec51 0b18 	vmov	r0, r1, d8
 800c95c:	f7f4 f8be 	bl	8000adc <__aeabi_dcmplt>
 800c960:	2800      	cmp	r0, #0
 800c962:	d04e      	beq.n	800ca02 <_dtoa_r+0x24a>
 800c964:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c968:	2300      	movs	r3, #0
 800c96a:	930c      	str	r3, [sp, #48]	; 0x30
 800c96c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c96e:	1b5b      	subs	r3, r3, r5
 800c970:	1e5a      	subs	r2, r3, #1
 800c972:	bf45      	ittet	mi
 800c974:	f1c3 0301 	rsbmi	r3, r3, #1
 800c978:	9305      	strmi	r3, [sp, #20]
 800c97a:	2300      	movpl	r3, #0
 800c97c:	2300      	movmi	r3, #0
 800c97e:	9206      	str	r2, [sp, #24]
 800c980:	bf54      	ite	pl
 800c982:	9305      	strpl	r3, [sp, #20]
 800c984:	9306      	strmi	r3, [sp, #24]
 800c986:	f1bb 0f00 	cmp.w	fp, #0
 800c98a:	db3c      	blt.n	800ca06 <_dtoa_r+0x24e>
 800c98c:	9b06      	ldr	r3, [sp, #24]
 800c98e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c992:	445b      	add	r3, fp
 800c994:	9306      	str	r3, [sp, #24]
 800c996:	2300      	movs	r3, #0
 800c998:	9308      	str	r3, [sp, #32]
 800c99a:	9b07      	ldr	r3, [sp, #28]
 800c99c:	2b09      	cmp	r3, #9
 800c99e:	d868      	bhi.n	800ca72 <_dtoa_r+0x2ba>
 800c9a0:	2b05      	cmp	r3, #5
 800c9a2:	bfc4      	itt	gt
 800c9a4:	3b04      	subgt	r3, #4
 800c9a6:	9307      	strgt	r3, [sp, #28]
 800c9a8:	9b07      	ldr	r3, [sp, #28]
 800c9aa:	f1a3 0302 	sub.w	r3, r3, #2
 800c9ae:	bfcc      	ite	gt
 800c9b0:	2500      	movgt	r5, #0
 800c9b2:	2501      	movle	r5, #1
 800c9b4:	2b03      	cmp	r3, #3
 800c9b6:	f200 8085 	bhi.w	800cac4 <_dtoa_r+0x30c>
 800c9ba:	e8df f003 	tbb	[pc, r3]
 800c9be:	3b2e      	.short	0x3b2e
 800c9c0:	5839      	.short	0x5839
 800c9c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c9c6:	441d      	add	r5, r3
 800c9c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c9cc:	2b20      	cmp	r3, #32
 800c9ce:	bfc1      	itttt	gt
 800c9d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c9d4:	fa08 f803 	lslgt.w	r8, r8, r3
 800c9d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c9dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c9e0:	bfd6      	itet	le
 800c9e2:	f1c3 0320 	rsble	r3, r3, #32
 800c9e6:	ea48 0003 	orrgt.w	r0, r8, r3
 800c9ea:	fa06 f003 	lslle.w	r0, r6, r3
 800c9ee:	f7f3 fd89 	bl	8000504 <__aeabi_ui2d>
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c9f8:	3d01      	subs	r5, #1
 800c9fa:	920e      	str	r2, [sp, #56]	; 0x38
 800c9fc:	e76f      	b.n	800c8de <_dtoa_r+0x126>
 800c9fe:	2301      	movs	r3, #1
 800ca00:	e7b3      	b.n	800c96a <_dtoa_r+0x1b2>
 800ca02:	900c      	str	r0, [sp, #48]	; 0x30
 800ca04:	e7b2      	b.n	800c96c <_dtoa_r+0x1b4>
 800ca06:	9b05      	ldr	r3, [sp, #20]
 800ca08:	eba3 030b 	sub.w	r3, r3, fp
 800ca0c:	9305      	str	r3, [sp, #20]
 800ca0e:	f1cb 0300 	rsb	r3, fp, #0
 800ca12:	9308      	str	r3, [sp, #32]
 800ca14:	2300      	movs	r3, #0
 800ca16:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca18:	e7bf      	b.n	800c99a <_dtoa_r+0x1e2>
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ca1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	dc52      	bgt.n	800caca <_dtoa_r+0x312>
 800ca24:	2301      	movs	r3, #1
 800ca26:	9301      	str	r3, [sp, #4]
 800ca28:	9304      	str	r3, [sp, #16]
 800ca2a:	461a      	mov	r2, r3
 800ca2c:	920a      	str	r2, [sp, #40]	; 0x28
 800ca2e:	e00b      	b.n	800ca48 <_dtoa_r+0x290>
 800ca30:	2301      	movs	r3, #1
 800ca32:	e7f3      	b.n	800ca1c <_dtoa_r+0x264>
 800ca34:	2300      	movs	r3, #0
 800ca36:	9309      	str	r3, [sp, #36]	; 0x24
 800ca38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca3a:	445b      	add	r3, fp
 800ca3c:	9301      	str	r3, [sp, #4]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	9304      	str	r3, [sp, #16]
 800ca44:	bfb8      	it	lt
 800ca46:	2301      	movlt	r3, #1
 800ca48:	69e0      	ldr	r0, [r4, #28]
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	2204      	movs	r2, #4
 800ca4e:	f102 0614 	add.w	r6, r2, #20
 800ca52:	429e      	cmp	r6, r3
 800ca54:	d93d      	bls.n	800cad2 <_dtoa_r+0x31a>
 800ca56:	6041      	str	r1, [r0, #4]
 800ca58:	4620      	mov	r0, r4
 800ca5a:	f000 fd9f 	bl	800d59c <_Balloc>
 800ca5e:	9000      	str	r0, [sp, #0]
 800ca60:	2800      	cmp	r0, #0
 800ca62:	d139      	bne.n	800cad8 <_dtoa_r+0x320>
 800ca64:	4b16      	ldr	r3, [pc, #88]	; (800cac0 <_dtoa_r+0x308>)
 800ca66:	4602      	mov	r2, r0
 800ca68:	f240 11af 	movw	r1, #431	; 0x1af
 800ca6c:	e6bd      	b.n	800c7ea <_dtoa_r+0x32>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	e7e1      	b.n	800ca36 <_dtoa_r+0x27e>
 800ca72:	2501      	movs	r5, #1
 800ca74:	2300      	movs	r3, #0
 800ca76:	9307      	str	r3, [sp, #28]
 800ca78:	9509      	str	r5, [sp, #36]	; 0x24
 800ca7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca7e:	9301      	str	r3, [sp, #4]
 800ca80:	9304      	str	r3, [sp, #16]
 800ca82:	2200      	movs	r2, #0
 800ca84:	2312      	movs	r3, #18
 800ca86:	e7d1      	b.n	800ca2c <_dtoa_r+0x274>
 800ca88:	636f4361 	.word	0x636f4361
 800ca8c:	3fd287a7 	.word	0x3fd287a7
 800ca90:	8b60c8b3 	.word	0x8b60c8b3
 800ca94:	3fc68a28 	.word	0x3fc68a28
 800ca98:	509f79fb 	.word	0x509f79fb
 800ca9c:	3fd34413 	.word	0x3fd34413
 800caa0:	0800e559 	.word	0x0800e559
 800caa4:	0800e570 	.word	0x0800e570
 800caa8:	7ff00000 	.word	0x7ff00000
 800caac:	0800e555 	.word	0x0800e555
 800cab0:	0800e54c 	.word	0x0800e54c
 800cab4:	0800e529 	.word	0x0800e529
 800cab8:	3ff80000 	.word	0x3ff80000
 800cabc:	0800e660 	.word	0x0800e660
 800cac0:	0800e5c8 	.word	0x0800e5c8
 800cac4:	2301      	movs	r3, #1
 800cac6:	9309      	str	r3, [sp, #36]	; 0x24
 800cac8:	e7d7      	b.n	800ca7a <_dtoa_r+0x2c2>
 800caca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cacc:	9301      	str	r3, [sp, #4]
 800cace:	9304      	str	r3, [sp, #16]
 800cad0:	e7ba      	b.n	800ca48 <_dtoa_r+0x290>
 800cad2:	3101      	adds	r1, #1
 800cad4:	0052      	lsls	r2, r2, #1
 800cad6:	e7ba      	b.n	800ca4e <_dtoa_r+0x296>
 800cad8:	69e3      	ldr	r3, [r4, #28]
 800cada:	9a00      	ldr	r2, [sp, #0]
 800cadc:	601a      	str	r2, [r3, #0]
 800cade:	9b04      	ldr	r3, [sp, #16]
 800cae0:	2b0e      	cmp	r3, #14
 800cae2:	f200 80a8 	bhi.w	800cc36 <_dtoa_r+0x47e>
 800cae6:	2d00      	cmp	r5, #0
 800cae8:	f000 80a5 	beq.w	800cc36 <_dtoa_r+0x47e>
 800caec:	f1bb 0f00 	cmp.w	fp, #0
 800caf0:	dd38      	ble.n	800cb64 <_dtoa_r+0x3ac>
 800caf2:	4bc0      	ldr	r3, [pc, #768]	; (800cdf4 <_dtoa_r+0x63c>)
 800caf4:	f00b 020f 	and.w	r2, fp, #15
 800caf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cafc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cb00:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cb04:	ea4f 182b 	mov.w	r8, fp, asr #4
 800cb08:	d019      	beq.n	800cb3e <_dtoa_r+0x386>
 800cb0a:	4bbb      	ldr	r3, [pc, #748]	; (800cdf8 <_dtoa_r+0x640>)
 800cb0c:	ec51 0b18 	vmov	r0, r1, d8
 800cb10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cb14:	f7f3 fe9a 	bl	800084c <__aeabi_ddiv>
 800cb18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb1c:	f008 080f 	and.w	r8, r8, #15
 800cb20:	2503      	movs	r5, #3
 800cb22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800cdf8 <_dtoa_r+0x640>
 800cb26:	f1b8 0f00 	cmp.w	r8, #0
 800cb2a:	d10a      	bne.n	800cb42 <_dtoa_r+0x38a>
 800cb2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cb30:	4632      	mov	r2, r6
 800cb32:	463b      	mov	r3, r7
 800cb34:	f7f3 fe8a 	bl	800084c <__aeabi_ddiv>
 800cb38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb3c:	e02b      	b.n	800cb96 <_dtoa_r+0x3de>
 800cb3e:	2502      	movs	r5, #2
 800cb40:	e7ef      	b.n	800cb22 <_dtoa_r+0x36a>
 800cb42:	f018 0f01 	tst.w	r8, #1
 800cb46:	d008      	beq.n	800cb5a <_dtoa_r+0x3a2>
 800cb48:	4630      	mov	r0, r6
 800cb4a:	4639      	mov	r1, r7
 800cb4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cb50:	f7f3 fd52 	bl	80005f8 <__aeabi_dmul>
 800cb54:	3501      	adds	r5, #1
 800cb56:	4606      	mov	r6, r0
 800cb58:	460f      	mov	r7, r1
 800cb5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cb5e:	f109 0908 	add.w	r9, r9, #8
 800cb62:	e7e0      	b.n	800cb26 <_dtoa_r+0x36e>
 800cb64:	f000 809f 	beq.w	800cca6 <_dtoa_r+0x4ee>
 800cb68:	f1cb 0600 	rsb	r6, fp, #0
 800cb6c:	4ba1      	ldr	r3, [pc, #644]	; (800cdf4 <_dtoa_r+0x63c>)
 800cb6e:	4fa2      	ldr	r7, [pc, #648]	; (800cdf8 <_dtoa_r+0x640>)
 800cb70:	f006 020f 	and.w	r2, r6, #15
 800cb74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb7c:	ec51 0b18 	vmov	r0, r1, d8
 800cb80:	f7f3 fd3a 	bl	80005f8 <__aeabi_dmul>
 800cb84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb88:	1136      	asrs	r6, r6, #4
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	2502      	movs	r5, #2
 800cb8e:	2e00      	cmp	r6, #0
 800cb90:	d17e      	bne.n	800cc90 <_dtoa_r+0x4d8>
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1d0      	bne.n	800cb38 <_dtoa_r+0x380>
 800cb96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	f000 8084 	beq.w	800ccaa <_dtoa_r+0x4f2>
 800cba2:	4b96      	ldr	r3, [pc, #600]	; (800cdfc <_dtoa_r+0x644>)
 800cba4:	2200      	movs	r2, #0
 800cba6:	4640      	mov	r0, r8
 800cba8:	4649      	mov	r1, r9
 800cbaa:	f7f3 ff97 	bl	8000adc <__aeabi_dcmplt>
 800cbae:	2800      	cmp	r0, #0
 800cbb0:	d07b      	beq.n	800ccaa <_dtoa_r+0x4f2>
 800cbb2:	9b04      	ldr	r3, [sp, #16]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d078      	beq.n	800ccaa <_dtoa_r+0x4f2>
 800cbb8:	9b01      	ldr	r3, [sp, #4]
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	dd39      	ble.n	800cc32 <_dtoa_r+0x47a>
 800cbbe:	4b90      	ldr	r3, [pc, #576]	; (800ce00 <_dtoa_r+0x648>)
 800cbc0:	2200      	movs	r2, #0
 800cbc2:	4640      	mov	r0, r8
 800cbc4:	4649      	mov	r1, r9
 800cbc6:	f7f3 fd17 	bl	80005f8 <__aeabi_dmul>
 800cbca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbce:	9e01      	ldr	r6, [sp, #4]
 800cbd0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cbd4:	3501      	adds	r5, #1
 800cbd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cbda:	4628      	mov	r0, r5
 800cbdc:	f7f3 fca2 	bl	8000524 <__aeabi_i2d>
 800cbe0:	4642      	mov	r2, r8
 800cbe2:	464b      	mov	r3, r9
 800cbe4:	f7f3 fd08 	bl	80005f8 <__aeabi_dmul>
 800cbe8:	4b86      	ldr	r3, [pc, #536]	; (800ce04 <_dtoa_r+0x64c>)
 800cbea:	2200      	movs	r2, #0
 800cbec:	f7f3 fb4e 	bl	800028c <__adddf3>
 800cbf0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800cbf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cbf8:	9303      	str	r3, [sp, #12]
 800cbfa:	2e00      	cmp	r6, #0
 800cbfc:	d158      	bne.n	800ccb0 <_dtoa_r+0x4f8>
 800cbfe:	4b82      	ldr	r3, [pc, #520]	; (800ce08 <_dtoa_r+0x650>)
 800cc00:	2200      	movs	r2, #0
 800cc02:	4640      	mov	r0, r8
 800cc04:	4649      	mov	r1, r9
 800cc06:	f7f3 fb3f 	bl	8000288 <__aeabi_dsub>
 800cc0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc0e:	4680      	mov	r8, r0
 800cc10:	4689      	mov	r9, r1
 800cc12:	f7f3 ff81 	bl	8000b18 <__aeabi_dcmpgt>
 800cc16:	2800      	cmp	r0, #0
 800cc18:	f040 8296 	bne.w	800d148 <_dtoa_r+0x990>
 800cc1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800cc20:	4640      	mov	r0, r8
 800cc22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cc26:	4649      	mov	r1, r9
 800cc28:	f7f3 ff58 	bl	8000adc <__aeabi_dcmplt>
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	f040 8289 	bne.w	800d144 <_dtoa_r+0x98c>
 800cc32:	ed8d 8b02 	vstr	d8, [sp, #8]
 800cc36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	f2c0 814e 	blt.w	800ceda <_dtoa_r+0x722>
 800cc3e:	f1bb 0f0e 	cmp.w	fp, #14
 800cc42:	f300 814a 	bgt.w	800ceda <_dtoa_r+0x722>
 800cc46:	4b6b      	ldr	r3, [pc, #428]	; (800cdf4 <_dtoa_r+0x63c>)
 800cc48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cc4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cc50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	f280 80dc 	bge.w	800ce10 <_dtoa_r+0x658>
 800cc58:	9b04      	ldr	r3, [sp, #16]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f300 80d8 	bgt.w	800ce10 <_dtoa_r+0x658>
 800cc60:	f040 826f 	bne.w	800d142 <_dtoa_r+0x98a>
 800cc64:	4b68      	ldr	r3, [pc, #416]	; (800ce08 <_dtoa_r+0x650>)
 800cc66:	2200      	movs	r2, #0
 800cc68:	4640      	mov	r0, r8
 800cc6a:	4649      	mov	r1, r9
 800cc6c:	f7f3 fcc4 	bl	80005f8 <__aeabi_dmul>
 800cc70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cc74:	f7f3 ff46 	bl	8000b04 <__aeabi_dcmpge>
 800cc78:	9e04      	ldr	r6, [sp, #16]
 800cc7a:	4637      	mov	r7, r6
 800cc7c:	2800      	cmp	r0, #0
 800cc7e:	f040 8245 	bne.w	800d10c <_dtoa_r+0x954>
 800cc82:	9d00      	ldr	r5, [sp, #0]
 800cc84:	2331      	movs	r3, #49	; 0x31
 800cc86:	f805 3b01 	strb.w	r3, [r5], #1
 800cc8a:	f10b 0b01 	add.w	fp, fp, #1
 800cc8e:	e241      	b.n	800d114 <_dtoa_r+0x95c>
 800cc90:	07f2      	lsls	r2, r6, #31
 800cc92:	d505      	bpl.n	800cca0 <_dtoa_r+0x4e8>
 800cc94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc98:	f7f3 fcae 	bl	80005f8 <__aeabi_dmul>
 800cc9c:	3501      	adds	r5, #1
 800cc9e:	2301      	movs	r3, #1
 800cca0:	1076      	asrs	r6, r6, #1
 800cca2:	3708      	adds	r7, #8
 800cca4:	e773      	b.n	800cb8e <_dtoa_r+0x3d6>
 800cca6:	2502      	movs	r5, #2
 800cca8:	e775      	b.n	800cb96 <_dtoa_r+0x3de>
 800ccaa:	9e04      	ldr	r6, [sp, #16]
 800ccac:	465f      	mov	r7, fp
 800ccae:	e792      	b.n	800cbd6 <_dtoa_r+0x41e>
 800ccb0:	9900      	ldr	r1, [sp, #0]
 800ccb2:	4b50      	ldr	r3, [pc, #320]	; (800cdf4 <_dtoa_r+0x63c>)
 800ccb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ccb8:	4431      	add	r1, r6
 800ccba:	9102      	str	r1, [sp, #8]
 800ccbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccbe:	eeb0 9a47 	vmov.f32	s18, s14
 800ccc2:	eef0 9a67 	vmov.f32	s19, s15
 800ccc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ccca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ccce:	2900      	cmp	r1, #0
 800ccd0:	d044      	beq.n	800cd5c <_dtoa_r+0x5a4>
 800ccd2:	494e      	ldr	r1, [pc, #312]	; (800ce0c <_dtoa_r+0x654>)
 800ccd4:	2000      	movs	r0, #0
 800ccd6:	f7f3 fdb9 	bl	800084c <__aeabi_ddiv>
 800ccda:	ec53 2b19 	vmov	r2, r3, d9
 800ccde:	f7f3 fad3 	bl	8000288 <__aeabi_dsub>
 800cce2:	9d00      	ldr	r5, [sp, #0]
 800cce4:	ec41 0b19 	vmov	d9, r0, r1
 800cce8:	4649      	mov	r1, r9
 800ccea:	4640      	mov	r0, r8
 800ccec:	f7f3 ff34 	bl	8000b58 <__aeabi_d2iz>
 800ccf0:	4606      	mov	r6, r0
 800ccf2:	f7f3 fc17 	bl	8000524 <__aeabi_i2d>
 800ccf6:	4602      	mov	r2, r0
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	4640      	mov	r0, r8
 800ccfc:	4649      	mov	r1, r9
 800ccfe:	f7f3 fac3 	bl	8000288 <__aeabi_dsub>
 800cd02:	3630      	adds	r6, #48	; 0x30
 800cd04:	f805 6b01 	strb.w	r6, [r5], #1
 800cd08:	ec53 2b19 	vmov	r2, r3, d9
 800cd0c:	4680      	mov	r8, r0
 800cd0e:	4689      	mov	r9, r1
 800cd10:	f7f3 fee4 	bl	8000adc <__aeabi_dcmplt>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	d164      	bne.n	800cde2 <_dtoa_r+0x62a>
 800cd18:	4642      	mov	r2, r8
 800cd1a:	464b      	mov	r3, r9
 800cd1c:	4937      	ldr	r1, [pc, #220]	; (800cdfc <_dtoa_r+0x644>)
 800cd1e:	2000      	movs	r0, #0
 800cd20:	f7f3 fab2 	bl	8000288 <__aeabi_dsub>
 800cd24:	ec53 2b19 	vmov	r2, r3, d9
 800cd28:	f7f3 fed8 	bl	8000adc <__aeabi_dcmplt>
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	f040 80b6 	bne.w	800ce9e <_dtoa_r+0x6e6>
 800cd32:	9b02      	ldr	r3, [sp, #8]
 800cd34:	429d      	cmp	r5, r3
 800cd36:	f43f af7c 	beq.w	800cc32 <_dtoa_r+0x47a>
 800cd3a:	4b31      	ldr	r3, [pc, #196]	; (800ce00 <_dtoa_r+0x648>)
 800cd3c:	ec51 0b19 	vmov	r0, r1, d9
 800cd40:	2200      	movs	r2, #0
 800cd42:	f7f3 fc59 	bl	80005f8 <__aeabi_dmul>
 800cd46:	4b2e      	ldr	r3, [pc, #184]	; (800ce00 <_dtoa_r+0x648>)
 800cd48:	ec41 0b19 	vmov	d9, r0, r1
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	4640      	mov	r0, r8
 800cd50:	4649      	mov	r1, r9
 800cd52:	f7f3 fc51 	bl	80005f8 <__aeabi_dmul>
 800cd56:	4680      	mov	r8, r0
 800cd58:	4689      	mov	r9, r1
 800cd5a:	e7c5      	b.n	800cce8 <_dtoa_r+0x530>
 800cd5c:	ec51 0b17 	vmov	r0, r1, d7
 800cd60:	f7f3 fc4a 	bl	80005f8 <__aeabi_dmul>
 800cd64:	9b02      	ldr	r3, [sp, #8]
 800cd66:	9d00      	ldr	r5, [sp, #0]
 800cd68:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd6a:	ec41 0b19 	vmov	d9, r0, r1
 800cd6e:	4649      	mov	r1, r9
 800cd70:	4640      	mov	r0, r8
 800cd72:	f7f3 fef1 	bl	8000b58 <__aeabi_d2iz>
 800cd76:	4606      	mov	r6, r0
 800cd78:	f7f3 fbd4 	bl	8000524 <__aeabi_i2d>
 800cd7c:	3630      	adds	r6, #48	; 0x30
 800cd7e:	4602      	mov	r2, r0
 800cd80:	460b      	mov	r3, r1
 800cd82:	4640      	mov	r0, r8
 800cd84:	4649      	mov	r1, r9
 800cd86:	f7f3 fa7f 	bl	8000288 <__aeabi_dsub>
 800cd8a:	f805 6b01 	strb.w	r6, [r5], #1
 800cd8e:	9b02      	ldr	r3, [sp, #8]
 800cd90:	429d      	cmp	r5, r3
 800cd92:	4680      	mov	r8, r0
 800cd94:	4689      	mov	r9, r1
 800cd96:	f04f 0200 	mov.w	r2, #0
 800cd9a:	d124      	bne.n	800cde6 <_dtoa_r+0x62e>
 800cd9c:	4b1b      	ldr	r3, [pc, #108]	; (800ce0c <_dtoa_r+0x654>)
 800cd9e:	ec51 0b19 	vmov	r0, r1, d9
 800cda2:	f7f3 fa73 	bl	800028c <__adddf3>
 800cda6:	4602      	mov	r2, r0
 800cda8:	460b      	mov	r3, r1
 800cdaa:	4640      	mov	r0, r8
 800cdac:	4649      	mov	r1, r9
 800cdae:	f7f3 feb3 	bl	8000b18 <__aeabi_dcmpgt>
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	d173      	bne.n	800ce9e <_dtoa_r+0x6e6>
 800cdb6:	ec53 2b19 	vmov	r2, r3, d9
 800cdba:	4914      	ldr	r1, [pc, #80]	; (800ce0c <_dtoa_r+0x654>)
 800cdbc:	2000      	movs	r0, #0
 800cdbe:	f7f3 fa63 	bl	8000288 <__aeabi_dsub>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	4640      	mov	r0, r8
 800cdc8:	4649      	mov	r1, r9
 800cdca:	f7f3 fe87 	bl	8000adc <__aeabi_dcmplt>
 800cdce:	2800      	cmp	r0, #0
 800cdd0:	f43f af2f 	beq.w	800cc32 <_dtoa_r+0x47a>
 800cdd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cdd6:	1e6b      	subs	r3, r5, #1
 800cdd8:	930f      	str	r3, [sp, #60]	; 0x3c
 800cdda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cdde:	2b30      	cmp	r3, #48	; 0x30
 800cde0:	d0f8      	beq.n	800cdd4 <_dtoa_r+0x61c>
 800cde2:	46bb      	mov	fp, r7
 800cde4:	e04a      	b.n	800ce7c <_dtoa_r+0x6c4>
 800cde6:	4b06      	ldr	r3, [pc, #24]	; (800ce00 <_dtoa_r+0x648>)
 800cde8:	f7f3 fc06 	bl	80005f8 <__aeabi_dmul>
 800cdec:	4680      	mov	r8, r0
 800cdee:	4689      	mov	r9, r1
 800cdf0:	e7bd      	b.n	800cd6e <_dtoa_r+0x5b6>
 800cdf2:	bf00      	nop
 800cdf4:	0800e660 	.word	0x0800e660
 800cdf8:	0800e638 	.word	0x0800e638
 800cdfc:	3ff00000 	.word	0x3ff00000
 800ce00:	40240000 	.word	0x40240000
 800ce04:	401c0000 	.word	0x401c0000
 800ce08:	40140000 	.word	0x40140000
 800ce0c:	3fe00000 	.word	0x3fe00000
 800ce10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ce14:	9d00      	ldr	r5, [sp, #0]
 800ce16:	4642      	mov	r2, r8
 800ce18:	464b      	mov	r3, r9
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	4639      	mov	r1, r7
 800ce1e:	f7f3 fd15 	bl	800084c <__aeabi_ddiv>
 800ce22:	f7f3 fe99 	bl	8000b58 <__aeabi_d2iz>
 800ce26:	9001      	str	r0, [sp, #4]
 800ce28:	f7f3 fb7c 	bl	8000524 <__aeabi_i2d>
 800ce2c:	4642      	mov	r2, r8
 800ce2e:	464b      	mov	r3, r9
 800ce30:	f7f3 fbe2 	bl	80005f8 <__aeabi_dmul>
 800ce34:	4602      	mov	r2, r0
 800ce36:	460b      	mov	r3, r1
 800ce38:	4630      	mov	r0, r6
 800ce3a:	4639      	mov	r1, r7
 800ce3c:	f7f3 fa24 	bl	8000288 <__aeabi_dsub>
 800ce40:	9e01      	ldr	r6, [sp, #4]
 800ce42:	9f04      	ldr	r7, [sp, #16]
 800ce44:	3630      	adds	r6, #48	; 0x30
 800ce46:	f805 6b01 	strb.w	r6, [r5], #1
 800ce4a:	9e00      	ldr	r6, [sp, #0]
 800ce4c:	1bae      	subs	r6, r5, r6
 800ce4e:	42b7      	cmp	r7, r6
 800ce50:	4602      	mov	r2, r0
 800ce52:	460b      	mov	r3, r1
 800ce54:	d134      	bne.n	800cec0 <_dtoa_r+0x708>
 800ce56:	f7f3 fa19 	bl	800028c <__adddf3>
 800ce5a:	4642      	mov	r2, r8
 800ce5c:	464b      	mov	r3, r9
 800ce5e:	4606      	mov	r6, r0
 800ce60:	460f      	mov	r7, r1
 800ce62:	f7f3 fe59 	bl	8000b18 <__aeabi_dcmpgt>
 800ce66:	b9c8      	cbnz	r0, 800ce9c <_dtoa_r+0x6e4>
 800ce68:	4642      	mov	r2, r8
 800ce6a:	464b      	mov	r3, r9
 800ce6c:	4630      	mov	r0, r6
 800ce6e:	4639      	mov	r1, r7
 800ce70:	f7f3 fe2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce74:	b110      	cbz	r0, 800ce7c <_dtoa_r+0x6c4>
 800ce76:	9b01      	ldr	r3, [sp, #4]
 800ce78:	07db      	lsls	r3, r3, #31
 800ce7a:	d40f      	bmi.n	800ce9c <_dtoa_r+0x6e4>
 800ce7c:	4651      	mov	r1, sl
 800ce7e:	4620      	mov	r0, r4
 800ce80:	f000 fbcc 	bl	800d61c <_Bfree>
 800ce84:	2300      	movs	r3, #0
 800ce86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce88:	702b      	strb	r3, [r5, #0]
 800ce8a:	f10b 0301 	add.w	r3, fp, #1
 800ce8e:	6013      	str	r3, [r2, #0]
 800ce90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	f43f ace2 	beq.w	800c85c <_dtoa_r+0xa4>
 800ce98:	601d      	str	r5, [r3, #0]
 800ce9a:	e4df      	b.n	800c85c <_dtoa_r+0xa4>
 800ce9c:	465f      	mov	r7, fp
 800ce9e:	462b      	mov	r3, r5
 800cea0:	461d      	mov	r5, r3
 800cea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cea6:	2a39      	cmp	r2, #57	; 0x39
 800cea8:	d106      	bne.n	800ceb8 <_dtoa_r+0x700>
 800ceaa:	9a00      	ldr	r2, [sp, #0]
 800ceac:	429a      	cmp	r2, r3
 800ceae:	d1f7      	bne.n	800cea0 <_dtoa_r+0x6e8>
 800ceb0:	9900      	ldr	r1, [sp, #0]
 800ceb2:	2230      	movs	r2, #48	; 0x30
 800ceb4:	3701      	adds	r7, #1
 800ceb6:	700a      	strb	r2, [r1, #0]
 800ceb8:	781a      	ldrb	r2, [r3, #0]
 800ceba:	3201      	adds	r2, #1
 800cebc:	701a      	strb	r2, [r3, #0]
 800cebe:	e790      	b.n	800cde2 <_dtoa_r+0x62a>
 800cec0:	4ba3      	ldr	r3, [pc, #652]	; (800d150 <_dtoa_r+0x998>)
 800cec2:	2200      	movs	r2, #0
 800cec4:	f7f3 fb98 	bl	80005f8 <__aeabi_dmul>
 800cec8:	2200      	movs	r2, #0
 800ceca:	2300      	movs	r3, #0
 800cecc:	4606      	mov	r6, r0
 800cece:	460f      	mov	r7, r1
 800ced0:	f7f3 fdfa 	bl	8000ac8 <__aeabi_dcmpeq>
 800ced4:	2800      	cmp	r0, #0
 800ced6:	d09e      	beq.n	800ce16 <_dtoa_r+0x65e>
 800ced8:	e7d0      	b.n	800ce7c <_dtoa_r+0x6c4>
 800ceda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cedc:	2a00      	cmp	r2, #0
 800cede:	f000 80ca 	beq.w	800d076 <_dtoa_r+0x8be>
 800cee2:	9a07      	ldr	r2, [sp, #28]
 800cee4:	2a01      	cmp	r2, #1
 800cee6:	f300 80ad 	bgt.w	800d044 <_dtoa_r+0x88c>
 800ceea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ceec:	2a00      	cmp	r2, #0
 800ceee:	f000 80a5 	beq.w	800d03c <_dtoa_r+0x884>
 800cef2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cef6:	9e08      	ldr	r6, [sp, #32]
 800cef8:	9d05      	ldr	r5, [sp, #20]
 800cefa:	9a05      	ldr	r2, [sp, #20]
 800cefc:	441a      	add	r2, r3
 800cefe:	9205      	str	r2, [sp, #20]
 800cf00:	9a06      	ldr	r2, [sp, #24]
 800cf02:	2101      	movs	r1, #1
 800cf04:	441a      	add	r2, r3
 800cf06:	4620      	mov	r0, r4
 800cf08:	9206      	str	r2, [sp, #24]
 800cf0a:	f000 fc3d 	bl	800d788 <__i2b>
 800cf0e:	4607      	mov	r7, r0
 800cf10:	b165      	cbz	r5, 800cf2c <_dtoa_r+0x774>
 800cf12:	9b06      	ldr	r3, [sp, #24]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	dd09      	ble.n	800cf2c <_dtoa_r+0x774>
 800cf18:	42ab      	cmp	r3, r5
 800cf1a:	9a05      	ldr	r2, [sp, #20]
 800cf1c:	bfa8      	it	ge
 800cf1e:	462b      	movge	r3, r5
 800cf20:	1ad2      	subs	r2, r2, r3
 800cf22:	9205      	str	r2, [sp, #20]
 800cf24:	9a06      	ldr	r2, [sp, #24]
 800cf26:	1aed      	subs	r5, r5, r3
 800cf28:	1ad3      	subs	r3, r2, r3
 800cf2a:	9306      	str	r3, [sp, #24]
 800cf2c:	9b08      	ldr	r3, [sp, #32]
 800cf2e:	b1f3      	cbz	r3, 800cf6e <_dtoa_r+0x7b6>
 800cf30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	f000 80a3 	beq.w	800d07e <_dtoa_r+0x8c6>
 800cf38:	2e00      	cmp	r6, #0
 800cf3a:	dd10      	ble.n	800cf5e <_dtoa_r+0x7a6>
 800cf3c:	4639      	mov	r1, r7
 800cf3e:	4632      	mov	r2, r6
 800cf40:	4620      	mov	r0, r4
 800cf42:	f000 fce1 	bl	800d908 <__pow5mult>
 800cf46:	4652      	mov	r2, sl
 800cf48:	4601      	mov	r1, r0
 800cf4a:	4607      	mov	r7, r0
 800cf4c:	4620      	mov	r0, r4
 800cf4e:	f000 fc31 	bl	800d7b4 <__multiply>
 800cf52:	4651      	mov	r1, sl
 800cf54:	4680      	mov	r8, r0
 800cf56:	4620      	mov	r0, r4
 800cf58:	f000 fb60 	bl	800d61c <_Bfree>
 800cf5c:	46c2      	mov	sl, r8
 800cf5e:	9b08      	ldr	r3, [sp, #32]
 800cf60:	1b9a      	subs	r2, r3, r6
 800cf62:	d004      	beq.n	800cf6e <_dtoa_r+0x7b6>
 800cf64:	4651      	mov	r1, sl
 800cf66:	4620      	mov	r0, r4
 800cf68:	f000 fcce 	bl	800d908 <__pow5mult>
 800cf6c:	4682      	mov	sl, r0
 800cf6e:	2101      	movs	r1, #1
 800cf70:	4620      	mov	r0, r4
 800cf72:	f000 fc09 	bl	800d788 <__i2b>
 800cf76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	4606      	mov	r6, r0
 800cf7c:	f340 8081 	ble.w	800d082 <_dtoa_r+0x8ca>
 800cf80:	461a      	mov	r2, r3
 800cf82:	4601      	mov	r1, r0
 800cf84:	4620      	mov	r0, r4
 800cf86:	f000 fcbf 	bl	800d908 <__pow5mult>
 800cf8a:	9b07      	ldr	r3, [sp, #28]
 800cf8c:	2b01      	cmp	r3, #1
 800cf8e:	4606      	mov	r6, r0
 800cf90:	dd7a      	ble.n	800d088 <_dtoa_r+0x8d0>
 800cf92:	f04f 0800 	mov.w	r8, #0
 800cf96:	6933      	ldr	r3, [r6, #16]
 800cf98:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cf9c:	6918      	ldr	r0, [r3, #16]
 800cf9e:	f000 fba5 	bl	800d6ec <__hi0bits>
 800cfa2:	f1c0 0020 	rsb	r0, r0, #32
 800cfa6:	9b06      	ldr	r3, [sp, #24]
 800cfa8:	4418      	add	r0, r3
 800cfaa:	f010 001f 	ands.w	r0, r0, #31
 800cfae:	f000 8094 	beq.w	800d0da <_dtoa_r+0x922>
 800cfb2:	f1c0 0320 	rsb	r3, r0, #32
 800cfb6:	2b04      	cmp	r3, #4
 800cfb8:	f340 8085 	ble.w	800d0c6 <_dtoa_r+0x90e>
 800cfbc:	9b05      	ldr	r3, [sp, #20]
 800cfbe:	f1c0 001c 	rsb	r0, r0, #28
 800cfc2:	4403      	add	r3, r0
 800cfc4:	9305      	str	r3, [sp, #20]
 800cfc6:	9b06      	ldr	r3, [sp, #24]
 800cfc8:	4403      	add	r3, r0
 800cfca:	4405      	add	r5, r0
 800cfcc:	9306      	str	r3, [sp, #24]
 800cfce:	9b05      	ldr	r3, [sp, #20]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	dd05      	ble.n	800cfe0 <_dtoa_r+0x828>
 800cfd4:	4651      	mov	r1, sl
 800cfd6:	461a      	mov	r2, r3
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f000 fcef 	bl	800d9bc <__lshift>
 800cfde:	4682      	mov	sl, r0
 800cfe0:	9b06      	ldr	r3, [sp, #24]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	dd05      	ble.n	800cff2 <_dtoa_r+0x83a>
 800cfe6:	4631      	mov	r1, r6
 800cfe8:	461a      	mov	r2, r3
 800cfea:	4620      	mov	r0, r4
 800cfec:	f000 fce6 	bl	800d9bc <__lshift>
 800cff0:	4606      	mov	r6, r0
 800cff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d072      	beq.n	800d0de <_dtoa_r+0x926>
 800cff8:	4631      	mov	r1, r6
 800cffa:	4650      	mov	r0, sl
 800cffc:	f000 fd4a 	bl	800da94 <__mcmp>
 800d000:	2800      	cmp	r0, #0
 800d002:	da6c      	bge.n	800d0de <_dtoa_r+0x926>
 800d004:	2300      	movs	r3, #0
 800d006:	4651      	mov	r1, sl
 800d008:	220a      	movs	r2, #10
 800d00a:	4620      	mov	r0, r4
 800d00c:	f000 fb28 	bl	800d660 <__multadd>
 800d010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d012:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d016:	4682      	mov	sl, r0
 800d018:	2b00      	cmp	r3, #0
 800d01a:	f000 81b0 	beq.w	800d37e <_dtoa_r+0xbc6>
 800d01e:	2300      	movs	r3, #0
 800d020:	4639      	mov	r1, r7
 800d022:	220a      	movs	r2, #10
 800d024:	4620      	mov	r0, r4
 800d026:	f000 fb1b 	bl	800d660 <__multadd>
 800d02a:	9b01      	ldr	r3, [sp, #4]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	4607      	mov	r7, r0
 800d030:	f300 8096 	bgt.w	800d160 <_dtoa_r+0x9a8>
 800d034:	9b07      	ldr	r3, [sp, #28]
 800d036:	2b02      	cmp	r3, #2
 800d038:	dc59      	bgt.n	800d0ee <_dtoa_r+0x936>
 800d03a:	e091      	b.n	800d160 <_dtoa_r+0x9a8>
 800d03c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d03e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d042:	e758      	b.n	800cef6 <_dtoa_r+0x73e>
 800d044:	9b04      	ldr	r3, [sp, #16]
 800d046:	1e5e      	subs	r6, r3, #1
 800d048:	9b08      	ldr	r3, [sp, #32]
 800d04a:	42b3      	cmp	r3, r6
 800d04c:	bfbf      	itttt	lt
 800d04e:	9b08      	ldrlt	r3, [sp, #32]
 800d050:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d052:	9608      	strlt	r6, [sp, #32]
 800d054:	1af3      	sublt	r3, r6, r3
 800d056:	bfb4      	ite	lt
 800d058:	18d2      	addlt	r2, r2, r3
 800d05a:	1b9e      	subge	r6, r3, r6
 800d05c:	9b04      	ldr	r3, [sp, #16]
 800d05e:	bfbc      	itt	lt
 800d060:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d062:	2600      	movlt	r6, #0
 800d064:	2b00      	cmp	r3, #0
 800d066:	bfb7      	itett	lt
 800d068:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d06c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d070:	1a9d      	sublt	r5, r3, r2
 800d072:	2300      	movlt	r3, #0
 800d074:	e741      	b.n	800cefa <_dtoa_r+0x742>
 800d076:	9e08      	ldr	r6, [sp, #32]
 800d078:	9d05      	ldr	r5, [sp, #20]
 800d07a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d07c:	e748      	b.n	800cf10 <_dtoa_r+0x758>
 800d07e:	9a08      	ldr	r2, [sp, #32]
 800d080:	e770      	b.n	800cf64 <_dtoa_r+0x7ac>
 800d082:	9b07      	ldr	r3, [sp, #28]
 800d084:	2b01      	cmp	r3, #1
 800d086:	dc19      	bgt.n	800d0bc <_dtoa_r+0x904>
 800d088:	9b02      	ldr	r3, [sp, #8]
 800d08a:	b9bb      	cbnz	r3, 800d0bc <_dtoa_r+0x904>
 800d08c:	9b03      	ldr	r3, [sp, #12]
 800d08e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d092:	b99b      	cbnz	r3, 800d0bc <_dtoa_r+0x904>
 800d094:	9b03      	ldr	r3, [sp, #12]
 800d096:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d09a:	0d1b      	lsrs	r3, r3, #20
 800d09c:	051b      	lsls	r3, r3, #20
 800d09e:	b183      	cbz	r3, 800d0c2 <_dtoa_r+0x90a>
 800d0a0:	9b05      	ldr	r3, [sp, #20]
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	9305      	str	r3, [sp, #20]
 800d0a6:	9b06      	ldr	r3, [sp, #24]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	9306      	str	r3, [sp, #24]
 800d0ac:	f04f 0801 	mov.w	r8, #1
 800d0b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	f47f af6f 	bne.w	800cf96 <_dtoa_r+0x7de>
 800d0b8:	2001      	movs	r0, #1
 800d0ba:	e774      	b.n	800cfa6 <_dtoa_r+0x7ee>
 800d0bc:	f04f 0800 	mov.w	r8, #0
 800d0c0:	e7f6      	b.n	800d0b0 <_dtoa_r+0x8f8>
 800d0c2:	4698      	mov	r8, r3
 800d0c4:	e7f4      	b.n	800d0b0 <_dtoa_r+0x8f8>
 800d0c6:	d082      	beq.n	800cfce <_dtoa_r+0x816>
 800d0c8:	9a05      	ldr	r2, [sp, #20]
 800d0ca:	331c      	adds	r3, #28
 800d0cc:	441a      	add	r2, r3
 800d0ce:	9205      	str	r2, [sp, #20]
 800d0d0:	9a06      	ldr	r2, [sp, #24]
 800d0d2:	441a      	add	r2, r3
 800d0d4:	441d      	add	r5, r3
 800d0d6:	9206      	str	r2, [sp, #24]
 800d0d8:	e779      	b.n	800cfce <_dtoa_r+0x816>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	e7f4      	b.n	800d0c8 <_dtoa_r+0x910>
 800d0de:	9b04      	ldr	r3, [sp, #16]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	dc37      	bgt.n	800d154 <_dtoa_r+0x99c>
 800d0e4:	9b07      	ldr	r3, [sp, #28]
 800d0e6:	2b02      	cmp	r3, #2
 800d0e8:	dd34      	ble.n	800d154 <_dtoa_r+0x99c>
 800d0ea:	9b04      	ldr	r3, [sp, #16]
 800d0ec:	9301      	str	r3, [sp, #4]
 800d0ee:	9b01      	ldr	r3, [sp, #4]
 800d0f0:	b963      	cbnz	r3, 800d10c <_dtoa_r+0x954>
 800d0f2:	4631      	mov	r1, r6
 800d0f4:	2205      	movs	r2, #5
 800d0f6:	4620      	mov	r0, r4
 800d0f8:	f000 fab2 	bl	800d660 <__multadd>
 800d0fc:	4601      	mov	r1, r0
 800d0fe:	4606      	mov	r6, r0
 800d100:	4650      	mov	r0, sl
 800d102:	f000 fcc7 	bl	800da94 <__mcmp>
 800d106:	2800      	cmp	r0, #0
 800d108:	f73f adbb 	bgt.w	800cc82 <_dtoa_r+0x4ca>
 800d10c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d10e:	9d00      	ldr	r5, [sp, #0]
 800d110:	ea6f 0b03 	mvn.w	fp, r3
 800d114:	f04f 0800 	mov.w	r8, #0
 800d118:	4631      	mov	r1, r6
 800d11a:	4620      	mov	r0, r4
 800d11c:	f000 fa7e 	bl	800d61c <_Bfree>
 800d120:	2f00      	cmp	r7, #0
 800d122:	f43f aeab 	beq.w	800ce7c <_dtoa_r+0x6c4>
 800d126:	f1b8 0f00 	cmp.w	r8, #0
 800d12a:	d005      	beq.n	800d138 <_dtoa_r+0x980>
 800d12c:	45b8      	cmp	r8, r7
 800d12e:	d003      	beq.n	800d138 <_dtoa_r+0x980>
 800d130:	4641      	mov	r1, r8
 800d132:	4620      	mov	r0, r4
 800d134:	f000 fa72 	bl	800d61c <_Bfree>
 800d138:	4639      	mov	r1, r7
 800d13a:	4620      	mov	r0, r4
 800d13c:	f000 fa6e 	bl	800d61c <_Bfree>
 800d140:	e69c      	b.n	800ce7c <_dtoa_r+0x6c4>
 800d142:	2600      	movs	r6, #0
 800d144:	4637      	mov	r7, r6
 800d146:	e7e1      	b.n	800d10c <_dtoa_r+0x954>
 800d148:	46bb      	mov	fp, r7
 800d14a:	4637      	mov	r7, r6
 800d14c:	e599      	b.n	800cc82 <_dtoa_r+0x4ca>
 800d14e:	bf00      	nop
 800d150:	40240000 	.word	0x40240000
 800d154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d156:	2b00      	cmp	r3, #0
 800d158:	f000 80c8 	beq.w	800d2ec <_dtoa_r+0xb34>
 800d15c:	9b04      	ldr	r3, [sp, #16]
 800d15e:	9301      	str	r3, [sp, #4]
 800d160:	2d00      	cmp	r5, #0
 800d162:	dd05      	ble.n	800d170 <_dtoa_r+0x9b8>
 800d164:	4639      	mov	r1, r7
 800d166:	462a      	mov	r2, r5
 800d168:	4620      	mov	r0, r4
 800d16a:	f000 fc27 	bl	800d9bc <__lshift>
 800d16e:	4607      	mov	r7, r0
 800d170:	f1b8 0f00 	cmp.w	r8, #0
 800d174:	d05b      	beq.n	800d22e <_dtoa_r+0xa76>
 800d176:	6879      	ldr	r1, [r7, #4]
 800d178:	4620      	mov	r0, r4
 800d17a:	f000 fa0f 	bl	800d59c <_Balloc>
 800d17e:	4605      	mov	r5, r0
 800d180:	b928      	cbnz	r0, 800d18e <_dtoa_r+0x9d6>
 800d182:	4b83      	ldr	r3, [pc, #524]	; (800d390 <_dtoa_r+0xbd8>)
 800d184:	4602      	mov	r2, r0
 800d186:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d18a:	f7ff bb2e 	b.w	800c7ea <_dtoa_r+0x32>
 800d18e:	693a      	ldr	r2, [r7, #16]
 800d190:	3202      	adds	r2, #2
 800d192:	0092      	lsls	r2, r2, #2
 800d194:	f107 010c 	add.w	r1, r7, #12
 800d198:	300c      	adds	r0, #12
 800d19a:	f000 fe39 	bl	800de10 <memcpy>
 800d19e:	2201      	movs	r2, #1
 800d1a0:	4629      	mov	r1, r5
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f000 fc0a 	bl	800d9bc <__lshift>
 800d1a8:	9b00      	ldr	r3, [sp, #0]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	9304      	str	r3, [sp, #16]
 800d1ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1b2:	4413      	add	r3, r2
 800d1b4:	9308      	str	r3, [sp, #32]
 800d1b6:	9b02      	ldr	r3, [sp, #8]
 800d1b8:	f003 0301 	and.w	r3, r3, #1
 800d1bc:	46b8      	mov	r8, r7
 800d1be:	9306      	str	r3, [sp, #24]
 800d1c0:	4607      	mov	r7, r0
 800d1c2:	9b04      	ldr	r3, [sp, #16]
 800d1c4:	4631      	mov	r1, r6
 800d1c6:	3b01      	subs	r3, #1
 800d1c8:	4650      	mov	r0, sl
 800d1ca:	9301      	str	r3, [sp, #4]
 800d1cc:	f7ff fa6c 	bl	800c6a8 <quorem>
 800d1d0:	4641      	mov	r1, r8
 800d1d2:	9002      	str	r0, [sp, #8]
 800d1d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d1d8:	4650      	mov	r0, sl
 800d1da:	f000 fc5b 	bl	800da94 <__mcmp>
 800d1de:	463a      	mov	r2, r7
 800d1e0:	9005      	str	r0, [sp, #20]
 800d1e2:	4631      	mov	r1, r6
 800d1e4:	4620      	mov	r0, r4
 800d1e6:	f000 fc71 	bl	800dacc <__mdiff>
 800d1ea:	68c2      	ldr	r2, [r0, #12]
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	bb02      	cbnz	r2, 800d232 <_dtoa_r+0xa7a>
 800d1f0:	4601      	mov	r1, r0
 800d1f2:	4650      	mov	r0, sl
 800d1f4:	f000 fc4e 	bl	800da94 <__mcmp>
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	4629      	mov	r1, r5
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	9209      	str	r2, [sp, #36]	; 0x24
 800d200:	f000 fa0c 	bl	800d61c <_Bfree>
 800d204:	9b07      	ldr	r3, [sp, #28]
 800d206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d208:	9d04      	ldr	r5, [sp, #16]
 800d20a:	ea43 0102 	orr.w	r1, r3, r2
 800d20e:	9b06      	ldr	r3, [sp, #24]
 800d210:	4319      	orrs	r1, r3
 800d212:	d110      	bne.n	800d236 <_dtoa_r+0xa7e>
 800d214:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d218:	d029      	beq.n	800d26e <_dtoa_r+0xab6>
 800d21a:	9b05      	ldr	r3, [sp, #20]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	dd02      	ble.n	800d226 <_dtoa_r+0xa6e>
 800d220:	9b02      	ldr	r3, [sp, #8]
 800d222:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d226:	9b01      	ldr	r3, [sp, #4]
 800d228:	f883 9000 	strb.w	r9, [r3]
 800d22c:	e774      	b.n	800d118 <_dtoa_r+0x960>
 800d22e:	4638      	mov	r0, r7
 800d230:	e7ba      	b.n	800d1a8 <_dtoa_r+0x9f0>
 800d232:	2201      	movs	r2, #1
 800d234:	e7e1      	b.n	800d1fa <_dtoa_r+0xa42>
 800d236:	9b05      	ldr	r3, [sp, #20]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	db04      	blt.n	800d246 <_dtoa_r+0xa8e>
 800d23c:	9907      	ldr	r1, [sp, #28]
 800d23e:	430b      	orrs	r3, r1
 800d240:	9906      	ldr	r1, [sp, #24]
 800d242:	430b      	orrs	r3, r1
 800d244:	d120      	bne.n	800d288 <_dtoa_r+0xad0>
 800d246:	2a00      	cmp	r2, #0
 800d248:	dded      	ble.n	800d226 <_dtoa_r+0xa6e>
 800d24a:	4651      	mov	r1, sl
 800d24c:	2201      	movs	r2, #1
 800d24e:	4620      	mov	r0, r4
 800d250:	f000 fbb4 	bl	800d9bc <__lshift>
 800d254:	4631      	mov	r1, r6
 800d256:	4682      	mov	sl, r0
 800d258:	f000 fc1c 	bl	800da94 <__mcmp>
 800d25c:	2800      	cmp	r0, #0
 800d25e:	dc03      	bgt.n	800d268 <_dtoa_r+0xab0>
 800d260:	d1e1      	bne.n	800d226 <_dtoa_r+0xa6e>
 800d262:	f019 0f01 	tst.w	r9, #1
 800d266:	d0de      	beq.n	800d226 <_dtoa_r+0xa6e>
 800d268:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d26c:	d1d8      	bne.n	800d220 <_dtoa_r+0xa68>
 800d26e:	9a01      	ldr	r2, [sp, #4]
 800d270:	2339      	movs	r3, #57	; 0x39
 800d272:	7013      	strb	r3, [r2, #0]
 800d274:	462b      	mov	r3, r5
 800d276:	461d      	mov	r5, r3
 800d278:	3b01      	subs	r3, #1
 800d27a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d27e:	2a39      	cmp	r2, #57	; 0x39
 800d280:	d06c      	beq.n	800d35c <_dtoa_r+0xba4>
 800d282:	3201      	adds	r2, #1
 800d284:	701a      	strb	r2, [r3, #0]
 800d286:	e747      	b.n	800d118 <_dtoa_r+0x960>
 800d288:	2a00      	cmp	r2, #0
 800d28a:	dd07      	ble.n	800d29c <_dtoa_r+0xae4>
 800d28c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d290:	d0ed      	beq.n	800d26e <_dtoa_r+0xab6>
 800d292:	9a01      	ldr	r2, [sp, #4]
 800d294:	f109 0301 	add.w	r3, r9, #1
 800d298:	7013      	strb	r3, [r2, #0]
 800d29a:	e73d      	b.n	800d118 <_dtoa_r+0x960>
 800d29c:	9b04      	ldr	r3, [sp, #16]
 800d29e:	9a08      	ldr	r2, [sp, #32]
 800d2a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d2a4:	4293      	cmp	r3, r2
 800d2a6:	d043      	beq.n	800d330 <_dtoa_r+0xb78>
 800d2a8:	4651      	mov	r1, sl
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	220a      	movs	r2, #10
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f000 f9d6 	bl	800d660 <__multadd>
 800d2b4:	45b8      	cmp	r8, r7
 800d2b6:	4682      	mov	sl, r0
 800d2b8:	f04f 0300 	mov.w	r3, #0
 800d2bc:	f04f 020a 	mov.w	r2, #10
 800d2c0:	4641      	mov	r1, r8
 800d2c2:	4620      	mov	r0, r4
 800d2c4:	d107      	bne.n	800d2d6 <_dtoa_r+0xb1e>
 800d2c6:	f000 f9cb 	bl	800d660 <__multadd>
 800d2ca:	4680      	mov	r8, r0
 800d2cc:	4607      	mov	r7, r0
 800d2ce:	9b04      	ldr	r3, [sp, #16]
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	9304      	str	r3, [sp, #16]
 800d2d4:	e775      	b.n	800d1c2 <_dtoa_r+0xa0a>
 800d2d6:	f000 f9c3 	bl	800d660 <__multadd>
 800d2da:	4639      	mov	r1, r7
 800d2dc:	4680      	mov	r8, r0
 800d2de:	2300      	movs	r3, #0
 800d2e0:	220a      	movs	r2, #10
 800d2e2:	4620      	mov	r0, r4
 800d2e4:	f000 f9bc 	bl	800d660 <__multadd>
 800d2e8:	4607      	mov	r7, r0
 800d2ea:	e7f0      	b.n	800d2ce <_dtoa_r+0xb16>
 800d2ec:	9b04      	ldr	r3, [sp, #16]
 800d2ee:	9301      	str	r3, [sp, #4]
 800d2f0:	9d00      	ldr	r5, [sp, #0]
 800d2f2:	4631      	mov	r1, r6
 800d2f4:	4650      	mov	r0, sl
 800d2f6:	f7ff f9d7 	bl	800c6a8 <quorem>
 800d2fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d2fe:	9b00      	ldr	r3, [sp, #0]
 800d300:	f805 9b01 	strb.w	r9, [r5], #1
 800d304:	1aea      	subs	r2, r5, r3
 800d306:	9b01      	ldr	r3, [sp, #4]
 800d308:	4293      	cmp	r3, r2
 800d30a:	dd07      	ble.n	800d31c <_dtoa_r+0xb64>
 800d30c:	4651      	mov	r1, sl
 800d30e:	2300      	movs	r3, #0
 800d310:	220a      	movs	r2, #10
 800d312:	4620      	mov	r0, r4
 800d314:	f000 f9a4 	bl	800d660 <__multadd>
 800d318:	4682      	mov	sl, r0
 800d31a:	e7ea      	b.n	800d2f2 <_dtoa_r+0xb3a>
 800d31c:	9b01      	ldr	r3, [sp, #4]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	bfc8      	it	gt
 800d322:	461d      	movgt	r5, r3
 800d324:	9b00      	ldr	r3, [sp, #0]
 800d326:	bfd8      	it	le
 800d328:	2501      	movle	r5, #1
 800d32a:	441d      	add	r5, r3
 800d32c:	f04f 0800 	mov.w	r8, #0
 800d330:	4651      	mov	r1, sl
 800d332:	2201      	movs	r2, #1
 800d334:	4620      	mov	r0, r4
 800d336:	f000 fb41 	bl	800d9bc <__lshift>
 800d33a:	4631      	mov	r1, r6
 800d33c:	4682      	mov	sl, r0
 800d33e:	f000 fba9 	bl	800da94 <__mcmp>
 800d342:	2800      	cmp	r0, #0
 800d344:	dc96      	bgt.n	800d274 <_dtoa_r+0xabc>
 800d346:	d102      	bne.n	800d34e <_dtoa_r+0xb96>
 800d348:	f019 0f01 	tst.w	r9, #1
 800d34c:	d192      	bne.n	800d274 <_dtoa_r+0xabc>
 800d34e:	462b      	mov	r3, r5
 800d350:	461d      	mov	r5, r3
 800d352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d356:	2a30      	cmp	r2, #48	; 0x30
 800d358:	d0fa      	beq.n	800d350 <_dtoa_r+0xb98>
 800d35a:	e6dd      	b.n	800d118 <_dtoa_r+0x960>
 800d35c:	9a00      	ldr	r2, [sp, #0]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d189      	bne.n	800d276 <_dtoa_r+0xabe>
 800d362:	f10b 0b01 	add.w	fp, fp, #1
 800d366:	2331      	movs	r3, #49	; 0x31
 800d368:	e796      	b.n	800d298 <_dtoa_r+0xae0>
 800d36a:	4b0a      	ldr	r3, [pc, #40]	; (800d394 <_dtoa_r+0xbdc>)
 800d36c:	f7ff ba99 	b.w	800c8a2 <_dtoa_r+0xea>
 800d370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d372:	2b00      	cmp	r3, #0
 800d374:	f47f aa6d 	bne.w	800c852 <_dtoa_r+0x9a>
 800d378:	4b07      	ldr	r3, [pc, #28]	; (800d398 <_dtoa_r+0xbe0>)
 800d37a:	f7ff ba92 	b.w	800c8a2 <_dtoa_r+0xea>
 800d37e:	9b01      	ldr	r3, [sp, #4]
 800d380:	2b00      	cmp	r3, #0
 800d382:	dcb5      	bgt.n	800d2f0 <_dtoa_r+0xb38>
 800d384:	9b07      	ldr	r3, [sp, #28]
 800d386:	2b02      	cmp	r3, #2
 800d388:	f73f aeb1 	bgt.w	800d0ee <_dtoa_r+0x936>
 800d38c:	e7b0      	b.n	800d2f0 <_dtoa_r+0xb38>
 800d38e:	bf00      	nop
 800d390:	0800e5c8 	.word	0x0800e5c8
 800d394:	0800e528 	.word	0x0800e528
 800d398:	0800e54c 	.word	0x0800e54c

0800d39c <_free_r>:
 800d39c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d39e:	2900      	cmp	r1, #0
 800d3a0:	d044      	beq.n	800d42c <_free_r+0x90>
 800d3a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3a6:	9001      	str	r0, [sp, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f1a1 0404 	sub.w	r4, r1, #4
 800d3ae:	bfb8      	it	lt
 800d3b0:	18e4      	addlt	r4, r4, r3
 800d3b2:	f000 f8e7 	bl	800d584 <__malloc_lock>
 800d3b6:	4a1e      	ldr	r2, [pc, #120]	; (800d430 <_free_r+0x94>)
 800d3b8:	9801      	ldr	r0, [sp, #4]
 800d3ba:	6813      	ldr	r3, [r2, #0]
 800d3bc:	b933      	cbnz	r3, 800d3cc <_free_r+0x30>
 800d3be:	6063      	str	r3, [r4, #4]
 800d3c0:	6014      	str	r4, [r2, #0]
 800d3c2:	b003      	add	sp, #12
 800d3c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d3c8:	f000 b8e2 	b.w	800d590 <__malloc_unlock>
 800d3cc:	42a3      	cmp	r3, r4
 800d3ce:	d908      	bls.n	800d3e2 <_free_r+0x46>
 800d3d0:	6825      	ldr	r5, [r4, #0]
 800d3d2:	1961      	adds	r1, r4, r5
 800d3d4:	428b      	cmp	r3, r1
 800d3d6:	bf01      	itttt	eq
 800d3d8:	6819      	ldreq	r1, [r3, #0]
 800d3da:	685b      	ldreq	r3, [r3, #4]
 800d3dc:	1949      	addeq	r1, r1, r5
 800d3de:	6021      	streq	r1, [r4, #0]
 800d3e0:	e7ed      	b.n	800d3be <_free_r+0x22>
 800d3e2:	461a      	mov	r2, r3
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	b10b      	cbz	r3, 800d3ec <_free_r+0x50>
 800d3e8:	42a3      	cmp	r3, r4
 800d3ea:	d9fa      	bls.n	800d3e2 <_free_r+0x46>
 800d3ec:	6811      	ldr	r1, [r2, #0]
 800d3ee:	1855      	adds	r5, r2, r1
 800d3f0:	42a5      	cmp	r5, r4
 800d3f2:	d10b      	bne.n	800d40c <_free_r+0x70>
 800d3f4:	6824      	ldr	r4, [r4, #0]
 800d3f6:	4421      	add	r1, r4
 800d3f8:	1854      	adds	r4, r2, r1
 800d3fa:	42a3      	cmp	r3, r4
 800d3fc:	6011      	str	r1, [r2, #0]
 800d3fe:	d1e0      	bne.n	800d3c2 <_free_r+0x26>
 800d400:	681c      	ldr	r4, [r3, #0]
 800d402:	685b      	ldr	r3, [r3, #4]
 800d404:	6053      	str	r3, [r2, #4]
 800d406:	440c      	add	r4, r1
 800d408:	6014      	str	r4, [r2, #0]
 800d40a:	e7da      	b.n	800d3c2 <_free_r+0x26>
 800d40c:	d902      	bls.n	800d414 <_free_r+0x78>
 800d40e:	230c      	movs	r3, #12
 800d410:	6003      	str	r3, [r0, #0]
 800d412:	e7d6      	b.n	800d3c2 <_free_r+0x26>
 800d414:	6825      	ldr	r5, [r4, #0]
 800d416:	1961      	adds	r1, r4, r5
 800d418:	428b      	cmp	r3, r1
 800d41a:	bf04      	itt	eq
 800d41c:	6819      	ldreq	r1, [r3, #0]
 800d41e:	685b      	ldreq	r3, [r3, #4]
 800d420:	6063      	str	r3, [r4, #4]
 800d422:	bf04      	itt	eq
 800d424:	1949      	addeq	r1, r1, r5
 800d426:	6021      	streq	r1, [r4, #0]
 800d428:	6054      	str	r4, [r2, #4]
 800d42a:	e7ca      	b.n	800d3c2 <_free_r+0x26>
 800d42c:	b003      	add	sp, #12
 800d42e:	bd30      	pop	{r4, r5, pc}
 800d430:	2000111c 	.word	0x2000111c

0800d434 <malloc>:
 800d434:	4b02      	ldr	r3, [pc, #8]	; (800d440 <malloc+0xc>)
 800d436:	4601      	mov	r1, r0
 800d438:	6818      	ldr	r0, [r3, #0]
 800d43a:	f000 b823 	b.w	800d484 <_malloc_r>
 800d43e:	bf00      	nop
 800d440:	20000170 	.word	0x20000170

0800d444 <sbrk_aligned>:
 800d444:	b570      	push	{r4, r5, r6, lr}
 800d446:	4e0e      	ldr	r6, [pc, #56]	; (800d480 <sbrk_aligned+0x3c>)
 800d448:	460c      	mov	r4, r1
 800d44a:	6831      	ldr	r1, [r6, #0]
 800d44c:	4605      	mov	r5, r0
 800d44e:	b911      	cbnz	r1, 800d456 <sbrk_aligned+0x12>
 800d450:	f000 fcce 	bl	800ddf0 <_sbrk_r>
 800d454:	6030      	str	r0, [r6, #0]
 800d456:	4621      	mov	r1, r4
 800d458:	4628      	mov	r0, r5
 800d45a:	f000 fcc9 	bl	800ddf0 <_sbrk_r>
 800d45e:	1c43      	adds	r3, r0, #1
 800d460:	d00a      	beq.n	800d478 <sbrk_aligned+0x34>
 800d462:	1cc4      	adds	r4, r0, #3
 800d464:	f024 0403 	bic.w	r4, r4, #3
 800d468:	42a0      	cmp	r0, r4
 800d46a:	d007      	beq.n	800d47c <sbrk_aligned+0x38>
 800d46c:	1a21      	subs	r1, r4, r0
 800d46e:	4628      	mov	r0, r5
 800d470:	f000 fcbe 	bl	800ddf0 <_sbrk_r>
 800d474:	3001      	adds	r0, #1
 800d476:	d101      	bne.n	800d47c <sbrk_aligned+0x38>
 800d478:	f04f 34ff 	mov.w	r4, #4294967295
 800d47c:	4620      	mov	r0, r4
 800d47e:	bd70      	pop	{r4, r5, r6, pc}
 800d480:	20001120 	.word	0x20001120

0800d484 <_malloc_r>:
 800d484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d488:	1ccd      	adds	r5, r1, #3
 800d48a:	f025 0503 	bic.w	r5, r5, #3
 800d48e:	3508      	adds	r5, #8
 800d490:	2d0c      	cmp	r5, #12
 800d492:	bf38      	it	cc
 800d494:	250c      	movcc	r5, #12
 800d496:	2d00      	cmp	r5, #0
 800d498:	4607      	mov	r7, r0
 800d49a:	db01      	blt.n	800d4a0 <_malloc_r+0x1c>
 800d49c:	42a9      	cmp	r1, r5
 800d49e:	d905      	bls.n	800d4ac <_malloc_r+0x28>
 800d4a0:	230c      	movs	r3, #12
 800d4a2:	603b      	str	r3, [r7, #0]
 800d4a4:	2600      	movs	r6, #0
 800d4a6:	4630      	mov	r0, r6
 800d4a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d580 <_malloc_r+0xfc>
 800d4b0:	f000 f868 	bl	800d584 <__malloc_lock>
 800d4b4:	f8d8 3000 	ldr.w	r3, [r8]
 800d4b8:	461c      	mov	r4, r3
 800d4ba:	bb5c      	cbnz	r4, 800d514 <_malloc_r+0x90>
 800d4bc:	4629      	mov	r1, r5
 800d4be:	4638      	mov	r0, r7
 800d4c0:	f7ff ffc0 	bl	800d444 <sbrk_aligned>
 800d4c4:	1c43      	adds	r3, r0, #1
 800d4c6:	4604      	mov	r4, r0
 800d4c8:	d155      	bne.n	800d576 <_malloc_r+0xf2>
 800d4ca:	f8d8 4000 	ldr.w	r4, [r8]
 800d4ce:	4626      	mov	r6, r4
 800d4d0:	2e00      	cmp	r6, #0
 800d4d2:	d145      	bne.n	800d560 <_malloc_r+0xdc>
 800d4d4:	2c00      	cmp	r4, #0
 800d4d6:	d048      	beq.n	800d56a <_malloc_r+0xe6>
 800d4d8:	6823      	ldr	r3, [r4, #0]
 800d4da:	4631      	mov	r1, r6
 800d4dc:	4638      	mov	r0, r7
 800d4de:	eb04 0903 	add.w	r9, r4, r3
 800d4e2:	f000 fc85 	bl	800ddf0 <_sbrk_r>
 800d4e6:	4581      	cmp	r9, r0
 800d4e8:	d13f      	bne.n	800d56a <_malloc_r+0xe6>
 800d4ea:	6821      	ldr	r1, [r4, #0]
 800d4ec:	1a6d      	subs	r5, r5, r1
 800d4ee:	4629      	mov	r1, r5
 800d4f0:	4638      	mov	r0, r7
 800d4f2:	f7ff ffa7 	bl	800d444 <sbrk_aligned>
 800d4f6:	3001      	adds	r0, #1
 800d4f8:	d037      	beq.n	800d56a <_malloc_r+0xe6>
 800d4fa:	6823      	ldr	r3, [r4, #0]
 800d4fc:	442b      	add	r3, r5
 800d4fe:	6023      	str	r3, [r4, #0]
 800d500:	f8d8 3000 	ldr.w	r3, [r8]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d038      	beq.n	800d57a <_malloc_r+0xf6>
 800d508:	685a      	ldr	r2, [r3, #4]
 800d50a:	42a2      	cmp	r2, r4
 800d50c:	d12b      	bne.n	800d566 <_malloc_r+0xe2>
 800d50e:	2200      	movs	r2, #0
 800d510:	605a      	str	r2, [r3, #4]
 800d512:	e00f      	b.n	800d534 <_malloc_r+0xb0>
 800d514:	6822      	ldr	r2, [r4, #0]
 800d516:	1b52      	subs	r2, r2, r5
 800d518:	d41f      	bmi.n	800d55a <_malloc_r+0xd6>
 800d51a:	2a0b      	cmp	r2, #11
 800d51c:	d917      	bls.n	800d54e <_malloc_r+0xca>
 800d51e:	1961      	adds	r1, r4, r5
 800d520:	42a3      	cmp	r3, r4
 800d522:	6025      	str	r5, [r4, #0]
 800d524:	bf18      	it	ne
 800d526:	6059      	strne	r1, [r3, #4]
 800d528:	6863      	ldr	r3, [r4, #4]
 800d52a:	bf08      	it	eq
 800d52c:	f8c8 1000 	streq.w	r1, [r8]
 800d530:	5162      	str	r2, [r4, r5]
 800d532:	604b      	str	r3, [r1, #4]
 800d534:	4638      	mov	r0, r7
 800d536:	f104 060b 	add.w	r6, r4, #11
 800d53a:	f000 f829 	bl	800d590 <__malloc_unlock>
 800d53e:	f026 0607 	bic.w	r6, r6, #7
 800d542:	1d23      	adds	r3, r4, #4
 800d544:	1af2      	subs	r2, r6, r3
 800d546:	d0ae      	beq.n	800d4a6 <_malloc_r+0x22>
 800d548:	1b9b      	subs	r3, r3, r6
 800d54a:	50a3      	str	r3, [r4, r2]
 800d54c:	e7ab      	b.n	800d4a6 <_malloc_r+0x22>
 800d54e:	42a3      	cmp	r3, r4
 800d550:	6862      	ldr	r2, [r4, #4]
 800d552:	d1dd      	bne.n	800d510 <_malloc_r+0x8c>
 800d554:	f8c8 2000 	str.w	r2, [r8]
 800d558:	e7ec      	b.n	800d534 <_malloc_r+0xb0>
 800d55a:	4623      	mov	r3, r4
 800d55c:	6864      	ldr	r4, [r4, #4]
 800d55e:	e7ac      	b.n	800d4ba <_malloc_r+0x36>
 800d560:	4634      	mov	r4, r6
 800d562:	6876      	ldr	r6, [r6, #4]
 800d564:	e7b4      	b.n	800d4d0 <_malloc_r+0x4c>
 800d566:	4613      	mov	r3, r2
 800d568:	e7cc      	b.n	800d504 <_malloc_r+0x80>
 800d56a:	230c      	movs	r3, #12
 800d56c:	603b      	str	r3, [r7, #0]
 800d56e:	4638      	mov	r0, r7
 800d570:	f000 f80e 	bl	800d590 <__malloc_unlock>
 800d574:	e797      	b.n	800d4a6 <_malloc_r+0x22>
 800d576:	6025      	str	r5, [r4, #0]
 800d578:	e7dc      	b.n	800d534 <_malloc_r+0xb0>
 800d57a:	605b      	str	r3, [r3, #4]
 800d57c:	deff      	udf	#255	; 0xff
 800d57e:	bf00      	nop
 800d580:	2000111c 	.word	0x2000111c

0800d584 <__malloc_lock>:
 800d584:	4801      	ldr	r0, [pc, #4]	; (800d58c <__malloc_lock+0x8>)
 800d586:	f7ff b88d 	b.w	800c6a4 <__retarget_lock_acquire_recursive>
 800d58a:	bf00      	nop
 800d58c:	20001118 	.word	0x20001118

0800d590 <__malloc_unlock>:
 800d590:	4801      	ldr	r0, [pc, #4]	; (800d598 <__malloc_unlock+0x8>)
 800d592:	f7ff b888 	b.w	800c6a6 <__retarget_lock_release_recursive>
 800d596:	bf00      	nop
 800d598:	20001118 	.word	0x20001118

0800d59c <_Balloc>:
 800d59c:	b570      	push	{r4, r5, r6, lr}
 800d59e:	69c6      	ldr	r6, [r0, #28]
 800d5a0:	4604      	mov	r4, r0
 800d5a2:	460d      	mov	r5, r1
 800d5a4:	b976      	cbnz	r6, 800d5c4 <_Balloc+0x28>
 800d5a6:	2010      	movs	r0, #16
 800d5a8:	f7ff ff44 	bl	800d434 <malloc>
 800d5ac:	4602      	mov	r2, r0
 800d5ae:	61e0      	str	r0, [r4, #28]
 800d5b0:	b920      	cbnz	r0, 800d5bc <_Balloc+0x20>
 800d5b2:	4b18      	ldr	r3, [pc, #96]	; (800d614 <_Balloc+0x78>)
 800d5b4:	4818      	ldr	r0, [pc, #96]	; (800d618 <_Balloc+0x7c>)
 800d5b6:	216b      	movs	r1, #107	; 0x6b
 800d5b8:	f000 fc38 	bl	800de2c <__assert_func>
 800d5bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d5c0:	6006      	str	r6, [r0, #0]
 800d5c2:	60c6      	str	r6, [r0, #12]
 800d5c4:	69e6      	ldr	r6, [r4, #28]
 800d5c6:	68f3      	ldr	r3, [r6, #12]
 800d5c8:	b183      	cbz	r3, 800d5ec <_Balloc+0x50>
 800d5ca:	69e3      	ldr	r3, [r4, #28]
 800d5cc:	68db      	ldr	r3, [r3, #12]
 800d5ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d5d2:	b9b8      	cbnz	r0, 800d604 <_Balloc+0x68>
 800d5d4:	2101      	movs	r1, #1
 800d5d6:	fa01 f605 	lsl.w	r6, r1, r5
 800d5da:	1d72      	adds	r2, r6, #5
 800d5dc:	0092      	lsls	r2, r2, #2
 800d5de:	4620      	mov	r0, r4
 800d5e0:	f000 fc42 	bl	800de68 <_calloc_r>
 800d5e4:	b160      	cbz	r0, 800d600 <_Balloc+0x64>
 800d5e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d5ea:	e00e      	b.n	800d60a <_Balloc+0x6e>
 800d5ec:	2221      	movs	r2, #33	; 0x21
 800d5ee:	2104      	movs	r1, #4
 800d5f0:	4620      	mov	r0, r4
 800d5f2:	f000 fc39 	bl	800de68 <_calloc_r>
 800d5f6:	69e3      	ldr	r3, [r4, #28]
 800d5f8:	60f0      	str	r0, [r6, #12]
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d1e4      	bne.n	800d5ca <_Balloc+0x2e>
 800d600:	2000      	movs	r0, #0
 800d602:	bd70      	pop	{r4, r5, r6, pc}
 800d604:	6802      	ldr	r2, [r0, #0]
 800d606:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d60a:	2300      	movs	r3, #0
 800d60c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d610:	e7f7      	b.n	800d602 <_Balloc+0x66>
 800d612:	bf00      	nop
 800d614:	0800e559 	.word	0x0800e559
 800d618:	0800e5d9 	.word	0x0800e5d9

0800d61c <_Bfree>:
 800d61c:	b570      	push	{r4, r5, r6, lr}
 800d61e:	69c6      	ldr	r6, [r0, #28]
 800d620:	4605      	mov	r5, r0
 800d622:	460c      	mov	r4, r1
 800d624:	b976      	cbnz	r6, 800d644 <_Bfree+0x28>
 800d626:	2010      	movs	r0, #16
 800d628:	f7ff ff04 	bl	800d434 <malloc>
 800d62c:	4602      	mov	r2, r0
 800d62e:	61e8      	str	r0, [r5, #28]
 800d630:	b920      	cbnz	r0, 800d63c <_Bfree+0x20>
 800d632:	4b09      	ldr	r3, [pc, #36]	; (800d658 <_Bfree+0x3c>)
 800d634:	4809      	ldr	r0, [pc, #36]	; (800d65c <_Bfree+0x40>)
 800d636:	218f      	movs	r1, #143	; 0x8f
 800d638:	f000 fbf8 	bl	800de2c <__assert_func>
 800d63c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d640:	6006      	str	r6, [r0, #0]
 800d642:	60c6      	str	r6, [r0, #12]
 800d644:	b13c      	cbz	r4, 800d656 <_Bfree+0x3a>
 800d646:	69eb      	ldr	r3, [r5, #28]
 800d648:	6862      	ldr	r2, [r4, #4]
 800d64a:	68db      	ldr	r3, [r3, #12]
 800d64c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d650:	6021      	str	r1, [r4, #0]
 800d652:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d656:	bd70      	pop	{r4, r5, r6, pc}
 800d658:	0800e559 	.word	0x0800e559
 800d65c:	0800e5d9 	.word	0x0800e5d9

0800d660 <__multadd>:
 800d660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d664:	690d      	ldr	r5, [r1, #16]
 800d666:	4607      	mov	r7, r0
 800d668:	460c      	mov	r4, r1
 800d66a:	461e      	mov	r6, r3
 800d66c:	f101 0c14 	add.w	ip, r1, #20
 800d670:	2000      	movs	r0, #0
 800d672:	f8dc 3000 	ldr.w	r3, [ip]
 800d676:	b299      	uxth	r1, r3
 800d678:	fb02 6101 	mla	r1, r2, r1, r6
 800d67c:	0c1e      	lsrs	r6, r3, #16
 800d67e:	0c0b      	lsrs	r3, r1, #16
 800d680:	fb02 3306 	mla	r3, r2, r6, r3
 800d684:	b289      	uxth	r1, r1
 800d686:	3001      	adds	r0, #1
 800d688:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d68c:	4285      	cmp	r5, r0
 800d68e:	f84c 1b04 	str.w	r1, [ip], #4
 800d692:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d696:	dcec      	bgt.n	800d672 <__multadd+0x12>
 800d698:	b30e      	cbz	r6, 800d6de <__multadd+0x7e>
 800d69a:	68a3      	ldr	r3, [r4, #8]
 800d69c:	42ab      	cmp	r3, r5
 800d69e:	dc19      	bgt.n	800d6d4 <__multadd+0x74>
 800d6a0:	6861      	ldr	r1, [r4, #4]
 800d6a2:	4638      	mov	r0, r7
 800d6a4:	3101      	adds	r1, #1
 800d6a6:	f7ff ff79 	bl	800d59c <_Balloc>
 800d6aa:	4680      	mov	r8, r0
 800d6ac:	b928      	cbnz	r0, 800d6ba <__multadd+0x5a>
 800d6ae:	4602      	mov	r2, r0
 800d6b0:	4b0c      	ldr	r3, [pc, #48]	; (800d6e4 <__multadd+0x84>)
 800d6b2:	480d      	ldr	r0, [pc, #52]	; (800d6e8 <__multadd+0x88>)
 800d6b4:	21ba      	movs	r1, #186	; 0xba
 800d6b6:	f000 fbb9 	bl	800de2c <__assert_func>
 800d6ba:	6922      	ldr	r2, [r4, #16]
 800d6bc:	3202      	adds	r2, #2
 800d6be:	f104 010c 	add.w	r1, r4, #12
 800d6c2:	0092      	lsls	r2, r2, #2
 800d6c4:	300c      	adds	r0, #12
 800d6c6:	f000 fba3 	bl	800de10 <memcpy>
 800d6ca:	4621      	mov	r1, r4
 800d6cc:	4638      	mov	r0, r7
 800d6ce:	f7ff ffa5 	bl	800d61c <_Bfree>
 800d6d2:	4644      	mov	r4, r8
 800d6d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d6d8:	3501      	adds	r5, #1
 800d6da:	615e      	str	r6, [r3, #20]
 800d6dc:	6125      	str	r5, [r4, #16]
 800d6de:	4620      	mov	r0, r4
 800d6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6e4:	0800e5c8 	.word	0x0800e5c8
 800d6e8:	0800e5d9 	.word	0x0800e5d9

0800d6ec <__hi0bits>:
 800d6ec:	0c03      	lsrs	r3, r0, #16
 800d6ee:	041b      	lsls	r3, r3, #16
 800d6f0:	b9d3      	cbnz	r3, 800d728 <__hi0bits+0x3c>
 800d6f2:	0400      	lsls	r0, r0, #16
 800d6f4:	2310      	movs	r3, #16
 800d6f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d6fa:	bf04      	itt	eq
 800d6fc:	0200      	lsleq	r0, r0, #8
 800d6fe:	3308      	addeq	r3, #8
 800d700:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d704:	bf04      	itt	eq
 800d706:	0100      	lsleq	r0, r0, #4
 800d708:	3304      	addeq	r3, #4
 800d70a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d70e:	bf04      	itt	eq
 800d710:	0080      	lsleq	r0, r0, #2
 800d712:	3302      	addeq	r3, #2
 800d714:	2800      	cmp	r0, #0
 800d716:	db05      	blt.n	800d724 <__hi0bits+0x38>
 800d718:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d71c:	f103 0301 	add.w	r3, r3, #1
 800d720:	bf08      	it	eq
 800d722:	2320      	moveq	r3, #32
 800d724:	4618      	mov	r0, r3
 800d726:	4770      	bx	lr
 800d728:	2300      	movs	r3, #0
 800d72a:	e7e4      	b.n	800d6f6 <__hi0bits+0xa>

0800d72c <__lo0bits>:
 800d72c:	6803      	ldr	r3, [r0, #0]
 800d72e:	f013 0207 	ands.w	r2, r3, #7
 800d732:	d00c      	beq.n	800d74e <__lo0bits+0x22>
 800d734:	07d9      	lsls	r1, r3, #31
 800d736:	d422      	bmi.n	800d77e <__lo0bits+0x52>
 800d738:	079a      	lsls	r2, r3, #30
 800d73a:	bf49      	itett	mi
 800d73c:	085b      	lsrmi	r3, r3, #1
 800d73e:	089b      	lsrpl	r3, r3, #2
 800d740:	6003      	strmi	r3, [r0, #0]
 800d742:	2201      	movmi	r2, #1
 800d744:	bf5c      	itt	pl
 800d746:	6003      	strpl	r3, [r0, #0]
 800d748:	2202      	movpl	r2, #2
 800d74a:	4610      	mov	r0, r2
 800d74c:	4770      	bx	lr
 800d74e:	b299      	uxth	r1, r3
 800d750:	b909      	cbnz	r1, 800d756 <__lo0bits+0x2a>
 800d752:	0c1b      	lsrs	r3, r3, #16
 800d754:	2210      	movs	r2, #16
 800d756:	b2d9      	uxtb	r1, r3
 800d758:	b909      	cbnz	r1, 800d75e <__lo0bits+0x32>
 800d75a:	3208      	adds	r2, #8
 800d75c:	0a1b      	lsrs	r3, r3, #8
 800d75e:	0719      	lsls	r1, r3, #28
 800d760:	bf04      	itt	eq
 800d762:	091b      	lsreq	r3, r3, #4
 800d764:	3204      	addeq	r2, #4
 800d766:	0799      	lsls	r1, r3, #30
 800d768:	bf04      	itt	eq
 800d76a:	089b      	lsreq	r3, r3, #2
 800d76c:	3202      	addeq	r2, #2
 800d76e:	07d9      	lsls	r1, r3, #31
 800d770:	d403      	bmi.n	800d77a <__lo0bits+0x4e>
 800d772:	085b      	lsrs	r3, r3, #1
 800d774:	f102 0201 	add.w	r2, r2, #1
 800d778:	d003      	beq.n	800d782 <__lo0bits+0x56>
 800d77a:	6003      	str	r3, [r0, #0]
 800d77c:	e7e5      	b.n	800d74a <__lo0bits+0x1e>
 800d77e:	2200      	movs	r2, #0
 800d780:	e7e3      	b.n	800d74a <__lo0bits+0x1e>
 800d782:	2220      	movs	r2, #32
 800d784:	e7e1      	b.n	800d74a <__lo0bits+0x1e>
	...

0800d788 <__i2b>:
 800d788:	b510      	push	{r4, lr}
 800d78a:	460c      	mov	r4, r1
 800d78c:	2101      	movs	r1, #1
 800d78e:	f7ff ff05 	bl	800d59c <_Balloc>
 800d792:	4602      	mov	r2, r0
 800d794:	b928      	cbnz	r0, 800d7a2 <__i2b+0x1a>
 800d796:	4b05      	ldr	r3, [pc, #20]	; (800d7ac <__i2b+0x24>)
 800d798:	4805      	ldr	r0, [pc, #20]	; (800d7b0 <__i2b+0x28>)
 800d79a:	f240 1145 	movw	r1, #325	; 0x145
 800d79e:	f000 fb45 	bl	800de2c <__assert_func>
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	6144      	str	r4, [r0, #20]
 800d7a6:	6103      	str	r3, [r0, #16]
 800d7a8:	bd10      	pop	{r4, pc}
 800d7aa:	bf00      	nop
 800d7ac:	0800e5c8 	.word	0x0800e5c8
 800d7b0:	0800e5d9 	.word	0x0800e5d9

0800d7b4 <__multiply>:
 800d7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b8:	4691      	mov	r9, r2
 800d7ba:	690a      	ldr	r2, [r1, #16]
 800d7bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d7c0:	429a      	cmp	r2, r3
 800d7c2:	bfb8      	it	lt
 800d7c4:	460b      	movlt	r3, r1
 800d7c6:	460c      	mov	r4, r1
 800d7c8:	bfbc      	itt	lt
 800d7ca:	464c      	movlt	r4, r9
 800d7cc:	4699      	movlt	r9, r3
 800d7ce:	6927      	ldr	r7, [r4, #16]
 800d7d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d7d4:	68a3      	ldr	r3, [r4, #8]
 800d7d6:	6861      	ldr	r1, [r4, #4]
 800d7d8:	eb07 060a 	add.w	r6, r7, sl
 800d7dc:	42b3      	cmp	r3, r6
 800d7de:	b085      	sub	sp, #20
 800d7e0:	bfb8      	it	lt
 800d7e2:	3101      	addlt	r1, #1
 800d7e4:	f7ff feda 	bl	800d59c <_Balloc>
 800d7e8:	b930      	cbnz	r0, 800d7f8 <__multiply+0x44>
 800d7ea:	4602      	mov	r2, r0
 800d7ec:	4b44      	ldr	r3, [pc, #272]	; (800d900 <__multiply+0x14c>)
 800d7ee:	4845      	ldr	r0, [pc, #276]	; (800d904 <__multiply+0x150>)
 800d7f0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d7f4:	f000 fb1a 	bl	800de2c <__assert_func>
 800d7f8:	f100 0514 	add.w	r5, r0, #20
 800d7fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d800:	462b      	mov	r3, r5
 800d802:	2200      	movs	r2, #0
 800d804:	4543      	cmp	r3, r8
 800d806:	d321      	bcc.n	800d84c <__multiply+0x98>
 800d808:	f104 0314 	add.w	r3, r4, #20
 800d80c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d810:	f109 0314 	add.w	r3, r9, #20
 800d814:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d818:	9202      	str	r2, [sp, #8]
 800d81a:	1b3a      	subs	r2, r7, r4
 800d81c:	3a15      	subs	r2, #21
 800d81e:	f022 0203 	bic.w	r2, r2, #3
 800d822:	3204      	adds	r2, #4
 800d824:	f104 0115 	add.w	r1, r4, #21
 800d828:	428f      	cmp	r7, r1
 800d82a:	bf38      	it	cc
 800d82c:	2204      	movcc	r2, #4
 800d82e:	9201      	str	r2, [sp, #4]
 800d830:	9a02      	ldr	r2, [sp, #8]
 800d832:	9303      	str	r3, [sp, #12]
 800d834:	429a      	cmp	r2, r3
 800d836:	d80c      	bhi.n	800d852 <__multiply+0x9e>
 800d838:	2e00      	cmp	r6, #0
 800d83a:	dd03      	ble.n	800d844 <__multiply+0x90>
 800d83c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d840:	2b00      	cmp	r3, #0
 800d842:	d05b      	beq.n	800d8fc <__multiply+0x148>
 800d844:	6106      	str	r6, [r0, #16]
 800d846:	b005      	add	sp, #20
 800d848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d84c:	f843 2b04 	str.w	r2, [r3], #4
 800d850:	e7d8      	b.n	800d804 <__multiply+0x50>
 800d852:	f8b3 a000 	ldrh.w	sl, [r3]
 800d856:	f1ba 0f00 	cmp.w	sl, #0
 800d85a:	d024      	beq.n	800d8a6 <__multiply+0xf2>
 800d85c:	f104 0e14 	add.w	lr, r4, #20
 800d860:	46a9      	mov	r9, r5
 800d862:	f04f 0c00 	mov.w	ip, #0
 800d866:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d86a:	f8d9 1000 	ldr.w	r1, [r9]
 800d86e:	fa1f fb82 	uxth.w	fp, r2
 800d872:	b289      	uxth	r1, r1
 800d874:	fb0a 110b 	mla	r1, sl, fp, r1
 800d878:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d87c:	f8d9 2000 	ldr.w	r2, [r9]
 800d880:	4461      	add	r1, ip
 800d882:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d886:	fb0a c20b 	mla	r2, sl, fp, ip
 800d88a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d88e:	b289      	uxth	r1, r1
 800d890:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d894:	4577      	cmp	r7, lr
 800d896:	f849 1b04 	str.w	r1, [r9], #4
 800d89a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d89e:	d8e2      	bhi.n	800d866 <__multiply+0xb2>
 800d8a0:	9a01      	ldr	r2, [sp, #4]
 800d8a2:	f845 c002 	str.w	ip, [r5, r2]
 800d8a6:	9a03      	ldr	r2, [sp, #12]
 800d8a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d8ac:	3304      	adds	r3, #4
 800d8ae:	f1b9 0f00 	cmp.w	r9, #0
 800d8b2:	d021      	beq.n	800d8f8 <__multiply+0x144>
 800d8b4:	6829      	ldr	r1, [r5, #0]
 800d8b6:	f104 0c14 	add.w	ip, r4, #20
 800d8ba:	46ae      	mov	lr, r5
 800d8bc:	f04f 0a00 	mov.w	sl, #0
 800d8c0:	f8bc b000 	ldrh.w	fp, [ip]
 800d8c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d8c8:	fb09 220b 	mla	r2, r9, fp, r2
 800d8cc:	4452      	add	r2, sl
 800d8ce:	b289      	uxth	r1, r1
 800d8d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d8d4:	f84e 1b04 	str.w	r1, [lr], #4
 800d8d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d8dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d8e0:	f8be 1000 	ldrh.w	r1, [lr]
 800d8e4:	fb09 110a 	mla	r1, r9, sl, r1
 800d8e8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d8ec:	4567      	cmp	r7, ip
 800d8ee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d8f2:	d8e5      	bhi.n	800d8c0 <__multiply+0x10c>
 800d8f4:	9a01      	ldr	r2, [sp, #4]
 800d8f6:	50a9      	str	r1, [r5, r2]
 800d8f8:	3504      	adds	r5, #4
 800d8fa:	e799      	b.n	800d830 <__multiply+0x7c>
 800d8fc:	3e01      	subs	r6, #1
 800d8fe:	e79b      	b.n	800d838 <__multiply+0x84>
 800d900:	0800e5c8 	.word	0x0800e5c8
 800d904:	0800e5d9 	.word	0x0800e5d9

0800d908 <__pow5mult>:
 800d908:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d90c:	4615      	mov	r5, r2
 800d90e:	f012 0203 	ands.w	r2, r2, #3
 800d912:	4606      	mov	r6, r0
 800d914:	460f      	mov	r7, r1
 800d916:	d007      	beq.n	800d928 <__pow5mult+0x20>
 800d918:	4c25      	ldr	r4, [pc, #148]	; (800d9b0 <__pow5mult+0xa8>)
 800d91a:	3a01      	subs	r2, #1
 800d91c:	2300      	movs	r3, #0
 800d91e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d922:	f7ff fe9d 	bl	800d660 <__multadd>
 800d926:	4607      	mov	r7, r0
 800d928:	10ad      	asrs	r5, r5, #2
 800d92a:	d03d      	beq.n	800d9a8 <__pow5mult+0xa0>
 800d92c:	69f4      	ldr	r4, [r6, #28]
 800d92e:	b97c      	cbnz	r4, 800d950 <__pow5mult+0x48>
 800d930:	2010      	movs	r0, #16
 800d932:	f7ff fd7f 	bl	800d434 <malloc>
 800d936:	4602      	mov	r2, r0
 800d938:	61f0      	str	r0, [r6, #28]
 800d93a:	b928      	cbnz	r0, 800d948 <__pow5mult+0x40>
 800d93c:	4b1d      	ldr	r3, [pc, #116]	; (800d9b4 <__pow5mult+0xac>)
 800d93e:	481e      	ldr	r0, [pc, #120]	; (800d9b8 <__pow5mult+0xb0>)
 800d940:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d944:	f000 fa72 	bl	800de2c <__assert_func>
 800d948:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d94c:	6004      	str	r4, [r0, #0]
 800d94e:	60c4      	str	r4, [r0, #12]
 800d950:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d954:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d958:	b94c      	cbnz	r4, 800d96e <__pow5mult+0x66>
 800d95a:	f240 2171 	movw	r1, #625	; 0x271
 800d95e:	4630      	mov	r0, r6
 800d960:	f7ff ff12 	bl	800d788 <__i2b>
 800d964:	2300      	movs	r3, #0
 800d966:	f8c8 0008 	str.w	r0, [r8, #8]
 800d96a:	4604      	mov	r4, r0
 800d96c:	6003      	str	r3, [r0, #0]
 800d96e:	f04f 0900 	mov.w	r9, #0
 800d972:	07eb      	lsls	r3, r5, #31
 800d974:	d50a      	bpl.n	800d98c <__pow5mult+0x84>
 800d976:	4639      	mov	r1, r7
 800d978:	4622      	mov	r2, r4
 800d97a:	4630      	mov	r0, r6
 800d97c:	f7ff ff1a 	bl	800d7b4 <__multiply>
 800d980:	4639      	mov	r1, r7
 800d982:	4680      	mov	r8, r0
 800d984:	4630      	mov	r0, r6
 800d986:	f7ff fe49 	bl	800d61c <_Bfree>
 800d98a:	4647      	mov	r7, r8
 800d98c:	106d      	asrs	r5, r5, #1
 800d98e:	d00b      	beq.n	800d9a8 <__pow5mult+0xa0>
 800d990:	6820      	ldr	r0, [r4, #0]
 800d992:	b938      	cbnz	r0, 800d9a4 <__pow5mult+0x9c>
 800d994:	4622      	mov	r2, r4
 800d996:	4621      	mov	r1, r4
 800d998:	4630      	mov	r0, r6
 800d99a:	f7ff ff0b 	bl	800d7b4 <__multiply>
 800d99e:	6020      	str	r0, [r4, #0]
 800d9a0:	f8c0 9000 	str.w	r9, [r0]
 800d9a4:	4604      	mov	r4, r0
 800d9a6:	e7e4      	b.n	800d972 <__pow5mult+0x6a>
 800d9a8:	4638      	mov	r0, r7
 800d9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9ae:	bf00      	nop
 800d9b0:	0800e728 	.word	0x0800e728
 800d9b4:	0800e559 	.word	0x0800e559
 800d9b8:	0800e5d9 	.word	0x0800e5d9

0800d9bc <__lshift>:
 800d9bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9c0:	460c      	mov	r4, r1
 800d9c2:	6849      	ldr	r1, [r1, #4]
 800d9c4:	6923      	ldr	r3, [r4, #16]
 800d9c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d9ca:	68a3      	ldr	r3, [r4, #8]
 800d9cc:	4607      	mov	r7, r0
 800d9ce:	4691      	mov	r9, r2
 800d9d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d9d4:	f108 0601 	add.w	r6, r8, #1
 800d9d8:	42b3      	cmp	r3, r6
 800d9da:	db0b      	blt.n	800d9f4 <__lshift+0x38>
 800d9dc:	4638      	mov	r0, r7
 800d9de:	f7ff fddd 	bl	800d59c <_Balloc>
 800d9e2:	4605      	mov	r5, r0
 800d9e4:	b948      	cbnz	r0, 800d9fa <__lshift+0x3e>
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	4b28      	ldr	r3, [pc, #160]	; (800da8c <__lshift+0xd0>)
 800d9ea:	4829      	ldr	r0, [pc, #164]	; (800da90 <__lshift+0xd4>)
 800d9ec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d9f0:	f000 fa1c 	bl	800de2c <__assert_func>
 800d9f4:	3101      	adds	r1, #1
 800d9f6:	005b      	lsls	r3, r3, #1
 800d9f8:	e7ee      	b.n	800d9d8 <__lshift+0x1c>
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	f100 0114 	add.w	r1, r0, #20
 800da00:	f100 0210 	add.w	r2, r0, #16
 800da04:	4618      	mov	r0, r3
 800da06:	4553      	cmp	r3, sl
 800da08:	db33      	blt.n	800da72 <__lshift+0xb6>
 800da0a:	6920      	ldr	r0, [r4, #16]
 800da0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800da10:	f104 0314 	add.w	r3, r4, #20
 800da14:	f019 091f 	ands.w	r9, r9, #31
 800da18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800da1c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800da20:	d02b      	beq.n	800da7a <__lshift+0xbe>
 800da22:	f1c9 0e20 	rsb	lr, r9, #32
 800da26:	468a      	mov	sl, r1
 800da28:	2200      	movs	r2, #0
 800da2a:	6818      	ldr	r0, [r3, #0]
 800da2c:	fa00 f009 	lsl.w	r0, r0, r9
 800da30:	4310      	orrs	r0, r2
 800da32:	f84a 0b04 	str.w	r0, [sl], #4
 800da36:	f853 2b04 	ldr.w	r2, [r3], #4
 800da3a:	459c      	cmp	ip, r3
 800da3c:	fa22 f20e 	lsr.w	r2, r2, lr
 800da40:	d8f3      	bhi.n	800da2a <__lshift+0x6e>
 800da42:	ebac 0304 	sub.w	r3, ip, r4
 800da46:	3b15      	subs	r3, #21
 800da48:	f023 0303 	bic.w	r3, r3, #3
 800da4c:	3304      	adds	r3, #4
 800da4e:	f104 0015 	add.w	r0, r4, #21
 800da52:	4584      	cmp	ip, r0
 800da54:	bf38      	it	cc
 800da56:	2304      	movcc	r3, #4
 800da58:	50ca      	str	r2, [r1, r3]
 800da5a:	b10a      	cbz	r2, 800da60 <__lshift+0xa4>
 800da5c:	f108 0602 	add.w	r6, r8, #2
 800da60:	3e01      	subs	r6, #1
 800da62:	4638      	mov	r0, r7
 800da64:	612e      	str	r6, [r5, #16]
 800da66:	4621      	mov	r1, r4
 800da68:	f7ff fdd8 	bl	800d61c <_Bfree>
 800da6c:	4628      	mov	r0, r5
 800da6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da72:	f842 0f04 	str.w	r0, [r2, #4]!
 800da76:	3301      	adds	r3, #1
 800da78:	e7c5      	b.n	800da06 <__lshift+0x4a>
 800da7a:	3904      	subs	r1, #4
 800da7c:	f853 2b04 	ldr.w	r2, [r3], #4
 800da80:	f841 2f04 	str.w	r2, [r1, #4]!
 800da84:	459c      	cmp	ip, r3
 800da86:	d8f9      	bhi.n	800da7c <__lshift+0xc0>
 800da88:	e7ea      	b.n	800da60 <__lshift+0xa4>
 800da8a:	bf00      	nop
 800da8c:	0800e5c8 	.word	0x0800e5c8
 800da90:	0800e5d9 	.word	0x0800e5d9

0800da94 <__mcmp>:
 800da94:	b530      	push	{r4, r5, lr}
 800da96:	6902      	ldr	r2, [r0, #16]
 800da98:	690c      	ldr	r4, [r1, #16]
 800da9a:	1b12      	subs	r2, r2, r4
 800da9c:	d10e      	bne.n	800dabc <__mcmp+0x28>
 800da9e:	f100 0314 	add.w	r3, r0, #20
 800daa2:	3114      	adds	r1, #20
 800daa4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800daa8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800daac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dab0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dab4:	42a5      	cmp	r5, r4
 800dab6:	d003      	beq.n	800dac0 <__mcmp+0x2c>
 800dab8:	d305      	bcc.n	800dac6 <__mcmp+0x32>
 800daba:	2201      	movs	r2, #1
 800dabc:	4610      	mov	r0, r2
 800dabe:	bd30      	pop	{r4, r5, pc}
 800dac0:	4283      	cmp	r3, r0
 800dac2:	d3f3      	bcc.n	800daac <__mcmp+0x18>
 800dac4:	e7fa      	b.n	800dabc <__mcmp+0x28>
 800dac6:	f04f 32ff 	mov.w	r2, #4294967295
 800daca:	e7f7      	b.n	800dabc <__mcmp+0x28>

0800dacc <__mdiff>:
 800dacc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dad0:	460c      	mov	r4, r1
 800dad2:	4606      	mov	r6, r0
 800dad4:	4611      	mov	r1, r2
 800dad6:	4620      	mov	r0, r4
 800dad8:	4690      	mov	r8, r2
 800dada:	f7ff ffdb 	bl	800da94 <__mcmp>
 800dade:	1e05      	subs	r5, r0, #0
 800dae0:	d110      	bne.n	800db04 <__mdiff+0x38>
 800dae2:	4629      	mov	r1, r5
 800dae4:	4630      	mov	r0, r6
 800dae6:	f7ff fd59 	bl	800d59c <_Balloc>
 800daea:	b930      	cbnz	r0, 800dafa <__mdiff+0x2e>
 800daec:	4b3a      	ldr	r3, [pc, #232]	; (800dbd8 <__mdiff+0x10c>)
 800daee:	4602      	mov	r2, r0
 800daf0:	f240 2137 	movw	r1, #567	; 0x237
 800daf4:	4839      	ldr	r0, [pc, #228]	; (800dbdc <__mdiff+0x110>)
 800daf6:	f000 f999 	bl	800de2c <__assert_func>
 800dafa:	2301      	movs	r3, #1
 800dafc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800db00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db04:	bfa4      	itt	ge
 800db06:	4643      	movge	r3, r8
 800db08:	46a0      	movge	r8, r4
 800db0a:	4630      	mov	r0, r6
 800db0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800db10:	bfa6      	itte	ge
 800db12:	461c      	movge	r4, r3
 800db14:	2500      	movge	r5, #0
 800db16:	2501      	movlt	r5, #1
 800db18:	f7ff fd40 	bl	800d59c <_Balloc>
 800db1c:	b920      	cbnz	r0, 800db28 <__mdiff+0x5c>
 800db1e:	4b2e      	ldr	r3, [pc, #184]	; (800dbd8 <__mdiff+0x10c>)
 800db20:	4602      	mov	r2, r0
 800db22:	f240 2145 	movw	r1, #581	; 0x245
 800db26:	e7e5      	b.n	800daf4 <__mdiff+0x28>
 800db28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800db2c:	6926      	ldr	r6, [r4, #16]
 800db2e:	60c5      	str	r5, [r0, #12]
 800db30:	f104 0914 	add.w	r9, r4, #20
 800db34:	f108 0514 	add.w	r5, r8, #20
 800db38:	f100 0e14 	add.w	lr, r0, #20
 800db3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800db40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800db44:	f108 0210 	add.w	r2, r8, #16
 800db48:	46f2      	mov	sl, lr
 800db4a:	2100      	movs	r1, #0
 800db4c:	f859 3b04 	ldr.w	r3, [r9], #4
 800db50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800db54:	fa11 f88b 	uxtah	r8, r1, fp
 800db58:	b299      	uxth	r1, r3
 800db5a:	0c1b      	lsrs	r3, r3, #16
 800db5c:	eba8 0801 	sub.w	r8, r8, r1
 800db60:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800db64:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800db68:	fa1f f888 	uxth.w	r8, r8
 800db6c:	1419      	asrs	r1, r3, #16
 800db6e:	454e      	cmp	r6, r9
 800db70:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800db74:	f84a 3b04 	str.w	r3, [sl], #4
 800db78:	d8e8      	bhi.n	800db4c <__mdiff+0x80>
 800db7a:	1b33      	subs	r3, r6, r4
 800db7c:	3b15      	subs	r3, #21
 800db7e:	f023 0303 	bic.w	r3, r3, #3
 800db82:	3304      	adds	r3, #4
 800db84:	3415      	adds	r4, #21
 800db86:	42a6      	cmp	r6, r4
 800db88:	bf38      	it	cc
 800db8a:	2304      	movcc	r3, #4
 800db8c:	441d      	add	r5, r3
 800db8e:	4473      	add	r3, lr
 800db90:	469e      	mov	lr, r3
 800db92:	462e      	mov	r6, r5
 800db94:	4566      	cmp	r6, ip
 800db96:	d30e      	bcc.n	800dbb6 <__mdiff+0xea>
 800db98:	f10c 0203 	add.w	r2, ip, #3
 800db9c:	1b52      	subs	r2, r2, r5
 800db9e:	f022 0203 	bic.w	r2, r2, #3
 800dba2:	3d03      	subs	r5, #3
 800dba4:	45ac      	cmp	ip, r5
 800dba6:	bf38      	it	cc
 800dba8:	2200      	movcc	r2, #0
 800dbaa:	4413      	add	r3, r2
 800dbac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dbb0:	b17a      	cbz	r2, 800dbd2 <__mdiff+0x106>
 800dbb2:	6107      	str	r7, [r0, #16]
 800dbb4:	e7a4      	b.n	800db00 <__mdiff+0x34>
 800dbb6:	f856 8b04 	ldr.w	r8, [r6], #4
 800dbba:	fa11 f288 	uxtah	r2, r1, r8
 800dbbe:	1414      	asrs	r4, r2, #16
 800dbc0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800dbc4:	b292      	uxth	r2, r2
 800dbc6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800dbca:	f84e 2b04 	str.w	r2, [lr], #4
 800dbce:	1421      	asrs	r1, r4, #16
 800dbd0:	e7e0      	b.n	800db94 <__mdiff+0xc8>
 800dbd2:	3f01      	subs	r7, #1
 800dbd4:	e7ea      	b.n	800dbac <__mdiff+0xe0>
 800dbd6:	bf00      	nop
 800dbd8:	0800e5c8 	.word	0x0800e5c8
 800dbdc:	0800e5d9 	.word	0x0800e5d9

0800dbe0 <__d2b>:
 800dbe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dbe4:	460f      	mov	r7, r1
 800dbe6:	2101      	movs	r1, #1
 800dbe8:	ec59 8b10 	vmov	r8, r9, d0
 800dbec:	4616      	mov	r6, r2
 800dbee:	f7ff fcd5 	bl	800d59c <_Balloc>
 800dbf2:	4604      	mov	r4, r0
 800dbf4:	b930      	cbnz	r0, 800dc04 <__d2b+0x24>
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	4b24      	ldr	r3, [pc, #144]	; (800dc8c <__d2b+0xac>)
 800dbfa:	4825      	ldr	r0, [pc, #148]	; (800dc90 <__d2b+0xb0>)
 800dbfc:	f240 310f 	movw	r1, #783	; 0x30f
 800dc00:	f000 f914 	bl	800de2c <__assert_func>
 800dc04:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dc08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dc0c:	bb2d      	cbnz	r5, 800dc5a <__d2b+0x7a>
 800dc0e:	9301      	str	r3, [sp, #4]
 800dc10:	f1b8 0300 	subs.w	r3, r8, #0
 800dc14:	d026      	beq.n	800dc64 <__d2b+0x84>
 800dc16:	4668      	mov	r0, sp
 800dc18:	9300      	str	r3, [sp, #0]
 800dc1a:	f7ff fd87 	bl	800d72c <__lo0bits>
 800dc1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dc22:	b1e8      	cbz	r0, 800dc60 <__d2b+0x80>
 800dc24:	f1c0 0320 	rsb	r3, r0, #32
 800dc28:	fa02 f303 	lsl.w	r3, r2, r3
 800dc2c:	430b      	orrs	r3, r1
 800dc2e:	40c2      	lsrs	r2, r0
 800dc30:	6163      	str	r3, [r4, #20]
 800dc32:	9201      	str	r2, [sp, #4]
 800dc34:	9b01      	ldr	r3, [sp, #4]
 800dc36:	61a3      	str	r3, [r4, #24]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	bf14      	ite	ne
 800dc3c:	2202      	movne	r2, #2
 800dc3e:	2201      	moveq	r2, #1
 800dc40:	6122      	str	r2, [r4, #16]
 800dc42:	b1bd      	cbz	r5, 800dc74 <__d2b+0x94>
 800dc44:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800dc48:	4405      	add	r5, r0
 800dc4a:	603d      	str	r5, [r7, #0]
 800dc4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dc50:	6030      	str	r0, [r6, #0]
 800dc52:	4620      	mov	r0, r4
 800dc54:	b003      	add	sp, #12
 800dc56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dc5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800dc5e:	e7d6      	b.n	800dc0e <__d2b+0x2e>
 800dc60:	6161      	str	r1, [r4, #20]
 800dc62:	e7e7      	b.n	800dc34 <__d2b+0x54>
 800dc64:	a801      	add	r0, sp, #4
 800dc66:	f7ff fd61 	bl	800d72c <__lo0bits>
 800dc6a:	9b01      	ldr	r3, [sp, #4]
 800dc6c:	6163      	str	r3, [r4, #20]
 800dc6e:	3020      	adds	r0, #32
 800dc70:	2201      	movs	r2, #1
 800dc72:	e7e5      	b.n	800dc40 <__d2b+0x60>
 800dc74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dc78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800dc7c:	6038      	str	r0, [r7, #0]
 800dc7e:	6918      	ldr	r0, [r3, #16]
 800dc80:	f7ff fd34 	bl	800d6ec <__hi0bits>
 800dc84:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dc88:	e7e2      	b.n	800dc50 <__d2b+0x70>
 800dc8a:	bf00      	nop
 800dc8c:	0800e5c8 	.word	0x0800e5c8
 800dc90:	0800e5d9 	.word	0x0800e5d9

0800dc94 <__sflush_r>:
 800dc94:	898a      	ldrh	r2, [r1, #12]
 800dc96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc9a:	4605      	mov	r5, r0
 800dc9c:	0710      	lsls	r0, r2, #28
 800dc9e:	460c      	mov	r4, r1
 800dca0:	d458      	bmi.n	800dd54 <__sflush_r+0xc0>
 800dca2:	684b      	ldr	r3, [r1, #4]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	dc05      	bgt.n	800dcb4 <__sflush_r+0x20>
 800dca8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	dc02      	bgt.n	800dcb4 <__sflush_r+0x20>
 800dcae:	2000      	movs	r0, #0
 800dcb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dcb6:	2e00      	cmp	r6, #0
 800dcb8:	d0f9      	beq.n	800dcae <__sflush_r+0x1a>
 800dcba:	2300      	movs	r3, #0
 800dcbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dcc0:	682f      	ldr	r7, [r5, #0]
 800dcc2:	6a21      	ldr	r1, [r4, #32]
 800dcc4:	602b      	str	r3, [r5, #0]
 800dcc6:	d032      	beq.n	800dd2e <__sflush_r+0x9a>
 800dcc8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dcca:	89a3      	ldrh	r3, [r4, #12]
 800dccc:	075a      	lsls	r2, r3, #29
 800dcce:	d505      	bpl.n	800dcdc <__sflush_r+0x48>
 800dcd0:	6863      	ldr	r3, [r4, #4]
 800dcd2:	1ac0      	subs	r0, r0, r3
 800dcd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dcd6:	b10b      	cbz	r3, 800dcdc <__sflush_r+0x48>
 800dcd8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dcda:	1ac0      	subs	r0, r0, r3
 800dcdc:	2300      	movs	r3, #0
 800dcde:	4602      	mov	r2, r0
 800dce0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dce2:	6a21      	ldr	r1, [r4, #32]
 800dce4:	4628      	mov	r0, r5
 800dce6:	47b0      	blx	r6
 800dce8:	1c43      	adds	r3, r0, #1
 800dcea:	89a3      	ldrh	r3, [r4, #12]
 800dcec:	d106      	bne.n	800dcfc <__sflush_r+0x68>
 800dcee:	6829      	ldr	r1, [r5, #0]
 800dcf0:	291d      	cmp	r1, #29
 800dcf2:	d82b      	bhi.n	800dd4c <__sflush_r+0xb8>
 800dcf4:	4a29      	ldr	r2, [pc, #164]	; (800dd9c <__sflush_r+0x108>)
 800dcf6:	410a      	asrs	r2, r1
 800dcf8:	07d6      	lsls	r6, r2, #31
 800dcfa:	d427      	bmi.n	800dd4c <__sflush_r+0xb8>
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	6062      	str	r2, [r4, #4]
 800dd00:	04d9      	lsls	r1, r3, #19
 800dd02:	6922      	ldr	r2, [r4, #16]
 800dd04:	6022      	str	r2, [r4, #0]
 800dd06:	d504      	bpl.n	800dd12 <__sflush_r+0x7e>
 800dd08:	1c42      	adds	r2, r0, #1
 800dd0a:	d101      	bne.n	800dd10 <__sflush_r+0x7c>
 800dd0c:	682b      	ldr	r3, [r5, #0]
 800dd0e:	b903      	cbnz	r3, 800dd12 <__sflush_r+0x7e>
 800dd10:	6560      	str	r0, [r4, #84]	; 0x54
 800dd12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd14:	602f      	str	r7, [r5, #0]
 800dd16:	2900      	cmp	r1, #0
 800dd18:	d0c9      	beq.n	800dcae <__sflush_r+0x1a>
 800dd1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd1e:	4299      	cmp	r1, r3
 800dd20:	d002      	beq.n	800dd28 <__sflush_r+0x94>
 800dd22:	4628      	mov	r0, r5
 800dd24:	f7ff fb3a 	bl	800d39c <_free_r>
 800dd28:	2000      	movs	r0, #0
 800dd2a:	6360      	str	r0, [r4, #52]	; 0x34
 800dd2c:	e7c0      	b.n	800dcb0 <__sflush_r+0x1c>
 800dd2e:	2301      	movs	r3, #1
 800dd30:	4628      	mov	r0, r5
 800dd32:	47b0      	blx	r6
 800dd34:	1c41      	adds	r1, r0, #1
 800dd36:	d1c8      	bne.n	800dcca <__sflush_r+0x36>
 800dd38:	682b      	ldr	r3, [r5, #0]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d0c5      	beq.n	800dcca <__sflush_r+0x36>
 800dd3e:	2b1d      	cmp	r3, #29
 800dd40:	d001      	beq.n	800dd46 <__sflush_r+0xb2>
 800dd42:	2b16      	cmp	r3, #22
 800dd44:	d101      	bne.n	800dd4a <__sflush_r+0xb6>
 800dd46:	602f      	str	r7, [r5, #0]
 800dd48:	e7b1      	b.n	800dcae <__sflush_r+0x1a>
 800dd4a:	89a3      	ldrh	r3, [r4, #12]
 800dd4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd50:	81a3      	strh	r3, [r4, #12]
 800dd52:	e7ad      	b.n	800dcb0 <__sflush_r+0x1c>
 800dd54:	690f      	ldr	r7, [r1, #16]
 800dd56:	2f00      	cmp	r7, #0
 800dd58:	d0a9      	beq.n	800dcae <__sflush_r+0x1a>
 800dd5a:	0793      	lsls	r3, r2, #30
 800dd5c:	680e      	ldr	r6, [r1, #0]
 800dd5e:	bf08      	it	eq
 800dd60:	694b      	ldreq	r3, [r1, #20]
 800dd62:	600f      	str	r7, [r1, #0]
 800dd64:	bf18      	it	ne
 800dd66:	2300      	movne	r3, #0
 800dd68:	eba6 0807 	sub.w	r8, r6, r7
 800dd6c:	608b      	str	r3, [r1, #8]
 800dd6e:	f1b8 0f00 	cmp.w	r8, #0
 800dd72:	dd9c      	ble.n	800dcae <__sflush_r+0x1a>
 800dd74:	6a21      	ldr	r1, [r4, #32]
 800dd76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd78:	4643      	mov	r3, r8
 800dd7a:	463a      	mov	r2, r7
 800dd7c:	4628      	mov	r0, r5
 800dd7e:	47b0      	blx	r6
 800dd80:	2800      	cmp	r0, #0
 800dd82:	dc06      	bgt.n	800dd92 <__sflush_r+0xfe>
 800dd84:	89a3      	ldrh	r3, [r4, #12]
 800dd86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd8a:	81a3      	strh	r3, [r4, #12]
 800dd8c:	f04f 30ff 	mov.w	r0, #4294967295
 800dd90:	e78e      	b.n	800dcb0 <__sflush_r+0x1c>
 800dd92:	4407      	add	r7, r0
 800dd94:	eba8 0800 	sub.w	r8, r8, r0
 800dd98:	e7e9      	b.n	800dd6e <__sflush_r+0xda>
 800dd9a:	bf00      	nop
 800dd9c:	dfbffffe 	.word	0xdfbffffe

0800dda0 <_fflush_r>:
 800dda0:	b538      	push	{r3, r4, r5, lr}
 800dda2:	690b      	ldr	r3, [r1, #16]
 800dda4:	4605      	mov	r5, r0
 800dda6:	460c      	mov	r4, r1
 800dda8:	b913      	cbnz	r3, 800ddb0 <_fflush_r+0x10>
 800ddaa:	2500      	movs	r5, #0
 800ddac:	4628      	mov	r0, r5
 800ddae:	bd38      	pop	{r3, r4, r5, pc}
 800ddb0:	b118      	cbz	r0, 800ddba <_fflush_r+0x1a>
 800ddb2:	6a03      	ldr	r3, [r0, #32]
 800ddb4:	b90b      	cbnz	r3, 800ddba <_fflush_r+0x1a>
 800ddb6:	f7fe fb7f 	bl	800c4b8 <__sinit>
 800ddba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d0f3      	beq.n	800ddaa <_fflush_r+0xa>
 800ddc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ddc4:	07d0      	lsls	r0, r2, #31
 800ddc6:	d404      	bmi.n	800ddd2 <_fflush_r+0x32>
 800ddc8:	0599      	lsls	r1, r3, #22
 800ddca:	d402      	bmi.n	800ddd2 <_fflush_r+0x32>
 800ddcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddce:	f7fe fc69 	bl	800c6a4 <__retarget_lock_acquire_recursive>
 800ddd2:	4628      	mov	r0, r5
 800ddd4:	4621      	mov	r1, r4
 800ddd6:	f7ff ff5d 	bl	800dc94 <__sflush_r>
 800ddda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dddc:	07da      	lsls	r2, r3, #31
 800ddde:	4605      	mov	r5, r0
 800dde0:	d4e4      	bmi.n	800ddac <_fflush_r+0xc>
 800dde2:	89a3      	ldrh	r3, [r4, #12]
 800dde4:	059b      	lsls	r3, r3, #22
 800dde6:	d4e1      	bmi.n	800ddac <_fflush_r+0xc>
 800dde8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ddea:	f7fe fc5c 	bl	800c6a6 <__retarget_lock_release_recursive>
 800ddee:	e7dd      	b.n	800ddac <_fflush_r+0xc>

0800ddf0 <_sbrk_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4d06      	ldr	r5, [pc, #24]	; (800de0c <_sbrk_r+0x1c>)
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	4608      	mov	r0, r1
 800ddfa:	602b      	str	r3, [r5, #0]
 800ddfc:	f7f4 fbaa 	bl	8002554 <_sbrk>
 800de00:	1c43      	adds	r3, r0, #1
 800de02:	d102      	bne.n	800de0a <_sbrk_r+0x1a>
 800de04:	682b      	ldr	r3, [r5, #0]
 800de06:	b103      	cbz	r3, 800de0a <_sbrk_r+0x1a>
 800de08:	6023      	str	r3, [r4, #0]
 800de0a:	bd38      	pop	{r3, r4, r5, pc}
 800de0c:	20001114 	.word	0x20001114

0800de10 <memcpy>:
 800de10:	440a      	add	r2, r1
 800de12:	4291      	cmp	r1, r2
 800de14:	f100 33ff 	add.w	r3, r0, #4294967295
 800de18:	d100      	bne.n	800de1c <memcpy+0xc>
 800de1a:	4770      	bx	lr
 800de1c:	b510      	push	{r4, lr}
 800de1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de22:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de26:	4291      	cmp	r1, r2
 800de28:	d1f9      	bne.n	800de1e <memcpy+0xe>
 800de2a:	bd10      	pop	{r4, pc}

0800de2c <__assert_func>:
 800de2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800de2e:	4614      	mov	r4, r2
 800de30:	461a      	mov	r2, r3
 800de32:	4b09      	ldr	r3, [pc, #36]	; (800de58 <__assert_func+0x2c>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	4605      	mov	r5, r0
 800de38:	68d8      	ldr	r0, [r3, #12]
 800de3a:	b14c      	cbz	r4, 800de50 <__assert_func+0x24>
 800de3c:	4b07      	ldr	r3, [pc, #28]	; (800de5c <__assert_func+0x30>)
 800de3e:	9100      	str	r1, [sp, #0]
 800de40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800de44:	4906      	ldr	r1, [pc, #24]	; (800de60 <__assert_func+0x34>)
 800de46:	462b      	mov	r3, r5
 800de48:	f000 f844 	bl	800ded4 <fiprintf>
 800de4c:	f000 f854 	bl	800def8 <abort>
 800de50:	4b04      	ldr	r3, [pc, #16]	; (800de64 <__assert_func+0x38>)
 800de52:	461c      	mov	r4, r3
 800de54:	e7f3      	b.n	800de3e <__assert_func+0x12>
 800de56:	bf00      	nop
 800de58:	20000170 	.word	0x20000170
 800de5c:	0800e73e 	.word	0x0800e73e
 800de60:	0800e74b 	.word	0x0800e74b
 800de64:	0800e779 	.word	0x0800e779

0800de68 <_calloc_r>:
 800de68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de6a:	fba1 2402 	umull	r2, r4, r1, r2
 800de6e:	b94c      	cbnz	r4, 800de84 <_calloc_r+0x1c>
 800de70:	4611      	mov	r1, r2
 800de72:	9201      	str	r2, [sp, #4]
 800de74:	f7ff fb06 	bl	800d484 <_malloc_r>
 800de78:	9a01      	ldr	r2, [sp, #4]
 800de7a:	4605      	mov	r5, r0
 800de7c:	b930      	cbnz	r0, 800de8c <_calloc_r+0x24>
 800de7e:	4628      	mov	r0, r5
 800de80:	b003      	add	sp, #12
 800de82:	bd30      	pop	{r4, r5, pc}
 800de84:	220c      	movs	r2, #12
 800de86:	6002      	str	r2, [r0, #0]
 800de88:	2500      	movs	r5, #0
 800de8a:	e7f8      	b.n	800de7e <_calloc_r+0x16>
 800de8c:	4621      	mov	r1, r4
 800de8e:	f7fe fb8c 	bl	800c5aa <memset>
 800de92:	e7f4      	b.n	800de7e <_calloc_r+0x16>

0800de94 <__ascii_mbtowc>:
 800de94:	b082      	sub	sp, #8
 800de96:	b901      	cbnz	r1, 800de9a <__ascii_mbtowc+0x6>
 800de98:	a901      	add	r1, sp, #4
 800de9a:	b142      	cbz	r2, 800deae <__ascii_mbtowc+0x1a>
 800de9c:	b14b      	cbz	r3, 800deb2 <__ascii_mbtowc+0x1e>
 800de9e:	7813      	ldrb	r3, [r2, #0]
 800dea0:	600b      	str	r3, [r1, #0]
 800dea2:	7812      	ldrb	r2, [r2, #0]
 800dea4:	1e10      	subs	r0, r2, #0
 800dea6:	bf18      	it	ne
 800dea8:	2001      	movne	r0, #1
 800deaa:	b002      	add	sp, #8
 800deac:	4770      	bx	lr
 800deae:	4610      	mov	r0, r2
 800deb0:	e7fb      	b.n	800deaa <__ascii_mbtowc+0x16>
 800deb2:	f06f 0001 	mvn.w	r0, #1
 800deb6:	e7f8      	b.n	800deaa <__ascii_mbtowc+0x16>

0800deb8 <__ascii_wctomb>:
 800deb8:	b149      	cbz	r1, 800dece <__ascii_wctomb+0x16>
 800deba:	2aff      	cmp	r2, #255	; 0xff
 800debc:	bf85      	ittet	hi
 800debe:	238a      	movhi	r3, #138	; 0x8a
 800dec0:	6003      	strhi	r3, [r0, #0]
 800dec2:	700a      	strbls	r2, [r1, #0]
 800dec4:	f04f 30ff 	movhi.w	r0, #4294967295
 800dec8:	bf98      	it	ls
 800deca:	2001      	movls	r0, #1
 800decc:	4770      	bx	lr
 800dece:	4608      	mov	r0, r1
 800ded0:	4770      	bx	lr
	...

0800ded4 <fiprintf>:
 800ded4:	b40e      	push	{r1, r2, r3}
 800ded6:	b503      	push	{r0, r1, lr}
 800ded8:	4601      	mov	r1, r0
 800deda:	ab03      	add	r3, sp, #12
 800dedc:	4805      	ldr	r0, [pc, #20]	; (800def4 <fiprintf+0x20>)
 800dede:	f853 2b04 	ldr.w	r2, [r3], #4
 800dee2:	6800      	ldr	r0, [r0, #0]
 800dee4:	9301      	str	r3, [sp, #4]
 800dee6:	f000 f837 	bl	800df58 <_vfiprintf_r>
 800deea:	b002      	add	sp, #8
 800deec:	f85d eb04 	ldr.w	lr, [sp], #4
 800def0:	b003      	add	sp, #12
 800def2:	4770      	bx	lr
 800def4:	20000170 	.word	0x20000170

0800def8 <abort>:
 800def8:	b508      	push	{r3, lr}
 800defa:	2006      	movs	r0, #6
 800defc:	f000 fa04 	bl	800e308 <raise>
 800df00:	2001      	movs	r0, #1
 800df02:	f7f4 faaf 	bl	8002464 <_exit>

0800df06 <__sfputc_r>:
 800df06:	6893      	ldr	r3, [r2, #8]
 800df08:	3b01      	subs	r3, #1
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	b410      	push	{r4}
 800df0e:	6093      	str	r3, [r2, #8]
 800df10:	da08      	bge.n	800df24 <__sfputc_r+0x1e>
 800df12:	6994      	ldr	r4, [r2, #24]
 800df14:	42a3      	cmp	r3, r4
 800df16:	db01      	blt.n	800df1c <__sfputc_r+0x16>
 800df18:	290a      	cmp	r1, #10
 800df1a:	d103      	bne.n	800df24 <__sfputc_r+0x1e>
 800df1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df20:	f000 b934 	b.w	800e18c <__swbuf_r>
 800df24:	6813      	ldr	r3, [r2, #0]
 800df26:	1c58      	adds	r0, r3, #1
 800df28:	6010      	str	r0, [r2, #0]
 800df2a:	7019      	strb	r1, [r3, #0]
 800df2c:	4608      	mov	r0, r1
 800df2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df32:	4770      	bx	lr

0800df34 <__sfputs_r>:
 800df34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df36:	4606      	mov	r6, r0
 800df38:	460f      	mov	r7, r1
 800df3a:	4614      	mov	r4, r2
 800df3c:	18d5      	adds	r5, r2, r3
 800df3e:	42ac      	cmp	r4, r5
 800df40:	d101      	bne.n	800df46 <__sfputs_r+0x12>
 800df42:	2000      	movs	r0, #0
 800df44:	e007      	b.n	800df56 <__sfputs_r+0x22>
 800df46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df4a:	463a      	mov	r2, r7
 800df4c:	4630      	mov	r0, r6
 800df4e:	f7ff ffda 	bl	800df06 <__sfputc_r>
 800df52:	1c43      	adds	r3, r0, #1
 800df54:	d1f3      	bne.n	800df3e <__sfputs_r+0xa>
 800df56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df58 <_vfiprintf_r>:
 800df58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df5c:	460d      	mov	r5, r1
 800df5e:	b09d      	sub	sp, #116	; 0x74
 800df60:	4614      	mov	r4, r2
 800df62:	4698      	mov	r8, r3
 800df64:	4606      	mov	r6, r0
 800df66:	b118      	cbz	r0, 800df70 <_vfiprintf_r+0x18>
 800df68:	6a03      	ldr	r3, [r0, #32]
 800df6a:	b90b      	cbnz	r3, 800df70 <_vfiprintf_r+0x18>
 800df6c:	f7fe faa4 	bl	800c4b8 <__sinit>
 800df70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df72:	07d9      	lsls	r1, r3, #31
 800df74:	d405      	bmi.n	800df82 <_vfiprintf_r+0x2a>
 800df76:	89ab      	ldrh	r3, [r5, #12]
 800df78:	059a      	lsls	r2, r3, #22
 800df7a:	d402      	bmi.n	800df82 <_vfiprintf_r+0x2a>
 800df7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df7e:	f7fe fb91 	bl	800c6a4 <__retarget_lock_acquire_recursive>
 800df82:	89ab      	ldrh	r3, [r5, #12]
 800df84:	071b      	lsls	r3, r3, #28
 800df86:	d501      	bpl.n	800df8c <_vfiprintf_r+0x34>
 800df88:	692b      	ldr	r3, [r5, #16]
 800df8a:	b99b      	cbnz	r3, 800dfb4 <_vfiprintf_r+0x5c>
 800df8c:	4629      	mov	r1, r5
 800df8e:	4630      	mov	r0, r6
 800df90:	f000 f93a 	bl	800e208 <__swsetup_r>
 800df94:	b170      	cbz	r0, 800dfb4 <_vfiprintf_r+0x5c>
 800df96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df98:	07dc      	lsls	r4, r3, #31
 800df9a:	d504      	bpl.n	800dfa6 <_vfiprintf_r+0x4e>
 800df9c:	f04f 30ff 	mov.w	r0, #4294967295
 800dfa0:	b01d      	add	sp, #116	; 0x74
 800dfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfa6:	89ab      	ldrh	r3, [r5, #12]
 800dfa8:	0598      	lsls	r0, r3, #22
 800dfaa:	d4f7      	bmi.n	800df9c <_vfiprintf_r+0x44>
 800dfac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dfae:	f7fe fb7a 	bl	800c6a6 <__retarget_lock_release_recursive>
 800dfb2:	e7f3      	b.n	800df9c <_vfiprintf_r+0x44>
 800dfb4:	2300      	movs	r3, #0
 800dfb6:	9309      	str	r3, [sp, #36]	; 0x24
 800dfb8:	2320      	movs	r3, #32
 800dfba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dfbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfc2:	2330      	movs	r3, #48	; 0x30
 800dfc4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e178 <_vfiprintf_r+0x220>
 800dfc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dfcc:	f04f 0901 	mov.w	r9, #1
 800dfd0:	4623      	mov	r3, r4
 800dfd2:	469a      	mov	sl, r3
 800dfd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfd8:	b10a      	cbz	r2, 800dfde <_vfiprintf_r+0x86>
 800dfda:	2a25      	cmp	r2, #37	; 0x25
 800dfdc:	d1f9      	bne.n	800dfd2 <_vfiprintf_r+0x7a>
 800dfde:	ebba 0b04 	subs.w	fp, sl, r4
 800dfe2:	d00b      	beq.n	800dffc <_vfiprintf_r+0xa4>
 800dfe4:	465b      	mov	r3, fp
 800dfe6:	4622      	mov	r2, r4
 800dfe8:	4629      	mov	r1, r5
 800dfea:	4630      	mov	r0, r6
 800dfec:	f7ff ffa2 	bl	800df34 <__sfputs_r>
 800dff0:	3001      	adds	r0, #1
 800dff2:	f000 80a9 	beq.w	800e148 <_vfiprintf_r+0x1f0>
 800dff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dff8:	445a      	add	r2, fp
 800dffa:	9209      	str	r2, [sp, #36]	; 0x24
 800dffc:	f89a 3000 	ldrb.w	r3, [sl]
 800e000:	2b00      	cmp	r3, #0
 800e002:	f000 80a1 	beq.w	800e148 <_vfiprintf_r+0x1f0>
 800e006:	2300      	movs	r3, #0
 800e008:	f04f 32ff 	mov.w	r2, #4294967295
 800e00c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e010:	f10a 0a01 	add.w	sl, sl, #1
 800e014:	9304      	str	r3, [sp, #16]
 800e016:	9307      	str	r3, [sp, #28]
 800e018:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e01c:	931a      	str	r3, [sp, #104]	; 0x68
 800e01e:	4654      	mov	r4, sl
 800e020:	2205      	movs	r2, #5
 800e022:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e026:	4854      	ldr	r0, [pc, #336]	; (800e178 <_vfiprintf_r+0x220>)
 800e028:	f7f2 f8d2 	bl	80001d0 <memchr>
 800e02c:	9a04      	ldr	r2, [sp, #16]
 800e02e:	b9d8      	cbnz	r0, 800e068 <_vfiprintf_r+0x110>
 800e030:	06d1      	lsls	r1, r2, #27
 800e032:	bf44      	itt	mi
 800e034:	2320      	movmi	r3, #32
 800e036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e03a:	0713      	lsls	r3, r2, #28
 800e03c:	bf44      	itt	mi
 800e03e:	232b      	movmi	r3, #43	; 0x2b
 800e040:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e044:	f89a 3000 	ldrb.w	r3, [sl]
 800e048:	2b2a      	cmp	r3, #42	; 0x2a
 800e04a:	d015      	beq.n	800e078 <_vfiprintf_r+0x120>
 800e04c:	9a07      	ldr	r2, [sp, #28]
 800e04e:	4654      	mov	r4, sl
 800e050:	2000      	movs	r0, #0
 800e052:	f04f 0c0a 	mov.w	ip, #10
 800e056:	4621      	mov	r1, r4
 800e058:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e05c:	3b30      	subs	r3, #48	; 0x30
 800e05e:	2b09      	cmp	r3, #9
 800e060:	d94d      	bls.n	800e0fe <_vfiprintf_r+0x1a6>
 800e062:	b1b0      	cbz	r0, 800e092 <_vfiprintf_r+0x13a>
 800e064:	9207      	str	r2, [sp, #28]
 800e066:	e014      	b.n	800e092 <_vfiprintf_r+0x13a>
 800e068:	eba0 0308 	sub.w	r3, r0, r8
 800e06c:	fa09 f303 	lsl.w	r3, r9, r3
 800e070:	4313      	orrs	r3, r2
 800e072:	9304      	str	r3, [sp, #16]
 800e074:	46a2      	mov	sl, r4
 800e076:	e7d2      	b.n	800e01e <_vfiprintf_r+0xc6>
 800e078:	9b03      	ldr	r3, [sp, #12]
 800e07a:	1d19      	adds	r1, r3, #4
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	9103      	str	r1, [sp, #12]
 800e080:	2b00      	cmp	r3, #0
 800e082:	bfbb      	ittet	lt
 800e084:	425b      	neglt	r3, r3
 800e086:	f042 0202 	orrlt.w	r2, r2, #2
 800e08a:	9307      	strge	r3, [sp, #28]
 800e08c:	9307      	strlt	r3, [sp, #28]
 800e08e:	bfb8      	it	lt
 800e090:	9204      	strlt	r2, [sp, #16]
 800e092:	7823      	ldrb	r3, [r4, #0]
 800e094:	2b2e      	cmp	r3, #46	; 0x2e
 800e096:	d10c      	bne.n	800e0b2 <_vfiprintf_r+0x15a>
 800e098:	7863      	ldrb	r3, [r4, #1]
 800e09a:	2b2a      	cmp	r3, #42	; 0x2a
 800e09c:	d134      	bne.n	800e108 <_vfiprintf_r+0x1b0>
 800e09e:	9b03      	ldr	r3, [sp, #12]
 800e0a0:	1d1a      	adds	r2, r3, #4
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	9203      	str	r2, [sp, #12]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	bfb8      	it	lt
 800e0aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0ae:	3402      	adds	r4, #2
 800e0b0:	9305      	str	r3, [sp, #20]
 800e0b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e188 <_vfiprintf_r+0x230>
 800e0b6:	7821      	ldrb	r1, [r4, #0]
 800e0b8:	2203      	movs	r2, #3
 800e0ba:	4650      	mov	r0, sl
 800e0bc:	f7f2 f888 	bl	80001d0 <memchr>
 800e0c0:	b138      	cbz	r0, 800e0d2 <_vfiprintf_r+0x17a>
 800e0c2:	9b04      	ldr	r3, [sp, #16]
 800e0c4:	eba0 000a 	sub.w	r0, r0, sl
 800e0c8:	2240      	movs	r2, #64	; 0x40
 800e0ca:	4082      	lsls	r2, r0
 800e0cc:	4313      	orrs	r3, r2
 800e0ce:	3401      	adds	r4, #1
 800e0d0:	9304      	str	r3, [sp, #16]
 800e0d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0d6:	4829      	ldr	r0, [pc, #164]	; (800e17c <_vfiprintf_r+0x224>)
 800e0d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0dc:	2206      	movs	r2, #6
 800e0de:	f7f2 f877 	bl	80001d0 <memchr>
 800e0e2:	2800      	cmp	r0, #0
 800e0e4:	d03f      	beq.n	800e166 <_vfiprintf_r+0x20e>
 800e0e6:	4b26      	ldr	r3, [pc, #152]	; (800e180 <_vfiprintf_r+0x228>)
 800e0e8:	bb1b      	cbnz	r3, 800e132 <_vfiprintf_r+0x1da>
 800e0ea:	9b03      	ldr	r3, [sp, #12]
 800e0ec:	3307      	adds	r3, #7
 800e0ee:	f023 0307 	bic.w	r3, r3, #7
 800e0f2:	3308      	adds	r3, #8
 800e0f4:	9303      	str	r3, [sp, #12]
 800e0f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0f8:	443b      	add	r3, r7
 800e0fa:	9309      	str	r3, [sp, #36]	; 0x24
 800e0fc:	e768      	b.n	800dfd0 <_vfiprintf_r+0x78>
 800e0fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800e102:	460c      	mov	r4, r1
 800e104:	2001      	movs	r0, #1
 800e106:	e7a6      	b.n	800e056 <_vfiprintf_r+0xfe>
 800e108:	2300      	movs	r3, #0
 800e10a:	3401      	adds	r4, #1
 800e10c:	9305      	str	r3, [sp, #20]
 800e10e:	4619      	mov	r1, r3
 800e110:	f04f 0c0a 	mov.w	ip, #10
 800e114:	4620      	mov	r0, r4
 800e116:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e11a:	3a30      	subs	r2, #48	; 0x30
 800e11c:	2a09      	cmp	r2, #9
 800e11e:	d903      	bls.n	800e128 <_vfiprintf_r+0x1d0>
 800e120:	2b00      	cmp	r3, #0
 800e122:	d0c6      	beq.n	800e0b2 <_vfiprintf_r+0x15a>
 800e124:	9105      	str	r1, [sp, #20]
 800e126:	e7c4      	b.n	800e0b2 <_vfiprintf_r+0x15a>
 800e128:	fb0c 2101 	mla	r1, ip, r1, r2
 800e12c:	4604      	mov	r4, r0
 800e12e:	2301      	movs	r3, #1
 800e130:	e7f0      	b.n	800e114 <_vfiprintf_r+0x1bc>
 800e132:	ab03      	add	r3, sp, #12
 800e134:	9300      	str	r3, [sp, #0]
 800e136:	462a      	mov	r2, r5
 800e138:	4b12      	ldr	r3, [pc, #72]	; (800e184 <_vfiprintf_r+0x22c>)
 800e13a:	a904      	add	r1, sp, #16
 800e13c:	4630      	mov	r0, r6
 800e13e:	f7fd fd7b 	bl	800bc38 <_printf_float>
 800e142:	4607      	mov	r7, r0
 800e144:	1c78      	adds	r0, r7, #1
 800e146:	d1d6      	bne.n	800e0f6 <_vfiprintf_r+0x19e>
 800e148:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e14a:	07d9      	lsls	r1, r3, #31
 800e14c:	d405      	bmi.n	800e15a <_vfiprintf_r+0x202>
 800e14e:	89ab      	ldrh	r3, [r5, #12]
 800e150:	059a      	lsls	r2, r3, #22
 800e152:	d402      	bmi.n	800e15a <_vfiprintf_r+0x202>
 800e154:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e156:	f7fe faa6 	bl	800c6a6 <__retarget_lock_release_recursive>
 800e15a:	89ab      	ldrh	r3, [r5, #12]
 800e15c:	065b      	lsls	r3, r3, #25
 800e15e:	f53f af1d 	bmi.w	800df9c <_vfiprintf_r+0x44>
 800e162:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e164:	e71c      	b.n	800dfa0 <_vfiprintf_r+0x48>
 800e166:	ab03      	add	r3, sp, #12
 800e168:	9300      	str	r3, [sp, #0]
 800e16a:	462a      	mov	r2, r5
 800e16c:	4b05      	ldr	r3, [pc, #20]	; (800e184 <_vfiprintf_r+0x22c>)
 800e16e:	a904      	add	r1, sp, #16
 800e170:	4630      	mov	r0, r6
 800e172:	f7fe f805 	bl	800c180 <_printf_i>
 800e176:	e7e4      	b.n	800e142 <_vfiprintf_r+0x1ea>
 800e178:	0800e87b 	.word	0x0800e87b
 800e17c:	0800e885 	.word	0x0800e885
 800e180:	0800bc39 	.word	0x0800bc39
 800e184:	0800df35 	.word	0x0800df35
 800e188:	0800e881 	.word	0x0800e881

0800e18c <__swbuf_r>:
 800e18c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e18e:	460e      	mov	r6, r1
 800e190:	4614      	mov	r4, r2
 800e192:	4605      	mov	r5, r0
 800e194:	b118      	cbz	r0, 800e19e <__swbuf_r+0x12>
 800e196:	6a03      	ldr	r3, [r0, #32]
 800e198:	b90b      	cbnz	r3, 800e19e <__swbuf_r+0x12>
 800e19a:	f7fe f98d 	bl	800c4b8 <__sinit>
 800e19e:	69a3      	ldr	r3, [r4, #24]
 800e1a0:	60a3      	str	r3, [r4, #8]
 800e1a2:	89a3      	ldrh	r3, [r4, #12]
 800e1a4:	071a      	lsls	r2, r3, #28
 800e1a6:	d525      	bpl.n	800e1f4 <__swbuf_r+0x68>
 800e1a8:	6923      	ldr	r3, [r4, #16]
 800e1aa:	b31b      	cbz	r3, 800e1f4 <__swbuf_r+0x68>
 800e1ac:	6823      	ldr	r3, [r4, #0]
 800e1ae:	6922      	ldr	r2, [r4, #16]
 800e1b0:	1a98      	subs	r0, r3, r2
 800e1b2:	6963      	ldr	r3, [r4, #20]
 800e1b4:	b2f6      	uxtb	r6, r6
 800e1b6:	4283      	cmp	r3, r0
 800e1b8:	4637      	mov	r7, r6
 800e1ba:	dc04      	bgt.n	800e1c6 <__swbuf_r+0x3a>
 800e1bc:	4621      	mov	r1, r4
 800e1be:	4628      	mov	r0, r5
 800e1c0:	f7ff fdee 	bl	800dda0 <_fflush_r>
 800e1c4:	b9e0      	cbnz	r0, 800e200 <__swbuf_r+0x74>
 800e1c6:	68a3      	ldr	r3, [r4, #8]
 800e1c8:	3b01      	subs	r3, #1
 800e1ca:	60a3      	str	r3, [r4, #8]
 800e1cc:	6823      	ldr	r3, [r4, #0]
 800e1ce:	1c5a      	adds	r2, r3, #1
 800e1d0:	6022      	str	r2, [r4, #0]
 800e1d2:	701e      	strb	r6, [r3, #0]
 800e1d4:	6962      	ldr	r2, [r4, #20]
 800e1d6:	1c43      	adds	r3, r0, #1
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d004      	beq.n	800e1e6 <__swbuf_r+0x5a>
 800e1dc:	89a3      	ldrh	r3, [r4, #12]
 800e1de:	07db      	lsls	r3, r3, #31
 800e1e0:	d506      	bpl.n	800e1f0 <__swbuf_r+0x64>
 800e1e2:	2e0a      	cmp	r6, #10
 800e1e4:	d104      	bne.n	800e1f0 <__swbuf_r+0x64>
 800e1e6:	4621      	mov	r1, r4
 800e1e8:	4628      	mov	r0, r5
 800e1ea:	f7ff fdd9 	bl	800dda0 <_fflush_r>
 800e1ee:	b938      	cbnz	r0, 800e200 <__swbuf_r+0x74>
 800e1f0:	4638      	mov	r0, r7
 800e1f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1f4:	4621      	mov	r1, r4
 800e1f6:	4628      	mov	r0, r5
 800e1f8:	f000 f806 	bl	800e208 <__swsetup_r>
 800e1fc:	2800      	cmp	r0, #0
 800e1fe:	d0d5      	beq.n	800e1ac <__swbuf_r+0x20>
 800e200:	f04f 37ff 	mov.w	r7, #4294967295
 800e204:	e7f4      	b.n	800e1f0 <__swbuf_r+0x64>
	...

0800e208 <__swsetup_r>:
 800e208:	b538      	push	{r3, r4, r5, lr}
 800e20a:	4b2a      	ldr	r3, [pc, #168]	; (800e2b4 <__swsetup_r+0xac>)
 800e20c:	4605      	mov	r5, r0
 800e20e:	6818      	ldr	r0, [r3, #0]
 800e210:	460c      	mov	r4, r1
 800e212:	b118      	cbz	r0, 800e21c <__swsetup_r+0x14>
 800e214:	6a03      	ldr	r3, [r0, #32]
 800e216:	b90b      	cbnz	r3, 800e21c <__swsetup_r+0x14>
 800e218:	f7fe f94e 	bl	800c4b8 <__sinit>
 800e21c:	89a3      	ldrh	r3, [r4, #12]
 800e21e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e222:	0718      	lsls	r0, r3, #28
 800e224:	d422      	bmi.n	800e26c <__swsetup_r+0x64>
 800e226:	06d9      	lsls	r1, r3, #27
 800e228:	d407      	bmi.n	800e23a <__swsetup_r+0x32>
 800e22a:	2309      	movs	r3, #9
 800e22c:	602b      	str	r3, [r5, #0]
 800e22e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e232:	81a3      	strh	r3, [r4, #12]
 800e234:	f04f 30ff 	mov.w	r0, #4294967295
 800e238:	e034      	b.n	800e2a4 <__swsetup_r+0x9c>
 800e23a:	0758      	lsls	r0, r3, #29
 800e23c:	d512      	bpl.n	800e264 <__swsetup_r+0x5c>
 800e23e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e240:	b141      	cbz	r1, 800e254 <__swsetup_r+0x4c>
 800e242:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e246:	4299      	cmp	r1, r3
 800e248:	d002      	beq.n	800e250 <__swsetup_r+0x48>
 800e24a:	4628      	mov	r0, r5
 800e24c:	f7ff f8a6 	bl	800d39c <_free_r>
 800e250:	2300      	movs	r3, #0
 800e252:	6363      	str	r3, [r4, #52]	; 0x34
 800e254:	89a3      	ldrh	r3, [r4, #12]
 800e256:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e25a:	81a3      	strh	r3, [r4, #12]
 800e25c:	2300      	movs	r3, #0
 800e25e:	6063      	str	r3, [r4, #4]
 800e260:	6923      	ldr	r3, [r4, #16]
 800e262:	6023      	str	r3, [r4, #0]
 800e264:	89a3      	ldrh	r3, [r4, #12]
 800e266:	f043 0308 	orr.w	r3, r3, #8
 800e26a:	81a3      	strh	r3, [r4, #12]
 800e26c:	6923      	ldr	r3, [r4, #16]
 800e26e:	b94b      	cbnz	r3, 800e284 <__swsetup_r+0x7c>
 800e270:	89a3      	ldrh	r3, [r4, #12]
 800e272:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e276:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e27a:	d003      	beq.n	800e284 <__swsetup_r+0x7c>
 800e27c:	4621      	mov	r1, r4
 800e27e:	4628      	mov	r0, r5
 800e280:	f000 f884 	bl	800e38c <__smakebuf_r>
 800e284:	89a0      	ldrh	r0, [r4, #12]
 800e286:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e28a:	f010 0301 	ands.w	r3, r0, #1
 800e28e:	d00a      	beq.n	800e2a6 <__swsetup_r+0x9e>
 800e290:	2300      	movs	r3, #0
 800e292:	60a3      	str	r3, [r4, #8]
 800e294:	6963      	ldr	r3, [r4, #20]
 800e296:	425b      	negs	r3, r3
 800e298:	61a3      	str	r3, [r4, #24]
 800e29a:	6923      	ldr	r3, [r4, #16]
 800e29c:	b943      	cbnz	r3, 800e2b0 <__swsetup_r+0xa8>
 800e29e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e2a2:	d1c4      	bne.n	800e22e <__swsetup_r+0x26>
 800e2a4:	bd38      	pop	{r3, r4, r5, pc}
 800e2a6:	0781      	lsls	r1, r0, #30
 800e2a8:	bf58      	it	pl
 800e2aa:	6963      	ldrpl	r3, [r4, #20]
 800e2ac:	60a3      	str	r3, [r4, #8]
 800e2ae:	e7f4      	b.n	800e29a <__swsetup_r+0x92>
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	e7f7      	b.n	800e2a4 <__swsetup_r+0x9c>
 800e2b4:	20000170 	.word	0x20000170

0800e2b8 <_raise_r>:
 800e2b8:	291f      	cmp	r1, #31
 800e2ba:	b538      	push	{r3, r4, r5, lr}
 800e2bc:	4604      	mov	r4, r0
 800e2be:	460d      	mov	r5, r1
 800e2c0:	d904      	bls.n	800e2cc <_raise_r+0x14>
 800e2c2:	2316      	movs	r3, #22
 800e2c4:	6003      	str	r3, [r0, #0]
 800e2c6:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ca:	bd38      	pop	{r3, r4, r5, pc}
 800e2cc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e2ce:	b112      	cbz	r2, 800e2d6 <_raise_r+0x1e>
 800e2d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2d4:	b94b      	cbnz	r3, 800e2ea <_raise_r+0x32>
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	f000 f830 	bl	800e33c <_getpid_r>
 800e2dc:	462a      	mov	r2, r5
 800e2de:	4601      	mov	r1, r0
 800e2e0:	4620      	mov	r0, r4
 800e2e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2e6:	f000 b817 	b.w	800e318 <_kill_r>
 800e2ea:	2b01      	cmp	r3, #1
 800e2ec:	d00a      	beq.n	800e304 <_raise_r+0x4c>
 800e2ee:	1c59      	adds	r1, r3, #1
 800e2f0:	d103      	bne.n	800e2fa <_raise_r+0x42>
 800e2f2:	2316      	movs	r3, #22
 800e2f4:	6003      	str	r3, [r0, #0]
 800e2f6:	2001      	movs	r0, #1
 800e2f8:	e7e7      	b.n	800e2ca <_raise_r+0x12>
 800e2fa:	2400      	movs	r4, #0
 800e2fc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e300:	4628      	mov	r0, r5
 800e302:	4798      	blx	r3
 800e304:	2000      	movs	r0, #0
 800e306:	e7e0      	b.n	800e2ca <_raise_r+0x12>

0800e308 <raise>:
 800e308:	4b02      	ldr	r3, [pc, #8]	; (800e314 <raise+0xc>)
 800e30a:	4601      	mov	r1, r0
 800e30c:	6818      	ldr	r0, [r3, #0]
 800e30e:	f7ff bfd3 	b.w	800e2b8 <_raise_r>
 800e312:	bf00      	nop
 800e314:	20000170 	.word	0x20000170

0800e318 <_kill_r>:
 800e318:	b538      	push	{r3, r4, r5, lr}
 800e31a:	4d07      	ldr	r5, [pc, #28]	; (800e338 <_kill_r+0x20>)
 800e31c:	2300      	movs	r3, #0
 800e31e:	4604      	mov	r4, r0
 800e320:	4608      	mov	r0, r1
 800e322:	4611      	mov	r1, r2
 800e324:	602b      	str	r3, [r5, #0]
 800e326:	f7f4 f88d 	bl	8002444 <_kill>
 800e32a:	1c43      	adds	r3, r0, #1
 800e32c:	d102      	bne.n	800e334 <_kill_r+0x1c>
 800e32e:	682b      	ldr	r3, [r5, #0]
 800e330:	b103      	cbz	r3, 800e334 <_kill_r+0x1c>
 800e332:	6023      	str	r3, [r4, #0]
 800e334:	bd38      	pop	{r3, r4, r5, pc}
 800e336:	bf00      	nop
 800e338:	20001114 	.word	0x20001114

0800e33c <_getpid_r>:
 800e33c:	f7f4 b87a 	b.w	8002434 <_getpid>

0800e340 <__swhatbuf_r>:
 800e340:	b570      	push	{r4, r5, r6, lr}
 800e342:	460c      	mov	r4, r1
 800e344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e348:	2900      	cmp	r1, #0
 800e34a:	b096      	sub	sp, #88	; 0x58
 800e34c:	4615      	mov	r5, r2
 800e34e:	461e      	mov	r6, r3
 800e350:	da0d      	bge.n	800e36e <__swhatbuf_r+0x2e>
 800e352:	89a3      	ldrh	r3, [r4, #12]
 800e354:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e358:	f04f 0100 	mov.w	r1, #0
 800e35c:	bf0c      	ite	eq
 800e35e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e362:	2340      	movne	r3, #64	; 0x40
 800e364:	2000      	movs	r0, #0
 800e366:	6031      	str	r1, [r6, #0]
 800e368:	602b      	str	r3, [r5, #0]
 800e36a:	b016      	add	sp, #88	; 0x58
 800e36c:	bd70      	pop	{r4, r5, r6, pc}
 800e36e:	466a      	mov	r2, sp
 800e370:	f000 f848 	bl	800e404 <_fstat_r>
 800e374:	2800      	cmp	r0, #0
 800e376:	dbec      	blt.n	800e352 <__swhatbuf_r+0x12>
 800e378:	9901      	ldr	r1, [sp, #4]
 800e37a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e37e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e382:	4259      	negs	r1, r3
 800e384:	4159      	adcs	r1, r3
 800e386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e38a:	e7eb      	b.n	800e364 <__swhatbuf_r+0x24>

0800e38c <__smakebuf_r>:
 800e38c:	898b      	ldrh	r3, [r1, #12]
 800e38e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e390:	079d      	lsls	r5, r3, #30
 800e392:	4606      	mov	r6, r0
 800e394:	460c      	mov	r4, r1
 800e396:	d507      	bpl.n	800e3a8 <__smakebuf_r+0x1c>
 800e398:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e39c:	6023      	str	r3, [r4, #0]
 800e39e:	6123      	str	r3, [r4, #16]
 800e3a0:	2301      	movs	r3, #1
 800e3a2:	6163      	str	r3, [r4, #20]
 800e3a4:	b002      	add	sp, #8
 800e3a6:	bd70      	pop	{r4, r5, r6, pc}
 800e3a8:	ab01      	add	r3, sp, #4
 800e3aa:	466a      	mov	r2, sp
 800e3ac:	f7ff ffc8 	bl	800e340 <__swhatbuf_r>
 800e3b0:	9900      	ldr	r1, [sp, #0]
 800e3b2:	4605      	mov	r5, r0
 800e3b4:	4630      	mov	r0, r6
 800e3b6:	f7ff f865 	bl	800d484 <_malloc_r>
 800e3ba:	b948      	cbnz	r0, 800e3d0 <__smakebuf_r+0x44>
 800e3bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3c0:	059a      	lsls	r2, r3, #22
 800e3c2:	d4ef      	bmi.n	800e3a4 <__smakebuf_r+0x18>
 800e3c4:	f023 0303 	bic.w	r3, r3, #3
 800e3c8:	f043 0302 	orr.w	r3, r3, #2
 800e3cc:	81a3      	strh	r3, [r4, #12]
 800e3ce:	e7e3      	b.n	800e398 <__smakebuf_r+0xc>
 800e3d0:	89a3      	ldrh	r3, [r4, #12]
 800e3d2:	6020      	str	r0, [r4, #0]
 800e3d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3d8:	81a3      	strh	r3, [r4, #12]
 800e3da:	9b00      	ldr	r3, [sp, #0]
 800e3dc:	6163      	str	r3, [r4, #20]
 800e3de:	9b01      	ldr	r3, [sp, #4]
 800e3e0:	6120      	str	r0, [r4, #16]
 800e3e2:	b15b      	cbz	r3, 800e3fc <__smakebuf_r+0x70>
 800e3e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3e8:	4630      	mov	r0, r6
 800e3ea:	f000 f81d 	bl	800e428 <_isatty_r>
 800e3ee:	b128      	cbz	r0, 800e3fc <__smakebuf_r+0x70>
 800e3f0:	89a3      	ldrh	r3, [r4, #12]
 800e3f2:	f023 0303 	bic.w	r3, r3, #3
 800e3f6:	f043 0301 	orr.w	r3, r3, #1
 800e3fa:	81a3      	strh	r3, [r4, #12]
 800e3fc:	89a3      	ldrh	r3, [r4, #12]
 800e3fe:	431d      	orrs	r5, r3
 800e400:	81a5      	strh	r5, [r4, #12]
 800e402:	e7cf      	b.n	800e3a4 <__smakebuf_r+0x18>

0800e404 <_fstat_r>:
 800e404:	b538      	push	{r3, r4, r5, lr}
 800e406:	4d07      	ldr	r5, [pc, #28]	; (800e424 <_fstat_r+0x20>)
 800e408:	2300      	movs	r3, #0
 800e40a:	4604      	mov	r4, r0
 800e40c:	4608      	mov	r0, r1
 800e40e:	4611      	mov	r1, r2
 800e410:	602b      	str	r3, [r5, #0]
 800e412:	f7f4 f876 	bl	8002502 <_fstat>
 800e416:	1c43      	adds	r3, r0, #1
 800e418:	d102      	bne.n	800e420 <_fstat_r+0x1c>
 800e41a:	682b      	ldr	r3, [r5, #0]
 800e41c:	b103      	cbz	r3, 800e420 <_fstat_r+0x1c>
 800e41e:	6023      	str	r3, [r4, #0]
 800e420:	bd38      	pop	{r3, r4, r5, pc}
 800e422:	bf00      	nop
 800e424:	20001114 	.word	0x20001114

0800e428 <_isatty_r>:
 800e428:	b538      	push	{r3, r4, r5, lr}
 800e42a:	4d06      	ldr	r5, [pc, #24]	; (800e444 <_isatty_r+0x1c>)
 800e42c:	2300      	movs	r3, #0
 800e42e:	4604      	mov	r4, r0
 800e430:	4608      	mov	r0, r1
 800e432:	602b      	str	r3, [r5, #0]
 800e434:	f7f4 f875 	bl	8002522 <_isatty>
 800e438:	1c43      	adds	r3, r0, #1
 800e43a:	d102      	bne.n	800e442 <_isatty_r+0x1a>
 800e43c:	682b      	ldr	r3, [r5, #0]
 800e43e:	b103      	cbz	r3, 800e442 <_isatty_r+0x1a>
 800e440:	6023      	str	r3, [r4, #0]
 800e442:	bd38      	pop	{r3, r4, r5, pc}
 800e444:	20001114 	.word	0x20001114

0800e448 <_init>:
 800e448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e44a:	bf00      	nop
 800e44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e44e:	bc08      	pop	{r3}
 800e450:	469e      	mov	lr, r3
 800e452:	4770      	bx	lr

0800e454 <_fini>:
 800e454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e456:	bf00      	nop
 800e458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e45a:	bc08      	pop	{r3}
 800e45c:	469e      	mov	lr, r3
 800e45e:	4770      	bx	lr
