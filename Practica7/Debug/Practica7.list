
Practica7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007478  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08007608  08007608  00017608  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076fc  080076fc  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080076fc  080076fc  000176fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007704  08007704  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007704  08007704  00017704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007708  08007708  00017708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800770c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020ac  20000010  0800771c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020bc  0800771c  000220bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020fd7  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000042f6  00000000  00000000  0004105a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d68  00000000  00000000  00045350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016cd  00000000  00000000  000470b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004401  00000000  00000000  00048785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021290  00000000  00000000  0004cb86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd47f  00000000  00000000  0006de16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007e1c  00000000  00000000  0016b298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001730b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080075f0 	.word	0x080075f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	080075f0 	.word	0x080075f0

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b970 	b.w	80004c8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	460f      	mov	r7, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4694      	mov	ip, r2
 8000214:	d965      	bls.n	80002e2 <__udivmoddi4+0xe2>
 8000216:	fab2 f382 	clz	r3, r2
 800021a:	b143      	cbz	r3, 800022e <__udivmoddi4+0x2e>
 800021c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000220:	f1c3 0220 	rsb	r2, r3, #32
 8000224:	409f      	lsls	r7, r3
 8000226:	fa20 f202 	lsr.w	r2, r0, r2
 800022a:	4317      	orrs	r7, r2
 800022c:	409c      	lsls	r4, r3
 800022e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000232:	fa1f f58c 	uxth.w	r5, ip
 8000236:	fbb7 f1fe 	udiv	r1, r7, lr
 800023a:	0c22      	lsrs	r2, r4, #16
 800023c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000240:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000244:	fb01 f005 	mul.w	r0, r1, r5
 8000248:	4290      	cmp	r0, r2
 800024a:	d90a      	bls.n	8000262 <__udivmoddi4+0x62>
 800024c:	eb1c 0202 	adds.w	r2, ip, r2
 8000250:	f101 37ff 	add.w	r7, r1, #4294967295
 8000254:	f080 811c 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000258:	4290      	cmp	r0, r2
 800025a:	f240 8119 	bls.w	8000490 <__udivmoddi4+0x290>
 800025e:	3902      	subs	r1, #2
 8000260:	4462      	add	r2, ip
 8000262:	1a12      	subs	r2, r2, r0
 8000264:	b2a4      	uxth	r4, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000272:	fb00 f505 	mul.w	r5, r0, r5
 8000276:	42a5      	cmp	r5, r4
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x90>
 800027a:	eb1c 0404 	adds.w	r4, ip, r4
 800027e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x294>
 8000286:	42a5      	cmp	r5, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x294>
 800028c:	4464      	add	r4, ip
 800028e:	3802      	subs	r0, #2
 8000290:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000294:	1b64      	subs	r4, r4, r5
 8000296:	2100      	movs	r1, #0
 8000298:	b11e      	cbz	r6, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40dc      	lsrs	r4, r3
 800029c:	2300      	movs	r3, #0
 800029e:	e9c6 4300 	strd	r4, r3, [r6]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d908      	bls.n	80002bc <__udivmoddi4+0xbc>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ed 	beq.w	800048a <__udivmoddi4+0x28a>
 80002b0:	2100      	movs	r1, #0
 80002b2:	e9c6 0500 	strd	r0, r5, [r6]
 80002b6:	4608      	mov	r0, r1
 80002b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002bc:	fab3 f183 	clz	r1, r3
 80002c0:	2900      	cmp	r1, #0
 80002c2:	d149      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c4:	42ab      	cmp	r3, r5
 80002c6:	d302      	bcc.n	80002ce <__udivmoddi4+0xce>
 80002c8:	4282      	cmp	r2, r0
 80002ca:	f200 80f8 	bhi.w	80004be <__udivmoddi4+0x2be>
 80002ce:	1a84      	subs	r4, r0, r2
 80002d0:	eb65 0203 	sbc.w	r2, r5, r3
 80002d4:	2001      	movs	r0, #1
 80002d6:	4617      	mov	r7, r2
 80002d8:	2e00      	cmp	r6, #0
 80002da:	d0e2      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	e9c6 4700 	strd	r4, r7, [r6]
 80002e0:	e7df      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002e2:	b902      	cbnz	r2, 80002e6 <__udivmoddi4+0xe6>
 80002e4:	deff      	udf	#255	; 0xff
 80002e6:	fab2 f382 	clz	r3, r2
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8090 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2101      	movs	r1, #1
 80002fc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000300:	fb07 2015 	mls	r0, r7, r5, r2
 8000304:	0c22      	lsrs	r2, r4, #16
 8000306:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030a:	fb0e f005 	mul.w	r0, lr, r5
 800030e:	4290      	cmp	r0, r2
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x124>
 8000312:	eb1c 0202 	adds.w	r2, ip, r2
 8000316:	f105 38ff 	add.w	r8, r5, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4290      	cmp	r0, r2
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 8000322:	4645      	mov	r5, r8
 8000324:	1a12      	subs	r2, r2, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb2 f0f7 	udiv	r0, r2, r7
 800032c:	fb07 2210 	mls	r2, r7, r0, r2
 8000330:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x14e>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 32ff 	add.w	r2, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2c2>
 800034c:	4610      	mov	r0, r2
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000356:	e79f      	b.n	8000298 <__udivmoddi4+0x98>
 8000358:	f1c1 0720 	rsb	r7, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa05 f401 	lsl.w	r4, r5, r1
 800036a:	fa20 f307 	lsr.w	r3, r0, r7
 800036e:	40fd      	lsrs	r5, r7
 8000370:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000374:	4323      	orrs	r3, r4
 8000376:	fbb5 f8f9 	udiv	r8, r5, r9
 800037a:	fa1f fe8c 	uxth.w	lr, ip
 800037e:	fb09 5518 	mls	r5, r9, r8, r5
 8000382:	0c1c      	lsrs	r4, r3, #16
 8000384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000388:	fb08 f50e 	mul.w	r5, r8, lr
 800038c:	42a5      	cmp	r5, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	fa00 f001 	lsl.w	r0, r0, r1
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	42a5      	cmp	r5, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	b29d      	uxth	r5, r3
 80003b4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b8:	fb09 4413 	mls	r4, r9, r3, r4
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1c 0404 	adds.w	r4, ip, r4
 80003cc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d2:	45a6      	cmp	lr, r4
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	4464      	add	r4, ip
 80003da:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003de:	fba3 9502 	umull	r9, r5, r3, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	42ac      	cmp	r4, r5
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46ae      	mov	lr, r5
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x29c>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x298>
 80003f0:	b156      	cbz	r6, 8000408 <__udivmoddi4+0x208>
 80003f2:	ebb0 0208 	subs.w	r2, r0, r8
 80003f6:	eb64 040e 	sbc.w	r4, r4, lr
 80003fa:	fa04 f707 	lsl.w	r7, r4, r7
 80003fe:	40ca      	lsrs	r2, r1
 8000400:	40cc      	lsrs	r4, r1
 8000402:	4317      	orrs	r7, r2
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	4618      	mov	r0, r3
 800040a:	2100      	movs	r1, #0
 800040c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000410:	f1c3 0120 	rsb	r1, r3, #32
 8000414:	fa02 fc03 	lsl.w	ip, r2, r3
 8000418:	fa20 f201 	lsr.w	r2, r0, r1
 800041c:	fa25 f101 	lsr.w	r1, r5, r1
 8000420:	409d      	lsls	r5, r3
 8000422:	432a      	orrs	r2, r5
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000430:	fb07 1510 	mls	r5, r7, r0, r1
 8000434:	0c11      	lsrs	r1, r2, #16
 8000436:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043a:	fb00 f50e 	mul.w	r5, r0, lr
 800043e:	428d      	cmp	r5, r1
 8000440:	fa04 f403 	lsl.w	r4, r4, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x258>
 8000446:	eb1c 0101 	adds.w	r1, ip, r1
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	428d      	cmp	r5, r1
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000454:	3802      	subs	r0, #2
 8000456:	4461      	add	r1, ip
 8000458:	1b49      	subs	r1, r1, r5
 800045a:	b292      	uxth	r2, r2
 800045c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000460:	fb07 1115 	mls	r1, r7, r5, r1
 8000464:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000468:	fb05 f10e 	mul.w	r1, r5, lr
 800046c:	4291      	cmp	r1, r2
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x282>
 8000470:	eb1c 0202 	adds.w	r2, ip, r2
 8000474:	f105 38ff 	add.w	r8, r5, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	4291      	cmp	r1, r2
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047e:	3d02      	subs	r5, #2
 8000480:	4462      	add	r2, ip
 8000482:	1a52      	subs	r2, r2, r1
 8000484:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0xfc>
 800048a:	4631      	mov	r1, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e708      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000490:	4639      	mov	r1, r7
 8000492:	e6e6      	b.n	8000262 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x90>
 8000498:	4548      	cmp	r0, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a4:	3b01      	subs	r3, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a8:	4645      	mov	r5, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x282>
 80004ac:	462b      	mov	r3, r5
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1da>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x258>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4462      	add	r2, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x124>
 80004be:	4608      	mov	r0, r1
 80004c0:	e70a      	b.n	80002d8 <__udivmoddi4+0xd8>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x14e>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 ff3f 	bl	8001352 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f840 	bl	8000558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 fa0a 	bl	80008f0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004dc:	f000 f89e 	bl	800061c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004e0:	f000 f8d4 	bl	800068c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004e4:	f000 f912 	bl	800070c <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004e8:	f000 f936 	bl	8000758 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004ec:	f000 f972 	bl	80007d4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004f0:	f000 f9a0 	bl	8000834 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004f4:	f000 f9ce 	bl	8000894 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004f8:	f004 faec 	bl	8004ad4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004fc:	4a0d      	ldr	r2, [pc, #52]	; (8000534 <main+0x68>)
 80004fe:	2100      	movs	r1, #0
 8000500:	480d      	ldr	r0, [pc, #52]	; (8000538 <main+0x6c>)
 8000502:	f004 fb31 	bl	8004b68 <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a0c      	ldr	r2, [pc, #48]	; (800053c <main+0x70>)
 800050a:	6013      	str	r3, [r2, #0]

  /* creation of led_verde */
  led_verdeHandle = osThreadNew(Start_led_verde, NULL, &led_verde_attributes);
 800050c:	4a0c      	ldr	r2, [pc, #48]	; (8000540 <main+0x74>)
 800050e:	2100      	movs	r1, #0
 8000510:	480c      	ldr	r0, [pc, #48]	; (8000544 <main+0x78>)
 8000512:	f004 fb29 	bl	8004b68 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a0b      	ldr	r2, [pc, #44]	; (8000548 <main+0x7c>)
 800051a:	6013      	str	r3, [r2, #0]

  /* creation of led_amarillo */
  led_amarilloHandle = osThreadNew(Start_led_amarillo, NULL, &led_amarillo_attributes);
 800051c:	4a0b      	ldr	r2, [pc, #44]	; (800054c <main+0x80>)
 800051e:	2100      	movs	r1, #0
 8000520:	480b      	ldr	r0, [pc, #44]	; (8000550 <main+0x84>)
 8000522:	f004 fb21 	bl	8004b68 <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <main+0x88>)
 800052a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800052c:	f004 faf6 	bl	8004b1c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x64>
 8000532:	bf00      	nop
 8000534:	08007648 	.word	0x08007648
 8000538:	08000c55 	.word	0x08000c55
 800053c:	2000077c 	.word	0x2000077c
 8000540:	0800766c 	.word	0x0800766c
 8000544:	08000c65 	.word	0x08000c65
 8000548:	20000780 	.word	0x20000780
 800054c:	08007690 	.word	0x08007690
 8000550:	08000c9d 	.word	0x08000c9d
 8000554:	20000784 	.word	0x20000784

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b096      	sub	sp, #88	; 0x58
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2244      	movs	r2, #68	; 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f007 f808 	bl	800757c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800057e:	f001 fe1d 	bl	80021bc <HAL_PWREx_ControlVoltageScaling>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000588:	f000 fba4 	bl	8000cd4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800058c:	f001 fdf8 	bl	8002180 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <SystemClock_Config+0xc0>)
 8000592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000596:	4a20      	ldr	r2, [pc, #128]	; (8000618 <SystemClock_Config+0xc0>)
 8000598:	f023 0318 	bic.w	r3, r3, #24
 800059c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80005a0:	2314      	movs	r3, #20
 80005a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005a4:	2301      	movs	r3, #1
 80005a6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b0:	2360      	movs	r3, #96	; 0x60
 80005b2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b4:	2302      	movs	r3, #2
 80005b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005b8:	2301      	movs	r3, #1
 80005ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005bc:	2301      	movs	r3, #1
 80005be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005c0:	2328      	movs	r3, #40	; 0x28
 80005c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005c4:	2307      	movs	r3, #7
 80005c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0314 	add.w	r3, r7, #20
 80005d4:	4618      	mov	r0, r3
 80005d6:	f001 ff13 	bl	8002400 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005e0:	f000 fb78 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2303      	movs	r3, #3
 80005ea:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005f8:	463b      	mov	r3, r7
 80005fa:	2104      	movs	r1, #4
 80005fc:	4618      	mov	r0, r3
 80005fe:	f002 fadb 	bl	8002bb8 <HAL_RCC_ClockConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000608:	f000 fb64 	bl	8000cd4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800060c:	f002 ffe2 	bl	80035d4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000610:	bf00      	nop
 8000612:	3758      	adds	r7, #88	; 0x58
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40021000 	.word	0x40021000

0800061c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_DFSDM1_Init+0x68>)
 8000622:	4a19      	ldr	r2, [pc, #100]	; (8000688 <MX_DFSDM1_Init+0x6c>)
 8000624:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_DFSDM1_Init+0x68>)
 8000628:	2201      	movs	r2, #1
 800062a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_DFSDM1_Init+0x68>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_DFSDM1_Init+0x68>)
 8000634:	2202      	movs	r2, #2
 8000636:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_DFSDM1_Init+0x68>)
 800063a:	2200      	movs	r2, #0
 800063c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_DFSDM1_Init+0x68>)
 8000640:	2200      	movs	r2, #0
 8000642:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_DFSDM1_Init+0x68>)
 8000646:	f44f 7280 	mov.w	r2, #256	; 0x100
 800064a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_DFSDM1_Init+0x68>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_DFSDM1_Init+0x68>)
 8000654:	2204      	movs	r2, #4
 8000656:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_DFSDM1_Init+0x68>)
 800065a:	2200      	movs	r2, #0
 800065c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_DFSDM1_Init+0x68>)
 8000660:	2201      	movs	r2, #1
 8000662:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_DFSDM1_Init+0x68>)
 8000666:	2200      	movs	r2, #0
 8000668:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_DFSDM1_Init+0x68>)
 800066c:	2200      	movs	r2, #0
 800066e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_DFSDM1_Init+0x68>)
 8000672:	f001 f819 	bl	80016a8 <HAL_DFSDM_ChannelInit>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800067c:	f000 fb2a 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	2000002c 	.word	0x2000002c
 8000688:	40016020 	.word	0x40016020

0800068c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000690:	4b1b      	ldr	r3, [pc, #108]	; (8000700 <MX_I2C2_Init+0x74>)
 8000692:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <MX_I2C2_Init+0x78>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_I2C2_Init+0x74>)
 8000698:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <MX_I2C2_Init+0x7c>)
 800069a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800069c:	4b18      	ldr	r3, [pc, #96]	; (8000700 <MX_I2C2_Init+0x74>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <MX_I2C2_Init+0x74>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_I2C2_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_I2C2_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_I2C2_Init+0x74>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_I2C2_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_I2C2_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006c6:	480e      	ldr	r0, [pc, #56]	; (8000700 <MX_I2C2_Init+0x74>)
 80006c8:	f001 fadf 	bl	8001c8a <HAL_I2C_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006d2:	f000 faff 	bl	8000cd4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006d6:	2100      	movs	r1, #0
 80006d8:	4809      	ldr	r0, [pc, #36]	; (8000700 <MX_I2C2_Init+0x74>)
 80006da:	f001 fb71 	bl	8001dc0 <HAL_I2CEx_ConfigAnalogFilter>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006e4:	f000 faf6 	bl	8000cd4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006e8:	2100      	movs	r1, #0
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_I2C2_Init+0x74>)
 80006ec:	f001 fbb3 	bl	8001e56 <HAL_I2CEx_ConfigDigitalFilter>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006f6:	f000 faed 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000064 	.word	0x20000064
 8000704:	40005800 	.word	0x40005800
 8000708:	10909cec 	.word	0x10909cec

0800070c <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_QUADSPI_Init+0x44>)
 8000712:	4a10      	ldr	r2, [pc, #64]	; (8000754 <MX_QUADSPI_Init+0x48>)
 8000714:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_QUADSPI_Init+0x44>)
 8000718:	2202      	movs	r2, #2
 800071a:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_QUADSPI_Init+0x44>)
 800071e:	2204      	movs	r2, #4
 8000720:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_QUADSPI_Init+0x44>)
 8000724:	2210      	movs	r2, #16
 8000726:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_QUADSPI_Init+0x44>)
 800072a:	2217      	movs	r2, #23
 800072c:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_QUADSPI_Init+0x44>)
 8000730:	2200      	movs	r2, #0
 8000732:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_QUADSPI_Init+0x44>)
 8000736:	2200      	movs	r2, #0
 8000738:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_QUADSPI_Init+0x44>)
 800073c:	f001 fda4 	bl	8002288 <HAL_QSPI_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000746:	f000 fac5 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000b8 	.word	0x200000b8
 8000754:	a0001000 	.word	0xa0001000

08000758 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_SPI3_Init+0x74>)
 800075e:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <MX_SPI3_Init+0x78>)
 8000760:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_SPI3_Init+0x74>)
 8000764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000768:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_SPI3_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_SPI3_Init+0x74>)
 8000772:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000776:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_SPI3_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_SPI3_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_SPI3_Init+0x74>)
 8000786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_SPI3_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_SPI3_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_SPI3_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_SPI3_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_SPI3_Init+0x74>)
 80007a6:	2207      	movs	r2, #7
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_SPI3_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_SPI3_Init+0x74>)
 80007b2:	2208      	movs	r2, #8
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_SPI3_Init+0x74>)
 80007b8:	f003 f8ee 	bl	8003998 <HAL_SPI_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80007c2:	f000 fa87 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	200000fc 	.word	0x200000fc
 80007d0:	40003c00 	.word	0x40003c00

080007d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007da:	4a15      	ldr	r2, [pc, #84]	; (8000830 <MX_USART1_UART_Init+0x5c>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USART1_UART_Init+0x58>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USART1_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USART1_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USART1_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USART1_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USART1_UART_Init+0x58>)
 8000818:	f003 f961 	bl	8003ade <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000822:	f000 fa57 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000160 	.word	0x20000160
 8000830:	40013800 	.word	0x40013800

08000834 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <MX_USART3_UART_Init+0x58>)
 800083a:	4a15      	ldr	r2, [pc, #84]	; (8000890 <MX_USART3_UART_Init+0x5c>)
 800083c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000840:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000844:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800084c:	4b0f      	ldr	r3, [pc, #60]	; (800088c <MX_USART3_UART_Init+0x58>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000852:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <MX_USART3_UART_Init+0x58>)
 800085a:	220c      	movs	r2, #12
 800085c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000864:	4b09      	ldr	r3, [pc, #36]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800086a:	4b08      	ldr	r3, [pc, #32]	; (800088c <MX_USART3_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_USART3_UART_Init+0x58>)
 8000878:	f003 f931 	bl	8003ade <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000882:	f000 fa27 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	200001e8 	.word	0x200001e8
 8000890:	40004800 	.word	0x40004800

08000894 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800089e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a2:	2206      	movs	r2, #6
 80008a4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ae:	2202      	movs	r2, #2
 80008b0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008d8:	f001 fb09 	bl	8001eee <HAL_PCD_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008e2:	f000 f9f7 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000270 	.word	0x20000270

080008f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	2200      	movs	r2, #0
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	609a      	str	r2, [r3, #8]
 8000902:	60da      	str	r2, [r3, #12]
 8000904:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000906:	4bbd      	ldr	r3, [pc, #756]	; (8000bfc <MX_GPIO_Init+0x30c>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4abc      	ldr	r2, [pc, #752]	; (8000bfc <MX_GPIO_Init+0x30c>)
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4bba      	ldr	r3, [pc, #744]	; (8000bfc <MX_GPIO_Init+0x30c>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0310 	and.w	r3, r3, #16
 800091a:	613b      	str	r3, [r7, #16]
 800091c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800091e:	4bb7      	ldr	r3, [pc, #732]	; (8000bfc <MX_GPIO_Init+0x30c>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4ab6      	ldr	r2, [pc, #728]	; (8000bfc <MX_GPIO_Init+0x30c>)
 8000924:	f043 0304 	orr.w	r3, r3, #4
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4bb4      	ldr	r3, [pc, #720]	; (8000bfc <MX_GPIO_Init+0x30c>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0304 	and.w	r3, r3, #4
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4bb1      	ldr	r3, [pc, #708]	; (8000bfc <MX_GPIO_Init+0x30c>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4ab0      	ldr	r2, [pc, #704]	; (8000bfc <MX_GPIO_Init+0x30c>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4bae      	ldr	r3, [pc, #696]	; (8000bfc <MX_GPIO_Init+0x30c>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	60bb      	str	r3, [r7, #8]
 800094c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4bab      	ldr	r3, [pc, #684]	; (8000bfc <MX_GPIO_Init+0x30c>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4aaa      	ldr	r2, [pc, #680]	; (8000bfc <MX_GPIO_Init+0x30c>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4ba8      	ldr	r3, [pc, #672]	; (8000bfc <MX_GPIO_Init+0x30c>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000966:	4ba5      	ldr	r3, [pc, #660]	; (8000bfc <MX_GPIO_Init+0x30c>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	4aa4      	ldr	r2, [pc, #656]	; (8000bfc <MX_GPIO_Init+0x30c>)
 800096c:	f043 0308 	orr.w	r3, r3, #8
 8000970:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000972:	4ba2      	ldr	r3, [pc, #648]	; (8000bfc <MX_GPIO_Init+0x30c>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	f003 0308 	and.w	r3, r3, #8
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800097e:	2200      	movs	r2, #0
 8000980:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000984:	489e      	ldr	r0, [pc, #632]	; (8000c00 <MX_GPIO_Init+0x310>)
 8000986:	f001 f945 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	f248 1104 	movw	r1, #33028	; 0x8104
 8000990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000994:	f001 f93e 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|verde_Pin
 8000998:	2200      	movs	r2, #0
 800099a:	f24f 0114 	movw	r1, #61460	; 0xf014
 800099e:	4899      	ldr	r0, [pc, #612]	; (8000c04 <MX_GPIO_Init+0x314>)
 80009a0:	f001 f938 	bl	8001c14 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 80009a4:	2200      	movs	r2, #0
 80009a6:	f241 0181 	movw	r1, #4225	; 0x1081
 80009aa:	4897      	ldr	r0, [pc, #604]	; (8000c08 <MX_GPIO_Init+0x318>)
 80009ac:	f001 f932 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009b6:	4894      	ldr	r0, [pc, #592]	; (8000c08 <MX_GPIO_Init+0x318>)
 80009b8:	f001 f92c 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|amarillo_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 7110 	mov.w	r1, #576	; 0x240
 80009c2:	4892      	ldr	r0, [pc, #584]	; (8000c0c <MX_GPIO_Init+0x31c>)
 80009c4:	f001 f926 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2120      	movs	r1, #32
 80009cc:	488d      	ldr	r0, [pc, #564]	; (8000c04 <MX_GPIO_Init+0x314>)
 80009ce:	f001 f921 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009d2:	2201      	movs	r2, #1
 80009d4:	2101      	movs	r1, #1
 80009d6:	488a      	ldr	r0, [pc, #552]	; (8000c00 <MX_GPIO_Init+0x310>)
 80009d8:	f001 f91c 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80009dc:	f240 1315 	movw	r3, #277	; 0x115
 80009e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4882      	ldr	r0, [pc, #520]	; (8000c00 <MX_GPIO_Init+0x310>)
 80009f6:	f000 ff63 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80009fa:	236a      	movs	r3, #106	; 0x6a
 80009fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fe:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	487c      	ldr	r0, [pc, #496]	; (8000c00 <MX_GPIO_Init+0x310>)
 8000a10:	f000 ff56 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000a14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a1a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4878      	ldr	r0, [pc, #480]	; (8000c0c <MX_GPIO_Init+0x31c>)
 8000a2c:	f000 ff48 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a30:	233f      	movs	r3, #63	; 0x3f
 8000a32:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a34:	230b      	movs	r3, #11
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	4872      	ldr	r0, [pc, #456]	; (8000c0c <MX_GPIO_Init+0x31c>)
 8000a44:	f000 ff3c 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a48:	2303      	movs	r3, #3
 8000a4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a58:	2308      	movs	r3, #8
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f000 ff2b 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a6a:	f248 1304 	movw	r3, #33028	; 0x8104
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a86:	f000 ff1b 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a8a:	2308      	movs	r3, #8
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa8:	f000 ff0a 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000aac:	2310      	movs	r3, #16
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ab0:	230b      	movs	r3, #11
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ac2:	f000 fefd 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000ac6:	23e0      	movs	r3, #224	; 0xe0
 8000ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad2:	2303      	movs	r3, #3
 8000ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ada:	f107 0314 	add.w	r3, r7, #20
 8000ade:	4619      	mov	r1, r3
 8000ae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae4:	f000 feec 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4841      	ldr	r0, [pc, #260]	; (8000c04 <MX_GPIO_Init+0x314>)
 8000afe:	f000 fedf 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000b02:	2302      	movs	r3, #2
 8000b04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b06:	230b      	movs	r3, #11
 8000b08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	483b      	ldr	r0, [pc, #236]	; (8000c04 <MX_GPIO_Init+0x314>)
 8000b16:	f000 fed3 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin verde_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|verde_Pin
 8000b1a:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000b1e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b20:	2301      	movs	r3, #1
 8000b22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	4834      	ldr	r0, [pc, #208]	; (8000c04 <MX_GPIO_Init+0x314>)
 8000b34:	f000 fec4 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b38:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b3c:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b3e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b48:	f107 0314 	add.w	r3, r7, #20
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	482e      	ldr	r0, [pc, #184]	; (8000c08 <MX_GPIO_Init+0x318>)
 8000b50:	f000 feb6 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b54:	f243 0381 	movw	r3, #12417	; 0x3081
 8000b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4826      	ldr	r0, [pc, #152]	; (8000c08 <MX_GPIO_Init+0x318>)
 8000b6e:	f000 fea7 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin amarillo_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|amarillo_Pin;
 8000b72:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4820      	ldr	r0, [pc, #128]	; (8000c0c <MX_GPIO_Init+0x31c>)
 8000b8c:	f000 fe98 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b90:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b96:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4819      	ldr	r0, [pc, #100]	; (8000c0c <MX_GPIO_Init+0x31c>)
 8000ba8:	f000 fe8a 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000bac:	2302      	movs	r3, #2
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bbc:	2305      	movs	r3, #5
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4810      	ldr	r0, [pc, #64]	; (8000c08 <MX_GPIO_Init+0x318>)
 8000bc8:	f000 fe7a 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000bcc:	2378      	movs	r3, #120	; 0x78
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bdc:	2307      	movs	r3, #7
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	4808      	ldr	r0, [pc, #32]	; (8000c08 <MX_GPIO_Init+0x318>)
 8000be8:	f000 fe6a 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000bec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf2:	2312      	movs	r3, #18
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e00a      	b.n	8000c10 <MX_GPIO_Init+0x320>
 8000bfa:	bf00      	nop
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	48001000 	.word	0x48001000
 8000c04:	48000400 	.word	0x48000400
 8000c08:	48000c00 	.word	0x48000c00
 8000c0c:	48000800 	.word	0x48000800
 8000c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c12:	2303      	movs	r3, #3
 8000c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c16:	2304      	movs	r3, #4
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480b      	ldr	r0, [pc, #44]	; (8000c50 <MX_GPIO_Init+0x360>)
 8000c22:	f000 fe4d 	bl	80018c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2105      	movs	r1, #5
 8000c2a:	2017      	movs	r0, #23
 8000c2c:	f000 fd05 	bl	800163a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c30:	2017      	movs	r0, #23
 8000c32:	f000 fd1e 	bl	8001672 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	2105      	movs	r1, #5
 8000c3a:	2028      	movs	r0, #40	; 0x28
 8000c3c:	f000 fcfd 	bl	800163a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c40:	2028      	movs	r0, #40	; 0x28
 8000c42:	f000 fd16 	bl	8001672 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c46:	bf00      	nop
 8000c48:	3728      	adds	r7, #40	; 0x28
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	48000400 	.word	0x48000400

08000c54 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f004 f815 	bl	8004c8c <osDelay>
 8000c62:	e7fb      	b.n	8000c5c <StartDefaultTask+0x8>

08000c64 <Start_led_verde>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_led_verde */
void Start_led_verde(void *argument)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_led_verde */
  /* Infinite loop */
  for(;;)
  {HAL_GPIO_WritePin(verde_GPIO_Port, verde_Pin,1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c72:	4809      	ldr	r0, [pc, #36]	; (8000c98 <Start_led_verde+0x34>)
 8000c74:	f000 ffce 	bl	8001c14 <HAL_GPIO_WritePin>
    osDelay(300);
 8000c78:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c7c:	f004 f806 	bl	8004c8c <osDelay>
    HAL_GPIO_WritePin(verde_GPIO_Port, verde_Pin,0);
 8000c80:	2200      	movs	r2, #0
 8000c82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c86:	4804      	ldr	r0, [pc, #16]	; (8000c98 <Start_led_verde+0x34>)
 8000c88:	f000 ffc4 	bl	8001c14 <HAL_GPIO_WritePin>
        osDelay(300);
 8000c8c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000c90:	f003 fffc 	bl	8004c8c <osDelay>
  {HAL_GPIO_WritePin(verde_GPIO_Port, verde_Pin,1);
 8000c94:	e7ea      	b.n	8000c6c <Start_led_verde+0x8>
 8000c96:	bf00      	nop
 8000c98:	48000400 	.word	0x48000400

08000c9c <Start_led_amarillo>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_led_amarillo */
void Start_led_amarillo(void *argument)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_led_amarillo */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(amarillo_GPIO_Port, amarillo_Pin, 1);
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000caa:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <Start_led_amarillo+0x34>)
 8000cac:	f000 ffb2 	bl	8001c14 <HAL_GPIO_WritePin>
	      osDelay(300);
 8000cb0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cb4:	f003 ffea 	bl	8004c8c <osDelay>
	      HAL_GPIO_WritePin(amarillo_GPIO_Port,amarillo_Pin,0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cbe:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <Start_led_amarillo+0x34>)
 8000cc0:	f000 ffa8 	bl	8001c14 <HAL_GPIO_WritePin>
	          osDelay(300);
 8000cc4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000cc8:	f003 ffe0 	bl	8004c8c <osDelay>
	  HAL_GPIO_WritePin(amarillo_GPIO_Port, amarillo_Pin, 1);
 8000ccc:	e7ea      	b.n	8000ca4 <Start_led_amarillo+0x8>
 8000cce:	bf00      	nop
 8000cd0:	48000800 	.word	0x48000800

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <Error_Handler+0x8>
	...

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_MspInit+0x4c>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	4a10      	ldr	r2, [pc, #64]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <HAL_MspInit+0x4c>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	4a0a      	ldr	r2, [pc, #40]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0a:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	210f      	movs	r1, #15
 8000d1a:	f06f 0001 	mvn.w	r0, #1
 8000d1e:	f000 fc8c 	bl	800163a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0ac      	sub	sp, #176	; 0xb0
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2288      	movs	r2, #136	; 0x88
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f006 fc13 	bl	800757c <memset>
  if(DFSDM1_Init == 0)
 8000d56:	4b25      	ldr	r3, [pc, #148]	; (8000dec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d142      	bne.n	8000de4 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000d5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f002 f946 	bl	8003000 <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000d7a:	f7ff ffab 	bl	8000cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000d7e:	4b1c      	ldr	r3, [pc, #112]	; (8000df0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d82:	4a1b      	ldr	r2, [pc, #108]	; (8000df0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d88:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8a:	4b19      	ldr	r3, [pc, #100]	; (8000df0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d96:	4b16      	ldr	r3, [pc, #88]	; (8000df0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	4a15      	ldr	r2, [pc, #84]	; (8000df0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000d9c:	f043 0310 	orr.w	r3, r3, #16
 8000da0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da2:	4b13      	ldr	r3, [pc, #76]	; (8000df0 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	f003 0310 	and.w	r3, r3, #16
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000dae:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000db2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000dc8:	2306      	movs	r3, #6
 8000dca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dce:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4807      	ldr	r0, [pc, #28]	; (8000df4 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000dd6:	f000 fd73 	bl	80018c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000dda:	4b04      	ldr	r3, [pc, #16]	; (8000dec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	4a02      	ldr	r2, [pc, #8]	; (8000dec <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000de2:	6013      	str	r3, [r2, #0]
  }

}
 8000de4:	bf00      	nop
 8000de6:	37b0      	adds	r7, #176	; 0xb0
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000788 	.word	0x20000788
 8000df0:	40021000 	.word	0x40021000
 8000df4:	48001000 	.word	0x48001000

08000df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b0ac      	sub	sp, #176	; 0xb0
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2288      	movs	r2, #136	; 0x88
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f006 fbaf 	bl	800757c <memset>
  if(hi2c->Instance==I2C2)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <HAL_I2C_MspInit+0xb0>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d13b      	bne.n	8000ea0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e28:	2380      	movs	r3, #128	; 0x80
 8000e2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4618      	mov	r0, r3
 8000e36:	f002 f8e3 	bl	8003000 <HAL_RCCEx_PeriphCLKConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e40:	f7ff ff48 	bl	8000cd4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <HAL_I2C_MspInit+0xb4>)
 8000e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e48:	4a18      	ldr	r2, [pc, #96]	; (8000eac <HAL_I2C_MspInit+0xb4>)
 8000e4a:	f043 0302 	orr.w	r3, r3, #2
 8000e4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_I2C_MspInit+0xb4>)
 8000e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e54:	f003 0302 	and.w	r3, r3, #2
 8000e58:	613b      	str	r3, [r7, #16]
 8000e5a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000e5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e64:	2312      	movs	r3, #18
 8000e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e76:	2304      	movs	r3, #4
 8000e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e80:	4619      	mov	r1, r3
 8000e82:	480b      	ldr	r0, [pc, #44]	; (8000eb0 <HAL_I2C_MspInit+0xb8>)
 8000e84:	f000 fd1c 	bl	80018c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e88:	4b08      	ldr	r3, [pc, #32]	; (8000eac <HAL_I2C_MspInit+0xb4>)
 8000e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8c:	4a07      	ldr	r2, [pc, #28]	; (8000eac <HAL_I2C_MspInit+0xb4>)
 8000e8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e92:	6593      	str	r3, [r2, #88]	; 0x58
 8000e94:	4b05      	ldr	r3, [pc, #20]	; (8000eac <HAL_I2C_MspInit+0xb4>)
 8000e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ea0:	bf00      	nop
 8000ea2:	37b0      	adds	r7, #176	; 0xb0
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	40005800 	.word	0x40005800
 8000eac:	40021000 	.word	0x40021000
 8000eb0:	48000400 	.word	0x48000400

08000eb4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a17      	ldr	r2, [pc, #92]	; (8000f30 <HAL_QSPI_MspInit+0x7c>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d128      	bne.n	8000f28 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000ed6:	4b17      	ldr	r3, [pc, #92]	; (8000f34 <HAL_QSPI_MspInit+0x80>)
 8000ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000eda:	4a16      	ldr	r2, [pc, #88]	; (8000f34 <HAL_QSPI_MspInit+0x80>)
 8000edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee0:	6513      	str	r3, [r2, #80]	; 0x50
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <HAL_QSPI_MspInit+0x80>)
 8000ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <HAL_QSPI_MspInit+0x80>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <HAL_QSPI_MspInit+0x80>)
 8000ef4:	f043 0310 	orr.w	r3, r3, #16
 8000ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_QSPI_MspInit+0x80>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	f003 0310 	and.w	r3, r3, #16
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f06:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f0a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f14:	2303      	movs	r3, #3
 8000f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f18:	230a      	movs	r3, #10
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <HAL_QSPI_MspInit+0x84>)
 8000f24:	f000 fccc 	bl	80018c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f28:	bf00      	nop
 8000f2a:	3728      	adds	r7, #40	; 0x28
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	a0001000 	.word	0xa0001000
 8000f34:	40021000 	.word	0x40021000
 8000f38:	48001000 	.word	0x48001000

08000f3c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	; 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <HAL_SPI_MspInit+0x7c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d128      	bne.n	8000fb0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	4a16      	ldr	r2, [pc, #88]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f68:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a10      	ldr	r2, [pc, #64]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f7c:	f043 0304 	orr.w	r3, r3, #4
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_SPI_MspInit+0x80>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0304 	and.w	r3, r3, #4
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000f8e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000fa0:	2306      	movs	r3, #6
 8000fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4805      	ldr	r0, [pc, #20]	; (8000fc0 <HAL_SPI_MspInit+0x84>)
 8000fac:	f000 fc88 	bl	80018c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3728      	adds	r7, #40	; 0x28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40003c00 	.word	0x40003c00
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	48000800 	.word	0x48000800

08000fc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b0ae      	sub	sp, #184	; 0xb8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fdc:	f107 031c 	add.w	r3, r7, #28
 8000fe0:	2288      	movs	r2, #136	; 0x88
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f006 fac9 	bl	800757c <memset>
  if(huart->Instance==USART1)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a42      	ldr	r2, [pc, #264]	; (80010f8 <HAL_UART_MspInit+0x134>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d13b      	bne.n	800106c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4618      	mov	r0, r3
 8001002:	f001 fffd 	bl	8003000 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800100c:	f7ff fe62 	bl	8000cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001010:	4b3a      	ldr	r3, [pc, #232]	; (80010fc <HAL_UART_MspInit+0x138>)
 8001012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001014:	4a39      	ldr	r2, [pc, #228]	; (80010fc <HAL_UART_MspInit+0x138>)
 8001016:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101a:	6613      	str	r3, [r2, #96]	; 0x60
 800101c:	4b37      	ldr	r3, [pc, #220]	; (80010fc <HAL_UART_MspInit+0x138>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	4b34      	ldr	r3, [pc, #208]	; (80010fc <HAL_UART_MspInit+0x138>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	4a33      	ldr	r2, [pc, #204]	; (80010fc <HAL_UART_MspInit+0x138>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001034:	4b31      	ldr	r3, [pc, #196]	; (80010fc <HAL_UART_MspInit+0x138>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	617b      	str	r3, [r7, #20]
 800103e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001040:	23c0      	movs	r3, #192	; 0xc0
 8001042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001058:	2307      	movs	r3, #7
 800105a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001062:	4619      	mov	r1, r3
 8001064:	4826      	ldr	r0, [pc, #152]	; (8001100 <HAL_UART_MspInit+0x13c>)
 8001066:	f000 fc2b 	bl	80018c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800106a:	e040      	b.n	80010ee <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a24      	ldr	r2, [pc, #144]	; (8001104 <HAL_UART_MspInit+0x140>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d13b      	bne.n	80010ee <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001076:	2304      	movs	r3, #4
 8001078:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800107a:	2300      	movs	r3, #0
 800107c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4618      	mov	r0, r3
 8001084:	f001 ffbc 	bl	8003000 <HAL_RCCEx_PeriphCLKConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_UART_MspInit+0xce>
      Error_Handler();
 800108e:	f7ff fe21 	bl	8000cd4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_UART_MspInit+0x138>)
 8001094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001096:	4a19      	ldr	r2, [pc, #100]	; (80010fc <HAL_UART_MspInit+0x138>)
 8001098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800109c:	6593      	str	r3, [r2, #88]	; 0x58
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_UART_MspInit+0x138>)
 80010a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_UART_MspInit+0x138>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a13      	ldr	r2, [pc, #76]	; (80010fc <HAL_UART_MspInit+0x138>)
 80010b0:	f043 0308 	orr.w	r3, r3, #8
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_UART_MspInit+0x138>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80010c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010dc:	2307      	movs	r3, #7
 80010de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4807      	ldr	r0, [pc, #28]	; (8001108 <HAL_UART_MspInit+0x144>)
 80010ea:	f000 fbe9 	bl	80018c0 <HAL_GPIO_Init>
}
 80010ee:	bf00      	nop
 80010f0:	37b8      	adds	r7, #184	; 0xb8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40013800 	.word	0x40013800
 80010fc:	40021000 	.word	0x40021000
 8001100:	48000400 	.word	0x48000400
 8001104:	40004800 	.word	0x40004800
 8001108:	48000c00 	.word	0x48000c00

0800110c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0ac      	sub	sp, #176	; 0xb0
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2288      	movs	r2, #136	; 0x88
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f006 fa25 	bl	800757c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800113a:	d17c      	bne.n	8001236 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800113c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001140:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001142:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001146:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800114a:	2301      	movs	r3, #1
 800114c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800114e:	2301      	movs	r3, #1
 8001150:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001152:	2318      	movs	r3, #24
 8001154:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001156:	2307      	movs	r3, #7
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800115a:	2302      	movs	r3, #2
 800115c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800115e:	2302      	movs	r3, #2
 8001160:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8001162:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001166:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4618      	mov	r0, r3
 800116e:	f001 ff47 	bl	8003000 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001178:	f7ff fdac 	bl	8000cd4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b30      	ldr	r3, [pc, #192]	; (8001240 <HAL_PCD_MspInit+0x134>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	4a2f      	ldr	r2, [pc, #188]	; (8001240 <HAL_PCD_MspInit+0x134>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001188:	4b2d      	ldr	r3, [pc, #180]	; (8001240 <HAL_PCD_MspInit+0x134>)
 800118a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001194:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001198:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011ac:	4619      	mov	r1, r3
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f000 fb85 	bl	80018c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80011b6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011d0:	230a      	movs	r3, #10
 80011d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011da:	4619      	mov	r1, r3
 80011dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e0:	f000 fb6e 	bl	80018c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <HAL_PCD_MspInit+0x134>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	4a15      	ldr	r2, [pc, #84]	; (8001240 <HAL_PCD_MspInit+0x134>)
 80011ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <HAL_PCD_MspInit+0x134>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <HAL_PCD_MspInit+0x134>)
 80011fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d114      	bne.n	8001232 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001208:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <HAL_PCD_MspInit+0x134>)
 800120a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120c:	4a0c      	ldr	r2, [pc, #48]	; (8001240 <HAL_PCD_MspInit+0x134>)
 800120e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001212:	6593      	str	r3, [r2, #88]	; 0x58
 8001214:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_PCD_MspInit+0x134>)
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121c:	60bb      	str	r3, [r7, #8]
 800121e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001220:	f001 f822 	bl	8002268 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_PCD_MspInit+0x134>)
 8001226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001228:	4a05      	ldr	r2, [pc, #20]	; (8001240 <HAL_PCD_MspInit+0x134>)
 800122a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800122e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001230:	e001      	b.n	8001236 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001232:	f001 f819 	bl	8002268 <HAL_PWREx_EnableVddUSB>
}
 8001236:	bf00      	nop
 8001238:	37b0      	adds	r7, #176	; 0xb0
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000

08001244 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <NMI_Handler+0x4>

0800124a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <HardFault_Handler+0x4>

08001250 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <MemManage_Handler+0x4>

08001256 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125a:	e7fe      	b.n	800125a <BusFault_Handler+0x4>

0800125c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <UsageFault_Handler+0x4>

08001262 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001274:	f000 f8c2 	bl	80013fc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001278:	f005 f916 	bl	80064a8 <xTaskGetSchedulerState>
 800127c:	4603      	mov	r3, r0
 800127e:	2b01      	cmp	r3, #1
 8001280:	d001      	beq.n	8001286 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001282:	f005 ff01 	bl	8007088 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}

0800128a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 800128e:	2020      	movs	r0, #32
 8001290:	f000 fcd8 	bl	8001c44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8001294:	2040      	movs	r0, #64	; 0x40
 8001296:	f000 fcd5 	bl	8001c44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800129a:	2080      	movs	r0, #128	; 0x80
 800129c:	f000 fcd2 	bl	8001c44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80012a0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80012a4:	f000 fcce 	bl	8001c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80012b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80012b4:	f000 fcc6 	bl	8001c44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80012b8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80012bc:	f000 fcc2 	bl	8001c44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80012c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80012c4:	f000 fcbe 	bl	8001c44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80012c8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80012cc:	f000 fcba 	bl	8001c44 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80012d0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80012d4:	f000 fcb6 	bl	8001c44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}

080012dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <SystemInit+0x20>)
 80012e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012e6:	4a05      	ldr	r2, [pc, #20]	; (80012fc <SystemInit+0x20>)
 80012e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80012f0:	bf00      	nop
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001300:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001338 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001304:	f7ff ffea 	bl	80012dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480c      	ldr	r0, [pc, #48]	; (800133c <LoopForever+0x6>)
  ldr r1, =_edata
 800130a:	490d      	ldr	r1, [pc, #52]	; (8001340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <LoopForever+0xe>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001320:	4c0a      	ldr	r4, [pc, #40]	; (800134c <LoopForever+0x16>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800132e:	f006 f92d 	bl	800758c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001332:	f7ff f8cb 	bl	80004cc <main>

08001336 <LoopForever>:

LoopForever:
    b LoopForever
 8001336:	e7fe      	b.n	8001336 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001338:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800133c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001340:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001344:	0800770c 	.word	0x0800770c
  ldr r2, =_sbss
 8001348:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800134c:	200020bc 	.word	0x200020bc

08001350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001350:	e7fe      	b.n	8001350 <ADC1_2_IRQHandler>

08001352 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	b082      	sub	sp, #8
 8001356:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001358:	2300      	movs	r3, #0
 800135a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135c:	2003      	movs	r0, #3
 800135e:	f000 f961 	bl	8001624 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001362:	200f      	movs	r0, #15
 8001364:	f000 f80e 	bl	8001384 <HAL_InitTick>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d002      	beq.n	8001374 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	71fb      	strb	r3, [r7, #7]
 8001372:	e001      	b.n	8001378 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001374:	f7ff fcb4 	bl	8000ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001378:	79fb      	ldrb	r3, [r7, #7]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_InitTick+0x6c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d023      	beq.n	80013e0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001398:	4b16      	ldr	r3, [pc, #88]	; (80013f4 <HAL_InitTick+0x70>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <HAL_InitTick+0x6c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	4619      	mov	r1, r3
 80013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f96d 	bl	800168e <HAL_SYSTICK_Config>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d10f      	bne.n	80013da <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d809      	bhi.n	80013d4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c0:	2200      	movs	r2, #0
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	f04f 30ff 	mov.w	r0, #4294967295
 80013c8:	f000 f937 	bl	800163a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_InitTick+0x74>)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	e007      	b.n	80013e4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e004      	b.n	80013e4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	73fb      	strb	r3, [r7, #15]
 80013de:	e001      	b.n	80013e4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000004 	.word	0x20000004

080013fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x20>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_IncTick+0x24>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a04      	ldr	r2, [pc, #16]	; (8001420 <HAL_IncTick+0x24>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000008 	.word	0x20000008
 8001420:	2000078c 	.word	0x2000078c

08001424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return uwTick;
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <HAL_GetTick+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	2000078c 	.word	0x2000078c

0800143c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001444:	f7ff ffee 	bl	8001424 <HAL_GetTick>
 8001448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001454:	d005      	beq.n	8001462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_Delay+0x44>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001462:	bf00      	nop
 8001464:	f7ff ffde 	bl	8001424 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	429a      	cmp	r2, r3
 8001472:	d8f7      	bhi.n	8001464 <HAL_Delay+0x28>
  {
  }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000008 	.word	0x20000008

08001484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0b      	blt.n	8001512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4907      	ldr	r1, [pc, #28]	; (8001520 <__NVIC_EnableIRQ+0x38>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	db0a      	blt.n	800154e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	; (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4908      	ldr	r1, [pc, #32]	; (8001574 <__NVIC_SetPriority+0x50>)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3b04      	subs	r3, #4
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	440b      	add	r3, r1
 8001562:	761a      	strb	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
         );
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f0:	d301      	bcc.n	80015f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f2:	2301      	movs	r3, #1
 80015f4:	e00f      	b.n	8001616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f6:	4a0a      	ldr	r2, [pc, #40]	; (8001620 <SysTick_Config+0x40>)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fe:	210f      	movs	r1, #15
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	f7ff ff8e 	bl	8001524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <SysTick_Config+0x40>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160e:	4b04      	ldr	r3, [pc, #16]	; (8001620 <SysTick_Config+0x40>)
 8001610:	2207      	movs	r2, #7
 8001612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	e000e010 	.word	0xe000e010

08001624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800162c:	6878      	ldr	r0, [r7, #4]
 800162e:	f7ff ff29 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}

0800163a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800163a:	b580      	push	{r7, lr}
 800163c:	b086      	sub	sp, #24
 800163e:	af00      	add	r7, sp, #0
 8001640:	4603      	mov	r3, r0
 8001642:	60b9      	str	r1, [r7, #8]
 8001644:	607a      	str	r2, [r7, #4]
 8001646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800164c:	f7ff ff3e 	bl	80014cc <__NVIC_GetPriorityGrouping>
 8001650:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	6978      	ldr	r0, [r7, #20]
 8001658:	f7ff ff8e 	bl	8001578 <NVIC_EncodePriority>
 800165c:	4602      	mov	r2, r0
 800165e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001662:	4611      	mov	r1, r2
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff5d 	bl	8001524 <__NVIC_SetPriority>
}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	4603      	mov	r3, r0
 800167a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800167c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001680:	4618      	mov	r0, r3
 8001682:	f7ff ff31 	bl	80014e8 <__NVIC_EnableIRQ>
}
 8001686:	bf00      	nop
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}

0800168e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f7ff ffa2 	bl	80015e0 <SysTick_Config>
 800169c:	4603      	mov	r3, r0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e0ac      	b.n	8001814 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f8b2 	bl	8001828 <DFSDM_GetChannelFromInstance>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4a55      	ldr	r2, [pc, #340]	; (800181c <HAL_DFSDM_ChannelInit+0x174>)
 80016c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e09f      	b.n	8001814 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fb2b 	bl	8000d30 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80016da:	4b51      	ldr	r3, [pc, #324]	; (8001820 <HAL_DFSDM_ChannelInit+0x178>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	4a4f      	ldr	r2, [pc, #316]	; (8001820 <HAL_DFSDM_ChannelInit+0x178>)
 80016e2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80016e4:	4b4e      	ldr	r3, [pc, #312]	; (8001820 <HAL_DFSDM_ChannelInit+0x178>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d125      	bne.n	8001738 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80016ec:	4b4d      	ldr	r3, [pc, #308]	; (8001824 <HAL_DFSDM_ChannelInit+0x17c>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a4c      	ldr	r2, [pc, #304]	; (8001824 <HAL_DFSDM_ChannelInit+0x17c>)
 80016f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80016f6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80016f8:	4b4a      	ldr	r3, [pc, #296]	; (8001824 <HAL_DFSDM_ChannelInit+0x17c>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4948      	ldr	r1, [pc, #288]	; (8001824 <HAL_DFSDM_ChannelInit+0x17c>)
 8001702:	4313      	orrs	r3, r2
 8001704:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001706:	4b47      	ldr	r3, [pc, #284]	; (8001824 <HAL_DFSDM_ChannelInit+0x17c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a46      	ldr	r2, [pc, #280]	; (8001824 <HAL_DFSDM_ChannelInit+0x17c>)
 800170c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001710:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	791b      	ldrb	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d108      	bne.n	800172c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800171a:	4b42      	ldr	r3, [pc, #264]	; (8001824 <HAL_DFSDM_ChannelInit+0x17c>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	3b01      	subs	r3, #1
 8001724:	041b      	lsls	r3, r3, #16
 8001726:	493f      	ldr	r1, [pc, #252]	; (8001824 <HAL_DFSDM_ChannelInit+0x17c>)
 8001728:	4313      	orrs	r3, r2
 800172a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800172c:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <HAL_DFSDM_ChannelInit+0x17c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a3c      	ldr	r2, [pc, #240]	; (8001824 <HAL_DFSDM_ChannelInit+0x17c>)
 8001732:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001736:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8001746:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6819      	ldr	r1, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001756:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800175c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	430a      	orrs	r2, r1
 8001764:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 020f 	bic.w	r2, r2, #15
 8001774:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	6819      	ldr	r1, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001784:	431a      	orrs	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800179c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6899      	ldr	r1, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	3b01      	subs	r3, #1
 80017ae:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80017b0:	431a      	orrs	r2, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f002 0207 	and.w	r2, r2, #7
 80017c8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	6859      	ldr	r1, [r3, #4]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80017f4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f000 f810 	bl	8001828 <DFSDM_GetChannelFromInstance>
 8001808:	4602      	mov	r2, r0
 800180a:	4904      	ldr	r1, [pc, #16]	; (800181c <HAL_DFSDM_ChannelInit+0x174>)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000794 	.word	0x20000794
 8001820:	20000790 	.word	0x20000790
 8001824:	40016000 	.word	0x40016000

08001828 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a1c      	ldr	r2, [pc, #112]	; (80018a4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d102      	bne.n	800183e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	e02b      	b.n	8001896 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a19      	ldr	r2, [pc, #100]	; (80018a8 <DFSDM_GetChannelFromInstance+0x80>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d102      	bne.n	800184c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001846:	2301      	movs	r3, #1
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	e024      	b.n	8001896 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <DFSDM_GetChannelFromInstance+0x84>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d102      	bne.n	800185a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001854:	2302      	movs	r3, #2
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e01d      	b.n	8001896 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a14      	ldr	r2, [pc, #80]	; (80018b0 <DFSDM_GetChannelFromInstance+0x88>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d102      	bne.n	8001868 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001862:	2304      	movs	r3, #4
 8001864:	60fb      	str	r3, [r7, #12]
 8001866:	e016      	b.n	8001896 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4a12      	ldr	r2, [pc, #72]	; (80018b4 <DFSDM_GetChannelFromInstance+0x8c>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d102      	bne.n	8001876 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001870:	2305      	movs	r3, #5
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e00f      	b.n	8001896 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a0f      	ldr	r2, [pc, #60]	; (80018b8 <DFSDM_GetChannelFromInstance+0x90>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d102      	bne.n	8001884 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800187e:	2306      	movs	r3, #6
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	e008      	b.n	8001896 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <DFSDM_GetChannelFromInstance+0x94>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d102      	bne.n	8001892 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800188c:	2307      	movs	r3, #7
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	e001      	b.n	8001896 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001892:	2303      	movs	r3, #3
 8001894:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	40016000 	.word	0x40016000
 80018a8:	40016020 	.word	0x40016020
 80018ac:	40016040 	.word	0x40016040
 80018b0:	40016080 	.word	0x40016080
 80018b4:	400160a0 	.word	0x400160a0
 80018b8:	400160c0 	.word	0x400160c0
 80018bc:	400160e0 	.word	0x400160e0

080018c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ce:	e17f      	b.n	8001bd0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	2101      	movs	r1, #1
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa01 f303 	lsl.w	r3, r1, r3
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8171 	beq.w	8001bca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d005      	beq.n	8001900 <HAL_GPIO_Init+0x40>
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f003 0303 	and.w	r3, r3, #3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d130      	bne.n	8001962 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	2203      	movs	r2, #3
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001936:	2201      	movs	r2, #1
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	f003 0201 	and.w	r2, r3, #1
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b03      	cmp	r3, #3
 800196c:	d118      	bne.n	80019a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001974:	2201      	movs	r2, #1
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	08db      	lsrs	r3, r3, #3
 800198a:	f003 0201 	and.w	r2, r3, #1
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	693a      	ldr	r2, [r7, #16]
 8001996:	4313      	orrs	r3, r2
 8001998:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b03      	cmp	r3, #3
 80019aa:	d017      	beq.n	80019dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2203      	movs	r2, #3
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d123      	bne.n	8001a30 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	08da      	lsrs	r2, r3, #3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3208      	adds	r2, #8
 80019f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f003 0307 	and.w	r3, r3, #7
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	220f      	movs	r2, #15
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	08da      	lsrs	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	3208      	adds	r2, #8
 8001a2a:	6939      	ldr	r1, [r7, #16]
 8001a2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 0203 	and.w	r2, r3, #3
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80ac 	beq.w	8001bca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	4b5f      	ldr	r3, [pc, #380]	; (8001bf0 <HAL_GPIO_Init+0x330>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a76:	4a5e      	ldr	r2, [pc, #376]	; (8001bf0 <HAL_GPIO_Init+0x330>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a7e:	4b5c      	ldr	r3, [pc, #368]	; (8001bf0 <HAL_GPIO_Init+0x330>)
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	f003 0301 	and.w	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
 8001a88:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a8a:	4a5a      	ldr	r2, [pc, #360]	; (8001bf4 <HAL_GPIO_Init+0x334>)
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ab4:	d025      	beq.n	8001b02 <HAL_GPIO_Init+0x242>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a4f      	ldr	r2, [pc, #316]	; (8001bf8 <HAL_GPIO_Init+0x338>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d01f      	beq.n	8001afe <HAL_GPIO_Init+0x23e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a4e      	ldr	r2, [pc, #312]	; (8001bfc <HAL_GPIO_Init+0x33c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d019      	beq.n	8001afa <HAL_GPIO_Init+0x23a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a4d      	ldr	r2, [pc, #308]	; (8001c00 <HAL_GPIO_Init+0x340>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_GPIO_Init+0x236>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a4c      	ldr	r2, [pc, #304]	; (8001c04 <HAL_GPIO_Init+0x344>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d00d      	beq.n	8001af2 <HAL_GPIO_Init+0x232>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a4b      	ldr	r2, [pc, #300]	; (8001c08 <HAL_GPIO_Init+0x348>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d007      	beq.n	8001aee <HAL_GPIO_Init+0x22e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a4a      	ldr	r2, [pc, #296]	; (8001c0c <HAL_GPIO_Init+0x34c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d101      	bne.n	8001aea <HAL_GPIO_Init+0x22a>
 8001ae6:	2306      	movs	r3, #6
 8001ae8:	e00c      	b.n	8001b04 <HAL_GPIO_Init+0x244>
 8001aea:	2307      	movs	r3, #7
 8001aec:	e00a      	b.n	8001b04 <HAL_GPIO_Init+0x244>
 8001aee:	2305      	movs	r3, #5
 8001af0:	e008      	b.n	8001b04 <HAL_GPIO_Init+0x244>
 8001af2:	2304      	movs	r3, #4
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x244>
 8001af6:	2303      	movs	r3, #3
 8001af8:	e004      	b.n	8001b04 <HAL_GPIO_Init+0x244>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e002      	b.n	8001b04 <HAL_GPIO_Init+0x244>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x244>
 8001b02:	2300      	movs	r3, #0
 8001b04:	697a      	ldr	r2, [r7, #20]
 8001b06:	f002 0203 	and.w	r2, r2, #3
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	693a      	ldr	r2, [r7, #16]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b14:	4937      	ldr	r1, [pc, #220]	; (8001bf4 <HAL_GPIO_Init+0x334>)
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b22:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <HAL_GPIO_Init+0x350>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b46:	4a32      	ldr	r2, [pc, #200]	; (8001c10 <HAL_GPIO_Init+0x350>)
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b4c:	4b30      	ldr	r3, [pc, #192]	; (8001c10 <HAL_GPIO_Init+0x350>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b68:	693a      	ldr	r2, [r7, #16]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b70:	4a27      	ldr	r2, [pc, #156]	; (8001c10 <HAL_GPIO_Init+0x350>)
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b76:	4b26      	ldr	r3, [pc, #152]	; (8001c10 <HAL_GPIO_Init+0x350>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	693a      	ldr	r2, [r7, #16]
 8001b82:	4013      	ands	r3, r2
 8001b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b9a:	4a1d      	ldr	r2, [pc, #116]	; (8001c10 <HAL_GPIO_Init+0x350>)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	; (8001c10 <HAL_GPIO_Init+0x350>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bc4:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <HAL_GPIO_Init+0x350>)
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f47f ae78 	bne.w	80018d0 <HAL_GPIO_Init+0x10>
  }
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	371c      	adds	r7, #28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010000 	.word	0x40010000
 8001bf8:	48000400 	.word	0x48000400
 8001bfc:	48000800 	.word	0x48000800
 8001c00:	48000c00 	.word	0x48000c00
 8001c04:	48001000 	.word	0x48001000
 8001c08:	48001400 	.word	0x48001400
 8001c0c:	48001800 	.word	0x48001800
 8001c10:	40010400 	.word	0x40010400

08001c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c24:	787b      	ldrb	r3, [r7, #1]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c30:	e002      	b.n	8001c38 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c32:	887a      	ldrh	r2, [r7, #2]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c4e:	4b08      	ldr	r3, [pc, #32]	; (8001c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c50:	695a      	ldr	r2, [r3, #20]
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d006      	beq.n	8001c68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c5a:	4a05      	ldr	r2, [pc, #20]	; (8001c70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 f806 	bl	8001c74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40010400 	.word	0x40010400

08001c74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d101      	bne.n	8001c9c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e08d      	b.n	8001db8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d106      	bne.n	8001cb6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7ff f8a1 	bl	8000df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2224      	movs	r2, #36	; 0x24
 8001cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d107      	bne.n	8001d04 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d00:	609a      	str	r2, [r3, #8]
 8001d02:	e006      	b.n	8001d12 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001d10:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d108      	bne.n	8001d2c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	e007      	b.n	8001d3c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685a      	ldr	r2, [r3, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d3a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6812      	ldr	r2, [r2, #0]
 8001d46:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d4e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d5e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	691a      	ldr	r2, [r3, #16]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69d9      	ldr	r1, [r3, #28]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1a      	ldr	r2, [r3, #32]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f042 0201 	orr.w	r2, r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2220      	movs	r2, #32
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b20      	cmp	r3, #32
 8001dd4:	d138      	bne.n	8001e48 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d101      	bne.n	8001de4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001de0:	2302      	movs	r3, #2
 8001de2:	e032      	b.n	8001e4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2224      	movs	r2, #36	; 0x24
 8001df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001e12:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6819      	ldr	r1, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	430a      	orrs	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0201 	orr.w	r2, r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2220      	movs	r2, #32
 8001e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e000      	b.n	8001e4a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e48:	2302      	movs	r3, #2
  }
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b085      	sub	sp, #20
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d139      	bne.n	8001ee0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e033      	b.n	8001ee2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2224      	movs	r2, #36	; 0x24
 8001e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 0201 	bic.w	r2, r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ea8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	021b      	lsls	r3, r3, #8
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	e000      	b.n	8001ee2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001ee0:	2302      	movs	r3, #2
  }
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3714      	adds	r7, #20
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eee:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ef0:	b08f      	sub	sp, #60	; 0x3c
 8001ef2:	af0a      	add	r7, sp, #40	; 0x28
 8001ef4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e116      	b.n	800212e <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff f8f6 	bl	800110c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2203      	movs	r2, #3
 8001f24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d102      	bne.n	8001f3a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f002 fb15 	bl	800456e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	687e      	ldr	r6, [r7, #4]
 8001f4c:	466d      	mov	r5, sp
 8001f4e:	f106 0410 	add.w	r4, r6, #16
 8001f52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f5a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f5e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f62:	1d33      	adds	r3, r6, #4
 8001f64:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f66:	6838      	ldr	r0, [r7, #0]
 8001f68:	f002 fad5 	bl	8004516 <USB_CoreInit>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2202      	movs	r2, #2
 8001f76:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e0d7      	b.n	800212e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2100      	movs	r1, #0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f002 fb03 	bl	8004590 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	e04a      	b.n	8002026 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	4613      	mov	r3, r2
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	440b      	add	r3, r1
 8001f9e:	333d      	adds	r3, #61	; 0x3d
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fa4:	7bfa      	ldrb	r2, [r7, #15]
 8001fa6:	6879      	ldr	r1, [r7, #4]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	333c      	adds	r3, #60	; 0x3c
 8001fb4:	7bfa      	ldrb	r2, [r7, #15]
 8001fb6:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fb8:	7bfa      	ldrb	r2, [r7, #15]
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	b298      	uxth	r0, r3
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4413      	add	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	440b      	add	r3, r1
 8001fca:	3356      	adds	r3, #86	; 0x56
 8001fcc:	4602      	mov	r2, r0
 8001fce:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	440b      	add	r3, r1
 8001fde:	3340      	adds	r3, #64	; 0x40
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fe4:	7bfa      	ldrb	r2, [r7, #15]
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4413      	add	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	440b      	add	r3, r1
 8001ff2:	3344      	adds	r3, #68	; 0x44
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	3348      	adds	r3, #72	; 0x48
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	334c      	adds	r3, #76	; 0x4c
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	3301      	adds	r3, #1
 8002024:	73fb      	strb	r3, [r7, #15]
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	429a      	cmp	r2, r3
 800202e:	d3af      	bcc.n	8001f90 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002030:	2300      	movs	r3, #0
 8002032:	73fb      	strb	r3, [r7, #15]
 8002034:	e044      	b.n	80020c0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002062:	7bfa      	ldrb	r2, [r7, #15]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	4413      	add	r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020b6:	2200      	movs	r2, #0
 80020b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
 80020bc:	3301      	adds	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d3b5      	bcc.n	8002036 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	687e      	ldr	r6, [r7, #4]
 80020d2:	466d      	mov	r5, sp
 80020d4:	f106 0410 	add.w	r4, r6, #16
 80020d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020e4:	e885 0003 	stmia.w	r5, {r0, r1}
 80020e8:	1d33      	adds	r3, r6, #4
 80020ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ec:	6838      	ldr	r0, [r7, #0]
 80020ee:	f002 fa9b 	bl	8004628 <USB_DevInit>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e014      	b.n	800212e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	2b01      	cmp	r3, #1
 800211a:	d102      	bne.n	8002122 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f80a 	bl	8002136 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f002 fc3d 	bl	80049a6 <USB_DevDisconnect>

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002136 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002136:	b480      	push	{r7}
 8002138:	b085      	sub	sp, #20
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002168:	f043 0303 	orr.w	r3, r3, #3
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800218a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218e:	6013      	str	r3, [r2, #0]
}
 8002190:	bf00      	nop
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	40007000 	.word	0x40007000

080021a0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <HAL_PWREx_GetVoltageRange+0x18>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40007000 	.word	0x40007000

080021bc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021ca:	d130      	bne.n	800222e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021cc:	4b23      	ldr	r3, [pc, #140]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d8:	d038      	beq.n	800224c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021e2:	4a1e      	ldr	r2, [pc, #120]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021e8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021ea:	4b1d      	ldr	r3, [pc, #116]	; (8002260 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2232      	movs	r2, #50	; 0x32
 80021f0:	fb02 f303 	mul.w	r3, r2, r3
 80021f4:	4a1b      	ldr	r2, [pc, #108]	; (8002264 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021f6:	fba2 2303 	umull	r2, r3, r2, r3
 80021fa:	0c9b      	lsrs	r3, r3, #18
 80021fc:	3301      	adds	r3, #1
 80021fe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002200:	e002      	b.n	8002208 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	3b01      	subs	r3, #1
 8002206:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002208:	4b14      	ldr	r3, [pc, #80]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002214:	d102      	bne.n	800221c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d1f2      	bne.n	8002202 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002228:	d110      	bne.n	800224c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e00f      	b.n	800224e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800222e:	4b0b      	ldr	r3, [pc, #44]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223a:	d007      	beq.n	800224c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002244:	4a05      	ldr	r2, [pc, #20]	; (800225c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002246:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800224a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40007000 	.word	0x40007000
 8002260:	20000000 	.word	0x20000000
 8002264:	431bde83 	.word	0x431bde83

08002268 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_PWREx_EnableVddUSB+0x1c>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002276:	6053      	str	r3, [r2, #4]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	40007000 	.word	0x40007000

08002288 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af02      	add	r7, sp, #8
 800228e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002290:	f7ff f8c8 	bl	8001424 <HAL_GetTick>
 8002294:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e063      	b.n	8002368 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10b      	bne.n	80022c4 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7fe fdfd 	bl	8000eb4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80022ba:	f241 3188 	movw	r1, #5000	; 0x1388
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f000 f858 	bl	8002374 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	3b01      	subs	r3, #1
 80022d4:	021a      	lsls	r2, r3, #8
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	2120      	movs	r1, #32
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 f850 	bl	8002390 <QSPI_WaitFlagStateUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80022f4:	7afb      	ldrb	r3, [r7, #11]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d131      	bne.n	800235e <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002304:	f023 0310 	bic.w	r3, r3, #16
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	6852      	ldr	r2, [r2, #4]
 800230c:	0611      	lsls	r1, r2, #24
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68d2      	ldr	r2, [r2, #12]
 8002312:	4311      	orrs	r1, r2
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	430b      	orrs	r3, r1
 800231a:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	685a      	ldr	r2, [r3, #4]
 8002322:	4b13      	ldr	r3, [pc, #76]	; (8002370 <HAL_QSPI_Init+0xe8>)
 8002324:	4013      	ands	r3, r2
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	6912      	ldr	r2, [r2, #16]
 800232a:	0411      	lsls	r1, r2, #16
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	6952      	ldr	r2, [r2, #20]
 8002330:	4311      	orrs	r1, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6992      	ldr	r2, [r2, #24]
 8002336:	4311      	orrs	r1, r2
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	430b      	orrs	r3, r1
 800233e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 0201 	orr.w	r2, r2, #1
 800234e:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2201      	movs	r2, #1
 800235a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8002366:	7afb      	ldrb	r3, [r7, #11]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	ffe0f8fe 	.word	0xffe0f8fe

08002374 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	4613      	mov	r3, r2
 800239e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80023a0:	e01a      	b.n	80023d8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d016      	beq.n	80023d8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023aa:	f7ff f83b 	bl	8001424 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d302      	bcc.n	80023c0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2204      	movs	r2, #4
 80023c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	f043 0201 	orr.w	r2, r3, #1
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e00e      	b.n	80023f6 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	bf14      	ite	ne
 80023e6:	2301      	movne	r3, #1
 80023e8:	2300      	moveq	r3, #0
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	461a      	mov	r2, r3
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1d6      	bne.n	80023a2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b088      	sub	sp, #32
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d101      	bne.n	8002412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e3ca      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002412:	4b97      	ldr	r3, [pc, #604]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800241c:	4b94      	ldr	r3, [pc, #592]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 0303 	and.w	r3, r3, #3
 8002424:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80e4 	beq.w	80025fc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d007      	beq.n	800244a <HAL_RCC_OscConfig+0x4a>
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	2b0c      	cmp	r3, #12
 800243e:	f040 808b 	bne.w	8002558 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	2b01      	cmp	r3, #1
 8002446:	f040 8087 	bne.w	8002558 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800244a:	4b89      	ldr	r3, [pc, #548]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d005      	beq.n	8002462 <HAL_RCC_OscConfig+0x62>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e3a2      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1a      	ldr	r2, [r3, #32]
 8002466:	4b82      	ldr	r3, [pc, #520]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d004      	beq.n	800247c <HAL_RCC_OscConfig+0x7c>
 8002472:	4b7f      	ldr	r3, [pc, #508]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800247a:	e005      	b.n	8002488 <HAL_RCC_OscConfig+0x88>
 800247c:	4b7c      	ldr	r3, [pc, #496]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 800247e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002488:	4293      	cmp	r3, r2
 800248a:	d223      	bcs.n	80024d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a1b      	ldr	r3, [r3, #32]
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fd55 	bl	8002f40 <RCC_SetFlashLatencyFromMSIRange>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e383      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024a0:	4b73      	ldr	r3, [pc, #460]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a72      	ldr	r2, [pc, #456]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024a6:	f043 0308 	orr.w	r3, r3, #8
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	4b70      	ldr	r3, [pc, #448]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	496d      	ldr	r1, [pc, #436]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024be:	4b6c      	ldr	r3, [pc, #432]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	021b      	lsls	r3, r3, #8
 80024cc:	4968      	ldr	r1, [pc, #416]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
 80024d2:	e025      	b.n	8002520 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024d4:	4b66      	ldr	r3, [pc, #408]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a65      	ldr	r2, [pc, #404]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024da:	f043 0308 	orr.w	r3, r3, #8
 80024de:	6013      	str	r3, [r2, #0]
 80024e0:	4b63      	ldr	r3, [pc, #396]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	4960      	ldr	r1, [pc, #384]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024f2:	4b5f      	ldr	r3, [pc, #380]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69db      	ldr	r3, [r3, #28]
 80024fe:	021b      	lsls	r3, r3, #8
 8002500:	495b      	ldr	r1, [pc, #364]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d109      	bne.n	8002520 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	4618      	mov	r0, r3
 8002512:	f000 fd15 	bl	8002f40 <RCC_SetFlashLatencyFromMSIRange>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e343      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002520:	f000 fc4a 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002524:	4602      	mov	r2, r0
 8002526:	4b52      	ldr	r3, [pc, #328]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	091b      	lsrs	r3, r3, #4
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	4950      	ldr	r1, [pc, #320]	; (8002674 <HAL_RCC_OscConfig+0x274>)
 8002532:	5ccb      	ldrb	r3, [r1, r3]
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	4a4e      	ldr	r2, [pc, #312]	; (8002678 <HAL_RCC_OscConfig+0x278>)
 800253e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002540:	4b4e      	ldr	r3, [pc, #312]	; (800267c <HAL_RCC_OscConfig+0x27c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe ff1d 	bl	8001384 <HAL_InitTick>
 800254a:	4603      	mov	r3, r0
 800254c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d052      	beq.n	80025fa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	e327      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d032      	beq.n	80025c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002560:	4b43      	ldr	r3, [pc, #268]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a42      	ldr	r2, [pc, #264]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002566:	f043 0301 	orr.w	r3, r3, #1
 800256a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800256c:	f7fe ff5a 	bl	8001424 <HAL_GetTick>
 8002570:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002572:	e008      	b.n	8002586 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002574:	f7fe ff56 	bl	8001424 <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d901      	bls.n	8002586 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002582:	2303      	movs	r3, #3
 8002584:	e310      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002586:	4b3a      	ldr	r3, [pc, #232]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d0f0      	beq.n	8002574 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002592:	4b37      	ldr	r3, [pc, #220]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a36      	ldr	r2, [pc, #216]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002598:	f043 0308 	orr.w	r3, r3, #8
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b34      	ldr	r3, [pc, #208]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4931      	ldr	r1, [pc, #196]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025b0:	4b2f      	ldr	r3, [pc, #188]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	492c      	ldr	r1, [pc, #176]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
 80025c4:	e01a      	b.n	80025fc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025c6:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a29      	ldr	r2, [pc, #164]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025d2:	f7fe ff27 	bl	8001424 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025da:	f7fe ff23 	bl	8001424 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e2dd      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025ec:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f0      	bne.n	80025da <HAL_RCC_OscConfig+0x1da>
 80025f8:	e000      	b.n	80025fc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025fa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d074      	beq.n	80026f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	2b08      	cmp	r3, #8
 800260c:	d005      	beq.n	800261a <HAL_RCC_OscConfig+0x21a>
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	2b0c      	cmp	r3, #12
 8002612:	d10e      	bne.n	8002632 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2b03      	cmp	r3, #3
 8002618:	d10b      	bne.n	8002632 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261a:	4b15      	ldr	r3, [pc, #84]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d064      	beq.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d160      	bne.n	80026f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e2ba      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263a:	d106      	bne.n	800264a <HAL_RCC_OscConfig+0x24a>
 800263c:	4b0c      	ldr	r3, [pc, #48]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0b      	ldr	r2, [pc, #44]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	e026      	b.n	8002698 <HAL_RCC_OscConfig+0x298>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002652:	d115      	bne.n	8002680 <HAL_RCC_OscConfig+0x280>
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a05      	ldr	r2, [pc, #20]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 800265a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	4b03      	ldr	r3, [pc, #12]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a02      	ldr	r2, [pc, #8]	; (8002670 <HAL_RCC_OscConfig+0x270>)
 8002666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	e014      	b.n	8002698 <HAL_RCC_OscConfig+0x298>
 800266e:	bf00      	nop
 8002670:	40021000 	.word	0x40021000
 8002674:	080076b4 	.word	0x080076b4
 8002678:	20000000 	.word	0x20000000
 800267c:	20000004 	.word	0x20000004
 8002680:	4ba0      	ldr	r3, [pc, #640]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a9f      	ldr	r2, [pc, #636]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b9d      	ldr	r3, [pc, #628]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a9c      	ldr	r2, [pc, #624]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a0:	f7fe fec0 	bl	8001424 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a8:	f7fe febc 	bl	8001424 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	; 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e276      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ba:	4b92      	ldr	r3, [pc, #584]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0x2a8>
 80026c6:	e014      	b.n	80026f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe feac 	bl	8001424 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d0:	f7fe fea8 	bl	8001424 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	; 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e262      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026e2:	4b88      	ldr	r3, [pc, #544]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x2d0>
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d060      	beq.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	2b04      	cmp	r3, #4
 8002702:	d005      	beq.n	8002710 <HAL_RCC_OscConfig+0x310>
 8002704:	69bb      	ldr	r3, [r7, #24]
 8002706:	2b0c      	cmp	r3, #12
 8002708:	d119      	bne.n	800273e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d116      	bne.n	800273e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002710:	4b7c      	ldr	r3, [pc, #496]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_RCC_OscConfig+0x328>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d101      	bne.n	8002728 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002724:	2301      	movs	r3, #1
 8002726:	e23f      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002728:	4b76      	ldr	r3, [pc, #472]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	061b      	lsls	r3, r3, #24
 8002736:	4973      	ldr	r1, [pc, #460]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800273c:	e040      	b.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d023      	beq.n	800278e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002746:	4b6f      	ldr	r3, [pc, #444]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a6e      	ldr	r2, [pc, #440]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 800274c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002750:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002752:	f7fe fe67 	bl	8001424 <HAL_GetTick>
 8002756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275a:	f7fe fe63 	bl	8001424 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e21d      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800276c:	4b65      	ldr	r3, [pc, #404]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002778:	4b62      	ldr	r3, [pc, #392]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	691b      	ldr	r3, [r3, #16]
 8002784:	061b      	lsls	r3, r3, #24
 8002786:	495f      	ldr	r1, [pc, #380]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
 800278c:	e018      	b.n	80027c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278e:	4b5d      	ldr	r3, [pc, #372]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a5c      	ldr	r2, [pc, #368]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002794:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002798:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe fe43 	bl	8001424 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a2:	f7fe fe3f 	bl	8001424 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e1f9      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027b4:	4b53      	ldr	r3, [pc, #332]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f0      	bne.n	80027a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d03c      	beq.n	8002846 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d01c      	beq.n	800280e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027d4:	4b4b      	ldr	r3, [pc, #300]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80027d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027da:	4a4a      	ldr	r2, [pc, #296]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e4:	f7fe fe1e 	bl	8001424 <HAL_GetTick>
 80027e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ec:	f7fe fe1a 	bl	8001424 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1d4      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027fe:	4b41      	ldr	r3, [pc, #260]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d0ef      	beq.n	80027ec <HAL_RCC_OscConfig+0x3ec>
 800280c:	e01b      	b.n	8002846 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280e:	4b3d      	ldr	r3, [pc, #244]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002814:	4a3b      	ldr	r2, [pc, #236]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002816:	f023 0301 	bic.w	r3, r3, #1
 800281a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281e:	f7fe fe01 	bl	8001424 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002826:	f7fe fdfd 	bl	8001424 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e1b7      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002838:	4b32      	ldr	r3, [pc, #200]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 800283a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1ef      	bne.n	8002826 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80a6 	beq.w	80029a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002854:	2300      	movs	r3, #0
 8002856:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002858:	4b2a      	ldr	r3, [pc, #168]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 800285a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10d      	bne.n	8002880 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002864:	4b27      	ldr	r3, [pc, #156]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002868:	4a26      	ldr	r2, [pc, #152]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 800286a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800286e:	6593      	str	r3, [r2, #88]	; 0x58
 8002870:	4b24      	ldr	r3, [pc, #144]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 8002872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002878:	60bb      	str	r3, [r7, #8]
 800287a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287c:	2301      	movs	r3, #1
 800287e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002880:	4b21      	ldr	r3, [pc, #132]	; (8002908 <HAL_RCC_OscConfig+0x508>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002888:	2b00      	cmp	r3, #0
 800288a:	d118      	bne.n	80028be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800288c:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <HAL_RCC_OscConfig+0x508>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a1d      	ldr	r2, [pc, #116]	; (8002908 <HAL_RCC_OscConfig+0x508>)
 8002892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002896:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002898:	f7fe fdc4 	bl	8001424 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a0:	f7fe fdc0 	bl	8001424 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e17a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b2:	4b15      	ldr	r3, [pc, #84]	; (8002908 <HAL_RCC_OscConfig+0x508>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d108      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4d8>
 80028c6:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028cc:	4a0d      	ldr	r2, [pc, #52]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028d6:	e029      	b.n	800292c <HAL_RCC_OscConfig+0x52c>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d115      	bne.n	800290c <HAL_RCC_OscConfig+0x50c>
 80028e0:	4b08      	ldr	r3, [pc, #32]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80028e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e6:	4a07      	ldr	r2, [pc, #28]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028f0:	4b04      	ldr	r3, [pc, #16]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80028f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028f6:	4a03      	ldr	r2, [pc, #12]	; (8002904 <HAL_RCC_OscConfig+0x504>)
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002900:	e014      	b.n	800292c <HAL_RCC_OscConfig+0x52c>
 8002902:	bf00      	nop
 8002904:	40021000 	.word	0x40021000
 8002908:	40007000 	.word	0x40007000
 800290c:	4b9c      	ldr	r3, [pc, #624]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002912:	4a9b      	ldr	r2, [pc, #620]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002914:	f023 0301 	bic.w	r3, r3, #1
 8002918:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800291c:	4b98      	ldr	r3, [pc, #608]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002922:	4a97      	ldr	r2, [pc, #604]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002924:	f023 0304 	bic.w	r3, r3, #4
 8002928:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d016      	beq.n	8002962 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002934:	f7fe fd76 	bl	8001424 <HAL_GetTick>
 8002938:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800293a:	e00a      	b.n	8002952 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800293c:	f7fe fd72 	bl	8001424 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e12a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002952:	4b8b      	ldr	r3, [pc, #556]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0ed      	beq.n	800293c <HAL_RCC_OscConfig+0x53c>
 8002960:	e015      	b.n	800298e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002962:	f7fe fd5f 	bl	8001424 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002968:	e00a      	b.n	8002980 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296a:	f7fe fd5b 	bl	8001424 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	f241 3288 	movw	r2, #5000	; 0x1388
 8002978:	4293      	cmp	r3, r2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e113      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002980:	4b7f      	ldr	r3, [pc, #508]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002982:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1ed      	bne.n	800296a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800298e:	7ffb      	ldrb	r3, [r7, #31]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d105      	bne.n	80029a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002994:	4b7a      	ldr	r3, [pc, #488]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	4a79      	ldr	r2, [pc, #484]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 800299a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800299e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 80fe 	beq.w	8002ba6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	f040 80d0 	bne.w	8002b54 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029b4:	4b72      	ldr	r3, [pc, #456]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	f003 0203 	and.w	r2, r3, #3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d130      	bne.n	8002a2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d2:	3b01      	subs	r3, #1
 80029d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d127      	bne.n	8002a2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d11f      	bne.n	8002a2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029f4:	2a07      	cmp	r2, #7
 80029f6:	bf14      	ite	ne
 80029f8:	2201      	movne	r2, #1
 80029fa:	2200      	moveq	r2, #0
 80029fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d113      	bne.n	8002a2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0c:	085b      	lsrs	r3, r3, #1
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d109      	bne.n	8002a2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	3b01      	subs	r3, #1
 8002a24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d06e      	beq.n	8002b08 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2b0c      	cmp	r3, #12
 8002a2e:	d069      	beq.n	8002b04 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a30:	4b53      	ldr	r3, [pc, #332]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d105      	bne.n	8002a48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a3c:	4b50      	ldr	r3, [pc, #320]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e0ad      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a4c:	4b4c      	ldr	r3, [pc, #304]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a4b      	ldr	r2, [pc, #300]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a58:	f7fe fce4 	bl	8001424 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe fce0 	bl	8001424 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e09a      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a72:	4b43      	ldr	r3, [pc, #268]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1f0      	bne.n	8002a60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a7e:	4b40      	ldr	r3, [pc, #256]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	4b40      	ldr	r3, [pc, #256]	; (8002b84 <HAL_RCC_OscConfig+0x784>)
 8002a84:	4013      	ands	r3, r2
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a8e:	3a01      	subs	r2, #1
 8002a90:	0112      	lsls	r2, r2, #4
 8002a92:	4311      	orrs	r1, r2
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a98:	0212      	lsls	r2, r2, #8
 8002a9a:	4311      	orrs	r1, r2
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002aa0:	0852      	lsrs	r2, r2, #1
 8002aa2:	3a01      	subs	r2, #1
 8002aa4:	0552      	lsls	r2, r2, #21
 8002aa6:	4311      	orrs	r1, r2
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002aac:	0852      	lsrs	r2, r2, #1
 8002aae:	3a01      	subs	r2, #1
 8002ab0:	0652      	lsls	r2, r2, #25
 8002ab2:	4311      	orrs	r1, r2
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ab8:	0912      	lsrs	r2, r2, #4
 8002aba:	0452      	lsls	r2, r2, #17
 8002abc:	430a      	orrs	r2, r1
 8002abe:	4930      	ldr	r1, [pc, #192]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ac4:	4b2e      	ldr	r3, [pc, #184]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a2d      	ldr	r2, [pc, #180]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ace:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ad0:	4b2b      	ldr	r3, [pc, #172]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4a2a      	ldr	r2, [pc, #168]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ada:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002adc:	f7fe fca2 	bl	8001424 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe fc9e 	bl	8001424 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e058      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af6:	4b22      	ldr	r3, [pc, #136]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b02:	e050      	b.n	8002ba6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e04f      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b08:	4b1d      	ldr	r3, [pc, #116]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d148      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b14:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a19      	ldr	r2, [pc, #100]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002b1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b1e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b20:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002b26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b2a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b2c:	f7fe fc7a 	bl	8001424 <HAL_GetTick>
 8002b30:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b32:	e008      	b.n	8002b46 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b34:	f7fe fc76 	bl	8001424 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e030      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b46:	4b0e      	ldr	r3, [pc, #56]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f0      	beq.n	8002b34 <HAL_RCC_OscConfig+0x734>
 8002b52:	e028      	b.n	8002ba6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b0c      	cmp	r3, #12
 8002b58:	d023      	beq.n	8002ba2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5a:	4b09      	ldr	r3, [pc, #36]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a08      	ldr	r2, [pc, #32]	; (8002b80 <HAL_RCC_OscConfig+0x780>)
 8002b60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b66:	f7fe fc5d 	bl	8001424 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b6c:	e00c      	b.n	8002b88 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6e:	f7fe fc59 	bl	8001424 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d905      	bls.n	8002b88 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e013      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
 8002b80:	40021000 	.word	0x40021000
 8002b84:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b88:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <HAL_RCC_OscConfig+0x7b0>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d1ec      	bne.n	8002b6e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b94:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_RCC_OscConfig+0x7b0>)
 8002b96:	68da      	ldr	r2, [r3, #12]
 8002b98:	4905      	ldr	r1, [pc, #20]	; (8002bb0 <HAL_RCC_OscConfig+0x7b0>)
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_RCC_OscConfig+0x7b4>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60cb      	str	r3, [r1, #12]
 8002ba0:	e001      	b.n	8002ba6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3720      	adds	r7, #32
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	feeefffc 	.word	0xfeeefffc

08002bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0e7      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bcc:	4b75      	ldr	r3, [pc, #468]	; (8002da4 <HAL_RCC_ClockConfig+0x1ec>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0307 	and.w	r3, r3, #7
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d910      	bls.n	8002bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bda:	4b72      	ldr	r3, [pc, #456]	; (8002da4 <HAL_RCC_ClockConfig+0x1ec>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f023 0207 	bic.w	r2, r3, #7
 8002be2:	4970      	ldr	r1, [pc, #448]	; (8002da4 <HAL_RCC_ClockConfig+0x1ec>)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bea:	4b6e      	ldr	r3, [pc, #440]	; (8002da4 <HAL_RCC_ClockConfig+0x1ec>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d001      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e0cf      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0302 	and.w	r3, r3, #2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d010      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689a      	ldr	r2, [r3, #8]
 8002c0c:	4b66      	ldr	r3, [pc, #408]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d908      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c18:	4b63      	ldr	r3, [pc, #396]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4960      	ldr	r1, [pc, #384]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d04c      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2b03      	cmp	r3, #3
 8002c3c:	d107      	bne.n	8002c4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c3e:	4b5a      	ldr	r3, [pc, #360]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d121      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0a6      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c56:	4b54      	ldr	r3, [pc, #336]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d115      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e09a      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c6e:	4b4e      	ldr	r3, [pc, #312]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0302 	and.w	r3, r3, #2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d109      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e08e      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c7e:	4b4a      	ldr	r3, [pc, #296]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e086      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c8e:	4b46      	ldr	r3, [pc, #280]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f023 0203 	bic.w	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	4943      	ldr	r1, [pc, #268]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca0:	f7fe fbc0 	bl	8001424 <HAL_GetTick>
 8002ca4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca8:	f7fe fbbc 	bl	8001424 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e06e      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cbe:	4b3a      	ldr	r3, [pc, #232]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	f003 020c 	and.w	r2, r3, #12
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d1eb      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d010      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	4b31      	ldr	r3, [pc, #196]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d208      	bcs.n	8002cfe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cec:	4b2e      	ldr	r3, [pc, #184]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	492b      	ldr	r1, [pc, #172]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cfe:	4b29      	ldr	r3, [pc, #164]	; (8002da4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d210      	bcs.n	8002d2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0c:	4b25      	ldr	r3, [pc, #148]	; (8002da4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f023 0207 	bic.w	r2, r3, #7
 8002d14:	4923      	ldr	r1, [pc, #140]	; (8002da4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1c:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <HAL_RCC_ClockConfig+0x1ec>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0307 	and.w	r3, r3, #7
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d001      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e036      	b.n	8002d9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d008      	beq.n	8002d4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d3a:	4b1b      	ldr	r3, [pc, #108]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	4918      	ldr	r1, [pc, #96]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d009      	beq.n	8002d6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d58:	4b13      	ldr	r3, [pc, #76]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	00db      	lsls	r3, r3, #3
 8002d66:	4910      	ldr	r1, [pc, #64]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d6c:	f000 f824 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8002d70:	4602      	mov	r2, r0
 8002d72:	4b0d      	ldr	r3, [pc, #52]	; (8002da8 <HAL_RCC_ClockConfig+0x1f0>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	091b      	lsrs	r3, r3, #4
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	490b      	ldr	r1, [pc, #44]	; (8002dac <HAL_RCC_ClockConfig+0x1f4>)
 8002d7e:	5ccb      	ldrb	r3, [r1, r3]
 8002d80:	f003 031f 	and.w	r3, r3, #31
 8002d84:	fa22 f303 	lsr.w	r3, r2, r3
 8002d88:	4a09      	ldr	r2, [pc, #36]	; (8002db0 <HAL_RCC_ClockConfig+0x1f8>)
 8002d8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d8c:	4b09      	ldr	r3, [pc, #36]	; (8002db4 <HAL_RCC_ClockConfig+0x1fc>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe faf7 	bl	8001384 <HAL_InitTick>
 8002d96:	4603      	mov	r3, r0
 8002d98:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d9a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40022000 	.word	0x40022000
 8002da8:	40021000 	.word	0x40021000
 8002dac:	080076b4 	.word	0x080076b4
 8002db0:	20000000 	.word	0x20000000
 8002db4:	20000004 	.word	0x20000004

08002db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61fb      	str	r3, [r7, #28]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dc6:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dd0:	4b3b      	ldr	r3, [pc, #236]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d005      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0x34>
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	2b0c      	cmp	r3, #12
 8002de4:	d121      	bne.n	8002e2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d11e      	bne.n	8002e2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002dec:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0308 	and.w	r3, r3, #8
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d107      	bne.n	8002e08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002df8:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dfe:	0a1b      	lsrs	r3, r3, #8
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	61fb      	str	r3, [r7, #28]
 8002e06:	e005      	b.n	8002e14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e08:	4b2d      	ldr	r3, [pc, #180]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e14:	4a2b      	ldr	r2, [pc, #172]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10d      	bne.n	8002e40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e28:	e00a      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d102      	bne.n	8002e36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e32:	61bb      	str	r3, [r7, #24]
 8002e34:	e004      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	2b08      	cmp	r3, #8
 8002e3a:	d101      	bne.n	8002e40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e3c:	4b23      	ldr	r3, [pc, #140]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8002e3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	2b0c      	cmp	r3, #12
 8002e44:	d134      	bne.n	8002eb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e46:	4b1e      	ldr	r3, [pc, #120]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0303 	and.w	r3, r3, #3
 8002e4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d003      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0xa6>
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	2b03      	cmp	r3, #3
 8002e5a:	d003      	beq.n	8002e64 <HAL_RCC_GetSysClockFreq+0xac>
 8002e5c:	e005      	b.n	8002e6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002e60:	617b      	str	r3, [r7, #20]
      break;
 8002e62:	e005      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e64:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x114>)
 8002e66:	617b      	str	r3, [r7, #20]
      break;
 8002e68:	e002      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	617b      	str	r3, [r7, #20]
      break;
 8002e6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e70:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	091b      	lsrs	r3, r3, #4
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e7e:	4b10      	ldr	r3, [pc, #64]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	fb03 f202 	mul.w	r2, r3, r2
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e96:	4b0a      	ldr	r3, [pc, #40]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	0e5b      	lsrs	r3, r3, #25
 8002e9c:	f003 0303 	and.w	r3, r3, #3
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002eb0:	69bb      	ldr	r3, [r7, #24]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3724      	adds	r7, #36	; 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40021000 	.word	0x40021000
 8002ec4:	080076cc 	.word	0x080076cc
 8002ec8:	00f42400 	.word	0x00f42400
 8002ecc:	007a1200 	.word	0x007a1200

08002ed0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed4:	4b03      	ldr	r3, [pc, #12]	; (8002ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20000000 	.word	0x20000000

08002ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002eec:	f7ff fff0 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	0a1b      	lsrs	r3, r3, #8
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4904      	ldr	r1, [pc, #16]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	080076c4 	.word	0x080076c4

08002f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f18:	f7ff ffda 	bl	8002ed0 <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	0adb      	lsrs	r3, r3, #11
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4904      	ldr	r1, [pc, #16]	; (8002f3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	080076c4 	.word	0x080076c4

08002f40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f48:	2300      	movs	r3, #0
 8002f4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f4c:	4b2a      	ldr	r3, [pc, #168]	; (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f58:	f7ff f922 	bl	80021a0 <HAL_PWREx_GetVoltageRange>
 8002f5c:	6178      	str	r0, [r7, #20]
 8002f5e:	e014      	b.n	8002f8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f60:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f64:	4a24      	ldr	r2, [pc, #144]	; (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8002f6c:	4b22      	ldr	r3, [pc, #136]	; (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f78:	f7ff f912 	bl	80021a0 <HAL_PWREx_GetVoltageRange>
 8002f7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f7e:	4b1e      	ldr	r3, [pc, #120]	; (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	4a1d      	ldr	r2, [pc, #116]	; (8002ff8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f90:	d10b      	bne.n	8002faa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b80      	cmp	r3, #128	; 0x80
 8002f96:	d919      	bls.n	8002fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2ba0      	cmp	r3, #160	; 0xa0
 8002f9c:	d902      	bls.n	8002fa4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	e013      	b.n	8002fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	613b      	str	r3, [r7, #16]
 8002fa8:	e010      	b.n	8002fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2b80      	cmp	r3, #128	; 0x80
 8002fae:	d902      	bls.n	8002fb6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	e00a      	b.n	8002fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b80      	cmp	r3, #128	; 0x80
 8002fba:	d102      	bne.n	8002fc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	613b      	str	r3, [r7, #16]
 8002fc0:	e004      	b.n	8002fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b70      	cmp	r3, #112	; 0x70
 8002fc6:	d101      	bne.n	8002fcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fc8:	2301      	movs	r3, #1
 8002fca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fcc:	4b0b      	ldr	r3, [pc, #44]	; (8002ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f023 0207 	bic.w	r2, r3, #7
 8002fd4:	4909      	ldr	r1, [pc, #36]	; (8002ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002fdc:	4b07      	ldr	r3, [pc, #28]	; (8002ffc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d001      	beq.n	8002fee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e000      	b.n	8002ff0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	40022000 	.word	0x40022000

08003000 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003008:	2300      	movs	r3, #0
 800300a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800300c:	2300      	movs	r3, #0
 800300e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003018:	2b00      	cmp	r3, #0
 800301a:	d041      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003020:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003024:	d02a      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003026:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800302a:	d824      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800302c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003030:	d008      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003032:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003036:	d81e      	bhi.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800303c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003040:	d010      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003042:	e018      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003044:	4b86      	ldr	r3, [pc, #536]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4a85      	ldr	r2, [pc, #532]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800304a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003050:	e015      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	3304      	adds	r3, #4
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f000 facb 	bl	80035f4 <RCCEx_PLLSAI1_Config>
 800305e:	4603      	mov	r3, r0
 8003060:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003062:	e00c      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3320      	adds	r3, #32
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fbb6 	bl	80037dc <RCCEx_PLLSAI2_Config>
 8003070:	4603      	mov	r3, r0
 8003072:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003074:	e003      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	74fb      	strb	r3, [r7, #19]
      break;
 800307a:	e000      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800307c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800307e:	7cfb      	ldrb	r3, [r7, #19]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10b      	bne.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003084:	4b76      	ldr	r3, [pc, #472]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003092:	4973      	ldr	r1, [pc, #460]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800309a:	e001      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800309c:	7cfb      	ldrb	r3, [r7, #19]
 800309e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d041      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030b0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030b4:	d02a      	beq.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030b6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030ba:	d824      	bhi.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030c0:	d008      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030c6:	d81e      	bhi.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030d0:	d010      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030d2:	e018      	b.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030d4:	4b62      	ldr	r3, [pc, #392]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4a61      	ldr	r2, [pc, #388]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030de:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030e0:	e015      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3304      	adds	r3, #4
 80030e6:	2100      	movs	r1, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fa83 	bl	80035f4 <RCCEx_PLLSAI1_Config>
 80030ee:	4603      	mov	r3, r0
 80030f0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030f2:	e00c      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3320      	adds	r3, #32
 80030f8:	2100      	movs	r1, #0
 80030fa:	4618      	mov	r0, r3
 80030fc:	f000 fb6e 	bl	80037dc <RCCEx_PLLSAI2_Config>
 8003100:	4603      	mov	r3, r0
 8003102:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003104:	e003      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	74fb      	strb	r3, [r7, #19]
      break;
 800310a:	e000      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800310c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800310e:	7cfb      	ldrb	r3, [r7, #19]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10b      	bne.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003114:	4b52      	ldr	r3, [pc, #328]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800311a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003122:	494f      	ldr	r1, [pc, #316]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800312a:	e001      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312c:	7cfb      	ldrb	r3, [r7, #19]
 800312e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80a0 	beq.w	800327e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800313e:	2300      	movs	r3, #0
 8003140:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003142:	4b47      	ldr	r3, [pc, #284]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003152:	2300      	movs	r3, #0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00d      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003158:	4b41      	ldr	r3, [pc, #260]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315c:	4a40      	ldr	r2, [pc, #256]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003162:	6593      	str	r3, [r2, #88]	; 0x58
 8003164:	4b3e      	ldr	r3, [pc, #248]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003170:	2301      	movs	r3, #1
 8003172:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003174:	4b3b      	ldr	r3, [pc, #236]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a3a      	ldr	r2, [pc, #232]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800317a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003180:	f7fe f950 	bl	8001424 <HAL_GetTick>
 8003184:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003186:	e009      	b.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003188:	f7fe f94c 	bl	8001424 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d902      	bls.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	74fb      	strb	r3, [r7, #19]
        break;
 800319a:	e005      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800319c:	4b31      	ldr	r3, [pc, #196]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d0ef      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031a8:	7cfb      	ldrb	r3, [r7, #19]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d15c      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031ae:	4b2c      	ldr	r3, [pc, #176]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d01f      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d019      	beq.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031cc:	4b24      	ldr	r3, [pc, #144]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031d8:	4b21      	ldr	r3, [pc, #132]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031de:	4a20      	ldr	r2, [pc, #128]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ee:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80031f8:	4a19      	ldr	r2, [pc, #100]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d016      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320a:	f7fe f90b 	bl	8001424 <HAL_GetTick>
 800320e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003210:	e00b      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003212:	f7fe f907 	bl	8001424 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003220:	4293      	cmp	r3, r2
 8003222:	d902      	bls.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	74fb      	strb	r3, [r7, #19]
            break;
 8003228:	e006      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800322a:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d0ec      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003238:	7cfb      	ldrb	r3, [r7, #19]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10c      	bne.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800323e:	4b08      	ldr	r3, [pc, #32]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003244:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800324e:	4904      	ldr	r1, [pc, #16]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003256:	e009      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003258:	7cfb      	ldrb	r3, [r7, #19]
 800325a:	74bb      	strb	r3, [r7, #18]
 800325c:	e006      	b.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000
 8003264:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003268:	7cfb      	ldrb	r3, [r7, #19]
 800326a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800326c:	7c7b      	ldrb	r3, [r7, #17]
 800326e:	2b01      	cmp	r3, #1
 8003270:	d105      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003272:	4b9e      	ldr	r3, [pc, #632]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	4a9d      	ldr	r2, [pc, #628]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003278:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800327c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0301 	and.w	r3, r3, #1
 8003286:	2b00      	cmp	r3, #0
 8003288:	d00a      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800328a:	4b98      	ldr	r3, [pc, #608]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003290:	f023 0203 	bic.w	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003298:	4994      	ldr	r1, [pc, #592]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032ac:	4b8f      	ldr	r3, [pc, #572]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b2:	f023 020c 	bic.w	r2, r3, #12
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ba:	498c      	ldr	r1, [pc, #560]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0304 	and.w	r3, r3, #4
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032ce:	4b87      	ldr	r3, [pc, #540]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	4983      	ldr	r1, [pc, #524]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80032f0:	4b7e      	ldr	r3, [pc, #504]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	497b      	ldr	r1, [pc, #492]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0310 	and.w	r3, r3, #16
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003312:	4b76      	ldr	r3, [pc, #472]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003318:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003320:	4972      	ldr	r1, [pc, #456]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0320 	and.w	r3, r3, #32
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003334:	4b6d      	ldr	r3, [pc, #436]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003342:	496a      	ldr	r1, [pc, #424]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003356:	4b65      	ldr	r3, [pc, #404]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	4961      	ldr	r1, [pc, #388]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003378:	4b5c      	ldr	r3, [pc, #368]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003386:	4959      	ldr	r1, [pc, #356]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800339a:	4b54      	ldr	r3, [pc, #336]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033a8:	4950      	ldr	r1, [pc, #320]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033bc:	4b4b      	ldr	r3, [pc, #300]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ca:	4948      	ldr	r1, [pc, #288]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033de:	4b43      	ldr	r3, [pc, #268]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ec:	493f      	ldr	r1, [pc, #252]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d028      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003400:	4b3a      	ldr	r3, [pc, #232]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800340e:	4937      	ldr	r1, [pc, #220]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800341a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800341e:	d106      	bne.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003420:	4b32      	ldr	r3, [pc, #200]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4a31      	ldr	r2, [pc, #196]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003426:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800342a:	60d3      	str	r3, [r2, #12]
 800342c:	e011      	b.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003432:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003436:	d10c      	bne.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	3304      	adds	r3, #4
 800343c:	2101      	movs	r1, #1
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f8d8 	bl	80035f4 <RCCEx_PLLSAI1_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003448:	7cfb      	ldrb	r3, [r7, #19]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800344e:	7cfb      	ldrb	r3, [r7, #19]
 8003450:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d028      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800345e:	4b23      	ldr	r3, [pc, #140]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003464:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346c:	491f      	ldr	r1, [pc, #124]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003478:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800347c:	d106      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800347e:	4b1b      	ldr	r3, [pc, #108]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	4a1a      	ldr	r2, [pc, #104]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003484:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003488:	60d3      	str	r3, [r2, #12]
 800348a:	e011      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003490:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003494:	d10c      	bne.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	3304      	adds	r3, #4
 800349a:	2101      	movs	r1, #1
 800349c:	4618      	mov	r0, r3
 800349e:	f000 f8a9 	bl	80035f4 <RCCEx_PLLSAI1_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d02b      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034bc:	4b0b      	ldr	r3, [pc, #44]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ca:	4908      	ldr	r1, [pc, #32]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034da:	d109      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	4a02      	ldr	r2, [pc, #8]	; (80034ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034e6:	60d3      	str	r3, [r2, #12]
 80034e8:	e014      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034f8:	d10c      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3304      	adds	r3, #4
 80034fe:	2101      	movs	r1, #1
 8003500:	4618      	mov	r0, r3
 8003502:	f000 f877 	bl	80035f4 <RCCEx_PLLSAI1_Config>
 8003506:	4603      	mov	r3, r0
 8003508:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800350a:	7cfb      	ldrb	r3, [r7, #19]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d02f      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003520:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800352e:	4928      	ldr	r1, [pc, #160]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800353a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800353e:	d10d      	bne.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3304      	adds	r3, #4
 8003544:	2102      	movs	r1, #2
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f854 	bl	80035f4 <RCCEx_PLLSAI1_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003550:	7cfb      	ldrb	r3, [r7, #19]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d014      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003556:	7cfb      	ldrb	r3, [r7, #19]
 8003558:	74bb      	strb	r3, [r7, #18]
 800355a:	e011      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003564:	d10c      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3320      	adds	r3, #32
 800356a:	2102      	movs	r1, #2
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f935 	bl	80037dc <RCCEx_PLLSAI2_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003576:	7cfb      	ldrb	r3, [r7, #19]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800357c:	7cfb      	ldrb	r3, [r7, #19]
 800357e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00a      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800358c:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800359a:	490d      	ldr	r1, [pc, #52]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035ae:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035be:	4904      	ldr	r1, [pc, #16]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40021000 	.word	0x40021000

080035d4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80035d8:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a04      	ldr	r2, [pc, #16]	; (80035f0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80035de:	f043 0304 	orr.w	r3, r3, #4
 80035e2:	6013      	str	r3, [r2, #0]
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000

080035f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003602:	4b75      	ldr	r3, [pc, #468]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d018      	beq.n	8003640 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800360e:	4b72      	ldr	r3, [pc, #456]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0203 	and.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d10d      	bne.n	800363a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
       ||
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003626:	4b6c      	ldr	r3, [pc, #432]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	091b      	lsrs	r3, r3, #4
 800362c:	f003 0307 	and.w	r3, r3, #7
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
       ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d047      	beq.n	80036ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	73fb      	strb	r3, [r7, #15]
 800363e:	e044      	b.n	80036ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b03      	cmp	r3, #3
 8003646:	d018      	beq.n	800367a <RCCEx_PLLSAI1_Config+0x86>
 8003648:	2b03      	cmp	r3, #3
 800364a:	d825      	bhi.n	8003698 <RCCEx_PLLSAI1_Config+0xa4>
 800364c:	2b01      	cmp	r3, #1
 800364e:	d002      	beq.n	8003656 <RCCEx_PLLSAI1_Config+0x62>
 8003650:	2b02      	cmp	r3, #2
 8003652:	d009      	beq.n	8003668 <RCCEx_PLLSAI1_Config+0x74>
 8003654:	e020      	b.n	8003698 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003656:	4b60      	ldr	r3, [pc, #384]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d11d      	bne.n	800369e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003666:	e01a      	b.n	800369e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003668:	4b5b      	ldr	r3, [pc, #364]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003670:	2b00      	cmp	r3, #0
 8003672:	d116      	bne.n	80036a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003678:	e013      	b.n	80036a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800367a:	4b57      	ldr	r3, [pc, #348]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d10f      	bne.n	80036a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003686:	4b54      	ldr	r3, [pc, #336]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d109      	bne.n	80036a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003696:	e006      	b.n	80036a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	73fb      	strb	r3, [r7, #15]
      break;
 800369c:	e004      	b.n	80036a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800369e:	bf00      	nop
 80036a0:	e002      	b.n	80036a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036a2:	bf00      	nop
 80036a4:	e000      	b.n	80036a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80036a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10d      	bne.n	80036ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036ae:	4b4a      	ldr	r3, [pc, #296]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6819      	ldr	r1, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	3b01      	subs	r3, #1
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	430b      	orrs	r3, r1
 80036c4:	4944      	ldr	r1, [pc, #272]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036ca:	7bfb      	ldrb	r3, [r7, #15]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d17d      	bne.n	80037cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036d0:	4b41      	ldr	r3, [pc, #260]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a40      	ldr	r2, [pc, #256]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036dc:	f7fd fea2 	bl	8001424 <HAL_GetTick>
 80036e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036e2:	e009      	b.n	80036f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036e4:	f7fd fe9e 	bl	8001424 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d902      	bls.n	80036f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	73fb      	strb	r3, [r7, #15]
        break;
 80036f6:	e005      	b.n	8003704 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036f8:	4b37      	ldr	r3, [pc, #220]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1ef      	bne.n	80036e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003704:	7bfb      	ldrb	r3, [r7, #15]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d160      	bne.n	80037cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d111      	bne.n	8003734 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003710:	4b31      	ldr	r3, [pc, #196]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6892      	ldr	r2, [r2, #8]
 8003720:	0211      	lsls	r1, r2, #8
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	68d2      	ldr	r2, [r2, #12]
 8003726:	0912      	lsrs	r2, r2, #4
 8003728:	0452      	lsls	r2, r2, #17
 800372a:	430a      	orrs	r2, r1
 800372c:	492a      	ldr	r1, [pc, #168]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372e:	4313      	orrs	r3, r2
 8003730:	610b      	str	r3, [r1, #16]
 8003732:	e027      	b.n	8003784 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d112      	bne.n	8003760 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800373a:	4b27      	ldr	r3, [pc, #156]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003742:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6892      	ldr	r2, [r2, #8]
 800374a:	0211      	lsls	r1, r2, #8
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6912      	ldr	r2, [r2, #16]
 8003750:	0852      	lsrs	r2, r2, #1
 8003752:	3a01      	subs	r2, #1
 8003754:	0552      	lsls	r2, r2, #21
 8003756:	430a      	orrs	r2, r1
 8003758:	491f      	ldr	r1, [pc, #124]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375a:	4313      	orrs	r3, r2
 800375c:	610b      	str	r3, [r1, #16]
 800375e:	e011      	b.n	8003784 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003760:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003768:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	6892      	ldr	r2, [r2, #8]
 8003770:	0211      	lsls	r1, r2, #8
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6952      	ldr	r2, [r2, #20]
 8003776:	0852      	lsrs	r2, r2, #1
 8003778:	3a01      	subs	r2, #1
 800377a:	0652      	lsls	r2, r2, #25
 800377c:	430a      	orrs	r2, r1
 800377e:	4916      	ldr	r1, [pc, #88]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003780:	4313      	orrs	r3, r2
 8003782:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003784:	4b14      	ldr	r3, [pc, #80]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800378e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7fd fe48 	bl	8001424 <HAL_GetTick>
 8003794:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003796:	e009      	b.n	80037ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003798:	f7fd fe44 	bl	8001424 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d902      	bls.n	80037ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	73fb      	strb	r3, [r7, #15]
          break;
 80037aa:	e005      	b.n	80037b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037ac:	4b0a      	ldr	r3, [pc, #40]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ef      	beq.n	8003798 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d106      	bne.n	80037cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037be:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	4904      	ldr	r1, [pc, #16]	; (80037d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	40021000 	.word	0x40021000

080037dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
 80037e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037ea:	4b6a      	ldr	r3, [pc, #424]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0303 	and.w	r3, r3, #3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d018      	beq.n	8003828 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037f6:	4b67      	ldr	r3, [pc, #412]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f003 0203 	and.w	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d10d      	bne.n	8003822 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
       ||
 800380a:	2b00      	cmp	r3, #0
 800380c:	d009      	beq.n	8003822 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800380e:	4b61      	ldr	r3, [pc, #388]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	091b      	lsrs	r3, r3, #4
 8003814:	f003 0307 	and.w	r3, r3, #7
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
       ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d047      	beq.n	80038b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
 8003826:	e044      	b.n	80038b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b03      	cmp	r3, #3
 800382e:	d018      	beq.n	8003862 <RCCEx_PLLSAI2_Config+0x86>
 8003830:	2b03      	cmp	r3, #3
 8003832:	d825      	bhi.n	8003880 <RCCEx_PLLSAI2_Config+0xa4>
 8003834:	2b01      	cmp	r3, #1
 8003836:	d002      	beq.n	800383e <RCCEx_PLLSAI2_Config+0x62>
 8003838:	2b02      	cmp	r3, #2
 800383a:	d009      	beq.n	8003850 <RCCEx_PLLSAI2_Config+0x74>
 800383c:	e020      	b.n	8003880 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800383e:	4b55      	ldr	r3, [pc, #340]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d11d      	bne.n	8003886 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800384e:	e01a      	b.n	8003886 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003850:	4b50      	ldr	r3, [pc, #320]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003858:	2b00      	cmp	r3, #0
 800385a:	d116      	bne.n	800388a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003860:	e013      	b.n	800388a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003862:	4b4c      	ldr	r3, [pc, #304]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10f      	bne.n	800388e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800386e:	4b49      	ldr	r3, [pc, #292]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800387e:	e006      	b.n	800388e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	73fb      	strb	r3, [r7, #15]
      break;
 8003884:	e004      	b.n	8003890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003886:	bf00      	nop
 8003888:	e002      	b.n	8003890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800388a:	bf00      	nop
 800388c:	e000      	b.n	8003890 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800388e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10d      	bne.n	80038b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003896:	4b3f      	ldr	r3, [pc, #252]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6819      	ldr	r1, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	3b01      	subs	r3, #1
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	430b      	orrs	r3, r1
 80038ac:	4939      	ldr	r1, [pc, #228]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038b2:	7bfb      	ldrb	r3, [r7, #15]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d167      	bne.n	8003988 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038b8:	4b36      	ldr	r3, [pc, #216]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a35      	ldr	r2, [pc, #212]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c4:	f7fd fdae 	bl	8001424 <HAL_GetTick>
 80038c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038ca:	e009      	b.n	80038e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038cc:	f7fd fdaa 	bl	8001424 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d902      	bls.n	80038e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	73fb      	strb	r3, [r7, #15]
        break;
 80038de:	e005      	b.n	80038ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038e0:	4b2c      	ldr	r3, [pc, #176]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1ef      	bne.n	80038cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d14a      	bne.n	8003988 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d111      	bne.n	800391c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038f8:	4b26      	ldr	r3, [pc, #152]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003900:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6892      	ldr	r2, [r2, #8]
 8003908:	0211      	lsls	r1, r2, #8
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68d2      	ldr	r2, [r2, #12]
 800390e:	0912      	lsrs	r2, r2, #4
 8003910:	0452      	lsls	r2, r2, #17
 8003912:	430a      	orrs	r2, r1
 8003914:	491f      	ldr	r1, [pc, #124]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003916:	4313      	orrs	r3, r2
 8003918:	614b      	str	r3, [r1, #20]
 800391a:	e011      	b.n	8003940 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800391e:	695b      	ldr	r3, [r3, #20]
 8003920:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003924:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6892      	ldr	r2, [r2, #8]
 800392c:	0211      	lsls	r1, r2, #8
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6912      	ldr	r2, [r2, #16]
 8003932:	0852      	lsrs	r2, r2, #1
 8003934:	3a01      	subs	r2, #1
 8003936:	0652      	lsls	r2, r2, #25
 8003938:	430a      	orrs	r2, r1
 800393a:	4916      	ldr	r1, [pc, #88]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393c:	4313      	orrs	r3, r2
 800393e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003940:	4b14      	ldr	r3, [pc, #80]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a13      	ldr	r2, [pc, #76]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800394a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fd fd6a 	bl	8001424 <HAL_GetTick>
 8003950:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003952:	e009      	b.n	8003968 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003954:	f7fd fd66 	bl	8001424 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d902      	bls.n	8003968 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	73fb      	strb	r3, [r7, #15]
          break;
 8003966:	e005      	b.n	8003974 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ef      	beq.n	8003954 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	4904      	ldr	r1, [pc, #16]	; (8003994 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003984:	4313      	orrs	r3, r2
 8003986:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40021000 	.word	0x40021000

08003998 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d101      	bne.n	80039aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e095      	b.n	8003ad6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d108      	bne.n	80039c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039ba:	d009      	beq.n	80039d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	61da      	str	r2, [r3, #28]
 80039c2:	e005      	b.n	80039d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd faa6 	bl	8000f3c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2202      	movs	r2, #2
 80039f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a06:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a10:	d902      	bls.n	8003a18 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60fb      	str	r3, [r7, #12]
 8003a16:	e002      	b.n	8003a1e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a1c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a26:	d007      	beq.n	8003a38 <HAL_SPI_Init+0xa0>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a30:	d002      	beq.n	8003a38 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	431a      	orrs	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a70:	431a      	orrs	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a7a:	ea42 0103 	orr.w	r1, r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a82:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	430a      	orrs	r2, r1
 8003a8c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	0c1b      	lsrs	r3, r3, #16
 8003a94:	f003 0204 	and.w	r2, r3, #4
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	f003 0310 	and.w	r3, r3, #16
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	431a      	orrs	r2, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ab4:	ea42 0103 	orr.w	r1, r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e040      	b.n	8003b72 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d106      	bne.n	8003b06 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f7fd fa5f 	bl	8000fc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2224      	movs	r2, #36	; 0x24
 8003b0a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d002      	beq.n	8003b2a <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fae1 	bl	80040ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f826 	bl	8003b7c <UART_SetConfig>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e01b      	b.n	8003b72 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685a      	ldr	r2, [r3, #4]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b48:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b58:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f042 0201 	orr.w	r2, r2, #1
 8003b68:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fb60 	bl	8004230 <UART_CheckIdleState>
 8003b70:	4603      	mov	r3, r0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3708      	adds	r7, #8
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
	...

08003b7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b80:	b08a      	sub	sp, #40	; 0x28
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4ba4      	ldr	r3, [pc, #656]	; (8003e3c <UART_SetConfig+0x2c0>)
 8003bac:	4013      	ands	r3, r2
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	6812      	ldr	r2, [r2, #0]
 8003bb2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	68da      	ldr	r2, [r3, #12]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a99      	ldr	r2, [pc, #612]	; (8003e40 <UART_SetConfig+0x2c4>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d004      	beq.n	8003be8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be4:	4313      	orrs	r3, r2
 8003be6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a90      	ldr	r2, [pc, #576]	; (8003e44 <UART_SetConfig+0x2c8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d126      	bne.n	8003c54 <UART_SetConfig+0xd8>
 8003c06:	4b90      	ldr	r3, [pc, #576]	; (8003e48 <UART_SetConfig+0x2cc>)
 8003c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c0c:	f003 0303 	and.w	r3, r3, #3
 8003c10:	2b03      	cmp	r3, #3
 8003c12:	d81b      	bhi.n	8003c4c <UART_SetConfig+0xd0>
 8003c14:	a201      	add	r2, pc, #4	; (adr r2, 8003c1c <UART_SetConfig+0xa0>)
 8003c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1a:	bf00      	nop
 8003c1c:	08003c2d 	.word	0x08003c2d
 8003c20:	08003c3d 	.word	0x08003c3d
 8003c24:	08003c35 	.word	0x08003c35
 8003c28:	08003c45 	.word	0x08003c45
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c32:	e116      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003c34:	2302      	movs	r3, #2
 8003c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3a:	e112      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003c3c:	2304      	movs	r3, #4
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c42:	e10e      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003c44:	2308      	movs	r3, #8
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4a:	e10a      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003c4c:	2310      	movs	r3, #16
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c52:	e106      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a7c      	ldr	r2, [pc, #496]	; (8003e4c <UART_SetConfig+0x2d0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d138      	bne.n	8003cd0 <UART_SetConfig+0x154>
 8003c5e:	4b7a      	ldr	r3, [pc, #488]	; (8003e48 <UART_SetConfig+0x2cc>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	f003 030c 	and.w	r3, r3, #12
 8003c68:	2b0c      	cmp	r3, #12
 8003c6a:	d82d      	bhi.n	8003cc8 <UART_SetConfig+0x14c>
 8003c6c:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <UART_SetConfig+0xf8>)
 8003c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c72:	bf00      	nop
 8003c74:	08003ca9 	.word	0x08003ca9
 8003c78:	08003cc9 	.word	0x08003cc9
 8003c7c:	08003cc9 	.word	0x08003cc9
 8003c80:	08003cc9 	.word	0x08003cc9
 8003c84:	08003cb9 	.word	0x08003cb9
 8003c88:	08003cc9 	.word	0x08003cc9
 8003c8c:	08003cc9 	.word	0x08003cc9
 8003c90:	08003cc9 	.word	0x08003cc9
 8003c94:	08003cb1 	.word	0x08003cb1
 8003c98:	08003cc9 	.word	0x08003cc9
 8003c9c:	08003cc9 	.word	0x08003cc9
 8003ca0:	08003cc9 	.word	0x08003cc9
 8003ca4:	08003cc1 	.word	0x08003cc1
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cae:	e0d8      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cb6:	e0d4      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003cb8:	2304      	movs	r3, #4
 8003cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cbe:	e0d0      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003cc0:	2308      	movs	r3, #8
 8003cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc6:	e0cc      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003cc8:	2310      	movs	r3, #16
 8003cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cce:	e0c8      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a5e      	ldr	r2, [pc, #376]	; (8003e50 <UART_SetConfig+0x2d4>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d125      	bne.n	8003d26 <UART_SetConfig+0x1aa>
 8003cda:	4b5b      	ldr	r3, [pc, #364]	; (8003e48 <UART_SetConfig+0x2cc>)
 8003cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ce0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ce4:	2b30      	cmp	r3, #48	; 0x30
 8003ce6:	d016      	beq.n	8003d16 <UART_SetConfig+0x19a>
 8003ce8:	2b30      	cmp	r3, #48	; 0x30
 8003cea:	d818      	bhi.n	8003d1e <UART_SetConfig+0x1a2>
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d00a      	beq.n	8003d06 <UART_SetConfig+0x18a>
 8003cf0:	2b20      	cmp	r3, #32
 8003cf2:	d814      	bhi.n	8003d1e <UART_SetConfig+0x1a2>
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d002      	beq.n	8003cfe <UART_SetConfig+0x182>
 8003cf8:	2b10      	cmp	r3, #16
 8003cfa:	d008      	beq.n	8003d0e <UART_SetConfig+0x192>
 8003cfc:	e00f      	b.n	8003d1e <UART_SetConfig+0x1a2>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d04:	e0ad      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003d06:	2302      	movs	r3, #2
 8003d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d0c:	e0a9      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003d0e:	2304      	movs	r3, #4
 8003d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d14:	e0a5      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003d16:	2308      	movs	r3, #8
 8003d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1c:	e0a1      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003d1e:	2310      	movs	r3, #16
 8003d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d24:	e09d      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a4a      	ldr	r2, [pc, #296]	; (8003e54 <UART_SetConfig+0x2d8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d125      	bne.n	8003d7c <UART_SetConfig+0x200>
 8003d30:	4b45      	ldr	r3, [pc, #276]	; (8003e48 <UART_SetConfig+0x2cc>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d3a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d3c:	d016      	beq.n	8003d6c <UART_SetConfig+0x1f0>
 8003d3e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d40:	d818      	bhi.n	8003d74 <UART_SetConfig+0x1f8>
 8003d42:	2b80      	cmp	r3, #128	; 0x80
 8003d44:	d00a      	beq.n	8003d5c <UART_SetConfig+0x1e0>
 8003d46:	2b80      	cmp	r3, #128	; 0x80
 8003d48:	d814      	bhi.n	8003d74 <UART_SetConfig+0x1f8>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d002      	beq.n	8003d54 <UART_SetConfig+0x1d8>
 8003d4e:	2b40      	cmp	r3, #64	; 0x40
 8003d50:	d008      	beq.n	8003d64 <UART_SetConfig+0x1e8>
 8003d52:	e00f      	b.n	8003d74 <UART_SetConfig+0x1f8>
 8003d54:	2300      	movs	r3, #0
 8003d56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5a:	e082      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003d5c:	2302      	movs	r3, #2
 8003d5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d62:	e07e      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003d64:	2304      	movs	r3, #4
 8003d66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6a:	e07a      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003d6c:	2308      	movs	r3, #8
 8003d6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d72:	e076      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003d74:	2310      	movs	r3, #16
 8003d76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7a:	e072      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a35      	ldr	r2, [pc, #212]	; (8003e58 <UART_SetConfig+0x2dc>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d12a      	bne.n	8003ddc <UART_SetConfig+0x260>
 8003d86:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <UART_SetConfig+0x2cc>)
 8003d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d94:	d01a      	beq.n	8003dcc <UART_SetConfig+0x250>
 8003d96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d9a:	d81b      	bhi.n	8003dd4 <UART_SetConfig+0x258>
 8003d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da0:	d00c      	beq.n	8003dbc <UART_SetConfig+0x240>
 8003da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da6:	d815      	bhi.n	8003dd4 <UART_SetConfig+0x258>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <UART_SetConfig+0x238>
 8003dac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003db0:	d008      	beq.n	8003dc4 <UART_SetConfig+0x248>
 8003db2:	e00f      	b.n	8003dd4 <UART_SetConfig+0x258>
 8003db4:	2300      	movs	r3, #0
 8003db6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dba:	e052      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc2:	e04e      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dca:	e04a      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003dcc:	2308      	movs	r3, #8
 8003dce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd2:	e046      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003dd4:	2310      	movs	r3, #16
 8003dd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dda:	e042      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a17      	ldr	r2, [pc, #92]	; (8003e40 <UART_SetConfig+0x2c4>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d13a      	bne.n	8003e5c <UART_SetConfig+0x2e0>
 8003de6:	4b18      	ldr	r3, [pc, #96]	; (8003e48 <UART_SetConfig+0x2cc>)
 8003de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003df0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003df4:	d01a      	beq.n	8003e2c <UART_SetConfig+0x2b0>
 8003df6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dfa:	d81b      	bhi.n	8003e34 <UART_SetConfig+0x2b8>
 8003dfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e00:	d00c      	beq.n	8003e1c <UART_SetConfig+0x2a0>
 8003e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e06:	d815      	bhi.n	8003e34 <UART_SetConfig+0x2b8>
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <UART_SetConfig+0x298>
 8003e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e10:	d008      	beq.n	8003e24 <UART_SetConfig+0x2a8>
 8003e12:	e00f      	b.n	8003e34 <UART_SetConfig+0x2b8>
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e1a:	e022      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003e1c:	2302      	movs	r3, #2
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e22:	e01e      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003e24:	2304      	movs	r3, #4
 8003e26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2a:	e01a      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003e2c:	2308      	movs	r3, #8
 8003e2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e32:	e016      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003e34:	2310      	movs	r3, #16
 8003e36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e3a:	e012      	b.n	8003e62 <UART_SetConfig+0x2e6>
 8003e3c:	efff69f3 	.word	0xefff69f3
 8003e40:	40008000 	.word	0x40008000
 8003e44:	40013800 	.word	0x40013800
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	40004400 	.word	0x40004400
 8003e50:	40004800 	.word	0x40004800
 8003e54:	40004c00 	.word	0x40004c00
 8003e58:	40005000 	.word	0x40005000
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a9f      	ldr	r2, [pc, #636]	; (80040e4 <UART_SetConfig+0x568>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d17a      	bne.n	8003f62 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d824      	bhi.n	8003ebe <UART_SetConfig+0x342>
 8003e74:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <UART_SetConfig+0x300>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003ea1 	.word	0x08003ea1
 8003e80:	08003ebf 	.word	0x08003ebf
 8003e84:	08003ea9 	.word	0x08003ea9
 8003e88:	08003ebf 	.word	0x08003ebf
 8003e8c:	08003eaf 	.word	0x08003eaf
 8003e90:	08003ebf 	.word	0x08003ebf
 8003e94:	08003ebf 	.word	0x08003ebf
 8003e98:	08003ebf 	.word	0x08003ebf
 8003e9c:	08003eb7 	.word	0x08003eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ea0:	f7ff f822 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8003ea4:	61f8      	str	r0, [r7, #28]
        break;
 8003ea6:	e010      	b.n	8003eca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea8:	4b8f      	ldr	r3, [pc, #572]	; (80040e8 <UART_SetConfig+0x56c>)
 8003eaa:	61fb      	str	r3, [r7, #28]
        break;
 8003eac:	e00d      	b.n	8003eca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eae:	f7fe ff83 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8003eb2:	61f8      	str	r0, [r7, #28]
        break;
 8003eb4:	e009      	b.n	8003eca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eba:	61fb      	str	r3, [r7, #28]
        break;
 8003ebc:	e005      	b.n	8003eca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ec8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 80fb 	beq.w	80040c8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	685a      	ldr	r2, [r3, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	005b      	lsls	r3, r3, #1
 8003eda:	4413      	add	r3, r2
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d305      	bcc.n	8003eee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ee8:	69fa      	ldr	r2, [r7, #28]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d903      	bls.n	8003ef6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ef4:	e0e8      	b.n	80040c8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	461c      	mov	r4, r3
 8003efc:	4615      	mov	r5, r2
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	022b      	lsls	r3, r5, #8
 8003f08:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f0c:	0222      	lsls	r2, r4, #8
 8003f0e:	68f9      	ldr	r1, [r7, #12]
 8003f10:	6849      	ldr	r1, [r1, #4]
 8003f12:	0849      	lsrs	r1, r1, #1
 8003f14:	2000      	movs	r0, #0
 8003f16:	4688      	mov	r8, r1
 8003f18:	4681      	mov	r9, r0
 8003f1a:	eb12 0a08 	adds.w	sl, r2, r8
 8003f1e:	eb43 0b09 	adc.w	fp, r3, r9
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	603b      	str	r3, [r7, #0]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f30:	4650      	mov	r0, sl
 8003f32:	4659      	mov	r1, fp
 8003f34:	f7fc f94c 	bl	80001d0 <__aeabi_uldivmod>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f46:	d308      	bcc.n	8003f5a <UART_SetConfig+0x3de>
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f4e:	d204      	bcs.n	8003f5a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	60da      	str	r2, [r3, #12]
 8003f58:	e0b6      	b.n	80040c8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f60:	e0b2      	b.n	80040c8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6a:	d15e      	bne.n	800402a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d828      	bhi.n	8003fc6 <UART_SetConfig+0x44a>
 8003f74:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <UART_SetConfig+0x400>)
 8003f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7a:	bf00      	nop
 8003f7c:	08003fa1 	.word	0x08003fa1
 8003f80:	08003fa9 	.word	0x08003fa9
 8003f84:	08003fb1 	.word	0x08003fb1
 8003f88:	08003fc7 	.word	0x08003fc7
 8003f8c:	08003fb7 	.word	0x08003fb7
 8003f90:	08003fc7 	.word	0x08003fc7
 8003f94:	08003fc7 	.word	0x08003fc7
 8003f98:	08003fc7 	.word	0x08003fc7
 8003f9c:	08003fbf 	.word	0x08003fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fa0:	f7fe ffa2 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8003fa4:	61f8      	str	r0, [r7, #28]
        break;
 8003fa6:	e014      	b.n	8003fd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fa8:	f7fe ffb4 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8003fac:	61f8      	str	r0, [r7, #28]
        break;
 8003fae:	e010      	b.n	8003fd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fb0:	4b4d      	ldr	r3, [pc, #308]	; (80040e8 <UART_SetConfig+0x56c>)
 8003fb2:	61fb      	str	r3, [r7, #28]
        break;
 8003fb4:	e00d      	b.n	8003fd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fb6:	f7fe feff 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8003fba:	61f8      	str	r0, [r7, #28]
        break;
 8003fbc:	e009      	b.n	8003fd2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc2:	61fb      	str	r3, [r7, #28]
        break;
 8003fc4:	e005      	b.n	8003fd2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003fd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d077      	beq.n	80040c8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	005a      	lsls	r2, r3, #1
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	085b      	lsrs	r3, r3, #1
 8003fe2:	441a      	add	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b0f      	cmp	r3, #15
 8003ff2:	d916      	bls.n	8004022 <UART_SetConfig+0x4a6>
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ffa:	d212      	bcs.n	8004022 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	f023 030f 	bic.w	r3, r3, #15
 8004004:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	085b      	lsrs	r3, r3, #1
 800400a:	b29b      	uxth	r3, r3
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	b29a      	uxth	r2, r3
 8004012:	8afb      	ldrh	r3, [r7, #22]
 8004014:	4313      	orrs	r3, r2
 8004016:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	8afa      	ldrh	r2, [r7, #22]
 800401e:	60da      	str	r2, [r3, #12]
 8004020:	e052      	b.n	80040c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004028:	e04e      	b.n	80040c8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800402a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800402e:	2b08      	cmp	r3, #8
 8004030:	d827      	bhi.n	8004082 <UART_SetConfig+0x506>
 8004032:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <UART_SetConfig+0x4bc>)
 8004034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004038:	0800405d 	.word	0x0800405d
 800403c:	08004065 	.word	0x08004065
 8004040:	0800406d 	.word	0x0800406d
 8004044:	08004083 	.word	0x08004083
 8004048:	08004073 	.word	0x08004073
 800404c:	08004083 	.word	0x08004083
 8004050:	08004083 	.word	0x08004083
 8004054:	08004083 	.word	0x08004083
 8004058:	0800407b 	.word	0x0800407b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800405c:	f7fe ff44 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8004060:	61f8      	str	r0, [r7, #28]
        break;
 8004062:	e014      	b.n	800408e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004064:	f7fe ff56 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8004068:	61f8      	str	r0, [r7, #28]
        break;
 800406a:	e010      	b.n	800408e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800406c:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <UART_SetConfig+0x56c>)
 800406e:	61fb      	str	r3, [r7, #28]
        break;
 8004070:	e00d      	b.n	800408e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004072:	f7fe fea1 	bl	8002db8 <HAL_RCC_GetSysClockFreq>
 8004076:	61f8      	str	r0, [r7, #28]
        break;
 8004078:	e009      	b.n	800408e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800407a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800407e:	61fb      	str	r3, [r7, #28]
        break;
 8004080:	e005      	b.n	800408e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004082:	2300      	movs	r3, #0
 8004084:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004086:	2301      	movs	r3, #1
 8004088:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800408c:	bf00      	nop
    }

    if (pclk != 0U)
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d019      	beq.n	80040c8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	085a      	lsrs	r2, r3, #1
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	441a      	add	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	2b0f      	cmp	r3, #15
 80040ac:	d909      	bls.n	80040c2 <UART_SetConfig+0x546>
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040b4:	d205      	bcs.n	80040c2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	60da      	str	r2, [r3, #12]
 80040c0:	e002      	b.n	80040c8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040d4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3728      	adds	r7, #40	; 0x28
 80040dc:	46bd      	mov	sp, r7
 80040de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040e2:	bf00      	nop
 80040e4:	40008000 	.word	0x40008000
 80040e8:	00f42400 	.word	0x00f42400

080040ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b083      	sub	sp, #12
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	f003 0308 	and.w	r3, r3, #8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00a      	beq.n	8004116 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	f003 0310 	and.w	r3, r3, #16
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	f003 0320 	and.w	r3, r3, #32
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01a      	beq.n	8004202 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ea:	d10a      	bne.n	8004202 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  }
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b098      	sub	sp, #96	; 0x60
 8004234:	af02      	add	r7, sp, #8
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004240:	f7fd f8f0 	bl	8001424 <HAL_GetTick>
 8004244:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0308 	and.w	r3, r3, #8
 8004250:	2b08      	cmp	r3, #8
 8004252:	d12e      	bne.n	80042b2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004254:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800425c:	2200      	movs	r2, #0
 800425e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f000 f88c 	bl	8004380 <UART_WaitOnFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d021      	beq.n	80042b2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004276:	e853 3f00 	ldrex	r3, [r3]
 800427a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800427c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800427e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004282:	653b      	str	r3, [r7, #80]	; 0x50
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	461a      	mov	r2, r3
 800428a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800428c:	647b      	str	r3, [r7, #68]	; 0x44
 800428e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004290:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004292:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004294:	e841 2300 	strex	r3, r2, [r1]
 8004298:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800429a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1e6      	bne.n	800426e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2220      	movs	r2, #32
 80042a4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e062      	b.n	8004378 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b04      	cmp	r3, #4
 80042be:	d149      	bne.n	8004354 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042c8:	2200      	movs	r2, #0
 80042ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f856 	bl	8004380 <UART_WaitOnFlagUntilTimeout>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d03c      	beq.n	8004354 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	623b      	str	r3, [r7, #32]
   return(result);
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042f8:	633b      	str	r3, [r7, #48]	; 0x30
 80042fa:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004300:	e841 2300 	strex	r3, r2, [r1]
 8004304:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e6      	bne.n	80042da <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3308      	adds	r3, #8
 8004312:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	e853 3f00 	ldrex	r3, [r3]
 800431a:	60fb      	str	r3, [r7, #12]
   return(result);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0301 	bic.w	r3, r3, #1
 8004322:	64bb      	str	r3, [r7, #72]	; 0x48
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3308      	adds	r3, #8
 800432a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800432c:	61fa      	str	r2, [r7, #28]
 800432e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004330:	69b9      	ldr	r1, [r7, #24]
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	e841 2300 	strex	r3, r2, [r1]
 8004338:	617b      	str	r3, [r7, #20]
   return(result);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d1e5      	bne.n	800430c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2220      	movs	r2, #32
 8004344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e011      	b.n	8004378 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2220      	movs	r2, #32
 8004358:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3758      	adds	r7, #88	; 0x58
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	603b      	str	r3, [r7, #0]
 800438c:	4613      	mov	r3, r2
 800438e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004390:	e049      	b.n	8004426 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004398:	d045      	beq.n	8004426 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439a:	f7fd f843 	bl	8001424 <HAL_GetTick>
 800439e:	4602      	mov	r2, r0
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d101      	bne.n	80043b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e048      	b.n	8004446 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d031      	beq.n	8004426 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	f003 0308 	and.w	r3, r3, #8
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d110      	bne.n	80043f2 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2208      	movs	r2, #8
 80043d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f838 	bl	800444e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2208      	movs	r2, #8
 80043e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e029      	b.n	8004446 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004400:	d111      	bne.n	8004426 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800440a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f81e 	bl	800444e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2220      	movs	r2, #32
 8004416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e00f      	b.n	8004446 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69da      	ldr	r2, [r3, #28]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4013      	ands	r3, r2
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	429a      	cmp	r2, r3
 8004434:	bf0c      	ite	eq
 8004436:	2301      	moveq	r3, #1
 8004438:	2300      	movne	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	461a      	mov	r2, r3
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	429a      	cmp	r2, r3
 8004442:	d0a6      	beq.n	8004392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800444e:	b480      	push	{r7}
 8004450:	b095      	sub	sp, #84	; 0x54
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800446a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	461a      	mov	r2, r3
 8004472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004474:	643b      	str	r3, [r7, #64]	; 0x40
 8004476:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800447a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e6      	bne.n	8004456 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	3308      	adds	r3, #8
 800448e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004490:	6a3b      	ldr	r3, [r7, #32]
 8004492:	e853 3f00 	ldrex	r3, [r3]
 8004496:	61fb      	str	r3, [r7, #28]
   return(result);
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f023 0301 	bic.w	r3, r3, #1
 800449e:	64bb      	str	r3, [r7, #72]	; 0x48
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3308      	adds	r3, #8
 80044a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044b0:	e841 2300 	strex	r3, r2, [r1]
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1e5      	bne.n	8004488 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d118      	bne.n	80044f6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	e853 3f00 	ldrex	r3, [r3]
 80044d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f023 0310 	bic.w	r3, r3, #16
 80044d8:	647b      	str	r3, [r7, #68]	; 0x44
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	461a      	mov	r2, r3
 80044e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044e2:	61bb      	str	r3, [r7, #24]
 80044e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e6:	6979      	ldr	r1, [r7, #20]
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	e841 2300 	strex	r3, r2, [r1]
 80044ee:	613b      	str	r3, [r7, #16]
   return(result);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1e6      	bne.n	80044c4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	669a      	str	r2, [r3, #104]	; 0x68
}
 800450a:	bf00      	nop
 800450c:	3754      	adds	r7, #84	; 0x54
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004516:	b084      	sub	sp, #16
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	f107 001c 	add.w	r0, r7, #28
 8004524:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fa65 	bl	8004a04 <USB_CoreReset>
 800453a:	4603      	mov	r3, r0
 800453c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800453e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d106      	bne.n	8004552 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004548:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	639a      	str	r2, [r3, #56]	; 0x38
 8004550:	e005      	b.n	800455e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800455e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800456a:	b004      	add	sp, #16
 800456c:	4770      	bx	lr

0800456e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800456e:	b480      	push	{r7}
 8004570:	b083      	sub	sp, #12
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f023 0201 	bic.w	r2, r3, #1
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b084      	sub	sp, #16
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80045ac:	78fb      	ldrb	r3, [r7, #3]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d115      	bne.n	80045de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045be:	2001      	movs	r0, #1
 80045c0:	f7fc ff3c 	bl	800143c <HAL_Delay>
      ms++;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3301      	adds	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 fa0c 	bl	80049e8 <USB_GetMode>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d01e      	beq.n	8004614 <USB_SetCurrentMode+0x84>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2b31      	cmp	r3, #49	; 0x31
 80045da:	d9f0      	bls.n	80045be <USB_SetCurrentMode+0x2e>
 80045dc:	e01a      	b.n	8004614 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80045de:	78fb      	ldrb	r3, [r7, #3]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d115      	bne.n	8004610 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80045f0:	2001      	movs	r0, #1
 80045f2:	f7fc ff23 	bl	800143c <HAL_Delay>
      ms++;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	3301      	adds	r3, #1
 80045fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 f9f3 	bl	80049e8 <USB_GetMode>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <USB_SetCurrentMode+0x84>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2b31      	cmp	r3, #49	; 0x31
 800460c:	d9f0      	bls.n	80045f0 <USB_SetCurrentMode+0x60>
 800460e:	e001      	b.n	8004614 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e005      	b.n	8004620 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2b32      	cmp	r3, #50	; 0x32
 8004618:	d101      	bne.n	800461e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004628:	b084      	sub	sp, #16
 800462a:	b580      	push	{r7, lr}
 800462c:	b086      	sub	sp, #24
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004636:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800463a:	2300      	movs	r3, #0
 800463c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004642:	2300      	movs	r3, #0
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	e009      	b.n	800465c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	3340      	adds	r3, #64	; 0x40
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	4413      	add	r3, r2
 8004652:	2200      	movs	r2, #0
 8004654:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	3301      	adds	r3, #1
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	2b0e      	cmp	r3, #14
 8004660:	d9f2      	bls.n	8004648 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d11c      	bne.n	80046a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	68fa      	ldr	r2, [r7, #12]
 8004672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004676:	f043 0302 	orr.w	r3, r3, #2
 800467a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004680:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	e005      	b.n	80046ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80046b4:	461a      	mov	r2, r3
 80046b6:	2300      	movs	r3, #0
 80046b8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80046ba:	2103      	movs	r1, #3
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f000 f959 	bl	8004974 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80046c2:	2110      	movs	r1, #16
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 f8f1 	bl	80048ac <USB_FlushTxFifo>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f91d 	bl	8004914 <USB_FlushRxFifo>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d001      	beq.n	80046e4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ea:	461a      	mov	r2, r3
 80046ec:	2300      	movs	r3, #0
 80046ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f6:	461a      	mov	r2, r3
 80046f8:	2300      	movs	r3, #0
 80046fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004702:	461a      	mov	r2, r3
 8004704:	2300      	movs	r3, #0
 8004706:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004708:	2300      	movs	r3, #0
 800470a:	613b      	str	r3, [r7, #16]
 800470c:	e043      	b.n	8004796 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004724:	d118      	bne.n	8004758 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	4413      	add	r3, r2
 8004734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004738:	461a      	mov	r2, r3
 800473a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	e013      	b.n	800476a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474e:	461a      	mov	r2, r3
 8004750:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004754:	6013      	str	r3, [r2, #0]
 8004756:	e008      	b.n	800476a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004764:	461a      	mov	r2, r3
 8004766:	2300      	movs	r3, #0
 8004768:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004776:	461a      	mov	r2, r3
 8004778:	2300      	movs	r3, #0
 800477a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004788:	461a      	mov	r2, r3
 800478a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800478e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	3301      	adds	r3, #1
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	429a      	cmp	r2, r3
 800479c:	d3b7      	bcc.n	800470e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800479e:	2300      	movs	r3, #0
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	e043      	b.n	800482c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ba:	d118      	bne.n	80047ee <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10a      	bne.n	80047d8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	461a      	mov	r2, r3
 80047d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	e013      	b.n	8004800 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	015a      	lsls	r2, r3, #5
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	4413      	add	r3, r2
 80047e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e4:	461a      	mov	r2, r3
 80047e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047ea:	6013      	str	r3, [r2, #0]
 80047ec:	e008      	b.n	8004800 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fa:	461a      	mov	r2, r3
 80047fc:	2300      	movs	r3, #0
 80047fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480c:	461a      	mov	r2, r3
 800480e:	2300      	movs	r3, #0
 8004810:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800481e:	461a      	mov	r2, r3
 8004820:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004824:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	3301      	adds	r3, #1
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	429a      	cmp	r2, r3
 8004832:	d3b7      	bcc.n	80047a4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004842:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004846:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004854:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	f043 0210 	orr.w	r2, r3, #16
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	699a      	ldr	r2, [r3, #24]
 8004866:	4b10      	ldr	r3, [pc, #64]	; (80048a8 <USB_DevInit+0x280>)
 8004868:	4313      	orrs	r3, r2
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800486e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	699b      	ldr	r3, [r3, #24]
 8004878:	f043 0208 	orr.w	r2, r3, #8
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004880:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004882:	2b01      	cmp	r3, #1
 8004884:	d107      	bne.n	8004896 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800488e:	f043 0304 	orr.w	r3, r3, #4
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004896:	7dfb      	ldrb	r3, [r7, #23]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3718      	adds	r7, #24
 800489c:	46bd      	mov	sp, r7
 800489e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048a2:	b004      	add	sp, #16
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	803c3800 	.word	0x803c3800

080048ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3301      	adds	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4a13      	ldr	r2, [pc, #76]	; (8004910 <USB_FlushTxFifo+0x64>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e01b      	b.n	8004904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	daf2      	bge.n	80048ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	019b      	lsls	r3, r3, #6
 80048dc:	f043 0220 	orr.w	r2, r3, #32
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3301      	adds	r3, #1
 80048e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	4a08      	ldr	r2, [pc, #32]	; (8004910 <USB_FlushTxFifo+0x64>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d901      	bls.n	80048f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e006      	b.n	8004904 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0320 	and.w	r3, r3, #32
 80048fe:	2b20      	cmp	r3, #32
 8004900:	d0f0      	beq.n	80048e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr
 8004910:	00030d40 	.word	0x00030d40

08004914 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	3301      	adds	r3, #1
 8004924:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4a11      	ldr	r2, [pc, #68]	; (8004970 <USB_FlushRxFifo+0x5c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d901      	bls.n	8004932 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e018      	b.n	8004964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	2b00      	cmp	r3, #0
 8004938:	daf2      	bge.n	8004920 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800493a:	2300      	movs	r3, #0
 800493c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2210      	movs	r2, #16
 8004942:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3301      	adds	r3, #1
 8004948:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	4a08      	ldr	r2, [pc, #32]	; (8004970 <USB_FlushRxFifo+0x5c>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d901      	bls.n	8004956 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e006      	b.n	8004964 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	f003 0310 	and.w	r3, r3, #16
 800495e:	2b10      	cmp	r3, #16
 8004960:	d0f0      	beq.n	8004944 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	00030d40 	.word	0x00030d40

08004974 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	460b      	mov	r3, r1
 800497e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	78fb      	ldrb	r3, [r7, #3]
 800498e:	68f9      	ldr	r1, [r7, #12]
 8004990:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004994:	4313      	orrs	r3, r2
 8004996:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b085      	sub	sp, #20
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049c0:	f023 0303 	bic.w	r3, r3, #3
 80049c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049d4:	f043 0302 	orr.w	r3, r3, #2
 80049d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3714      	adds	r7, #20
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	f003 0301 	and.w	r3, r3, #1
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3301      	adds	r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4a13      	ldr	r2, [pc, #76]	; (8004a68 <USB_CoreReset+0x64>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d901      	bls.n	8004a22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e01b      	b.n	8004a5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	daf2      	bge.n	8004a10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f043 0201 	orr.w	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4a09      	ldr	r2, [pc, #36]	; (8004a68 <USB_CoreReset+0x64>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d901      	bls.n	8004a4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e006      	b.n	8004a5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d0f0      	beq.n	8004a3a <USB_CoreReset+0x36>

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3714      	adds	r7, #20
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	00030d40 	.word	0x00030d40

08004a6c <__NVIC_SetPriority>:
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	4603      	mov	r3, r0
 8004a74:	6039      	str	r1, [r7, #0]
 8004a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	db0a      	blt.n	8004a96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	490c      	ldr	r1, [pc, #48]	; (8004ab8 <__NVIC_SetPriority+0x4c>)
 8004a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a8a:	0112      	lsls	r2, r2, #4
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	440b      	add	r3, r1
 8004a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a94:	e00a      	b.n	8004aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	4908      	ldr	r1, [pc, #32]	; (8004abc <__NVIC_SetPriority+0x50>)
 8004a9c:	79fb      	ldrb	r3, [r7, #7]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	3b04      	subs	r3, #4
 8004aa4:	0112      	lsls	r2, r2, #4
 8004aa6:	b2d2      	uxtb	r2, r2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	761a      	strb	r2, [r3, #24]
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	e000e100 	.word	0xe000e100
 8004abc:	e000ed00 	.word	0xe000ed00

08004ac0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004ac4:	2100      	movs	r1, #0
 8004ac6:	f06f 0004 	mvn.w	r0, #4
 8004aca:	f7ff ffcf 	bl	8004a6c <__NVIC_SetPriority>
#endif
}
 8004ace:	bf00      	nop
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ada:	f3ef 8305 	mrs	r3, IPSR
 8004ade:	603b      	str	r3, [r7, #0]
  return(result);
 8004ae0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004ae6:	f06f 0305 	mvn.w	r3, #5
 8004aea:	607b      	str	r3, [r7, #4]
 8004aec:	e00c      	b.n	8004b08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004aee:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <osKernelInitialize+0x44>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d105      	bne.n	8004b02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004af6:	4b08      	ldr	r3, [pc, #32]	; (8004b18 <osKernelInitialize+0x44>)
 8004af8:	2201      	movs	r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004afc:	2300      	movs	r3, #0
 8004afe:	607b      	str	r3, [r7, #4]
 8004b00:	e002      	b.n	8004b08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004b02:	f04f 33ff 	mov.w	r3, #4294967295
 8004b06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b08:	687b      	ldr	r3, [r7, #4]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr
 8004b16:	bf00      	nop
 8004b18:	200007b4 	.word	0x200007b4

08004b1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b22:	f3ef 8305 	mrs	r3, IPSR
 8004b26:	603b      	str	r3, [r7, #0]
  return(result);
 8004b28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d003      	beq.n	8004b36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004b2e:	f06f 0305 	mvn.w	r3, #5
 8004b32:	607b      	str	r3, [r7, #4]
 8004b34:	e010      	b.n	8004b58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004b36:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <osKernelStart+0x48>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d109      	bne.n	8004b52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004b3e:	f7ff ffbf 	bl	8004ac0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004b42:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <osKernelStart+0x48>)
 8004b44:	2202      	movs	r2, #2
 8004b46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004b48:	f001 f866 	bl	8005c18 <vTaskStartScheduler>
      stat = osOK;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	607b      	str	r3, [r7, #4]
 8004b50:	e002      	b.n	8004b58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004b52:	f04f 33ff 	mov.w	r3, #4294967295
 8004b56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004b58:	687b      	ldr	r3, [r7, #4]
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	200007b4 	.word	0x200007b4

08004b68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08e      	sub	sp, #56	; 0x38
 8004b6c:	af04      	add	r7, sp, #16
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004b74:	2300      	movs	r3, #0
 8004b76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b78:	f3ef 8305 	mrs	r3, IPSR
 8004b7c:	617b      	str	r3, [r7, #20]
  return(result);
 8004b7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d17e      	bne.n	8004c82 <osThreadNew+0x11a>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d07b      	beq.n	8004c82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004b8e:	2318      	movs	r3, #24
 8004b90:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004b96:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d045      	beq.n	8004c2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d002      	beq.n	8004bb0 <osThreadNew+0x48>
        name = attr->name;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	699b      	ldr	r3, [r3, #24]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d008      	beq.n	8004bd6 <osThreadNew+0x6e>
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	2b38      	cmp	r3, #56	; 0x38
 8004bc8:	d805      	bhi.n	8004bd6 <osThreadNew+0x6e>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d001      	beq.n	8004bda <osThreadNew+0x72>
        return (NULL);
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e054      	b.n	8004c84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	089b      	lsrs	r3, r3, #2
 8004be8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00e      	beq.n	8004c10 <osThreadNew+0xa8>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	2b5b      	cmp	r3, #91	; 0x5b
 8004bf8:	d90a      	bls.n	8004c10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d006      	beq.n	8004c10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d002      	beq.n	8004c10 <osThreadNew+0xa8>
        mem = 1;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	61bb      	str	r3, [r7, #24]
 8004c0e:	e010      	b.n	8004c32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d10c      	bne.n	8004c32 <osThreadNew+0xca>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d108      	bne.n	8004c32 <osThreadNew+0xca>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d104      	bne.n	8004c32 <osThreadNew+0xca>
          mem = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	61bb      	str	r3, [r7, #24]
 8004c2c:	e001      	b.n	8004c32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d110      	bne.n	8004c5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004c40:	9202      	str	r2, [sp, #8]
 8004c42:	9301      	str	r3, [sp, #4]
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	6a3a      	ldr	r2, [r7, #32]
 8004c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c4e:	68f8      	ldr	r0, [r7, #12]
 8004c50:	f000 fe0c 	bl	800586c <xTaskCreateStatic>
 8004c54:	4603      	mov	r3, r0
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	e013      	b.n	8004c82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d110      	bne.n	8004c82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	f107 0310 	add.w	r3, r7, #16
 8004c68:	9301      	str	r3, [sp, #4]
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c72:	68f8      	ldr	r0, [r7, #12]
 8004c74:	f000 fe57 	bl	8005926 <xTaskCreate>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d001      	beq.n	8004c82 <osThreadNew+0x11a>
            hTask = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004c82:	693b      	ldr	r3, [r7, #16]
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3728      	adds	r7, #40	; 0x28
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c94:	f3ef 8305 	mrs	r3, IPSR
 8004c98:	60bb      	str	r3, [r7, #8]
  return(result);
 8004c9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d003      	beq.n	8004ca8 <osDelay+0x1c>
    stat = osErrorISR;
 8004ca0:	f06f 0305 	mvn.w	r3, #5
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	e007      	b.n	8004cb8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 ff7c 	bl	8005bb0 <vTaskDelay>
    }
  }

  return (stat);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
	...

08004cc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004cc4:	b480      	push	{r7}
 8004cc6:	b085      	sub	sp, #20
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4a07      	ldr	r2, [pc, #28]	; (8004cf0 <vApplicationGetIdleTaskMemory+0x2c>)
 8004cd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	4a06      	ldr	r2, [pc, #24]	; (8004cf4 <vApplicationGetIdleTaskMemory+0x30>)
 8004cda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2280      	movs	r2, #128	; 0x80
 8004ce0:	601a      	str	r2, [r3, #0]
}
 8004ce2:	bf00      	nop
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	200007b8 	.word	0x200007b8
 8004cf4:	20000814 	.word	0x20000814

08004cf8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	4a07      	ldr	r2, [pc, #28]	; (8004d24 <vApplicationGetTimerTaskMemory+0x2c>)
 8004d08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	4a06      	ldr	r2, [pc, #24]	; (8004d28 <vApplicationGetTimerTaskMemory+0x30>)
 8004d0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d16:	601a      	str	r2, [r3, #0]
}
 8004d18:	bf00      	nop
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	20000a14 	.word	0x20000a14
 8004d28:	20000a70 	.word	0x20000a70

08004d2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	f103 0208 	add.w	r2, r3, #8
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f04f 32ff 	mov.w	r2, #4294967295
 8004d44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f103 0208 	add.w	r2, r3, #8
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f103 0208 	add.w	r2, r3, #8
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr

08004d86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d86:	b480      	push	{r7}
 8004d88:	b085      	sub	sp, #20
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
 8004d8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	683a      	ldr	r2, [r7, #0]
 8004db0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	601a      	str	r2, [r3, #0]
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr

08004dce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004dce:	b480      	push	{r7}
 8004dd0:	b085      	sub	sp, #20
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
 8004dd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de4:	d103      	bne.n	8004dee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	60fb      	str	r3, [r7, #12]
 8004dec:	e00c      	b.n	8004e08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3308      	adds	r3, #8
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e002      	b.n	8004dfc <vListInsert+0x2e>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d2f6      	bcs.n	8004df6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	1c5a      	adds	r2, r3, #1
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	601a      	str	r2, [r3, #0]
}
 8004e34:	bf00      	nop
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6892      	ldr	r2, [r2, #8]
 8004e56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6852      	ldr	r2, [r2, #4]
 8004e60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d103      	bne.n	8004e74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	1e5a      	subs	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eac:	f383 8811 	msr	BASEPRI, r3
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	f3bf 8f4f 	dsb	sy
 8004eb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004eba:	bf00      	nop
 8004ebc:	e7fe      	b.n	8004ebc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ebe:	f002 f851 	bl	8006f64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eca:	68f9      	ldr	r1, [r7, #12]
 8004ecc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ece:	fb01 f303 	mul.w	r3, r1, r3
 8004ed2:	441a      	add	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	68f9      	ldr	r1, [r7, #12]
 8004ef2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	441a      	add	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	22ff      	movs	r2, #255	; 0xff
 8004f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	22ff      	movs	r2, #255	; 0xff
 8004f0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d114      	bne.n	8004f3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01a      	beq.n	8004f52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	3310      	adds	r3, #16
 8004f20:	4618      	mov	r0, r3
 8004f22:	f001 f903 	bl	800612c <xTaskRemoveFromEventList>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d012      	beq.n	8004f52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f2c:	4b0c      	ldr	r3, [pc, #48]	; (8004f60 <xQueueGenericReset+0xcc>)
 8004f2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	e009      	b.n	8004f52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	3310      	adds	r3, #16
 8004f42:	4618      	mov	r0, r3
 8004f44:	f7ff fef2 	bl	8004d2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	3324      	adds	r3, #36	; 0x24
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7ff feed 	bl	8004d2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f52:	f002 f837 	bl	8006fc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f56:	2301      	movs	r3, #1
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3710      	adds	r7, #16
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	e000ed04 	.word	0xe000ed04

08004f64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08e      	sub	sp, #56	; 0x38
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	60f8      	str	r0, [r7, #12]
 8004f6c:	60b9      	str	r1, [r7, #8]
 8004f6e:	607a      	str	r2, [r7, #4]
 8004f70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d10a      	bne.n	8004f8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7c:	f383 8811 	msr	BASEPRI, r3
 8004f80:	f3bf 8f6f 	isb	sy
 8004f84:	f3bf 8f4f 	dsb	sy
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f8a:	bf00      	nop
 8004f8c:	e7fe      	b.n	8004f8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d10a      	bne.n	8004faa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f98:	f383 8811 	msr	BASEPRI, r3
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004fa6:	bf00      	nop
 8004fa8:	e7fe      	b.n	8004fa8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <xQueueGenericCreateStatic+0x52>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <xQueueGenericCreateStatic+0x56>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <xQueueGenericCreateStatic+0x58>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10a      	bne.n	8004fd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	623b      	str	r3, [r7, #32]
}
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <xQueueGenericCreateStatic+0x7e>
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <xQueueGenericCreateStatic+0x82>
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e000      	b.n	8004fe8 <xQueueGenericCreateStatic+0x84>
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d10a      	bne.n	8005002 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	61fb      	str	r3, [r7, #28]
}
 8004ffe:	bf00      	nop
 8005000:	e7fe      	b.n	8005000 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005002:	2350      	movs	r3, #80	; 0x50
 8005004:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b50      	cmp	r3, #80	; 0x50
 800500a:	d00a      	beq.n	8005022 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	61bb      	str	r3, [r7, #24]
}
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005022:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00d      	beq.n	800504a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800502e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005036:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503c:	9300      	str	r3, [sp, #0]
 800503e:	4613      	mov	r3, r2
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	68b9      	ldr	r1, [r7, #8]
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f000 f805 	bl	8005054 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800504c:	4618      	mov	r0, r3
 800504e:	3730      	adds	r7, #48	; 0x30
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	607a      	str	r2, [r7, #4]
 8005060:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d103      	bne.n	8005070 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	e002      	b.n	8005076 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	68ba      	ldr	r2, [r7, #8]
 8005080:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005082:	2101      	movs	r1, #1
 8005084:	69b8      	ldr	r0, [r7, #24]
 8005086:	f7ff ff05 	bl	8004e94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	78fa      	ldrb	r2, [r7, #3]
 800508e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005092:	bf00      	nop
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08e      	sub	sp, #56	; 0x38
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	60b9      	str	r1, [r7, #8]
 80050a6:	607a      	str	r2, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80050aa:	2300      	movs	r3, #0
 80050ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <xQueueGenericSend+0x32>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d103      	bne.n	80050dc <xQueueGenericSend+0x40>
 80050d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d101      	bne.n	80050e0 <xQueueGenericSend+0x44>
 80050dc:	2301      	movs	r3, #1
 80050de:	e000      	b.n	80050e2 <xQueueGenericSend+0x46>
 80050e0:	2300      	movs	r3, #0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10a      	bne.n	80050fc <xQueueGenericSend+0x60>
	__asm volatile
 80050e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ea:	f383 8811 	msr	BASEPRI, r3
 80050ee:	f3bf 8f6f 	isb	sy
 80050f2:	f3bf 8f4f 	dsb	sy
 80050f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050f8:	bf00      	nop
 80050fa:	e7fe      	b.n	80050fa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d103      	bne.n	800510a <xQueueGenericSend+0x6e>
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005106:	2b01      	cmp	r3, #1
 8005108:	d101      	bne.n	800510e <xQueueGenericSend+0x72>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <xQueueGenericSend+0x74>
 800510e:	2300      	movs	r3, #0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10a      	bne.n	800512a <xQueueGenericSend+0x8e>
	__asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	623b      	str	r3, [r7, #32]
}
 8005126:	bf00      	nop
 8005128:	e7fe      	b.n	8005128 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800512a:	f001 f9bd 	bl	80064a8 <xTaskGetSchedulerState>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d102      	bne.n	800513a <xQueueGenericSend+0x9e>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <xQueueGenericSend+0xa2>
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <xQueueGenericSend+0xa4>
 800513e:	2300      	movs	r3, #0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10a      	bne.n	800515a <xQueueGenericSend+0xbe>
	__asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	61fb      	str	r3, [r7, #28]
}
 8005156:	bf00      	nop
 8005158:	e7fe      	b.n	8005158 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800515a:	f001 ff03 	bl	8006f64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005166:	429a      	cmp	r2, r3
 8005168:	d302      	bcc.n	8005170 <xQueueGenericSend+0xd4>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b02      	cmp	r3, #2
 800516e:	d129      	bne.n	80051c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005176:	f000 fa0b 	bl	8005590 <prvCopyDataToQueue>
 800517a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005180:	2b00      	cmp	r3, #0
 8005182:	d010      	beq.n	80051a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	3324      	adds	r3, #36	; 0x24
 8005188:	4618      	mov	r0, r3
 800518a:	f000 ffcf 	bl	800612c <xTaskRemoveFromEventList>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d013      	beq.n	80051bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005194:	4b3f      	ldr	r3, [pc, #252]	; (8005294 <xQueueGenericSend+0x1f8>)
 8005196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	f3bf 8f6f 	isb	sy
 80051a4:	e00a      	b.n	80051bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80051a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80051ac:	4b39      	ldr	r3, [pc, #228]	; (8005294 <xQueueGenericSend+0x1f8>)
 80051ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80051bc:	f001 ff02 	bl	8006fc4 <vPortExitCritical>
				return pdPASS;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e063      	b.n	800528c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d103      	bne.n	80051d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051ca:	f001 fefb 	bl	8006fc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051ce:	2300      	movs	r3, #0
 80051d0:	e05c      	b.n	800528c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051d8:	f107 0314 	add.w	r3, r7, #20
 80051dc:	4618      	mov	r0, r3
 80051de:	f001 f809 	bl	80061f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051e2:	2301      	movs	r3, #1
 80051e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051e6:	f001 feed 	bl	8006fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051ea:	f000 fd7b 	bl	8005ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051ee:	f001 feb9 	bl	8006f64 <vPortEnterCritical>
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051f8:	b25b      	sxtb	r3, r3
 80051fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051fe:	d103      	bne.n	8005208 <xQueueGenericSend+0x16c>
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	2200      	movs	r2, #0
 8005204:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800520e:	b25b      	sxtb	r3, r3
 8005210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005214:	d103      	bne.n	800521e <xQueueGenericSend+0x182>
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	2200      	movs	r2, #0
 800521a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800521e:	f001 fed1 	bl	8006fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005222:	1d3a      	adds	r2, r7, #4
 8005224:	f107 0314 	add.w	r3, r7, #20
 8005228:	4611      	mov	r1, r2
 800522a:	4618      	mov	r0, r3
 800522c:	f000 fff8 	bl	8006220 <xTaskCheckForTimeOut>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d124      	bne.n	8005280 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005236:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005238:	f000 faa2 	bl	8005780 <prvIsQueueFull>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d018      	beq.n	8005274 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	3310      	adds	r3, #16
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	4611      	mov	r1, r2
 800524a:	4618      	mov	r0, r3
 800524c:	f000 ff1e 	bl	800608c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005250:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005252:	f000 fa2d 	bl	80056b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005256:	f000 fd53 	bl	8005d00 <xTaskResumeAll>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	f47f af7c 	bne.w	800515a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005262:	4b0c      	ldr	r3, [pc, #48]	; (8005294 <xQueueGenericSend+0x1f8>)
 8005264:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005268:	601a      	str	r2, [r3, #0]
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	e772      	b.n	800515a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005276:	f000 fa1b 	bl	80056b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800527a:	f000 fd41 	bl	8005d00 <xTaskResumeAll>
 800527e:	e76c      	b.n	800515a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005282:	f000 fa15 	bl	80056b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005286:	f000 fd3b 	bl	8005d00 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800528a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800528c:	4618      	mov	r0, r3
 800528e:	3738      	adds	r7, #56	; 0x38
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	e000ed04 	.word	0xe000ed04

08005298 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b090      	sub	sp, #64	; 0x40
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10a      	bne.n	80052c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80052c2:	bf00      	nop
 80052c4:	e7fe      	b.n	80052c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d103      	bne.n	80052d4 <xQueueGenericSendFromISR+0x3c>
 80052cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d101      	bne.n	80052d8 <xQueueGenericSendFromISR+0x40>
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <xQueueGenericSendFromISR+0x42>
 80052d8:	2300      	movs	r3, #0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10a      	bne.n	80052f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d103      	bne.n	8005302 <xQueueGenericSendFromISR+0x6a>
 80052fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <xQueueGenericSendFromISR+0x6e>
 8005302:	2301      	movs	r3, #1
 8005304:	e000      	b.n	8005308 <xQueueGenericSendFromISR+0x70>
 8005306:	2300      	movs	r3, #0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	623b      	str	r3, [r7, #32]
}
 800531e:	bf00      	nop
 8005320:	e7fe      	b.n	8005320 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005322:	f001 ff01 	bl	8007128 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005326:	f3ef 8211 	mrs	r2, BASEPRI
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	61fa      	str	r2, [r7, #28]
 800533c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800533e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005340:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800534a:	429a      	cmp	r2, r3
 800534c:	d302      	bcc.n	8005354 <xQueueGenericSendFromISR+0xbc>
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	2b02      	cmp	r3, #2
 8005352:	d12f      	bne.n	80053b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005356:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800535a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800535e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005364:	683a      	ldr	r2, [r7, #0]
 8005366:	68b9      	ldr	r1, [r7, #8]
 8005368:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800536a:	f000 f911 	bl	8005590 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800536e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005376:	d112      	bne.n	800539e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	2b00      	cmp	r3, #0
 800537e:	d016      	beq.n	80053ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005382:	3324      	adds	r3, #36	; 0x24
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fed1 	bl	800612c <xTaskRemoveFromEventList>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00e      	beq.n	80053ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00b      	beq.n	80053ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	e007      	b.n	80053ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800539e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80053a2:	3301      	adds	r3, #1
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	b25a      	sxtb	r2, r3
 80053a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80053ae:	2301      	movs	r3, #1
 80053b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80053b2:	e001      	b.n	80053b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053b4:	2300      	movs	r3, #0
 80053b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3740      	adds	r7, #64	; 0x40
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08c      	sub	sp, #48	; 0x30
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053dc:	2300      	movs	r3, #0
 80053de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10a      	bne.n	8005400 <xQueueReceive+0x30>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	623b      	str	r3, [r7, #32]
}
 80053fc:	bf00      	nop
 80053fe:	e7fe      	b.n	80053fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d103      	bne.n	800540e <xQueueReceive+0x3e>
 8005406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <xQueueReceive+0x42>
 800540e:	2301      	movs	r3, #1
 8005410:	e000      	b.n	8005414 <xQueueReceive+0x44>
 8005412:	2300      	movs	r3, #0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10a      	bne.n	800542e <xQueueReceive+0x5e>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	61fb      	str	r3, [r7, #28]
}
 800542a:	bf00      	nop
 800542c:	e7fe      	b.n	800542c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800542e:	f001 f83b 	bl	80064a8 <xTaskGetSchedulerState>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d102      	bne.n	800543e <xQueueReceive+0x6e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <xQueueReceive+0x72>
 800543e:	2301      	movs	r3, #1
 8005440:	e000      	b.n	8005444 <xQueueReceive+0x74>
 8005442:	2300      	movs	r3, #0
 8005444:	2b00      	cmp	r3, #0
 8005446:	d10a      	bne.n	800545e <xQueueReceive+0x8e>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	61bb      	str	r3, [r7, #24]
}
 800545a:	bf00      	nop
 800545c:	e7fe      	b.n	800545c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800545e:	f001 fd81 	bl	8006f64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005466:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546a:	2b00      	cmp	r3, #0
 800546c:	d01f      	beq.n	80054ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800546e:	68b9      	ldr	r1, [r7, #8]
 8005470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005472:	f000 f8f7 	bl	8005664 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	1e5a      	subs	r2, r3, #1
 800547a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800547e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00f      	beq.n	80054a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005488:	3310      	adds	r3, #16
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fe4e 	bl	800612c <xTaskRemoveFromEventList>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d007      	beq.n	80054a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005496:	4b3d      	ldr	r3, [pc, #244]	; (800558c <xQueueReceive+0x1bc>)
 8005498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054a6:	f001 fd8d 	bl	8006fc4 <vPortExitCritical>
				return pdPASS;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e069      	b.n	8005582 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d103      	bne.n	80054bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054b4:	f001 fd86 	bl	8006fc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e062      	b.n	8005582 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054c2:	f107 0310 	add.w	r3, r7, #16
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 fe94 	bl	80061f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054cc:	2301      	movs	r3, #1
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054d0:	f001 fd78 	bl	8006fc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054d4:	f000 fc06 	bl	8005ce4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054d8:	f001 fd44 	bl	8006f64 <vPortEnterCritical>
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d103      	bne.n	80054f2 <xQueueReceive+0x122>
 80054ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054f8:	b25b      	sxtb	r3, r3
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d103      	bne.n	8005508 <xQueueReceive+0x138>
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005508:	f001 fd5c 	bl	8006fc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800550c:	1d3a      	adds	r2, r7, #4
 800550e:	f107 0310 	add.w	r3, r7, #16
 8005512:	4611      	mov	r1, r2
 8005514:	4618      	mov	r0, r3
 8005516:	f000 fe83 	bl	8006220 <xTaskCheckForTimeOut>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d123      	bne.n	8005568 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005520:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005522:	f000 f917 	bl	8005754 <prvIsQueueEmpty>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d017      	beq.n	800555c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	3324      	adds	r3, #36	; 0x24
 8005530:	687a      	ldr	r2, [r7, #4]
 8005532:	4611      	mov	r1, r2
 8005534:	4618      	mov	r0, r3
 8005536:	f000 fda9 	bl	800608c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800553a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800553c:	f000 f8b8 	bl	80056b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005540:	f000 fbde 	bl	8005d00 <xTaskResumeAll>
 8005544:	4603      	mov	r3, r0
 8005546:	2b00      	cmp	r3, #0
 8005548:	d189      	bne.n	800545e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800554a:	4b10      	ldr	r3, [pc, #64]	; (800558c <xQueueReceive+0x1bc>)
 800554c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	e780      	b.n	800545e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800555c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800555e:	f000 f8a7 	bl	80056b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005562:	f000 fbcd 	bl	8005d00 <xTaskResumeAll>
 8005566:	e77a      	b.n	800545e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005568:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800556a:	f000 f8a1 	bl	80056b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800556e:	f000 fbc7 	bl	8005d00 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005574:	f000 f8ee 	bl	8005754 <prvIsQueueEmpty>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	f43f af6f 	beq.w	800545e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005580:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005582:	4618      	mov	r0, r3
 8005584:	3730      	adds	r7, #48	; 0x30
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
 800558a:	bf00      	nop
 800558c:	e000ed04 	.word	0xe000ed04

08005590 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800559c:	2300      	movs	r3, #0
 800559e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10d      	bne.n	80055ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d14d      	bne.n	8005652 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 ff92 	bl	80064e4 <xTaskPriorityDisinherit>
 80055c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2200      	movs	r2, #0
 80055c6:	609a      	str	r2, [r3, #8]
 80055c8:	e043      	b.n	8005652 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d119      	bne.n	8005604 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6858      	ldr	r0, [r3, #4]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	461a      	mov	r2, r3
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	f001 fffa 	bl	80075d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	685a      	ldr	r2, [r3, #4]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	441a      	add	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685a      	ldr	r2, [r3, #4]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d32b      	bcc.n	8005652 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	605a      	str	r2, [r3, #4]
 8005602:	e026      	b.n	8005652 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	68d8      	ldr	r0, [r3, #12]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	461a      	mov	r2, r3
 800560e:	68b9      	ldr	r1, [r7, #8]
 8005610:	f001 ffe0 	bl	80075d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	68da      	ldr	r2, [r3, #12]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561c:	425b      	negs	r3, r3
 800561e:	441a      	add	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	68da      	ldr	r2, [r3, #12]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d207      	bcs.n	8005640 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	689a      	ldr	r2, [r3, #8]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005638:	425b      	negs	r3, r3
 800563a:	441a      	add	r2, r3
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b02      	cmp	r3, #2
 8005644:	d105      	bne.n	8005652 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800564c:	693b      	ldr	r3, [r7, #16]
 800564e:	3b01      	subs	r3, #1
 8005650:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1c5a      	adds	r2, r3, #1
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800565a:	697b      	ldr	r3, [r7, #20]
}
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	d018      	beq.n	80056a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68da      	ldr	r2, [r3, #12]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	441a      	add	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	429a      	cmp	r2, r3
 800568e:	d303      	bcc.n	8005698 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68d9      	ldr	r1, [r3, #12]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a0:	461a      	mov	r2, r3
 80056a2:	6838      	ldr	r0, [r7, #0]
 80056a4:	f001 ff96 	bl	80075d4 <memcpy>
	}
}
 80056a8:	bf00      	nop
 80056aa:	3708      	adds	r7, #8
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80056b8:	f001 fc54 	bl	8006f64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056c4:	e011      	b.n	80056ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d012      	beq.n	80056f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	3324      	adds	r3, #36	; 0x24
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 fd2a 	bl	800612c <xTaskRemoveFromEventList>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80056de:	f000 fe01 	bl	80062e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80056e2:	7bfb      	ldrb	r3, [r7, #15]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dce9      	bgt.n	80056c6 <prvUnlockQueue+0x16>
 80056f2:	e000      	b.n	80056f6 <prvUnlockQueue+0x46>
					break;
 80056f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	22ff      	movs	r2, #255	; 0xff
 80056fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80056fe:	f001 fc61 	bl	8006fc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005702:	f001 fc2f 	bl	8006f64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800570c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800570e:	e011      	b.n	8005734 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d012      	beq.n	800573e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3310      	adds	r3, #16
 800571c:	4618      	mov	r0, r3
 800571e:	f000 fd05 	bl	800612c <xTaskRemoveFromEventList>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005728:	f000 fddc 	bl	80062e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800572c:	7bbb      	ldrb	r3, [r7, #14]
 800572e:	3b01      	subs	r3, #1
 8005730:	b2db      	uxtb	r3, r3
 8005732:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005734:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005738:	2b00      	cmp	r3, #0
 800573a:	dce9      	bgt.n	8005710 <prvUnlockQueue+0x60>
 800573c:	e000      	b.n	8005740 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800573e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	22ff      	movs	r2, #255	; 0xff
 8005744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005748:	f001 fc3c 	bl	8006fc4 <vPortExitCritical>
}
 800574c:	bf00      	nop
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800575c:	f001 fc02 	bl	8006f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	2b00      	cmp	r3, #0
 8005766:	d102      	bne.n	800576e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005768:	2301      	movs	r3, #1
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	e001      	b.n	8005772 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800576e:	2300      	movs	r3, #0
 8005770:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005772:	f001 fc27 	bl	8006fc4 <vPortExitCritical>

	return xReturn;
 8005776:	68fb      	ldr	r3, [r7, #12]
}
 8005778:	4618      	mov	r0, r3
 800577a:	3710      	adds	r7, #16
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005788:	f001 fbec 	bl	8006f64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005794:	429a      	cmp	r2, r3
 8005796:	d102      	bne.n	800579e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005798:	2301      	movs	r3, #1
 800579a:	60fb      	str	r3, [r7, #12]
 800579c:	e001      	b.n	80057a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800579e:	2300      	movs	r3, #0
 80057a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80057a2:	f001 fc0f 	bl	8006fc4 <vPortExitCritical>

	return xReturn;
 80057a6:	68fb      	ldr	r3, [r7, #12]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057ba:	2300      	movs	r3, #0
 80057bc:	60fb      	str	r3, [r7, #12]
 80057be:	e014      	b.n	80057ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80057c0:	4a0f      	ldr	r2, [pc, #60]	; (8005800 <vQueueAddToRegistry+0x50>)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80057cc:	490c      	ldr	r1, [pc, #48]	; (8005800 <vQueueAddToRegistry+0x50>)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80057d6:	4a0a      	ldr	r2, [pc, #40]	; (8005800 <vQueueAddToRegistry+0x50>)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	00db      	lsls	r3, r3, #3
 80057dc:	4413      	add	r3, r2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80057e2:	e006      	b.n	80057f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3301      	adds	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b07      	cmp	r3, #7
 80057ee:	d9e7      	bls.n	80057c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057f0:	bf00      	nop
 80057f2:	bf00      	nop
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	20000e70 	.word	0x20000e70

08005804 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005804:	b580      	push	{r7, lr}
 8005806:	b086      	sub	sp, #24
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005814:	f001 fba6 	bl	8006f64 <vPortEnterCritical>
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800581e:	b25b      	sxtb	r3, r3
 8005820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005824:	d103      	bne.n	800582e <vQueueWaitForMessageRestricted+0x2a>
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005834:	b25b      	sxtb	r3, r3
 8005836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583a:	d103      	bne.n	8005844 <vQueueWaitForMessageRestricted+0x40>
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005844:	f001 fbbe 	bl	8006fc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800584c:	2b00      	cmp	r3, #0
 800584e:	d106      	bne.n	800585e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	3324      	adds	r3, #36	; 0x24
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	68b9      	ldr	r1, [r7, #8]
 8005858:	4618      	mov	r0, r3
 800585a:	f000 fc3b 	bl	80060d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800585e:	6978      	ldr	r0, [r7, #20]
 8005860:	f7ff ff26 	bl	80056b0 <prvUnlockQueue>
	}
 8005864:	bf00      	nop
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800586c:	b580      	push	{r7, lr}
 800586e:	b08e      	sub	sp, #56	; 0x38
 8005870:	af04      	add	r7, sp, #16
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800587a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587c:	2b00      	cmp	r3, #0
 800587e:	d10a      	bne.n	8005896 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	623b      	str	r3, [r7, #32]
}
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005898:	2b00      	cmp	r3, #0
 800589a:	d10a      	bne.n	80058b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800589c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a0:	f383 8811 	msr	BASEPRI, r3
 80058a4:	f3bf 8f6f 	isb	sy
 80058a8:	f3bf 8f4f 	dsb	sy
 80058ac:	61fb      	str	r3, [r7, #28]
}
 80058ae:	bf00      	nop
 80058b0:	e7fe      	b.n	80058b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80058b2:	235c      	movs	r3, #92	; 0x5c
 80058b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b5c      	cmp	r3, #92	; 0x5c
 80058ba:	d00a      	beq.n	80058d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	61bb      	str	r3, [r7, #24]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80058d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d01e      	beq.n	8005918 <xTaskCreateStatic+0xac>
 80058da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01b      	beq.n	8005918 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	2202      	movs	r2, #2
 80058ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058f2:	2300      	movs	r3, #0
 80058f4:	9303      	str	r3, [sp, #12]
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	9302      	str	r3, [sp, #8]
 80058fa:	f107 0314 	add.w	r3, r7, #20
 80058fe:	9301      	str	r3, [sp, #4]
 8005900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005902:	9300      	str	r3, [sp, #0]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	687a      	ldr	r2, [r7, #4]
 8005908:	68b9      	ldr	r1, [r7, #8]
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 f850 	bl	80059b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005910:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005912:	f000 f8dd 	bl	8005ad0 <prvAddNewTaskToReadyList>
 8005916:	e001      	b.n	800591c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800591c:	697b      	ldr	r3, [r7, #20]
	}
 800591e:	4618      	mov	r0, r3
 8005920:	3728      	adds	r7, #40	; 0x28
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005926:	b580      	push	{r7, lr}
 8005928:	b08c      	sub	sp, #48	; 0x30
 800592a:	af04      	add	r7, sp, #16
 800592c:	60f8      	str	r0, [r7, #12]
 800592e:	60b9      	str	r1, [r7, #8]
 8005930:	603b      	str	r3, [r7, #0]
 8005932:	4613      	mov	r3, r2
 8005934:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4618      	mov	r0, r3
 800593c:	f001 fc34 	bl	80071a8 <pvPortMalloc>
 8005940:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00e      	beq.n	8005966 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005948:	205c      	movs	r0, #92	; 0x5c
 800594a:	f001 fc2d 	bl	80071a8 <pvPortMalloc>
 800594e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	697a      	ldr	r2, [r7, #20]
 800595a:	631a      	str	r2, [r3, #48]	; 0x30
 800595c:	e005      	b.n	800596a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800595e:	6978      	ldr	r0, [r7, #20]
 8005960:	f001 fcee 	bl	8007340 <vPortFree>
 8005964:	e001      	b.n	800596a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005966:	2300      	movs	r3, #0
 8005968:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d017      	beq.n	80059a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005978:	88fa      	ldrh	r2, [r7, #6]
 800597a:	2300      	movs	r3, #0
 800597c:	9303      	str	r3, [sp, #12]
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	9302      	str	r3, [sp, #8]
 8005982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005984:	9301      	str	r3, [sp, #4]
 8005986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	68b9      	ldr	r1, [r7, #8]
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 f80e 	bl	80059b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005994:	69f8      	ldr	r0, [r7, #28]
 8005996:	f000 f89b 	bl	8005ad0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800599a:	2301      	movs	r3, #1
 800599c:	61bb      	str	r3, [r7, #24]
 800599e:	e002      	b.n	80059a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80059a0:	f04f 33ff 	mov.w	r3, #4294967295
 80059a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80059a6:	69bb      	ldr	r3, [r7, #24]
	}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3720      	adds	r7, #32
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
 80059bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80059be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	461a      	mov	r2, r3
 80059c8:	21a5      	movs	r1, #165	; 0xa5
 80059ca:	f001 fdd7 	bl	800757c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80059ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80059d8:	3b01      	subs	r3, #1
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	f023 0307 	bic.w	r3, r3, #7
 80059e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	f003 0307 	and.w	r3, r3, #7
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d00a      	beq.n	8005a08 <prvInitialiseNewTask+0x58>
	__asm volatile
 80059f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	617b      	str	r3, [r7, #20]
}
 8005a04:	bf00      	nop
 8005a06:	e7fe      	b.n	8005a06 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d01f      	beq.n	8005a4e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
 8005a12:	e012      	b.n	8005a3a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	4413      	add	r3, r2
 8005a1a:	7819      	ldrb	r1, [r3, #0]
 8005a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	4413      	add	r3, r2
 8005a22:	3334      	adds	r3, #52	; 0x34
 8005a24:	460a      	mov	r2, r1
 8005a26:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d006      	beq.n	8005a42 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005a34:	69fb      	ldr	r3, [r7, #28]
 8005a36:	3301      	adds	r3, #1
 8005a38:	61fb      	str	r3, [r7, #28]
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	2b0f      	cmp	r3, #15
 8005a3e:	d9e9      	bls.n	8005a14 <prvInitialiseNewTask+0x64>
 8005a40:	e000      	b.n	8005a44 <prvInitialiseNewTask+0x94>
			{
				break;
 8005a42:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a4c:	e003      	b.n	8005a56 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a58:	2b37      	cmp	r3, #55	; 0x37
 8005a5a:	d901      	bls.n	8005a60 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a5c:	2337      	movs	r3, #55	; 0x37
 8005a5e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a64:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a6a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	2200      	movs	r2, #0
 8005a70:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	3304      	adds	r3, #4
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7ff f978 	bl	8004d6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7e:	3318      	adds	r3, #24
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff f973 	bl	8004d6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a8a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a8e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a94:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a9a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	68f9      	ldr	r1, [r7, #12]
 8005aae:	69b8      	ldr	r0, [r7, #24]
 8005ab0:	f001 f928 	bl	8006d04 <pxPortInitialiseStack>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ac2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ac6:	bf00      	nop
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b082      	sub	sp, #8
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ad8:	f001 fa44 	bl	8006f64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005adc:	4b2d      	ldr	r3, [pc, #180]	; (8005b94 <prvAddNewTaskToReadyList+0xc4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	4a2c      	ldr	r2, [pc, #176]	; (8005b94 <prvAddNewTaskToReadyList+0xc4>)
 8005ae4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005ae6:	4b2c      	ldr	r3, [pc, #176]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d109      	bne.n	8005b02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005aee:	4a2a      	ldr	r2, [pc, #168]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005af4:	4b27      	ldr	r3, [pc, #156]	; (8005b94 <prvAddNewTaskToReadyList+0xc4>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d110      	bne.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005afc:	f000 fc16 	bl	800632c <prvInitialiseTaskLists>
 8005b00:	e00d      	b.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b02:	4b26      	ldr	r3, [pc, #152]	; (8005b9c <prvAddNewTaskToReadyList+0xcc>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d109      	bne.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005b0a:	4b23      	ldr	r3, [pc, #140]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d802      	bhi.n	8005b1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005b18:	4a1f      	ldr	r2, [pc, #124]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005b1e:	4b20      	ldr	r3, [pc, #128]	; (8005ba0 <prvAddNewTaskToReadyList+0xd0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3301      	adds	r3, #1
 8005b24:	4a1e      	ldr	r2, [pc, #120]	; (8005ba0 <prvAddNewTaskToReadyList+0xd0>)
 8005b26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005b28:	4b1d      	ldr	r3, [pc, #116]	; (8005ba0 <prvAddNewTaskToReadyList+0xd0>)
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b34:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <prvAddNewTaskToReadyList+0xd4>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	429a      	cmp	r2, r3
 8005b3a:	d903      	bls.n	8005b44 <prvAddNewTaskToReadyList+0x74>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b40:	4a18      	ldr	r2, [pc, #96]	; (8005ba4 <prvAddNewTaskToReadyList+0xd4>)
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4a15      	ldr	r2, [pc, #84]	; (8005ba8 <prvAddNewTaskToReadyList+0xd8>)
 8005b52:	441a      	add	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f7ff f913 	bl	8004d86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b60:	f001 fa30 	bl	8006fc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b64:	4b0d      	ldr	r3, [pc, #52]	; (8005b9c <prvAddNewTaskToReadyList+0xcc>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d00e      	beq.n	8005b8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <prvAddNewTaskToReadyList+0xc8>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d207      	bcs.n	8005b8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b7a:	4b0c      	ldr	r3, [pc, #48]	; (8005bac <prvAddNewTaskToReadyList+0xdc>)
 8005b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b80:	601a      	str	r2, [r3, #0]
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b8a:	bf00      	nop
 8005b8c:	3708      	adds	r7, #8
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	20001384 	.word	0x20001384
 8005b98:	20000eb0 	.word	0x20000eb0
 8005b9c:	20001390 	.word	0x20001390
 8005ba0:	200013a0 	.word	0x200013a0
 8005ba4:	2000138c 	.word	0x2000138c
 8005ba8:	20000eb4 	.word	0x20000eb4
 8005bac:	e000ed04 	.word	0xe000ed04

08005bb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d017      	beq.n	8005bf2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005bc2:	4b13      	ldr	r3, [pc, #76]	; (8005c10 <vTaskDelay+0x60>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d00a      	beq.n	8005be0 <vTaskDelay+0x30>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	60bb      	str	r3, [r7, #8]
}
 8005bdc:	bf00      	nop
 8005bde:	e7fe      	b.n	8005bde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005be0:	f000 f880 	bl	8005ce4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005be4:	2100      	movs	r1, #0
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fcea 	bl	80065c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005bec:	f000 f888 	bl	8005d00 <xTaskResumeAll>
 8005bf0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d107      	bne.n	8005c08 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005bf8:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <vTaskDelay+0x64>)
 8005bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bfe:	601a      	str	r2, [r3, #0]
 8005c00:	f3bf 8f4f 	dsb	sy
 8005c04:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c08:	bf00      	nop
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	200013ac 	.word	0x200013ac
 8005c14:	e000ed04 	.word	0xe000ed04

08005c18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	; 0x28
 8005c1c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c22:	2300      	movs	r3, #0
 8005c24:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005c26:	463a      	mov	r2, r7
 8005c28:	1d39      	adds	r1, r7, #4
 8005c2a:	f107 0308 	add.w	r3, r7, #8
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff f848 	bl	8004cc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005c34:	6839      	ldr	r1, [r7, #0]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	9202      	str	r2, [sp, #8]
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	2300      	movs	r3, #0
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	2300      	movs	r3, #0
 8005c44:	460a      	mov	r2, r1
 8005c46:	4921      	ldr	r1, [pc, #132]	; (8005ccc <vTaskStartScheduler+0xb4>)
 8005c48:	4821      	ldr	r0, [pc, #132]	; (8005cd0 <vTaskStartScheduler+0xb8>)
 8005c4a:	f7ff fe0f 	bl	800586c <xTaskCreateStatic>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	4a20      	ldr	r2, [pc, #128]	; (8005cd4 <vTaskStartScheduler+0xbc>)
 8005c52:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c54:	4b1f      	ldr	r3, [pc, #124]	; (8005cd4 <vTaskStartScheduler+0xbc>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	e001      	b.n	8005c66 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d102      	bne.n	8005c72 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c6c:	f000 fcfc 	bl	8006668 <xTimerCreateTimerTask>
 8005c70:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d116      	bne.n	8005ca6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	613b      	str	r3, [r7, #16]
}
 8005c8a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c8c:	4b12      	ldr	r3, [pc, #72]	; (8005cd8 <vTaskStartScheduler+0xc0>)
 8005c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c92:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c94:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <vTaskStartScheduler+0xc4>)
 8005c96:	2201      	movs	r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c9a:	4b11      	ldr	r3, [pc, #68]	; (8005ce0 <vTaskStartScheduler+0xc8>)
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005ca0:	f001 f8be 	bl	8006e20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005ca4:	e00e      	b.n	8005cc4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d10a      	bne.n	8005cc4 <vTaskStartScheduler+0xac>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	60fb      	str	r3, [r7, #12]
}
 8005cc0:	bf00      	nop
 8005cc2:	e7fe      	b.n	8005cc2 <vTaskStartScheduler+0xaa>
}
 8005cc4:	bf00      	nop
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	08007630 	.word	0x08007630
 8005cd0:	080062fd 	.word	0x080062fd
 8005cd4:	200013a8 	.word	0x200013a8
 8005cd8:	200013a4 	.word	0x200013a4
 8005cdc:	20001390 	.word	0x20001390
 8005ce0:	20001388 	.word	0x20001388

08005ce4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ce8:	4b04      	ldr	r3, [pc, #16]	; (8005cfc <vTaskSuspendAll+0x18>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	4a03      	ldr	r2, [pc, #12]	; (8005cfc <vTaskSuspendAll+0x18>)
 8005cf0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005cf2:	bf00      	nop
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	200013ac 	.word	0x200013ac

08005d00 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d0e:	4b42      	ldr	r3, [pc, #264]	; (8005e18 <xTaskResumeAll+0x118>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10a      	bne.n	8005d2c <xTaskResumeAll+0x2c>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	603b      	str	r3, [r7, #0]
}
 8005d28:	bf00      	nop
 8005d2a:	e7fe      	b.n	8005d2a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005d2c:	f001 f91a 	bl	8006f64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005d30:	4b39      	ldr	r3, [pc, #228]	; (8005e18 <xTaskResumeAll+0x118>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	4a38      	ldr	r2, [pc, #224]	; (8005e18 <xTaskResumeAll+0x118>)
 8005d38:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d3a:	4b37      	ldr	r3, [pc, #220]	; (8005e18 <xTaskResumeAll+0x118>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d162      	bne.n	8005e08 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005d42:	4b36      	ldr	r3, [pc, #216]	; (8005e1c <xTaskResumeAll+0x11c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d05e      	beq.n	8005e08 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d4a:	e02f      	b.n	8005dac <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d4c:	4b34      	ldr	r3, [pc, #208]	; (8005e20 <xTaskResumeAll+0x120>)
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3318      	adds	r3, #24
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f7ff f871 	bl	8004e40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	3304      	adds	r3, #4
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff f86c 	bl	8004e40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6c:	4b2d      	ldr	r3, [pc, #180]	; (8005e24 <xTaskResumeAll+0x124>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d903      	bls.n	8005d7c <xTaskResumeAll+0x7c>
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d78:	4a2a      	ldr	r2, [pc, #168]	; (8005e24 <xTaskResumeAll+0x124>)
 8005d7a:	6013      	str	r3, [r2, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d80:	4613      	mov	r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4413      	add	r3, r2
 8005d86:	009b      	lsls	r3, r3, #2
 8005d88:	4a27      	ldr	r2, [pc, #156]	; (8005e28 <xTaskResumeAll+0x128>)
 8005d8a:	441a      	add	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4619      	mov	r1, r3
 8005d92:	4610      	mov	r0, r2
 8005d94:	f7fe fff7 	bl	8004d86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	4b23      	ldr	r3, [pc, #140]	; (8005e2c <xTaskResumeAll+0x12c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d302      	bcc.n	8005dac <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005da6:	4b22      	ldr	r3, [pc, #136]	; (8005e30 <xTaskResumeAll+0x130>)
 8005da8:	2201      	movs	r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dac:	4b1c      	ldr	r3, [pc, #112]	; (8005e20 <xTaskResumeAll+0x120>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1cb      	bne.n	8005d4c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d001      	beq.n	8005dbe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005dba:	f000 fb55 	bl	8006468 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005dbe:	4b1d      	ldr	r3, [pc, #116]	; (8005e34 <xTaskResumeAll+0x134>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d010      	beq.n	8005dec <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005dca:	f000 f847 	bl	8005e5c <xTaskIncrementTick>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005dd4:	4b16      	ldr	r3, [pc, #88]	; (8005e30 <xTaskResumeAll+0x130>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f1      	bne.n	8005dca <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005de6:	4b13      	ldr	r3, [pc, #76]	; (8005e34 <xTaskResumeAll+0x134>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005dec:	4b10      	ldr	r3, [pc, #64]	; (8005e30 <xTaskResumeAll+0x130>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d009      	beq.n	8005e08 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005df4:	2301      	movs	r3, #1
 8005df6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005df8:	4b0f      	ldr	r3, [pc, #60]	; (8005e38 <xTaskResumeAll+0x138>)
 8005dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	f3bf 8f4f 	dsb	sy
 8005e04:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e08:	f001 f8dc 	bl	8006fc4 <vPortExitCritical>

	return xAlreadyYielded;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}
 8005e16:	bf00      	nop
 8005e18:	200013ac 	.word	0x200013ac
 8005e1c:	20001384 	.word	0x20001384
 8005e20:	20001344 	.word	0x20001344
 8005e24:	2000138c 	.word	0x2000138c
 8005e28:	20000eb4 	.word	0x20000eb4
 8005e2c:	20000eb0 	.word	0x20000eb0
 8005e30:	20001398 	.word	0x20001398
 8005e34:	20001394 	.word	0x20001394
 8005e38:	e000ed04 	.word	0xe000ed04

08005e3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005e42:	4b05      	ldr	r3, [pc, #20]	; (8005e58 <xTaskGetTickCount+0x1c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e48:	687b      	ldr	r3, [r7, #4]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	20001388 	.word	0x20001388

08005e5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e62:	2300      	movs	r3, #0
 8005e64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e66:	4b4f      	ldr	r3, [pc, #316]	; (8005fa4 <xTaskIncrementTick+0x148>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f040 808f 	bne.w	8005f8e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e70:	4b4d      	ldr	r3, [pc, #308]	; (8005fa8 <xTaskIncrementTick+0x14c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	3301      	adds	r3, #1
 8005e76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e78:	4a4b      	ldr	r2, [pc, #300]	; (8005fa8 <xTaskIncrementTick+0x14c>)
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d120      	bne.n	8005ec6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e84:	4b49      	ldr	r3, [pc, #292]	; (8005fac <xTaskIncrementTick+0x150>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	603b      	str	r3, [r7, #0]
}
 8005ea0:	bf00      	nop
 8005ea2:	e7fe      	b.n	8005ea2 <xTaskIncrementTick+0x46>
 8005ea4:	4b41      	ldr	r3, [pc, #260]	; (8005fac <xTaskIncrementTick+0x150>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60fb      	str	r3, [r7, #12]
 8005eaa:	4b41      	ldr	r3, [pc, #260]	; (8005fb0 <xTaskIncrementTick+0x154>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a3f      	ldr	r2, [pc, #252]	; (8005fac <xTaskIncrementTick+0x150>)
 8005eb0:	6013      	str	r3, [r2, #0]
 8005eb2:	4a3f      	ldr	r2, [pc, #252]	; (8005fb0 <xTaskIncrementTick+0x154>)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6013      	str	r3, [r2, #0]
 8005eb8:	4b3e      	ldr	r3, [pc, #248]	; (8005fb4 <xTaskIncrementTick+0x158>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	4a3d      	ldr	r2, [pc, #244]	; (8005fb4 <xTaskIncrementTick+0x158>)
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	f000 fad1 	bl	8006468 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005ec6:	4b3c      	ldr	r3, [pc, #240]	; (8005fb8 <xTaskIncrementTick+0x15c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d349      	bcc.n	8005f64 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ed0:	4b36      	ldr	r3, [pc, #216]	; (8005fac <xTaskIncrementTick+0x150>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d104      	bne.n	8005ee4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eda:	4b37      	ldr	r3, [pc, #220]	; (8005fb8 <xTaskIncrementTick+0x15c>)
 8005edc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ee0:	601a      	str	r2, [r3, #0]
					break;
 8005ee2:	e03f      	b.n	8005f64 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ee4:	4b31      	ldr	r3, [pc, #196]	; (8005fac <xTaskIncrementTick+0x150>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ef4:	693a      	ldr	r2, [r7, #16]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d203      	bcs.n	8005f04 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005efc:	4a2e      	ldr	r2, [pc, #184]	; (8005fb8 <xTaskIncrementTick+0x15c>)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f02:	e02f      	b.n	8005f64 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	3304      	adds	r3, #4
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fe ff99 	bl	8004e40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d004      	beq.n	8005f20 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f16:	68bb      	ldr	r3, [r7, #8]
 8005f18:	3318      	adds	r3, #24
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fe ff90 	bl	8004e40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f24:	4b25      	ldr	r3, [pc, #148]	; (8005fbc <xTaskIncrementTick+0x160>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d903      	bls.n	8005f34 <xTaskIncrementTick+0xd8>
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f30:	4a22      	ldr	r2, [pc, #136]	; (8005fbc <xTaskIncrementTick+0x160>)
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4a1f      	ldr	r2, [pc, #124]	; (8005fc0 <xTaskIncrementTick+0x164>)
 8005f42:	441a      	add	r2, r3
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	3304      	adds	r3, #4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	f7fe ff1b 	bl	8004d86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f54:	4b1b      	ldr	r3, [pc, #108]	; (8005fc4 <xTaskIncrementTick+0x168>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5a:	429a      	cmp	r2, r3
 8005f5c:	d3b8      	bcc.n	8005ed0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f62:	e7b5      	b.n	8005ed0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f64:	4b17      	ldr	r3, [pc, #92]	; (8005fc4 <xTaskIncrementTick+0x168>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6a:	4915      	ldr	r1, [pc, #84]	; (8005fc0 <xTaskIncrementTick+0x164>)
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d901      	bls.n	8005f80 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f80:	4b11      	ldr	r3, [pc, #68]	; (8005fc8 <xTaskIncrementTick+0x16c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d007      	beq.n	8005f98 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	e004      	b.n	8005f98 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f8e:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <xTaskIncrementTick+0x170>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3301      	adds	r3, #1
 8005f94:	4a0d      	ldr	r2, [pc, #52]	; (8005fcc <xTaskIncrementTick+0x170>)
 8005f96:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f98:	697b      	ldr	r3, [r7, #20]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	200013ac 	.word	0x200013ac
 8005fa8:	20001388 	.word	0x20001388
 8005fac:	2000133c 	.word	0x2000133c
 8005fb0:	20001340 	.word	0x20001340
 8005fb4:	2000139c 	.word	0x2000139c
 8005fb8:	200013a4 	.word	0x200013a4
 8005fbc:	2000138c 	.word	0x2000138c
 8005fc0:	20000eb4 	.word	0x20000eb4
 8005fc4:	20000eb0 	.word	0x20000eb0
 8005fc8:	20001398 	.word	0x20001398
 8005fcc:	20001394 	.word	0x20001394

08005fd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005fd6:	4b28      	ldr	r3, [pc, #160]	; (8006078 <vTaskSwitchContext+0xa8>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d003      	beq.n	8005fe6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005fde:	4b27      	ldr	r3, [pc, #156]	; (800607c <vTaskSwitchContext+0xac>)
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fe4:	e041      	b.n	800606a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005fe6:	4b25      	ldr	r3, [pc, #148]	; (800607c <vTaskSwitchContext+0xac>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fec:	4b24      	ldr	r3, [pc, #144]	; (8006080 <vTaskSwitchContext+0xb0>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	e010      	b.n	8006016 <vTaskSwitchContext+0x46>
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <vTaskSwitchContext+0x40>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	f383 8811 	msr	BASEPRI, r3
 8006002:	f3bf 8f6f 	isb	sy
 8006006:	f3bf 8f4f 	dsb	sy
 800600a:	607b      	str	r3, [r7, #4]
}
 800600c:	bf00      	nop
 800600e:	e7fe      	b.n	800600e <vTaskSwitchContext+0x3e>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	3b01      	subs	r3, #1
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	491b      	ldr	r1, [pc, #108]	; (8006084 <vTaskSwitchContext+0xb4>)
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	4613      	mov	r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	440b      	add	r3, r1
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0e4      	beq.n	8005ff4 <vTaskSwitchContext+0x24>
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4a13      	ldr	r2, [pc, #76]	; (8006084 <vTaskSwitchContext+0xb4>)
 8006036:	4413      	add	r3, r2
 8006038:	60bb      	str	r3, [r7, #8]
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	605a      	str	r2, [r3, #4]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	3308      	adds	r3, #8
 800604c:	429a      	cmp	r2, r3
 800604e:	d104      	bne.n	800605a <vTaskSwitchContext+0x8a>
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	685a      	ldr	r2, [r3, #4]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	605a      	str	r2, [r3, #4]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	4a09      	ldr	r2, [pc, #36]	; (8006088 <vTaskSwitchContext+0xb8>)
 8006062:	6013      	str	r3, [r2, #0]
 8006064:	4a06      	ldr	r2, [pc, #24]	; (8006080 <vTaskSwitchContext+0xb0>)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6013      	str	r3, [r2, #0]
}
 800606a:	bf00      	nop
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop
 8006078:	200013ac 	.word	0x200013ac
 800607c:	20001398 	.word	0x20001398
 8006080:	2000138c 	.word	0x2000138c
 8006084:	20000eb4 	.word	0x20000eb4
 8006088:	20000eb0 	.word	0x20000eb0

0800608c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10a      	bne.n	80060b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	60fb      	str	r3, [r7, #12]
}
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060b2:	4b07      	ldr	r3, [pc, #28]	; (80060d0 <vTaskPlaceOnEventList+0x44>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3318      	adds	r3, #24
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fe fe87 	bl	8004dce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80060c0:	2101      	movs	r1, #1
 80060c2:	6838      	ldr	r0, [r7, #0]
 80060c4:	f000 fa7c 	bl	80065c0 <prvAddCurrentTaskToDelayedList>
}
 80060c8:	bf00      	nop
 80060ca:	3710      	adds	r7, #16
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}
 80060d0:	20000eb0 	.word	0x20000eb0

080060d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10a      	bne.n	80060fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80060e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ea:	f383 8811 	msr	BASEPRI, r3
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	f3bf 8f4f 	dsb	sy
 80060f6:	617b      	str	r3, [r7, #20]
}
 80060f8:	bf00      	nop
 80060fa:	e7fe      	b.n	80060fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060fc:	4b0a      	ldr	r3, [pc, #40]	; (8006128 <vTaskPlaceOnEventListRestricted+0x54>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	3318      	adds	r3, #24
 8006102:	4619      	mov	r1, r3
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7fe fe3e 	bl	8004d86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006110:	f04f 33ff 	mov.w	r3, #4294967295
 8006114:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	68b8      	ldr	r0, [r7, #8]
 800611a:	f000 fa51 	bl	80065c0 <prvAddCurrentTaskToDelayedList>
	}
 800611e:	bf00      	nop
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000eb0 	.word	0x20000eb0

0800612c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10a      	bne.n	8006158 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006146:	f383 8811 	msr	BASEPRI, r3
 800614a:	f3bf 8f6f 	isb	sy
 800614e:	f3bf 8f4f 	dsb	sy
 8006152:	60fb      	str	r3, [r7, #12]
}
 8006154:	bf00      	nop
 8006156:	e7fe      	b.n	8006156 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	3318      	adds	r3, #24
 800615c:	4618      	mov	r0, r3
 800615e:	f7fe fe6f 	bl	8004e40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006162:	4b1e      	ldr	r3, [pc, #120]	; (80061dc <xTaskRemoveFromEventList+0xb0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d11d      	bne.n	80061a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	3304      	adds	r3, #4
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe fe66 	bl	8004e40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006178:	4b19      	ldr	r3, [pc, #100]	; (80061e0 <xTaskRemoveFromEventList+0xb4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	429a      	cmp	r2, r3
 800617e:	d903      	bls.n	8006188 <xTaskRemoveFromEventList+0x5c>
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	4a16      	ldr	r2, [pc, #88]	; (80061e0 <xTaskRemoveFromEventList+0xb4>)
 8006186:	6013      	str	r3, [r2, #0]
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618c:	4613      	mov	r3, r2
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	4a13      	ldr	r2, [pc, #76]	; (80061e4 <xTaskRemoveFromEventList+0xb8>)
 8006196:	441a      	add	r2, r3
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	3304      	adds	r3, #4
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f7fe fdf1 	bl	8004d86 <vListInsertEnd>
 80061a4:	e005      	b.n	80061b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3318      	adds	r3, #24
 80061aa:	4619      	mov	r1, r3
 80061ac:	480e      	ldr	r0, [pc, #56]	; (80061e8 <xTaskRemoveFromEventList+0xbc>)
 80061ae:	f7fe fdea 	bl	8004d86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b6:	4b0d      	ldr	r3, [pc, #52]	; (80061ec <xTaskRemoveFromEventList+0xc0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	429a      	cmp	r2, r3
 80061be:	d905      	bls.n	80061cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80061c0:	2301      	movs	r3, #1
 80061c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80061c4:	4b0a      	ldr	r3, [pc, #40]	; (80061f0 <xTaskRemoveFromEventList+0xc4>)
 80061c6:	2201      	movs	r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e001      	b.n	80061d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80061cc:	2300      	movs	r3, #0
 80061ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80061d0:	697b      	ldr	r3, [r7, #20]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	200013ac 	.word	0x200013ac
 80061e0:	2000138c 	.word	0x2000138c
 80061e4:	20000eb4 	.word	0x20000eb4
 80061e8:	20001344 	.word	0x20001344
 80061ec:	20000eb0 	.word	0x20000eb0
 80061f0:	20001398 	.word	0x20001398

080061f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061fc:	4b06      	ldr	r3, [pc, #24]	; (8006218 <vTaskInternalSetTimeOutState+0x24>)
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006204:	4b05      	ldr	r3, [pc, #20]	; (800621c <vTaskInternalSetTimeOutState+0x28>)
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	605a      	str	r2, [r3, #4]
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr
 8006218:	2000139c 	.word	0x2000139c
 800621c:	20001388 	.word	0x20001388

08006220 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d10a      	bne.n	8006246 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006234:	f383 8811 	msr	BASEPRI, r3
 8006238:	f3bf 8f6f 	isb	sy
 800623c:	f3bf 8f4f 	dsb	sy
 8006240:	613b      	str	r3, [r7, #16]
}
 8006242:	bf00      	nop
 8006244:	e7fe      	b.n	8006244 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	60fb      	str	r3, [r7, #12]
}
 800625e:	bf00      	nop
 8006260:	e7fe      	b.n	8006260 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006262:	f000 fe7f 	bl	8006f64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006266:	4b1d      	ldr	r3, [pc, #116]	; (80062dc <xTaskCheckForTimeOut+0xbc>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	69ba      	ldr	r2, [r7, #24]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800627e:	d102      	bne.n	8006286 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006280:	2300      	movs	r3, #0
 8006282:	61fb      	str	r3, [r7, #28]
 8006284:	e023      	b.n	80062ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	4b15      	ldr	r3, [pc, #84]	; (80062e0 <xTaskCheckForTimeOut+0xc0>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	429a      	cmp	r2, r3
 8006290:	d007      	beq.n	80062a2 <xTaskCheckForTimeOut+0x82>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	429a      	cmp	r2, r3
 800629a:	d302      	bcc.n	80062a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800629c:	2301      	movs	r3, #1
 800629e:	61fb      	str	r3, [r7, #28]
 80062a0:	e015      	b.n	80062ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d20b      	bcs.n	80062c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	1ad2      	subs	r2, r2, r3
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f7ff ff9b 	bl	80061f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80062be:	2300      	movs	r3, #0
 80062c0:	61fb      	str	r3, [r7, #28]
 80062c2:	e004      	b.n	80062ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	2200      	movs	r2, #0
 80062c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80062ca:	2301      	movs	r3, #1
 80062cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80062ce:	f000 fe79 	bl	8006fc4 <vPortExitCritical>

	return xReturn;
 80062d2:	69fb      	ldr	r3, [r7, #28]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3720      	adds	r7, #32
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	20001388 	.word	0x20001388
 80062e0:	2000139c 	.word	0x2000139c

080062e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062e8:	4b03      	ldr	r3, [pc, #12]	; (80062f8 <vTaskMissedYield+0x14>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	601a      	str	r2, [r3, #0]
}
 80062ee:	bf00      	nop
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	20001398 	.word	0x20001398

080062fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006304:	f000 f852 	bl	80063ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006308:	4b06      	ldr	r3, [pc, #24]	; (8006324 <prvIdleTask+0x28>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b01      	cmp	r3, #1
 800630e:	d9f9      	bls.n	8006304 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006310:	4b05      	ldr	r3, [pc, #20]	; (8006328 <prvIdleTask+0x2c>)
 8006312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006320:	e7f0      	b.n	8006304 <prvIdleTask+0x8>
 8006322:	bf00      	nop
 8006324:	20000eb4 	.word	0x20000eb4
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006332:	2300      	movs	r3, #0
 8006334:	607b      	str	r3, [r7, #4]
 8006336:	e00c      	b.n	8006352 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	4613      	mov	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4a12      	ldr	r2, [pc, #72]	; (800638c <prvInitialiseTaskLists+0x60>)
 8006344:	4413      	add	r3, r2
 8006346:	4618      	mov	r0, r3
 8006348:	f7fe fcf0 	bl	8004d2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	3301      	adds	r3, #1
 8006350:	607b      	str	r3, [r7, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2b37      	cmp	r3, #55	; 0x37
 8006356:	d9ef      	bls.n	8006338 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006358:	480d      	ldr	r0, [pc, #52]	; (8006390 <prvInitialiseTaskLists+0x64>)
 800635a:	f7fe fce7 	bl	8004d2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800635e:	480d      	ldr	r0, [pc, #52]	; (8006394 <prvInitialiseTaskLists+0x68>)
 8006360:	f7fe fce4 	bl	8004d2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006364:	480c      	ldr	r0, [pc, #48]	; (8006398 <prvInitialiseTaskLists+0x6c>)
 8006366:	f7fe fce1 	bl	8004d2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800636a:	480c      	ldr	r0, [pc, #48]	; (800639c <prvInitialiseTaskLists+0x70>)
 800636c:	f7fe fcde 	bl	8004d2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006370:	480b      	ldr	r0, [pc, #44]	; (80063a0 <prvInitialiseTaskLists+0x74>)
 8006372:	f7fe fcdb 	bl	8004d2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006376:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <prvInitialiseTaskLists+0x78>)
 8006378:	4a05      	ldr	r2, [pc, #20]	; (8006390 <prvInitialiseTaskLists+0x64>)
 800637a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800637c:	4b0a      	ldr	r3, [pc, #40]	; (80063a8 <prvInitialiseTaskLists+0x7c>)
 800637e:	4a05      	ldr	r2, [pc, #20]	; (8006394 <prvInitialiseTaskLists+0x68>)
 8006380:	601a      	str	r2, [r3, #0]
}
 8006382:	bf00      	nop
 8006384:	3708      	adds	r7, #8
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}
 800638a:	bf00      	nop
 800638c:	20000eb4 	.word	0x20000eb4
 8006390:	20001314 	.word	0x20001314
 8006394:	20001328 	.word	0x20001328
 8006398:	20001344 	.word	0x20001344
 800639c:	20001358 	.word	0x20001358
 80063a0:	20001370 	.word	0x20001370
 80063a4:	2000133c 	.word	0x2000133c
 80063a8:	20001340 	.word	0x20001340

080063ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063b2:	e019      	b.n	80063e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80063b4:	f000 fdd6 	bl	8006f64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b8:	4b10      	ldr	r3, [pc, #64]	; (80063fc <prvCheckTasksWaitingTermination+0x50>)
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3304      	adds	r3, #4
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7fe fd3b 	bl	8004e40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80063ca:	4b0d      	ldr	r3, [pc, #52]	; (8006400 <prvCheckTasksWaitingTermination+0x54>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	3b01      	subs	r3, #1
 80063d0:	4a0b      	ldr	r2, [pc, #44]	; (8006400 <prvCheckTasksWaitingTermination+0x54>)
 80063d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80063d4:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <prvCheckTasksWaitingTermination+0x58>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3b01      	subs	r3, #1
 80063da:	4a0a      	ldr	r2, [pc, #40]	; (8006404 <prvCheckTasksWaitingTermination+0x58>)
 80063dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80063de:	f000 fdf1 	bl	8006fc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f810 	bl	8006408 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063e8:	4b06      	ldr	r3, [pc, #24]	; (8006404 <prvCheckTasksWaitingTermination+0x58>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e1      	bne.n	80063b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063f0:	bf00      	nop
 80063f2:	bf00      	nop
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20001358 	.word	0x20001358
 8006400:	20001384 	.word	0x20001384
 8006404:	2000136c 	.word	0x2000136c

08006408 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006416:	2b00      	cmp	r3, #0
 8006418:	d108      	bne.n	800642c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	4618      	mov	r0, r3
 8006420:	f000 ff8e 	bl	8007340 <vPortFree>
				vPortFree( pxTCB );
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 ff8b 	bl	8007340 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800642a:	e018      	b.n	800645e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006432:	2b01      	cmp	r3, #1
 8006434:	d103      	bne.n	800643e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 ff82 	bl	8007340 <vPortFree>
	}
 800643c:	e00f      	b.n	800645e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006444:	2b02      	cmp	r3, #2
 8006446:	d00a      	beq.n	800645e <prvDeleteTCB+0x56>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	60fb      	str	r3, [r7, #12]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <prvDeleteTCB+0x54>
	}
 800645e:	bf00      	nop
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800646e:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <prvResetNextTaskUnblockTime+0x38>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d104      	bne.n	8006482 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006478:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <prvResetNextTaskUnblockTime+0x3c>)
 800647a:	f04f 32ff 	mov.w	r2, #4294967295
 800647e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006480:	e008      	b.n	8006494 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006482:	4b07      	ldr	r3, [pc, #28]	; (80064a0 <prvResetNextTaskUnblockTime+0x38>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	685b      	ldr	r3, [r3, #4]
 8006490:	4a04      	ldr	r2, [pc, #16]	; (80064a4 <prvResetNextTaskUnblockTime+0x3c>)
 8006492:	6013      	str	r3, [r2, #0]
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	2000133c 	.word	0x2000133c
 80064a4:	200013a4 	.word	0x200013a4

080064a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80064ae:	4b0b      	ldr	r3, [pc, #44]	; (80064dc <xTaskGetSchedulerState+0x34>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d102      	bne.n	80064bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80064b6:	2301      	movs	r3, #1
 80064b8:	607b      	str	r3, [r7, #4]
 80064ba:	e008      	b.n	80064ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064bc:	4b08      	ldr	r3, [pc, #32]	; (80064e0 <xTaskGetSchedulerState+0x38>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d102      	bne.n	80064ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80064c4:	2302      	movs	r3, #2
 80064c6:	607b      	str	r3, [r7, #4]
 80064c8:	e001      	b.n	80064ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80064ca:	2300      	movs	r3, #0
 80064cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80064ce:	687b      	ldr	r3, [r7, #4]
	}
 80064d0:	4618      	mov	r0, r3
 80064d2:	370c      	adds	r7, #12
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	20001390 	.word	0x20001390
 80064e0:	200013ac 	.word	0x200013ac

080064e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d056      	beq.n	80065a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80064fa:	4b2e      	ldr	r3, [pc, #184]	; (80065b4 <xTaskPriorityDisinherit+0xd0>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	693a      	ldr	r2, [r7, #16]
 8006500:	429a      	cmp	r2, r3
 8006502:	d00a      	beq.n	800651a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	60fb      	str	r3, [r7, #12]
}
 8006516:	bf00      	nop
 8006518:	e7fe      	b.n	8006518 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800651a:	693b      	ldr	r3, [r7, #16]
 800651c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10a      	bne.n	8006538 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	60bb      	str	r3, [r7, #8]
}
 8006534:	bf00      	nop
 8006536:	e7fe      	b.n	8006536 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800653c:	1e5a      	subs	r2, r3, #1
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800654a:	429a      	cmp	r2, r3
 800654c:	d02c      	beq.n	80065a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006552:	2b00      	cmp	r3, #0
 8006554:	d128      	bne.n	80065a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	3304      	adds	r3, #4
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe fc70 	bl	8004e40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006578:	4b0f      	ldr	r3, [pc, #60]	; (80065b8 <xTaskPriorityDisinherit+0xd4>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	429a      	cmp	r2, r3
 800657e:	d903      	bls.n	8006588 <xTaskPriorityDisinherit+0xa4>
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006584:	4a0c      	ldr	r2, [pc, #48]	; (80065b8 <xTaskPriorityDisinherit+0xd4>)
 8006586:	6013      	str	r3, [r2, #0]
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800658c:	4613      	mov	r3, r2
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	4413      	add	r3, r2
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4a09      	ldr	r2, [pc, #36]	; (80065bc <xTaskPriorityDisinherit+0xd8>)
 8006596:	441a      	add	r2, r3
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	3304      	adds	r3, #4
 800659c:	4619      	mov	r1, r3
 800659e:	4610      	mov	r0, r2
 80065a0:	f7fe fbf1 	bl	8004d86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80065a4:	2301      	movs	r3, #1
 80065a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80065a8:	697b      	ldr	r3, [r7, #20]
	}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000eb0 	.word	0x20000eb0
 80065b8:	2000138c 	.word	0x2000138c
 80065bc:	20000eb4 	.word	0x20000eb4

080065c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80065ca:	4b21      	ldr	r3, [pc, #132]	; (8006650 <prvAddCurrentTaskToDelayedList+0x90>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065d0:	4b20      	ldr	r3, [pc, #128]	; (8006654 <prvAddCurrentTaskToDelayedList+0x94>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3304      	adds	r3, #4
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7fe fc32 	bl	8004e40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e2:	d10a      	bne.n	80065fa <prvAddCurrentTaskToDelayedList+0x3a>
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80065ea:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <prvAddCurrentTaskToDelayedList+0x94>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	3304      	adds	r3, #4
 80065f0:	4619      	mov	r1, r3
 80065f2:	4819      	ldr	r0, [pc, #100]	; (8006658 <prvAddCurrentTaskToDelayedList+0x98>)
 80065f4:	f7fe fbc7 	bl	8004d86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80065f8:	e026      	b.n	8006648 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80065fa:	68fa      	ldr	r2, [r7, #12]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	4413      	add	r3, r2
 8006600:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006602:	4b14      	ldr	r3, [pc, #80]	; (8006654 <prvAddCurrentTaskToDelayedList+0x94>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800660a:	68ba      	ldr	r2, [r7, #8]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	429a      	cmp	r2, r3
 8006610:	d209      	bcs.n	8006626 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006612:	4b12      	ldr	r3, [pc, #72]	; (800665c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <prvAddCurrentTaskToDelayedList+0x94>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3304      	adds	r3, #4
 800661c:	4619      	mov	r1, r3
 800661e:	4610      	mov	r0, r2
 8006620:	f7fe fbd5 	bl	8004dce <vListInsert>
}
 8006624:	e010      	b.n	8006648 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006626:	4b0e      	ldr	r3, [pc, #56]	; (8006660 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006628:	681a      	ldr	r2, [r3, #0]
 800662a:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <prvAddCurrentTaskToDelayedList+0x94>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3304      	adds	r3, #4
 8006630:	4619      	mov	r1, r3
 8006632:	4610      	mov	r0, r2
 8006634:	f7fe fbcb 	bl	8004dce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006638:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <prvAddCurrentTaskToDelayedList+0xa4>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	429a      	cmp	r2, r3
 8006640:	d202      	bcs.n	8006648 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006642:	4a08      	ldr	r2, [pc, #32]	; (8006664 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	6013      	str	r3, [r2, #0]
}
 8006648:	bf00      	nop
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	20001388 	.word	0x20001388
 8006654:	20000eb0 	.word	0x20000eb0
 8006658:	20001370 	.word	0x20001370
 800665c:	20001340 	.word	0x20001340
 8006660:	2000133c 	.word	0x2000133c
 8006664:	200013a4 	.word	0x200013a4

08006668 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b08a      	sub	sp, #40	; 0x28
 800666c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800666e:	2300      	movs	r3, #0
 8006670:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006672:	f000 fb07 	bl	8006c84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006676:	4b1c      	ldr	r3, [pc, #112]	; (80066e8 <xTimerCreateTimerTask+0x80>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d021      	beq.n	80066c2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800667e:	2300      	movs	r3, #0
 8006680:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006682:	2300      	movs	r3, #0
 8006684:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006686:	1d3a      	adds	r2, r7, #4
 8006688:	f107 0108 	add.w	r1, r7, #8
 800668c:	f107 030c 	add.w	r3, r7, #12
 8006690:	4618      	mov	r0, r3
 8006692:	f7fe fb31 	bl	8004cf8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	68fa      	ldr	r2, [r7, #12]
 800669c:	9202      	str	r2, [sp, #8]
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	2302      	movs	r3, #2
 80066a2:	9300      	str	r3, [sp, #0]
 80066a4:	2300      	movs	r3, #0
 80066a6:	460a      	mov	r2, r1
 80066a8:	4910      	ldr	r1, [pc, #64]	; (80066ec <xTimerCreateTimerTask+0x84>)
 80066aa:	4811      	ldr	r0, [pc, #68]	; (80066f0 <xTimerCreateTimerTask+0x88>)
 80066ac:	f7ff f8de 	bl	800586c <xTaskCreateStatic>
 80066b0:	4603      	mov	r3, r0
 80066b2:	4a10      	ldr	r2, [pc, #64]	; (80066f4 <xTimerCreateTimerTask+0x8c>)
 80066b4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80066b6:	4b0f      	ldr	r3, [pc, #60]	; (80066f4 <xTimerCreateTimerTask+0x8c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d001      	beq.n	80066c2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80066be:	2301      	movs	r3, #1
 80066c0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10a      	bne.n	80066de <xTimerCreateTimerTask+0x76>
	__asm volatile
 80066c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066cc:	f383 8811 	msr	BASEPRI, r3
 80066d0:	f3bf 8f6f 	isb	sy
 80066d4:	f3bf 8f4f 	dsb	sy
 80066d8:	613b      	str	r3, [r7, #16]
}
 80066da:	bf00      	nop
 80066dc:	e7fe      	b.n	80066dc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80066de:	697b      	ldr	r3, [r7, #20]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	200013e0 	.word	0x200013e0
 80066ec:	08007638 	.word	0x08007638
 80066f0:	0800682d 	.word	0x0800682d
 80066f4:	200013e4 	.word	0x200013e4

080066f8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08a      	sub	sp, #40	; 0x28
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]
 8006704:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006706:	2300      	movs	r3, #0
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006714:	f383 8811 	msr	BASEPRI, r3
 8006718:	f3bf 8f6f 	isb	sy
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	623b      	str	r3, [r7, #32]
}
 8006722:	bf00      	nop
 8006724:	e7fe      	b.n	8006724 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006726:	4b1a      	ldr	r3, [pc, #104]	; (8006790 <xTimerGenericCommand+0x98>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d02a      	beq.n	8006784 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2b05      	cmp	r3, #5
 800673e:	dc18      	bgt.n	8006772 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006740:	f7ff feb2 	bl	80064a8 <xTaskGetSchedulerState>
 8006744:	4603      	mov	r3, r0
 8006746:	2b02      	cmp	r3, #2
 8006748:	d109      	bne.n	800675e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800674a:	4b11      	ldr	r3, [pc, #68]	; (8006790 <xTimerGenericCommand+0x98>)
 800674c:	6818      	ldr	r0, [r3, #0]
 800674e:	f107 0110 	add.w	r1, r7, #16
 8006752:	2300      	movs	r3, #0
 8006754:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006756:	f7fe fca1 	bl	800509c <xQueueGenericSend>
 800675a:	6278      	str	r0, [r7, #36]	; 0x24
 800675c:	e012      	b.n	8006784 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800675e:	4b0c      	ldr	r3, [pc, #48]	; (8006790 <xTimerGenericCommand+0x98>)
 8006760:	6818      	ldr	r0, [r3, #0]
 8006762:	f107 0110 	add.w	r1, r7, #16
 8006766:	2300      	movs	r3, #0
 8006768:	2200      	movs	r2, #0
 800676a:	f7fe fc97 	bl	800509c <xQueueGenericSend>
 800676e:	6278      	str	r0, [r7, #36]	; 0x24
 8006770:	e008      	b.n	8006784 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006772:	4b07      	ldr	r3, [pc, #28]	; (8006790 <xTimerGenericCommand+0x98>)
 8006774:	6818      	ldr	r0, [r3, #0]
 8006776:	f107 0110 	add.w	r1, r7, #16
 800677a:	2300      	movs	r3, #0
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	f7fe fd8b 	bl	8005298 <xQueueGenericSendFromISR>
 8006782:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006786:	4618      	mov	r0, r3
 8006788:	3728      	adds	r7, #40	; 0x28
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	200013e0 	.word	0x200013e0

08006794 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b088      	sub	sp, #32
 8006798:	af02      	add	r7, sp, #8
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800679e:	4b22      	ldr	r3, [pc, #136]	; (8006828 <prvProcessExpiredTimer+0x94>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	3304      	adds	r3, #4
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe fb47 	bl	8004e40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067b8:	f003 0304 	and.w	r3, r3, #4
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d022      	beq.n	8006806 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	699a      	ldr	r2, [r3, #24]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	18d1      	adds	r1, r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	6978      	ldr	r0, [r7, #20]
 80067ce:	f000 f8d1 	bl	8006974 <prvInsertTimerInActiveList>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d01f      	beq.n	8006818 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80067d8:	2300      	movs	r3, #0
 80067da:	9300      	str	r3, [sp, #0]
 80067dc:	2300      	movs	r3, #0
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	2100      	movs	r1, #0
 80067e2:	6978      	ldr	r0, [r7, #20]
 80067e4:	f7ff ff88 	bl	80066f8 <xTimerGenericCommand>
 80067e8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d113      	bne.n	8006818 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	60fb      	str	r3, [r7, #12]
}
 8006802:	bf00      	nop
 8006804:	e7fe      	b.n	8006804 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800680c:	f023 0301 	bic.w	r3, r3, #1
 8006810:	b2da      	uxtb	r2, r3
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	6a1b      	ldr	r3, [r3, #32]
 800681c:	6978      	ldr	r0, [r7, #20]
 800681e:	4798      	blx	r3
}
 8006820:	bf00      	nop
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	200013d8 	.word	0x200013d8

0800682c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006834:	f107 0308 	add.w	r3, r7, #8
 8006838:	4618      	mov	r0, r3
 800683a:	f000 f857 	bl	80068ec <prvGetNextExpireTime>
 800683e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4619      	mov	r1, r3
 8006844:	68f8      	ldr	r0, [r7, #12]
 8006846:	f000 f803 	bl	8006850 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800684a:	f000 f8d5 	bl	80069f8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800684e:	e7f1      	b.n	8006834 <prvTimerTask+0x8>

08006850 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800685a:	f7ff fa43 	bl	8005ce4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800685e:	f107 0308 	add.w	r3, r7, #8
 8006862:	4618      	mov	r0, r3
 8006864:	f000 f866 	bl	8006934 <prvSampleTimeNow>
 8006868:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d130      	bne.n	80068d2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10a      	bne.n	800688c <prvProcessTimerOrBlockTask+0x3c>
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	429a      	cmp	r2, r3
 800687c:	d806      	bhi.n	800688c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800687e:	f7ff fa3f 	bl	8005d00 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006882:	68f9      	ldr	r1, [r7, #12]
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f7ff ff85 	bl	8006794 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800688a:	e024      	b.n	80068d6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d008      	beq.n	80068a4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006892:	4b13      	ldr	r3, [pc, #76]	; (80068e0 <prvProcessTimerOrBlockTask+0x90>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <prvProcessTimerOrBlockTask+0x50>
 800689c:	2301      	movs	r3, #1
 800689e:	e000      	b.n	80068a2 <prvProcessTimerOrBlockTask+0x52>
 80068a0:	2300      	movs	r3, #0
 80068a2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80068a4:	4b0f      	ldr	r3, [pc, #60]	; (80068e4 <prvProcessTimerOrBlockTask+0x94>)
 80068a6:	6818      	ldr	r0, [r3, #0]
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	683a      	ldr	r2, [r7, #0]
 80068b0:	4619      	mov	r1, r3
 80068b2:	f7fe ffa7 	bl	8005804 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80068b6:	f7ff fa23 	bl	8005d00 <xTaskResumeAll>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d10a      	bne.n	80068d6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80068c0:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <prvProcessTimerOrBlockTask+0x98>)
 80068c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068c6:	601a      	str	r2, [r3, #0]
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	f3bf 8f6f 	isb	sy
}
 80068d0:	e001      	b.n	80068d6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80068d2:	f7ff fa15 	bl	8005d00 <xTaskResumeAll>
}
 80068d6:	bf00      	nop
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	200013dc 	.word	0x200013dc
 80068e4:	200013e0 	.word	0x200013e0
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80068f4:	4b0e      	ldr	r3, [pc, #56]	; (8006930 <prvGetNextExpireTime+0x44>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <prvGetNextExpireTime+0x16>
 80068fe:	2201      	movs	r2, #1
 8006900:	e000      	b.n	8006904 <prvGetNextExpireTime+0x18>
 8006902:	2200      	movs	r2, #0
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d105      	bne.n	800691c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006910:	4b07      	ldr	r3, [pc, #28]	; (8006930 <prvGetNextExpireTime+0x44>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	e001      	b.n	8006920 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800691c:	2300      	movs	r3, #0
 800691e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006920:	68fb      	ldr	r3, [r7, #12]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3714      	adds	r7, #20
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	200013d8 	.word	0x200013d8

08006934 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800693c:	f7ff fa7e 	bl	8005e3c <xTaskGetTickCount>
 8006940:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006942:	4b0b      	ldr	r3, [pc, #44]	; (8006970 <prvSampleTimeNow+0x3c>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	429a      	cmp	r2, r3
 800694a:	d205      	bcs.n	8006958 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800694c:	f000 f936 	bl	8006bbc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	e002      	b.n	800695e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800695e:	4a04      	ldr	r2, [pc, #16]	; (8006970 <prvSampleTimeNow+0x3c>)
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006964:	68fb      	ldr	r3, [r7, #12]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	200013e8 	.word	0x200013e8

08006974 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	607a      	str	r2, [r7, #4]
 8006980:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	68ba      	ldr	r2, [r7, #8]
 800698a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006992:	68ba      	ldr	r2, [r7, #8]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	429a      	cmp	r2, r3
 8006998:	d812      	bhi.n	80069c0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	1ad2      	subs	r2, r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d302      	bcc.n	80069ae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80069a8:	2301      	movs	r3, #1
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	e01b      	b.n	80069e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80069ae:	4b10      	ldr	r3, [pc, #64]	; (80069f0 <prvInsertTimerInActiveList+0x7c>)
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3304      	adds	r3, #4
 80069b6:	4619      	mov	r1, r3
 80069b8:	4610      	mov	r0, r2
 80069ba:	f7fe fa08 	bl	8004dce <vListInsert>
 80069be:	e012      	b.n	80069e6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d206      	bcs.n	80069d6 <prvInsertTimerInActiveList+0x62>
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d302      	bcc.n	80069d6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80069d0:	2301      	movs	r3, #1
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	e007      	b.n	80069e6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80069d6:	4b07      	ldr	r3, [pc, #28]	; (80069f4 <prvInsertTimerInActiveList+0x80>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	3304      	adds	r3, #4
 80069de:	4619      	mov	r1, r3
 80069e0:	4610      	mov	r0, r2
 80069e2:	f7fe f9f4 	bl	8004dce <vListInsert>
		}
	}

	return xProcessTimerNow;
 80069e6:	697b      	ldr	r3, [r7, #20]
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3718      	adds	r7, #24
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}
 80069f0:	200013dc 	.word	0x200013dc
 80069f4:	200013d8 	.word	0x200013d8

080069f8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b08e      	sub	sp, #56	; 0x38
 80069fc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069fe:	e0ca      	b.n	8006b96 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	da18      	bge.n	8006a38 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006a06:	1d3b      	adds	r3, r7, #4
 8006a08:	3304      	adds	r3, #4
 8006a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d10a      	bne.n	8006a28 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a16:	f383 8811 	msr	BASEPRI, r3
 8006a1a:	f3bf 8f6f 	isb	sy
 8006a1e:	f3bf 8f4f 	dsb	sy
 8006a22:	61fb      	str	r3, [r7, #28]
}
 8006a24:	bf00      	nop
 8006a26:	e7fe      	b.n	8006a26 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a2e:	6850      	ldr	r0, [r2, #4]
 8006a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a32:	6892      	ldr	r2, [r2, #8]
 8006a34:	4611      	mov	r1, r2
 8006a36:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f2c0 80ab 	blt.w	8006b96 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d004      	beq.n	8006a56 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a4e:	3304      	adds	r3, #4
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7fe f9f5 	bl	8004e40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a56:	463b      	mov	r3, r7
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff ff6b 	bl	8006934 <prvSampleTimeNow>
 8006a5e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b09      	cmp	r3, #9
 8006a64:	f200 8096 	bhi.w	8006b94 <prvProcessReceivedCommands+0x19c>
 8006a68:	a201      	add	r2, pc, #4	; (adr r2, 8006a70 <prvProcessReceivedCommands+0x78>)
 8006a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6e:	bf00      	nop
 8006a70:	08006a99 	.word	0x08006a99
 8006a74:	08006a99 	.word	0x08006a99
 8006a78:	08006a99 	.word	0x08006a99
 8006a7c:	08006b0d 	.word	0x08006b0d
 8006a80:	08006b21 	.word	0x08006b21
 8006a84:	08006b6b 	.word	0x08006b6b
 8006a88:	08006a99 	.word	0x08006a99
 8006a8c:	08006a99 	.word	0x08006a99
 8006a90:	08006b0d 	.word	0x08006b0d
 8006a94:	08006b21 	.word	0x08006b21
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a9e:	f043 0301 	orr.w	r3, r3, #1
 8006aa2:	b2da      	uxtb	r2, r3
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006aaa:	68ba      	ldr	r2, [r7, #8]
 8006aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	18d1      	adds	r1, r2, r3
 8006ab2:	68bb      	ldr	r3, [r7, #8]
 8006ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ab8:	f7ff ff5c 	bl	8006974 <prvInsertTimerInActiveList>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d069      	beq.n	8006b96 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac4:	6a1b      	ldr	r3, [r3, #32]
 8006ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ac8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ad0:	f003 0304 	and.w	r3, r3, #4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d05e      	beq.n	8006b96 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	441a      	add	r2, r3
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	9300      	str	r3, [sp, #0]
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	2100      	movs	r1, #0
 8006ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aea:	f7ff fe05 	bl	80066f8 <xTimerGenericCommand>
 8006aee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d14f      	bne.n	8006b96 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	61bb      	str	r3, [r7, #24]
}
 8006b08:	bf00      	nop
 8006b0a:	e7fe      	b.n	8006b0a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b12:	f023 0301 	bic.w	r3, r3, #1
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006b1e:	e03a      	b.n	8006b96 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b26:	f043 0301 	orr.w	r3, r3, #1
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b36:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d10a      	bne.n	8006b56 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b44:	f383 8811 	msr	BASEPRI, r3
 8006b48:	f3bf 8f6f 	isb	sy
 8006b4c:	f3bf 8f4f 	dsb	sy
 8006b50:	617b      	str	r3, [r7, #20]
}
 8006b52:	bf00      	nop
 8006b54:	e7fe      	b.n	8006b54 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	699a      	ldr	r2, [r3, #24]
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	18d1      	adds	r1, r2, r3
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b64:	f7ff ff06 	bl	8006974 <prvInsertTimerInActiveList>
					break;
 8006b68:	e015      	b.n	8006b96 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b70:	f003 0302 	and.w	r3, r3, #2
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d103      	bne.n	8006b80 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b7a:	f000 fbe1 	bl	8007340 <vPortFree>
 8006b7e:	e00a      	b.n	8006b96 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b86:	f023 0301 	bic.w	r3, r3, #1
 8006b8a:	b2da      	uxtb	r2, r3
 8006b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b92:	e000      	b.n	8006b96 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006b94:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b96:	4b08      	ldr	r3, [pc, #32]	; (8006bb8 <prvProcessReceivedCommands+0x1c0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	1d39      	adds	r1, r7, #4
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fe fc16 	bl	80053d0 <xQueueReceive>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f47f af2a 	bne.w	8006a00 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006bac:	bf00      	nop
 8006bae:	bf00      	nop
 8006bb0:	3730      	adds	r7, #48	; 0x30
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	200013e0 	.word	0x200013e0

08006bbc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bc2:	e048      	b.n	8006c56 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bc4:	4b2d      	ldr	r3, [pc, #180]	; (8006c7c <prvSwitchTimerLists+0xc0>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bce:	4b2b      	ldr	r3, [pc, #172]	; (8006c7c <prvSwitchTimerLists+0xc0>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	3304      	adds	r3, #4
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7fe f92f 	bl	8004e40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	68f8      	ldr	r0, [r7, #12]
 8006be8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bf0:	f003 0304 	and.w	r3, r3, #4
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d02e      	beq.n	8006c56 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	699b      	ldr	r3, [r3, #24]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	4413      	add	r3, r2
 8006c00:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d90e      	bls.n	8006c28 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	68ba      	ldr	r2, [r7, #8]
 8006c0e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c16:	4b19      	ldr	r3, [pc, #100]	; (8006c7c <prvSwitchTimerLists+0xc0>)
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3304      	adds	r3, #4
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4610      	mov	r0, r2
 8006c22:	f7fe f8d4 	bl	8004dce <vListInsert>
 8006c26:	e016      	b.n	8006c56 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c28:	2300      	movs	r3, #0
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	2100      	movs	r1, #0
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f7ff fd60 	bl	80066f8 <xTimerGenericCommand>
 8006c38:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d10a      	bne.n	8006c56 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	603b      	str	r3, [r7, #0]
}
 8006c52:	bf00      	nop
 8006c54:	e7fe      	b.n	8006c54 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c56:	4b09      	ldr	r3, [pc, #36]	; (8006c7c <prvSwitchTimerLists+0xc0>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1b1      	bne.n	8006bc4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006c60:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <prvSwitchTimerLists+0xc0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006c66:	4b06      	ldr	r3, [pc, #24]	; (8006c80 <prvSwitchTimerLists+0xc4>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a04      	ldr	r2, [pc, #16]	; (8006c7c <prvSwitchTimerLists+0xc0>)
 8006c6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006c6e:	4a04      	ldr	r2, [pc, #16]	; (8006c80 <prvSwitchTimerLists+0xc4>)
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	6013      	str	r3, [r2, #0]
}
 8006c74:	bf00      	nop
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	200013d8 	.word	0x200013d8
 8006c80:	200013dc 	.word	0x200013dc

08006c84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006c8a:	f000 f96b 	bl	8006f64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c8e:	4b15      	ldr	r3, [pc, #84]	; (8006ce4 <prvCheckForValidListAndQueue+0x60>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d120      	bne.n	8006cd8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c96:	4814      	ldr	r0, [pc, #80]	; (8006ce8 <prvCheckForValidListAndQueue+0x64>)
 8006c98:	f7fe f848 	bl	8004d2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c9c:	4813      	ldr	r0, [pc, #76]	; (8006cec <prvCheckForValidListAndQueue+0x68>)
 8006c9e:	f7fe f845 	bl	8004d2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006ca2:	4b13      	ldr	r3, [pc, #76]	; (8006cf0 <prvCheckForValidListAndQueue+0x6c>)
 8006ca4:	4a10      	ldr	r2, [pc, #64]	; (8006ce8 <prvCheckForValidListAndQueue+0x64>)
 8006ca6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006ca8:	4b12      	ldr	r3, [pc, #72]	; (8006cf4 <prvCheckForValidListAndQueue+0x70>)
 8006caa:	4a10      	ldr	r2, [pc, #64]	; (8006cec <prvCheckForValidListAndQueue+0x68>)
 8006cac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006cae:	2300      	movs	r3, #0
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	4b11      	ldr	r3, [pc, #68]	; (8006cf8 <prvCheckForValidListAndQueue+0x74>)
 8006cb4:	4a11      	ldr	r2, [pc, #68]	; (8006cfc <prvCheckForValidListAndQueue+0x78>)
 8006cb6:	2110      	movs	r1, #16
 8006cb8:	200a      	movs	r0, #10
 8006cba:	f7fe f953 	bl	8004f64 <xQueueGenericCreateStatic>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	4a08      	ldr	r2, [pc, #32]	; (8006ce4 <prvCheckForValidListAndQueue+0x60>)
 8006cc2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006cc4:	4b07      	ldr	r3, [pc, #28]	; (8006ce4 <prvCheckForValidListAndQueue+0x60>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d005      	beq.n	8006cd8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006ccc:	4b05      	ldr	r3, [pc, #20]	; (8006ce4 <prvCheckForValidListAndQueue+0x60>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	490b      	ldr	r1, [pc, #44]	; (8006d00 <prvCheckForValidListAndQueue+0x7c>)
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fe fd6c 	bl	80057b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006cd8:	f000 f974 	bl	8006fc4 <vPortExitCritical>
}
 8006cdc:	bf00      	nop
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	200013e0 	.word	0x200013e0
 8006ce8:	200013b0 	.word	0x200013b0
 8006cec:	200013c4 	.word	0x200013c4
 8006cf0:	200013d8 	.word	0x200013d8
 8006cf4:	200013dc 	.word	0x200013dc
 8006cf8:	2000148c 	.word	0x2000148c
 8006cfc:	200013ec 	.word	0x200013ec
 8006d00:	08007640 	.word	0x08007640

08006d04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	3b04      	subs	r3, #4
 8006d14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006d1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3b04      	subs	r3, #4
 8006d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f023 0201 	bic.w	r2, r3, #1
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3b04      	subs	r3, #4
 8006d32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006d34:	4a0c      	ldr	r2, [pc, #48]	; (8006d68 <pxPortInitialiseStack+0x64>)
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3b14      	subs	r3, #20
 8006d3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006d40:	687a      	ldr	r2, [r7, #4]
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	3b04      	subs	r3, #4
 8006d4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f06f 0202 	mvn.w	r2, #2
 8006d52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	3b20      	subs	r3, #32
 8006d58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr
 8006d68:	08006d6d 	.word	0x08006d6d

08006d6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006d72:	2300      	movs	r3, #0
 8006d74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006d76:	4b12      	ldr	r3, [pc, #72]	; (8006dc0 <prvTaskExitError+0x54>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d7e:	d00a      	beq.n	8006d96 <prvTaskExitError+0x2a>
	__asm volatile
 8006d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	60fb      	str	r3, [r7, #12]
}
 8006d92:	bf00      	nop
 8006d94:	e7fe      	b.n	8006d94 <prvTaskExitError+0x28>
	__asm volatile
 8006d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9a:	f383 8811 	msr	BASEPRI, r3
 8006d9e:	f3bf 8f6f 	isb	sy
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	60bb      	str	r3, [r7, #8]
}
 8006da8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006daa:	bf00      	nop
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0fc      	beq.n	8006dac <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006db2:	bf00      	nop
 8006db4:	bf00      	nop
 8006db6:	3714      	adds	r7, #20
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	2000000c 	.word	0x2000000c
	...

08006dd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006dd0:	4b07      	ldr	r3, [pc, #28]	; (8006df0 <pxCurrentTCBConst2>)
 8006dd2:	6819      	ldr	r1, [r3, #0]
 8006dd4:	6808      	ldr	r0, [r1, #0]
 8006dd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dda:	f380 8809 	msr	PSP, r0
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f04f 0000 	mov.w	r0, #0
 8006de6:	f380 8811 	msr	BASEPRI, r0
 8006dea:	4770      	bx	lr
 8006dec:	f3af 8000 	nop.w

08006df0 <pxCurrentTCBConst2>:
 8006df0:	20000eb0 	.word	0x20000eb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006df4:	bf00      	nop
 8006df6:	bf00      	nop

08006df8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006df8:	4808      	ldr	r0, [pc, #32]	; (8006e1c <prvPortStartFirstTask+0x24>)
 8006dfa:	6800      	ldr	r0, [r0, #0]
 8006dfc:	6800      	ldr	r0, [r0, #0]
 8006dfe:	f380 8808 	msr	MSP, r0
 8006e02:	f04f 0000 	mov.w	r0, #0
 8006e06:	f380 8814 	msr	CONTROL, r0
 8006e0a:	b662      	cpsie	i
 8006e0c:	b661      	cpsie	f
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	df00      	svc	0
 8006e18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006e1a:	bf00      	nop
 8006e1c:	e000ed08 	.word	0xe000ed08

08006e20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b086      	sub	sp, #24
 8006e24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006e26:	4b46      	ldr	r3, [pc, #280]	; (8006f40 <xPortStartScheduler+0x120>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a46      	ldr	r2, [pc, #280]	; (8006f44 <xPortStartScheduler+0x124>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d10a      	bne.n	8006e46 <xPortStartScheduler+0x26>
	__asm volatile
 8006e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e34:	f383 8811 	msr	BASEPRI, r3
 8006e38:	f3bf 8f6f 	isb	sy
 8006e3c:	f3bf 8f4f 	dsb	sy
 8006e40:	613b      	str	r3, [r7, #16]
}
 8006e42:	bf00      	nop
 8006e44:	e7fe      	b.n	8006e44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006e46:	4b3e      	ldr	r3, [pc, #248]	; (8006f40 <xPortStartScheduler+0x120>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a3f      	ldr	r2, [pc, #252]	; (8006f48 <xPortStartScheduler+0x128>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d10a      	bne.n	8006e66 <xPortStartScheduler+0x46>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	60fb      	str	r3, [r7, #12]
}
 8006e62:	bf00      	nop
 8006e64:	e7fe      	b.n	8006e64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006e66:	4b39      	ldr	r3, [pc, #228]	; (8006f4c <xPortStartScheduler+0x12c>)
 8006e68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	22ff      	movs	r2, #255	; 0xff
 8006e76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006e88:	b2da      	uxtb	r2, r3
 8006e8a:	4b31      	ldr	r3, [pc, #196]	; (8006f50 <xPortStartScheduler+0x130>)
 8006e8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e8e:	4b31      	ldr	r3, [pc, #196]	; (8006f54 <xPortStartScheduler+0x134>)
 8006e90:	2207      	movs	r2, #7
 8006e92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e94:	e009      	b.n	8006eaa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006e96:	4b2f      	ldr	r3, [pc, #188]	; (8006f54 <xPortStartScheduler+0x134>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	4a2d      	ldr	r2, [pc, #180]	; (8006f54 <xPortStartScheduler+0x134>)
 8006e9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ea0:	78fb      	ldrb	r3, [r7, #3]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006eaa:	78fb      	ldrb	r3, [r7, #3]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb2:	2b80      	cmp	r3, #128	; 0x80
 8006eb4:	d0ef      	beq.n	8006e96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006eb6:	4b27      	ldr	r3, [pc, #156]	; (8006f54 <xPortStartScheduler+0x134>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f1c3 0307 	rsb	r3, r3, #7
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	d00a      	beq.n	8006ed8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	60bb      	str	r3, [r7, #8]
}
 8006ed4:	bf00      	nop
 8006ed6:	e7fe      	b.n	8006ed6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ed8:	4b1e      	ldr	r3, [pc, #120]	; (8006f54 <xPortStartScheduler+0x134>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	021b      	lsls	r3, r3, #8
 8006ede:	4a1d      	ldr	r2, [pc, #116]	; (8006f54 <xPortStartScheduler+0x134>)
 8006ee0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ee2:	4b1c      	ldr	r3, [pc, #112]	; (8006f54 <xPortStartScheduler+0x134>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006eea:	4a1a      	ldr	r2, [pc, #104]	; (8006f54 <xPortStartScheduler+0x134>)
 8006eec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	b2da      	uxtb	r2, r3
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006ef6:	4b18      	ldr	r3, [pc, #96]	; (8006f58 <xPortStartScheduler+0x138>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a17      	ldr	r2, [pc, #92]	; (8006f58 <xPortStartScheduler+0x138>)
 8006efc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006f00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f02:	4b15      	ldr	r3, [pc, #84]	; (8006f58 <xPortStartScheduler+0x138>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a14      	ldr	r2, [pc, #80]	; (8006f58 <xPortStartScheduler+0x138>)
 8006f08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006f0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f0e:	f000 f8dd 	bl	80070cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f12:	4b12      	ldr	r3, [pc, #72]	; (8006f5c <xPortStartScheduler+0x13c>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006f18:	f000 f8fc 	bl	8007114 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006f1c:	4b10      	ldr	r3, [pc, #64]	; (8006f60 <xPortStartScheduler+0x140>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a0f      	ldr	r2, [pc, #60]	; (8006f60 <xPortStartScheduler+0x140>)
 8006f22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006f26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006f28:	f7ff ff66 	bl	8006df8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f2c:	f7ff f850 	bl	8005fd0 <vTaskSwitchContext>
	prvTaskExitError();
 8006f30:	f7ff ff1c 	bl	8006d6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3718      	adds	r7, #24
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	e000ed00 	.word	0xe000ed00
 8006f44:	410fc271 	.word	0x410fc271
 8006f48:	410fc270 	.word	0x410fc270
 8006f4c:	e000e400 	.word	0xe000e400
 8006f50:	200014dc 	.word	0x200014dc
 8006f54:	200014e0 	.word	0x200014e0
 8006f58:	e000ed20 	.word	0xe000ed20
 8006f5c:	2000000c 	.word	0x2000000c
 8006f60:	e000ef34 	.word	0xe000ef34

08006f64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	607b      	str	r3, [r7, #4]
}
 8006f7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006f7e:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <vPortEnterCritical+0x58>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3301      	adds	r3, #1
 8006f84:	4a0d      	ldr	r2, [pc, #52]	; (8006fbc <vPortEnterCritical+0x58>)
 8006f86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006f88:	4b0c      	ldr	r3, [pc, #48]	; (8006fbc <vPortEnterCritical+0x58>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d10f      	bne.n	8006fb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f90:	4b0b      	ldr	r3, [pc, #44]	; (8006fc0 <vPortEnterCritical+0x5c>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00a      	beq.n	8006fb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	603b      	str	r3, [r7, #0]
}
 8006fac:	bf00      	nop
 8006fae:	e7fe      	b.n	8006fae <vPortEnterCritical+0x4a>
	}
}
 8006fb0:	bf00      	nop
 8006fb2:	370c      	adds	r7, #12
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fba:	4770      	bx	lr
 8006fbc:	2000000c 	.word	0x2000000c
 8006fc0:	e000ed04 	.word	0xe000ed04

08006fc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fca:	4b12      	ldr	r3, [pc, #72]	; (8007014 <vPortExitCritical+0x50>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10a      	bne.n	8006fe8 <vPortExitCritical+0x24>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	607b      	str	r3, [r7, #4]
}
 8006fe4:	bf00      	nop
 8006fe6:	e7fe      	b.n	8006fe6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	; (8007014 <vPortExitCritical+0x50>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	3b01      	subs	r3, #1
 8006fee:	4a09      	ldr	r2, [pc, #36]	; (8007014 <vPortExitCritical+0x50>)
 8006ff0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006ff2:	4b08      	ldr	r3, [pc, #32]	; (8007014 <vPortExitCritical+0x50>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d105      	bne.n	8007006 <vPortExitCritical+0x42>
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	f383 8811 	msr	BASEPRI, r3
}
 8007004:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007006:	bf00      	nop
 8007008:	370c      	adds	r7, #12
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
 8007012:	bf00      	nop
 8007014:	2000000c 	.word	0x2000000c
	...

08007020 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007020:	f3ef 8009 	mrs	r0, PSP
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	4b15      	ldr	r3, [pc, #84]	; (8007080 <pxCurrentTCBConst>)
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	f01e 0f10 	tst.w	lr, #16
 8007030:	bf08      	it	eq
 8007032:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007036:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800703a:	6010      	str	r0, [r2, #0]
 800703c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007040:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007044:	f380 8811 	msr	BASEPRI, r0
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f7fe ffbe 	bl	8005fd0 <vTaskSwitchContext>
 8007054:	f04f 0000 	mov.w	r0, #0
 8007058:	f380 8811 	msr	BASEPRI, r0
 800705c:	bc09      	pop	{r0, r3}
 800705e:	6819      	ldr	r1, [r3, #0]
 8007060:	6808      	ldr	r0, [r1, #0]
 8007062:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007066:	f01e 0f10 	tst.w	lr, #16
 800706a:	bf08      	it	eq
 800706c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007070:	f380 8809 	msr	PSP, r0
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	f3af 8000 	nop.w

08007080 <pxCurrentTCBConst>:
 8007080:	20000eb0 	.word	0x20000eb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007084:	bf00      	nop
 8007086:	bf00      	nop

08007088 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	607b      	str	r3, [r7, #4]
}
 80070a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80070a2:	f7fe fedb 	bl	8005e5c <xTaskIncrementTick>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d003      	beq.n	80070b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80070ac:	4b06      	ldr	r3, [pc, #24]	; (80070c8 <xPortSysTickHandler+0x40>)
 80070ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b2:	601a      	str	r2, [r3, #0]
 80070b4:	2300      	movs	r3, #0
 80070b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	f383 8811 	msr	BASEPRI, r3
}
 80070be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80070c0:	bf00      	nop
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	e000ed04 	.word	0xe000ed04

080070cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070d0:	4b0b      	ldr	r3, [pc, #44]	; (8007100 <vPortSetupTimerInterrupt+0x34>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070d6:	4b0b      	ldr	r3, [pc, #44]	; (8007104 <vPortSetupTimerInterrupt+0x38>)
 80070d8:	2200      	movs	r2, #0
 80070da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070dc:	4b0a      	ldr	r3, [pc, #40]	; (8007108 <vPortSetupTimerInterrupt+0x3c>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a0a      	ldr	r2, [pc, #40]	; (800710c <vPortSetupTimerInterrupt+0x40>)
 80070e2:	fba2 2303 	umull	r2, r3, r2, r3
 80070e6:	099b      	lsrs	r3, r3, #6
 80070e8:	4a09      	ldr	r2, [pc, #36]	; (8007110 <vPortSetupTimerInterrupt+0x44>)
 80070ea:	3b01      	subs	r3, #1
 80070ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80070ee:	4b04      	ldr	r3, [pc, #16]	; (8007100 <vPortSetupTimerInterrupt+0x34>)
 80070f0:	2207      	movs	r2, #7
 80070f2:	601a      	str	r2, [r3, #0]
}
 80070f4:	bf00      	nop
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	e000e010 	.word	0xe000e010
 8007104:	e000e018 	.word	0xe000e018
 8007108:	20000000 	.word	0x20000000
 800710c:	10624dd3 	.word	0x10624dd3
 8007110:	e000e014 	.word	0xe000e014

08007114 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007114:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007124 <vPortEnableVFP+0x10>
 8007118:	6801      	ldr	r1, [r0, #0]
 800711a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800711e:	6001      	str	r1, [r0, #0]
 8007120:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007122:	bf00      	nop
 8007124:	e000ed88 	.word	0xe000ed88

08007128 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007128:	b480      	push	{r7}
 800712a:	b085      	sub	sp, #20
 800712c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800712e:	f3ef 8305 	mrs	r3, IPSR
 8007132:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2b0f      	cmp	r3, #15
 8007138:	d914      	bls.n	8007164 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800713a:	4a17      	ldr	r2, [pc, #92]	; (8007198 <vPortValidateInterruptPriority+0x70>)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	4413      	add	r3, r2
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007144:	4b15      	ldr	r3, [pc, #84]	; (800719c <vPortValidateInterruptPriority+0x74>)
 8007146:	781b      	ldrb	r3, [r3, #0]
 8007148:	7afa      	ldrb	r2, [r7, #11]
 800714a:	429a      	cmp	r2, r3
 800714c:	d20a      	bcs.n	8007164 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800714e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007152:	f383 8811 	msr	BASEPRI, r3
 8007156:	f3bf 8f6f 	isb	sy
 800715a:	f3bf 8f4f 	dsb	sy
 800715e:	607b      	str	r3, [r7, #4]
}
 8007160:	bf00      	nop
 8007162:	e7fe      	b.n	8007162 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007164:	4b0e      	ldr	r3, [pc, #56]	; (80071a0 <vPortValidateInterruptPriority+0x78>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800716c:	4b0d      	ldr	r3, [pc, #52]	; (80071a4 <vPortValidateInterruptPriority+0x7c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	429a      	cmp	r2, r3
 8007172:	d90a      	bls.n	800718a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	603b      	str	r3, [r7, #0]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <vPortValidateInterruptPriority+0x60>
	}
 800718a:	bf00      	nop
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	e000e3f0 	.word	0xe000e3f0
 800719c:	200014dc 	.word	0x200014dc
 80071a0:	e000ed0c 	.word	0xe000ed0c
 80071a4:	200014e0 	.word	0x200014e0

080071a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08a      	sub	sp, #40	; 0x28
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80071b4:	f7fe fd96 	bl	8005ce4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80071b8:	4b5b      	ldr	r3, [pc, #364]	; (8007328 <pvPortMalloc+0x180>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80071c0:	f000 f920 	bl	8007404 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80071c4:	4b59      	ldr	r3, [pc, #356]	; (800732c <pvPortMalloc+0x184>)
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4013      	ands	r3, r2
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	f040 8093 	bne.w	80072f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01d      	beq.n	8007214 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80071d8:	2208      	movs	r2, #8
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4413      	add	r3, r2
 80071de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f003 0307 	and.w	r3, r3, #7
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d014      	beq.n	8007214 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f023 0307 	bic.w	r3, r3, #7
 80071f0:	3308      	adds	r3, #8
 80071f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f003 0307 	and.w	r3, r3, #7
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00a      	beq.n	8007214 <pvPortMalloc+0x6c>
	__asm volatile
 80071fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007202:	f383 8811 	msr	BASEPRI, r3
 8007206:	f3bf 8f6f 	isb	sy
 800720a:	f3bf 8f4f 	dsb	sy
 800720e:	617b      	str	r3, [r7, #20]
}
 8007210:	bf00      	nop
 8007212:	e7fe      	b.n	8007212 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d06e      	beq.n	80072f8 <pvPortMalloc+0x150>
 800721a:	4b45      	ldr	r3, [pc, #276]	; (8007330 <pvPortMalloc+0x188>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	429a      	cmp	r2, r3
 8007222:	d869      	bhi.n	80072f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007224:	4b43      	ldr	r3, [pc, #268]	; (8007334 <pvPortMalloc+0x18c>)
 8007226:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007228:	4b42      	ldr	r3, [pc, #264]	; (8007334 <pvPortMalloc+0x18c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800722e:	e004      	b.n	800723a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	429a      	cmp	r2, r3
 8007242:	d903      	bls.n	800724c <pvPortMalloc+0xa4>
 8007244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1f1      	bne.n	8007230 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800724c:	4b36      	ldr	r3, [pc, #216]	; (8007328 <pvPortMalloc+0x180>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007252:	429a      	cmp	r2, r3
 8007254:	d050      	beq.n	80072f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	2208      	movs	r2, #8
 800725c:	4413      	add	r3, r2
 800725e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	6a3b      	ldr	r3, [r7, #32]
 8007266:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	1ad2      	subs	r2, r2, r3
 8007270:	2308      	movs	r3, #8
 8007272:	005b      	lsls	r3, r3, #1
 8007274:	429a      	cmp	r2, r3
 8007276:	d91f      	bls.n	80072b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4413      	add	r3, r2
 800727e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00a      	beq.n	80072a0 <pvPortMalloc+0xf8>
	__asm volatile
 800728a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800728e:	f383 8811 	msr	BASEPRI, r3
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	f3bf 8f4f 	dsb	sy
 800729a:	613b      	str	r3, [r7, #16]
}
 800729c:	bf00      	nop
 800729e:	e7fe      	b.n	800729e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80072a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	1ad2      	subs	r2, r2, r3
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80072b2:	69b8      	ldr	r0, [r7, #24]
 80072b4:	f000 f908 	bl	80074c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80072b8:	4b1d      	ldr	r3, [pc, #116]	; (8007330 <pvPortMalloc+0x188>)
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	4a1b      	ldr	r2, [pc, #108]	; (8007330 <pvPortMalloc+0x188>)
 80072c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80072c6:	4b1a      	ldr	r3, [pc, #104]	; (8007330 <pvPortMalloc+0x188>)
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	4b1b      	ldr	r3, [pc, #108]	; (8007338 <pvPortMalloc+0x190>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d203      	bcs.n	80072da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80072d2:	4b17      	ldr	r3, [pc, #92]	; (8007330 <pvPortMalloc+0x188>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a18      	ldr	r2, [pc, #96]	; (8007338 <pvPortMalloc+0x190>)
 80072d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	4b13      	ldr	r3, [pc, #76]	; (800732c <pvPortMalloc+0x184>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	431a      	orrs	r2, r3
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80072e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ea:	2200      	movs	r2, #0
 80072ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80072ee:	4b13      	ldr	r3, [pc, #76]	; (800733c <pvPortMalloc+0x194>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3301      	adds	r3, #1
 80072f4:	4a11      	ldr	r2, [pc, #68]	; (800733c <pvPortMalloc+0x194>)
 80072f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80072f8:	f7fe fd02 	bl	8005d00 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	f003 0307 	and.w	r3, r3, #7
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00a      	beq.n	800731c <pvPortMalloc+0x174>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	60fb      	str	r3, [r7, #12]
}
 8007318:	bf00      	nop
 800731a:	e7fe      	b.n	800731a <pvPortMalloc+0x172>
	return pvReturn;
 800731c:	69fb      	ldr	r3, [r7, #28]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3728      	adds	r7, #40	; 0x28
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	200020a4 	.word	0x200020a4
 800732c:	200020b8 	.word	0x200020b8
 8007330:	200020a8 	.word	0x200020a8
 8007334:	2000209c 	.word	0x2000209c
 8007338:	200020ac 	.word	0x200020ac
 800733c:	200020b0 	.word	0x200020b0

08007340 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d04d      	beq.n	80073ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007352:	2308      	movs	r3, #8
 8007354:	425b      	negs	r3, r3
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4413      	add	r3, r2
 800735a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	4b24      	ldr	r3, [pc, #144]	; (80073f8 <vPortFree+0xb8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4013      	ands	r3, r2
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10a      	bne.n	8007384 <vPortFree+0x44>
	__asm volatile
 800736e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007372:	f383 8811 	msr	BASEPRI, r3
 8007376:	f3bf 8f6f 	isb	sy
 800737a:	f3bf 8f4f 	dsb	sy
 800737e:	60fb      	str	r3, [r7, #12]
}
 8007380:	bf00      	nop
 8007382:	e7fe      	b.n	8007382 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00a      	beq.n	80073a2 <vPortFree+0x62>
	__asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007390:	f383 8811 	msr	BASEPRI, r3
 8007394:	f3bf 8f6f 	isb	sy
 8007398:	f3bf 8f4f 	dsb	sy
 800739c:	60bb      	str	r3, [r7, #8]
}
 800739e:	bf00      	nop
 80073a0:	e7fe      	b.n	80073a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	4b14      	ldr	r3, [pc, #80]	; (80073f8 <vPortFree+0xb8>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4013      	ands	r3, r2
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d01e      	beq.n	80073ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d11a      	bne.n	80073ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	685a      	ldr	r2, [r3, #4]
 80073bc:	4b0e      	ldr	r3, [pc, #56]	; (80073f8 <vPortFree+0xb8>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	43db      	mvns	r3, r3
 80073c2:	401a      	ands	r2, r3
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80073c8:	f7fe fc8c 	bl	8005ce4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	4b0a      	ldr	r3, [pc, #40]	; (80073fc <vPortFree+0xbc>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4413      	add	r3, r2
 80073d6:	4a09      	ldr	r2, [pc, #36]	; (80073fc <vPortFree+0xbc>)
 80073d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80073da:	6938      	ldr	r0, [r7, #16]
 80073dc:	f000 f874 	bl	80074c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80073e0:	4b07      	ldr	r3, [pc, #28]	; (8007400 <vPortFree+0xc0>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3301      	adds	r3, #1
 80073e6:	4a06      	ldr	r2, [pc, #24]	; (8007400 <vPortFree+0xc0>)
 80073e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80073ea:	f7fe fc89 	bl	8005d00 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80073ee:	bf00      	nop
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	200020b8 	.word	0x200020b8
 80073fc:	200020a8 	.word	0x200020a8
 8007400:	200020b4 	.word	0x200020b4

08007404 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800740a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800740e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007410:	4b27      	ldr	r3, [pc, #156]	; (80074b0 <prvHeapInit+0xac>)
 8007412:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f003 0307 	and.w	r3, r3, #7
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00c      	beq.n	8007438 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3307      	adds	r3, #7
 8007422:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f023 0307 	bic.w	r3, r3, #7
 800742a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	1ad3      	subs	r3, r2, r3
 8007432:	4a1f      	ldr	r2, [pc, #124]	; (80074b0 <prvHeapInit+0xac>)
 8007434:	4413      	add	r3, r2
 8007436:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800743c:	4a1d      	ldr	r2, [pc, #116]	; (80074b4 <prvHeapInit+0xb0>)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007442:	4b1c      	ldr	r3, [pc, #112]	; (80074b4 <prvHeapInit+0xb0>)
 8007444:	2200      	movs	r2, #0
 8007446:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	4413      	add	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007450:	2208      	movs	r2, #8
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	1a9b      	subs	r3, r3, r2
 8007456:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0307 	bic.w	r3, r3, #7
 800745e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	4a15      	ldr	r2, [pc, #84]	; (80074b8 <prvHeapInit+0xb4>)
 8007464:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007466:	4b14      	ldr	r3, [pc, #80]	; (80074b8 <prvHeapInit+0xb4>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2200      	movs	r2, #0
 800746c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800746e:	4b12      	ldr	r3, [pc, #72]	; (80074b8 <prvHeapInit+0xb4>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	1ad2      	subs	r2, r2, r3
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007484:	4b0c      	ldr	r3, [pc, #48]	; (80074b8 <prvHeapInit+0xb4>)
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	4a0a      	ldr	r2, [pc, #40]	; (80074bc <prvHeapInit+0xb8>)
 8007492:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	4a09      	ldr	r2, [pc, #36]	; (80074c0 <prvHeapInit+0xbc>)
 800749a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800749c:	4b09      	ldr	r3, [pc, #36]	; (80074c4 <prvHeapInit+0xc0>)
 800749e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80074a2:	601a      	str	r2, [r3, #0]
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr
 80074b0:	200014e4 	.word	0x200014e4
 80074b4:	2000209c 	.word	0x2000209c
 80074b8:	200020a4 	.word	0x200020a4
 80074bc:	200020ac 	.word	0x200020ac
 80074c0:	200020a8 	.word	0x200020a8
 80074c4:	200020b8 	.word	0x200020b8

080074c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80074c8:	b480      	push	{r7}
 80074ca:	b085      	sub	sp, #20
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80074d0:	4b28      	ldr	r3, [pc, #160]	; (8007574 <prvInsertBlockIntoFreeList+0xac>)
 80074d2:	60fb      	str	r3, [r7, #12]
 80074d4:	e002      	b.n	80074dc <prvInsertBlockIntoFreeList+0x14>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	60fb      	str	r3, [r7, #12]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d8f7      	bhi.n	80074d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	68ba      	ldr	r2, [r7, #8]
 80074f0:	4413      	add	r3, r2
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d108      	bne.n	800750a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	441a      	add	r2, r3
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	441a      	add	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	429a      	cmp	r2, r3
 800751c:	d118      	bne.n	8007550 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681a      	ldr	r2, [r3, #0]
 8007522:	4b15      	ldr	r3, [pc, #84]	; (8007578 <prvInsertBlockIntoFreeList+0xb0>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	429a      	cmp	r2, r3
 8007528:	d00d      	beq.n	8007546 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	441a      	add	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	e008      	b.n	8007558 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007546:	4b0c      	ldr	r3, [pc, #48]	; (8007578 <prvInsertBlockIntoFreeList+0xb0>)
 8007548:	681a      	ldr	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	e003      	b.n	8007558 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007558:	68fa      	ldr	r2, [r7, #12]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	429a      	cmp	r2, r3
 800755e:	d002      	beq.n	8007566 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	687a      	ldr	r2, [r7, #4]
 8007564:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007566:	bf00      	nop
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	2000209c 	.word	0x2000209c
 8007578:	200020a4 	.word	0x200020a4

0800757c <memset>:
 800757c:	4402      	add	r2, r0
 800757e:	4603      	mov	r3, r0
 8007580:	4293      	cmp	r3, r2
 8007582:	d100      	bne.n	8007586 <memset+0xa>
 8007584:	4770      	bx	lr
 8007586:	f803 1b01 	strb.w	r1, [r3], #1
 800758a:	e7f9      	b.n	8007580 <memset+0x4>

0800758c <__libc_init_array>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	4d0d      	ldr	r5, [pc, #52]	; (80075c4 <__libc_init_array+0x38>)
 8007590:	4c0d      	ldr	r4, [pc, #52]	; (80075c8 <__libc_init_array+0x3c>)
 8007592:	1b64      	subs	r4, r4, r5
 8007594:	10a4      	asrs	r4, r4, #2
 8007596:	2600      	movs	r6, #0
 8007598:	42a6      	cmp	r6, r4
 800759a:	d109      	bne.n	80075b0 <__libc_init_array+0x24>
 800759c:	4d0b      	ldr	r5, [pc, #44]	; (80075cc <__libc_init_array+0x40>)
 800759e:	4c0c      	ldr	r4, [pc, #48]	; (80075d0 <__libc_init_array+0x44>)
 80075a0:	f000 f826 	bl	80075f0 <_init>
 80075a4:	1b64      	subs	r4, r4, r5
 80075a6:	10a4      	asrs	r4, r4, #2
 80075a8:	2600      	movs	r6, #0
 80075aa:	42a6      	cmp	r6, r4
 80075ac:	d105      	bne.n	80075ba <__libc_init_array+0x2e>
 80075ae:	bd70      	pop	{r4, r5, r6, pc}
 80075b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b4:	4798      	blx	r3
 80075b6:	3601      	adds	r6, #1
 80075b8:	e7ee      	b.n	8007598 <__libc_init_array+0xc>
 80075ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80075be:	4798      	blx	r3
 80075c0:	3601      	adds	r6, #1
 80075c2:	e7f2      	b.n	80075aa <__libc_init_array+0x1e>
 80075c4:	08007704 	.word	0x08007704
 80075c8:	08007704 	.word	0x08007704
 80075cc:	08007704 	.word	0x08007704
 80075d0:	08007708 	.word	0x08007708

080075d4 <memcpy>:
 80075d4:	440a      	add	r2, r1
 80075d6:	4291      	cmp	r1, r2
 80075d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80075dc:	d100      	bne.n	80075e0 <memcpy+0xc>
 80075de:	4770      	bx	lr
 80075e0:	b510      	push	{r4, lr}
 80075e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075ea:	4291      	cmp	r1, r2
 80075ec:	d1f9      	bne.n	80075e2 <memcpy+0xe>
 80075ee:	bd10      	pop	{r4, pc}

080075f0 <_init>:
 80075f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075f2:	bf00      	nop
 80075f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075f6:	bc08      	pop	{r3}
 80075f8:	469e      	mov	lr, r3
 80075fa:	4770      	bx	lr

080075fc <_fini>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	bf00      	nop
 8007600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007602:	bc08      	pop	{r3}
 8007604:	469e      	mov	lr, r3
 8007606:	4770      	bx	lr
